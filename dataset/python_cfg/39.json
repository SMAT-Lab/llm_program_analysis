{
  "name": "39.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nfrom typing import Literal\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nDiscordCredentials = CredentialsMetaInput[Literal[ProviderName.DISCORD],\n    Literal['api_key']]\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='discord', api_key=\n    SecretStr('test_api_key'), title='Mock Discord API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "DiscordCredentialsField",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nreturn CredentialsField(description='Discord bot token')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ReadDiscordMessagesBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nsuper().__init__(id='df06086a-d5ac-4abb-9996-2ad0acb2eff7', input_schema=\n    ReadDiscordMessagesBlock.Input, output_schema=ReadDiscordMessagesBlock.\n    Output, description=\n    'Reads messages from a Discord channel using a bot token.', categories=\n    {BlockCategory.SOCIAL}, test_input={'continuous_read': False,\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('message_content',\n    \"\"\"Hello!\n\nFile from user: example.txt\nContent: This is the content of the file.\"\"\"\n    ), ('channel_name', 'general'), ('username', 'test_user')], test_mock={\n    'run_bot': lambda token: asyncio.Future()})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_bot",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\nintents = discord.Intents.default()\nintents.message_content = True\nclient = discord.Client(intents=intents)\nself.output_data = None\nself.channel_name = None\nself.username = None\nawait client.start(token.get_secret_value())",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "on_ready",
              "type": "CFG",
              "blocks": [
                {
                  "id": 20,
                  "label": "#20\nprint(f'Logged in as {client.user}')",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "on_message",
              "type": "CFG",
              "blocks": [
                {
                  "id": 23,
                  "label": "#23\nif message.author == client.user:",
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nreturn",
                      "successors": []
                    },
                    {
                      "id": 25,
                      "label": "#25\nself.output_data = message.content\nself.channel_name = message.channel.name\nself.username = message.author.name\nif message.attachments:",
                      "successors": [
                        {
                          "id": 27,
                          "label": "#27\nattachment = message.attachments[0]\nif attachment.filename.endswith(('.txt', '.py')):",
                          "successors": [
                            {
                              "id": 29,
                              "label": "#29\nasync with aiohttp.ClientSession() as session:\n    async with session.get(attachment.url) as response:\n        file_content = await response.text()\n        self.output_data += (\n            f'\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}'\n            )",
                              "successors": [
                                {
                                  "id": 31,
                                  "label": "#31\nasync with session.get(attachment.url) as response:\n    file_content = await response.text()\n    self.output_data += (\n        f'\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}')",
                                  "successors": [
                                    {
                                      "id": 33,
                                      "label": "#33\nfile_content = await response.text()",
                                      "successors": [
                                        {
                                          "id": 35,
                                          "label": "#35\nself.output_data += f\"\"\"\n\nFile from user: {attachment.filename}\nContent: {file_content}\"\"\"",
                                          "successors": [
                                            {
                                              "id": 28,
                                              "label": "#28\nawait client.close()",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 41,
              "label": "#41\nwhile True:",
              "successors": [
                {
                  "id": 42,
                  "label": "#42\nfor output_name, output_value in self.__run(input_data, credentials):",
                  "successors": [
                    {
                      "id": 44,
                      "label": "#44\nyield output_name, output_value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__run",
          "type": "CFG",
          "blocks": [
            {
              "id": 49,
              "label": "#49\ntry:",
              "successors": [
                {
                  "id": 50,
                  "label": "#50\nloop = asyncio.get_event_loop()\nfuture = self.run_bot(credentials.api_key)\nif isinstance(future, asyncio.Future):",
                  "successors": [
                    {
                      "id": 54,
                      "label": "#54\nfuture.set_result({'output_data':\n    \"\"\"Hello!\n\nFile from user: example.txt\nContent: This is the content of the file.\"\"\"\n    , 'channel_name': 'general', 'username': 'test_user'})",
                      "successors": [
                        {
                          "id": 55,
                          "label": "#55\nresult = loop.run_until_complete(future)\nif isinstance(result, dict):",
                          "successors": [
                            {
                              "id": 56,
                              "label": "#56\nself.output_data = result.get('output_data')\nself.channel_name = result.get('channel_name')\nself.username = result.get('username')",
                              "successors": [
                                {
                                  "id": 57,
                                  "label": "#57\nif self.output_data is None or self.channel_name is None or self.username is None:",
                                  "successors": [
                                    {
                                      "id": 58,
                                      "label": "#58\nraise ValueError('No message, channel name, or username received.')",
                                      "successors": []
                                    },
                                    {
                                      "id": 59,
                                      "label": "#59\nyield 'message_content', self.output_data",
                                      "successors": [
                                        {
                                          "id": 61,
                                          "label": "#61\nyield 'channel_name', self.channel_name",
                                          "successors": [
                                            {
                                              "id": 62,
                                              "label": "#62\nyield 'username', self.username",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 51,
                  "label": "#51\nraise ValueError(f'Login error occurred: {login_err}')",
                  "successors": []
                },
                {
                  "id": 52,
                  "label": "#52\nraise ValueError(f'An error occurred: {e}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 9,
              "label": "#9\ncredentials: DiscordCredentials = DiscordCredentialsField()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nmessage_content: str = SchemaField(description=\n    'The content of the message received')\nchannel_name: str = SchemaField(description=\n    'The name of the channel the message was received from')\nusername: str = SchemaField(description=\n    'The username of the user who sent the message')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "SendDiscordMessageBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 69,
          "label": "#69",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nsuper().__init__(id='d0822ab5-9f8a-44a3-8971-531dd0178b6b', input_schema=\n    SendDiscordMessageBlock.Input, output_schema=SendDiscordMessageBlock.\n    Output, description=\n    'Sends a message to a Discord channel using a bot token.', categories={\n    BlockCategory.SOCIAL}, test_input={'channel_name': 'general',\n    'message_content': 'Hello, Discord!', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_output=[('status', 'Message sent')],\n    test_mock={'send_message': lambda token, channel_name, message_content:\n    asyncio.Future()}, test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 80,
              "label": "#80\nintents = discord.Intents.default()\nintents.guilds = True\nclient = discord.Client(intents=intents)\nawait client.start(token)",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "on_ready",
              "type": "CFG",
              "blocks": [
                {
                  "id": 82,
                  "label": "#82\nprint(f'Logged in as {client.user}')",
                  "successors": [
                    {
                      "id": 83,
                      "label": "#83\nfor guild in client.guilds:",
                      "successors": [
                        {
                          "id": 84,
                          "label": "#84\nfor channel in guild.text_channels:",
                          "successors": [
                            {
                              "id": 86,
                              "label": "#86\nif channel.name == channel_name:",
                              "successors": [
                                {
                                  "id": 88,
                                  "label": "#88\nfor chunk in self.chunk_message(message_content):",
                                  "successors": [
                                    {
                                      "id": 90,
                                      "label": "#90\nawait channel.send(chunk)",
                                      "successors": []
                                    },
                                    {
                                      "id": 91,
                                      "label": "#91\nself.output_data = 'Message sent'\nawait client.close()",
                                      "successors": [
                                        {
                                          "id": 93,
                                          "label": "#93\nreturn",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 85,
                          "label": "#85\nself.output_data = 'Channel not found'\nawait client.close()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        },
        {
          "name": "chunk_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 100,
              "label": "#100\n\"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\nreturn [message[i:i + limit] for i in range(0, len(message), limit)]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 104,
              "label": "#104\ntry:",
              "successors": [
                {
                  "id": 105,
                  "label": "#105\nloop = asyncio.get_event_loop()\nfuture = self.send_message(credentials.api_key.get_secret_value(),\n    input_data.channel_name, input_data.message_content)\nif isinstance(future, asyncio.Future):",
                  "successors": [
                    {
                      "id": 109,
                      "label": "#109\nfuture.set_result('Message sent')",
                      "successors": [
                        {
                          "id": 110,
                          "label": "#110\nresult = loop.run_until_complete(future)\nif isinstance(result, str):",
                          "successors": [
                            {
                              "id": 111,
                              "label": "#111\nself.output_data = result",
                              "successors": [
                                {
                                  "id": 112,
                                  "label": "#112\nif self.output_data is None:",
                                  "successors": [
                                    {
                                      "id": 113,
                                      "label": "#113\nraise ValueError('No status message received.')",
                                      "successors": []
                                    },
                                    {
                                      "id": 114,
                                      "label": "#114\nyield 'status', self.output_data",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 106,
                  "label": "#106\nraise ValueError(f'Login error occurred: {login_err}')",
                  "successors": []
                },
                {
                  "id": 107,
                  "label": "#107\nraise ValueError(f'An error occurred: {e}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 71,
              "label": "#71\ncredentials: DiscordCredentials = DiscordCredentialsField()\nmessage_content: str = SchemaField(description=\n    'The content of the message received')\nchannel_name: str = SchemaField(description=\n    'The name of the channel the message was received from')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\nstatus: str = SchemaField(description=\n    \"The status of the operation (e.g., 'Message sent', 'Error')\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}