{
  "name": "177.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\nfrom expiringdict import ExpiringDict\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "label": "#2\nfrom redis import Redis\nfrom redis.lock import Lock as RedisLock",
          "successors": [
            {
              "id": 3,
              "label": "#3",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "RedisKeyedMutex",
      "type": "CFG",
      "blocks": [
        {
          "id": 5,
          "label": "#5\n\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 7,
              "label": "#7\nself.redis = redis\nself.timeout = timeout\nself.locks: dict[Any, 'RedisLock'] = ExpiringDict(max_len=6000,\n    max_age_seconds=self.timeout)\nself.locks_lock = Lock()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "locked",
          "type": "CFG",
          "blocks": [
            {
              "id": 10,
              "label": "#10\nlock = self.acquire(key)\ntry:",
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nyield",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "acquire",
          "type": "CFG",
          "blocks": [
            {
              "id": 16,
              "label": "#16\n\"\"\"Acquires and returns a lock with the given key\"\"\"\nwith self.locks_lock:",
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nif key not in self.locks:",
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nself.locks[key] = self.redis.lock(str(key), self.timeout, thread_local=False)",
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nlock = self.locks[key]",
                          "successors": [
                            {
                              "id": 18,
                              "label": "#18\nlock.acquire()\nreturn lock",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "release",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nif (lock := self.locks.get(key)) and lock.locked() and lock.owned():",
              "successors": [
                {
                  "id": 25,
                  "label": "#25\nlock.release()",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "release_all_locks",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"\nself.locks_lock.acquire(blocking=False)",
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nfor lock in self.locks.values():",
                  "successors": [
                    {
                      "id": 31,
                      "label": "#31\nif lock.locked() and lock.owned():",
                      "successors": [
                        {
                          "id": 33,
                          "label": "#33\nlock.release()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}