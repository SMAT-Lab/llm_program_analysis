{
  "name": "143.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport contextlib\nimport logging\nimport typing\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\nfrom autogpt_libs.feature_flag.client import initialize_launchdarkly, shutdown_launchdarkly\nimport backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\nlogging.getLogger('autogpt_libs').setLevel(logging.INFO)\ndocs_url = ('/docs' if settings.config.app_env == backend.util.settings.\n    AppEnvironment.LOCAL else None)\napp = fastapi.FastAPI(title='AutoGPT Agent Server', description=\n    'This server is used to execute agents that are created by the AutoGPT system.'\n    , summary='AutoGPT Agent Server', version='0.1', lifespan=\n    lifespan_context, docs_url=docs_url)\napp.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\napp.include_router(backend.server.routers.v1.v1_router, tags=['v1'], prefix\n    ='/api')\napp.include_router(backend.server.v2.store.routes.router, tags=['v2'],\n    prefix='/api/store')\napp.include_router(backend.server.v2.library.routes.router, tags=['v2'],\n    prefix='/api/library')",
      "start_line": 1,
      "end_line": 153,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "launch_darkly_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nif settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:",
          "start_line": 32,
          "end_line": 39,
          "successors": [
            {
              "id": 4,
              "label": "#4\ninitialize_launchdarkly()\ntry:",
              "start_line": 33,
              "end_line": 37,
              "successors": [
                {
                  "id": 8,
                  "label": "#8\nyield",
                  "start_line": 35,
                  "end_line": 35,
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "#6\nyield",
              "start_line": 39,
              "end_line": 39,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "lifespan_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\nawait backend.data.db.connect()",
          "start_line": 44,
          "end_line": 44,
          "successors": [
            {
              "id": 14,
              "label": "#14\nawait backend.data.block.initialize_blocks()",
              "start_line": 45,
              "end_line": 45,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nawait backend.data.user.migrate_and_encrypt_user_integrations()",
                  "start_line": 46,
                  "end_line": 46,
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\nawait backend.data.graph.fix_llm_provider_credentials()",
                      "start_line": 47,
                      "end_line": 47,
                      "successors": [
                        {
                          "id": 17,
                          "label": "#17\nwith launch_darkly_context():",
                          "start_line": 48,
                          "end_line": 49,
                          "successors": [
                            {
                              "id": 18,
                              "label": "#18\nyield",
                              "start_line": 49,
                              "end_line": 49,
                              "successors": [
                                {
                                  "id": 19,
                                  "label": "#19\nawait backend.data.db.disconnect()",
                                  "start_line": 50,
                                  "end_line": 50,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_internal_http_error",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\nreturn handler",
          "start_line": 73,
          "end_line": 84,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "handler",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\nif log_error:",
              "start_line": 74,
              "end_line": 75,
              "successors": [
                {
                  "id": 27,
                  "label": "#27\nlogger.exception(f'{request.method} {request.url.path} failed: {exc}')",
                  "start_line": 75,
                  "end_line": 75,
                  "successors": [
                    {
                      "id": 28,
                      "label": "#28\nreturn fastapi.responses.JSONResponse(content={'message':\n    f'{request.method} {request.url.path} failed', 'detail': str(exc)},\n    status_code=status_code)",
                      "start_line": 76,
                      "end_line": 82,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "health",
      "type": "CFG",
      "blocks": [
        {
          "id": 34,
          "label": "#34\nreturn {'status': 'healthy'}",
          "start_line": 100,
          "end_line": 100,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentServer",
      "type": "CFG",
      "blocks": [
        {
          "id": 38,
          "label": "#38",
          "start_line": 104,
          "end_line": 153,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 40,
              "label": "#40\nserver_app = starlette.middleware.cors.CORSMiddleware(app=app,\n    allow_origins=settings.config.backend_cors_allow_origins,\n    allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\nuvicorn.run(server_app, host=backend.util.settings.Config().agent_api_host,\n    port=backend.util.settings.Config().agent_api_port)",
              "start_line": 105,
              "end_line": 116,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_execute_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\nreturn backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
              "start_line": 122,
              "end_line": 122,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_create_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 47,
              "label": "#47\nreturn await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
              "start_line": 129,
              "end_line": 129,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_graph_run_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 51,
              "label": "#51\nexecution = await backend.data.graph.get_execution(user_id=user_id,\n    execution_id=graph_exec_id)",
              "start_line": 133,
              "end_line": 135,
              "successors": [
                {
                  "id": 52,
                  "label": "#52\nif not execution:",
                  "start_line": 136,
                  "end_line": 137,
                  "successors": [
                    {
                      "id": 53,
                      "label": "#53\nraise ValueError(f'Execution {graph_exec_id} not found')",
                      "start_line": 137,
                      "end_line": 137,
                      "successors": []
                    },
                    {
                      "id": 54,
                      "label": "#54\nreturn execution.status",
                      "start_line": 138,
                      "end_line": 138,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_graph_run_node_execution_results",
          "type": "CFG",
          "blocks": [
            {
              "id": 59,
              "label": "#59\nreturn await backend.server.routers.v1.get_graph_run_node_execution_results(\n    graph_id, graph_exec_id, user_id)",
              "start_line": 144,
              "end_line": 146,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_delete_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 63,
              "label": "#63\nreturn await backend.server.routers.v1.delete_graph(graph_id, user_id)",
              "start_line": 150,
              "end_line": 150,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set_test_dependency_overrides",
          "type": "CFG",
          "blocks": [
            {
              "id": 67,
              "label": "#67\napp.dependency_overrides.update(overrides)",
              "start_line": 153,
              "end_line": 153,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}