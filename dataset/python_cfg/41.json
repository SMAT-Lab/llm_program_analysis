{
  "name": "41.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\nif __name__ == '__main__':",
      "start_line": 4,
      "end_line": 83,
      "successors": [
        {
          "id": 36,
          "label": "#36\nmain()",
          "start_line": 83,
          "end_line": 83,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "sort_blocks",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nwith open('README.md', 'r') as read_me_file:",
          "start_line": 19,
          "end_line": 20,
          "successors": [
            {
              "id": 4,
              "label": "#4\nread_me = read_me_file.read()",
              "start_line": 20,
              "end_line": 20,
              "successors": [
                {
                  "id": 5,
                  "label": "#5\ntable_of_contents = ''.join(read_me.split('- - -')[0])\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
                  "start_line": 23,
                  "end_line": 24,
                  "successors": [
                    {
                      "id": 6,
                      "label": "#6\nfor i in range(len(blocks)):",
                      "start_line": 25,
                      "end_line": 29,
                      "successors": [
                        {
                          "id": 7,
                          "label": "#7\nif i == 0:",
                          "start_line": 26,
                          "end_line": 29,
                          "successors": [
                            {
                              "id": 9,
                              "label": "#9\nblocks[i] = blocks[i] + '\\n'",
                              "start_line": 27,
                              "end_line": 27,
                              "successors": []
                            },
                            {
                              "id": 11,
                              "label": "#11\nblocks[i] = '# ' + blocks[i] + '\\n'",
                              "start_line": 29,
                              "end_line": 29,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "#8\ninner_blocks = sorted(blocks[0].split('##'))",
                          "start_line": 32,
                          "end_line": 32,
                          "successors": [
                            {
                              "id": 12,
                              "label": "#12\nfor i in range(1, len(inner_blocks)):",
                              "start_line": 33,
                              "end_line": 35,
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "#13\nif inner_blocks[i][0] != '#':",
                                  "start_line": 34,
                                  "end_line": 35,
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "#15\ninner_blocks[i] = '##' + inner_blocks[i]",
                                      "start_line": 35,
                                      "end_line": 35,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "#14\ninner_blocks = ''.join(inner_blocks)\nblocks[0] = inner_blocks\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)\nwith open('README.md', 'w+') as sorted_file:",
                                  "start_line": 36,
                                  "end_line": 43,
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "#17\nsorted_file.write(final_README)",
                                      "start_line": 43,
                                      "end_line": 43,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 21,
          "label": "#21\nwith open('README.md', 'r') as read_me_file:",
          "start_line": 47,
          "end_line": 48,
          "successors": [
            {
              "id": 22,
              "label": "#22\nread_me = read_me_file.readlines()",
              "start_line": 48,
              "end_line": 48,
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nblocks = []\nlast_indent = None",
                  "start_line": 54,
                  "end_line": 55,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nfor line in read_me:",
                      "start_line": 56,
                      "end_line": 68,
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\ns_line = line.lstrip()\nindent = len(line) - len(s_line)\nif any([s_line.startswith(s) for s in ['* [', '- [']]):",
                          "start_line": 57,
                          "end_line": 68,
                          "successors": [
                            {
                              "id": 27,
                              "label": "#27\nif indent == last_indent:",
                              "start_line": 61,
                              "end_line": 64,
                              "successors": [
                                {
                                  "id": 30,
                                  "label": "#30\nblocks[-1].append(line)",
                                  "start_line": 62,
                                  "end_line": 62,
                                  "successors": [
                                    {
                                      "id": 31,
                                      "label": "#31\nlast_indent = indent",
                                      "start_line": 65,
                                      "end_line": 65,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 32,
                                  "label": "#32\nblocks.append([line])",
                                  "start_line": 64,
                                  "end_line": 64,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 29,
                              "label": "#29\nblocks.append([line])\nlast_indent = None",
                              "start_line": 67,
                              "end_line": 68,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 26,
                          "label": "#26\nwith open('README.md', 'w+') as sorted_file:",
                          "start_line": 70,
                          "end_line": 76,
                          "successors": [
                            {
                              "id": 33,
                              "label": "#33\nblocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\nsorted_file.write(''.join(blocks))",
                              "start_line": 72,
                              "end_line": 76,
                              "successors": [
                                {
                                  "id": 34,
                                  "label": "#34\nsort_blocks()",
                                  "start_line": 79,
                                  "end_line": 79,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}