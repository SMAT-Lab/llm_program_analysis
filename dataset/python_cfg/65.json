{
  "name": "65.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 20,
          "label": "#20\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\nif current_sum == needed_sum:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nsolutions_count += 1\nreturn current_sum, solutions_count",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\ni_to_n = current_number ** power\nif current_sum + i_to_n <= needed_sum:",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\ncurrent_sum += i_to_n\ncurrent_sum, solutions_count = backtrack(needed_sum, power, current_number +\n    1, current_sum, solutions_count)\ncurrent_sum -= i_to_n",
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nif i_to_n < needed_sum:",
                      "successors": [
                        {
                          "id": 9,
                          "label": "#9\ncurrent_sum, solutions_count = backtrack(needed_sum, power, current_number +\n    1, current_sum, solutions_count)",
                          "successors": [
                            {
                              "id": 10,
                              "label": "#10\nreturn current_sum, solutions_count",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "solve",
      "type": "CFG",
      "blocks": [
        {
          "id": 14,
          "label": "#14\n\"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\nif not (1 <= needed_sum <= 1000 and 2 <= power <= 10):",
          "successors": [
            {
              "id": 15,
              "label": "#15\nraise ValueError(\n    \"\"\"Invalid input\nneeded_sum must be between 1 and 1000, power between 2 and 10.\"\"\"\n    )",
              "successors": []
            },
            {
              "id": 16,
              "label": "#16\nreturn backtrack(needed_sum, power, 1, 0, 0)[1]",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}