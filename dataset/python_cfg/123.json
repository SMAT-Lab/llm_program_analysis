{
  "name": "123.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport uuid\nfrom typing import List\nimport requests as baserequests\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom backend.util import settings\nfrom backend.util.settings import BehaveAs\nfrom ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, CustomerDetails, OrderItem, Slant3DCredentialsField, Slant3DCredentialsInput\nfrom .base import Slant3DBlockBase",
      "start_line": 1,
      "end_line": 418,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Slant3DCreateOrderBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Block for creating new orders\"\"\"",
          "start_line": 23,
          "end_line": 95,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='f73007d6-f48f-4aaf-9e6b-6883998a09b4', description=\n    'Create a new print order', input_schema=self.Input, output_schema=self\n    .Output, test_input={'credentials': TEST_CREDENTIALS_INPUT,\n    'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email':\n    'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St',\n    'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{\n    'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color':\n    'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS,\n    test_output=[('order_id', '314144241')], test_mock={'_make_request': lambda\n    *args, **kwargs: {'orderId': '314144241'}, '_convert_to_color': lambda\n    *args, **kwargs: 'black'})",
              "start_line": 45,
              "end_line": 77,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ntry:",
              "start_line": 82,
              "end_line": 95,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\norder_data = self._format_order_data(input_data.customer, input_data.\n    order_number, input_data.items, credentials.api_key.get_secret_value())\nresult = self._make_request('POST', 'order', credentials.api_key.\n    get_secret_value(), json=order_data)\nyield 'order_id', result['orderId']",
                  "start_line": 83,
                  "end_line": 92,
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "#16\nyield 'error', str(e)",
                  "start_line": 94,
                  "end_line": 94,
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nraise",
                      "start_line": 95,
                      "end_line": 95,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\norder_number: str = SchemaField(description=\n    'Your custom order number (or leave blank for a random one)',\n    default_factory=lambda : str(uuid.uuid4()))\ncustomer: CustomerDetails = SchemaField(description=\n    'Customer details for where to ship the item', advanced=False)\nitems: List[OrderItem] = SchemaField(description='List of items to print',\n    advanced=False)",
              "start_line": 26,
              "end_line": 38,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\norder_id: str = SchemaField(description='Slant3D order ID')\nerror: str = SchemaField(description='Error message if order failed')",
              "start_line": 41,
              "end_line": 42,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "Slant3DEstimateOrderBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\n\"\"\"Block for getting order cost estimates\"\"\"",
          "start_line": 99,
          "end_line": 186,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nsuper().__init__(id='bf8823d6-b42a-48c7-b558-d7c117f2ae85', description=\n    'Get order cost estimate', input_schema=self.Input, output_schema=self.\n    Output, test_input={'credentials': TEST_CREDENTIALS_INPUT,\n    'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email':\n    'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St',\n    'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{\n    'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color':\n    'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS,\n    test_output=[('total_price', 9.31), ('shipping_cost', 5.56), (\n    'printing_cost', 3.75)], test_mock={'_make_request': lambda *args, **\n    kwargs: {'totalPrice': 9.31, 'shippingCost': 5.56, 'printingCost': 3.75\n    }, '_convert_to_color': lambda *args, **kwargs: 'black'})",
              "start_line": 123,
              "end_line": 163,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\norder_data = self._format_order_data(input_data.customer, input_data.\n    order_number, input_data.items, credentials.api_key.get_secret_value())\ntry:",
              "start_line": 168,
              "end_line": 186,
              "successors": [
                {
                  "id": 36,
                  "label": "#36\nresult = self._make_request('POST', 'order/estimate', credentials.api_key.\n    get_secret_value(), json=order_data)\nyield 'total_price', result['totalPrice']",
                  "start_line": 175,
                  "end_line": 181,
                  "successors": [
                    {
                      "id": 39,
                      "label": "#39\nyield 'shipping_cost', result['shippingCost']",
                      "start_line": 182,
                      "end_line": 182,
                      "successors": [
                        {
                          "id": 40,
                          "label": "#40\nyield 'printing_cost', result['printingCost']",
                          "start_line": 183,
                          "end_line": 183,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 37,
                  "label": "#37\nyield 'error', str(f'Error estimating order: {e} {e.response.text}')",
                  "start_line": 185,
                  "end_line": 185,
                  "successors": [
                    {
                      "id": 42,
                      "label": "#42\nraise",
                      "start_line": 186,
                      "end_line": 186,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\norder_number: str = SchemaField(description=\n    'Your custom order number (or leave blank for a random one)',\n    default_factory=lambda : str(uuid.uuid4()))\ncustomer: CustomerDetails = SchemaField(description=\n    'Customer details for where to ship the item', advanced=False)\nitems: List[OrderItem] = SchemaField(description='List of items to print',\n    advanced=False)",
              "start_line": 102,
              "end_line": 114,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\ntotal_price: float = SchemaField(description='Total price in USD')\nshipping_cost: float = SchemaField(description='Shipping cost')\nprinting_cost: float = SchemaField(description='Printing cost')\nerror: str = SchemaField(description='Error message if estimation failed')",
              "start_line": 117,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "Slant3DEstimateShippingBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 47,
          "label": "#47\n\"\"\"Block for getting shipping cost estimates\"\"\"",
          "start_line": 190,
          "end_line": 269,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 55,
              "label": "#55\nsuper().__init__(id='00aae2a1-caf6-4a74-8175-39a0615d44e1', description=\n    'Get shipping cost estimate', input_schema=self.Input, output_schema=\n    self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT,\n    'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email':\n    'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St',\n    'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{\n    'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color':\n    'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS,\n    test_output=[('shipping_cost', 4.81), ('currency_code', 'usd')],\n    test_mock={'_make_request': lambda *args, **kwargs: {'shippingCost': \n    4.81, 'currencyCode': 'usd'}, '_convert_to_color': lambda *args, **\n    kwargs: 'black'})",
              "start_line": 212,
              "end_line": 247,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 58,
              "label": "#58\ntry:",
              "start_line": 252,
              "end_line": 269,
              "successors": [
                {
                  "id": 59,
                  "label": "#59\norder_data = self._format_order_data(input_data.customer, input_data.\n    order_number, input_data.items, credentials.api_key.get_secret_value())\nresult = self._make_request('POST', 'order/estimateShipping', credentials.\n    api_key.get_secret_value(), json=order_data)\nyield 'shipping_cost', result['shippingCost']",
                  "start_line": 253,
                  "end_line": 265,
                  "successors": [
                    {
                      "id": 62,
                      "label": "#62\nyield 'currency_code', result['currencyCode']",
                      "start_line": 266,
                      "end_line": 266,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 60,
                  "label": "#60\nyield 'error', str(e)",
                  "start_line": 268,
                  "end_line": 268,
                  "successors": [
                    {
                      "id": 64,
                      "label": "#64\nraise",
                      "start_line": 269,
                      "end_line": 269,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 49,
              "label": "#49\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\norder_number: str = SchemaField(description=\n    'Your custom order number (or leave blank for a random one)',\n    default_factory=lambda : str(uuid.uuid4()))\ncustomer: CustomerDetails = SchemaField(description=\n    'Customer details for where to ship the item')\nitems: List[OrderItem] = SchemaField(description='List of items to print',\n    advanced=False)",
              "start_line": 193,
              "end_line": 204,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 52,
              "label": "#52\nshipping_cost: float = SchemaField(description='Estimated shipping cost')\ncurrency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")\nerror: str = SchemaField(description='Error message if estimation failed')",
              "start_line": 207,
              "end_line": 209,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "Slant3DGetOrdersBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 69,
          "label": "#69\n\"\"\"Block for retrieving all orders\"\"\"",
          "start_line": 273,
          "end_line": 325,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nsuper().__init__(id='42283bf5-8a32-4fb4-92a2-60a9ea48e105', description=\n    'Get all orders for the account', input_schema=self.Input,\n    output_schema=self.Output, disabled=settings.Settings().config.\n    behave_as == BehaveAs.CLOUD, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('orders', ['1234567890'])], test_mock={'_make_request': lambda *args,\n    **kwargs: {'ordersData': [{'orderId': 1234567890, 'orderTimestamp': {\n    '_seconds': 1719510986, '_nanoseconds': 710000000}}]}})",
              "start_line": 283,
              "end_line": 313,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 80,
              "label": "#80\ntry:",
              "start_line": 318,
              "end_line": 325,
              "successors": [
                {
                  "id": 81,
                  "label": "#81\nresult = self._make_request('GET', 'order', credentials.api_key.\n    get_secret_value())\nyield 'orders', [str(order['orderId']) for order in result['ordersData']]",
                  "start_line": 319,
                  "end_line": 322,
                  "successors": []
                },
                {
                  "id": 82,
                  "label": "#82\nyield 'error', str(e)",
                  "start_line": 324,
                  "end_line": 324,
                  "successors": [
                    {
                      "id": 85,
                      "label": "#85\nraise",
                      "start_line": 325,
                      "end_line": 325,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 71,
              "label": "#71\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "start_line": 276,
              "end_line": 276,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\norders: List[str] = SchemaField(description='List of orders with their details'\n    )\nerror: str = SchemaField(description='Error message if request failed')",
              "start_line": 279,
              "end_line": 280,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "Slant3DTrackingBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 90,
          "label": "#90\n\"\"\"Block for tracking order status and shipping\"\"\"",
          "start_line": 329,
          "end_line": 375,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 98,
              "label": "#98\nsuper().__init__(id='dd7c0293-c5af-4551-ba3e-fc162fb1fb89', description=\n    'Track order status and shipping', input_schema=self.Input,\n    output_schema=self.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'order_id': '314144241'}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('status', 'awaiting_shipment'), (\n    'tracking_numbers', [])], test_mock={'_make_request': lambda *args, **\n    kwargs: {'status': 'awaiting_shipment', 'trackingNumbers': []}})",
              "start_line": 343,
              "end_line": 360,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 101,
              "label": "#101\ntry:",
              "start_line": 365,
              "end_line": 375,
              "successors": [
                {
                  "id": 102,
                  "label": "#102\nresult = self._make_request('GET',\n    f'order/{input_data.order_id}/get-tracking', credentials.api_key.\n    get_secret_value())\nyield 'status', result['status']",
                  "start_line": 366,
                  "end_line": 371,
                  "successors": [
                    {
                      "id": 105,
                      "label": "#105\nyield 'tracking_numbers', result['trackingNumbers']",
                      "start_line": 372,
                      "end_line": 372,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 103,
                  "label": "#103\nyield 'error', str(e)",
                  "start_line": 374,
                  "end_line": 374,
                  "successors": [
                    {
                      "id": 107,
                      "label": "#107\nraise",
                      "start_line": 375,
                      "end_line": 375,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 92,
              "label": "#92\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\norder_id: str = SchemaField(description='Slant3D order ID to track')",
              "start_line": 332,
              "end_line": 333,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 95,
              "label": "#95\nstatus: str = SchemaField(description='Order status')\ntracking_numbers: List[str] = SchemaField(description=\n    'List of tracking numbers')\nerror: str = SchemaField(description='Error message if tracking failed')",
              "start_line": 336,
              "end_line": 340,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "Slant3DCancelOrderBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 112,
          "label": "#112\n\"\"\"Block for canceling orders\"\"\"",
          "start_line": 379,
          "end_line": 418,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 120,
              "label": "#120\nsuper().__init__(id='54de35e1-407f-450b-b5fa-3b5e2eba8185', description=\n    'Cancel an existing order', input_schema=self.Input, output_schema=self\n    .Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_id':\n    '314144241'}, test_credentials=TEST_CREDENTIALS, test_output=[('status',\n    'Order cancelled')], test_mock={'_make_request': lambda *args, **kwargs:\n    {'status': 'Order cancelled'}})",
              "start_line": 390,
              "end_line": 404,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 123,
              "label": "#123\ntry:",
              "start_line": 409,
              "end_line": 418,
              "successors": [
                {
                  "id": 124,
                  "label": "#124\nresult = self._make_request('DELETE', f'order/{input_data.order_id}',\n    credentials.api_key.get_secret_value())\nyield 'status', result['status']",
                  "start_line": 410,
                  "end_line": 415,
                  "successors": []
                },
                {
                  "id": 125,
                  "label": "#125\nyield 'error', str(e)",
                  "start_line": 417,
                  "end_line": 417,
                  "successors": [
                    {
                      "id": 128,
                      "label": "#128\nraise",
                      "start_line": 418,
                      "end_line": 418,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 114,
              "label": "#114\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\norder_id: str = SchemaField(description='Slant3D order ID to cancel')",
              "start_line": 382,
              "end_line": 383,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 117,
              "label": "#117\nstatus: str = SchemaField(description='Cancellation status message')\nerror: str = SchemaField(description='Error message if cancellation failed')",
              "start_line": 386,
              "end_line": 387,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}