{
  "name": "201.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom __future__ import annotations\nfrom abc import abstractmethod\nfrom math import pi\nfrom typing import Protocol\nimport matplotlib.pyplot as plt\nimport numpy as np",
      "start_line": 1,
      "end_line": 95,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_bounds",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n\"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\nlowest = min([-20, np.min(fft_results[1:samplerate // 2 - 1])])\nhighest = max([20, np.max(fft_results[1:samplerate // 2 - 1])])\nreturn lowest, highest",
          "start_line": 25,
          "end_line": 35,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "show_frequency_response",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\nsize = 512\ninputs = [1] + [0] * (size - 1)\noutputs = [filter_type.process(item) for item in inputs]\nfiller = [0] * (samplerate - size)\noutputs += filler\nfft_out = np.abs(np.fft.fft(outputs))\nfft_db = 20 * np.log10(fft_out)\nplt.xlim(24, samplerate / 2 - 1)\nplt.xlabel('Frequency (Hz)')\nplt.xscale('log')\nbounds = get_bounds(fft_db, samplerate)\nplt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\nplt.ylabel('Gain (dB)')\nplt.plot(fft_db)\nplt.show()",
          "start_line": 39,
          "end_line": 67,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "show_phase_response",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\n\"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\nsize = 512\ninputs = [1] + [0] * (size - 1)\noutputs = [filter_type.process(item) for item in inputs]\nfiller = [0] * (samplerate - size)\noutputs += filler\nfft_out = np.angle(np.fft.fft(outputs))\nplt.xlim(24, samplerate / 2 - 1)\nplt.xlabel('Frequency (Hz)')\nplt.xscale('log')\nplt.ylim(-2 * pi, 2 * pi)\nplt.ylabel('Phase shift (Radians)')\nplt.plot(np.unwrap(fft_out, -2 * pi))\nplt.show()",
          "start_line": 71,
          "end_line": 95,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "FilterType",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 13,
          "end_line": 19,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "process",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\n\"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
              "start_line": 14,
              "end_line": 19,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}