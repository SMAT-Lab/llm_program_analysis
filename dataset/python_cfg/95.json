{
  "name": "95.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Any\nfrom uuid import UUID\nimport pytest\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer",
      "start_line": 1,
      "end_line": 157,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_graph_creation",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\nvalue_block = StoreValueBlock().id\ninput_block = AgentInputBlock().id\ngraph = Graph(id='test_graph', name='TestGraph', description='Test graph',\n    nodes=[Node(id='node_1', block_id=value_block), Node(id='node_2',\n    block_id=input_block, input_default={'name': 'input'}), Node(id=\n    'node_3', block_id=value_block)], links=[Link(source_id='node_1',\n    sink_id='node_2', source_name='output', sink_name='name')])\ncreate_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(create_graph,\n    DEFAULT_USER_ID)",
          "start_line": 17,
          "end_line": 51,
          "successors": [
            {
              "id": 4,
              "label": "#4\nassert UUID(created_graph.id)",
              "start_line": 53,
              "end_line": 53,
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nassert created_graph.name == 'TestGraph'",
                  "start_line": 54,
                  "end_line": 54,
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nassert len(created_graph.nodes) == 3",
                      "start_line": 56,
                      "end_line": 56,
                      "successors": [
                        {
                          "id": 10,
                          "label": "#10\nassert UUID(created_graph.nodes[0].id)",
                          "start_line": 57,
                          "end_line": 57,
                          "successors": [
                            {
                              "id": 12,
                              "label": "#12\nassert UUID(created_graph.nodes[1].id)",
                              "start_line": 58,
                              "end_line": 58,
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "#14\nassert UUID(created_graph.nodes[2].id)",
                                  "start_line": 59,
                                  "end_line": 59,
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "#16\nnodes = created_graph.nodes\nlinks = created_graph.links\nassert len(links) == 1",
                                      "start_line": 61,
                                      "end_line": 63,
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "#18\nassert links[0].source_id != links[0].sink_id",
                                          "start_line": 64,
                                          "end_line": 64,
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "#20\nassert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                                              "start_line": 65,
                                              "end_line": 65,
                                              "successors": [
                                                {
                                                  "id": 22,
                                                  "label": "#22\nassert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                                                  "start_line": 66,
                                                  "end_line": 66,
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_input_schema",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27\n\"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\nvalue_block = StoreValueBlock().id\ninput_block = AgentInputBlock().id\noutput_block = AgentOutputBlock().id\ngraph = Graph(name='TestInputSchema', description='Test input schema',\n    nodes=[Node(id='node_0_a', block_id=input_block, input_default={'name':\n    'in_key_a', 'title': 'Key A', 'value': 'A'}, metadata={'id': 'node_0_a'\n    }), Node(id='node_0_b', block_id=input_block, input_default={'name':\n    'in_key_b', 'advanced': True}, metadata={'id': 'node_0_b'}), Node(id=\n    'node_1', block_id=value_block, metadata={'id': 'node_1'}), Node(id=\n    'node_2', block_id=output_block, input_default={'name': 'out_key',\n    'description': 'This is an output key'}, metadata={'id': 'node_2'})],\n    links=[Link(source_id='node_0_a', sink_id='node_1', source_name=\n    'result', sink_name='input'), Link(source_id='node_0_b', sink_id=\n    'node_1', source_name='result', sink_name='input'), Link(source_id=\n    'node_1', sink_id='node_2', source_name='output', sink_name='value')])\ncreate_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(create_graph,\n    DEFAULT_USER_ID)",
          "start_line": 71,
          "end_line": 138,
          "successors": [
            {
              "id": 28,
              "label": "#28\ninput_schema = created_graph.input_schema\ninput_schema['title'] = 'ExpectedInputSchema'\nassert input_schema == ExpectedInputSchema.jsonschema()",
              "start_line": 140,
              "end_line": 153,
              "successors": [
                {
                  "id": 36,
                  "label": "#36\noutput_schema = created_graph.output_schema\noutput_schema['title'] = 'ExpectedOutputSchema'\nassert output_schema == ExpectedOutputSchema.jsonschema()",
                  "start_line": 155,
                  "end_line": 157,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ExpectedInputSchema",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nin_key_a: Any = SchemaField(title='Key A', default='A', advanced=False)\nin_key_b: Any = SchemaField(title='in_key_b', advanced=True)",
              "start_line": 141,
              "end_line": 142,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "ExpectedOutputSchema",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\nout_key: Any = SchemaField(description='This is an output key', title=\n    'out_key', advanced=False)",
              "start_line": 145,
              "end_line": 149,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ],
  "classes": []
}