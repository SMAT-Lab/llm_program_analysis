{
  "name": "104.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport datetime\nimport typing\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\nimport pydantic\nimport market.model\nimport market.utils.extension_types",
      "start_line": 1,
      "end_line": 725,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "delete_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\n\"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\ntry:",
          "start_line": 60,
          "end_line": 80,
          "successors": [
            {
              "id": 13,
              "label": "#13\ndeleted_agent = await prisma.models.Agents.prisma().delete(where={'id':\n    agent_id})",
              "start_line": 73,
              "end_line": 75,
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nreturn deleted_agent",
                  "start_line": 76,
                  "end_line": 76,
                  "successors": []
                }
              ]
            },
            {
              "id": 14,
              "label": "#14\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 78,
              "end_line": 78,
              "successors": []
            },
            {
              "id": 15,
              "label": "#15\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 80,
              "end_line": 80,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_agent_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 23,
          "label": "#23\n\"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\ntry:",
          "start_line": 92,
          "end_line": 128,
          "successors": [
            {
              "id": 24,
              "label": "#24\nagent = await prisma.models.Agents.prisma().create(data={'name': name,\n    'description': description, 'author': author, 'keywords': keywords,\n    'categories': categories, 'graph': graph, 'AnalyticsTracker': {'create':\n    {'downloads': 0, 'views': 0}}, 'submissionStatus': submission_state})",
              "start_line": 110,
              "end_line": 121,
              "successors": [
                {
                  "id": 28,
                  "label": "#28\nreturn agent",
                  "start_line": 123,
                  "end_line": 123,
                  "successors": []
                }
              ]
            },
            {
              "id": 25,
              "label": "#25\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 126,
              "end_line": 126,
              "successors": []
            },
            {
              "id": 26,
              "label": "#26\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 128,
              "end_line": 128,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_agent_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 34,
          "label": "#34\n\"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\ntry:",
          "start_line": 137,
          "end_line": 161,
          "successors": [
            {
              "id": 35,
              "label": "#35\nagent = await prisma.models.Agents.prisma().update(where={'id': agent_id},\n    data={'version': version, 'submissionStatus': submission_state,\n    'submissionReviewDate': datetime.datetime.now(datetime.timezone.utc),\n    'submissionReviewComments': comments})",
              "start_line": 147,
              "end_line": 155,
              "successors": [
                {
                  "id": 39,
                  "label": "#39\nreturn agent",
                  "start_line": 157,
                  "end_line": 157,
                  "successors": []
                }
              ]
            },
            {
              "id": 36,
              "label": "#36\nraise AgentQueryError(f'Agent Update Failed Database query failed: {str(e)}')",
              "start_line": 159,
              "end_line": 159,
              "successors": []
            },
            {
              "id": 37,
              "label": "#37\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 161,
              "end_line": 161,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 45,
          "label": "#45\n\"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\ntry:",
          "start_line": 176,
          "end_line": 259,
          "successors": [
            {
              "id": 46,
              "label": "#46\nquery = {}\nif name:",
              "start_line": 195,
              "end_line": 199,
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nquery['name'] = {'contains': name, 'mode': 'insensitive'}",
                  "start_line": 199,
                  "end_line": 199,
                  "successors": [
                    {
                      "id": 52,
                      "label": "#52\nif keyword:",
                      "start_line": 200,
                      "end_line": 201,
                      "successors": [
                        {
                          "id": 53,
                          "label": "#53\nquery['keywords'] = {'has': keyword}",
                          "start_line": 201,
                          "end_line": 201,
                          "successors": [
                            {
                              "id": 54,
                              "label": "#54\nif category:",
                              "start_line": 202,
                              "end_line": 203,
                              "successors": [
                                {
                                  "id": 55,
                                  "label": "#55\nquery['categories'] = {'has': category}",
                                  "start_line": 203,
                                  "end_line": 203,
                                  "successors": [
                                    {
                                      "id": 56,
                                      "label": "#56\nquery['submissionStatus'] = submission_status\norder = {sort_by: sort_order}\nskip = (page - 1) * page_size\ntry:",
                                      "start_line": 205,
                                      "end_line": 222,
                                      "successors": [
                                        {
                                          "id": 57,
                                          "label": "#57\nagents = await prisma.models.Agents.prisma().find_many(where=query, order=\n    order, skip=skip, take=page_size)",
                                          "start_line": 215,
                                          "end_line": 220,
                                          "successors": [
                                            {
                                              "id": 59,
                                              "label": "#59\nif description:",
                                              "start_line": 225,
                                              "end_line": 239,
                                              "successors": [
                                                {
                                                  "id": 62,
                                                  "label": "#62\ntry:",
                                                  "start_line": 226,
                                                  "end_line": 239,
                                                  "successors": [
                                                    {
                                                      "id": 64,
                                                      "label": "#64\nfiltered_agents = []",
                                                      "start_line": 227,
                                                      "end_line": 227,
                                                      "successors": [
                                                        {
                                                          "id": 67,
                                                          "label": "#67\nfor agent in agents:",
                                                          "start_line": 228,
                                                          "end_line": 236,
                                                          "successors": [
                                                            {
                                                              "id": 68,
                                                              "label": "#68\nif agent.description and fuzzywuzzy.fuzz.partial_ratio(description.lower(),",
                                                              "start_line": 229,
                                                              "end_line": 236,
                                                              "successors": [
                                                                {
                                                                  "id": 70,
                                                                  "label": "#70\nfiltered_agents.append(agent)",
                                                                  "start_line": 236,
                                                                  "end_line": 236,
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 69,
                                                              "label": "#69\nagents = filtered_agents",
                                                              "start_line": 237,
                                                              "end_line": 237,
                                                              "successors": [
                                                                {
                                                                  "id": 63,
                                                                  "label": "#63\ntotal_count = len(agents)\nreturn {'agents': agents, 'total_count': total_count, 'page': page,\n    'page_size': page_size, 'total_pages': (total_count + page_size - 1) //\n    page_size}",
                                                                  "start_line": 242,
                                                                  "end_line": 250,
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 65,
                                                      "label": "#65\nraise AgentQueryError(f'Error during fuzzy search: {str(e)}')",
                                                      "start_line": 239,
                                                      "end_line": 239,
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 58,
                                          "label": "#58\nraise AgentQueryError(f'Database query failed: {str(e)}')",
                                          "start_line": 222,
                                          "end_line": 222,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 47,
              "label": "#47\nraise e",
              "start_line": 254,
              "end_line": 254,
              "successors": []
            },
            {
              "id": 48,
              "label": "#48\nraise AgentQueryError(f'Invalid input parameter: {str(e)}')",
              "start_line": 256,
              "end_line": 256,
              "successors": []
            },
            {
              "id": 49,
              "label": "#49\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 259,
              "end_line": 259,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agent_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 79,
          "label": "#79\n\"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\ntry:",
          "start_line": 263,
          "end_line": 291,
          "successors": [
            {
              "id": 80,
              "label": "#80\nquery = {'id': agent_id}\nif version is not None:",
              "start_line": 277,
              "end_line": 279,
              "successors": [
                {
                  "id": 84,
                  "label": "#84\nquery['version'] = version",
                  "start_line": 279,
                  "end_line": 279,
                  "successors": [
                    {
                      "id": 85,
                      "label": "#85\nagent = await prisma.models.Agents.prisma().find_first(where=query)",
                      "start_line": 281,
                      "end_line": 281,
                      "successors": [
                        {
                          "id": 86,
                          "label": "#86\nif not agent:",
                          "start_line": 283,
                          "end_line": 284,
                          "successors": [
                            {
                              "id": 87,
                              "label": "#87\nraise AgentQueryError('Agent not found')",
                              "start_line": 284,
                              "end_line": 284,
                              "successors": []
                            },
                            {
                              "id": 88,
                              "label": "#88\nreturn agent",
                              "start_line": 286,
                              "end_line": 286,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 81,
              "label": "#81\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 289,
              "end_line": 289,
              "successors": []
            },
            {
              "id": 82,
              "label": "#82\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 291,
              "end_line": 291,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "search_db",
      "type": "CFG",
      "blocks": [
        {
          "id": 95,
          "label": "#95\n\"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\ntry:",
          "start_line": 304,
          "end_line": 407,
          "successors": [
            {
              "id": 96,
              "label": "#96\noffset = (page - 1) * page_size\ncategory_filter = '1=1'\nif categories:",
              "start_line": 323,
              "end_line": 328,
              "successors": [
                {
                  "id": 100,
                  "label": "#100\ncategory_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter = 'AND (' + ' OR '.join(category_conditions) + ')'",
                  "start_line": 327,
                  "end_line": 328,
                  "successors": [
                    {
                      "id": 101,
                      "label": "#101\nif sort_by in ['createdAt', 'updatedAt']:",
                      "start_line": 331,
                      "end_line": 336,
                      "successors": [
                        {
                          "id": 102,
                          "label": "#102\norder_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                          "start_line": 332,
                          "end_line": 332,
                          "successors": [
                            {
                              "id": 103,
                              "label": "#103\nsubmission_status_filter = f'\"submissionStatus\" = \\'{submission_status}\\''\nsql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\nresults = await prisma.client.get_client().query_raw(query=sql_query, model\n    =market.utils.extension_types.AgentsWithRank)",
                              "start_line": 338,
                              "end_line": 375,
                              "successors": [
                                {
                                  "id": 108,
                                  "label": "#108\ncount_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\ntotal_count = await prisma.client.get_client().query_first(query=\n    count_query, model=CountResponse)",
                                  "start_line": 377,
                                  "end_line": 393,
                                  "successors": [
                                    {
                                      "id": 112,
                                      "label": "#112\ntotal_count = total_count.count if total_count else 0\nreturn market.model.ListResponse(items=results, total_count=total_count,\n    page=page, page_size=page_size, total_pages=(total_count + page_size - \n    1) // page_size)",
                                      "start_line": 394,
                                      "end_line": 402,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 104,
                          "label": "#104\nif sort_by == 'name':",
                          "start_line": 333,
                          "end_line": 336,
                          "successors": [
                            {
                              "id": 105,
                              "label": "#105\norder_by_clause = f'name {sort_order.upper()}, rank DESC'",
                              "start_line": 334,
                              "end_line": 334,
                              "successors": []
                            },
                            {
                              "id": 107,
                              "label": "#107\norder_by_clause = 'rank DESC, \"createdAt\" DESC'",
                              "start_line": 336,
                              "end_line": 336,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 97,
              "label": "#97\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 405,
              "end_line": 405,
              "successors": []
            },
            {
              "id": 98,
              "label": "#98\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 407,
              "end_line": 407,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "CountResponse",
          "type": "CFG",
          "blocks": [
            {
              "id": 110,
              "label": "#110\ncount: int",
              "start_line": 378,
              "end_line": 378,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "get_top_agents_by_downloads",
      "type": "CFG",
      "blocks": [
        {
          "id": 118,
          "label": "#118\n\"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\ntry:",
          "start_line": 415,
          "end_line": 463,
          "successors": [
            {
              "id": 119,
              "label": "#119\nskip = (page - 1) * page_size\ntry:",
              "start_line": 426,
              "end_line": 439,
              "successors": [
                {
                  "id": 124,
                  "label": "#124\nanalytics = await prisma.models.AnalyticsTracker.prisma().find_many(include\n    ={'agent': True}, order={'downloads': 'desc'}, where={'agent': {'is': {\n    'submissionStatus': submission_status}}}, skip=skip, take=page_size)",
                  "start_line": 431,
                  "end_line": 437,
                  "successors": [
                    {
                      "id": 126,
                      "label": "#126\ntry:",
                      "start_line": 441,
                      "end_line": 446,
                      "successors": [
                        {
                          "id": 129,
                          "label": "#129\ntotal_count = await prisma.models.AnalyticsTracker.prisma().count(where={\n    'agent': {'is': {'submissionStatus': submission_status}}})",
                          "start_line": 442,
                          "end_line": 444,
                          "successors": [
                            {
                              "id": 131,
                              "label": "#131\nreturn market.model.ListResponse(items=analytics, total_count=total_count,\n    page=page, page_size=page_size, total_pages=(total_count + page_size - \n    1) // page_size)",
                              "start_line": 448,
                              "end_line": 454,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 130,
                          "label": "#130\nraise AgentQueryError(f'Database query failed: {str(e)}')",
                          "start_line": 446,
                          "end_line": 446,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 125,
                  "label": "#125\nraise AgentQueryError(f'Database query failed: {str(e)}')",
                  "start_line": 439,
                  "end_line": 439,
                  "successors": []
                }
              ]
            },
            {
              "id": 120,
              "label": "#120\nraise e from e",
              "start_line": 458,
              "end_line": 458,
              "successors": []
            },
            {
              "id": 121,
              "label": "#121\nraise AgentQueryError(f'Invalid input parameter: {str(e)}') from e",
              "start_line": 460,
              "end_line": 460,
              "successors": []
            },
            {
              "id": 122,
              "label": "#122\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}') from e",
              "start_line": 463,
              "end_line": 463,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "set_agent_featured",
      "type": "CFG",
      "blocks": [
        {
          "id": 140,
          "label": "#140\n\"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\ntry:",
          "start_line": 469,
          "end_line": 502,
          "successors": [
            {
              "id": 141,
              "label": "#141\nagent = await prisma.models.Agents.prisma().find_unique(where={'id': agent_id})",
              "start_line": 479,
              "end_line": 479,
              "successors": [
                {
                  "id": 145,
                  "label": "#145\nif not agent:",
                  "start_line": 480,
                  "end_line": 481,
                  "successors": [
                    {
                      "id": 146,
                      "label": "#146\nraise AgentQueryError(f'Agent with ID {agent_id} not found.')",
                      "start_line": 481,
                      "end_line": 481,
                      "successors": []
                    },
                    {
                      "id": 147,
                      "label": "#147\nfeatured = await prisma.models.FeaturedAgent.prisma().upsert(where={\n    'agentId': agent_id}, data={'update': {'featuredCategories':\n    featured_categories, 'isActive': is_active}, 'create': {\n    'featuredCategories': featured_categories, 'isActive': is_active,\n    'agent': {'connect': {'id': agent_id}}}})",
                      "start_line": 483,
                      "end_line": 496,
                      "successors": [
                        {
                          "id": 149,
                          "label": "#149\nreturn featured",
                          "start_line": 497,
                          "end_line": 497,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 142,
              "label": "#142\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 500,
              "end_line": 500,
              "successors": []
            },
            {
              "id": 143,
              "label": "#143\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 502,
              "end_line": 502,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_featured_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 155,
          "label": "#155\n\"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\ntry:",
          "start_line": 511,
          "end_line": 558,
          "successors": [
            {
              "id": 156,
              "label": "#156\nskip = (page - 1) * page_size\ntry:",
              "start_line": 523,
              "end_line": 538,
              "successors": [
                {
                  "id": 161,
                  "label": "#161\nfeatured_agents = await prisma.models.FeaturedAgent.prisma().find_many(where\n    ={'featuredCategories': {'has': category}, 'isActive': True, 'agent': {\n    'is': {'submissionStatus': submission_status}}}, include={'agent': {\n    'include': {'AnalyticsTracker': True}}}, skip=skip, take=page_size)",
                  "start_line": 527,
                  "end_line": 536,
                  "successors": [
                    {
                      "id": 163,
                      "label": "#163\ntotal_count = len(featured_agents)\nreturn FeaturedAgentResponse(featured_agents=featured_agents, total_count=\n    total_count, page=page, page_size=page_size, total_pages=(total_count +\n    page_size - 1) // page_size)",
                      "start_line": 541,
                      "end_line": 549,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 162,
                  "label": "#162\nraise AgentQueryError(f'Database query failed: {str(e)}')",
                  "start_line": 538,
                  "end_line": 538,
                  "successors": []
                }
              ]
            },
            {
              "id": 157,
              "label": "#157\nraise e from e",
              "start_line": 553,
              "end_line": 553,
              "successors": []
            },
            {
              "id": 158,
              "label": "#158\nraise AgentQueryError(f'Invalid input parameter: {str(e)}') from e",
              "start_line": 555,
              "end_line": 555,
              "successors": []
            },
            {
              "id": 159,
              "label": "#159\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}') from e",
              "start_line": 558,
              "end_line": 558,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "remove_featured_category",
      "type": "CFG",
      "blocks": [
        {
          "id": 172,
          "label": "#172\n\"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\ntry:",
          "start_line": 564,
          "end_line": 596,
          "successors": [
            {
              "id": 173,
              "label": "#173\nfeatured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(where\n    ={'agentId': agent_id}, include={'agent': True})",
              "start_line": 575,
              "end_line": 578,
              "successors": [
                {
                  "id": 177,
                  "label": "#177\nif not featured_agent:",
                  "start_line": 580,
                  "end_line": 581,
                  "successors": [
                    {
                      "id": 178,
                      "label": "#178\nraise AgentQueryError(f'Agent with ID {agent_id} not found.')",
                      "start_line": 581,
                      "end_line": 581,
                      "successors": []
                    },
                    {
                      "id": 179,
                      "label": "#179\nfeatured_agent.featuredCategories.remove(category)\nfeatured_agent = await prisma.models.FeaturedAgent.prisma().update(where={\n    'agentId': agent_id}, data={'featuredCategories': featured_agent.\n    featuredCategories})",
                      "start_line": 584,
                      "end_line": 589,
                      "successors": [
                        {
                          "id": 181,
                          "label": "#181\nreturn featured_agent",
                          "start_line": 591,
                          "end_line": 591,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 174,
              "label": "#174\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 594,
              "end_line": 594,
              "successors": []
            },
            {
              "id": 175,
              "label": "#175\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 596,
              "end_line": 596,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "add_featured_category",
      "type": "CFG",
      "blocks": [
        {
          "id": 187,
          "label": "#187\n\"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\ntry:",
          "start_line": 602,
          "end_line": 622,
          "successors": [
            {
              "id": 188,
              "label": "#188\nfeatured_agent = await prisma.models.FeaturedAgent.prisma().update(where={\n    'agentId': agent_id}, data={'featuredCategories': {'push': [category]}})",
              "start_line": 612,
              "end_line": 615,
              "successors": [
                {
                  "id": 192,
                  "label": "#192\nreturn featured_agent",
                  "start_line": 617,
                  "end_line": 617,
                  "successors": []
                }
              ]
            },
            {
              "id": 189,
              "label": "#189\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 620,
              "end_line": 620,
              "successors": []
            },
            {
              "id": 190,
              "label": "#190\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 622,
              "end_line": 622,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agent_featured",
      "type": "CFG",
      "blocks": [
        {
          "id": 198,
          "label": "#198\n\"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\ntry:",
          "start_line": 626,
          "end_line": 642,
          "successors": [
            {
              "id": 199,
              "label": "#199\nfeatured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(where\n    ={'agentId': agent_id})",
              "start_line": 635,
              "end_line": 637,
              "successors": [
                {
                  "id": 203,
                  "label": "#203\nreturn featured_agent",
                  "start_line": 638,
                  "end_line": 638,
                  "successors": []
                }
              ]
            },
            {
              "id": 200,
              "label": "#200\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 640,
              "end_line": 640,
              "successors": []
            },
            {
              "id": 201,
              "label": "#201\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 642,
              "end_line": 642,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_not_featured_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 209,
          "label": "#209\n\"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\ntry:",
          "start_line": 648,
          "end_line": 681,
          "successors": [
            {
              "id": 210,
              "label": "#210\nagents = await prisma.client.get_client().query_raw(query=\n    f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\"\n    , model=prisma.models.Agents)",
              "start_line": 652,
              "end_line": 676,
              "successors": [
                {
                  "id": 214,
                  "label": "#214\nreturn agents",
                  "start_line": 677,
                  "end_line": 677,
                  "successors": []
                }
              ]
            },
            {
              "id": 211,
              "label": "#211\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 679,
              "end_line": 679,
              "successors": []
            },
            {
              "id": 212,
              "label": "#212\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 681,
              "end_line": 681,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_all_categories",
      "type": "CFG",
      "blocks": [
        {
          "id": 220,
          "label": "#220\n\"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\ntry:",
          "start_line": 685,
          "end_line": 706,
          "successors": [
            {
              "id": 221,
              "label": "#221\nagents = await prisma.models.Agents.prisma().find_many(distinct=['categories'])",
              "start_line": 692,
              "end_line": 692,
              "successors": [
                {
                  "id": 225,
                  "label": "#225\nall_categories = set()",
                  "start_line": 695,
                  "end_line": 695,
                  "successors": [
                    {
                      "id": 226,
                      "label": "#226\nfor agent in agents:",
                      "start_line": 696,
                      "end_line": 697,
                      "successors": [
                        {
                          "id": 227,
                          "label": "#227\nall_categories.update(agent.categories)",
                          "start_line": 697,
                          "end_line": 697,
                          "successors": []
                        },
                        {
                          "id": 228,
                          "label": "#228\nunique_categories = sorted(list(all_categories))\nreturn market.model.CategoriesResponse(unique_categories=unique_categories)",
                          "start_line": 699,
                          "end_line": 701,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 222,
              "label": "#222\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 703,
              "end_line": 703,
              "successors": []
            },
            {
              "id": 223,
              "label": "#223\nreturn market.model.CategoriesResponse(unique_categories=[])",
              "start_line": 706,
              "end_line": 706,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_agent_installed_event",
      "type": "CFG",
      "blocks": [
        {
          "id": 234,
          "label": "#234\ntry:",
          "start_line": 712,
          "end_line": 725,
          "successors": [
            {
              "id": 235,
              "label": "#235\nawait prisma.models.InstallTracker.prisma().create(data={'installedAgentId':\n    event_data.installed_agent_id, 'marketplaceAgentId': event_data.\n    marketplace_agent_id, 'installationLocation': prisma.enums.\n    InstallationLocation(event_data.installation_location.name)})",
              "start_line": 713,
              "end_line": 721,
              "successors": []
            },
            {
              "id": 236,
              "label": "#236\nraise AgentQueryError(f'Database query failed: {str(e)}')",
              "start_line": 723,
              "end_line": 723,
              "successors": []
            },
            {
              "id": 237,
              "label": "#237\nraise AgentQueryError(f'Unexpected error occurred: {str(e)}')",
              "start_line": 725,
              "end_line": 725,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentQueryError",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Custom exception for agent query errors\"\"\"\npass",
          "start_line": 16,
          "end_line": 18,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "TopAgentsDBResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\n\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\nanalytics: list[prisma.models.AnalyticsTracker]\ntotal_count: int\npage: int\npage_size: int\ntotal_pages: int",
          "start_line": 22,
          "end_line": 37,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\nfeatured_agents: list[prisma.models.FeaturedAgent]\ntotal_count: int\npage: int\npage_size: int\ntotal_pages: int",
          "start_line": 41,
          "end_line": 56,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}