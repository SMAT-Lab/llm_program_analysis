{
  "name": "58.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "start_line": 1,
      "end_line": 109,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ComparisonOperator",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nEQUAL = '=='\nNOT_EQUAL = '!='\nGREATER_THAN = '>'\nLESS_THAN = '<'\nGREATER_THAN_OR_EQUAL = '>='\nLESS_THAN_OR_EQUAL = '<='",
          "start_line": 9,
          "end_line": 14,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ConditionBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "start_line": 18,
          "end_line": 109,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='715696a0-e1da-45c8-b209-c2fa9c3b0be6', input_schema=\n    ConditionBlock.Input, output_schema=ConditionBlock.Output, description=\n    'Handles conditional logic based on comparison operators', categories={\n    BlockCategory.LOGIC}, test_input={'value1': 10, 'operator':\n    ComparisonOperator.GREATER_THAN.value, 'value2': 5, 'yes_value':\n    'Greater', 'no_value': 'Not greater'}, test_output=[('result', True), (\n    'yes_output', 'Greater')])",
              "start_line": 54,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\noperator = input_data.operator\nvalue1 = input_data.value1\nif isinstance(value1, str):",
              "start_line": 74,
              "end_line": 81,
              "successors": [
                {
                  "id": 18,
                  "label": "#18\ntry:",
                  "start_line": 78,
                  "end_line": 81,
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nvalue1 = float(value1.strip())",
                      "start_line": 79,
                      "end_line": 79,
                      "successors": [
                        {
                          "id": 19,
                          "label": "#19\nvalue2 = input_data.value2\nif isinstance(value2, str):",
                          "start_line": 83,
                          "end_line": 88,
                          "successors": [
                            {
                              "id": 23,
                              "label": "#23\ntry:",
                              "start_line": 85,
                              "end_line": 88,
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "#25\nvalue2 = float(value2.strip())",
                                  "start_line": 86,
                                  "end_line": 86,
                                  "successors": [
                                    {
                                      "id": 24,
                                      "label": "#24\nyes_value = (input_data.yes_value if input_data.yes_value is not None else\n    value1)\nno_value = input_data.no_value if input_data.no_value is not None else value2\ncomparison_funcs = {ComparisonOperator.EQUAL: lambda a, b: a == b,\n    ComparisonOperator.NOT_EQUAL: lambda a, b: a != b, ComparisonOperator.\n    GREATER_THAN: lambda a, b: a > b, ComparisonOperator.LESS_THAN: lambda\n    a, b: a < b, ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >=\n    b, ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b}\nresult = comparison_funcs[operator](value1, value2)\nyield 'result', result",
                                      "start_line": 90,
                                      "end_line": 104,
                                      "successors": [
                                        {
                                          "id": 28,
                                          "label": "#28\nif result:",
                                          "start_line": 106,
                                          "end_line": 109,
                                          "successors": [
                                            {
                                              "id": 29,
                                              "label": "#29\nyield 'yes_output', yes_value",
                                              "start_line": 107,
                                              "end_line": 107,
                                              "successors": []
                                            },
                                            {
                                              "id": 31,
                                              "label": "#31\nyield 'no_output', no_value",
                                              "start_line": 109,
                                              "end_line": 109,
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 26,
                                  "label": "#26\nvalue2 = value2.strip()",
                                  "start_line": 88,
                                  "end_line": 88,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 21,
                      "label": "#21\nvalue1 = value1.strip()",
                      "start_line": 81,
                      "end_line": 81,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nvalue1: Any = SchemaField(description=\n    'Enter the first value for comparison', placeholder=\n    \"For example: 10 or 'hello' or True\")\noperator: ComparisonOperator = SchemaField(description=\n    'Choose the comparison operator', placeholder='Select an operator')\nvalue2: Any = SchemaField(description=\n    'Enter the second value for comparison', placeholder=\n    \"For example: 20 or 'world' or False\")\nyes_value: Any = SchemaField(description=\n    '(Optional) Value to output if the condition is true. If not provided, value1 will be used.'\n    , placeholder='Leave empty to use value1, or enter a specific value',\n    default=None)\nno_value: Any = SchemaField(description=\n    '(Optional) Value to output if the condition is false. If not provided, value1 will be used.'\n    , placeholder='Leave empty to use value1, or enter a specific value',\n    default=None)",
              "start_line": 19,
              "end_line": 40,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nresult: bool = SchemaField(description=\n    'The result of the condition evaluation (True or False)')\nyes_output: Any = SchemaField(description=\n    'The output value if the condition is true')\nno_output: Any = SchemaField(description=\n    'The output value if the condition is false')",
              "start_line": 43,
              "end_line": 51,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}