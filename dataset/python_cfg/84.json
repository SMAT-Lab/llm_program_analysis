{
  "name": "84.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\nimport pytest\nfrom fastapi import WebSocket\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage",
      "start_line": 1,
      "end_line": 118,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "connection_manager",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nreturn ConnectionManager()",
          "start_line": 14,
          "end_line": 14,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nwebsocket: AsyncMock = AsyncMock(spec=WebSocket)\nwebsocket.send_text = AsyncMock()\nreturn websocket",
          "start_line": 19,
          "end_line": 21,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_connect",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11\nawait connection_manager.connect(mock_websocket)",
          "start_line": 28,
          "end_line": 28,
          "successors": [
            {
              "id": 12,
              "label": "#12\nassert mock_websocket in connection_manager.active_connections",
              "start_line": 29,
              "end_line": 29,
              "successors": [
                {
                  "id": 14,
                  "label": "#14\nmock_websocket.accept.assert_called_once()",
                  "start_line": 30,
                  "end_line": 30,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_disconnect",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\nconnection_manager.active_connections.add(mock_websocket)\nconnection_manager.subscriptions['test_graph'] = {mock_websocket}\nconnection_manager.disconnect(mock_websocket)\nassert mock_websocket not in connection_manager.active_connections",
          "start_line": 36,
          "end_line": 41,
          "successors": [
            {
              "id": 19,
              "label": "#19\nassert mock_websocket not in connection_manager.subscriptions['test_graph']",
              "start_line": 42,
              "end_line": 42,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_subscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\nawait connection_manager.subscribe('test_graph', mock_websocket)",
          "start_line": 49,
          "end_line": 49,
          "successors": [
            {
              "id": 25,
              "label": "#25\nassert mock_websocket in connection_manager.subscriptions['test_graph']",
              "start_line": 50,
              "end_line": 50,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_unsubscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 30,
          "label": "#30\nconnection_manager.subscriptions['test_graph'] = {mock_websocket}\nawait connection_manager.unsubscribe('test_graph', mock_websocket)",
          "start_line": 57,
          "end_line": 59,
          "successors": [
            {
              "id": 31,
              "label": "#31\nassert 'test_graph' not in connection_manager.subscriptions",
              "start_line": 61,
              "end_line": 61,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_send_execution_result",
      "type": "CFG",
      "blocks": [
        {
          "id": 36,
          "label": "#36\nconnection_manager.subscriptions['test_graph'] = {mock_websocket}\nresult: ExecutionResult = ExecutionResult(graph_id='test_graph',\n    graph_version=1, graph_exec_id='test_exec_id', node_exec_id=\n    'test_node_exec_id', node_id='test_node_id', block_id='test_block_id',\n    status=ExecutionStatus.COMPLETED, input_data={'input1': 'value1'},\n    output_data={'output1': ['result1']}, add_time=datetime.now(tz=timezone\n    .utc), queue_time=None, start_time=datetime.now(tz=timezone.utc),\n    end_time=datetime.now(tz=timezone.utc))\nawait connection_manager.send_execution_result(result)",
          "start_line": 68,
          "end_line": 85,
          "successors": [
            {
              "id": 37,
              "label": "#37\nmock_websocket.send_text.assert_called_once_with(WsMessage(method=Methods.\n    EXECUTION_EVENT, channel='test_graph', data=result.model_dump()).\n    model_dump_json())",
              "start_line": 87,
              "end_line": 93,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_send_execution_result_no_subscribers",
      "type": "CFG",
      "blocks": [
        {
          "id": 40,
          "label": "#40\nresult: ExecutionResult = ExecutionResult(graph_id='test_graph',\n    graph_version=1, graph_exec_id='test_exec_id', node_exec_id=\n    'test_node_exec_id', node_id='test_node_id', block_id='test_block_id',\n    status=ExecutionStatus.COMPLETED, input_data={'input1': 'value1'},\n    output_data={'output1': ['result1']}, add_time=datetime.now(),\n    queue_time=None, start_time=datetime.now(), end_time=datetime.now())\nawait connection_manager.send_execution_result(result)",
          "start_line": 100,
          "end_line": 116,
          "successors": [
            {
              "id": 41,
              "label": "#41\nmock_websocket.send_text.assert_not_called()",
              "start_line": 118,
              "end_line": 118,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}