{
  "name": "66.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = 'MainProcess'",
      "start_line": 1,
      "end_line": 123,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_service_name",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nreturn _SERVICE_NAME",
          "start_line": 17,
          "end_line": 17,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "set_service_name",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nglobal _SERVICE_NAME\n_SERVICE_NAME = name",
          "start_line": 21,
          "end_line": 22,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AppProcess",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\n\"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\nprocess: Optional[Process] = None\nset_start_method('spawn', force=True)\nconfigure_logging()\nsentry_init()",
          "start_line": 26,
          "end_line": 123,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\n\"\"\"\n        The method that will be executed in the process.\n        \"\"\"\npass",
              "start_line": 40,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "service_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nreturn cls.__name__",
              "start_line": 48,
              "end_line": 48,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "cleanup",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\n\"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\npass",
              "start_line": 51,
              "end_line": 55,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "health_check",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\n\"\"\"\n        A method to check the health of the process.\n        \"\"\"\npass",
              "start_line": 58,
              "end_line": 61,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execute_run_command",
          "type": "CFG",
          "blocks": [
            {
              "id": 25,
              "label": "#25\nsignal.signal(signal.SIGTERM, self._self_terminate)\ntry:",
              "start_line": 64,
              "end_line": 75,
              "successors": [
                {
                  "id": 26,
                  "label": "#26\nif silent:",
                  "start_line": 67,
                  "end_line": 69,
                  "successors": [
                    {
                      "id": 29,
                      "label": "#29\nsys.stdout = open(os.devnull, 'w')\nsys.stderr = open(os.devnull, 'w')",
                      "start_line": 68,
                      "end_line": 69,
                      "successors": [
                        {
                          "id": 30,
                          "label": "#30\nset_service_name(self.service_name)\nself.run()",
                          "start_line": 71,
                          "end_line": 73,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 27,
                  "label": "#27",
                  "start_line": 75,
                  "end_line": 75,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_self_terminate",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\nself.cleanup()\nsys.exit(0)",
              "start_line": 78,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__enter__",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\nself.start(background=True)\nreturn self",
              "start_line": 84,
              "end_line": 85,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__exit__",
          "type": "CFG",
          "blocks": [
            {
              "id": 40,
              "label": "#40\nself.stop()",
              "start_line": 88,
              "end_line": 88,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "start",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\n\"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\nif not background:",
              "start_line": 91,
              "end_line": 102,
              "successors": [
                {
                  "id": 44,
                  "label": "#44\nself.execute_run_command(silent)\nreturn 0",
                  "start_line": 101,
                  "end_line": 102,
                  "successors": []
                },
                {
                  "id": 45,
                  "label": "#45\nself.process = Process(name=self.__class__.__name__, target=self.\n    execute_run_command, args=(silent,), **proc_args)\nself.process.start()\nself.health_check()\nreturn self.process.pid or 0",
                  "start_line": 104,
                  "end_line": 112,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "stop",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\n\"\"\"\n        Stop the background process.\n        \"\"\"\nif not self.process:",
              "start_line": 115,
              "end_line": 119,
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nreturn",
                  "start_line": 119,
                  "end_line": 119,
                  "successors": []
                },
                {
                  "id": 52,
                  "label": "#52\nself.process.terminate()\nself.process.join()\nself.process = None",
                  "start_line": 121,
                  "end_line": 123,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}