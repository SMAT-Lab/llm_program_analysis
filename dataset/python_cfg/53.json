{
  "name": "53.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport pytest\nfrom prisma.models import User\nfrom backend.blocks.basic import FindInDictionaryBlock, StoreValueBlock\nfrom backend.blocks.maths import CalculatorBlock, Operation\nfrom backend.data import execution, graph\nfrom backend.server.model import CreateGraph\nfrom backend.server.rest_api import AgentServer\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.test import SpinTestServer, wait_execution\nlogger = logging.getLogger(__name__)",
      "start_line": 1,
      "end_line": 289,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "create_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nlogger.info(f'Creating graph for user {u.id}')\nreturn await s.agent_server.test_create_graph(CreateGraph(graph=g), u.id)",
          "start_line": 18,
          "end_line": 19,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nlogger.info(f'Executing graph {test_graph.id} for user {test_user.id}')\nlogger.info(f'Input data: {input_data}')\nresponse = await agent_server.test_execute_graph(test_graph.id, input_data,\n    test_user.id)",
          "start_line": 29,
          "end_line": 35,
          "successors": [
            {
              "id": 8,
              "label": "#8\ngraph_exec_id = response['id']\nlogger.info(f'Created execution with ID: {graph_exec_id}')\nresult = await wait_execution(test_user.id, test_graph.id, graph_exec_id)",
              "start_line": 36,
              "end_line": 41,
              "successors": [
                {
                  "id": 9,
                  "label": "#9\nlogger.info(f'Execution completed with {len(result)} results')\nassert result and len(result) == num_execs",
                  "start_line": 42,
                  "end_line": 43,
                  "successors": [
                    {
                      "id": 11,
                      "label": "#11\nreturn graph_exec_id",
                      "start_line": 44,
                      "end_line": 44,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "assert_sample_graph_executions",
      "type": "CFG",
      "blocks": [
        {
          "id": 15,
          "label": "#15\nlogger.info(f'Checking execution results for graph {test_graph.id}')\nexecutions = await agent_server.test_get_graph_run_node_execution_results(\n    test_graph.id, graph_exec_id, test_user.id)",
          "start_line": 53,
          "end_line": 58,
          "successors": [
            {
              "id": 16,
              "label": "#16\noutput_list = [{'result': ['Hello']}, {'result': ['World']}]\ninput_list = [{'name': 'input_1', 'value': 'Hello'}, {'name': 'input_2',\n    'value': 'World'}]\nexec = executions[0]\nlogger.info(f'Checking first StoreValueBlock execution: {exec}')\nassert exec.status == execution.ExecutionStatus.COMPLETED",
              "start_line": 60,
              "end_line": 75,
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nassert exec.graph_exec_id == graph_exec_id",
                  "start_line": 76,
                  "end_line": 76,
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nassert exec.output_data in output_list, f'Output data: {exec.output_data} and {output_list}'",
                      "start_line": 77,
                      "end_line": 79,
                      "successors": [
                        {
                          "id": 22,
                          "label": "#22\nassert exec.input_data in input_list, f'Input data: {exec.input_data} and {input_list}'",
                          "start_line": 80,
                          "end_line": 82,
                          "successors": [
                            {
                              "id": 24,
                              "label": "#24\nassert exec.node_id in [test_graph.nodes[0].id, test_graph.nodes[1].id]",
                              "start_line": 83,
                              "end_line": 83,
                              "successors": [
                                {
                                  "id": 26,
                                  "label": "#26\nexec = executions[1]\nlogger.info(f'Checking second StoreValueBlock execution: {exec}')\nassert exec.status == execution.ExecutionStatus.COMPLETED",
                                  "start_line": 86,
                                  "end_line": 88,
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "#28\nassert exec.graph_exec_id == graph_exec_id",
                                      "start_line": 89,
                                      "end_line": 89,
                                      "successors": [
                                        {
                                          "id": 30,
                                          "label": "#30\nassert exec.output_data in output_list, f'Output data: {exec.output_data} and {output_list}'",
                                          "start_line": 90,
                                          "end_line": 92,
                                          "successors": [
                                            {
                                              "id": 32,
                                              "label": "#32\nassert exec.input_data in input_list, f'Input data: {exec.input_data} and {input_list}'",
                                              "start_line": 93,
                                              "end_line": 95,
                                              "successors": [
                                                {
                                                  "id": 34,
                                                  "label": "#34\nassert exec.node_id in [test_graph.nodes[0].id, test_graph.nodes[1].id]",
                                                  "start_line": 96,
                                                  "end_line": 96,
                                                  "successors": [
                                                    {
                                                      "id": 36,
                                                      "label": "#36\nexec = executions[2]\nlogger.info(f'Checking FillTextTemplateBlock execution: {exec}')\nassert exec.status == execution.ExecutionStatus.COMPLETED",
                                                      "start_line": 99,
                                                      "end_line": 101,
                                                      "successors": [
                                                        {
                                                          "id": 38,
                                                          "label": "#38\nassert exec.graph_exec_id == graph_exec_id",
                                                          "start_line": 102,
                                                          "end_line": 102,
                                                          "successors": [
                                                            {
                                                              "id": 40,
                                                              "label": "#40\nassert exec.output_data == {'output': ['Hello, World!!!']}",
                                                              "start_line": 103,
                                                              "end_line": 103,
                                                              "successors": [
                                                                {
                                                                  "id": 42,
                                                                  "label": "#42\nassert exec.input_data == {'format': '{a}, {b}{c}', 'values': {'a': 'Hello',\n    'b': 'World', 'c': '!!!'}, 'values_#_a': 'Hello', 'values_#_b': 'World',\n    'values_#_c': '!!!'}",
                                                                  "start_line": 104,
                                                                  "end_line": 110,
                                                                  "successors": [
                                                                    {
                                                                      "id": 44,
                                                                      "label": "#44\nassert exec.node_id == test_graph.nodes[2].id",
                                                                      "start_line": 111,
                                                                      "end_line": 111,
                                                                      "successors": [
                                                                        {
                                                                          "id": 46,
                                                                          "label": "#46\nexec = executions[3]\nlogger.info(f'Checking PrintToConsoleBlock execution: {exec}')\nassert exec.status == execution.ExecutionStatus.COMPLETED",
                                                                          "start_line": 114,
                                                                          "end_line": 116,
                                                                          "successors": [
                                                                            {
                                                                              "id": 48,
                                                                              "label": "#48\nassert exec.graph_exec_id == graph_exec_id",
                                                                              "start_line": 117,
                                                                              "end_line": 117,
                                                                              "successors": [
                                                                                {
                                                                                  "id": 50,
                                                                                  "label": "#50\nassert exec.output_data == {'status': ['printed']}",
                                                                                  "start_line": 118,
                                                                                  "end_line": 118,
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 52,
                                                                                      "label": "#52\nassert exec.input_data == {'text': 'Hello, World!!!'}",
                                                                                      "start_line": 119,
                                                                                      "end_line": 119,
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 54,
                                                                                          "label": "#54\nassert exec.node_id == test_graph.nodes[3].id",
                                                                                          "start_line": 120,
                                                                                          "end_line": 120,
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_agent_execution",
      "type": "CFG",
      "blocks": [
        {
          "id": 59,
          "label": "#59\nlogger.info('Starting test_agent_execution')\ntest_user = await create_test_user()",
          "start_line": 125,
          "end_line": 126,
          "successors": [
            {
              "id": 60,
              "label": "#60\ntest_graph = await create_graph(server, create_test_graph(), test_user)",
              "start_line": 127,
              "end_line": 127,
              "successors": [
                {
                  "id": 61,
                  "label": "#61\ndata = {'input_1': 'Hello', 'input_2': 'World'}\ngraph_exec_id = await execute_graph(server.agent_server, test_graph,\n    test_user, data, 4)",
                  "start_line": 128,
                  "end_line": 135,
                  "successors": [
                    {
                      "id": 62,
                      "label": "#62\nawait assert_sample_graph_executions(server.agent_server, test_graph,\n    test_user, graph_exec_id)",
                      "start_line": 136,
                      "end_line": 138,
                      "successors": [
                        {
                          "id": 63,
                          "label": "#63\nlogger.info('Completed test_agent_execution')",
                          "start_line": 139,
                          "end_line": 139,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_input_pin_always_waited",
      "type": "CFG",
      "blocks": [
        {
          "id": 66,
          "label": "#66\n\"\"\"\n    This test is asserting that the input pin should always be waited for the execution,\n    even when default value on that pin is defined, the value has to be ignored.\n\n    Test scenario:\n    StoreValueBlock1\n                \\\\ input\n                     >------- FindInDictionaryBlock | input_default: key: \"\", input: {}\n                // key\n    StoreValueBlock2\n    \"\"\"\nlogger.info('Starting test_input_pin_always_waited')\nnodes = [graph.Node(block_id=StoreValueBlock().id, input_default={'input':\n    {'key1': 'value1', 'key2': 'value2'}}), graph.Node(block_id=\n    StoreValueBlock().id, input_default={'input': 'key2'}), graph.Node(\n    block_id=FindInDictionaryBlock().id, input_default={'key': '', 'input':\n    {}})]\nlinks = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name\n    ='output', sink_name='input'), graph.Link(source_id=nodes[1].id,\n    sink_id=nodes[2].id, source_name='output', sink_name='key')]\ntest_graph = graph.Graph(name='TestGraph', description='Test graph', nodes=\n    nodes, links=links)\ntest_user = await create_test_user()",
          "start_line": 144,
          "end_line": 190,
          "successors": [
            {
              "id": 67,
              "label": "#67\ntest_graph = await create_graph(server, test_graph, test_user)",
              "start_line": 191,
              "end_line": 191,
              "successors": [
                {
                  "id": 68,
                  "label": "#68\ngraph_exec_id = await execute_graph(server.agent_server, test_graph,\n    test_user, {}, 3)",
                  "start_line": 192,
                  "end_line": 194,
                  "successors": [
                    {
                      "id": 69,
                      "label": "#69\nlogger.info('Checking execution results')\nexecutions = (await server.agent_server.\n    test_get_graph_run_node_execution_results(test_graph.id, graph_exec_id,\n    test_user.id))",
                      "start_line": 196,
                      "end_line": 199,
                      "successors": [
                        {
                          "id": 70,
                          "label": "#70\nassert len(executions) == 3",
                          "start_line": 200,
                          "end_line": 200,
                          "successors": [
                            {
                              "id": 72,
                              "label": "#72\nassert executions[2].status == execution.ExecutionStatus.COMPLETED",
                              "start_line": 203,
                              "end_line": 203,
                              "successors": [
                                {
                                  "id": 74,
                                  "label": "#74\nassert executions[2].output_data == {'output': ['value2']}",
                                  "start_line": 204,
                                  "end_line": 204,
                                  "successors": [
                                    {
                                      "id": 76,
                                      "label": "#76\nlogger.info('Completed test_input_pin_always_waited')",
                                      "start_line": 205,
                                      "end_line": 205,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_static_input_link_on_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 79,
          "label": "#79\n\"\"\"\n    This test is asserting the behaviour of static input link, e.g: reusable input link.\n\n    Test scenario:\n    *StoreValueBlock1*===a=========\\\\\n    *StoreValueBlock2*===a=====\\\\  ||\n    *StoreValueBlock3*===a===*MathBlock*====b / static====*StoreValueBlock5*\n    *StoreValueBlock4*=========================================//\n\n    In this test, there will be three input waiting in the MathBlock input pin `a`.\n    And later, another output is produced on input pin `b`, which is a static link,\n    this input will complete the input of those three incomplete executions.\n    \"\"\"\nlogger.info('Starting test_static_input_link_on_graph')\nnodes = [graph.Node(block_id=StoreValueBlock().id, input_default={'input': \n    4}), graph.Node(block_id=StoreValueBlock().id, input_default={'input': \n    4}), graph.Node(block_id=StoreValueBlock().id, input_default={'input': \n    4}), graph.Node(block_id=StoreValueBlock().id, input_default={'input': \n    5}), graph.Node(block_id=StoreValueBlock().id), graph.Node(block_id=\n    CalculatorBlock().id, input_default={'operation': Operation.ADD.value})]\nlinks = [graph.Link(source_id=nodes[0].id, sink_id=nodes[5].id, source_name\n    ='output', sink_name='a'), graph.Link(source_id=nodes[1].id, sink_id=\n    nodes[5].id, source_name='output', sink_name='a'), graph.Link(source_id\n    =nodes[2].id, sink_id=nodes[5].id, source_name='output', sink_name='a'),\n    graph.Link(source_id=nodes[3].id, sink_id=nodes[4].id, source_name=\n    'output', sink_name='input'), graph.Link(source_id=nodes[4].id, sink_id\n    =nodes[5].id, source_name='output', sink_name='b', is_static=True)]\ntest_graph = graph.Graph(name='TestGraph', description='Test graph', nodes=\n    nodes, links=links)\ntest_user = await create_test_user()",
          "start_line": 210,
          "end_line": 274,
          "successors": [
            {
              "id": 80,
              "label": "#80\ntest_graph = await create_graph(server, test_graph, test_user)",
              "start_line": 275,
              "end_line": 275,
              "successors": [
                {
                  "id": 81,
                  "label": "#81\ngraph_exec_id = await execute_graph(server.agent_server, test_graph,\n    test_user, {}, 8)",
                  "start_line": 276,
                  "end_line": 278,
                  "successors": [
                    {
                      "id": 82,
                      "label": "#82\nlogger.info('Checking execution results')\nexecutions = (await server.agent_server.\n    test_get_graph_run_node_execution_results(test_graph.id, graph_exec_id,\n    test_user.id))",
                      "start_line": 279,
                      "end_line": 282,
                      "successors": [
                        {
                          "id": 83,
                          "label": "#83\nassert len(executions) == 8",
                          "start_line": 283,
                          "end_line": 283,
                          "successors": [
                            {
                              "id": 85,
                              "label": "#85\nfor i, exec_data in enumerate(executions[-3:]):",
                              "start_line": 285,
                              "end_line": 288,
                              "successors": [
                                {
                                  "id": 86,
                                  "label": "#86\nlogger.info(f'Checking execution {i + 1} of last 3: {exec_data}')\nassert exec_data.status == execution.ExecutionStatus.COMPLETED",
                                  "start_line": 286,
                                  "end_line": 287,
                                  "successors": [
                                    {
                                      "id": 89,
                                      "label": "#89\nassert exec_data.output_data == {'result': [9]}",
                                      "start_line": 288,
                                      "end_line": 288,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 87,
                                  "label": "#87\nlogger.info('Completed test_static_input_link_on_graph')",
                                  "start_line": 289,
                                  "end_line": 289,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}