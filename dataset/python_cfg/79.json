{
  "name": "79.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "start_line": 4,
      "end_line": 52,
      "successors": [
        {
          "id": 9,
          "label": "#9\nimport doctest\ndoctest.testmod()",
          "start_line": 50,
          "end_line": 52,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "binary_and",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\nif a < 0 or b < 0:",
          "start_line": 5,
          "end_line": 36,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('the value of both inputs must be positive')",
              "start_line": 36,
              "end_line": 36,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\na_binary = format(a, 'b')\nb_binary = format(b, 'b')\nmax_len = max(len(a_binary), len(b_binary))\nreturn '0b' + ''.join(str(int(char_a == '1' and char_b == '1')) for char_a,\n    char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len)))",
              "start_line": 38,
              "end_line": 46,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}