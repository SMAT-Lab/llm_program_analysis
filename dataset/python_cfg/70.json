{
  "name": "70.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nfrom typing import TYPE_CHECKING, Annotated, Literal\nfrom fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request\nfrom pydantic import BaseModel, Field, SecretStr\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.integrations import WebhookEvent, get_all_webhooks_by_creds, get_webhook, publish_webhook_event, wait_for_webhook_event\nfrom backend.data.model import APIKeyCredentials, Credentials, CredentialsType, OAuth2Credentials\nfrom backend.executor.manager import ExecutionManager\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nfrom backend.util.exceptions import NeedConfirmation\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "label": "#2\nfrom backend.integrations.oauth import BaseOAuthHandler",
          "successors": [
            {
              "id": 3,
              "label": "#3\nfrom ..utils import get_user_id\nlogger = logging.getLogger(__name__)\nsettings = Settings()\nrouter = APIRouter()\ncreds_manager = IntegrationCredentialsManager()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "login",
      "type": "CFG",
      "blocks": [
        {
          "id": 8,
          "label": "#8\nhandler = _get_provider_oauth_handler(request, provider)\nrequested_scopes = scopes.split(',') if scopes else []\nstate_token = creds_manager.store.store_state_token(user_id, provider,\n    requested_scopes)\nlogin_url = handler.get_login_url(requested_scopes, state_token)\nreturn LoginResponse(login_url=login_url, state_token=state_token)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "callback",
      "type": "CFG",
      "blocks": [
        {
          "id": 15,
          "label": "#15\nlogger.debug(f'Received OAuth callback for provider: {provider}')\nhandler = _get_provider_oauth_handler(request, provider)\nif not creds_manager.store.verify_state_token(user_id, state_token, provider):",
          "successors": [
            {
              "id": 16,
              "label": "#16\nlogger.warning(f'Invalid or expired state token for user {user_id}')\nraise HTTPException(status_code=400, detail='Invalid or expired state token')",
              "successors": []
            },
            {
              "id": 17,
              "label": "#17\ntry:",
              "successors": [
                {
                  "id": 19,
                  "label": "#19\nscopes = creds_manager.store.get_any_valid_scopes_from_state_token(user_id,\n    state_token, provider)\nlogger.debug(f'Retrieved scopes from state token: {scopes}')\nscopes = handler.handle_default_scopes(scopes)\ncredentials = handler.exchange_code_for_tokens(code, scopes)\nlogger.debug(f'Received credentials with final scopes: {credentials.scopes}')\nif not set(scopes).issubset(set(credentials.scopes)):",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\nlogger.warning(\n    f'Granted scopes {credentials.scopes} for provider {provider.value} do not include all requested scopes {scopes}'\n    )",
                      "successors": [
                        {
                          "id": 21,
                          "label": "#21\ncreds_manager.create(user_id, credentials)\nlogger.debug(\n    f'Successfully processed OAuth callback for user {user_id} and provider {provider.value}'\n    )\nreturn CredentialsMetaResponse(id=credentials.id, provider=credentials.\n    provider, type=credentials.type, title=credentials.title, scopes=\n    credentials.scopes, username=credentials.username)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 20,
                  "label": "#20\nlogger.error(f'Code->Token exchange failed for provider {provider.value}: {e}')\nraise HTTPException(status_code=400, detail=\n    f'Failed to exchange code for tokens: {str(e)}')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "list_credentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 28,
          "label": "#28\ncredentials = creds_manager.store.get_all_creds(user_id)\nreturn [CredentialsMetaResponse(id=cred.id, provider=cred.provider, type=\n    cred.type, title=cred.title, scopes=cred.scopes if isinstance(cred,\n    OAuth2Credentials) else None, username=cred.username if isinstance(cred,\n    OAuth2Credentials) else None) for cred in credentials]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "list_credentials_by_provider",
      "type": "CFG",
      "blocks": [
        {
          "id": 32,
          "label": "#32\ncredentials = creds_manager.store.get_creds_by_provider(user_id, provider)\nreturn [CredentialsMetaResponse(id=cred.id, provider=cred.provider, type=\n    cred.type, title=cred.title, scopes=cred.scopes if isinstance(cred,\n    OAuth2Credentials) else None, username=cred.username if isinstance(cred,\n    OAuth2Credentials) else None) for cred in credentials]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_credential",
      "type": "CFG",
      "blocks": [
        {
          "id": 36,
          "label": "#36\ncredential = creds_manager.get(user_id, cred_id)\nif not credential:",
          "successors": [
            {
              "id": 37,
              "label": "#37\nraise HTTPException(status_code=404, detail='Credentials not found')",
              "successors": []
            },
            {
              "id": 38,
              "label": "#38\nif credential.provider != provider:",
              "successors": [
                {
                  "id": 40,
                  "label": "#40\nraise HTTPException(status_code=404, detail=\n    'Credentials do not match the specified provider')",
                  "successors": []
                },
                {
                  "id": 41,
                  "label": "#41\nreturn credential",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_api_key_credentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 46,
          "label": "#46\nnew_credentials = APIKeyCredentials(provider=provider, api_key=SecretStr(\n    api_key), title=title, expires_at=expires_at)\ntry:",
          "successors": [
            {
              "id": 47,
              "label": "#47\ncreds_manager.create(user_id, new_credentials)",
              "successors": [
                {
                  "id": 49,
                  "label": "#49\nreturn new_credentials",
                  "successors": []
                }
              ]
            },
            {
              "id": 48,
              "label": "#48\nraise HTTPException(status_code=500, detail=\n    f'Failed to store credentials: {str(e)}')",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_credentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 60,
          "label": "#60\ncreds = creds_manager.store.get_creds_by_id(user_id, cred_id)\nif not creds:",
          "successors": [
            {
              "id": 61,
              "label": "#61\nraise HTTPException(status_code=404, detail='Credentials not found')",
              "successors": []
            },
            {
              "id": 62,
              "label": "#62\nif creds.provider != provider:",
              "successors": [
                {
                  "id": 64,
                  "label": "#64\nraise HTTPException(status_code=404, detail=\n    'Credentials do not match the specified provider')",
                  "successors": []
                },
                {
                  "id": 65,
                  "label": "#65\ntry:",
                  "successors": [
                    {
                      "id": 67,
                      "label": "#67\nawait remove_all_webhooks_for_credentials(creds, force)",
                      "successors": [
                        {
                          "id": 69,
                          "label": "#69\ncreds_manager.delete(user_id, cred_id)\ntokens_revoked = None\nif isinstance(creds, OAuth2Credentials):",
                          "successors": [
                            {
                              "id": 72,
                              "label": "#72\nhandler = _get_provider_oauth_handler(request, provider)\ntokens_revoked = handler.revoke_tokens(creds)",
                              "successors": [
                                {
                                  "id": 73,
                                  "label": "#73\nreturn CredentialsDeletionResponse(revoked=tokens_revoked)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 68,
                      "label": "#68\nreturn CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "webhook_ingress_generic",
      "type": "CFG",
      "blocks": [
        {
          "id": 77,
          "label": "#77\nlogger.debug(f'Received {provider.value} webhook ingress for ID {webhook_id}')\nwebhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\nwebhook = await get_webhook(webhook_id)",
          "successors": [
            {
              "id": 78,
              "label": "#78\nlogger.debug(f'Webhook #{webhook_id}: {webhook}')\npayload, event_type = await webhook_manager.validate_payload(webhook, request)",
              "successors": [
                {
                  "id": 79,
                  "label": "#79\nlogger.debug(\n    f'Validated {provider.value} {webhook.webhook_type} {event_type} event with payload {payload}'\n    )\nwebhook_event = WebhookEvent(provider=provider, webhook_id=webhook_id,\n    event_type=event_type, payload=payload)\nawait publish_webhook_event(webhook_event)",
                  "successors": [
                    {
                      "id": 80,
                      "label": "#80\nlogger.debug(f'Webhook event published: {webhook_event}')\nif not webhook.attached_nodes:",
                      "successors": [
                        {
                          "id": 81,
                          "label": "#81\nreturn",
                          "successors": []
                        },
                        {
                          "id": 82,
                          "label": "#82\nexecutor = get_service_client(ExecutionManager)",
                          "successors": [
                            {
                              "id": 84,
                              "label": "#84\nfor node in webhook.attached_nodes:",
                              "successors": [
                                {
                                  "id": 85,
                                  "label": "#85\nlogger.debug(f'Webhook-attached node: {node}')\nif not node.is_triggered_by_event_type(event_type):",
                                  "successors": [
                                    {
                                      "id": 87,
                                      "label": "#87\nlogger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")",
                                      "successors": []
                                    },
                                    {
                                      "id": 88,
                                      "label": "#88\nlogger.debug(f'Executing graph #{node.graph_id} node #{node.id}')\nexecutor.add_execution(node.graph_id, data={f'webhook_{webhook_id}_payload':\n    payload}, user_id=webhook.user_id)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "webhook_ping",
      "type": "CFG",
      "blocks": [
        {
          "id": 91,
          "label": "#91\nwebhook = await get_webhook(webhook_id)",
          "successors": [
            {
              "id": 92,
              "label": "#92\nwebhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\ncredentials = creds_manager.get(user_id, webhook.credentials_id\n    ) if webhook.credentials_id else None\ntry:",
              "successors": [
                {
                  "id": 93,
                  "label": "#93\nawait webhook_manager.trigger_ping(webhook, credentials)",
                  "successors": [
                    {
                      "id": 95,
                      "label": "#95\nif not await wait_for_webhook_event(webhook_id, event_type='ping', timeout=10):",
                      "successors": [
                        {
                          "id": 98,
                          "label": "#98\nraise HTTPException(status_code=504, detail='Webhook ping timed out')",
                          "successors": []
                        },
                        {
                          "id": 99,
                          "label": "#99\nreturn True",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 94,
                  "label": "#94\nreturn False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "remove_all_webhooks_for_credentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 104,
          "label": "#104\n\"\"\"\n    Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"\nwebhooks = await get_all_webhooks_by_creds(credentials.id)",
          "successors": [
            {
              "id": 105,
              "label": "#105\nif credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:",
              "successors": [
                {
                  "id": 106,
                  "label": "#106\nif webhooks:",
                  "successors": [
                    {
                      "id": 108,
                      "label": "#108\nlogger.error(\n    f'Credentials #{credentials.id} for provider {credentials.provider} are attached to {len(webhooks)} webhooks, but there is no available WebhooksHandler for {credentials.provider}'\n    )",
                      "successors": [
                        {
                          "id": 109,
                          "label": "#109\nreturn",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 107,
                  "label": "#107\nif any(w.attached_nodes for w in webhooks) and not force:",
                  "successors": [
                    {
                      "id": 111,
                      "label": "#111\nraise NeedConfirmation(\n    'Some webhooks linked to these credentials are still in use by an agent')",
                      "successors": []
                    },
                    {
                      "id": 112,
                      "label": "#112\nfor webhook in webhooks:",
                      "successors": [
                        {
                          "id": 114,
                          "label": "#114\nfor node in (webhook.attached_nodes or []):",
                          "successors": [
                            {
                              "id": 116,
                              "label": "#116\nawait set_node_webhook(node.id, None)",
                              "successors": []
                            },
                            {
                              "id": 117,
                              "label": "#117\nwebhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\nsuccess = await webhook_manager.prune_webhook_if_dangling(webhook.id,\n    credentials)",
                              "successors": [
                                {
                                  "id": 119,
                                  "label": "#119\nif not success:",
                                  "successors": [
                                    {
                                      "id": 120,
                                      "label": "#120\nlogger.warning(f'Webhook #{webhook.id} failed to prune')",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_get_provider_oauth_handler",
      "type": "CFG",
      "blocks": [
        {
          "id": 124,
          "label": "#124\nif provider_name not in HANDLERS_BY_NAME:",
          "successors": [
            {
              "id": 125,
              "label": "#125\nraise HTTPException(status_code=404, detail=\n    f\"Provider '{provider_name.value}' does not support OAuth\")",
              "successors": []
            },
            {
              "id": 126,
              "label": "#126\nclient_id = getattr(settings.secrets, f'{provider_name.value}_client_id')\nclient_secret = getattr(settings.secrets,\n    f'{provider_name.value}_client_secret')\nif not (client_id and client_secret):",
              "successors": [
                {
                  "id": 128,
                  "label": "#128\nraise HTTPException(status_code=501, detail=\n    f\"Integration with provider '{provider_name.value}' is not configured\")",
                  "successors": []
                },
                {
                  "id": 129,
                  "label": "#129\nhandler_class = HANDLERS_BY_NAME[provider_name]\nfrontend_base_url = (settings.config.frontend_base_url or settings.config.\n    platform_base_url or str(req.base_url))\nreturn handler_class(client_id=client_id, client_secret=client_secret,\n    redirect_uri=f'{frontend_base_url}/auth/integrations/oauth_callback')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "LoginResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 5,
          "label": "#5\nlogin_url: str\nstate_token: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CredentialsMetaResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\nid: str\nprovider: str\ntype: CredentialsType\ntitle: str | None\nscopes: list[str] | None\nusername: str | None",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CredentialsDeletionResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 54,
          "label": "#54\ndeleted: Literal[True] = True\nrevoked: bool | None = Field(description=\n    'Indicates whether the credentials were also revoked by their provider. `None`/`null` if not applicable, e.g. when deleting non-revocable credentials such as API keys.'\n    )",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CredentialsDeletionNeedsConfirmationResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 57,
          "label": "#57\ndeleted: Literal[False] = False\nneed_confirmation: Literal[True] = True\nmessage: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}