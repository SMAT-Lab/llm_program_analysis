{
  "name": "12.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport base64\nfrom typing_extensions import TypedDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._api import get_api\nfrom ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput",
      "start_line": 1,
      "end_line": 701,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "GithubListTagsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 19,
          "end_line": 96,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='358924e7-9a11-4d1a-a0f2-13c67fe59e2e', description=\n    'This block lists all tags for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListTagsBlock.Input, output_schema=GithubListTagsBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('tag', {'name': 'v1.0.0', 'url':\n    'https://github.com/owner/repo/tree/v1.0.0'})], test_mock={'list_tags':\n    lambda *args, **kwargs: [{'name': 'v1.0.0', 'url':\n    'https://github.com/owner/repo/tree/v1.0.0'}]})",
              "start_line": 37,
              "end_line": 65,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_tags",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\napi = get_api(credentials)\ntags_url = repo_url + '/tags'\nresponse = api.get(tags_url)\ndata = response.json()\nrepo_path = repo_url.replace('https://github.com/', '')\ntags: list[GithubListTagsBlock.Output.TagItem] = [{'name': tag['name'],\n    'url': f\"https://github.com/{repo_path}/tree/{tag['name']}\"} for tag in\n    data]\nreturn tags",
              "start_line": 71,
              "end_line": 83,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\ntags = self.list_tags(credentials, input_data.repo_url)\nyield from (('tag', tag) for tag in tags)",
              "start_line": 92,
              "end_line": 96,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')",
              "start_line": 20,
              "end_line": 24,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\ntag: TagItem = SchemaField(title='Tag', description=\n    'Tags with their name and file tree browser URL')\nerror: str = SchemaField(description='Error message if listing tags failed')",
              "start_line": 27,
              "end_line": 34,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "TagItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 10,
                  "label": "#10\nname: str\nurl: str",
                  "start_line": 28,
                  "end_line": 29,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListBranchesBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 25,
          "label": "#25",
          "start_line": 100,
          "end_line": 178,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\nsuper().__init__(id='74243e49-2bec-4916-8bf4-db43d44aead5', description=\n    'This block lists all branches for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListBranchesBlock.Input, output_schema=GithubListBranchesBlock.\n    Output, test_input={'repo_url': 'https://github.com/owner/repo',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('branch', {'name': 'main', 'url':\n    'https://github.com/owner/repo/tree/main'})], test_mock={\n    'list_branches': lambda *args, **kwargs: [{'name': 'main', 'url':\n    'https://github.com/owner/repo/tree/main'}]})",
              "start_line": 119,
              "end_line": 147,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_branches",
          "type": "CFG",
          "blocks": [
            {
              "id": 39,
              "label": "#39\napi = get_api(credentials)\nbranches_url = repo_url + '/branches'\nresponse = api.get(branches_url)\ndata = response.json()\nrepo_path = repo_url.replace('https://github.com/', '')\nbranches: list[GithubListBranchesBlock.Output.BranchItem] = [{'name':\n    branch['name'], 'url':\n    f\"https://github.com/{repo_path}/tree/{branch['name']}\"} for branch in data\n    ]\nreturn branches",
              "start_line": 153,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\nbranches = self.list_branches(credentials, input_data.repo_url)\nyield from (('branch', branch) for branch in branches)",
              "start_line": 174,
              "end_line": 178,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')",
              "start_line": 101,
              "end_line": 105,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nbranch: BranchItem = SchemaField(title='Branch', description=\n    'Branches with their name and file tree browser URL')\nerror: str = SchemaField(description='Error message if listing branches failed'\n    )",
              "start_line": 108,
              "end_line": 116,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "BranchItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 32,
                  "label": "#32\nname: str\nurl: str",
                  "start_line": 109,
                  "end_line": 110,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListDiscussionsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 47,
          "label": "#47",
          "start_line": 182,
          "end_line": 278,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 58,
              "label": "#58\nsuper().__init__(id='3ef1a419-3d76-4e07-b761-de9dad4d51d7', description=\n    'This block lists recent discussions for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListDiscussionsBlock.Input, output_schema=\n    GithubListDiscussionsBlock.Output, test_input={'repo_url':\n    'https://github.com/owner/repo', 'num_discussions': 3, 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('discussion', {'title': 'Discussion 1', 'url':\n    'https://github.com/owner/repo/discussions/1'})], test_mock={\n    'list_discussions': lambda *args, **kwargs: [{'title': 'Discussion 1',\n    'url': 'https://github.com/owner/repo/discussions/1'}]})",
              "start_line": 205,
              "end_line": 234,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_discussions",
          "type": "CFG",
          "blocks": [
            {
              "id": 61,
              "label": "#61\napi = get_api(credentials)\nrepo_path = repo_url.replace('https://github.com/', '')\nowner, repo = repo_path.split('/')\nquery = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\nvariables = {'owner': owner, 'repo': repo, 'num': num_discussions}\nresponse = api.post('https://api.github.com/graphql', json={'query': query,\n    'variables': variables})\ndata = response.json()\ndiscussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [{\n    'title': discussion['title'], 'url': discussion['url']} for discussion in\n    data['data']['repository']['discussions']['nodes']]\nreturn discussions",
              "start_line": 240,
              "end_line": 266,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 65,
              "label": "#65\ndiscussions = self.list_discussions(credentials, input_data.repo_url,\n    input_data.num_discussions)\nyield from (('discussion', discussion) for discussion in discussions)",
              "start_line": 275,
              "end_line": 278,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 49,
              "label": "#49\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\nnum_discussions: int = SchemaField(description=\n    'Number of discussions to fetch', default=5)",
              "start_line": 183,
              "end_line": 190,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 52,
              "label": "#52\ndiscussion: DiscussionItem = SchemaField(title='Discussion', description=\n    'Discussions with their title and URL')\nerror: str = SchemaField(description=\n    'Error message if listing discussions failed')",
              "start_line": 193,
              "end_line": 202,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "DiscussionItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 54,
                  "label": "#54\ntitle: str\nurl: str",
                  "start_line": 194,
                  "end_line": 195,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListReleasesBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 69,
          "label": "#69",
          "start_line": 282,
          "end_line": 355,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 80,
              "label": "#80\nsuper().__init__(id='3460367a-6ba7-4645-8ce6-47b05d040b92', description=\n    'This block lists all releases for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListReleasesBlock.Input, output_schema=GithubListReleasesBlock.\n    Output, test_input={'repo_url': 'https://github.com/owner/repo',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('release', {'name': 'v1.0.0', 'url':\n    'https://github.com/owner/repo/releases/tag/v1.0.0'})], test_mock={\n    'list_releases': lambda *args, **kwargs: [{'name': 'v1.0.0', 'url':\n    'https://github.com/owner/repo/releases/tag/v1.0.0'}]})",
              "start_line": 301,
              "end_line": 329,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_releases",
          "type": "CFG",
          "blocks": [
            {
              "id": 83,
              "label": "#83\napi = get_api(credentials)\nreleases_url = repo_url + '/releases'\nresponse = api.get(releases_url)\ndata = response.json()\nreleases: list[GithubListReleasesBlock.Output.ReleaseItem] = [{'name':\n    release['name'], 'url': release['html_url']} for release in data]\nreturn releases",
              "start_line": 335,
              "end_line": 342,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 87,
              "label": "#87\nreleases = self.list_releases(credentials, input_data.repo_url)\nyield from (('release', release) for release in releases)",
              "start_line": 351,
              "end_line": 355,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 71,
              "label": "#71\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')",
              "start_line": 283,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\nrelease: ReleaseItem = SchemaField(title='Release', description=\n    'Releases with their name and file tree browser URL')\nerror: str = SchemaField(description='Error message if listing releases failed'\n    )",
              "start_line": 290,
              "end_line": 298,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "ReleaseItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 76,
                  "label": "#76\nname: str\nurl: str",
                  "start_line": 291,
                  "end_line": 292,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubReadFileBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 91,
          "label": "#91",
          "start_line": 359,
          "end_line": 442,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 99,
              "label": "#99\nsuper().__init__(id='87ce6c27-5752-4bbc-8e26-6da40a3dcfd3', description=\n    'This block reads the content of a specified file from a GitHub repository.'\n    , categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubReadFileBlock.Input, output_schema=GithubReadFileBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'file_path':\n    'path/to/file', 'branch': 'master', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('raw_content', 'RmlsZSBjb250ZW50'), ('text_content', 'File content'),\n    ('size', 13)], test_mock={'read_file': lambda *args, **kwargs: (\n    'RmlsZSBjb250ZW50', 13)})",
              "start_line": 386,
              "end_line": 405,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "read_file",
          "type": "CFG",
          "blocks": [
            {
              "id": 102,
              "label": "#102\napi = get_api(credentials)\ncontent_url = repo_url + f'/contents/{file_path}?ref={branch}'\nresponse = api.get(content_url)\ncontent = response.json()\nif isinstance(content, list):",
              "start_line": 411,
              "end_line": 420,
              "successors": [
                {
                  "id": 103,
                  "label": "#103\nif not (file := next((f for f in content if f['type'] == 'file'), None)):",
                  "start_line": 418,
                  "end_line": 419,
                  "successors": [
                    {
                      "id": 105,
                      "label": "#105\nraise TypeError('Not a file')",
                      "start_line": 419,
                      "end_line": 419,
                      "successors": []
                    },
                    {
                      "id": 106,
                      "label": "#106\ncontent = file",
                      "start_line": 420,
                      "end_line": 420,
                      "successors": [
                        {
                          "id": 104,
                          "label": "#104\nif content['type'] != 'file':",
                          "start_line": 422,
                          "end_line": 423,
                          "successors": [
                            {
                              "id": 108,
                              "label": "#108\nraise TypeError('Not a file')",
                              "start_line": 423,
                              "end_line": 423,
                              "successors": []
                            },
                            {
                              "id": 109,
                              "label": "#109\nreturn content['content'], content['size']",
                              "start_line": 425,
                              "end_line": 425,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 114,
              "label": "#114\nraw_content, size = self.read_file(credentials, input_data.repo_url,\n    input_data.file_path.lstrip('/'), input_data.branch)\nyield 'raw_content', raw_content",
              "start_line": 434,
              "end_line": 440,
              "successors": [
                {
                  "id": 115,
                  "label": "#115\nyield 'text_content', base64.b64decode(raw_content).decode('utf-8')",
                  "start_line": 441,
                  "end_line": 441,
                  "successors": [
                    {
                      "id": 116,
                      "label": "#116\nyield 'size', size",
                      "start_line": 442,
                      "end_line": 442,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 93,
              "label": "#93\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\nfile_path: str = SchemaField(description=\n    'Path to the file in the repository', placeholder='path/to/file')\nbranch: str = SchemaField(description='Branch to read from', placeholder=\n    'branch_name', default='master')",
              "start_line": 360,
              "end_line": 373,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 96,
              "label": "#96\ntext_content: str = SchemaField(description=\n    'Content of the file (decoded as UTF-8 text)')\nraw_content: str = SchemaField(description=\n    'Raw base64-encoded content of the file')\nsize: int = SchemaField(description='The size of the file (in bytes)')\nerror: str = SchemaField(description='Error message if the file reading failed'\n    )",
              "start_line": 376,
              "end_line": 383,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubReadFolderBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 121,
          "label": "#121",
          "start_line": 446,
          "end_line": 563,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 135,
              "label": "#135\nsuper().__init__(id='1355f863-2db3-4d75-9fba-f91e8a8ca400', description=\n    'This block reads the content of a specified folder from a GitHub repository.'\n    , categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubReadFolderBlock.Input, output_schema=GithubReadFolderBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'folder_path':\n    'path/to/folder', 'branch': 'master', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('file', {'name': 'file1.txt', 'path': 'path/to/folder/file1.txt',\n    'size': 1337}), ('dir', {'name': 'dir2', 'path': 'path/to/folder/dir2'}\n    )], test_mock={'read_folder': lambda *args, **kwargs: ([{'name':\n    'file1.txt', 'path': 'path/to/folder/file1.txt', 'size': 1337}], [{\n    'name': 'dir2', 'path': 'path/to/folder/dir2'}])})",
              "start_line": 479,
              "end_line": 515,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "read_folder",
          "type": "CFG",
          "blocks": [
            {
              "id": 138,
              "label": "#138\napi = get_api(credentials)\ncontents_url = repo_url + f'/contents/{folder_path}?ref={branch}'\nresponse = api.get(contents_url)\ncontent = response.json()\nif not isinstance(content, list):",
              "start_line": 521,
              "end_line": 527,
              "successors": [
                {
                  "id": 139,
                  "label": "#139\nraise TypeError('Not a folder')",
                  "start_line": 527,
                  "end_line": 527,
                  "successors": []
                },
                {
                  "id": 140,
                  "label": "#140\nfiles = [GithubReadFolderBlock.Output.FileEntry(name=entry['name'], path=\n    entry['path'], size=entry['size']) for entry in content if entry['type'\n    ] == 'file']\ndirs = [GithubReadFolderBlock.Output.DirEntry(name=entry['name'], path=\n    entry['path']) for entry in content if entry['type'] == 'dir']\nreturn files, dirs",
                  "start_line": 529,
                  "end_line": 547,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 145,
              "label": "#145\nfiles, dirs = self.read_folder(credentials, input_data.repo_url, input_data\n    .folder_path.lstrip('/'), input_data.branch)\nyield from (('file', file) for file in files)\nyield from (('dir', dir) for dir in dirs)",
              "start_line": 556,
              "end_line": 563,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 123,
              "label": "#123\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\nfolder_path: str = SchemaField(description=\n    'Path to the folder in the repository', placeholder='path/to/folder')\nbranch: str = SchemaField(description=\n    'Branch name to read from (defaults to master)', placeholder=\n    'branch_name', default='master')",
              "start_line": 447,
              "end_line": 460,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 126,
              "label": "#126\nfile: FileEntry = SchemaField(description='Files in the folder')\ndir: DirEntry = SchemaField(description='Directories in the folder')\nerror: str = SchemaField(description=\n    'Error message if reading the folder failed')",
              "start_line": 463,
              "end_line": 476,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "DirEntry",
              "type": "CFG",
              "blocks": [
                {
                  "id": 128,
                  "label": "#128\nname: str\npath: str",
                  "start_line": 464,
                  "end_line": 465,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "FileEntry",
              "type": "CFG",
              "blocks": [
                {
                  "id": 131,
                  "label": "#131\nname: str\npath: str\nsize: int",
                  "start_line": 468,
                  "end_line": 470,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubMakeBranchBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 149,
          "label": "#149",
          "start_line": 567,
          "end_line": 640,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 157,
              "label": "#157\nsuper().__init__(id='944cc076-95e7-4d1b-b6b6-b15d8ee5448d', description=\n    'This block creates a new branch from a specified source branch.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubMakeBranchBlock.Input, output_schema=GithubMakeBranchBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'new_branch':\n    'new_branch_name', 'source_branch': 'source_branch_name', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('status', 'Branch created successfully')], test_mock={\n    'create_branch': lambda *args, **kwargs: 'Branch created successfully'})",
              "start_line": 589,
              "end_line": 606,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_branch",
          "type": "CFG",
          "blocks": [
            {
              "id": 160,
              "label": "#160\napi = get_api(credentials)\nref_url = repo_url + f'/git/refs/heads/{source_branch}'\nresponse = api.get(ref_url)\nsha = response.json()['object']['sha']\ncreate_ref_url = repo_url + '/git/refs'\ndata = {'ref': f'refs/heads/{new_branch}', 'sha': sha}\nresponse = api.post(create_ref_url, json=data)\nreturn 'Branch created successfully'",
              "start_line": 615,
              "end_line": 625,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 164,
              "label": "#164\nstatus = self.create_branch(credentials, input_data.repo_url, input_data.\n    new_branch, input_data.source_branch)\nyield 'status', status",
              "start_line": 634,
              "end_line": 640,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 151,
              "label": "#151\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\nnew_branch: str = SchemaField(description='Name of the new branch',\n    placeholder='new_branch_name')\nsource_branch: str = SchemaField(description='Name of the source branch',\n    placeholder='source_branch_name')",
              "start_line": 568,
              "end_line": 580,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 154,
              "label": "#154\nstatus: str = SchemaField(description='Status of the branch creation operation'\n    )\nerror: str = SchemaField(description=\n    'Error message if the branch creation failed')",
              "start_line": 583,
              "end_line": 586,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubDeleteBranchBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 169,
          "label": "#169",
          "start_line": 644,
          "end_line": 701,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 177,
              "label": "#177\nsuper().__init__(id='0d4130f7-e0ab-4d55-adc3-0a40225e80f4', description=\n    'This block deletes a specified branch.', categories={BlockCategory.\n    DEVELOPER_TOOLS}, input_schema=GithubDeleteBranchBlock.Input,\n    output_schema=GithubDeleteBranchBlock.Output, test_input={'repo_url':\n    'https://github.com/owner/repo', 'branch': 'branch_name', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('status', 'Branch deleted successfully')], test_mock={\n    'delete_branch': lambda *args, **kwargs: 'Branch deleted successfully'})",
              "start_line": 662,
              "end_line": 678,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete_branch",
          "type": "CFG",
          "blocks": [
            {
              "id": 180,
              "label": "#180\napi = get_api(credentials)\nref_url = repo_url + f'/git/refs/heads/{branch}'\napi.delete(ref_url)\nreturn 'Branch deleted successfully'",
              "start_line": 684,
              "end_line": 687,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 184,
              "label": "#184\nstatus = self.delete_branch(credentials, input_data.repo_url, input_data.branch\n    )\nyield 'status', status",
              "start_line": 696,
              "end_line": 701,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 171,
              "label": "#171\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\nbranch: str = SchemaField(description='Name of the branch to delete',\n    placeholder='branch_name')",
              "start_line": 645,
              "end_line": 653,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 174,
              "label": "#174\nstatus: str = SchemaField(description='Status of the branch deletion operation'\n    )\nerror: str = SchemaField(description=\n    'Error message if the branch deletion failed')",
              "start_line": 656,
              "end_line": 659,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}