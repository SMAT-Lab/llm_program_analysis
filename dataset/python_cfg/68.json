{
  "name": "68.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\nfrom .config import SETTINGS\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\nP = ParamSpec('P')\nT = TypeVar('T')",
      "start_line": 1,
      "end_line": 167,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Get the LaunchDarkly client singleton.\"\"\"\nreturn ldclient.get()",
          "start_line": 23,
          "end_line": 24,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "initialize_launchdarkly",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nsdk_key = SETTINGS.launch_darkly_sdk_key\nlogger.debug(\n    f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\nif not sdk_key:",
          "start_line": 28,
          "end_line": 35,
          "successors": [
            {
              "id": 8,
              "label": "#8\nlogger.warning('LaunchDarkly SDK key not configured')\nreturn",
              "start_line": 34,
              "end_line": 35,
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nconfig = Config(sdk_key)\nldclient.set_config(config)\nif ldclient.get().is_initialized():",
              "start_line": 37,
              "end_line": 43,
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nlogger.info('LaunchDarkly client initialized successfully')",
                  "start_line": 41,
                  "end_line": 41,
                  "successors": []
                },
                {
                  "id": 13,
                  "label": "#13\nlogger.error('LaunchDarkly client failed to initialize')",
                  "start_line": 43,
                  "end_line": 43,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "shutdown_launchdarkly",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\n\"\"\"Shutdown the LaunchDarkly client.\"\"\"\nif ldclient.get().is_initialized():",
          "start_line": 47,
          "end_line": 50,
          "successors": [
            {
              "id": 17,
              "label": "#17\nldclient.get().close()\nlogger.info('LaunchDarkly client closed successfully')",
              "start_line": 49,
              "end_line": 50,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 21,
          "label": "#21\n\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\nbuilder = Context.builder(str(user_id)).kind('user')\nif additional_attributes:",
          "start_line": 56,
          "end_line": 60,
          "successors": [
            {
              "id": 22,
              "label": "#22\nfor key, value in additional_attributes.items():",
              "start_line": 59,
              "end_line": 60,
              "successors": [
                {
                  "id": 24,
                  "label": "#24\nbuilder.set(key, value)",
                  "start_line": 60,
                  "end_line": 60,
                  "successors": []
                },
                {
                  "id": 23,
                  "label": "#23\nreturn builder.build()",
                  "start_line": 61,
                  "end_line": 61,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "feature_flag",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\n\"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\nreturn decorator",
          "start_line": 70,
          "end_line": 133,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "decorator",
          "type": "CFG",
          "blocks": [
            {
              "id": 31,
              "label": "#31\nreturn cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.\n    iscoroutinefunction(func) else sync_wrapper)",
              "start_line": 78,
              "end_line": 131,
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "async_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 33,
                  "label": "#33\ntry:",
                  "start_line": 79,
                  "end_line": 102,
                  "successors": [
                    {
                      "id": 34,
                      "label": "#34\nuser_id = kwargs.get('user_id')\nif not user_id:",
                      "start_line": 80,
                      "end_line": 82,
                      "successors": [
                        {
                          "id": 37,
                          "label": "#37\nraise ValueError('user_id is required')",
                          "start_line": 82,
                          "end_line": 82,
                          "successors": []
                        },
                        {
                          "id": 38,
                          "label": "#38\nif not get_client().is_initialized():",
                          "start_line": 84,
                          "end_line": 91,
                          "successors": [
                            {
                              "id": 40,
                              "label": "#40\nlogger.warning(f'LaunchDarkly not initialized, using default={default}')\nis_enabled = default",
                              "start_line": 85,
                              "end_line": 88,
                              "successors": [
                                {
                                  "id": 41,
                                  "label": "#41\nif not is_enabled:",
                                  "start_line": 93,
                                  "end_line": 94,
                                  "successors": [
                                    {
                                      "id": 43,
                                      "label": "#43\nraise HTTPException(status_code=404, detail='Feature not available')",
                                      "start_line": 94,
                                      "end_line": 94,
                                      "successors": []
                                    },
                                    {
                                      "id": 44,
                                      "label": "#44\nresult = func(*args, **kwargs)\nif asyncio.iscoroutine(result):",
                                      "start_line": 96,
                                      "end_line": 98,
                                      "successors": [
                                        {
                                          "id": 46,
                                          "label": "#46\nreturn await result",
                                          "start_line": 98,
                                          "end_line": 98,
                                          "successors": []
                                        },
                                        {
                                          "id": 47,
                                          "label": "#47\nreturn cast(T, result)",
                                          "start_line": 99,
                                          "end_line": 99,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 42,
                              "label": "#42\ncontext = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)",
                              "start_line": 90,
                              "end_line": 91,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 35,
                      "label": "#35\nlogger.error(f'Error evaluating feature flag {flag_key}: {e}')\nraise",
                      "start_line": 101,
                      "end_line": 102,
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "sync_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 53,
                  "label": "#53\ntry:",
                  "start_line": 106,
                  "end_line": 126,
                  "successors": [
                    {
                      "id": 54,
                      "label": "#54\nuser_id = kwargs.get('user_id')\nif not user_id:",
                      "start_line": 107,
                      "end_line": 109,
                      "successors": [
                        {
                          "id": 57,
                          "label": "#57\nraise ValueError('user_id is required')",
                          "start_line": 109,
                          "end_line": 109,
                          "successors": []
                        },
                        {
                          "id": 58,
                          "label": "#58\nif not get_client().is_initialized():",
                          "start_line": 111,
                          "end_line": 118,
                          "successors": [
                            {
                              "id": 60,
                              "label": "#60\nlogger.warning(f'LaunchDarkly not initialized, using default={default}')\nis_enabled = default",
                              "start_line": 112,
                              "end_line": 115,
                              "successors": [
                                {
                                  "id": 61,
                                  "label": "#61\nif not is_enabled:",
                                  "start_line": 120,
                                  "end_line": 121,
                                  "successors": [
                                    {
                                      "id": 63,
                                      "label": "#63\nraise HTTPException(status_code=404, detail='Feature not available')",
                                      "start_line": 121,
                                      "end_line": 121,
                                      "successors": []
                                    },
                                    {
                                      "id": 64,
                                      "label": "#64\nreturn cast(T, func(*args, **kwargs))",
                                      "start_line": 123,
                                      "end_line": 123,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 62,
                              "label": "#62\ncontext = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)",
                              "start_line": 117,
                              "end_line": 118,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 55,
                      "label": "#55\nlogger.error(f'Error evaluating feature flag {flag_key}: {e}')\nraise",
                      "start_line": 125,
                      "end_line": 126,
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "percentage_rollout",
      "type": "CFG",
      "blocks": [
        {
          "id": 74,
          "label": "#74\n\"\"\"Decorator for percentage-based rollouts.\"\"\"\nreturn feature_flag(flag_key, default)",
          "start_line": 142,
          "end_line": 143,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "beta_feature",
      "type": "CFG",
      "blocks": [
        {
          "id": 78,
          "label": "#78\n\"\"\"Decorator for beta features.\"\"\"\nactual_key = f'beta-{flag_key}' if flag_key else 'beta'\nreturn feature_flag(actual_key, False)",
          "start_line": 152,
          "end_line": 154,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_flag_variation",
      "type": "CFG",
      "blocks": [
        {
          "id": 82,
          "label": "#82\n\"\"\"Context manager for testing feature flags.\"\"\"\noriginal_variation = get_client().variation\nget_client().variation = (lambda key, context, default: return_value if key ==\n    flag_key else original_variation(key, context, default))\ntry:",
          "start_line": 159,
          "end_line": 167,
          "successors": [
            {
              "id": 83,
              "label": "#83\nyield",
              "start_line": 165,
              "end_line": 165,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}