{
  "name": "94.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"\nfrom __future__ import annotations\nimport math\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 95,
      "successors": [
        {
          "id": 21,
          "label": "#21\nimport doctest\ndoctest.testmod()\nmain()",
          "start_line": 92,
          "end_line": 95,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "minimax",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\nif depth < 0:",
          "start_line": 19,
          "end_line": 56,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('Depth cannot be less than 0')",
              "start_line": 56,
              "end_line": 56,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nif len(scores) == 0:",
              "start_line": 57,
              "end_line": 58,
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nraise ValueError('Scores cannot be empty')",
                  "start_line": 58,
                  "end_line": 58,
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "#8\nif depth == height:",
                  "start_line": 62,
                  "end_line": 63,
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nreturn scores[node_index]",
                      "start_line": 63,
                      "end_line": 63,
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "#11\nif is_max:",
                      "start_line": 67,
                      "end_line": 71,
                      "successors": [
                        {
                          "id": 13,
                          "label": "#13\nreturn max(minimax(depth + 1, node_index * 2, False, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, False, scores, height))",
                          "start_line": 68,
                          "end_line": 71,
                          "successors": []
                        },
                        {
                          "id": 14,
                          "label": "#14\nreturn min(minimax(depth + 1, node_index * 2, True, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, True, scores, height))",
                          "start_line": 75,
                          "end_line": 78,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19\nscores = [90, 23, 6, 33, 21, 65, 123, 34423]\nheight = math.log(len(scores), 2)\nprint('Optimal value : ', end='')\nprint(minimax(0, 0, True, scores, height))",
          "start_line": 83,
          "end_line": 88,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}