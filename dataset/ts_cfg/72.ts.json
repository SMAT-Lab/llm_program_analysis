{
  "type": "file",
  "name": "72.ts",
  "label": "72.ts",
  "start_line": -1,
  "end_line": 98,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 98,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 98,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/72.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 98,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumBarModel",
      "label": "AlbumBarModel",
      "start_line": 1,
      "end_line": 92,
      "functions": [
        {
          "type": "function",
          "name": "createActionBar",
          "label": "createActionBar",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isAlbumSetSelectedMode = parameter0: boolean\nselectedAlbumsCount = parameter1: number\nisDisableRename = parameter2: boolean\nisDisableDelete = parameter3: boolean\nthis = this: @ts_files/72.ts: AlbumBarModel\n%0 = new @%unk/%unk: ActionBarProp\ninstanceinvoke %0.<@%unk/%unk: ActionBarProp.constructor()>()\nactionBarProp = %0\nisHorizontal = instanceinvoke screenManager.<@%unk/%unk: .isHorizontal()>()\nif isHorizontal != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/72.ts: AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)>(actionBarProp, isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return actionBarProp",
                      "start_line": 32,
                      "end_line": 89,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/72.ts: AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)>(actionBarProp, isAlbumSetSelectedMode)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "updateActionBar",
          "label": "updateActionBar",
          "start_line": 1,
          "end_line": 35,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\nisAlbumSetSelectedMode = parameter1: boolean\nselectedAlbumsCount = parameter2: number\nisDisableRename = parameter3: boolean\nisDisableDelete = parameter4: boolean\nthis = this: @ts_files/72.ts: AlbumBarModel\nisHorizontal = instanceinvoke screenManager.<@%unk/%unk: .isHorizontal()>()\nif isHorizontal != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/72.ts: AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)>(actionBarProp, isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 32,
                      "end_line": 98,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/72.ts: AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)>(actionBarProp, isAlbumSetSelectedMode)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "updateActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean,\n                  selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): void {\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "updateHorizontalActionBar",
          "label": "updateHorizontalActionBar",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\nisAlbumSetSelectedMode = parameter1: boolean\nselectedAlbumsCount = parameter2: number\nisDisableRename = parameter3: boolean\nisDisableDelete = parameter4: boolean\nthis = this: @ts_files/72.ts: AlbumBarModel\nisSidebar = instanceinvoke screenManager.<@%unk/%unk: .isSidebar()>()\n%0 = staticinvoke <@%unk/%unk: .$r()>('app.string.tab_albums')\n%1 = instanceinvoke actionBarProp.<@%unk/%unk: .setHasTabBar()>(isSidebar)\n%2 = instanceinvoke %1.<@%unk/%unk: .setTitle()>(%0)\ninstanceinvoke %2.<@%unk/%unk: .setIsHeadTitle()>(true)\nmenuList = instanceinvoke this.<@ts_files/72.ts: AlbumBarModel.getMenuList(boolean, number, boolean, boolean)>(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete)\nif isAlbumSetSelectedMode != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = ActionBarSelectionMode.<@%unk/%unk: .MULTI>\n%4 = ActionBarMode.<@%unk/%unk: .SELECTION_MODE>\n%5 = Action.<@%unk/%unk: .CANCEL>\n%6 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%5)\n%7 = instanceinvoke %6.<@%unk/%unk: .setMenuList()>(menuList)\n%8 = instanceinvoke %7.<@%unk/%unk: .setMode()>(%4)\ninstanceinvoke %8.<@%unk/%unk: .setSelectionMode()>(%3)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return actionBarProp",
                      "start_line": 32,
                      "end_line": 89,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = Action.<@%unk/%unk: .NEW>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%9)\n%10 = ActionBarMode.<@%unk/%unk: .STANDARD_MODE>\n%11 = instanceinvoke actionBarProp.<@%unk/%unk: .setMenuList()>(menuList)\ninstanceinvoke %11.<@%unk/%unk: .setMode()>(%10)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private updateHorizontalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                                    isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n    let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      menuList.push(Action.NEW)\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "updateVerticalActionBar",
          "label": "updateVerticalActionBar",
          "start_line": 1,
          "end_line": 69,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\nisAlbumSetSelectedMode = parameter1: boolean\nthis = this: @ts_files/72.ts: AlbumBarModel\n%0 = newarray (any)[0]\nmenuList = %0\n%1 = Action.<@%unk/%unk: .NEW>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%1)\nisSidebar = instanceinvoke screenManager.<@%unk/%unk: .isSidebar()>()\n%2 = staticinvoke <@%unk/%unk: .$r()>('app.string.tab_albums')\n%3 = instanceinvoke actionBarProp.<@%unk/%unk: .setHasTabBar()>(isSidebar)\n%4 = instanceinvoke %3.<@%unk/%unk: .setTitle()>(%2)\ninstanceinvoke %4.<@%unk/%unk: .setIsHeadTitle()>(true)\nif isAlbumSetSelectedMode != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = ActionBarSelectionMode.<@%unk/%unk: .MULTI>\n%6 = ActionBarMode.<@%unk/%unk: .SELECTION_MODE>\n%7 = Action.<@%unk/%unk: .CANCEL>\n%8 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%7)\n%9 = instanceinvoke %8.<@%unk/%unk: .setMode()>(%6)\ninstanceinvoke %9.<@%unk/%unk: .setSelectionMode()>(%5)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return actionBarProp",
                      "start_line": 32,
                      "end_line": 89,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%10 = ActionBarMode.<@%unk/%unk: .STANDARD_MODE>\n%11 = instanceinvoke actionBarProp.<@%unk/%unk: .setMenuList()>(menuList)\ninstanceinvoke %11.<@%unk/%unk: .setMode()>(%10)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private updateVerticalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n    menuList.push(Action.NEW);\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "getMenuList",
          "label": "getMenuList",
          "start_line": 1,
          "end_line": 92,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isAlbumSetSelectedMode = parameter0: boolean\nselectedAlbumsCount = parameter1: number\nisDisableRename = parameter2: boolean\nisDisableDelete = parameter3: boolean\nthis = this: @ts_files/72.ts: AlbumBarModel\n%0 = newarray (any)[0]\nmenuList = %0\nif isAlbumSetSelectedMode != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return menuList",
                  "start_line": 98,
                  "end_line": 98,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = !isDisableRename\n%2 = selectedAlbumsCount === 1\n%3 = %1 && %2\nif %3 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = Action.<@%unk/%unk: .RENAME>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%4)\n%5 = !isDisableDelete\n%6 = selectedAlbumsCount > 0\n%7 = %5 && %6\nif %7 != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = Action.<@%unk/%unk: .DELETE>",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%8)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = Action.<@%unk/%unk: .DELETE_INVALID>",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = Action.<@%unk/%unk: .RENAME_INVALID>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isAlbumSetSelectedMode) {\n      menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n      menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\n    }\n    return menuList;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumBarModel {\n  createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean,\n                  selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): void {\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                                    isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n    let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      menuList.push(Action.NEW)\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n    menuList.push(Action.NEW);\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isAlbumSetSelectedMode) {\n      menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n      menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\n    }\n    return menuList;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action'\nimport { ActionBarProp } from '../common/ActionBarProp'\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode'\nimport { screenManager } from '../common/ScreenManager'\n\nexport class AlbumBarModel {\n  createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean,\n                  selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): void {\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                                    isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n    let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      menuList.push(Action.NEW)\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n    menuList.push(Action.NEW);\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isAlbumSetSelectedMode) {\n      menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n      menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\n    }\n    return menuList;\n  }\n}\n"
}