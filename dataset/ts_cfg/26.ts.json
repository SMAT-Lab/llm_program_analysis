{
  "type": "file",
  "name": "26.ts",
  "label": "26.ts",
  "start_line": -1,
  "end_line": 50,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 37,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/26.ts: %dflt\nTAG = 'GotoPhotosMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 37,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "GotoPhotosMenuOperation",
      "label": "GotoPhotosMenuOperation",
      "start_line": 1,
      "end_line": 37,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/26.ts: GotoPhotosMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/26.ts: GotoPhotosMenuOperation\nthis.<@ts_files/26.ts: GotoPhotosMenuOperation.menuContext> = menuContext\nreturn",
              "start_line": 1,
              "end_line": 37,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/26.ts: GotoPhotosMenuOperation\n%0 = this.<@ts_files/26.ts: GotoPhotosMenuOperation.menuContext>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'menuContext is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 37,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/26.ts: GotoPhotosMenuOperation.menuContext>\njumpSourceToMain = %1.<@%unk/%unk: .jumpSourceToMain>\n%2 = 'router to pages/index, jumpSource: ' + jumpSourceToMain\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\nleftPos = instanceinvoke screenManager.<@%unk/%unk: .isSidebar()>()\n%3 = RouterConstants.<@%unk/%unk: .ENTRY_FROM>\npageFrom = %3.<@%unk/%unk: .NORMAL>\n%4 = JumpSourceToMain.<@%unk/%unk: .CAMERA>\nif jumpSourceToMain === %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "pageFrom = RouterConstants.<@%unk/%unk: .ENTRY_FROM_CAMERA>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = new @ts_files/26.ts: %AC$GotoPhotosMenuOperation$doAction$0\ninstanceinvoke %5.<@ts_files/26.ts: %AC$GotoPhotosMenuOperation$doAction$0.constructor()>()\nparams = %5\n%6 = new @ts_files/26.ts: %AC$GotoPhotosMenuOperation$doAction$1\ninstanceinvoke %6.<@ts_files/26.ts: %AC$GotoPhotosMenuOperation$doAction$1.constructor()>()\nrouterOptions = %6\ninstanceinvoke router.<@%unk/%unk: .replace()>(routerOptions)\nreturn",
                          "start_line": 1,
                          "end_line": 37,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let jumpSourceToMain = this.menuContext.jumpSourceToMain;\n    Log.info(TAG, 'router to pages/index, jumpSource: ' + jumpSourceToMain);\n    let leftPos = screenManager.isSidebar();\n    let pageFrom = RouterConstants.ENTRY_FROM.NORMAL;\n    if (jumpSourceToMain === JumpSourceToMain.CAMERA) {\n      pageFrom = RouterConstants.ENTRY_FROM_CAMERA;\n    }\n    let params: Object = {\n      jumpSource: jumpSourceToMain,\n      pageFrom: pageFrom\n    };\n    let routerOptions: RouterOptions = {\n      uri: 'pages/index',\n      params: params\n    };\n    router.replace(routerOptions);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class GotoPhotosMenuOperation implements MenuOperation {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let jumpSourceToMain = this.menuContext.jumpSourceToMain;\n    Log.info(TAG, 'router to pages/index, jumpSource: ' + jumpSourceToMain);\n    let leftPos = screenManager.isSidebar();\n    let pageFrom = RouterConstants.ENTRY_FROM.NORMAL;\n    if (jumpSourceToMain === JumpSourceToMain.CAMERA) {\n      pageFrom = RouterConstants.ENTRY_FROM_CAMERA;\n    }\n    let params: Object = {\n      jumpSource: jumpSourceToMain,\n      pageFrom: pageFrom\n    };\n    let routerOptions: RouterOptions = {\n      uri: 'pages/index',\n      params: params\n    };\n    router.replace(routerOptions);\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$GotoPhotosMenuOperation$doAction$0",
      "label": "%AC$GotoPhotosMenuOperation$doAction$0",
      "start_line": 46,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      jumpSource: jumpSourceToMain,\n      pageFrom: pageFrom\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GotoPhotosMenuOperation$doAction$1",
      "label": "%AC$GotoPhotosMenuOperation$doAction$1",
      "start_line": 50,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      uri: 'pages/index',\n      params: params\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { screenManager } from '../common/ScreenManager';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { RouterConstants } from '../constants/RouterConstants';\n\nconst TAG = 'GotoPhotosMenuOperation';\n\nexport class GotoPhotosMenuOperation implements MenuOperation {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let jumpSourceToMain = this.menuContext.jumpSourceToMain;\n    Log.info(TAG, 'router to pages/index, jumpSource: ' + jumpSourceToMain);\n    let leftPos = screenManager.isSidebar();\n    let pageFrom = RouterConstants.ENTRY_FROM.NORMAL;\n    if (jumpSourceToMain === JumpSourceToMain.CAMERA) {\n      pageFrom = RouterConstants.ENTRY_FROM_CAMERA;\n    }\n    let params: Object = {\n      jumpSource: jumpSourceToMain,\n      pageFrom: pageFrom\n    };\n    let routerOptions: RouterOptions = {\n      uri: 'pages/index',\n      params: params\n    };\n    router.replace(routerOptions);\n  }\n}\n"
}