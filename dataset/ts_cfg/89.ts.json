{
  "type": "file",
  "name": "89.ts",
  "label": "89.ts",
  "start_line": -1,
  "end_line": 63,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 43,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/89.ts: %dflt\nTAG = '[MediaUtils]'\n%0 = new @ts_files/89.ts: MediaUtils\ninstanceinvoke %0.<@ts_files/89.ts: MediaUtils.constructor()>()\ndefault = %0\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "MediaUtils",
      "label": "MediaUtils",
      "start_line": 1,
      "end_line": 46,
      "functions": [
        {
          "type": "function",
          "name": "createAndGetFile",
          "label": "createAndGetFile",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "context = parameter0: any\nthis = this: @ts_files/89.ts: MediaUtils\nmediaTest = instanceinvoke photoAccessHelper.<@%unk/%unk: .getPhotoAccessHelper()>(context)\n%0 = new @ts_files/89.ts: %AC$MediaUtils$createAndGetFile$0\ninstanceinvoke %0.<@ts_files/89.ts: %AC$MediaUtils$createAndGetFile$0.constructor()>()\ninfo = %0\n%1 = new @%unk/%unk: DateTimeUtil\ninstanceinvoke %1.<@%unk/%unk: DateTimeUtil.constructor()>()\ndateTimeUtil = %1\n%2 = instanceinvoke dateTimeUtil.<@%unk/%unk: .getDate()>()\n%3 = instanceinvoke dateTimeUtil.<@%unk/%unk: .getTime()>()\n%4 = %2 + '_'\n%5 = %4 + %3\nname = %5\n%6 = info.<@ts_files/89.ts: %AC$MediaUtils$createAndGetFile$0.prefix>\n%7 = info.<@ts_files/89.ts: %AC$MediaUtils$createAndGetFile$0.suffix>\n%8 = %6 + name\n%9 = %8 + %7\ndisplayName = %9\n%10 = photoAccessHelper.<@%unk/%unk: .PhotoType>\nphotoType = %10.<@%unk/%unk: .IMAGE>\n%11 = new @ts_files/89.ts: %AC$MediaUtils$createAndGetFile$1\ninstanceinvoke %11.<@ts_files/89.ts: %AC$MediaUtils$createAndGetFile$1.constructor()>()\noptions = %11\n%12 = instanceinvoke mediaTest.<@%unk/%unk: .createAsset()>(photoType, '.jpg', options)\nreturn await %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async createAndGetFile(context: any) {\n    let mediaTest = photoAccessHelper.getPhotoAccessHelper(context)\n    let info = {\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }\n    let dateTimeUtil = new DateTimeUtil()\n    let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\n    let displayName = `${info.prefix}${name}${info.suffix}`\n    let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\n    let options: photoAccessHelper.CreateOptions = {\n      title: displayName\n    }\n    return await mediaTest.createAsset(photoType, '.jpg', options)\n  }"
        },
        {
          "type": "function",
          "name": "savePicture",
          "label": "savePicture",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: image.PixelMap\ncontext = parameter1: any\nthis = this: @ts_files/89.ts: MediaUtils\ninstanceinvoke console.<@%unk/%unk: .log()>(TAG, 'savePicture')\n%0 = new @ts_files/89.ts: %AC$MediaUtils$savePicture$2\ninstanceinvoke %0.<@ts_files/89.ts: %AC$MediaUtils$savePicture$2.constructor()>()\npackOpts = %0\nimagePackerApi = instanceinvoke image.<@%unk/%unk: .createImagePacker()>()\n%1 = instanceinvoke imagePackerApi.<@%unk/%unk: .packing()>(data, packOpts)\narrayBuffer = await %1\n%2 = instanceinvoke this.<@ts_files/89.ts: MediaUtils.createAndGetFile(any)>(context)\nfileAsset = await %2\n%3 = fs.<@%unk/%unk: .OpenMode>\n%4 = %3.<@%unk/%unk: .READ_WRITE>\n%5 = fs.<@%unk/%unk: .OpenMode>\n%6 = %5.<@%unk/%unk: .CREATE>\n%7 = %4 | %6\n%8 = instanceinvoke fs.<@%unk/%unk: .open()>(fileAsset, %7)\nfile = await %8\ninstanceinvoke imagePackerApi.<@%unk/%unk: .release()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = file.<@%unk/%unk: .fd>\n%10 = instanceinvoke fs.<@%unk/%unk: .write()>(%9, arrayBuffer)\n%11 = await %10",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%17 = file.<@%unk/%unk: .fd>\n%18 = instanceinvoke fs.<@%unk/%unk: .close()>(%17)\n%19 = await %18\ninstanceinvoke console.<@%unk/%unk: .log()>(TAG, 'write done')\n%20 = new @ts_files/89.ts: %AC$MediaUtils$savePicture$3\ninstanceinvoke %20.<@ts_files/89.ts: %AC$MediaUtils$savePicture$3.constructor()>()\ninstanceinvoke prompt.<@%unk/%unk: .showToast()>(%20)\nreturn",
                      "start_line": 1,
                      "end_line": 43,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%12 = err.<@%unk/%unk: .code>\n%13 = err.<@%unk/%unk: .message>\n%14 = 'write failed, code is ' + %12\n%15 = %14 + ', message is '\n%16 = %15 + %13\ninstanceinvoke console.<@%unk/%unk: .log()>(%16)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async savePicture(data: image.PixelMap, context: any) {\n    console.log(TAG, `savePicture`)\n    let packOpts: image.PackingOption = {\n      format: \"image/jpeg\", quality: 100\n    }\n    let imagePackerApi = image.createImagePacker()\n    let arrayBuffer = await imagePackerApi.packing(data, packOpts)\n    let fileAsset = await this.createAndGetFile(context)\n    let file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n    imagePackerApi.release()\n    try {\n      await fs.write(file.fd, arrayBuffer);\n    } catch (err) {\n      console.log(`write failed, code is ${err.code}, message is ${err.message}`)\n    }\n    await fs.close(file.fd);\n    console.log(TAG, `write done`)\n    prompt.showToast({\n      message: '图片保存成功', duration: 1000\n    })\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class MediaUtils {\n  async createAndGetFile(context: any) {\n    let mediaTest = photoAccessHelper.getPhotoAccessHelper(context)\n    let info = {\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }\n    let dateTimeUtil = new DateTimeUtil()\n    let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\n    let displayName = `${info.prefix}${name}${info.suffix}`\n    let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\n    let options: photoAccessHelper.CreateOptions = {\n      title: displayName\n    }\n    return await mediaTest.createAsset(photoType, '.jpg', options)\n  }\n\n  async savePicture(data: image.PixelMap, context: any) {\n    console.log(TAG, `savePicture`)\n    let packOpts: image.PackingOption = {\n      format: \"image/jpeg\", quality: 100\n    }\n    let imagePackerApi = image.createImagePacker()\n    let arrayBuffer = await imagePackerApi.packing(data, packOpts)\n    let fileAsset = await this.createAndGetFile(context)\n    let file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n    imagePackerApi.release()\n    try {\n      await fs.write(file.fd, arrayBuffer);\n    } catch (err) {\n      console.log(`write failed, code is ${err.code}, message is ${err.message}`)\n    }\n    await fs.close(file.fd);\n    console.log(TAG, `write done`)\n    prompt.showToast({\n      message: '图片保存成功', duration: 1000\n    })\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$MediaUtils$createAndGetFile$0",
      "label": "%AC$MediaUtils$createAndGetFile$0",
      "start_line": 33,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }"
    },
    {
      "type": "class",
      "name": "%AC$MediaUtils$createAndGetFile$1",
      "label": "%AC$MediaUtils$createAndGetFile$1",
      "start_line": 40,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      title: displayName\n    }"
    },
    {
      "type": "class",
      "name": "%AC$MediaUtils$savePicture$2",
      "label": "%AC$MediaUtils$savePicture$2",
      "start_line": 48,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      format: \"image/jpeg\", quality: 100\n    }"
    },
    {
      "type": "class",
      "name": "%AC$MediaUtils$savePicture$3",
      "label": "%AC$MediaUtils$savePicture$3",
      "start_line": 63,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      message: '图片保存成功', duration: 1000\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport image from '@ohos.multimedia.image'\nimport fileio from '@ohos.fileio'\nimport fs from '@ohos.file.fs';\nimport prompt from '@ohos.prompt'\nimport photoAccessHelper from '@ohos.file.photoAccessHelper'\nimport DateTimeUtil from './DateTimeUtil'\n\n\n/**\n * mediaUtils of wifi test\n */\n\nconst TAG = \"[MediaUtils]\"\n\nclass MediaUtils {\n  async createAndGetFile(context: any) {\n    let mediaTest = photoAccessHelper.getPhotoAccessHelper(context)\n    let info = {\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }\n    let dateTimeUtil = new DateTimeUtil()\n    let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\n    let displayName = `${info.prefix}${name}${info.suffix}`\n    let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\n    let options: photoAccessHelper.CreateOptions = {\n      title: displayName\n    }\n    return await mediaTest.createAsset(photoType, '.jpg', options)\n  }\n\n  async savePicture(data: image.PixelMap, context: any) {\n    console.log(TAG, `savePicture`)\n    let packOpts: image.PackingOption = {\n      format: \"image/jpeg\", quality: 100\n    }\n    let imagePackerApi = image.createImagePacker()\n    let arrayBuffer = await imagePackerApi.packing(data, packOpts)\n    let fileAsset = await this.createAndGetFile(context)\n    let file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n    imagePackerApi.release()\n    try {\n      await fs.write(file.fd, arrayBuffer);\n    } catch (err) {\n      console.log(`write failed, code is ${err.code}, message is ${err.message}`)\n    }\n    await fs.close(file.fd);\n    console.log(TAG, `write done`)\n    prompt.showToast({\n      message: '图片保存成功', duration: 1000\n    })\n  }\n}\n\nexport default new MediaUtils()"
}