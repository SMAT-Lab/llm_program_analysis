{
  "type": "file",
  "name": "180.ts",
  "label": "180.ts",
  "start_line": -1,
  "end_line": 497,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 497,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/180.ts: %dflt\n%0 = new @%unk/%unk: DebugLogger\ninstanceinvoke %0.<@%unk/%unk: DebugLogger.constructor()>('indexeddb')\nlogger = %0\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$1",
      "label": "%AC$1",
      "start_line": 31,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      key: string;\n      value: any;\n    }"
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 29,
      "end_line": 29,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    key: string;\n    value: {\n      key: string;\n      value: any;\n    };\n  }"
    },
    {
      "type": "class",
      "name": "%AC$3",
      "label": "%AC$3",
      "start_line": 38,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      id: string;\n      data: Map<string, string[]>;\n    }"
    },
    {
      "type": "class",
      "name": "%AC$4",
      "label": "%AC$4",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: string }"
    },
    {
      "type": "class",
      "name": "%AC$2",
      "label": "%AC$2",
      "start_line": 36,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    key: number;\n    value: {\n      id: string;\n      data: Map<string, string[]>;\n    };\n    indexes: { id: string };\n  }"
    },
    {
      "type": "class",
      "name": "%AC$7",
      "label": "%AC$7",
      "start_line": 48,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        i: number ;\n        l: number ;\n        rs: [number, number][] ;\n      }"
    },
    {
      "type": "class",
      "name": "%AC$6",
      "label": "%AC$6",
      "start_line": 46,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      nid: number;\n      pos?: {\n        i: number ;\n        l: number ;\n        rs: [number, number][] ;\n      };\n      key: ArrayBuffer;\n    }"
    },
    {
      "type": "class",
      "name": "%AC$8",
      "label": "%AC$8",
      "start_line": 55,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ key: ArrayBuffer; nid: number }"
    },
    {
      "type": "class",
      "name": "%AC$5",
      "label": "%AC$5",
      "start_line": 44,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    key: number;\n    value: {\n      nid: number;\n      pos?: {\n        i: number ;\n        l: number ;\n        rs: [number, number][] ;\n      };\n      key: ArrayBuffer;\n    };\n    indexes: { key: ArrayBuffer; nid: number };\n  }"
    },
    {
      "type": "class",
      "name": "IndexDB",
      "label": "IndexDB",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export interface IndexDB extends DBSchema {\n  kvMetadata: {\n    key: string;\n    value: {\n      key: string;\n      value: any;\n    };\n  };\n  records: {\n    key: number;\n    value: {\n      id: string;\n      data: Map<string, string[]>;\n    };\n    indexes: { id: string };\n  };\n  invertedIndex: {\n    key: number;\n    value: {\n      nid: number;\n      pos?: {\n        i: number ;\n        l: number ;\n        rs: [number, number][] ;\n      };\n      key: ArrayBuffer;\n    };\n    indexes: { key: ArrayBuffer; nid: number };\n  };\n}"
    },
    {
      "type": "class",
      "name": "%AC$9",
      "label": "%AC$9",
      "start_line": 454,
      "end_line": 454,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: string; data: Map<string, string[]> }"
    },
    {
      "type": "class",
      "name": "DataStruct",
      "label": "DataStruct",
      "start_line": 1,
      "end_line": 497,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 72,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/180.ts: DataStruct.%instInit()>()\ndatabaseName = parameter0: string\nschema = parameter1: Schema\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke Object.<@%unk/%unk: .entries()>(schema)\n%1 = instanceinvoke %0.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke %1.<@%unk/%unk: .next()>()\n%3 = %2.<@ES2015/BuiltinClass: IteratorResult.done>\nif %3 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 177,
                      "end_line": 497,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = %2.<@ES2015/BuiltinClass: IteratorResult.value>\n%5 = <string>%4\nkey = %5[0]\ntype = %5[1]\nif typeof type === 'string'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "typeInfo = type",
                          "start_line": 77,
                          "end_line": 109,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = typeInfo.<@%unk/%unk: .index>\nif %8 === false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%9 = typeInfo.<@%unk/%unk: .type>\nif %9 === 'String'",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%10 = new @%unk/%unk: StringInvertedIndex\ninstanceinvoke %10.<@%unk/%unk: StringInvertedIndex.constructor()>(key)\n%11 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\ninstanceinvoke %11.<@%unk/%unk: .set()>(key, %10)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%12 = typeInfo.<@%unk/%unk: .type>\nif %12 === 'Integer'",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%13 = new @%unk/%unk: IntegerInvertedIndex\ninstanceinvoke %13.<@%unk/%unk: IntegerInvertedIndex.constructor()>(key)\n%14 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\ninstanceinvoke %14.<@%unk/%unk: .set()>(key, %13)",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%15 = typeInfo.<@%unk/%unk: .type>\nif %15 === 'FullText'",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%16 = new @%unk/%unk: FullTextInvertedIndex\ninstanceinvoke %16.<@%unk/%unk: FullTextInvertedIndex.constructor()>(key)\n%17 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\ninstanceinvoke %17.<@%unk/%unk: .set()>(key, %16)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "if type === 'Boolean'",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%18 = new @%unk/%unk: BooleanInvertedIndex\ninstanceinvoke %18.<@%unk/%unk: BooleanInvertedIndex.constructor()>(key)\n%19 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\ninstanceinvoke %19.<@%unk/%unk: .set()>(key, %18)",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%20 = new @%unk/%unk: Error\n%21 = 'Field type '' + type\n%22 = %21 + '' not supported'\ninstanceinvoke %20.<@%unk/%unk: Error.constructor()>(%22)\nthrow %20",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = new @ts_files/180.ts: %AC$DataStruct$constructor$10\ninstanceinvoke %6.<@ts_files/180.ts: %AC$DataStruct$constructor$10.constructor()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(\n    readonly databaseName: string,\n    readonly schema: Schema\n  ) {\n    for (const [key, type] of Object.entries(schema)) {\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.index === false) {\n        // If index is false, we don't need to create an inverted index for this field.\n        continue;\n      }\n      if (typeInfo.type === 'String') {\n        this.invertedIndex.set(key, new StringInvertedIndex(key));\n      } else if (typeInfo.type === 'Integer') {\n        this.invertedIndex.set(key, new IntegerInvertedIndex(key));\n      } else if (typeInfo.type === 'FullText') {\n        this.invertedIndex.set(key, new FullTextInvertedIndex(key));\n      } else if (type === 'Boolean') {\n        this.invertedIndex.set(key, new BooleanInvertedIndex(key));\n      } else {\n        throw new Error(`Field type '${type}' not supported`);\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "insert",
          "label": "insert",
          "start_line": 1,
          "end_line": 95,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructRWTransaction\ndocument = parameter1: Document\nthis = this: @ts_files/180.ts: DataStruct\n%0 = document.<@%unk/%unk: .id>\n%1 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%2 = instanceinvoke %1.<@%unk/%unk: .index()>('id')\n%3 = instanceinvoke %2.<@%unk/%unk: .get()>(%0)\nexists = await %3\nif exists != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = new @%unk/%unk: Error\ninstanceinvoke %4.<@%unk/%unk: Error.constructor()>('Document already exists')\nthrow %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = new @%unk/%unk: Map\ninstanceinvoke %5.<@%unk/%unk: Map.constructor()>()\ndataMap = %5\n%6 = document.<@%unk/%unk: .fields>\n%7 = instanceinvoke %6.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = instanceinvoke %7.<@%unk/%unk: .next()>()\n%9 = %8.<@ES2015/BuiltinClass: IteratorResult.done>\nif %9 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%10 = %8.<@ES2015/BuiltinClass: IteratorResult.value>\n%11 = <string>%10\nkey = %11[0]\nvalues = %11[1]\n%12 = this.<@ts_files/180.ts: DataStruct.schema>\n%13 = <string>key\ntype = %12.<@%unk/%unk: .%13>\n%14 = !type\nif %14 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if typeof type === 'string'",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "typeInfo = type",
                                      "start_line": 77,
                                      "end_line": 109,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%17 = typeInfo.<@%unk/%unk: .store>\nif %17 !== false",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "instanceinvoke dataMap.<@%unk/%unk: .set()>(key, values)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%15 = new @ts_files/180.ts: %AC$DataStruct$insert$11\ninstanceinvoke %15.<@ts_files/180.ts: %AC$DataStruct$insert$11.constructor()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%18 = new @ts_files/180.ts: %AC$DataStruct$insert$12\ninstanceinvoke %18.<@ts_files/180.ts: %AC$DataStruct$insert$12.constructor()>()\n%19 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%20 = instanceinvoke %19.<@%unk/%unk: .add()>(%18)\nnid = await %20\n%21 = document.<@%unk/%unk: .fields>\n%22 = instanceinvoke %21.<@%unk/%unk: .iterator()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%23 = instanceinvoke %22.<@%unk/%unk: .next()>()\n%24 = %23.<@ES2015/BuiltinClass: IteratorResult.done>\nif %24 == true",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%25 = %23.<@ES2015/BuiltinClass: IteratorResult.value>\n%26 = <string>%25\nkey = %26[0]\nvalues = %26[1]\n%27 = <string>key\n%28 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\niidx = instanceinvoke %28.<@%unk/%unk: .get()>(%27)\n%29 = !iidx\nif %29 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%30 = instanceinvoke iidx.<@%unk/%unk: .insert()>(trx, nid, values)\n%31 = await %30",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 177,
                                      "end_line": 497,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async insert(trx: DataStructRWTransaction, document: Document) {\n    const exists = await trx\n      .objectStore('records')\n      .index('id')\n      .get(document.id);\n    if (exists) {\n      throw new Error('Document already exists');\n    }\n    const dataMap = new Map();\n    for (const [key, values] of document.fields) {\n      const type = this.schema[key as string];\n      if (!type) {\n        continue;\n      }\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.store !== false) {\n        // If store is false, the field will not be stored\n        dataMap.set(key, values);\n      }\n    }\n    const nid = await trx.objectStore('records').add({\n      id: document.id,\n      data: dataMap,\n    });\n    for (const [key, values] of document.fields) {\n      const iidx = this.invertedIndex.get(key as string);\n      if (!iidx) {\n        continue;\n      }\n      await iidx.insert(trx, nid, values);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "delete",
          "label": "delete",
          "start_line": 1,
          "end_line": 127,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructRWTransaction\nid = parameter1: string\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%1 = instanceinvoke %0.<@%unk/%unk: .index()>('id')\n%2 = instanceinvoke %1.<@%unk/%unk: .getKey()>(id)\nnid = await %2\nif nid != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%4 = instanceinvoke %3.<@%unk/%unk: .delete()>(nid)\n%5 = await %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('invertedIndex')\n%7 = instanceinvoke %6.<@%unk/%unk: .index()>('nid')\n%8 = instanceinvoke %7.<@%unk/%unk: .getAllKeys()>(nid)\nindexIds = await %8\n%9 = instanceinvoke indexIds.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = instanceinvoke %9.<@%unk/%unk: .next()>()\n%11 = %10.<@ES2015/BuiltinClass: IteratorResult.done>\nif %11 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%12 = %10.<@ES2015/BuiltinClass: IteratorResult.value>\nindexId = <string>%12\n%13 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('invertedIndex')\n%14 = instanceinvoke %13.<@%unk/%unk: .delete()>(indexId)\n%15 = await %14",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 177,
                              "end_line": 497,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async delete(trx: DataStructRWTransaction, id: string) {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    if (nid) {\n      await trx.objectStore('records').delete(nid);\n    }\n    const indexIds = await trx\n      .objectStore('invertedIndex')\n      .index('nid')\n      .getAllKeys(nid);\n    for (const indexId of indexIds) {\n      await trx.objectStore('invertedIndex').delete(indexId);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "batchWrite",
          "label": "batchWrite",
          "start_line": 1,
          "end_line": 140,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructRWTransaction\ndeletes = parameter1: string[]\ninserts = parameter2: Document[]\nthis = this: @ts_files/180.ts: DataStruct\nstartTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%0 = instanceinvoke deletes.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke %0.<@%unk/%unk: .next()>()\n%2 = %1.<@ES2015/BuiltinClass: IteratorResult.done>\nif %2 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = %1.<@ES2015/BuiltinClass: IteratorResult.value>\ndel = <string>%3\n%4 = instanceinvoke this.<@ts_files/180.ts: DataStruct.delete(DataStructRWTransaction, string)>(trx, del)\n%5 = await %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke inserts.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = instanceinvoke %6.<@%unk/%unk: .next()>()\n%8 = %7.<@ES2015/BuiltinClass: IteratorResult.done>\nif %8 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = %7.<@ES2015/BuiltinClass: IteratorResult.value>\ninst = <string>%9\n%10 = instanceinvoke this.<@ts_files/180.ts: DataStruct.insert(DataStructRWTransaction, Document)>(trx, inst)\n%11 = await %10",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "endTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%12 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %12 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%13 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%14 = '[IndexedDB Indexer] Batch Write (' + %13\n%15 = %14 + ')'\n%16 = new @ts_files/180.ts: %AC$DataStruct$batchWrite$13\ninstanceinvoke %16.<@ts_files/180.ts: %AC$DataStruct$batchWrite$13.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%15, %16)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%17 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%18 = '[indexer ' + %17\n%19 = %18 + '] batchWrite'\n%20 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%19, %20, 'ms')",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "return",
                                          "start_line": 177,
                                          "end_line": 497,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%21 = caughtexception: unknown\nendTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%12 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %12 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%13 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%14 = '[IndexedDB Indexer] Batch Write (' + %13\n%15 = %14 + ')'\n%16 = new @ts_files/180.ts: %AC$DataStruct$batchWrite$13\ninstanceinvoke %16.<@ts_files/180.ts: %AC$DataStruct$batchWrite$13.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%15, %16)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%17 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%18 = '[indexer ' + %17\n%19 = %18 + '] batchWrite'\n%20 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%19, %20, 'ms')\nthrow %21",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async batchWrite(\n    trx: DataStructRWTransaction,\n    deletes: string[],\n    inserts: Document[]\n  ) {\n    const startTime = performance.now();\n    try {\n      for (const del of deletes) {\n        await this.delete(trx, del);\n      }\n      for (const inst of inserts) {\n        await this.insert(trx, inst);\n      }\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Batch Write (${this.databaseName})`,\n          {\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] batchWrite`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }"
        },
        {
          "type": "function",
          "name": "matchAll",
          "label": "matchAll",
          "start_line": 1,
          "end_line": 171,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%1 = instanceinvoke %0.<@%unk/%unk: .getAllKeys()>()\nallNids = await %1\n%2 = new @%unk/%unk: Match\ninstanceinvoke %2.<@%unk/%unk: Match.constructor()>()\nmatch = %2\n%3 = instanceinvoke allNids.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke %3.<@%unk/%unk: .next()>()\n%5 = %4.<@ES2015/BuiltinClass: IteratorResult.done>\nif %5 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = %4.<@ES2015/BuiltinClass: IteratorResult.value>\nnid = <unknown>%6\ninstanceinvoke match.<@%unk/%unk: .addScore()>(nid, 1)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return match",
                      "start_line": 177,
                      "end_line": 177,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async matchAll(trx: DataStructROTransaction): Promise<Match> {\n    const allNids = await trx.objectStore('records').getAllKeys();\n    const match = new Match();\n    for (const nid of allNids) {\n      match.addScore(nid, 1);\n    }\n    return match;\n  }"
        },
        {
          "type": "function",
          "name": "queryRaw",
          "label": "queryRaw",
          "start_line": 1,
          "end_line": 179,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nquery = parameter1: Query<any>\nthis = this: @ts_files/180.ts: DataStruct\n%0 = query.<@%unk/%unk: .type>\nif %0 === 'match'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = query.<@%unk/%unk: .field>\n%2 = <string>%1\n%3 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\niidx = instanceinvoke %3.<@%unk/%unk: .get()>(%2)\n%4 = !iidx\nif %4 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = new @%unk/%unk: Match\ninstanceinvoke %5.<@%unk/%unk: Match.constructor()>()\nreturn %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = query.<@%unk/%unk: .match>\n%7 = instanceinvoke iidx.<@%unk/%unk: .match()>(trx, %6)\nreturn await %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = query.<@%unk/%unk: .type>\nif %8 === 'boolean'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = newarray (any)[0]\nweights = %9\n%10 = query.<@%unk/%unk: .queries>\n%11 = instanceinvoke %10.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%12 = instanceinvoke %11.<@%unk/%unk: .next()>()\n%13 = %12.<@ES2015/BuiltinClass: IteratorResult.done>\nif %13 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%14 = %12.<@ES2015/BuiltinClass: IteratorResult.value>\nq = <unknown>%14\n%15 = instanceinvoke this.<@ts_files/180.ts: DataStruct.queryRaw(DataStructROTransaction, Query<any>)>(trx, q)\ninstanceinvoke weights.<@%unk/%unk: .push()>(await %15)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%16 = query.<@%unk/%unk: .occur>\nif %16 === 'must'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%17 = instanceinvoke weights.<@%unk/%unk: .reduce()>(%AM0$queryRaw)\nreturn %17",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%18 = query.<@%unk/%unk: .occur>\nif %18 === 'must_not'",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "total = instanceinvoke weights.<@%unk/%unk: .reduce()>(%AM1$queryRaw)\n%19 = instanceinvoke this.<@ts_files/180.ts: DataStruct.matchAll(DataStructROTransaction)>(trx)\n%20 = await %19\n%21 = instanceinvoke %20.<@%unk/%unk: .exclude()>(total)\nreturn %21",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%22 = query.<@%unk/%unk: .occur>\nif %22 === 'should'",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%23 = instanceinvoke weights.<@%unk/%unk: .reduce()>(%AM2$queryRaw)\nreturn %23",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": []
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%24 = new @%unk/%unk: Error\n%25 = query.<@%unk/%unk: .type>\n%26 = 'Query type '' + %25\n%27 = %26 + '' not supported'\ninstanceinvoke %24.<@%unk/%unk: Error.constructor()>(%27)\nthrow %24\nreturn",
                                          "start_line": 1,
                                          "end_line": 497,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%28 = query.<@%unk/%unk: .type>\nif %28 === 'all'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%29 = instanceinvoke this.<@ts_files/180.ts: DataStruct.matchAll(DataStructROTransaction)>(trx)\nreturn await %29",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%30 = query.<@%unk/%unk: .type>\nif %30 === 'boost'",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%31 = query.<@%unk/%unk: .boost>\n%32 = query.<@%unk/%unk: .query>\n%33 = instanceinvoke this.<@ts_files/180.ts: DataStruct.queryRaw(DataStructROTransaction, Query<any>)>(trx, %32)\n%34 = await %33\n%35 = instanceinvoke %34.<@%unk/%unk: .boost()>(%31)\nreturn %35",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%36 = query.<@%unk/%unk: .type>\nif %36 === 'exists'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%37 = query.<@%unk/%unk: .field>\n%38 = <string>%37\n%39 = this.<@ts_files/180.ts: DataStruct.invertedIndex>\niidx = instanceinvoke %39.<@%unk/%unk: .get()>(%38)\n%40 = !iidx\nif %40 != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%41 = new @%unk/%unk: Match\ninstanceinvoke %41.<@%unk/%unk: Match.constructor()>()\nreturn %41",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%42 = instanceinvoke iidx.<@%unk/%unk: .all()>(trx)\nreturn await %42",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async queryRaw(\n    trx: DataStructROTransaction,\n    query: Query<any>\n  ): Promise<Match> {\n    if (query.type === 'match') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.match(trx, query.match);\n    } else if (query.type === 'boolean') {\n      const weights = [];\n      for (const q of query.queries) {\n        weights.push(await this.queryRaw(trx, q));\n      }\n      if (query.occur === 'must') {\n        return weights.reduce((acc, w) => acc.and(w));\n      } else if (query.occur === 'must_not') {\n        const total = weights.reduce((acc, w) => acc.and(w));\n        return (await this.matchAll(trx)).exclude(total);\n      } else if (query.occur === 'should') {\n        return weights.reduce((acc, w) => acc.or(w));\n      }\n    } else if (query.type === 'all') {\n      return await this.matchAll(trx);\n    } else if (query.type === 'boost') {\n      return (await this.queryRaw(trx, query.query)).boost(query.boost);\n    } else if (query.type === 'exists') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.all(trx);\n    }\n    throw new Error(`Query type '${query.type}' not supported`);\n  }"
        },
        {
          "type": "function",
          "name": "clear",
          "label": "clear",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructRWTransaction\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%1 = instanceinvoke %0.<@%unk/%unk: .clear()>()\n%2 = await %1\n%3 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('invertedIndex')\n%4 = instanceinvoke %3.<@%unk/%unk: .clear()>()\n%5 = await %4\n%6 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('kvMetadata')\n%7 = instanceinvoke %6.<@%unk/%unk: .clear()>()\n%8 = await %7\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async clear(trx: DataStructRWTransaction) {\n    await trx.objectStore('records').clear();\n    await trx.objectStore('invertedIndex').clear();\n    await trx.objectStore('kvMetadata').clear();\n  }"
        },
        {
          "type": "function",
          "name": "search",
          "label": "search",
          "start_line": 1,
          "end_line": 220,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nquery = parameter1: Query<any>\noptions = parameter2: SearchOptions<any>\nthis = this: @ts_files/180.ts: DataStruct\nstartTime = instanceinvoke performance.<@%unk/%unk: .now()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/180.ts: %AC$DataStruct$search$14\ninstanceinvoke %0.<@ts_files/180.ts: %AC$DataStruct$search$14.constructor()>()\npagination = %0\n%1 = instanceinvoke this.<@ts_files/180.ts: DataStruct.queryRaw(DataStructROTransaction, Query<any>)>(trx, query)\nmatch = await %1\n%2 = pagination.<@ts_files/180.ts: %AC$DataStruct$search$14.skip>\n%3 = pagination.<@ts_files/180.ts: %AC$DataStruct$search$14.skip>\n%4 = pagination.<@ts_files/180.ts: %AC$DataStruct$search$14.limit>\n%5 = %3 + %4\n%6 = instanceinvoke match.<@%unk/%unk: .toArray()>()\nnids = instanceinvoke %6.<@%unk/%unk: .slice()>(%2, %5)\n%7 = newarray (any)[0]\nnodes = %7\n%8 = instanceinvoke nids.<@%unk/%unk: .iterator()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = instanceinvoke %8.<@%unk/%unk: .next()>()\n%10 = %9.<@ES2015/BuiltinClass: IteratorResult.done>\nif %10 == true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = %9.<@ES2015/BuiltinClass: IteratorResult.value>\nnid = <unknown>%11\n%12 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%13 = instanceinvoke %12.<@%unk/%unk: .get()>(nid)\nrecord = await %13\n%14 = !record\nif %14 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%15 = instanceinvoke this.<@ts_files/180.ts: DataStruct.resultNode(@ts_files/180.ts: %AC$9, SearchOptions<any>, Match, number)>(record, options, match, nid)\ninstanceinvoke nodes.<@%unk/%unk: .push()>(%15)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = new @ts_files/180.ts: %AC$DataStruct$search$15\ninstanceinvoke %16.<@ts_files/180.ts: %AC$DataStruct$search$15.constructor()>()\nreturn %16",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "endTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%17 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %17 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%18 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%19 = '[IndexedDB Indexer] Search (' + %18\n%20 = %19 + ')'\n%21 = new @ts_files/180.ts: %AC$DataStruct$search$17\ninstanceinvoke %21.<@ts_files/180.ts: %AC$DataStruct$search$17.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%20, %21)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%22 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%23 = '[indexer ' + %22\n%24 = %23 + '] search'\n%25 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%24, %25, 'ms', query)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 177,
                          "end_line": 497,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%26 = caughtexception: unknown\nendTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%17 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %17 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%18 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%19 = '[IndexedDB Indexer] Search (' + %18\n%20 = %19 + ')'\n%21 = new @ts_files/180.ts: %AC$DataStruct$search$17\ninstanceinvoke %21.<@ts_files/180.ts: %AC$DataStruct$search$17.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%20, %21)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%22 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%23 = '[indexer ' + %22\n%24 = %23 + '] search'\n%25 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%24, %25, 'ms', query)\nthrow %26",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async search(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    options: SearchOptions<any>\n  ): Promise<SearchResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const match = await this.queryRaw(trx, query);\n      const nids = match\n        .toArray()\n        .slice(pagination.skip, pagination.skip + pagination.limit);\n      const nodes = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        nodes.push(this.resultNode(record, options, match, nid));\n      }\n      return {\n        pagination: {\n          count: match.size(),\n          hasMore: match.size() > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n        nodes: nodes,\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Search (${this.databaseName})`,\n          {\n            detail: { query, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] search`,\n        endTime - startTime,\n        'ms',\n        query\n      );\n    }\n  }"
        },
        {
          "type": "function",
          "name": "aggregate",
          "label": "aggregate",
          "start_line": 1,
          "end_line": 272,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nquery = parameter1: Query<any>\nfield = parameter2: string\noptions = parameter3: AggregateOptions<any>\nthis = this: @ts_files/180.ts: DataStruct\nstartTime = instanceinvoke performance.<@%unk/%unk: .now()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/180.ts: %AC$DataStruct$aggregate$19\ninstanceinvoke %0.<@ts_files/180.ts: %AC$DataStruct$aggregate$19.constructor()>()\npagination = %0\n%1 = options.<@%unk/%unk: .hits>\nif %1 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = new @ts_files/180.ts: %AC$DataStruct$aggregate$20\ninstanceinvoke %2.<@ts_files/180.ts: %AC$DataStruct$aggregate$20.constructor()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = instanceinvoke this.<@ts_files/180.ts: DataStruct.queryRaw(DataStructROTransaction, Query<any>)>(trx, query)\nmatch = await %5\nnids = instanceinvoke match.<@%unk/%unk: .toArray()>()\n%6 = newarray (any)[0]\nbuckets = %6\n%7 = instanceinvoke nids.<@%unk/%unk: .iterator()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = instanceinvoke %7.<@%unk/%unk: .next()>()\n%9 = %8.<@ES2015/BuiltinClass: IteratorResult.done>\nif %9 == true",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%10 = %8.<@ES2015/BuiltinClass: IteratorResult.value>\nnid = <unknown>%10\n%11 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%12 = instanceinvoke %11.<@%unk/%unk: .get()>(nid)\nrecord = await %12\n%13 = !record\nif %13 != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%14 = record.<@%unk/%unk: .data>\nvalues = instanceinvoke %14.<@%unk/%unk: .get()>(field)\n%15 = newarray (any)[0]\n%16 = values ?? %15\n%17 = instanceinvoke %16.<@%unk/%unk: .iterator()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%18 = instanceinvoke %17.<@%unk/%unk: .next()>()\n%19 = %18.<@ES2015/BuiltinClass: IteratorResult.done>\nif %19 == true",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%20 = %18.<@ES2015/BuiltinClass: IteratorResult.value>\nvalue = <any>%20\nbucket = undefined\nbucketIndex = instanceinvoke buckets.<@%unk/%unk: .findIndex()>(%AM3$aggregate)\n%21 = -1\nif bucketIndex === %21",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%22 = new @ts_files/180.ts: %AC$DataStruct$aggregate$23\ninstanceinvoke %22.<@ts_files/180.ts: %AC$DataStruct$aggregate$23.constructor()>()\nbucket = %22\ninstanceinvoke buckets.<@%unk/%unk: .push()>(bucket)\n%23 = buckets.<@%unk/%unk: .length>\nbucketIndex = %23 - 1",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%24 = pagination.<@ts_files/180.ts: %AC$DataStruct$aggregate$19.skip>\n%25 = bucketIndex >= %24\n%26 = pagination.<@ts_files/180.ts: %AC$DataStruct$aggregate$19.skip>\n%27 = pagination.<@ts_files/180.ts: %AC$DataStruct$aggregate$19.limit>\n%28 = %26 + %27\n%29 = bucketIndex < %28\n%30 = %25 && %29\nif %30 != false",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%31 = bucket.<@ts_files/180.ts: %AC$DataStruct$aggregate$23.nids>\ninstanceinvoke %31.<@%unk/%unk: .push()>(nid)\n%32 = bucket.<@ts_files/180.ts: %AC$DataStruct$aggregate$23.nids>\n%33 = %32.<@%unk/%unk: .length>\n%34 = %33 - 1\n%35 = hitPagination.<@%unk/%unk: .skip>\n%36 = %34 >= %35\n%37 = bucket.<@ts_files/180.ts: %AC$DataStruct$aggregate$23.nids>\n%38 = %37.<@%unk/%unk: .length>\n%39 = %38 - 1\n%40 = hitPagination.<@%unk/%unk: .skip>\n%41 = hitPagination.<@%unk/%unk: .limit>\n%42 = %40 + %41\n%43 = %39 < %42\n%44 = %36 && %43\nif %44 != false",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%45 = options.<@%unk/%unk: .hits>\n%46 = new @ts_files/180.ts: %AC$DataStruct$aggregate$24\ninstanceinvoke %46.<@ts_files/180.ts: %AC$DataStruct$aggregate$24.constructor()>()\n%47 = %45 ?? %46\n%48 = instanceinvoke this.<@ts_files/180.ts: DataStruct.resultNode(@ts_files/180.ts: %AC$9, SearchOptions<any>, Match, number)>(record, %47, match, nid)\n%49 = bucket.<@ts_files/180.ts: %AC$DataStruct$aggregate$23.hits>\ninstanceinvoke %49.<@%unk/%unk: .push()>(%48)",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "bucket = buckets[bucketIndex]",
                                                  "start_line": 314,
                                                  "end_line": 314,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%50 = new @ts_files/180.ts: %AC$DataStruct$aggregate$25\ninstanceinvoke %50.<@ts_files/180.ts: %AC$DataStruct$aggregate$25.constructor()>()\nreturn %50",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = new @ts_files/180.ts: %AC$DataStruct$aggregate$21\ninstanceinvoke %4.<@ts_files/180.ts: %AC$DataStruct$aggregate$21.constructor()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "endTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%51 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %51 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%52 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%53 = '[IndexedDB Indexer] Aggregate (' + %52\n%54 = %53 + ')'\n%55 = new @ts_files/180.ts: %AC$DataStruct$aggregate$30\ninstanceinvoke %55.<@ts_files/180.ts: %AC$DataStruct$aggregate$30.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%54, %55)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%56 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%57 = '[indexer ' + %56\n%58 = %57 + '] aggregate'\n%59 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%58, %59, 'ms')",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 177,
                          "end_line": 497,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%60 = caughtexception: unknown\nendTime = instanceinvoke performance.<@%unk/%unk: .now()>()\n%51 = BUILD_CONFIG.<@%unk/%unk: .debug>\nif %51 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%52 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%53 = '[IndexedDB Indexer] Aggregate (' + %52\n%54 = %53 + ')'\n%55 = new @ts_files/180.ts: %AC$DataStruct$aggregate$30\ninstanceinvoke %55.<@ts_files/180.ts: %AC$DataStruct$aggregate$30.constructor()>()\ninstanceinvoke performance.<@%unk/%unk: .measure()>(%54, %55)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%56 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%57 = '[indexer ' + %56\n%58 = %57 + '] aggregate'\n%59 = endTime - startTime\ninstanceinvoke logger.<@%unk/%unk: .debug()>(%58, %59, 'ms')\nthrow %60",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async aggregate(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    field: string,\n    options: AggregateOptions<any>\n  ): Promise<AggregateResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const hitPagination = options.hits\n        ? {\n            skip: options.hits.pagination?.skip ?? 0,\n            limit: options.hits.pagination?.limit ?? 3,\n          }\n        : {\n            skip: 0,\n            limit: 0,\n          };\n      const match = await this.queryRaw(trx, query);\n      const nids = match.toArray();\n      const buckets: {\n        key: string;\n        nids: number[];\n        hits: SearchResult<any, any>['nodes'];\n      }[] = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        const values = record.data.get(field);\n        for (const value of values ?? []) {\n          let bucket;\n          let bucketIndex = buckets.findIndex(b => b.key === value);\n          if (bucketIndex === -1) {\n            bucket = { key: value, nids: [], hits: [] };\n            buckets.push(bucket);\n            bucketIndex = buckets.length - 1;\n          } else {\n            bucket = buckets[bucketIndex];\n          }\n          if (\n            bucketIndex >= pagination.skip &&\n            bucketIndex < pagination.skip + pagination.limit\n          ) {\n            bucket.nids.push(nid);\n            if (\n              bucket.nids.length - 1 >= hitPagination.skip &&\n              bucket.nids.length - 1 < hitPagination.skip + hitPagination.limit\n            ) {\n              bucket.hits.push(\n                this.resultNode(record, options.hits ?? {}, match, nid)\n              );\n            }\n          }\n        }\n      }\n      return {\n        buckets: buckets\n          .slice(pagination.skip, pagination.skip + pagination.limit)\n          .map(bucket => {\n            const result = {\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            } as AggregateResult<any, any>['buckets'][number];\n            if (options.hits) {\n              (result as any).hits = {\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              } as SearchResult<any, any>;\n            }\n            return result;\n          }),\n        pagination: {\n          count: buckets.length,\n          hasMore: buckets.length > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Aggregate (${this.databaseName})`,\n          {\n            detail: { query, field, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] aggregate`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getAll",
          "label": "getAll",
          "start_line": 1,
          "end_line": 382,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nids = parameter1: string[]\nthis = this: @ts_files/180.ts: DataStruct\n%0 = newarray (any)[0]\ndocs = %0\nif ids != 0\n%1 = instanceinvoke ids.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke %1.<@%unk/%unk: .next()>()\n%3 = %2.<@ES2015/BuiltinClass: IteratorResult.done>\nif %3 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = %2.<@ES2015/BuiltinClass: IteratorResult.value>\nid = <string>%4\n%5 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%6 = instanceinvoke %5.<@%unk/%unk: .index()>('id')\n%7 = instanceinvoke %6.<@%unk/%unk: .get()>(id)\nrecord = await %7\nif record != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = record.<@%unk/%unk: .id>\n%9 = record.<@%unk/%unk: .data>\n%10 = instanceinvoke Document.<@%unk/%unk: .from()>(%8, %9)\ninstanceinvoke docs.<@%unk/%unk: .push()>(%10)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return docs",
                      "start_line": 400,
                      "end_line": 400,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%11 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%12 = instanceinvoke %11.<@%unk/%unk: .getAll()>()\nrecords = await %12\n%13 = instanceinvoke records.<@%unk/%unk: .iterator()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = instanceinvoke %13.<@%unk/%unk: .next()>()\n%15 = %14.<@ES2015/BuiltinClass: IteratorResult.done>\nif %15 == true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = %14.<@ES2015/BuiltinClass: IteratorResult.value>\nrecord = <string>%16\n%17 = record.<@%unk/%unk: .id>\n%18 = record.<@%unk/%unk: .data>\n%19 = instanceinvoke Document.<@%unk/%unk: .from()>(%17, %18)\ninstanceinvoke docs.<@%unk/%unk: .push()>(%19)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAll(\n    trx: DataStructROTransaction,\n    ids?: string[]\n  ): Promise<Document[]> {\n    const docs = [];\n    if (ids) {\n      for (const id of ids) {\n        const record = await trx.objectStore('records').index('id').get(id);\n        if (record) {\n          docs.push(Document.from(record.id, record.data));\n        }\n      }\n    } else {\n      const records = await trx.objectStore('records').getAll();\n      for (const record of records) {\n        docs.push(Document.from(record.id, record.data));\n      }\n    }\n    return docs;\n  }"
        },
        {
          "type": "function",
          "name": "has",
          "label": "has",
          "start_line": 1,
          "end_line": 402,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trx = parameter0: DataStructROTransaction\nid = parameter1: string\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke trx.<@%unk/%unk: .objectStore()>('records')\n%1 = instanceinvoke %0.<@%unk/%unk: .index()>('id')\n%2 = instanceinvoke %1.<@%unk/%unk: .getKey()>(id)\nnid = await %2\n%3 = nid !== undefined\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async has(trx: DataStructROTransaction, id: string): Promise<boolean> {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    return nid !== undefined;\n  }"
        },
        {
          "type": "function",
          "name": "readonly",
          "label": "readonly",
          "start_line": 1,
          "end_line": 406,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke this.<@ts_files/180.ts: DataStruct.ensureInitialized()>()\n%1 = await %0\n%2 = newarray (string)[3]\n%2[0] = 'records'\n%2[1] = 'invertedIndex'\n%2[2] = 'kvMetadata'\n%3 = new @ts_files/180.ts: %AC$DataStruct$readonly$32\ninstanceinvoke %3.<@ts_files/180.ts: %AC$DataStruct$readonly$32.constructor()>()\n%4 = this.<@ts_files/180.ts: DataStruct.database>\n%5 = instanceinvoke %4.<@%unk/%unk: .transaction()>(%2, 'readonly', %3)\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async readonly() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readonly',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }"
        },
        {
          "type": "function",
          "name": "readwrite",
          "label": "readwrite",
          "start_line": 1,
          "end_line": 416,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke this.<@ts_files/180.ts: DataStruct.ensureInitialized()>()\n%1 = await %0\n%2 = newarray (string)[3]\n%2[0] = 'records'\n%2[1] = 'invertedIndex'\n%2[2] = 'kvMetadata'\n%3 = new @ts_files/180.ts: %AC$DataStruct$readwrite$33\ninstanceinvoke %3.<@ts_files/180.ts: %AC$DataStruct$readwrite$33.constructor()>()\n%4 = this.<@ts_files/180.ts: DataStruct.database>\n%5 = instanceinvoke %4.<@%unk/%unk: .transaction()>(%2, 'readwrite', %3)\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async readwrite() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readwrite',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }"
        },
        {
          "type": "function",
          "name": "ensureInitialized",
          "label": "ensureInitialized",
          "start_line": 1,
          "end_line": 426,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/180.ts: DataStruct\n%0 = this.<@ts_files/180.ts: DataStruct.database>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 177,
                  "end_line": 497,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke this.<@ts_files/180.ts: DataStruct.initialize()>()\nthis.<@ts_files/180.ts: DataStruct.initializePromise> = this.<@ts_files/180.ts: DataStruct.initializePromise> ?? %1\n%2 = this.<@ts_files/180.ts: DataStruct.initializePromise>\n%3 = await %2\nreturn",
                  "start_line": 1,
                  "end_line": 497,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async ensureInitialized() {\n    if (this.database) {\n      return;\n    }\n    this.initializePromise ??= this.initialize();\n    await this.initializePromise;\n  }"
        },
        {
          "type": "function",
          "name": "initialize",
          "label": "initialize",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/180.ts: DataStruct\n%0 = this.<@ts_files/180.ts: DataStruct.databaseName>\n%1 = new @ts_files/180.ts: %AC$DataStruct$initialize$34\ninstanceinvoke %1.<@ts_files/180.ts: %AC$DataStruct$initialize$34.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .openDB()>(%0, 1, %1)\nthis.<@ts_files/180.ts: DataStruct.database> = await %2\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async initialize() {\n    this.database = await openDB<IndexDB>(this.databaseName, 1, {\n      upgrade(database) {\n        database.createObjectStore('kvMetadata', {\n          keyPath: 'key',\n        });\n        const recordsStore = database.createObjectStore('records', {\n          autoIncrement: true,\n        });\n        recordsStore.createIndex('id', 'id', {\n          unique: true,\n        });\n        const invertedIndexStore = database.createObjectStore('invertedIndex', {\n          autoIncrement: true,\n        });\n        invertedIndexStore.createIndex('key', 'key', { unique: false });\n        invertedIndexStore.createIndex('nid', 'nid', { unique: false });\n      },\n    });\n  }"
        },
        {
          "type": "function",
          "name": "resultNode",
          "label": "resultNode",
          "start_line": 1,
          "end_line": 453,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "record = parameter0: @ts_files/180.ts: %AC$9\noptions = parameter1: SearchOptions<any>\nmatch = parameter2: Match\nnid = parameter3: number\nthis = this: @ts_files/180.ts: DataStruct\n%0 = new @ts_files/180.ts: %AC$DataStruct$resultNode$41\ninstanceinvoke %0.<@ts_files/180.ts: %AC$DataStruct$resultNode$41.constructor()>()\nnode = <@ts_files/180.ts: %AC$DataStruct$resultNode$41>%0\n%1 = options.<@%unk/%unk: .fields>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @ts_files/180.ts: %AC$DataStruct$resultNode$42\ninstanceinvoke %2.<@ts_files/180.ts: %AC$DataStruct$resultNode$42.constructor()>()\nfields = <@ts_files/180.ts: %AC$DataStruct$resultNode$42>%2\n%3 = options.<@%unk/%unk: .fields>\n%4 = <string[]>%3\n%5 = instanceinvoke %4.<@%unk/%unk: .iterator()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke %5.<@%unk/%unk: .next()>()\n%7 = %6.<@ES2015/BuiltinClass: IteratorResult.done>\nif %7 == true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = %6.<@ES2015/BuiltinClass: IteratorResult.value>\nfield = <string>%8\n%9 = record.<@ts_files/180.ts: %AC$9.data>\n%10 = instanceinvoke %9.<@%unk/%unk: .get()>(field)\n%11 = newarray (string)[1]\n%11[0] = ''\n%12 = %10 ?? %11\nfields.<@ts_files/180.ts: %AC$DataStruct$resultNode$42.field> = %12\n%13 = fields.<@ts_files/180.ts: %AC$DataStruct$resultNode$42.field>\n%14 = %13.<@%unk/%unk: .length>\nif %14 === 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%15 = fields.<@ts_files/180.ts: %AC$DataStruct$resultNode$42.field>\n%16 = %15.<@%unk/%unk: .0>\nfields.<@ts_files/180.ts: %AC$DataStruct$resultNode$42.field> = %16",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "node.<@%unk/%unk: .fields> = fields",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%17 = match && nid\n%18 = options.<@%unk/%unk: .highlights>\n%19 = %17 && %18\nif %19 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%20 = new @ts_files/180.ts: %AC$DataStruct$resultNode$43\ninstanceinvoke %20.<@ts_files/180.ts: %AC$DataStruct$resultNode$43.constructor()>()\nhighlights = <@ts_files/180.ts: %AC$DataStruct$resultNode$43>%20\n%21 = options.<@%unk/%unk: .highlights>\n%22 = instanceinvoke %21.<@%unk/%unk: .iterator()>()",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%23 = instanceinvoke %22.<@%unk/%unk: .next()>()\n%24 = %23.<@ES2015/BuiltinClass: IteratorResult.done>\nif %24 == true",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%25 = %23.<@ES2015/BuiltinClass: IteratorResult.value>\n%26 = <string>%25\nfield = %26.<@%unk/%unk: .field>\nbefore = %26.<@%unk/%unk: .before>\nend = %26.<@%unk/%unk: .end>\nhighlightValues = instanceinvoke match.<@%unk/%unk: .getHighlighters()>(nid, field)\nif highlightValues != 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%27 = record.<@ts_files/180.ts: %AC$9.data>\n%28 = instanceinvoke %27.<@%unk/%unk: .get()>(field)\n%29 = newarray (any)[0]\nrawValues = %28 ?? %29\n%30 = instanceinvoke Array.<@%unk/%unk: .from()>(highlightValues)\n%31 = instanceinvoke %30.<@%unk/%unk: .map()>(%AM4$resultNode)\n%32 = instanceinvoke %31.<@%unk/%unk: .filter()>(Boolean)\nhighlights.<@ts_files/180.ts: %AC$DataStruct$resultNode$43.field> = %32",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "node.<@%unk/%unk: .highlights> = highlights",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "return node",
                                              "start_line": 497,
                                              "end_line": 497,
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private resultNode(\n    record: { id: string; data: Map<string, string[]> },\n    options: SearchOptions<any>,\n    match?: Match,\n    nid?: number\n  ): SearchResult<any, any>['nodes'][number] {\n    const node = {\n      id: record.id,\n      score: match && nid ? match.getScore(nid) : 1,\n    } as any;\n    if (options.fields) {\n      const fields = {} as Record<string, string | string[]>;\n      for (const field of options.fields as string[]) {\n        fields[field] = record.data.get(field) ?? [''];\n        if (fields[field].length === 1) {\n          fields[field] = fields[field][0];\n        }\n      }\n      node.fields = fields;\n    }\n    if (match && nid && options.highlights) {\n      const highlights = {} as Record<string, string[]>;\n      for (const { field, before, end } of options.highlights) {\n        const highlightValues = match.getHighlighters(nid, field);\n        if (highlightValues) {\n          const rawValues = record.data.get(field) ?? [];\n          highlights[field] = Array.from(highlightValues)\n            .map(([index, ranges]) => {\n              const raw = rawValues[index];\n              if (raw) {\n                return (\n                  highlighter(raw, before, end, ranges, {\n                    maxPrefix: 20,\n                    maxLength: 50,\n                  }) ?? ''\n                );\n              }\n              return '';\n            })\n            .filter(Boolean);\n        }\n      }\n      node.highlights = highlights;\n    }\n    return node;\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$queryRaw",
          "label": "%AM0$queryRaw",
          "start_line": 1,
          "end_line": 195,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "acc = parameter0: unknown\nw = parameter1: unknown\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke acc.<@%unk/%unk: .and()>(w)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, w) => acc.and(w)"
        },
        {
          "type": "function",
          "name": "%AM1$queryRaw",
          "label": "%AM1$queryRaw",
          "start_line": 1,
          "end_line": 197,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "acc = parameter0: unknown\nw = parameter1: unknown\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke acc.<@%unk/%unk: .and()>(w)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, w) => acc.and(w)"
        },
        {
          "type": "function",
          "name": "%AM2$queryRaw",
          "label": "%AM2$queryRaw",
          "start_line": 1,
          "end_line": 200,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "acc = parameter0: unknown\nw = parameter1: unknown\nthis = this: @ts_files/180.ts: DataStruct\n%0 = instanceinvoke acc.<@%unk/%unk: .or()>(w)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, w) => acc.or(w)"
        },
        {
          "type": "function",
          "name": "%AM3$aggregate",
          "label": "%AM3$aggregate",
          "start_line": 1,
          "end_line": 308,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [value]\nb = parameter1: unknown\nvalue = %closures0.value\nthis = this: @ts_files/180.ts: DataStruct\n%0 = b.<@%unk/%unk: .key>\n%1 = %0 === value\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "b => b.key === value"
        },
        {
          "type": "function",
          "name": "%AM4$resultNode",
          "label": "%AM4$resultNode",
          "start_line": 1,
          "end_line": 480,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [rawValues, before, end]\nArrayBindingPattern = parameter1: unknown\nrawValues = %closures0.rawValues\nbefore = %closures0.before\nend = %closures0.end\nthis = this: @ts_files/180.ts: DataStruct\nraw = rawValues['index']\nif raw != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/180.ts: %AC$DataStruct$%AM4$resultNode$44\ninstanceinvoke %0.<@ts_files/180.ts: %AC$DataStruct$%AM4$resultNode$44.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .highlighter()>(raw, before, end, ranges, %0)\n%2 = %1 ?? ''\nreturn %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return ''",
                  "start_line": 490,
                  "end_line": 490,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "([index, ranges]) => {\n              const raw = rawValues[index];\n              if (raw) {\n                return (\n                  highlighter(raw, before, end, ranges, {\n                    maxPrefix: 20,\n                    maxLength: 50,\n                  }) ?? ''\n                );\n              }\n              return '';\n            }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class DataStruct {\n  private initializePromise: Promise<void> | null = null;\n  database: IDBPDatabase<IndexDB> = null as any;\n  invertedIndex = new Map<string, InvertedIndex>();\n  constructor(\n    readonly databaseName: string,\n    readonly schema: Schema\n  ) {\n    for (const [key, type] of Object.entries(schema)) {\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.index === false) {\n        // If index is false, we don't need to create an inverted index for this field.\n        continue;\n      }\n      if (typeInfo.type === 'String') {\n        this.invertedIndex.set(key, new StringInvertedIndex(key));\n      } else if (typeInfo.type === 'Integer') {\n        this.invertedIndex.set(key, new IntegerInvertedIndex(key));\n      } else if (typeInfo.type === 'FullText') {\n        this.invertedIndex.set(key, new FullTextInvertedIndex(key));\n      } else if (type === 'Boolean') {\n        this.invertedIndex.set(key, new BooleanInvertedIndex(key));\n      } else {\n        throw new Error(`Field type '${type}' not supported`);\n      }\n    }\n  }\n  private async insert(trx: DataStructRWTransaction, document: Document) {\n    const exists = await trx\n      .objectStore('records')\n      .index('id')\n      .get(document.id);\n    if (exists) {\n      throw new Error('Document already exists');\n    }\n    const dataMap = new Map();\n    for (const [key, values] of document.fields) {\n      const type = this.schema[key as string];\n      if (!type) {\n        continue;\n      }\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.store !== false) {\n        // If store is false, the field will not be stored\n        dataMap.set(key, values);\n      }\n    }\n    const nid = await trx.objectStore('records').add({\n      id: document.id,\n      data: dataMap,\n    });\n    for (const [key, values] of document.fields) {\n      const iidx = this.invertedIndex.get(key as string);\n      if (!iidx) {\n        continue;\n      }\n      await iidx.insert(trx, nid, values);\n    }\n  }\n  private async delete(trx: DataStructRWTransaction, id: string) {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    if (nid) {\n      await trx.objectStore('records').delete(nid);\n    }\n    const indexIds = await trx\n      .objectStore('invertedIndex')\n      .index('nid')\n      .getAllKeys(nid);\n    for (const indexId of indexIds) {\n      await trx.objectStore('invertedIndex').delete(indexId);\n    }\n  }\n  async batchWrite(\n    trx: DataStructRWTransaction,\n    deletes: string[],\n    inserts: Document[]\n  ) {\n    const startTime = performance.now();\n    try {\n      for (const del of deletes) {\n        await this.delete(trx, del);\n      }\n      for (const inst of inserts) {\n        await this.insert(trx, inst);\n      }\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Batch Write (${this.databaseName})`,\n          {\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] batchWrite`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }\n  async matchAll(trx: DataStructROTransaction): Promise<Match> {\n    const allNids = await trx.objectStore('records').getAllKeys();\n    const match = new Match();\n    for (const nid of allNids) {\n      match.addScore(nid, 1);\n    }\n    return match;\n  }\n  private async queryRaw(\n    trx: DataStructROTransaction,\n    query: Query<any>\n  ): Promise<Match> {\n    if (query.type === 'match') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.match(trx, query.match);\n    } else if (query.type === 'boolean') {\n      const weights = [];\n      for (const q of query.queries) {\n        weights.push(await this.queryRaw(trx, q));\n      }\n      if (query.occur === 'must') {\n        return weights.reduce((acc, w) => acc.and(w));\n      } else if (query.occur === 'must_not') {\n        const total = weights.reduce((acc, w) => acc.and(w));\n        return (await this.matchAll(trx)).exclude(total);\n      } else if (query.occur === 'should') {\n        return weights.reduce((acc, w) => acc.or(w));\n      }\n    } else if (query.type === 'all') {\n      return await this.matchAll(trx);\n    } else if (query.type === 'boost') {\n      return (await this.queryRaw(trx, query.query)).boost(query.boost);\n    } else if (query.type === 'exists') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.all(trx);\n    }\n    throw new Error(`Query type '${query.type}' not supported`);\n  }\n  async clear(trx: DataStructRWTransaction) {\n    await trx.objectStore('records').clear();\n    await trx.objectStore('invertedIndex').clear();\n    await trx.objectStore('kvMetadata').clear();\n  }\n  async search(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    options: SearchOptions<any>\n  ): Promise<SearchResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const match = await this.queryRaw(trx, query);\n      const nids = match\n        .toArray()\n        .slice(pagination.skip, pagination.skip + pagination.limit);\n      const nodes = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        nodes.push(this.resultNode(record, options, match, nid));\n      }\n      return {\n        pagination: {\n          count: match.size(),\n          hasMore: match.size() > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n        nodes: nodes,\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Search (${this.databaseName})`,\n          {\n            detail: { query, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] search`,\n        endTime - startTime,\n        'ms',\n        query\n      );\n    }\n  }\n  async aggregate(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    field: string,\n    options: AggregateOptions<any>\n  ): Promise<AggregateResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const hitPagination = options.hits\n        ? {\n            skip: options.hits.pagination?.skip ?? 0,\n            limit: options.hits.pagination?.limit ?? 3,\n          }\n        : {\n            skip: 0,\n            limit: 0,\n          };\n      const match = await this.queryRaw(trx, query);\n      const nids = match.toArray();\n      const buckets: {\n        key: string;\n        nids: number[];\n        hits: SearchResult<any, any>['nodes'];\n      }[] = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        const values = record.data.get(field);\n        for (const value of values ?? []) {\n          let bucket;\n          let bucketIndex = buckets.findIndex(b => b.key === value);\n          if (bucketIndex === -1) {\n            bucket = { key: value, nids: [], hits: [] };\n            buckets.push(bucket);\n            bucketIndex = buckets.length - 1;\n          } else {\n            bucket = buckets[bucketIndex];\n          }\n          if (\n            bucketIndex >= pagination.skip &&\n            bucketIndex < pagination.skip + pagination.limit\n          ) {\n            bucket.nids.push(nid);\n            if (\n              bucket.nids.length - 1 >= hitPagination.skip &&\n              bucket.nids.length - 1 < hitPagination.skip + hitPagination.limit\n            ) {\n              bucket.hits.push(\n                this.resultNode(record, options.hits ?? {}, match, nid)\n              );\n            }\n          }\n        }\n      }\n      return {\n        buckets: buckets\n          .slice(pagination.skip, pagination.skip + pagination.limit)\n          .map(bucket => {\n            const result = {\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            } as AggregateResult<any, any>['buckets'][number];\n            if (options.hits) {\n              (result as any).hits = {\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              } as SearchResult<any, any>;\n            }\n            return result;\n          }),\n        pagination: {\n          count: buckets.length,\n          hasMore: buckets.length > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Aggregate (${this.databaseName})`,\n          {\n            detail: { query, field, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] aggregate`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }\n  async getAll(\n    trx: DataStructROTransaction,\n    ids?: string[]\n  ): Promise<Document[]> {\n    const docs = [];\n    if (ids) {\n      for (const id of ids) {\n        const record = await trx.objectStore('records').index('id').get(id);\n        if (record) {\n          docs.push(Document.from(record.id, record.data));\n        }\n      }\n    } else {\n      const records = await trx.objectStore('records').getAll();\n      for (const record of records) {\n        docs.push(Document.from(record.id, record.data));\n      }\n    }\n    return docs;\n  }\n  async has(trx: DataStructROTransaction, id: string): Promise<boolean> {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    return nid !== undefined;\n  }\n  async readonly() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readonly',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }\n  async readwrite() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readwrite',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }\n  private async ensureInitialized() {\n    if (this.database) {\n      return;\n    }\n    this.initializePromise ??= this.initialize();\n    await this.initializePromise;\n  }\n  private async initialize() {\n    this.database = await openDB<IndexDB>(this.databaseName, 1, {\n      upgrade(database) {\n        database.createObjectStore('kvMetadata', {\n          keyPath: 'key',\n        });\n        const recordsStore = database.createObjectStore('records', {\n          autoIncrement: true,\n        });\n        recordsStore.createIndex('id', 'id', {\n          unique: true,\n        });\n        const invertedIndexStore = database.createObjectStore('invertedIndex', {\n          autoIncrement: true,\n        });\n        invertedIndexStore.createIndex('key', 'key', { unique: false });\n        invertedIndexStore.createIndex('nid', 'nid', { unique: false });\n      },\n    });\n  }\n  private resultNode(\n    record: { id: string; data: Map<string, string[]> },\n    options: SearchOptions<any>,\n    match?: Match,\n    nid?: number\n  ): SearchResult<any, any>['nodes'][number] {\n    const node = {\n      id: record.id,\n      score: match && nid ? match.getScore(nid) : 1,\n    } as any;\n    if (options.fields) {\n      const fields = {} as Record<string, string | string[]>;\n      for (const field of options.fields as string[]) {\n        fields[field] = record.data.get(field) ?? [''];\n        if (fields[field].length === 1) {\n          fields[field] = fields[field][0];\n        }\n      }\n      node.fields = fields;\n    }\n    if (match && nid && options.highlights) {\n      const highlights = {} as Record<string, string[]>;\n      for (const { field, before, end } of options.highlights) {\n        const highlightValues = match.getHighlighters(nid, field);\n        if (highlightValues) {\n          const rawValues = record.data.get(field) ?? [];\n          highlights[field] = Array.from(highlightValues)\n            .map(([index, ranges]) => {\n              const raw = rawValues[index];\n              if (raw) {\n                return (\n                  highlighter(raw, before, end, ranges, {\n                    maxPrefix: 20,\n                    maxLength: 50,\n                  }) ?? ''\n                );\n              }\n              return '';\n            })\n            .filter(Boolean);\n        }\n      }\n      node.highlights = highlights;\n    }\n    return node;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$constructor$10",
      "label": "%AC$DataStruct$constructor$10",
      "start_line": 77,
      "end_line": 77,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$insert$11",
      "label": "%AC$DataStruct$insert$11",
      "start_line": 109,
      "end_line": 109,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$insert$12",
      "label": "%AC$DataStruct$insert$12",
      "start_line": 115,
      "end_line": 115,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      id: document.id,\n      data: dataMap,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$batchWrite$13",
      "label": "%AC$DataStruct$batchWrite$13",
      "start_line": 158,
      "end_line": 158,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            start: startTime,\n            end: endTime,\n          }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$search$14",
      "label": "%AC$DataStruct$search$14",
      "start_line": 227,
      "end_line": 227,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$search$15$%instInit$16",
      "label": "%AC$%AC$DataStruct$search$15$%instInit$16",
      "start_line": 244,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          count: match.size(),\n          hasMore: match.size() > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$search$15",
      "label": "%AC$DataStruct$search$15",
      "start_line": 243,
      "end_line": 243,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        pagination: {\n          count: match.size(),\n          hasMore: match.size() > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n        nodes: nodes,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$search$17$%instInit$18",
      "label": "%AC$%AC$DataStruct$search$17$%instInit$18",
      "start_line": 258,
      "end_line": 258,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ query, options }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$search$17",
      "label": "%AC$DataStruct$search$17",
      "start_line": 257,
      "end_line": 257,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            detail: { query, options },\n            start: startTime,\n            end: endTime,\n          }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$19",
      "label": "%AC$DataStruct$aggregate$19",
      "start_line": 280,
      "end_line": 280,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$20",
      "label": "%AC$DataStruct$aggregate$20",
      "start_line": 285,
      "end_line": 285,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            skip: options.hits.pagination?.skip ?? 0,\n            limit: options.hits.pagination?.limit ?? 3,\n          }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$21",
      "label": "%AC$DataStruct$aggregate$21",
      "start_line": 289,
      "end_line": 289,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            skip: 0,\n            limit: 0,\n          }"
    },
    {
      "type": "class",
      "name": "%AC$22",
      "label": "%AC$22",
      "start_line": 295,
      "end_line": 295,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        key: string;\n        nids: number[];\n        hits: SearchResult<any, any>['nodes'];\n      }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$23",
      "label": "%AC$DataStruct$aggregate$23",
      "start_line": 310,
      "end_line": 310,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ key: value, nids: [], hits: [] }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$24",
      "label": "%AC$DataStruct$aggregate$24",
      "start_line": 326,
      "end_line": 326,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26",
      "label": "%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26",
      "start_line": 336,
      "end_line": 336,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27$%instInit$28",
      "label": "%AC$%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27$%instInit$28",
      "start_line": 343,
      "end_line": 343,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27",
      "label": "%AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27",
      "start_line": 342,
      "end_line": 342,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$aggregate$25$%instInit$29",
      "label": "%AC$%AC$DataStruct$aggregate$25$%instInit$29",
      "start_line": 356,
      "end_line": 356,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          count: buckets.length,\n          hasMore: buckets.length > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$25",
      "label": "%AC$DataStruct$aggregate$25",
      "start_line": 1,
      "end_line": 335,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 335,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "bucket = parameter0: unknown\nthis = this: @ts_files/180.ts: DataStruct\n%0 = new @ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26\ninstanceinvoke %0.<@ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26.constructor()>()\nresult = <@ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26>%0\n%1 = options.<@%unk/%unk: .hits>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27\ninstanceinvoke %3.<@ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27.constructor()>()\n%4 = <@ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$27>%3\n%2 = <@ts_files/180.ts: %AC$%AC$DataStruct$aggregate$25$%AM0$%instInit$26>result\n%2.<@%unk/%unk: .hits> = %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return result",
                      "start_line": 354,
                      "end_line": 354,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "bucket => {\n            const result = {\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            } as AggregateResult<any, any>['buckets'][number];\n            if (options.hits) {\n              (result as any).hits = {\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              } as SearchResult<any, any>;\n            }\n            return result;\n          }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        buckets: buckets\n          .slice(pagination.skip, pagination.skip + pagination.limit)\n          .map(bucket => {\n            const result = {\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            } as AggregateResult<any, any>['buckets'][number];\n            if (options.hits) {\n              (result as any).hits = {\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              } as SearchResult<any, any>;\n            }\n            return result;\n          }),\n        pagination: {\n          count: buckets.length,\n          hasMore: buckets.length > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$aggregate$30$%instInit$31",
      "label": "%AC$%AC$DataStruct$aggregate$30$%instInit$31",
      "start_line": 369,
      "end_line": 369,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ query, field, options }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$aggregate$30",
      "label": "%AC$DataStruct$aggregate$30",
      "start_line": 368,
      "end_line": 368,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            detail: { query, field, options },\n            start: startTime,\n            end: endTime,\n          }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$readonly$32",
      "label": "%AC$DataStruct$readonly$32",
      "start_line": 411,
      "end_line": 411,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        durability: 'relaxed',\n      }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$readwrite$33",
      "label": "%AC$DataStruct$readwrite$33",
      "start_line": 421,
      "end_line": 421,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        durability: 'relaxed',\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$35",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$35",
      "start_line": 436,
      "end_line": 436,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          keyPath: 'key',\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$36",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$36",
      "start_line": 439,
      "end_line": 439,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          autoIncrement: true,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$37",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$37",
      "start_line": 442,
      "end_line": 442,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          unique: true,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$38",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$38",
      "start_line": 445,
      "end_line": 445,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          autoIncrement: true,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$39",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$39",
      "start_line": 448,
      "end_line": 448,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ unique: false }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$DataStruct$initialize$34$upgrade$40",
      "label": "%AC$%AC$DataStruct$initialize$34$upgrade$40",
      "start_line": 449,
      "end_line": 449,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ unique: false }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$initialize$34",
      "label": "%AC$DataStruct$initialize$34",
      "start_line": 1,
      "end_line": 497,
      "functions": [
        {
          "type": "function",
          "name": "upgrade",
          "label": "upgrade",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "database = parameter0: unknown\nthis = this: @ts_files/180.ts: DataStruct\n%0 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$35\ninstanceinvoke %0.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$35.constructor()>()\ninstanceinvoke database.<@%unk/%unk: .createObjectStore()>('kvMetadata', %0)\n%1 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$36\ninstanceinvoke %1.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$36.constructor()>()\nrecordsStore = instanceinvoke database.<@%unk/%unk: .createObjectStore()>('records', %1)\n%2 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$37\ninstanceinvoke %2.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$37.constructor()>()\ninstanceinvoke recordsStore.<@%unk/%unk: .createIndex()>('id', 'id', %2)\n%3 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$38\ninstanceinvoke %3.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$38.constructor()>()\ninvertedIndexStore = instanceinvoke database.<@%unk/%unk: .createObjectStore()>('invertedIndex', %3)\n%4 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$39\ninstanceinvoke %4.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$39.constructor()>()\ninstanceinvoke invertedIndexStore.<@%unk/%unk: .createIndex()>('key', 'key', %4)\n%5 = new @ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$40\ninstanceinvoke %5.<@ts_files/180.ts: %AC$%AC$DataStruct$initialize$34$upgrade$40.constructor()>()\ninstanceinvoke invertedIndexStore.<@%unk/%unk: .createIndex()>('nid', 'nid', %5)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "upgrade(database) {\n        database.createObjectStore('kvMetadata', {\n          keyPath: 'key',\n        });\n        const recordsStore = database.createObjectStore('records', {\n          autoIncrement: true,\n        });\n        recordsStore.createIndex('id', 'id', {\n          unique: true,\n        });\n        const invertedIndexStore = database.createObjectStore('invertedIndex', {\n          autoIncrement: true,\n        });\n        invertedIndexStore.createIndex('key', 'key', { unique: false });\n        invertedIndexStore.createIndex('nid', 'nid', { unique: false });\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      upgrade(database) {\n        database.createObjectStore('kvMetadata', {\n          keyPath: 'key',\n        });\n        const recordsStore = database.createObjectStore('records', {\n          autoIncrement: true,\n        });\n        recordsStore.createIndex('id', 'id', {\n          unique: true,\n        });\n        const invertedIndexStore = database.createObjectStore('invertedIndex', {\n          autoIncrement: true,\n        });\n        invertedIndexStore.createIndex('key', 'key', { unique: false });\n        invertedIndexStore.createIndex('nid', 'nid', { unique: false });\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$resultNode$41",
      "label": "%AC$DataStruct$resultNode$41",
      "start_line": 459,
      "end_line": 459,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      id: record.id,\n      score: match && nid ? match.getScore(nid) : 1,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$resultNode$42",
      "label": "%AC$DataStruct$resultNode$42",
      "start_line": 464,
      "end_line": 464,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$resultNode$43",
      "label": "%AC$DataStruct$resultNode$43",
      "start_line": 474,
      "end_line": 474,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$DataStruct$%AM4$resultNode$44",
      "label": "%AC$DataStruct$%AM4$resultNode$44",
      "start_line": 484,
      "end_line": 484,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                    maxPrefix: 20,\n                    maxLength: 50,\n                  }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { DebugLogger } from '@affine/debug';\nimport {\n  type DBSchema,\n  type IDBPDatabase,\n  type IDBPTransaction,\n  openDB,\n  type StoreNames,\n} from 'idb';\nimport {\n  type AggregateOptions,\n  type AggregateResult,\n  Document,\n  type Query,\n  type Schema,\n  type SearchOptions,\n  type SearchResult,\n} from '../../';\nimport { highlighter } from './highlighter';\nimport {\n  BooleanInvertedIndex,\n  FullTextInvertedIndex,\n  IntegerInvertedIndex,\n  type InvertedIndex,\n  StringInvertedIndex,\n} from './inverted-index';\nimport { Match } from './match';\nconst logger = new DebugLogger('indexeddb');\nexport interface IndexDB extends DBSchema {\n  kvMetadata: {\n    key: string;\n    value: {\n      key: string;\n      value: any;\n    };\n  };\n  records: {\n    key: number;\n    value: {\n      id: string;\n      data: Map<string, string[]>;\n    };\n    indexes: { id: string };\n  };\n  invertedIndex: {\n    key: number;\n    value: {\n      nid: number;\n      pos?: {\n        i: number ;\n        l: number ;\n        rs: [number, number][] ;\n      };\n      key: ArrayBuffer;\n    };\n    indexes: { key: ArrayBuffer; nid: number };\n  };\n}\nexport type DataStructRWTransaction = IDBPTransaction<\n  IndexDB,\n  ArrayLike<StoreNames<IndexDB>>,\n  'readwrite'\n>;\nexport type DataStructROTransaction = IDBPTransaction<\n  IndexDB,\n  ArrayLike<StoreNames<IndexDB>>,\n  'readonly' | 'readwrite'\n>;\nexport class DataStruct {\n  private initializePromise: Promise<void> | null = null;\n  database: IDBPDatabase<IndexDB> = null as any;\n  invertedIndex = new Map<string, InvertedIndex>();\n  constructor(\n    readonly databaseName: string,\n    readonly schema: Schema\n  ) {\n    for (const [key, type] of Object.entries(schema)) {\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.index === false) {\n        // If index is false, we don't need to create an inverted index for this field.\n        continue;\n      }\n      if (typeInfo.type === 'String') {\n        this.invertedIndex.set(key, new StringInvertedIndex(key));\n      } else if (typeInfo.type === 'Integer') {\n        this.invertedIndex.set(key, new IntegerInvertedIndex(key));\n      } else if (typeInfo.type === 'FullText') {\n        this.invertedIndex.set(key, new FullTextInvertedIndex(key));\n      } else if (type === 'Boolean') {\n        this.invertedIndex.set(key, new BooleanInvertedIndex(key));\n      } else {\n        throw new Error(`Field type '${type}' not supported`);\n      }\n    }\n  }\n  private async insert(trx: DataStructRWTransaction, document: Document) {\n    const exists = await trx\n      .objectStore('records')\n      .index('id')\n      .get(document.id);\n    if (exists) {\n      throw new Error('Document already exists');\n    }\n    const dataMap = new Map();\n    for (const [key, values] of document.fields) {\n      const type = this.schema[key as string];\n      if (!type) {\n        continue;\n      }\n      const typeInfo = typeof type === 'string' ? { type } : type;\n      if (typeInfo.store !== false) {\n        // If store is false, the field will not be stored\n        dataMap.set(key, values);\n      }\n    }\n    const nid = await trx.objectStore('records').add({\n      id: document.id,\n      data: dataMap,\n    });\n    for (const [key, values] of document.fields) {\n      const iidx = this.invertedIndex.get(key as string);\n      if (!iidx) {\n        continue;\n      }\n      await iidx.insert(trx, nid, values);\n    }\n  }\n  private async delete(trx: DataStructRWTransaction, id: string) {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    if (nid) {\n      await trx.objectStore('records').delete(nid);\n    }\n    const indexIds = await trx\n      .objectStore('invertedIndex')\n      .index('nid')\n      .getAllKeys(nid);\n    for (const indexId of indexIds) {\n      await trx.objectStore('invertedIndex').delete(indexId);\n    }\n  }\n  async batchWrite(\n    trx: DataStructRWTransaction,\n    deletes: string[],\n    inserts: Document[]\n  ) {\n    const startTime = performance.now();\n    try {\n      for (const del of deletes) {\n        await this.delete(trx, del);\n      }\n      for (const inst of inserts) {\n        await this.insert(trx, inst);\n      }\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Batch Write (${this.databaseName})`,\n          {\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] batchWrite`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }\n  async matchAll(trx: DataStructROTransaction): Promise<Match> {\n    const allNids = await trx.objectStore('records').getAllKeys();\n    const match = new Match();\n    for (const nid of allNids) {\n      match.addScore(nid, 1);\n    }\n    return match;\n  }\n  private async queryRaw(\n    trx: DataStructROTransaction,\n    query: Query<any>\n  ): Promise<Match> {\n    if (query.type === 'match') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.match(trx, query.match);\n    } else if (query.type === 'boolean') {\n      const weights = [];\n      for (const q of query.queries) {\n        weights.push(await this.queryRaw(trx, q));\n      }\n      if (query.occur === 'must') {\n        return weights.reduce((acc, w) => acc.and(w));\n      } else if (query.occur === 'must_not') {\n        const total = weights.reduce((acc, w) => acc.and(w));\n        return (await this.matchAll(trx)).exclude(total);\n      } else if (query.occur === 'should') {\n        return weights.reduce((acc, w) => acc.or(w));\n      }\n    } else if (query.type === 'all') {\n      return await this.matchAll(trx);\n    } else if (query.type === 'boost') {\n      return (await this.queryRaw(trx, query.query)).boost(query.boost);\n    } else if (query.type === 'exists') {\n      const iidx = this.invertedIndex.get(query.field as string);\n      if (!iidx) {\n        return new Match();\n      }\n      return await iidx.all(trx);\n    }\n    throw new Error(`Query type '${query.type}' not supported`);\n  }\n  async clear(trx: DataStructRWTransaction) {\n    await trx.objectStore('records').clear();\n    await trx.objectStore('invertedIndex').clear();\n    await trx.objectStore('kvMetadata').clear();\n  }\n  async search(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    options: SearchOptions<any>\n  ): Promise<SearchResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const match = await this.queryRaw(trx, query);\n      const nids = match\n        .toArray()\n        .slice(pagination.skip, pagination.skip + pagination.limit);\n      const nodes = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        nodes.push(this.resultNode(record, options, match, nid));\n      }\n      return {\n        pagination: {\n          count: match.size(),\n          hasMore: match.size() > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n        nodes: nodes,\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Search (${this.databaseName})`,\n          {\n            detail: { query, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] search`,\n        endTime - startTime,\n        'ms',\n        query\n      );\n    }\n  }\n  async aggregate(\n    trx: DataStructROTransaction,\n    query: Query<any>,\n    field: string,\n    options: AggregateOptions<any>\n  ): Promise<AggregateResult<any, any>> {\n    const startTime = performance.now();\n    try {\n      const pagination = {\n        skip: options.pagination?.skip ?? 0,\n        limit: options.pagination?.limit ?? 100,\n      };\n      const hitPagination = options.hits\n        ? {\n            skip: options.hits.pagination?.skip ?? 0,\n            limit: options.hits.pagination?.limit ?? 3,\n          }\n        : {\n            skip: 0,\n            limit: 0,\n          };\n      const match = await this.queryRaw(trx, query);\n      const nids = match.toArray();\n      const buckets: {\n        key: string;\n        nids: number[];\n        hits: SearchResult<any, any>['nodes'];\n      }[] = [];\n      for (const nid of nids) {\n        const record = await trx.objectStore('records').get(nid);\n        if (!record) {\n          continue;\n        }\n        const values = record.data.get(field);\n        for (const value of values ?? []) {\n          let bucket;\n          let bucketIndex = buckets.findIndex(b => b.key === value);\n          if (bucketIndex === -1) {\n            bucket = { key: value, nids: [], hits: [] };\n            buckets.push(bucket);\n            bucketIndex = buckets.length - 1;\n          } else {\n            bucket = buckets[bucketIndex];\n          }\n          if (\n            bucketIndex >= pagination.skip &&\n            bucketIndex < pagination.skip + pagination.limit\n          ) {\n            bucket.nids.push(nid);\n            if (\n              bucket.nids.length - 1 >= hitPagination.skip &&\n              bucket.nids.length - 1 < hitPagination.skip + hitPagination.limit\n            ) {\n              bucket.hits.push(\n                this.resultNode(record, options.hits ?? {}, match, nid)\n              );\n            }\n          }\n        }\n      }\n      return {\n        buckets: buckets\n          .slice(pagination.skip, pagination.skip + pagination.limit)\n          .map(bucket => {\n            const result = {\n              key: bucket.key,\n              score: match.getScore(bucket.nids[0]),\n              count: bucket.nids.length,\n            } as AggregateResult<any, any>['buckets'][number];\n            if (options.hits) {\n              (result as any).hits = {\n                pagination: {\n                  count: bucket.nids.length,\n                  hasMore:\n                    bucket.nids.length >\n                    hitPagination.limit + hitPagination.skip,\n                  limit: hitPagination.limit,\n                  skip: hitPagination.skip,\n                },\n                nodes: bucket.hits,\n              } as SearchResult<any, any>;\n            }\n            return result;\n          }),\n        pagination: {\n          count: buckets.length,\n          hasMore: buckets.length > pagination.limit + pagination.skip,\n          limit: pagination.limit,\n          skip: pagination.skip,\n        },\n      };\n    } finally {\n      const endTime = performance.now();\n      if (BUILD_CONFIG.debug) {\n        performance.measure(\n          `[IndexedDB Indexer] Aggregate (${this.databaseName})`,\n          {\n            detail: { query, field, options },\n            start: startTime,\n            end: endTime,\n          }\n        );\n      }\n      logger.debug(\n        `[indexer ${this.databaseName}] aggregate`,\n        endTime - startTime,\n        'ms'\n      );\n    }\n  }\n  async getAll(\n    trx: DataStructROTransaction,\n    ids?: string[]\n  ): Promise<Document[]> {\n    const docs = [];\n    if (ids) {\n      for (const id of ids) {\n        const record = await trx.objectStore('records').index('id').get(id);\n        if (record) {\n          docs.push(Document.from(record.id, record.data));\n        }\n      }\n    } else {\n      const records = await trx.objectStore('records').getAll();\n      for (const record of records) {\n        docs.push(Document.from(record.id, record.data));\n      }\n    }\n    return docs;\n  }\n  async has(trx: DataStructROTransaction, id: string): Promise<boolean> {\n    const nid = await trx.objectStore('records').index('id').getKey(id);\n    return nid !== undefined;\n  }\n  async readonly() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readonly',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }\n  async readwrite() {\n    await this.ensureInitialized();\n    return this.database.transaction(\n      ['records', 'invertedIndex', 'kvMetadata'],\n      'readwrite',\n      {\n        durability: 'relaxed',\n      }\n    );\n  }\n  private async ensureInitialized() {\n    if (this.database) {\n      return;\n    }\n    this.initializePromise ??= this.initialize();\n    await this.initializePromise;\n  }\n  private async initialize() {\n    this.database = await openDB<IndexDB>(this.databaseName, 1, {\n      upgrade(database) {\n        database.createObjectStore('kvMetadata', {\n          keyPath: 'key',\n        });\n        const recordsStore = database.createObjectStore('records', {\n          autoIncrement: true,\n        });\n        recordsStore.createIndex('id', 'id', {\n          unique: true,\n        });\n        const invertedIndexStore = database.createObjectStore('invertedIndex', {\n          autoIncrement: true,\n        });\n        invertedIndexStore.createIndex('key', 'key', { unique: false });\n        invertedIndexStore.createIndex('nid', 'nid', { unique: false });\n      },\n    });\n  }\n  private resultNode(\n    record: { id: string; data: Map<string, string[]> },\n    options: SearchOptions<any>,\n    match?: Match,\n    nid?: number\n  ): SearchResult<any, any>['nodes'][number] {\n    const node = {\n      id: record.id,\n      score: match && nid ? match.getScore(nid) : 1,\n    } as any;\n    if (options.fields) {\n      const fields = {} as Record<string, string | string[]>;\n      for (const field of options.fields as string[]) {\n        fields[field] = record.data.get(field) ?? [''];\n        if (fields[field].length === 1) {\n          fields[field] = fields[field][0];\n        }\n      }\n      node.fields = fields;\n    }\n    if (match && nid && options.highlights) {\n      const highlights = {} as Record<string, string[]>;\n      for (const { field, before, end } of options.highlights) {\n        const highlightValues = match.getHighlighters(nid, field);\n        if (highlightValues) {\n          const rawValues = record.data.get(field) ?? [];\n          highlights[field] = Array.from(highlightValues)\n            .map(([index, ranges]) => {\n              const raw = rawValues[index];\n              if (raw) {\n                return (\n                  highlighter(raw, before, end, ranges, {\n                    maxPrefix: 20,\n                    maxLength: 50,\n                  }) ?? ''\n                );\n              }\n              return '';\n            })\n            .filter(Boolean);\n        }\n      }\n      node.highlights = highlights;\n    }\n    return node;\n  }\n}"
}