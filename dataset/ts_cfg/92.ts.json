{
  "type": "file",
  "name": "92.ts",
  "label": "92.ts",
  "start_line": -1,
  "end_line": 79,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/92.ts: %dflt\n%0 = new @ts_files/92.ts: %AC$%dflt$%dflt$0\ninstanceinvoke %0.<@ts_files/92.ts: %AC$%dflt$%dflt$0.constructor()>()\nLogLevel = %0\nLOG_LEVEL = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.INFO>\n%1 = new @ts_files/92.ts: LogUtil\ninstanceinvoke %1.<@ts_files/92.ts: LogUtil.constructor()>()\nmLogUtil = %1\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "LogUtil",
      "label": "LogUtil",
      "start_line": 1,
      "end_line": 79,
      "functions": [
        {
          "type": "function",
          "name": "debug",
          "label": "debug",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "msg = parameter0: unknown\nthis = this: @ts_files/92.ts: LogUtil\ninstanceinvoke console.<@%unk/%unk: .log()>(msg)\n%0 = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.DEBUG>\nif %0 >= LOG_LEVEL",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .log()>(msg)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "debug(msg): void {\n    console.log(msg)\n    if (LogLevel.DEBUG >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "log",
          "label": "log",
          "start_line": 1,
          "end_line": 58,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "msg = parameter0: unknown\nthis = this: @ts_files/92.ts: LogUtil\ninstanceinvoke console.<@%unk/%unk: .log()>(msg)\n%0 = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.INFO>\nif %0 >= LOG_LEVEL",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .log()>(msg)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "log(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "info",
          "label": "info",
          "start_line": 1,
          "end_line": 65,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "msg = parameter0: unknown\nthis = this: @ts_files/92.ts: LogUtil\ninstanceinvoke console.<@%unk/%unk: .log()>(msg)\n%0 = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.INFO>\nif %0 >= LOG_LEVEL",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .log()>(msg)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "info(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "warn",
          "label": "warn",
          "start_line": 1,
          "end_line": 72,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "msg = parameter0: unknown\nthis = this: @ts_files/92.ts: LogUtil\ninstanceinvoke console.<@%unk/%unk: .log()>(msg)\n%0 = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.WARN>\nif %0 >= LOG_LEVEL",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .warn()>(msg)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "warn(msg): void {\n    console.log(msg)\n    if (LogLevel.WARN >= LOG_LEVEL) {\n      console.warn(msg);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "error",
          "label": "error",
          "start_line": 1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "msg = parameter0: unknown\nthis = this: @ts_files/92.ts: LogUtil\n%0 = LogLevel.<@ts_files/92.ts: %AC$%dflt$%dflt$0.ERROR>\nif %0 >= LOG_LEVEL",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .error()>(msg)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "error(msg): void {\n    if (LogLevel.ERROR >= LOG_LEVEL) {\n      console.error(msg);\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class LogUtil extends BaseModel {\n  debug(msg): void {\n    console.log(msg)\n    if (LogLevel.DEBUG >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  log(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  info(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  warn(msg): void {\n    console.log(msg)\n    if (LogLevel.WARN >= LOG_LEVEL) {\n      console.warn(msg);\n    }\n  }\n\n  error(msg): void {\n    if (LogLevel.ERROR >= LOG_LEVEL) {\n      console.error(msg);\n    }\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$0",
      "label": "%AC$%dflt$%dflt$0",
      "start_line": 18,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  /**\n   * debug\n   */\n  DEBUG: 3,\n\n  /**\n   * info\n   */\n  INFO: 4,\n\n  /**\n   * warn\n   */\n  WARN: 5,\n\n  /**\n   * error\n   */\n  ERROR: 6,\n\n  /**\n   * fatal\n   */\n  FATAL: 7,\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport BaseModel from './BaseModel';\n\nlet LogLevel = {\n  /**\n   * debug\n   */\n  DEBUG: 3,\n\n  /**\n   * info\n   */\n  INFO: 4,\n\n  /**\n   * warn\n   */\n  WARN: 5,\n\n  /**\n   * error\n   */\n  ERROR: 6,\n\n  /**\n   * fatal\n   */\n  FATAL: 7,\n};\n\nconst LOG_LEVEL = LogLevel.INFO\n\n/**\n *  log package tool class\n */\nexport class LogUtil extends BaseModel {\n  debug(msg): void {\n    console.log(msg)\n    if (LogLevel.DEBUG >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  log(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  info(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  warn(msg): void {\n    console.log(msg)\n    if (LogLevel.WARN >= LOG_LEVEL) {\n      console.warn(msg);\n    }\n  }\n\n  error(msg): void {\n    if (LogLevel.ERROR >= LOG_LEVEL) {\n      console.error(msg);\n    }\n  }\n}\n\nlet mLogUtil = new LogUtil();\n\nexport default mLogUtil as LogUtil\n;"
}