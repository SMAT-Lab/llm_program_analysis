{
  "type": "file",
  "name": "134.ts",
  "label": "134.ts",
  "start_line": -1,
  "end_line": 90,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 90,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\nstaticinvoke <@%unk/%unk: .describe()>('view transitions', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {}"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {}"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\n%0 = new @ts_files/134.ts: %AC$%dflt$%AM3$%AM0$0\ninstanceinvoke %0.<@ts_files/134.ts: %AC$%dflt$%AM3$%AM0$0.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .bootstrapApplication()>(App, %0)\nappRef = await %1\n%2 = appRef.<@%unk/%unk: .injector>\ndoc = instanceinvoke %2.<@%unk/%unk: .get()>(DOCUMENT)\n%3 = doc.<@%unk/%unk: .startViewTransition>\n%4 = !%3\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 16,
                  "end_line": 90,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = staticinvoke <@%unk/%unk: .spyOn()>(doc, 'startViewTransition')\n%6 = %5.<@%unk/%unk: .and>\nviewTransitionSpy = instanceinvoke %6.<@%unk/%unk: .callThrough()>()\n%7 = appRef.<@%unk/%unk: .injector>\n%8 = instanceinvoke %7.<@%unk/%unk: .get()>(Router)\n%9 = instanceinvoke %8.<@%unk/%unk: .navigateByUrl()>('/a')\n%10 = await %9\n%11 = staticinvoke <@%unk/%unk: .expect()>(viewTransitionSpy)\n%12 = %11.<@%unk/%unk: .not>\ninstanceinvoke %12.<@%unk/%unk: .toHaveBeenCalled()>()\n%13 = appRef.<@%unk/%unk: .injector>\n%14 = instanceinvoke %13.<@%unk/%unk: .get()>(Router)\n%15 = instanceinvoke %14.<@%unk/%unk: .navigateByUrl()>('/b')\n%16 = await %15\n%17 = staticinvoke <@%unk/%unk: .expect()>(viewTransitionSpy)\ninstanceinvoke %17.<@%unk/%unk: .toHaveBeenCalled()>()\nreturn",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const appRef = await bootstrapApplication(App, {\n      providers: [\n        provideRouter(\n          [{path: '**', component: App}],\n          withDisabledInitialNavigation(),\n          withViewTransitions({skipInitialTransition: true}),\n        ),\n      ],\n    });\n    const doc = appRef.injector.get(DOCUMENT);\n    if (!doc.startViewTransition) {\n      return;\n    }\n    const viewTransitionSpy = spyOn(doc, 'startViewTransition').and.callThrough();\n    await appRef.injector.get(Router).navigateByUrl('/a');\n    expect(viewTransitionSpy).not.toHaveBeenCalled();\n    await appRef.injector.get(Router).navigateByUrl('/b');\n    expect(viewTransitionSpy).toHaveBeenCalled();\n  }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM4$%AM0",
          "label": "%AM5$%AM4$%AM0",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "e = parameter0: unknown\nthis = this: @ts_files/134.ts: %dflt\ninstanceinvoke eventLog.<@%unk/%unk: .push()>(e)\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(e) => {\n      eventLog.push(e);\n    }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM0",
          "label": "%AM4$%AM0",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\n%0 = new @ts_files/134.ts: %AC$%dflt$%AM4$%AM0$3\ninstanceinvoke %0.<@ts_files/134.ts: %AC$%dflt$%AM4$%AM0$3.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .bootstrapApplication()>(App, %0)\nres = await %1\n%2 = res.<@%unk/%unk: .injector>\nrouter = instanceinvoke %2.<@%unk/%unk: .get()>(Router)\n%3 = newarray (any)[0]\neventLog = <any[]>%3\n%4 = router.<@%unk/%unk: .events>\ninstanceinvoke %4.<@%unk/%unk: .subscribe()>(%AM5$%AM4$%AM0)\n%5 = instanceinvoke router.<@%unk/%unk: .navigateByUrl()>('/b')\n%6 = await %5\n%7 = eventLog.<@%unk/%unk: .length>\n%8 = %7 - 1\n%9 = eventLog[%8]\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\ninstanceinvoke %10.<@%unk/%unk: .toBeInstanceOf()>(NavigationEnd)\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    @Component({\n      selector: 'component-b',\n      template: `b`,\n      standalone: true,\n    })\n    class ComponentB {}\n    const res = await bootstrapApplication(App, {\n      providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())],\n    });\n    const router = res.injector.get(Router);\n    const eventLog = [] as Event[];\n    router.events.subscribe((e) => {\n      eventLog.push(e);\n    });\n    await router.navigateByUrl('/b');\n    expect(eventLog[eventLog.length - 1]).toBeInstanceOf(NavigationEnd);\n  }"
        },
        {
          "type": "function",
          "name": "%AM7$%AM6$%AM0",
          "label": "%AM7$%AM6$%AM0",
          "start_line": 1,
          "end_line": 66,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\ntransitionSpy = instanceinvoke jasmine.<@%unk/%unk: .createSpy()>()\n%0 = new @ts_files/134.ts: %AC$%dflt$%AM7$%AM6$%AM0$5\ninstanceinvoke %0.<@ts_files/134.ts: %AC$%dflt$%AM7$%AM6$%AM0$5.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .bootstrapApplication()>(App, %0)\nappRef = await %1\n%2 = appRef.<@%unk/%unk: .injector>\ndoc = instanceinvoke %2.<@%unk/%unk: .get()>(DOCUMENT)\n%3 = doc.<@%unk/%unk: .startViewTransition>\n%4 = !%3\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 16,
                  "end_line": 90,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = appRef.<@%unk/%unk: .injector>\n%6 = instanceinvoke %5.<@%unk/%unk: .get()>(Router)\n%7 = instanceinvoke %6.<@%unk/%unk: .navigateByUrl()>('/a')\n%8 = await %7\n%9 = staticinvoke <@%unk/%unk: .expect()>(transitionSpy)\ninstanceinvoke %9.<@%unk/%unk: .toHaveBeenCalled()>()\nreturn",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n      @Component({\n        selector: 'test-app',\n        standalone: true,\n        template: `{{checks}}`,\n      })\n      class App {\n        checks = 0;\n        ngDoCheck() {\n          this.checks++;\n        }\n      }\n      const transitionSpy = jasmine.createSpy();\n      const appRef = await bootstrapApplication(App, {\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      });\n      const doc = appRef.injector.get(DOCUMENT);\n      if (!doc.startViewTransition) {\n        return;\n      }\n      await appRef.injector.get(Router).navigateByUrl('/a');\n      expect(transitionSpy).toHaveBeenCalled();\n    }"
        },
        {
          "type": "function",
          "name": "%AM6$%AM0",
          "label": "%AM6$%AM0",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should not create a view transition if only the fragment changes', %AM7$%AM6$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    it('should not create a view transition if only the fragment changes', async () => {\n      @Component({\n        selector: 'test-app',\n        standalone: true,\n        template: `{{checks}}`,\n      })\n      class App {\n        checks = 0;\n        ngDoCheck() {\n          this.checks++;\n        }\n      }\n      const transitionSpy = jasmine.createSpy();\n      const appRef = await bootstrapApplication(App, {\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      });\n      const doc = appRef.injector.get(DOCUMENT);\n      if (!doc.startViewTransition) {\n        return;\n      }\n      await appRef.injector.get(Router).navigateByUrl('/a');\n      expect(transitionSpy).toHaveBeenCalled();\n    });\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 13,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/134.ts: %dflt\nif isNode != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .it()>('are not available in node environment', %AM1$%AM0)\nreturn",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .beforeEach()>(destroyPlatform)\nstaticinvoke <@%unk/%unk: .afterEach()>(destroyPlatform)\n%0 = staticinvoke <@%unk/%unk: .withBody()>('<test-app></test-app>', %AM2$%AM0)\nstaticinvoke <@%unk/%unk: .beforeEach()>(%0)\nstaticinvoke <@%unk/%unk: .it()>('should skip initial transition', %AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should have the correct event order when using view transitions', %AM4$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('onViewTransitionCreated option', %AM6$%AM0)\nreturn",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  if (isNode) {\n    it('are not available in node environment', () => {});\n    return;\n  }\n  beforeEach(destroyPlatform);\n  afterEach(destroyPlatform);\n  @Component({\n    selector: 'test-app',\n    standalone: true,\n    template: ``,\n  })\n  class App {}\n  beforeEach(withBody('<test-app></test-app>', () => {}));\n  it('should skip initial transition', async () => {\n    const appRef = await bootstrapApplication(App, {\n      providers: [\n        provideRouter(\n          [{path: '**', component: App}],\n          withDisabledInitialNavigation(),\n          withViewTransitions({skipInitialTransition: true}),\n        ),\n      ],\n    });\n    const doc = appRef.injector.get(DOCUMENT);\n    if (!doc.startViewTransition) {\n      return;\n    }\n    const viewTransitionSpy = spyOn(doc, 'startViewTransition').and.callThrough();\n    await appRef.injector.get(Router).navigateByUrl('/a');\n    expect(viewTransitionSpy).not.toHaveBeenCalled();\n    await appRef.injector.get(Router).navigateByUrl('/b');\n    expect(viewTransitionSpy).toHaveBeenCalled();\n  });\n  it('should have the correct event order when using view transitions', async () => {\n    @Component({\n      selector: 'component-b',\n      template: `b`,\n      standalone: true,\n    })\n    class ComponentB {}\n    const res = await bootstrapApplication(App, {\n      providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())],\n    });\n    const router = res.injector.get(Router);\n    const eventLog = [] as Event[];\n    router.events.subscribe((e) => {\n      eventLog.push(e);\n    });\n    await router.navigateByUrl('/b');\n    expect(eventLog[eventLog.length - 1]).toBeInstanceOf(NavigationEnd);\n  });\n  describe('onViewTransitionCreated option', () => {\n    it('should not create a view transition if only the fragment changes', async () => {\n      @Component({\n        selector: 'test-app',\n        standalone: true,\n        template: `{{checks}}`,\n      })\n      class App {\n        checks = 0;\n        ngDoCheck() {\n          this.checks++;\n        }\n      }\n      const transitionSpy = jasmine.createSpy();\n      const appRef = await bootstrapApplication(App, {\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      });\n      const doc = appRef.injector.get(DOCUMENT);\n      if (!doc.startViewTransition) {\n        return;\n      }\n      await appRef.injector.get(Router).navigateByUrl('/a');\n      expect(transitionSpy).toHaveBeenCalled();\n    });\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM3$%AM0$0$%instInit$1",
      "label": "%AC$%AC$%dflt$%AM3$%AM0$0$%instInit$1",
      "start_line": 31,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{path: '**', component: App}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM3$%AM0$0$%instInit$2",
      "label": "%AC$%AC$%dflt$%AM3$%AM0$0$%instInit$2",
      "start_line": 33,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{skipInitialTransition: true}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$%AM0$0",
      "label": "%AC$%dflt$%AM3$%AM0$0",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      providers: [\n        provideRouter(\n          [{path: '**', component: App}],\n          withDisabledInitialNavigation(),\n          withViewTransitions({skipInitialTransition: true}),\n        ),\n      ],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM4$%AM0$3$%instInit$4",
      "label": "%AC$%AC$%dflt$%AM4$%AM0$3$%instInit$4",
      "start_line": 55,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{path: 'b', component: ComponentB}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM0$3",
      "label": "%AC$%dflt$%AM4$%AM0$3",
      "start_line": 54,
      "end_line": 54,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6",
      "start_line": 82,
      "end_line": 82,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{path: '**', component: App}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$7",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$7",
      "start_line": 84,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{onViewTransitionCreated: transitionSpy}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM6$%AM0$5",
      "label": "%AC$%dflt$%AM7$%AM6$%AM0$5",
      "start_line": 79,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import {DOCUMENT} from '@angular/common';\nimport {Component, destroyPlatform, inject} from '@angular/core';\nimport {bootstrapApplication} from '@angular/platform-browser';\nimport {withBody} from '@angular/private/testing';\nimport {\n  Event,\n  NavigationEnd,\n  provideRouter,\n  Router,\n  withDisabledInitialNavigation,\n  withViewTransitions,\n} from '@angular/router';\ndescribe('view transitions', () => {\n  if (isNode) {\n    it('are not available in node environment', () => {});\n    return;\n  }\n  beforeEach(destroyPlatform);\n  afterEach(destroyPlatform);\n  @Component({\n    selector: 'test-app',\n    standalone: true,\n    template: ``,\n  })\n  class App {}\n  beforeEach(withBody('<test-app></test-app>', () => {}));\n  it('should skip initial transition', async () => {\n    const appRef = await bootstrapApplication(App, {\n      providers: [\n        provideRouter(\n          [{path: '**', component: App}],\n          withDisabledInitialNavigation(),\n          withViewTransitions({skipInitialTransition: true}),\n        ),\n      ],\n    });\n    const doc = appRef.injector.get(DOCUMENT);\n    if (!doc.startViewTransition) {\n      return;\n    }\n    const viewTransitionSpy = spyOn(doc, 'startViewTransition').and.callThrough();\n    await appRef.injector.get(Router).navigateByUrl('/a');\n    expect(viewTransitionSpy).not.toHaveBeenCalled();\n    await appRef.injector.get(Router).navigateByUrl('/b');\n    expect(viewTransitionSpy).toHaveBeenCalled();\n  });\n  it('should have the correct event order when using view transitions', async () => {\n    @Component({\n      selector: 'component-b',\n      template: `b`,\n      standalone: true,\n    })\n    class ComponentB {}\n    const res = await bootstrapApplication(App, {\n      providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())],\n    });\n    const router = res.injector.get(Router);\n    const eventLog = [] as Event[];\n    router.events.subscribe((e) => {\n      eventLog.push(e);\n    });\n    await router.navigateByUrl('/b');\n    expect(eventLog[eventLog.length - 1]).toBeInstanceOf(NavigationEnd);\n  });\n  describe('onViewTransitionCreated option', () => {\n    it('should not create a view transition if only the fragment changes', async () => {\n      @Component({\n        selector: 'test-app',\n        standalone: true,\n        template: `{{checks}}`,\n      })\n      class App {\n        checks = 0;\n        ngDoCheck() {\n          this.checks++;\n        }\n      }\n      const transitionSpy = jasmine.createSpy();\n      const appRef = await bootstrapApplication(App, {\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      });\n      const doc = appRef.injector.get(DOCUMENT);\n      if (!doc.startViewTransition) {\n        return;\n      }\n      await appRef.injector.get(Router).navigateByUrl('/a');\n      expect(transitionSpy).toHaveBeenCalled();\n    });\n  });\n});"
}