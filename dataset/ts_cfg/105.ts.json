{
  "type": "file",
  "name": "105.ts",
  "label": "105.ts",
  "start_line": -1,
  "end_line": 114,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 79,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/105.ts: %dflt\nTAG = '[EntryAbility]'\nDOMAIN_NUMBER = 65280\nsystemLanguage = undefined\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "EntryAbility",
      "label": "EntryAbility",
      "start_line": 1,
      "end_line": 114,
      "functions": [
        {
          "type": "function",
          "name": "onCreate",
          "label": "onCreate",
          "start_line": 1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "want = parameter0: Want\nlaunchParam = parameter1: AbilityConstant.LaunchParam\nthis = this: @ts_files/105.ts: EntryAbility\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate')\nuiAbilityContext = this.<@ts_files/105.ts: EntryAbility.context>\n%0 = this.<@ts_files/105.ts: EntryAbility.context>\napplicationContext = instanceinvoke %0.<@%unk/%unk: .getApplicationContext()>()\n%1 = this.<@ts_files/105.ts: EntryAbility.context>\n%2 = %1.<@%unk/%unk: .config>\nsystemLanguage = %2.<@%unk/%unk: .language>\n%3 = 'systemLanguage is ' + systemLanguage\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %3)\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let uiAbilityContext = this.context;\n    let applicationContext = this.context.getApplicationContext();\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }"
        },
        {
          "type": "function",
          "name": "onDestroy",
          "label": "onDestroy",
          "start_line": 1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/105.ts: EntryAbility\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy')\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onDestroy(): void {\n    // 系统资源的释放、数据的保存等\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageCreate",
          "label": "onWindowStageCreate",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "windowStage = parameter0: window.WindowStage\nthis = this: @ts_files/105.ts: EntryAbility\nthis.<@ts_files/105.ts: EntryAbility.windowStage> = windowStage",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke windowStage.<@%unk/%unk: .on()>('windowStageEvent', %AM0$onWindowStageCreate)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate')\ninstanceinvoke windowStage.<@%unk/%unk: .loadContent()>('pages/Index', %AM1$onWindowStageCreate)\nreturn",
                      "start_line": 1,
                      "end_line": 79,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "exception = caughtexception: unknown\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(exception)\n%1 = 'Failed to enable the listener for window stage event changes. Cause:' + %0\ninstanceinvoke hilog.<@%unk/%unk: .error()>(DOMAIN_NUMBER, TAG, %1)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）\n    try {\n      windowStage.on('windowStageEvent', (data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (exception) {\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    };\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    // 设置UI加载\n    // Main window is created, set main page for this ability\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageDestroy",
          "label": "onWindowStageDestroy",
          "start_line": 1,
          "end_line": 85,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/105.ts: EntryAbility\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/105.ts: EntryAbility.windowStage>\nif %0 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = this.<@ts_files/105.ts: EntryAbility.windowStage>\ninstanceinvoke %1.<@%unk/%unk: .off()>('windowStageEvent')",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 79,
                          "end_line": 79,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%2 = <BusinessError>err\ncode = %2.<@%unk/%unk: .code>\n%3 = <BusinessError>err\nmessage = %3.<@%unk/%unk: .message>\n%4 = 'Failed to disable the listener for windowStageEvent. Code is ' + code\n%5 = %4 + ', message is '\n%6 = %5 + message\ninstanceinvoke hilog.<@%unk/%unk: .error()>(DOMAIN_NUMBER, TAG, %6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    // 释放UI资源\n    // 例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件\n    try {\n      if (this.windowStage) {\n        this.windowStage.off('windowStageEvent');\n      }\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);\n    };\n  }"
        },
        {
          "type": "function",
          "name": "onForeground",
          "label": "onForeground",
          "start_line": 1,
          "end_line": 101,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/105.ts: EntryAbility\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground')\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源\n    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');\n  }"
        },
        {
          "type": "function",
          "name": "onBackground",
          "label": "onBackground",
          "start_line": 1,
          "end_line": 107,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/105.ts: EntryAbility\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground')\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onBackground(): void {\n    // 释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作\n    // 例如状态保存等\n    // Ability has back to background\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');\n  }"
        },
        {
          "type": "function",
          "name": "onConfigurationUpdate",
          "label": "onConfigurationUpdate",
          "start_line": 1,
          "end_line": 114,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newConfig = parameter0: Configuration\nthis = this: @ts_files/105.ts: EntryAbility\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(newConfig)\n%1 = 'onConfigurationUpdated systemLanguage is ' + systemLanguage\n%2 = %1 + ', newConfig: '\n%3 = %2 + %0\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %3)\n%4 = newConfig.<@%unk/%unk: .language>\nif systemLanguage !== %4",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = newConfig.<@%unk/%unk: .language>\n%6 = 'systemLanguage from ' + systemLanguage\n%7 = %6 + ' changed to '\n%8 = %7 + %5\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %8)\nsystemLanguage = newConfig.<@%unk/%unk: .language>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 79,
                      "end_line": 79,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$onWindowStageCreate",
          "label": "%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 50,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: unknown\nthis = this: @ts_files/105.ts: EntryAbility\nstageEventType = data\n%0 = window.<@%unk/%unk: .WindowStageEventType>\n%1 = %0.<@%unk/%unk: .SHOWN>\nif stageEventType == %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'windowStage foreground.')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 79,
                      "end_line": 79,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = window.<@%unk/%unk: .WindowStageEventType>\n%3 = %2.<@%unk/%unk: .ACTIVE>\nif stageEventType == %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'windowStage active.')",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = window.<@%unk/%unk: .WindowStageEventType>\n%5 = %4.<@%unk/%unk: .INACTIVE>\nif stageEventType == %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'windowStage inactive.')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = window.<@%unk/%unk: .WindowStageEventType>\n%7 = %6.<@%unk/%unk: .HIDDEN>\nif stageEventType == %7",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'windowStage background.')",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      }"
        },
        {
          "type": "function",
          "name": "%AM1$onWindowStageCreate",
          "label": "%AM1$onWindowStageCreate",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\ndata = parameter1: unknown\nthis = this: @ts_files/105.ts: EntryAbility\n%0 = err.<@%unk/%unk: .code>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%2 = %1 ?? ''\ninstanceinvoke hilog.<@%unk/%unk: .error()>(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', %2)\nreturn",
                  "start_line": 1,
                  "end_line": 79,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%4 = %3 ?? ''\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', %4)\nreturn",
                  "start_line": 1,
                  "end_line": 79,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class EntryAbility extends UIAbility {\n  windowStage: window.WindowStage | undefined = undefined;\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let uiAbilityContext = this.context;\n    let applicationContext = this.context.getApplicationContext();\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }\n\n  onDestroy(): void {\n    // 系统资源的释放、数据的保存等\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）\n    try {\n      windowStage.on('windowStageEvent', (data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (exception) {\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    };\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    // 设置UI加载\n    // Main window is created, set main page for this ability\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    // 释放UI资源\n    // 例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件\n    try {\n      if (this.windowStage) {\n        this.windowStage.off('windowStageEvent');\n      }\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);\n    };\n  }\n\n  onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源\n    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // 释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作\n    // 例如状态保存等\n    // Ability has back to background\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');\n  }\n\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport window from '@ohos.window';\nimport type { BusinessError } from '@ohos.base';\nimport type { Configuration } from '@ohos.app.ability.Configuration';\n\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\nexport default class EntryAbility extends UIAbility {\n  windowStage: window.WindowStage | undefined = undefined;\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let uiAbilityContext = this.context;\n    let applicationContext = this.context.getApplicationContext();\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }\n\n  onDestroy(): void {\n    // 系统资源的释放、数据的保存等\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）\n    try {\n      windowStage.on('windowStageEvent', (data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (exception) {\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    };\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    // 设置UI加载\n    // Main window is created, set main page for this ability\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    // 释放UI资源\n    // 例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件\n    try {\n      if (this.windowStage) {\n        this.windowStage.off('windowStageEvent');\n      }\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);\n    };\n  }\n\n  onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源\n    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // 释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作\n    // 例如状态保存等\n    // Ability has back to background\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');\n  }\n\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n};\n"
}