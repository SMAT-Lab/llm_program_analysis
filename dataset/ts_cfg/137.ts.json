{
  "type": "file",
  "name": "137.ts",
  "label": "137.ts",
  "start_line": -1,
  "end_line": 62,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 62,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/137.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "bundleExecutor",
          "label": "bundleExecutor",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "options = parameter0: ReactNativeBundleOptions\ncontext = parameter1: ExecutorContext\nthis = this: @ts_files/137.ts: %dflt\n%0 = context.<@%unk/%unk: .projectsConfigurations>\n%1 = %0.<@%unk/%unk: .projects>\n%2 = context.<@%unk/%unk: .projectName>\n%3 = %1.<@%unk/%unk: .%2>\nprojectRoot = %3.<@%unk/%unk: .root>\n%4 = context.<@%unk/%unk: .root>\n%5 = options.<@%unk/%unk: .bundleOutput>\n%6 = staticinvoke <@%unk/%unk: .join()>(%4, %5)\noptions.<@%unk/%unk: .bundleOutput> = %6\n%7 = options.<@%unk/%unk: .bundleOutput>\n%8 = staticinvoke <@%unk/%unk: .dirname()>(%7)\nstaticinvoke <@%unk/%unk: .createDirectory()>(%8)\n%9 = context.<@%unk/%unk: .root>\n%10 = staticinvoke <@ts_files/137.ts: %dflt.runCliBuild(string, string, ReactNativeBundleOptions)>(%9, projectRoot, options)\n%11 = await %10\n%12 = new @ts_files/137.ts: %AC$%dflt$bundleExecutor$0\ninstanceinvoke %12.<@ts_files/137.ts: %AC$%dflt$bundleExecutor$0.constructor()>()\n%13 = yield %12\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export default async function* bundleExecutor(\n  options: ReactNativeBundleOptions,\n  context: ExecutorContext\n): AsyncGenerator<ReactNativeBundleOutput> {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  options.bundleOutput = join(context.root, options.bundleOutput);\n  createDirectory(dirname(options.bundleOutput));\n  await runCliBuild(context.root, projectRoot, options);\n  yield { success: true };\n}"
        },
        {
          "type": "function",
          "name": "runCliBuild",
          "label": "runCliBuild",
          "start_line": 1,
          "end_line": 20,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "workspaceRoot = parameter0: string\nprojectRoot = parameter1: string\noptions = parameter2: ReactNativeBundleOptions\nthis = this: @ts_files/137.ts: %dflt\n%0 = new @%unk/%unk: Promise<ChildProcess>\ninstanceinvoke %0.<@%unk/%unk: Promise.constructor()>(%AM0$runCliBuild)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function runCliBuild(\n  workspaceRoot: string,\n  projectRoot: string,\n  options: ReactNativeBundleOptions\n): Promise<ChildProcess> {\n  return new Promise<ChildProcess>((resolve, reject) => {\n    const cliOptions = createBundleOptions(options);\n    const childProcess = fork(\n      require.resolve('react-native/cli.js'),\n      ['bundle', ...cliOptions],\n      {\n        stdio: 'inherit',\n        cwd: pathResolve(workspaceRoot, projectRoot),\n        env: process.env,\n      }\n    );\n    const processExitListener = (signal?: number | NodeJS.Signals) => () => {\n      childProcess.kill(signal);\n      process.exit();\n    };\n    process.once('exit', (signal) => childProcess.kill(signal));\n    process.once('SIGTERM', processExitListener);\n    process.once('SIGINT', processExitListener);\n    process.once('SIGQUIT', processExitListener);\n    childProcess.on('error', (err) => {\n      reject(err);\n    });\n    childProcess.on('exit', (code) => {\n      if (code === 0) {\n        resolve(childProcess);\n      } else {\n        reject(code);\n      }\n    });\n  });\n}"
        },
        {
          "type": "function",
          "name": "createBundleOptions",
          "label": "createBundleOptions",
          "start_line": 1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "options = parameter0: ReactNativeBundleOptions\nthis = this: @ts_files/137.ts: %dflt\n%0 = newarray (any)[0]\n%1 = instanceinvoke Object.<@%unk/%unk: .keys()>(options)\n%2 = instanceinvoke %1.<@%unk/%unk: .reduce()>(%AM6$createBundleOptions, %0)\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function createBundleOptions(options: ReactNativeBundleOptions) {\n  return Object.keys(options).reduce((acc, _k) => {\n    const v = options[_k];\n    const k = names(_k).fileName;\n    if (v === undefined) return acc;\n    acc.push(`--${k}`, v);\n    return acc;\n  }, []);\n}"
        },
        {
          "type": "function",
          "name": "%AM2$%AM1$%AM0$runCliBuild",
          "label": "%AM2$%AM1$%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/137.ts: %dflt\ninstanceinvoke childProcess.<@%unk/%unk: .kill()>(signal)\ninstanceinvoke process.<@%unk/%unk: .exit()>()\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      childProcess.kill(signal);\n      process.exit();\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0$runCliBuild",
          "label": "%AM1$%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "signal = parameter0: number|NodeJS.Signals\nthis = this: @ts_files/137.ts: %dflt\nreturn %AM2$%AM1$%AM0$runCliBuild",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(signal?: number | NodeJS.Signals) => () => {\n      childProcess.kill(signal);\n      process.exit();\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0$runCliBuild",
          "label": "%AM3$%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "signal = parameter0: unknown\nthis = this: @ts_files/137.ts: %dflt\n%0 = instanceinvoke childProcess.<@%unk/%unk: .kill()>(signal)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(signal) => childProcess.kill(signal)"
        },
        {
          "type": "function",
          "name": "%AM4$%AM0$runCliBuild",
          "label": "%AM4$%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/137.ts: %dflt\nstaticinvoke <@%unk/%unk: .reject()>(err)\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n      reject(err);\n    }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM0$runCliBuild",
          "label": "%AM5$%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 47,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "code = parameter0: unknown\nthis = this: @ts_files/137.ts: %dflt\nif code === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .resolve()>(childProcess)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 25,
                      "end_line": 62,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .reject()>(code)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(code) => {\n      if (code === 0) {\n        resolve(childProcess);\n      } else {\n        reject(code);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM0$runCliBuild",
          "label": "%AM0$runCliBuild",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [options]\nresolve = parameter1: unknown\nreject = parameter2: unknown\noptions = %closures0.options\nthis = this: @ts_files/137.ts: %dflt\ncliOptions = staticinvoke <@ts_files/137.ts: %dflt.createBundleOptions(ReactNativeBundleOptions)>(options)\n%0 = instanceinvoke require.<@%unk/%unk: .resolve()>('react-native/cli.js')\n%1 = newarray (string|unknown)[2]\n%1[0] = 'bundle'\n%1[1] = ...cliOptions\n%2 = new @ts_files/137.ts: %AC$%dflt$%AM0$runCliBuild$1\ninstanceinvoke %2.<@ts_files/137.ts: %AC$%dflt$%AM0$runCliBuild$1.constructor()>()\nchildProcess = staticinvoke <@%unk/%unk: .fork()>(%0, %1, %2)\nprocessExitListener = %AM1$%AM0$runCliBuild\ninstanceinvoke process.<@%unk/%unk: .once()>('exit', %AM3$%AM0$runCliBuild)\ninstanceinvoke process.<@%unk/%unk: .once()>('SIGTERM', processExitListener)\ninstanceinvoke process.<@%unk/%unk: .once()>('SIGINT', processExitListener)\ninstanceinvoke process.<@%unk/%unk: .once()>('SIGQUIT', processExitListener)\ninstanceinvoke childProcess.<@%unk/%unk: .on()>('error', %AM4$%AM0$runCliBuild)\ninstanceinvoke childProcess.<@%unk/%unk: .on()>('exit', %AM5$%AM0$runCliBuild)\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(resolve, reject) => {\n    const cliOptions = createBundleOptions(options);\n    const childProcess = fork(\n      require.resolve('react-native/cli.js'),\n      ['bundle', ...cliOptions],\n      {\n        stdio: 'inherit',\n        cwd: pathResolve(workspaceRoot, projectRoot),\n        env: process.env,\n      }\n    );\n    const processExitListener = (signal?: number | NodeJS.Signals) => () => {\n      childProcess.kill(signal);\n      process.exit();\n    };\n    process.once('exit', (signal) => childProcess.kill(signal));\n    process.once('SIGTERM', processExitListener);\n    process.once('SIGINT', processExitListener);\n    process.once('SIGQUIT', processExitListener);\n    childProcess.on('error', (err) => {\n      reject(err);\n    });\n    childProcess.on('exit', (code) => {\n      if (code === 0) {\n        resolve(childProcess);\n      } else {\n        reject(code);\n      }\n    });\n  }"
        },
        {
          "type": "function",
          "name": "%AM6$createBundleOptions",
          "label": "%AM6$createBundleOptions",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [options]\nacc = parameter1: unknown\n_k = parameter2: unknown\noptions = %closures0.options\nthis = this: @ts_files/137.ts: %dflt\nv = options.<@%unk/%unk: ._k>\n%0 = staticinvoke <@%unk/%unk: .names()>(_k)\nk = %0.<@%unk/%unk: .fileName>\nif v === undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return acc",
                  "start_line": 60,
                  "end_line": 62,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = '--' + k\ninstanceinvoke acc.<@%unk/%unk: .push()>(%1, v)\nreturn acc",
                  "start_line": 1,
                  "end_line": 62,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, _k) => {\n    const v = options[_k];\n    const k = names(_k).fileName;\n    if (v === undefined) return acc;\n    acc.push(`--${k}`, v);\n    return acc;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ReactNativeBundleOutput",
      "label": "ReactNativeBundleOutput",
      "start_line": 6,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export interface ReactNativeBundleOutput {\n  success: boolean;\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$bundleExecutor$0",
      "label": "%AC$%dflt$bundleExecutor$0",
      "start_line": 18,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ success: true }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$runCliBuild$1",
      "label": "%AC$%dflt$%AM0$runCliBuild$1",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        stdio: 'inherit',\n        cwd: pathResolve(workspaceRoot, projectRoot),\n        env: process.env,\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { createDirectory } from '@nx/workspace/src/utilities/fileutils';\nimport { names, ExecutorContext } from '@nx/devkit';\nimport { dirname, join, resolve as pathResolve } from 'path';\nimport { ChildProcess, fork } from 'child_process';\nimport { ReactNativeBundleOptions } from './schema';\nexport interface ReactNativeBundleOutput {\n  success: boolean;\n}\nexport default async function* bundleExecutor(\n  options: ReactNativeBundleOptions,\n  context: ExecutorContext\n): AsyncGenerator<ReactNativeBundleOutput> {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  options.bundleOutput = join(context.root, options.bundleOutput);\n  createDirectory(dirname(options.bundleOutput));\n  await runCliBuild(context.root, projectRoot, options);\n  yield { success: true };\n}\nfunction runCliBuild(\n  workspaceRoot: string,\n  projectRoot: string,\n  options: ReactNativeBundleOptions\n): Promise<ChildProcess> {\n  return new Promise<ChildProcess>((resolve, reject) => {\n    const cliOptions = createBundleOptions(options);\n    const childProcess = fork(\n      require.resolve('react-native/cli.js'),\n      ['bundle', ...cliOptions],\n      {\n        stdio: 'inherit',\n        cwd: pathResolve(workspaceRoot, projectRoot),\n        env: process.env,\n      }\n    );\n    const processExitListener = (signal?: number | NodeJS.Signals) => () => {\n      childProcess.kill(signal);\n      process.exit();\n    };\n    process.once('exit', (signal) => childProcess.kill(signal));\n    process.once('SIGTERM', processExitListener);\n    process.once('SIGINT', processExitListener);\n    process.once('SIGQUIT', processExitListener);\n    childProcess.on('error', (err) => {\n      reject(err);\n    });\n    childProcess.on('exit', (code) => {\n      if (code === 0) {\n        resolve(childProcess);\n      } else {\n        reject(code);\n      }\n    });\n  });\n}\nfunction createBundleOptions(options: ReactNativeBundleOptions) {\n  return Object.keys(options).reduce((acc, _k) => {\n    const v = options[_k];\n    const k = names(_k).fileName;\n    if (v === undefined) return acc;\n    acc.push(`--${k}`, v);\n    return acc;\n  }, []);\n}"
}