{
  "type": "file",
  "name": "207.ts",
  "label": "207.ts",
  "start_line": -1,
  "end_line": 487,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 485,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %dflt\naddAssetsToAlbum = %AM0\ntagAssets = %AM2\nremoveTag = %AM3\naddAssetsToNewAlbum = %AM4\ndownloadAlbum = %AM5\ndownloadBlob = %AM6\ndownloadArchive = %AM7\ndownloadFile = %AM10\n%0 = new @%unk/%unk: Set\n%1 = newarray (string)[6]\n%1[0] = 'image/apng'\n%1[1] = 'image/avif'\n%1[2] = 'image/gif'\n%1[3] = 'image/jpeg'\n%1[4] = 'image/png'\n%1[5] = 'image/webp'\ninstanceinvoke %0.<@%unk/%unk: Set.constructor()>(%1)\nsupportedImageMimeTypes = %0\n%2 = navigator.<@%unk/%unk: .userAgent>\n%3 = /^((?!chrome|android).)*safari/i\nisSafari = instanceinvoke %3.<@%unk/%unk: .test()>(%2)\nif isSafari != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke supportedImageMimeTypes.<@%unk/%unk: .add()>('image/heic')\ninstanceinvoke %4.<@%unk/%unk: .add()>('image/heif')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "getAssetType = %AM13\ngetSelectedAssets = %AM14\nstackAssets = %AM18\ndeleteStack = %AM20\nkeepThisDeleteOthers = %AM24\nselectAllAssets = %AM27\ncancelMultiselect = %AM28\ntoggleArchive = %AM29\narchiveAssets = %AM30\ndelay = %AM32\ncanCopyImageToClipboard = %AM34\nimgToBlob = %AM35\nurlToBlob = %AM38\ncopyImageToClipboard = %AM39\nreturn",
                      "start_line": 1,
                      "end_line": 483,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "getFilenameExtension",
          "label": "getFilenameExtension",
          "start_line": 1,
          "end_line": 239,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "filename = parameter0: string\nthis = this: @ts_files/207.ts: %dflt\n%0 = instanceinvoke filename.<@%unk/%unk: .lastIndexOf()>('.')\nlastIndex = instanceinvoke Math.<@%unk/%unk: .max()>(0, %0)\n%1 = Number.<@%unk/%unk: .POSITIVE_INFINITY>\n%2 = lastIndex || %1\nstartIndex = %2 + 1\n%3 = instanceinvoke filename.<@%unk/%unk: .slice()>(startIndex)\n%4 = instanceinvoke %3.<@%unk/%unk: .toLowerCase()>()\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getFilenameExtension(filename: string): string {\n  const lastIndex = Math.max(0, filename.lastIndexOf('.'));\n  const startIndex = (lastIndex || Number.POSITIVE_INFINITY) + 1;\n  return filename.slice(startIndex).toLowerCase();\n}"
        },
        {
          "type": "function",
          "name": "getAssetFilename",
          "label": "getAssetFilename",
          "start_line": 1,
          "end_line": 244,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .originalPath>\nfileExtension = staticinvoke <@ts_files/207.ts: %dflt.getFilenameExtension(string)>(%0)\n%1 = asset.<@%unk/%unk: .originalFileName>\n%2 = %1 + '.'\n%3 = %2 + fileExtension\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getAssetFilename(asset: AssetResponseDto): string {\n  const fileExtension = getFilenameExtension(asset.originalPath);\n  return `${asset.originalFileName}.${fileExtension}`;\n}"
        },
        {
          "type": "function",
          "name": "isRotated90CW",
          "label": "isRotated90CW",
          "start_line": 1,
          "end_line": 248,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "orientation = parameter0: number\nthis = this: @ts_files/207.ts: %dflt\n%0 = orientation === 5\n%1 = orientation === 6\n%2 = %0 || %1\n%3 = orientation === 90\n%4 = %2 || %3\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function isRotated90CW(orientation: number) {\n  return orientation === 5 || orientation === 6 || orientation === 90;\n}"
        },
        {
          "type": "function",
          "name": "isRotated270CW",
          "label": "isRotated270CW",
          "start_line": 1,
          "end_line": 251,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "orientation = parameter0: number\nthis = this: @ts_files/207.ts: %dflt\n%0 = orientation === 7\n%1 = orientation === 8\n%2 = %0 || %1\n%3 = -90\n%4 = orientation === %3\n%5 = %2 || %4\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function isRotated270CW(orientation: number) {\n  return orientation === 7 || orientation === 8 || orientation === -90;\n}"
        },
        {
          "type": "function",
          "name": "isFlipped",
          "label": "isFlipped",
          "start_line": 1,
          "end_line": 254,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "orientation = parameter0: string|null\nthis = this: @ts_files/207.ts: %dflt\nvalue = staticinvoke <@%unk/%unk: .Number()>(orientation)\n%0 = staticinvoke <@ts_files/207.ts: %dflt.isRotated270CW(number)>(value)\n%1 = staticinvoke <@ts_files/207.ts: %dflt.isRotated90CW(number)>(value)\n%2 = %0 || %1\n%3 = value && %2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function isFlipped(orientation?: string | null) {\n  const value = Number(orientation);\n  return value && (isRotated270CW(value) || isRotated90CW(value));\n}"
        },
        {
          "type": "function",
          "name": "getFileSize",
          "label": "getFileSize",
          "start_line": 1,
          "end_line": 258,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .exifInfo>\n%1 = %0.<@%unk/%unk: .fileSizeInByte>\nsize = %1 || 0\nif size > 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = staticinvoke <@%unk/%unk: .getByteUnitString()>(size, undefined, 4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = 'Invalid Data'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getFileSize(asset: AssetResponseDto): string {\n  const size = asset.exifInfo?.fileSizeInByte || 0;\n  return size > 0 ? getByteUnitString(size, undefined, 4) : 'Invalid Data';\n}"
        },
        {
          "type": "function",
          "name": "getAssetResolution",
          "label": "getAssetResolution",
          "start_line": 1,
          "end_line": 262,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = staticinvoke <@ts_files/207.ts: %dflt.getAssetRatio(AssetResponseDto)>(asset)\nwidth = %0.<@ts_files/207.ts: %AC$%dflt$getAssetRatio$77.width>\nheight = %0.<@ts_files/207.ts: %AC$%dflt$getAssetRatio$77.height>\n%1 = width === 235\n%2 = height === 235\n%3 = %1 && %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 'Invalid Data'",
                  "start_line": 265,
                  "end_line": 265,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = width + ' x '\n%5 = %4 + height\nreturn %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getAssetResolution(asset: AssetResponseDto): string {\n  const { width, height } = getAssetRatio(asset);\n  if (width === 235 && height === 235) {\n    return 'Invalid Data';\n  }\n  return `${width} x ${height}`;\n}"
        },
        {
          "type": "function",
          "name": "getAssetRatio",
          "label": "getAssetRatio",
          "start_line": 1,
          "end_line": 269,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .exifInfo>\n%1 = %0.<@%unk/%unk: .exifImageHeight>\nheight = %1 || 235\n%2 = asset.<@%unk/%unk: .exifInfo>\n%3 = %2.<@%unk/%unk: .exifImageWidth>\nwidth = %3 || 235\n%4 = asset.<@%unk/%unk: .exifInfo>\n%5 = %4.<@%unk/%unk: .orientation>\n%6 = staticinvoke <@ts_files/207.ts: %dflt.isFlipped(string|null)>(%5)\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = newarray (boolean)[2]\n%8[0] = height\n%8[1] = width\n%7 = %8\nwidth = %7[0]\nheight = %7[1]",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = new @ts_files/207.ts: %AC$%dflt$getAssetRatio$77\ninstanceinvoke %9.<@ts_files/207.ts: %AC$%dflt$getAssetRatio$77.constructor()>()\nreturn %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getAssetRatio(asset: AssetResponseDto) {\n  let height = asset.exifInfo?.exifImageHeight || 235;\n  let width = asset.exifInfo?.exifImageWidth || 235;\n  if (isFlipped(asset.exifInfo?.orientation)) {\n    [width, height] = [height, width];\n  }\n  return { width, height };\n}"
        },
        {
          "type": "function",
          "name": "isWebCompatibleImage",
          "label": "isWebCompatibleImage",
          "start_line": 1,
          "end_line": 290,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .originalMimeType>\n%1 = !%0\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 292,
                  "end_line": 344,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = asset.<@%unk/%unk: .originalMimeType>\n%3 = instanceinvoke supportedImageMimeTypes.<@%unk/%unk: .has()>(%2)\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function isWebCompatibleImage(asset: AssetResponseDto): boolean {\n  if (!asset.originalMimeType) {\n    return false;\n  }\n  return supportedImageMimeTypes.has(asset.originalMimeType);\n}"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 47,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\nreturn success",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ success }) => success"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 39,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumId = parameter0: string\nassetIds = parameter1: string[]\nshowNotification = parameter2: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = new @ts_files/207.ts: %AC$%dflt$%AM0$0\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM0$0.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .addAssets()>(%0)\nresult = await %1\n%2 = instanceinvoke result.<@%unk/%unk: .filter()>(%AM1$%AM0)\ncount = %2.<@%unk/%unk: .length>\n$t = staticinvoke <@%unk/%unk: .get()>(t)\nif showNotification != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @ts_files/207.ts: %AC$%dflt$%AM0$2\ninstanceinvoke %3.<@ts_files/207.ts: %AC$%dflt$%AM0$2.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%3)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 60,
                      "end_line": 483,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (albumId: string, assetIds: string[], showNotification = true) => {\n  const result = await addAssets({\n    id: albumId,\n    bulkIdsDto: {\n      ids: assetIds,\n    },\n    key: getKey(),\n  });\n  const count = result.filter(({ success }) => success).length;\n  const $t = get(t);\n  if (showNotification) {\n    notificationController.show({\n      type: NotificationType.Info,\n      timeout: 5000,\n      message:\n        count > 0\n          ? $t('assets_added_to_album_count', { values: { count } })\n          : $t('assets_were_part_of_album_count', { values: { count: assetIds.length } }),\n      button: {\n        text: $t('view_album'),\n        onClick() {\n          return goto(`${AppRoute.ALBUMS}/${albumId}`);\n        },\n      },\n    });\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM2",
          "label": "%AM2",
          "start_line": 1,
          "end_line": 66,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: @ts_files/207.ts: %AC$8\nthis = this: @ts_files/207.ts: %dflt\n%0 = instanceinvoke tagIds.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke %0.<@%unk/%unk: .next()>()\n%2 = %1.<@ES2015/BuiltinClass: IteratorResult.done>\nif %2 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = %1.<@ES2015/BuiltinClass: IteratorResult.value>\ntagId = <any>%3\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM2$9\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM2$9.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .tagAllAssets()>(%4)\n%6 = await %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if showNotification != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = staticinvoke <@%unk/%unk: .getFormatter()>()\n$t = await %7\n%8 = new @ts_files/207.ts: %AC$%dflt$%AM2$11\ninstanceinvoke %8.<@ts_files/207.ts: %AC$%dflt$%AM2$11.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%8)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return assetIds",
                              "start_line": 85,
                              "end_line": 106,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async ({\n  assetIds,\n  tagIds,\n  showNotification = true,\n}: {\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}) => {\n  for (const tagId of tagIds) {\n    await tagAllAssets({ id: tagId, bulkIdsDto: { ids: assetIds } });\n  }\n  if (showNotification) {\n    const $t = await getFormatter();\n    notificationController.show({\n      message: $t('tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    });\n  }\n  return assetIds;\n}"
        },
        {
          "type": "function",
          "name": "%AM3",
          "label": "%AM3",
          "start_line": 1,
          "end_line": 87,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: @ts_files/207.ts: %AC$14\nthis = this: @ts_files/207.ts: %dflt\n%0 = instanceinvoke tagIds.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke %0.<@%unk/%unk: .next()>()\n%2 = %1.<@ES2015/BuiltinClass: IteratorResult.done>\nif %2 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = %1.<@ES2015/BuiltinClass: IteratorResult.value>\ntagId = <any>%3\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM3$15\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM3$15.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .untagAssets()>(%4)\n%6 = await %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if showNotification != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = staticinvoke <@%unk/%unk: .getFormatter()>()\n$t = await %7\n%8 = new @ts_files/207.ts: %AC$%dflt$%AM3$17\ninstanceinvoke %8.<@ts_files/207.ts: %AC$%dflt$%AM3$17.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%8)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return assetIds",
                              "start_line": 85,
                              "end_line": 106,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async ({\n  assetIds,\n  tagIds,\n  showNotification = true,\n}: {\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}) => {\n  for (const tagId of tagIds) {\n    await untagAssets({ id: tagId, bulkIdsDto: { ids: assetIds } });\n  }\n  if (showNotification) {\n    const $t = await getFormatter();\n    notificationController.show({\n      message: $t('removed_tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    });\n  }\n  return assetIds;\n}"
        },
        {
          "type": "function",
          "name": "%AM4",
          "label": "%AM4",
          "start_line": 1,
          "end_line": 108,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nassetIds = parameter1: string[]\nthis = this: @ts_files/207.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .createAlbum()>(albumName, assetIds)\nalbum = await %0\n%1 = !album\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "$t = staticinvoke <@%unk/%unk: .get()>(t)\n%2 = new @ts_files/207.ts: %AC$%dflt$%AM4$20\ninstanceinvoke %2.<@ts_files/207.ts: %AC$%dflt$%AM4$20.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%2)\nreturn album",
                  "start_line": 1,
                  "end_line": 131,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (albumName: string, assetIds: string[]) => {\n  const album = await createAlbum(albumName, assetIds);\n  if (!album) {\n    return;\n  }\n  const $t = get(t);\n  notificationController.show({\n    type: NotificationType.Info,\n    timeout: 5000,\n    component: {\n      type: FormatBoldMessage,\n      props: {\n        key: 'assets_added_to_name_count',\n        values: { count: assetIds.length, name: albumName, hasName: !!albumName },\n      },\n    },\n    button: {\n      text: $t('view_album'),\n      onClick() {\n        return goto(`${AppRoute.ALBUMS}/${album.id}`);\n      },\n    },\n  });\n  return album;\n}"
        },
        {
          "type": "function",
          "name": "%AM5",
          "label": "%AM5",
          "start_line": 1,
          "end_line": 483,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "album = parameter0: AlbumResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = album.<@%unk/%unk: .albumName>\n%1 = %0 + '.zip'\n%2 = new @ts_files/207.ts: %AC$%dflt$%AM5$25\ninstanceinvoke %2.<@ts_files/207.ts: %AC$%dflt$%AM5$25.constructor()>()\n%3 = staticinvoke <@%unk/%unk: .downloadArchive()>(%1, %2)\n%4 = await %3\nreturn",
              "start_line": 1,
              "end_line": 483,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (album: AlbumResponseDto) => {\n  await downloadArchive(`${album.albumName}.zip`, {\n    albumId: album.id,\n  });\n}"
        },
        {
          "type": "function",
          "name": "%AM6",
          "label": "%AM6",
          "start_line": 1,
          "end_line": 483,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: Blob\nfilename = parameter1: string\nthis = this: @ts_files/207.ts: %dflt\nurl = instanceinvoke URL.<@%unk/%unk: .createObjectURL()>(data)\nanchor = instanceinvoke document.<@%unk/%unk: .createElement()>('a')\nanchor.<@%unk/%unk: .href> = url\nanchor.<@%unk/%unk: .download> = filename\n%0 = document.<@%unk/%unk: .body>\ninstanceinvoke %0.<@%unk/%unk: .append()>(anchor)\ninstanceinvoke anchor.<@%unk/%unk: .click()>()\ninstanceinvoke anchor.<@%unk/%unk: .remove()>()\ninstanceinvoke URL.<@%unk/%unk: .revokeObjectURL()>(url)\nreturn",
              "start_line": 1,
              "end_line": 483,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: Blob, filename: string) => {\n  const url = URL.createObjectURL(data);\n  const anchor = document.createElement('a');\n  anchor.href = url;\n  anchor.download = filename;\n  document.body.append(anchor);\n  anchor.click();\n  anchor.remove();\n  URL.revokeObjectURL(url);\n}"
        },
        {
          "type": "function",
          "name": "%AM8$%AM7",
          "label": "%AM8$%AM7",
          "start_line": 1,
          "end_line": 151,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %dflt\n%0 = new @ts_files/207.ts: %AC$%dflt$%AM8$%AM7$27\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM8$%AM7$27.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .getDownloadInfo()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => getDownloadInfo({ downloadInfoDto: dto, key: getKey() })"
        },
        {
          "type": "function",
          "name": "%AM9$%AM7",
          "label": "%AM9$%AM7",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %dflt\n%0 = instanceinvoke downloadManager.<@%unk/%unk: .clear()>(downloadKey)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => downloadManager.clear(downloadKey)"
        },
        {
          "type": "function",
          "name": "%AM7",
          "label": "%AM7",
          "start_line": 1,
          "end_line": 483,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fileName = parameter0: string\noptions = parameter1: Omit<DownloadInfoDto,string>\nthis = this: @ts_files/207.ts: %dflt\n$preferences = staticinvoke <@%unk/%unk: .get()>(preferences)\n%0 = new @ts_files/207.ts: %AC$%dflt$%AM7$26\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM7$26.constructor()>()\ndto = %0\n%2 = staticinvoke <@%unk/%unk: .withError()>(%AM8$%AM7)\n%1 = await %2\nerror = %1[0]\ndownloadInfo = %1[1]\nif error != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "$t = staticinvoke <@%unk/%unk: .get()>(t)\n%3 = staticinvoke <@%unk/%unk: .$t()>('errors.unable_to_download_files')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %3)\nreturn",
                  "start_line": 1,
                  "end_line": 483,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = !downloadInfo\nif %4 != 0\nindex = 0",
                  "start_line": 1,
                  "end_line": 160,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 60,
                      "end_line": 483,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = downloadInfo.<@%unk/%unk: .archives>\n%6 = %5.<@%unk/%unk: .length>\nif index < %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 60,
                          "end_line": 483,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = downloadInfo.<@%unk/%unk: .archives>\narchive = %7.<@%unk/%unk: .index>\n%8 = downloadInfo.<@%unk/%unk: .archives>\n%9 = %8.<@%unk/%unk: .length>\nif %9 > 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "suffix = ''",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%13 = instanceinvoke DateTime.<@%unk/%unk: .now()>()\n%14 = instanceinvoke %13.<@%unk/%unk: .toFormat()>('yyyyLLdd_HHmmss')\n%15 = suffix + '-'\n%16 = %15 + %14\n%17 = %16 + '.zip'\narchiveName = instanceinvoke fileName.<@%unk/%unk: .replace()>('.zip', %17)\nkey = staticinvoke <@%unk/%unk: .getKey()>()\n%18 = archiveName + ' '\ndownloadKey = %18\n%19 = downloadInfo.<@%unk/%unk: .archives>\n%20 = %19.<@%unk/%unk: .length>\nif %20 > 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%21 = index + 1\n%22 = downloadInfo.<@%unk/%unk: .archives>\n%23 = %22.<@%unk/%unk: .length>\n%24 = archiveName + ' ('\n%25 = %24 + %21\n%26 = %25 + '/'\n%27 = %26 + %23\n%28 = %27 + ')'\ndownloadKey = %28",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%29 = new @%unk/%unk: AbortController\ninstanceinvoke %29.<@%unk/%unk: AbortController.constructor()>()\nabort = %29\n%30 = archive.<@%unk/%unk: .size>\ninstanceinvoke downloadManager.<@%unk/%unk: .add()>(downloadKey, %30, abort)",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%32 = new @ts_files/207.ts: %AC$%dflt$%AM7$28\ninstanceinvoke %32.<@ts_files/207.ts: %AC$%dflt$%AM7$28.constructor()>()\n%33 = staticinvoke <@%unk/%unk: .downloadRequest()>(%32)\n%31 = await %33\ndata = %31.<@%unk/%unk: .data>\nstaticinvoke <@%unk/%unk: .downloadBlob()>(data, archiveName)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "staticinvoke <@%unk/%unk: .setTimeout()>(%AM9$%AM7, 5000)\nindex = index + 1",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%10 = index + 1\n%11 = '+' + %10",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n$t = staticinvoke <@%unk/%unk: .get()>(t)\n%34 = staticinvoke <@%unk/%unk: .$t()>('errors.unable_to_download_files')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %34)\ninstanceinvoke downloadManager.<@%unk/%unk: .clear()>(downloadKey)\nreturn",
              "start_line": 1,
              "end_line": 483,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%35 = caughtexception: unknown\nstaticinvoke <@%unk/%unk: .setTimeout()>(%AM9$%AM7, 5000)\nindex = index + 1\nthrow %35",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (fileName: string, options: Omit<DownloadInfoDto, 'archiveSize'>) => {\n  const $preferences = get<UserPreferencesResponseDto | undefined>(preferences);\n  const dto = { ...options, archiveSize: $preferences?.download.archiveSize };\n  const [error, downloadInfo] = await withError(() => getDownloadInfo({ downloadInfoDto: dto, key: getKey() }));\n  if (error) {\n    const $t = get(t);\n    handleError(error, $t('errors.unable_to_download_files'));\n    return;\n  }\n  if (!downloadInfo) {\n    return;\n  }\n  for (let index = 0; index < downloadInfo.archives.length; index++) {\n    const archive = downloadInfo.archives[index];\n    const suffix = downloadInfo.archives.length > 1 ? `+${index + 1}` : '';\n    const archiveName = fileName.replace('.zip', `${suffix}-${DateTime.now().toFormat('yyyyLLdd_HHmmss')}.zip`);\n    const key = getKey();\n    let downloadKey = `${archiveName} `;\n    if (downloadInfo.archives.length > 1) {\n      downloadKey = `${archiveName} (${index + 1}/${downloadInfo.archives.length})`;\n    }\n    const abort = new AbortController();\n    downloadManager.add(downloadKey, archive.size, abort);\n    try {\n      // TODO use sdk once it supports progress events\n      const { data } = await downloadRequest({\n        method: 'POST',\n        url: getBaseUrl() + '/download/archive' + (key ? `?key=${key}` : ''),\n        data: { assetIds: archive.assetIds },\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded),\n      });\n      downloadBlob(data, archiveName);\n    } catch (error) {\n      const $t = get(t);\n      handleError(error, $t('errors.unable_to_download_files'));\n      downloadManager.clear(downloadKey);\n      return;\n    } finally {\n      setTimeout(() => downloadManager.clear(downloadKey), 5000);\n    }\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM11$%AM10",
          "label": "%AM11$%AM10",
          "start_line": 1,
          "end_line": 200,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .originalPath>\n%1 = instanceinvoke %0.<@%unk/%unk: .includes()>('encoded-video')\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(asset: AssetResponseDto) => {\n    return asset.originalPath.includes('encoded-video');\n  }"
        },
        {
          "type": "function",
          "name": "%AM12$%AM10",
          "label": "%AM12$%AM10",
          "start_line": 1,
          "end_line": 235,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %dflt\n%0 = instanceinvoke downloadManager.<@%unk/%unk: .clear()>(downloadKey)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => downloadManager.clear(downloadKey)"
        },
        {
          "type": "function",
          "name": "%AM10",
          "label": "%AM10",
          "start_line": 1,
          "end_line": 191,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n$t = staticinvoke <@%unk/%unk: .get()>(t)\n%0 = new @ts_files/207.ts: %AC$%dflt$%AM10$30\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM10$30.constructor()>()\n%1 = newarray (@ts_files/207.ts: %AC$%dflt$%AM10$30)[1]\n%1[0] = %0\nassets = %1\nisAndroidMotionVideo = %AM11$%AM10\n%2 = asset.<@%unk/%unk: .livePhotoVideoId>\nif %2 != 0\n%12 = instanceinvoke assets.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @ts_files/207.ts: %AC$%dflt$%AM10$31\ninstanceinvoke %3.<@ts_files/207.ts: %AC$%dflt$%AM10$31.constructor()>()\n%4 = staticinvoke <@%unk/%unk: .getAssetInfo()>(%3)\nmotionAsset = await %4\n%5 = ptrinvoke <@%unk/%unk: .isAndroidMotionVideo()>(motionAsset)\n%6 = !%5\n%7 = staticinvoke <@%unk/%unk: .get()>(preferences)\n%8 = %7.<@%unk/%unk: .download>\n%9 = %8.<@%unk/%unk: .includeEmbeddedVideos>\n%10 = %6 || %9\nif %10 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = new @ts_files/207.ts: %AC$%dflt$%AM10$32\ninstanceinvoke %11.<@ts_files/207.ts: %AC$%dflt$%AM10$32.constructor()>()\ninstanceinvoke assets.<@%unk/%unk: .push()>(%11)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = instanceinvoke %12.<@%unk/%unk: .next()>()\n%14 = %13.<@ES2015/BuiltinClass: IteratorResult.done>\nif %14 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%15 = %13.<@ES2015/BuiltinClass: IteratorResult.value>\n%16 = <@ts_files/207.ts: %AC$%dflt$%AM10$30>%15\nfilename = %16.<@ts_files/207.ts: %AC$%dflt$%AM10$30.filename>\nid = %16.<@ts_files/207.ts: %AC$%dflt$%AM10$30.id>\nsize = %16.<@ts_files/207.ts: %AC$%dflt$%AM10$30.size>\ndownloadKey = filename",
                              "start_line": 1,
                              "end_line": 214,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%17 = new @%unk/%unk: AbortController\ninstanceinvoke %17.<@%unk/%unk: AbortController.constructor()>()\nabort = %17\ninstanceinvoke downloadManager.<@%unk/%unk: .add()>(downloadKey, size, abort)\nkey = staticinvoke <@%unk/%unk: .getKey()>()\n%18 = new @ts_files/207.ts: %AC$%dflt$%AM10$33\ninstanceinvoke %18.<@ts_files/207.ts: %AC$%dflt$%AM10$33.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%18)\n%20 = new @ts_files/207.ts: %AC$%dflt$%AM10$36\ninstanceinvoke %20.<@ts_files/207.ts: %AC$%dflt$%AM10$36.constructor()>()\n%21 = staticinvoke <@%unk/%unk: .downloadRequest()>(%20)\n%19 = await %21\ndata = %19.<@%unk/%unk: .data>\nstaticinvoke <@%unk/%unk: .downloadBlob()>(data, filename)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "staticinvoke <@%unk/%unk: .setTimeout()>(%AM12$%AM10, 5000)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 60,
                              "end_line": 483,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%22 = new @ts_files/207.ts: %AC$%dflt$%AM10$37\ninstanceinvoke %22.<@ts_files/207.ts: %AC$%dflt$%AM10$37.constructor()>()\n%23 = staticinvoke <@%unk/%unk: .$t()>('errors.error_downloading', %22)\nstaticinvoke <@%unk/%unk: .handleError()>(error, %23)\ninstanceinvoke downloadManager.<@%unk/%unk: .clear()>(downloadKey)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%24 = caughtexception: unknown\nstaticinvoke <@%unk/%unk: .setTimeout()>(%AM12$%AM10, 5000)\nthrow %24",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (asset: AssetResponseDto) => {\n  const $t = get(t);\n  const assets = [\n    {\n      filename: asset.originalFileName,\n      id: asset.id,\n      size: asset.exifInfo?.fileSizeInByte || 0,\n    },\n  ];\n  const isAndroidMotionVideo = (asset: AssetResponseDto) => {\n    return asset.originalPath.includes('encoded-video');\n  };\n  if (asset.livePhotoVideoId) {\n    const motionAsset = await getAssetInfo({ id: asset.livePhotoVideoId, key: getKey() });\n    if (!isAndroidMotionVideo(motionAsset) || get(preferences).download.includeEmbeddedVideos) {\n      assets.push({\n        filename: motionAsset.originalFileName,\n        id: asset.livePhotoVideoId,\n        size: motionAsset.exifInfo?.fileSizeInByte || 0,\n      });\n    }\n  }\n  for (const { filename, id, size } of assets) {\n    const downloadKey = filename;\n    try {\n      const abort = new AbortController();\n      downloadManager.add(downloadKey, size, abort);\n      const key = getKey();\n      notificationController.show({\n        type: NotificationType.Info,\n        message: $t('downloading_asset_filename', { values: { filename: asset.originalFileName } }),\n      });\n      // TODO use sdk once it supports progress events\n      const { data } = await downloadRequest({\n        method: 'GET',\n        url: getBaseUrl() + `/assets/${id}/original` + (key ? `?key=${key}` : ''),\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded, event.total),\n      });\n      downloadBlob(data, filename);\n    } catch (error) {\n      handleError(error, $t('errors.error_downloading', { values: { filename } }));\n      downloadManager.clear(downloadKey);\n    } finally {\n      setTimeout(() => downloadManager.clear(downloadKey), 5000);\n    }\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM13",
          "label": "%AM13",
          "start_line": 1,
          "end_line": 296,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "type = parameter0: AssetTypeEnum\nthis = this: @ts_files/207.ts: %dflt\nif type == 'IMAGE'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 'Photo'",
                  "start_line": 299,
                  "end_line": 299,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if type == 'VIDEO'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return 'Video'",
                      "start_line": 302,
                      "end_line": 302,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return 'Asset'",
                      "start_line": 305,
                      "end_line": 305,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(type: AssetTypeEnum) => {\n  switch (type) {\n    case 'IMAGE': {\n      return 'Photo';\n    }\n    case 'VIDEO': {\n      return 'Video';\n    }\n    default: {\n      return 'Asset';\n    }\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM15$%AM14",
          "label": "%AM15$%AM14",
          "start_line": 1,
          "end_line": 310,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "a = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = a.<@%unk/%unk: .id>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(a) => a.id"
        },
        {
          "type": "function",
          "name": "%AM16$%AM14",
          "label": "%AM16$%AM14",
          "start_line": 1,
          "end_line": 310,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "a = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = a.<@%unk/%unk: .ownerId>\n%1 = user.<@%unk/%unk: .id>\n%2 = %0 === %1\n%3 = user && %2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(a) => user && a.ownerId === user.id"
        },
        {
          "type": "function",
          "name": "%AM17$%AM14",
          "label": "%AM17$%AM14",
          "start_line": 1,
          "end_line": 311,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "a = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = a.<@%unk/%unk: .ownerId>\n%1 = user.<@%unk/%unk: .id>\n%2 = %0 !== %1\n%3 = user && %2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(a) => user && a.ownerId !== user.id"
        },
        {
          "type": "function",
          "name": "%AM14",
          "label": "%AM14",
          "start_line": 1,
          "end_line": 309,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "assets = parameter0: Set<AssetResponseDto>\nuser = parameter1: UserResponseDto|null\nthis = this: @ts_files/207.ts: %dflt\n%0 = newarray (unknown)[1]\n%0[0] = ...assets\n%1 = instanceinvoke %0.<@%unk/%unk: .filter()>(%AM16$%AM14)\nids = instanceinvoke %1.<@%unk/%unk: .map()>(%AM15$%AM14)\n%2 = newarray (unknown)[1]\n%2[0] = ...assets\n%3 = instanceinvoke %2.<@%unk/%unk: .filter()>(%AM17$%AM14)\nnumberOfIssues = %3.<@ES2015/BuiltinClass: RegExp.length>\nif numberOfIssues > 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "$t = staticinvoke <@%unk/%unk: .get()>(t)\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM14$39\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM14$39.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return ids",
                      "start_line": 319,
                      "end_line": 454,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(assets: Set<AssetResponseDto>, user: UserResponseDto | null): string[] => {\n  const ids = [...assets].filter((a) => user && a.ownerId === user.id).map((a) => a.id);\n  const numberOfIssues = [...assets].filter((a) => user && a.ownerId !== user.id).length;\n  if (numberOfIssues > 0) {\n    const $t = get(t);\n    notificationController.show({\n      message: $t('errors.cant_change_metadata_assets_count', { values: { count: numberOfIssues } }),\n      type: NotificationType.Warning,\n    });\n  }\n  return ids;\n}"
        },
        {
          "type": "function",
          "name": "%AM19$%AM18",
          "label": "%AM19$%AM18",
          "start_line": 1,
          "end_line": 341,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .id>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(asset) => asset.id"
        },
        {
          "type": "function",
          "name": "%AM18",
          "label": "%AM18",
          "start_line": 1,
          "end_line": 344,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "assets = parameter0: AssetResponseDto[]\nshowNotification = parameter1: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = assets.<@%unk/%unk: .length>\nif %0 < 2",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 292,
                  "end_line": 344,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "$t = staticinvoke <@%unk/%unk: .get()>(t)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = new @ts_files/207.ts: %AC$%dflt$%AM18$42\ninstanceinvoke %1.<@ts_files/207.ts: %AC$%dflt$%AM18$42.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .createStack()>(%1)\nstack = await %2\nif showNotification != 0\n%4 = instanceinvoke assets.<@%unk/%unk: .entries()>()\n%5 = instanceinvoke %4.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = new @ts_files/207.ts: %AC$%dflt$%AM18$44\ninstanceinvoke %3.<@ts_files/207.ts: %AC$%dflt$%AM18$44.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%3)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%6 = instanceinvoke %5.<@%unk/%unk: .next()>()\n%7 = %6.<@ES2015/BuiltinClass: IteratorResult.done>\nif %7 == true",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%12 = instanceinvoke assets.<@%unk/%unk: .slice()>(1)\n%13 = instanceinvoke %12.<@%unk/%unk: .map()>(%AM19$%AM18)\nreturn %13",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%8 = %6.<@ES2015/BuiltinClass: IteratorResult.value>\n%9 = <@ts_files/207.ts: %AC$%dflt$%AM10$30>%8\nindex = %9[0]\nasset = %9[1]\nif index === 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%10 = new @ts_files/207.ts: %AC$%dflt$%AM18$48\ninstanceinvoke %10.<@ts_files/207.ts: %AC$%dflt$%AM18$48.constructor()>()\n%11 = %10",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "asset.<@%unk/%unk: .stack> = %11",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%11 = null",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%14 = staticinvoke <@%unk/%unk: .$t()>('errors.failed_to_stack_assets')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %14)\nreturn false",
              "start_line": 1,
              "end_line": 344,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (assets: AssetResponseDto[], showNotification = true) => {\n  if (assets.length < 2) {\n    return false;\n  }\n  const $t = get(t);\n  try {\n    const stack = await createStack({ stackCreateDto: { assetIds: assets.map(({ id }) => id) } });\n    if (showNotification) {\n      notificationController.show({\n        message: $t('stacked_assets_count', { values: { count: stack.assets.length } }),\n        type: NotificationType.Info,\n        button: {\n          text: $t('view_stack'),\n          onClick: () => assetViewingStore.setAssetId(stack.primaryAssetId),\n        },\n      });\n    }\n    for (const [index, asset] of assets.entries()) {\n      asset.stack = index === 0 ? { id: stack.id, assetCount: stack.assets.length, primaryAssetId: asset.id } : null;\n    }\n    return assets.slice(1).map((asset) => asset.id);\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_stack_assets'));\n    return false;\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM21$%AM20",
          "label": "%AM21$%AM20",
          "start_line": 1,
          "end_line": 354,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = new @ts_files/207.ts: %AC$%dflt$%AM21$%AM20$49\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM21$%AM20$49.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .getStack()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(id) => getStack({ id })"
        },
        {
          "type": "function",
          "name": "%AM22$%AM20",
          "label": "%AM22$%AM20",
          "start_line": 1,
          "end_line": 355,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "sum = parameter0: unknown\nstack = parameter1: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = stack.<@%unk/%unk: .assets>\n%1 = %0.<@%unk/%unk: .length>\n%2 = sum + %1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(sum, stack) => sum + stack.assets.length"
        },
        {
          "type": "function",
          "name": "%AM23$%AM20",
          "label": "%AM23$%AM20",
          "start_line": 1,
          "end_line": 361,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "stack = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = stack.<@%unk/%unk: .assets>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(stack) => stack.assets"
        },
        {
          "type": "function",
          "name": "%AM20",
          "label": "%AM20",
          "start_line": 1,
          "end_line": 347,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "stackIds = parameter0: string[]\nthis = this: @ts_files/207.ts: %dflt\n%0 = newarray (unknown)[1]\n%0[0] = ...new Set(stackIds)\nids = %0\n%1 = ids.<@%unk/%unk: .length>\nif %1 === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "$t = staticinvoke <@%unk/%unk: .get()>(t)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = instanceinvoke ids.<@%unk/%unk: .map()>(%AM21$%AM20)\n%3 = instanceinvoke Promise.<@%unk/%unk: .all()>(%2)\nstacks = await %3\ncount = instanceinvoke stacks.<@%unk/%unk: .reduce()>(%AM22$%AM20, 0)\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM20$50\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM20$50.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .deleteStacks()>(%4)\n%6 = await %5\n%7 = new @ts_files/207.ts: %AC$%dflt$%AM20$52\ninstanceinvoke %7.<@ts_files/207.ts: %AC$%dflt$%AM20$52.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%7)\nassets = instanceinvoke stacks.<@%unk/%unk: .flatMap()>(%AM23$%AM20)\n%8 = instanceinvoke assets.<@%unk/%unk: .iterator()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = instanceinvoke %8.<@%unk/%unk: .next()>()\n%10 = %9.<@ES2015/BuiltinClass: IteratorResult.done>\nif %10 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%11 = %9.<@ES2015/BuiltinClass: IteratorResult.value>\nasset = <@ts_files/207.ts: %AC$%dflt$%AM10$30>%11\nasset.<@ts_files/207.ts: %AC$%dflt$%AM10$30.stack> = null",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return assets",
                              "start_line": 341,
                              "end_line": 365,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%12 = staticinvoke <@%unk/%unk: .$t()>('errors.failed_to_unstack_assets')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (stackIds: string[]) => {\n  const ids = [...new Set(stackIds)];\n  if (ids.length === 0) {\n    return;\n  }\n  const $t = get(t);\n  try {\n    const stacks = await Promise.all(ids.map((id) => getStack({ id })));\n    const count = stacks.reduce((sum, stack) => sum + stack.assets.length, 0);\n    await deleteStacks({ bulkIdsDto: { ids: [...ids] } });\n    notificationController.show({\n      type: NotificationType.Info,\n      message: $t('unstacked_assets_count', { values: { count } }),\n    });\n    const assets = stacks.flatMap((stack) => stack.assets);\n    for (const asset of assets) {\n      asset.stack = null;\n    }\n    return assets;\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_unstack_assets'));\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM25$%AM24",
          "label": "%AM25$%AM24",
          "start_line": 1,
          "end_line": 373,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .id>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(asset) => asset.id"
        },
        {
          "type": "function",
          "name": "%AM26$%AM24",
          "label": "%AM26$%AM24",
          "start_line": 1,
          "end_line": 373,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = asset.<@%unk/%unk: .id>\n%1 = keepAsset.<@%unk/%unk: .id>\n%2 = %0 !== %1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(asset) => asset.id !== keepAsset.id"
        },
        {
          "type": "function",
          "name": "%AM24",
          "label": "%AM24",
          "start_line": 1,
          "end_line": 370,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "keepAsset = parameter0: AssetResponseDto\nstack = parameter1: StackResponseDto\nthis = this: @ts_files/207.ts: %dflt\n$t = staticinvoke <@%unk/%unk: .get()>(t)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = stack.<@%unk/%unk: .assets>\n%1 = instanceinvoke %0.<@%unk/%unk: .filter()>(%AM26$%AM24)\nassetsToDeleteIds = instanceinvoke %1.<@%unk/%unk: .map()>(%AM25$%AM24)\n%2 = new @ts_files/207.ts: %AC$%dflt$%AM24$55\ninstanceinvoke %2.<@ts_files/207.ts: %AC$%dflt$%AM24$55.constructor()>()\n%3 = staticinvoke <@%unk/%unk: .deleteAssets()>(%2)\n%4 = await %3\n%5 = new @ts_files/207.ts: %AC$%dflt$%AM24$57\ninstanceinvoke %5.<@ts_files/207.ts: %AC$%dflt$%AM24$57.constructor()>()\n%6 = staticinvoke <@%unk/%unk: .deleteStacks()>(%5)\n%7 = await %6\n%8 = new @ts_files/207.ts: %AC$%dflt$%AM24$59\ninstanceinvoke %8.<@ts_files/207.ts: %AC$%dflt$%AM24$59.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%8)\nkeepAsset.<@%unk/%unk: .stack> = null\nreturn keepAsset",
                  "start_line": 1,
                  "end_line": 381,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%9 = staticinvoke <@%unk/%unk: .$t()>('errors.failed_to_keep_this_delete_others')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %9)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (keepAsset: AssetResponseDto, stack: StackResponseDto) => {\n  const $t = get(t);\n  try {\n    const assetsToDeleteIds = stack.assets.filter((asset) => asset.id !== keepAsset.id).map((asset) => asset.id);\n    await deleteAssets({ assetBulkDeleteDto: { ids: assetsToDeleteIds } });\n    await deleteStacks({ bulkIdsDto: { ids: [stack.id] } });\n    notificationController.show({\n      type: NotificationType.Info,\n      message: $t('kept_this_deleted_others', { values: { count: assetsToDeleteIds.length } }),\n    });\n    keepAsset.stack = null;\n    return keepAsset;\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_keep_this_delete_others'));\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM27",
          "label": "%AM27",
          "start_line": 1,
          "end_line": 386,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "assetStore = parameter0: AssetStore\nassetInteractionStore = parameter1: AssetInteractionStore\nthis = this: @ts_files/207.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .get()>(isSelectingAllAssets)\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 60,
                  "end_line": 483,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke isSelectingAllAssets.<@%unk/%unk: .set()>(true)\n%1 = assetStore.<@%unk/%unk: .buckets>\n%2 = instanceinvoke %1.<@%unk/%unk: .iterator()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = instanceinvoke %2.<@%unk/%unk: .next()>()\n%4 = %3.<@ES2015/BuiltinClass: IteratorResult.done>\nif %4 == true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = %3.<@ES2015/BuiltinClass: IteratorResult.value>\nbucket = <string>%5\n%6 = bucket.<@%unk/%unk: .bucketDate>\n%7 = instanceinvoke assetStore.<@%unk/%unk: .loadBucket()>(%6)\n%8 = await %7\n%9 = staticinvoke <@%unk/%unk: .get()>(isSelectingAllAssets)\n%10 = !%9\nif %10 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 60,
                              "end_line": 483,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%11 = bucket.<@%unk/%unk: .assets>\ninstanceinvoke assetInteractionStore.<@%unk/%unk: .selectAssets()>(%11)\n%12 = staticinvoke <@%unk/%unk: .delay()>(0)\n%13 = await %12",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n$t = staticinvoke <@%unk/%unk: .get()>(t)\n%14 = staticinvoke <@%unk/%unk: .$t()>('errors.error_selecting_all_assets')\nstaticinvoke <@%unk/%unk: .handleError()>(error, %14)\ninstanceinvoke isSelectingAllAssets.<@%unk/%unk: .set()>(false)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (assetStore: AssetStore, assetInteractionStore: AssetInteractionStore) => {\n  if (get(isSelectingAllAssets)) {\n    // Selection is already ongoing\n    return;\n  }\n  isSelectingAllAssets.set(true);\n  try {\n    for (const bucket of assetStore.buckets) {\n      await assetStore.loadBucket(bucket.bucketDate);\n      if (!get(isSelectingAllAssets)) {\n        break; // Cancelled\n      }\n      assetInteractionStore.selectAssets(bucket.assets);\n      // We use setTimeout to allow the UI to update. Otherwise, this may\n      // cause a long delay between the start of 'select all' and the\n      // effective update of the UI, depending on the number of assets\n      // to select\n      await delay(0);\n    }\n  } catch (error) {\n    const $t = get(t);\n    handleError(error, $t('errors.error_selecting_all_assets'));\n    isSelectingAllAssets.set(false);\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM28",
          "label": "%AM28",
          "start_line": 1,
          "end_line": 483,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "assetInteractionStore = parameter0: AssetInteractionStore\nthis = this: @ts_files/207.ts: %dflt\ninstanceinvoke isSelectingAllAssets.<@%unk/%unk: .set()>(false)\ninstanceinvoke assetInteractionStore.<@%unk/%unk: .clearMultiselect()>()\nreturn",
              "start_line": 1,
              "end_line": 483,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(assetInteractionStore: AssetInteractionStore) => {\n  isSelectingAllAssets.set(false);\n  assetInteractionStore.clearMultiselect();\n}"
        },
        {
          "type": "function",
          "name": "%AM29",
          "label": "%AM29",
          "start_line": 1,
          "end_line": 415,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "asset = parameter0: AssetResponseDto\nthis = this: @ts_files/207.ts: %dflt\n$t = staticinvoke <@%unk/%unk: .get()>(t)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/207.ts: %AC$%dflt$%AM29$62\ninstanceinvoke %0.<@ts_files/207.ts: %AC$%dflt$%AM29$62.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .updateAsset()>(%0)\ndata = await %1\n%2 = data['isArchived']\nasset.<@%unk/%unk: .isArchived> = %2\n%3 = new @ts_files/207.ts: %AC$%dflt$%AM29$64\ninstanceinvoke %3.<@ts_files/207.ts: %AC$%dflt$%AM29$64.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%3)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return asset",
                      "start_line": 85,
                      "end_line": 432,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM29$65\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM29$65.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .$t()>('errors.unable_to_add_remove_archive', %4)\nstaticinvoke <@%unk/%unk: .handleError()>(error, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (asset: AssetResponseDto) => {\n  const $t = get(t);\n  try {\n    const data = await updateAsset({\n      id: asset.id,\n      updateAssetDto: {\n        isArchived: !asset.isArchived,\n      },\n    });\n    asset.isArchived = data.isArchived;\n    notificationController.show({\n      type: NotificationType.Info,\n      message: asset.isArchived ? $t(`added_to_archive`) : $t(`removed_from_archive`),\n    });\n  } catch (error) {\n    handleError(error, $t('errors.unable_to_add_remove_archive', { values: { archived: asset.isArchived } }));\n  }\n  return asset;\n}"
        },
        {
          "type": "function",
          "name": "%AM31$%AM30",
          "label": "%AM31$%AM30",
          "start_line": 1,
          "end_line": 454,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\nreturn id",
              "start_line": 1,
              "end_line": 454,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ id }) => id"
        },
        {
          "type": "function",
          "name": "%AM30",
          "label": "%AM30",
          "start_line": 1,
          "end_line": 434,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "assets = parameter0: AssetResponseDto[]\narchive = parameter1: boolean\nthis = this: @ts_files/207.ts: %dflt\nisArchived = archive\nids = instanceinvoke assets.<@%unk/%unk: .map()>(%AM31$%AM30)\n$t = staticinvoke <@%unk/%unk: .get()>(t)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = ids.<@%unk/%unk: .length>\nif %0 > 0\n%4 = instanceinvoke assets.<@%unk/%unk: .iterator()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = new @ts_files/207.ts: %AC$%dflt$%AM30$67\ninstanceinvoke %1.<@ts_files/207.ts: %AC$%dflt$%AM30$67.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .updateAssets()>(%1)\n%3 = await %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = instanceinvoke %4.<@%unk/%unk: .next()>()\n%6 = %5.<@ES2015/BuiltinClass: IteratorResult.done>\nif %6 == true",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%7 = %5.<@ES2015/BuiltinClass: IteratorResult.value>\nasset = <unknown>%7\nasset.<@%unk/%unk: .isArchived> = isArchived",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = new @ts_files/207.ts: %AC$%dflt$%AM30$69\ninstanceinvoke %8.<@ts_files/207.ts: %AC$%dflt$%AM30$69.constructor()>()\ninstanceinvoke notificationController.<@%unk/%unk: .show()>(%8)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return ids",
                                  "start_line": 319,
                                  "end_line": 454,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%9 = new @ts_files/207.ts: %AC$%dflt$%AM30$74\ninstanceinvoke %9.<@ts_files/207.ts: %AC$%dflt$%AM30$74.constructor()>()\n%10 = staticinvoke <@%unk/%unk: .$t()>('errors.unable_to_archive_unarchive', %9)\nstaticinvoke <@%unk/%unk: .handleError()>(error, %10)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (assets: AssetResponseDto[], archive: boolean) => {\n  const isArchived = archive;\n  const ids = assets.map(({ id }) => id);\n  const $t = get(t);\n  try {\n    if (ids.length > 0) {\n      await updateAssets({ assetBulkUpdateDto: { ids, isArchived } });\n    }\n    for (const asset of assets) {\n      asset.isArchived = isArchived;\n    }\n    notificationController.show({\n      message: isArchived\n        ? $t('archived_count', { values: { count: ids.length } })\n        : $t('unarchived_count', { values: { count: ids.length } }),\n      type: NotificationType.Info,\n    });\n  } catch (error) {\n    handleError(error, $t('errors.unable_to_archive_unarchive', { values: { archived: isArchived } }));\n  }\n  return ids;\n}"
        },
        {
          "type": "function",
          "name": "%AM33$%AM32",
          "label": "%AM33$%AM32",
          "start_line": 1,
          "end_line": 457,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "resolve = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .setTimeout()>(resolve, ms)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(resolve) => setTimeout(resolve, ms)"
        },
        {
          "type": "function",
          "name": "%AM32",
          "label": "%AM32",
          "start_line": 1,
          "end_line": 456,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ms = parameter0: number\nthis = this: @ts_files/207.ts: %dflt\n%0 = new @%unk/%unk: Promise\ninstanceinvoke %0.<@%unk/%unk: Promise.constructor()>(%AM33$%AM32)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"
        },
        {
          "type": "function",
          "name": "%AM34",
          "label": "%AM34",
          "start_line": 1,
          "end_line": 459,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %dflt\n%0 = navigator.<@%unk/%unk: .clipboard>\n%1 = window.<@%unk/%unk: .ClipboardItem>\n%2 = %0 && %1\n%3 = !%2\n%4 = !%3\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): boolean => {\n  return !!(navigator.clipboard && window.ClipboardItem);\n}"
        },
        {
          "type": "function",
          "name": "%AM37$%AM36$%AM35",
          "label": "%AM37$%AM36$%AM35",
          "start_line": 1,
          "end_line": 470,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "blob = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\nif blob != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .resolve()>(blob)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 60,
                      "end_line": 483,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @%unk/%unk: Error\ninstanceinvoke %0.<@%unk/%unk: Error.constructor()>('Canvas conversion to Blob failed')\nthrow %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          throw new Error('Canvas conversion to Blob failed');\n        }\n      }"
        },
        {
          "type": "function",
          "name": "%AM36$%AM35",
          "label": "%AM36$%AM35",
          "start_line": 1,
          "end_line": 483,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "resolve = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\ninstanceinvoke canvas.<@%unk/%unk: .toBlob()>(%AM37$%AM36$%AM35)\nreturn",
              "start_line": 1,
              "end_line": 483,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(resolve) => {\n      canvas.toBlob((blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          throw new Error('Canvas conversion to Blob failed');\n        }\n      });\n    }"
        },
        {
          "type": "function",
          "name": "%AM35",
          "label": "%AM35",
          "start_line": 1,
          "end_line": 462,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "imageElement = parameter0: HTMLImageElement\nthis = this: @ts_files/207.ts: %dflt\ncanvas = instanceinvoke document.<@%unk/%unk: .createElement()>('canvas')\ncontext = instanceinvoke canvas.<@%unk/%unk: .getContext()>('2d')\n%0 = imageElement.<@%unk/%unk: .naturalWidth>\ncanvas.<@%unk/%unk: .width> = %0\n%1 = imageElement.<@%unk/%unk: .naturalHeight>\ncanvas.<@%unk/%unk: .height> = %1\nif context != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke context.<@%unk/%unk: .drawImage()>(imageElement, 0, 0)\n%2 = new @%unk/%unk: Promise<Blob>\ninstanceinvoke %2.<@%unk/%unk: Promise.constructor()>(%AM36$%AM35)\nreturn await %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Error\ninstanceinvoke %3.<@%unk/%unk: Error.constructor()>('Canvas context is null')\nthrow %3\nreturn",
                  "start_line": 1,
                  "end_line": 483,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (imageElement: HTMLImageElement) => {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = imageElement.naturalWidth;\n  canvas.height = imageElement.naturalHeight;\n  if (context) {\n    context.drawImage(imageElement, 0, 0);\n    return await new Promise<Blob>((resolve) => {\n      canvas.toBlob((blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          throw new Error('Canvas conversion to Blob failed');\n        }\n      });\n    });\n  }\n  throw new Error('Canvas context is null');\n}"
        },
        {
          "type": "function",
          "name": "%AM38",
          "label": "%AM38",
          "start_line": 1,
          "end_line": 481,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "imageSource = parameter0: string\nthis = this: @ts_files/207.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .fetch()>(imageSource)\nresponse = await %0\n%1 = instanceinvoke response.<@%unk/%unk: .blob()>()\nreturn await %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (imageSource: string) => {\n  const response = await fetch(imageSource);\n  return await response.blob();\n}"
        },
        {
          "type": "function",
          "name": "%AM39",
          "label": "%AM39",
          "start_line": 1,
          "end_line": 485,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "source = parameter0: HTMLImageElement|string\nthis = this: @ts_files/207.ts: %dflt\nif source instanceof HTMLImageElement != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = staticinvoke <@%unk/%unk: .imgToBlob()>(source)\nblob = await %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = new @%unk/%unk: ClipboardItem\n%4 = new @ts_files/207.ts: %AC$%dflt$%AM39$76\ninstanceinvoke %4.<@ts_files/207.ts: %AC$%dflt$%AM39$76.constructor()>()\ninstanceinvoke %3.<@%unk/%unk: ClipboardItem.constructor()>(%4)\n%5 = newarray (@%unk/%unk: ClipboardItem)[1]\n%5[0] = %3\n%6 = navigator.<@%unk/%unk: .clipboard>\n%7 = instanceinvoke %6.<@%unk/%unk: .write()>(%5)\n%8 = await %7\nreturn",
                      "start_line": 1,
                      "end_line": 483,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = staticinvoke <@%unk/%unk: .urlToBlob()>(source)\nblob = await %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (source: HTMLImageElement | string) => {\n  const blob = source instanceof HTMLImageElement ? await imgToBlob(source) : await urlToBlob(source);\n  await navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]);\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM0$0$%instInit$1",
      "label": "%AC$%AC$%dflt$%AM0$0$%instInit$1",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      ids: assetIds,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$0",
      "label": "%AC$%dflt$%AM0$0",
      "start_line": 40,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    id: albumId,\n    bulkIdsDto: {\n      ids: assetIds,\n    },\n    key: getKey(),\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM0$2$%instInit$3$%instInit$4",
      "label": "%AC$%AC$%AC$%dflt$%AM0$2$%instInit$3$%instInit$4",
      "start_line": 55,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM0$2$%instInit$3",
      "label": "%AC$%AC$%dflt$%AM0$2$%instInit$3",
      "start_line": 55,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM0$2$%instInit$5$%instInit$6",
      "label": "%AC$%AC$%AC$%dflt$%AM0$2$%instInit$5$%instInit$6",
      "start_line": 56,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: assetIds.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM0$2$%instInit$5",
      "label": "%AC$%AC$%dflt$%AM0$2$%instInit$5",
      "start_line": 56,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: assetIds.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM0$2$%instInit$7",
      "label": "%AC$%AC$%dflt$%AM0$2$%instInit$7",
      "start_line": 1,
      "end_line": 59,
      "functions": [
        {
          "type": "function",
          "name": "onClick",
          "label": "onClick",
          "start_line": 1,
          "end_line": 59,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %AC$%AC$%dflt$%AM0$2$%instInit$7\n%0 = AppRoute.<@%unk/%unk: .ALBUMS>\n%1 = %0 + '/'\n%2 = %1 + albumId\n%3 = staticinvoke <@%unk/%unk: .goto()>(%2)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onClick() {\n          return goto(`${AppRoute.ALBUMS}/${albumId}`);\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        text: $t('view_album'),\n        onClick() {\n          return goto(`${AppRoute.ALBUMS}/${albumId}`);\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$2",
      "label": "%AC$%dflt$%AM0$2",
      "start_line": 50,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: NotificationType.Info,\n      timeout: 5000,\n      message:\n        count > 0\n          ? $t('assets_added_to_album_count', { values: { count } })\n          : $t('assets_were_part_of_album_count', { values: { count: assetIds.length } }),\n      button: {\n        text: $t('view_album'),\n        onClick() {\n          return goto(`${AppRoute.ALBUMS}/${albumId}`);\n        },\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$8",
      "label": "%AC$8",
      "start_line": 70,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM2$9$%instInit$10",
      "label": "%AC$%AC$%dflt$%AM2$9$%instInit$10",
      "start_line": 76,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids: assetIds }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$9",
      "label": "%AC$%dflt$%AM2$9",
      "start_line": 76,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: tagId, bulkIdsDto: { ids: assetIds } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM2$11$%instInit$12$%instInit$13",
      "label": "%AC$%AC$%AC$%dflt$%AM2$11$%instInit$12$%instInit$13",
      "start_line": 81,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: assetIds.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM2$11$%instInit$12",
      "label": "%AC$%AC$%dflt$%AM2$11$%instInit$12",
      "start_line": 81,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: assetIds.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$11",
      "label": "%AC$%dflt$%AM2$11",
      "start_line": 80,
      "end_line": 80,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      message: $t('tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$14",
      "label": "%AC$14",
      "start_line": 91,
      "end_line": 91,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM3$15$%instInit$16",
      "label": "%AC$%AC$%dflt$%AM3$15$%instInit$16",
      "start_line": 97,
      "end_line": 97,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids: assetIds }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$15",
      "label": "%AC$%dflt$%AM3$15",
      "start_line": 97,
      "end_line": 97,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: tagId, bulkIdsDto: { ids: assetIds } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM3$17$%instInit$18$%instInit$19",
      "label": "%AC$%AC$%AC$%dflt$%AM3$17$%instInit$18$%instInit$19",
      "start_line": 102,
      "end_line": 102,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: assetIds.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM3$17$%instInit$18",
      "label": "%AC$%AC$%dflt$%AM3$17$%instInit$18",
      "start_line": 102,
      "end_line": 102,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: assetIds.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$17",
      "label": "%AC$%dflt$%AM3$17",
      "start_line": 101,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      message: $t('removed_tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM4$20$%instInit$21$%instInit$22$%instInit$23",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM4$20$%instInit$21$%instInit$22$%instInit$23",
      "start_line": 121,
      "end_line": 121,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: assetIds.length, name: albumName, hasName: !!albumName }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM4$20$%instInit$21$%instInit$22",
      "label": "%AC$%AC$%AC$%dflt$%AM4$20$%instInit$21$%instInit$22",
      "start_line": 119,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        key: 'assets_added_to_name_count',\n        values: { count: assetIds.length, name: albumName, hasName: !!albumName },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM4$20$%instInit$21",
      "label": "%AC$%AC$%dflt$%AM4$20$%instInit$21",
      "start_line": 117,
      "end_line": 117,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: FormatBoldMessage,\n      props: {\n        key: 'assets_added_to_name_count',\n        values: { count: assetIds.length, name: albumName, hasName: !!albumName },\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM4$20$%instInit$24",
      "label": "%AC$%AC$%dflt$%AM4$20$%instInit$24",
      "start_line": 1,
      "end_line": 126,
      "functions": [
        {
          "type": "function",
          "name": "onClick",
          "label": "onClick",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %AC$%AC$%dflt$%AM4$20$%instInit$24\n%0 = AppRoute.<@%unk/%unk: .ALBUMS>\n%1 = album.<@%unk/%unk: .id>\n%2 = %0 + '/'\n%3 = %2 + %1\n%4 = staticinvoke <@%unk/%unk: .goto()>(%3)\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onClick() {\n        return goto(`${AppRoute.ALBUMS}/${album.id}`);\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      text: $t('view_album'),\n      onClick() {\n        return goto(`${AppRoute.ALBUMS}/${album.id}`);\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$20",
      "label": "%AC$%dflt$%AM4$20",
      "start_line": 114,
      "end_line": 114,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    type: NotificationType.Info,\n    timeout: 5000,\n    component: {\n      type: FormatBoldMessage,\n      props: {\n        key: 'assets_added_to_name_count',\n        values: { count: assetIds.length, name: albumName, hasName: !!albumName },\n      },\n    },\n    button: {\n      text: $t('view_album'),\n      onClick() {\n        return goto(`${AppRoute.ALBUMS}/${album.id}`);\n      },\n    },\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM5$25",
      "label": "%AC$%dflt$%AM5$25",
      "start_line": 134,
      "end_line": 134,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    albumId: album.id,\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$26",
      "label": "%AC$%dflt$%AM7$26",
      "start_line": 150,
      "end_line": 150,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...options, archiveSize: $preferences?.download.archiveSize }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM7$27",
      "label": "%AC$%dflt$%AM8$%AM7$27",
      "start_line": 151,
      "end_line": 151,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ downloadInfoDto: dto, key: getKey() }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$28$%instInit$29",
      "label": "%AC$%AC$%dflt$%AM7$28$%instInit$29",
      "start_line": 176,
      "end_line": 176,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ assetIds: archive.assetIds }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$28",
      "label": "%AC$%dflt$%AM7$28",
      "start_line": 1,
      "end_line": 178,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 178,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = event.<@%unk/%unk: .loaded>\n%1 = instanceinvoke downloadManager.<@%unk/%unk: .update()>(downloadKey, %0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(event) => downloadManager.update(downloadKey, event.loaded)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        method: 'POST',\n        url: getBaseUrl() + '/download/archive' + (key ? `?key=${key}` : ''),\n        data: { assetIds: archive.assetIds },\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded),\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$30",
      "label": "%AC$%dflt$%AM10$30",
      "start_line": 194,
      "end_line": 194,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      filename: asset.originalFileName,\n      id: asset.id,\n      size: asset.exifInfo?.fileSizeInByte || 0,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$31",
      "label": "%AC$%dflt$%AM10$31",
      "start_line": 204,
      "end_line": 204,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: asset.livePhotoVideoId, key: getKey() }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$32",
      "label": "%AC$%dflt$%AM10$32",
      "start_line": 206,
      "end_line": 206,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        filename: motionAsset.originalFileName,\n        id: asset.livePhotoVideoId,\n        size: motionAsset.exifInfo?.fileSizeInByte || 0,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM10$33$%instInit$34$%instInit$35",
      "label": "%AC$%AC$%AC$%dflt$%AM10$33$%instInit$34$%instInit$35",
      "start_line": 221,
      "end_line": 221,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ filename: asset.originalFileName }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM10$33$%instInit$34",
      "label": "%AC$%AC$%dflt$%AM10$33$%instInit$34",
      "start_line": 221,
      "end_line": 221,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { filename: asset.originalFileName } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$33",
      "label": "%AC$%dflt$%AM10$33",
      "start_line": 219,
      "end_line": 219,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        type: NotificationType.Info,\n        message: $t('downloading_asset_filename', { values: { filename: asset.originalFileName } }),\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$36",
      "label": "%AC$%dflt$%AM10$36",
      "start_line": 1,
      "end_line": 228,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 228,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nthis = this: @ts_files/207.ts: %dflt\n%0 = event.<@%unk/%unk: .loaded>\n%1 = event.<@%unk/%unk: .total>\n%2 = instanceinvoke downloadManager.<@%unk/%unk: .update()>(downloadKey, %0, %1)\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(event) => downloadManager.update(downloadKey, event.loaded, event.total)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        method: 'GET',\n        url: getBaseUrl() + `/assets/${id}/original` + (key ? `?key=${key}` : ''),\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded, event.total),\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM10$37$%instInit$38",
      "label": "%AC$%AC$%dflt$%AM10$37$%instInit$38",
      "start_line": 232,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ filename }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$37",
      "label": "%AC$%dflt$%AM10$37",
      "start_line": 232,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { filename } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM14$39$%instInit$40$%instInit$41",
      "label": "%AC$%AC$%AC$%dflt$%AM14$39$%instInit$40$%instInit$41",
      "start_line": 315,
      "end_line": 315,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: numberOfIssues }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM14$39$%instInit$40",
      "label": "%AC$%AC$%dflt$%AM14$39$%instInit$40",
      "start_line": 315,
      "end_line": 315,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: numberOfIssues } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM14$39",
      "label": "%AC$%dflt$%AM14$39",
      "start_line": 314,
      "end_line": 314,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      message: $t('errors.cant_change_metadata_assets_count', { values: { count: numberOfIssues } }),\n      type: NotificationType.Warning,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM18$42$%instInit$43",
      "label": "%AC$%AC$%dflt$%AM18$42$%instInit$43",
      "start_line": 1,
      "end_line": 454,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 454,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/207.ts: %AC$%AC$%dflt$%AM18$42$%instInit$43\nreturn id",
              "start_line": 1,
              "end_line": 454,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ id }) => id"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ assetIds: assets.map(({ id }) => id) }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM18$42",
      "label": "%AC$%dflt$%AM18$42",
      "start_line": 327,
      "end_line": 327,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ stackCreateDto: { assetIds: assets.map(({ id }) => id) } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM18$44$%instInit$45$%instInit$46",
      "label": "%AC$%AC$%AC$%dflt$%AM18$44$%instInit$45$%instInit$46",
      "start_line": 330,
      "end_line": 330,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: stack.assets.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM18$44$%instInit$45",
      "label": "%AC$%AC$%dflt$%AM18$44$%instInit$45",
      "start_line": 330,
      "end_line": 330,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: stack.assets.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM18$44$%instInit$47",
      "label": "%AC$%AC$%dflt$%AM18$44$%instInit$47",
      "start_line": 1,
      "end_line": 334,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 334,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/207.ts: %AC$%AC$%dflt$%AM18$44$%instInit$47\n%0 = stack.<@%unk/%unk: .primaryAssetId>\n%1 = instanceinvoke assetViewingStore.<@%unk/%unk: .setAssetId()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => assetViewingStore.setAssetId(stack.primaryAssetId)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          text: $t('view_stack'),\n          onClick: () => assetViewingStore.setAssetId(stack.primaryAssetId),\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM18$44",
      "label": "%AC$%dflt$%AM18$44",
      "start_line": 329,
      "end_line": 329,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        message: $t('stacked_assets_count', { values: { count: stack.assets.length } }),\n        type: NotificationType.Info,\n        button: {\n          text: $t('view_stack'),\n          onClick: () => assetViewingStore.setAssetId(stack.primaryAssetId),\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM18$48",
      "label": "%AC$%dflt$%AM18$48",
      "start_line": 339,
      "end_line": 339,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: stack.id, assetCount: stack.assets.length, primaryAssetId: asset.id }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM21$%AM20$49",
      "label": "%AC$%dflt$%AM21$%AM20$49",
      "start_line": 354,
      "end_line": 354,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM20$50$%instInit$51",
      "label": "%AC$%AC$%dflt$%AM20$50$%instInit$51",
      "start_line": 356,
      "end_line": 356,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids: [...ids] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM20$50",
      "label": "%AC$%dflt$%AM20$50",
      "start_line": 356,
      "end_line": 356,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ bulkIdsDto: { ids: [...ids] } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM20$52$%instInit$53$%instInit$54",
      "label": "%AC$%AC$%AC$%dflt$%AM20$52$%instInit$53$%instInit$54",
      "start_line": 359,
      "end_line": 359,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM20$52$%instInit$53",
      "label": "%AC$%AC$%dflt$%AM20$52$%instInit$53",
      "start_line": 359,
      "end_line": 359,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM20$52",
      "label": "%AC$%dflt$%AM20$52",
      "start_line": 357,
      "end_line": 357,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: NotificationType.Info,\n      message: $t('unstacked_assets_count', { values: { count } }),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM24$55$%instInit$56",
      "label": "%AC$%AC$%dflt$%AM24$55$%instInit$56",
      "start_line": 374,
      "end_line": 374,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids: assetsToDeleteIds }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM24$55",
      "label": "%AC$%dflt$%AM24$55",
      "start_line": 374,
      "end_line": 374,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ assetBulkDeleteDto: { ids: assetsToDeleteIds } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM24$57$%instInit$58",
      "label": "%AC$%AC$%dflt$%AM24$57$%instInit$58",
      "start_line": 375,
      "end_line": 375,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids: [stack.id] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM24$57",
      "label": "%AC$%dflt$%AM24$57",
      "start_line": 375,
      "end_line": 375,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ bulkIdsDto: { ids: [stack.id] } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM24$59$%instInit$60$%instInit$61",
      "label": "%AC$%AC$%AC$%dflt$%AM24$59$%instInit$60$%instInit$61",
      "start_line": 378,
      "end_line": 378,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: assetsToDeleteIds.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM24$59$%instInit$60",
      "label": "%AC$%AC$%dflt$%AM24$59$%instInit$60",
      "start_line": 378,
      "end_line": 378,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: assetsToDeleteIds.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM24$59",
      "label": "%AC$%dflt$%AM24$59",
      "start_line": 376,
      "end_line": 376,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: NotificationType.Info,\n      message: $t('kept_this_deleted_others', { values: { count: assetsToDeleteIds.length } }),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM29$62$%instInit$63",
      "label": "%AC$%AC$%dflt$%AM29$62$%instInit$63",
      "start_line": 420,
      "end_line": 420,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        isArchived: !asset.isArchived,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM29$62",
      "label": "%AC$%dflt$%AM29$62",
      "start_line": 418,
      "end_line": 418,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      id: asset.id,\n      updateAssetDto: {\n        isArchived: !asset.isArchived,\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM29$64",
      "label": "%AC$%dflt$%AM29$64",
      "start_line": 425,
      "end_line": 425,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: NotificationType.Info,\n      message: asset.isArchived ? $t(`added_to_archive`) : $t(`removed_from_archive`),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM29$65$%instInit$66",
      "label": "%AC$%AC$%dflt$%AM29$65$%instInit$66",
      "start_line": 430,
      "end_line": 430,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ archived: asset.isArchived }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM29$65",
      "label": "%AC$%dflt$%AM29$65",
      "start_line": 430,
      "end_line": 430,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { archived: asset.isArchived } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM30$67$%instInit$68",
      "label": "%AC$%AC$%dflt$%AM30$67$%instInit$68",
      "start_line": 440,
      "end_line": 440,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ids, isArchived }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM30$67",
      "label": "%AC$%dflt$%AM30$67",
      "start_line": 440,
      "end_line": 440,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ assetBulkUpdateDto: { ids, isArchived } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM30$69$%instInit$70$%instInit$71",
      "label": "%AC$%AC$%AC$%dflt$%AM30$69$%instInit$70$%instInit$71",
      "start_line": 447,
      "end_line": 447,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: ids.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM30$69$%instInit$70",
      "label": "%AC$%AC$%dflt$%AM30$69$%instInit$70",
      "start_line": 447,
      "end_line": 447,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: ids.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM30$69$%instInit$72$%instInit$73",
      "label": "%AC$%AC$%AC$%dflt$%AM30$69$%instInit$72$%instInit$73",
      "start_line": 448,
      "end_line": 448,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ count: ids.length }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM30$69$%instInit$72",
      "label": "%AC$%AC$%dflt$%AM30$69$%instInit$72",
      "start_line": 448,
      "end_line": 448,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { count: ids.length } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM30$69",
      "label": "%AC$%dflt$%AM30$69",
      "start_line": 445,
      "end_line": 445,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      message: isArchived\n        ? $t('archived_count', { values: { count: ids.length } })\n        : $t('unarchived_count', { values: { count: ids.length } }),\n      type: NotificationType.Info,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM30$74$%instInit$75",
      "label": "%AC$%AC$%dflt$%AM30$74$%instInit$75",
      "start_line": 452,
      "end_line": 452,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ archived: isArchived }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM30$74",
      "label": "%AC$%dflt$%AM30$74",
      "start_line": 452,
      "end_line": 452,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: { archived: isArchived } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM39$76",
      "label": "%AC$%dflt$%AM39$76",
      "start_line": 487,
      "end_line": 487,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ [blob.type]: blob }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$getAssetRatio$77",
      "label": "%AC$%dflt$getAssetRatio$77",
      "start_line": 275,
      "end_line": 275,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ width, height }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { goto } from '$app/navigation';\nimport FormatBoldMessage from '$lib/components/i18n/format-bold-message.svelte';\nimport { NotificationType, notificationController } from '$lib/components/shared-components/notification/notification';\nimport { AppRoute } from '$lib/constants';\nimport type { AssetInteractionStore } from '$lib/stores/asset-interaction.store';\nimport { assetViewingStore } from '$lib/stores/asset-viewing.store';\nimport { isSelectingAllAssets, type AssetStore } from '$lib/stores/assets.store';\nimport { downloadManager } from '$lib/stores/download';\nimport { preferences } from '$lib/stores/user.store';\nimport { downloadRequest, getKey, withError } from '$lib/utils';\nimport { createAlbum } from '$lib/utils/album-utils';\nimport { getByteUnitString } from '$lib/utils/byte-units';\nimport { getFormatter } from '$lib/utils/i18n';\nimport {\n  addAssetsToAlbum as addAssets,\n  createStack,\n  deleteAssets,\n  deleteStacks,\n  getAssetInfo,\n  getBaseUrl,\n  getDownloadInfo,\n  getStack,\n  tagAssets as tagAllAssets,\n  untagAssets,\n  updateAsset,\n  updateAssets,\n  type AlbumResponseDto,\n  type AssetResponseDto,\n  type AssetTypeEnum,\n  type DownloadInfoDto,\n  type StackResponseDto,\n  type UserPreferencesResponseDto,\n  type UserResponseDto,\n} from '@immich/sdk';\nimport { DateTime } from 'luxon';\nimport { t } from 'svelte-i18n';\nimport { get } from 'svelte/store';\nimport { handleError } from './handle-error';\nexport const addAssetsToAlbum = async (albumId: string, assetIds: string[], showNotification = true) => {\n  const result = await addAssets({\n    id: albumId,\n    bulkIdsDto: {\n      ids: assetIds,\n    },\n    key: getKey(),\n  });\n  const count = result.filter(({ success }) => success).length;\n  const $t = get(t);\n  if (showNotification) {\n    notificationController.show({\n      type: NotificationType.Info,\n      timeout: 5000,\n      message:\n        count > 0\n          ? $t('assets_added_to_album_count', { values: { count } })\n          : $t('assets_were_part_of_album_count', { values: { count: assetIds.length } }),\n      button: {\n        text: $t('view_album'),\n        onClick() {\n          return goto(`${AppRoute.ALBUMS}/${albumId}`);\n        },\n      },\n    });\n  }\n};\nexport const tagAssets = async ({\n  assetIds,\n  tagIds,\n  showNotification = true,\n}: {\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}) => {\n  for (const tagId of tagIds) {\n    await tagAllAssets({ id: tagId, bulkIdsDto: { ids: assetIds } });\n  }\n  if (showNotification) {\n    const $t = await getFormatter();\n    notificationController.show({\n      message: $t('tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    });\n  }\n  return assetIds;\n};\nexport const removeTag = async ({\n  assetIds,\n  tagIds,\n  showNotification = true,\n}: {\n  assetIds: string[];\n  tagIds: string[];\n  showNotification?: boolean;\n}) => {\n  for (const tagId of tagIds) {\n    await untagAssets({ id: tagId, bulkIdsDto: { ids: assetIds } });\n  }\n  if (showNotification) {\n    const $t = await getFormatter();\n    notificationController.show({\n      message: $t('removed_tagged_assets', { values: { count: assetIds.length } }),\n      type: NotificationType.Info,\n    });\n  }\n  return assetIds;\n};\nexport const addAssetsToNewAlbum = async (albumName: string, assetIds: string[]) => {\n  const album = await createAlbum(albumName, assetIds);\n  if (!album) {\n    return;\n  }\n  const $t = get(t);\n  notificationController.show({\n    type: NotificationType.Info,\n    timeout: 5000,\n    component: {\n      type: FormatBoldMessage,\n      props: {\n        key: 'assets_added_to_name_count',\n        values: { count: assetIds.length, name: albumName, hasName: !!albumName },\n      },\n    },\n    button: {\n      text: $t('view_album'),\n      onClick() {\n        return goto(`${AppRoute.ALBUMS}/${album.id}`);\n      },\n    },\n  });\n  return album;\n};\nexport const downloadAlbum = async (album: AlbumResponseDto) => {\n  await downloadArchive(`${album.albumName}.zip`, {\n    albumId: album.id,\n  });\n};\nexport const downloadBlob = (data: Blob, filename: string) => {\n  const url = URL.createObjectURL(data);\n  const anchor = document.createElement('a');\n  anchor.href = url;\n  anchor.download = filename;\n  document.body.append(anchor);\n  anchor.click();\n  anchor.remove();\n  URL.revokeObjectURL(url);\n};\nexport const downloadArchive = async (fileName: string, options: Omit<DownloadInfoDto, 'archiveSize'>) => {\n  const $preferences = get<UserPreferencesResponseDto | undefined>(preferences);\n  const dto = { ...options, archiveSize: $preferences?.download.archiveSize };\n  const [error, downloadInfo] = await withError(() => getDownloadInfo({ downloadInfoDto: dto, key: getKey() }));\n  if (error) {\n    const $t = get(t);\n    handleError(error, $t('errors.unable_to_download_files'));\n    return;\n  }\n  if (!downloadInfo) {\n    return;\n  }\n  for (let index = 0; index < downloadInfo.archives.length; index++) {\n    const archive = downloadInfo.archives[index];\n    const suffix = downloadInfo.archives.length > 1 ? `+${index + 1}` : '';\n    const archiveName = fileName.replace('.zip', `${suffix}-${DateTime.now().toFormat('yyyyLLdd_HHmmss')}.zip`);\n    const key = getKey();\n    let downloadKey = `${archiveName} `;\n    if (downloadInfo.archives.length > 1) {\n      downloadKey = `${archiveName} (${index + 1}/${downloadInfo.archives.length})`;\n    }\n    const abort = new AbortController();\n    downloadManager.add(downloadKey, archive.size, abort);\n    try {\n      // TODO use sdk once it supports progress events\n      const { data } = await downloadRequest({\n        method: 'POST',\n        url: getBaseUrl() + '/download/archive' + (key ? `?key=${key}` : ''),\n        data: { assetIds: archive.assetIds },\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded),\n      });\n      downloadBlob(data, archiveName);\n    } catch (error) {\n      const $t = get(t);\n      handleError(error, $t('errors.unable_to_download_files'));\n      downloadManager.clear(downloadKey);\n      return;\n    } finally {\n      setTimeout(() => downloadManager.clear(downloadKey), 5000);\n    }\n  }\n};\nexport const downloadFile = async (asset: AssetResponseDto) => {\n  const $t = get(t);\n  const assets = [\n    {\n      filename: asset.originalFileName,\n      id: asset.id,\n      size: asset.exifInfo?.fileSizeInByte || 0,\n    },\n  ];\n  const isAndroidMotionVideo = (asset: AssetResponseDto) => {\n    return asset.originalPath.includes('encoded-video');\n  };\n  if (asset.livePhotoVideoId) {\n    const motionAsset = await getAssetInfo({ id: asset.livePhotoVideoId, key: getKey() });\n    if (!isAndroidMotionVideo(motionAsset) || get(preferences).download.includeEmbeddedVideos) {\n      assets.push({\n        filename: motionAsset.originalFileName,\n        id: asset.livePhotoVideoId,\n        size: motionAsset.exifInfo?.fileSizeInByte || 0,\n      });\n    }\n  }\n  for (const { filename, id, size } of assets) {\n    const downloadKey = filename;\n    try {\n      const abort = new AbortController();\n      downloadManager.add(downloadKey, size, abort);\n      const key = getKey();\n      notificationController.show({\n        type: NotificationType.Info,\n        message: $t('downloading_asset_filename', { values: { filename: asset.originalFileName } }),\n      });\n      // TODO use sdk once it supports progress events\n      const { data } = await downloadRequest({\n        method: 'GET',\n        url: getBaseUrl() + `/assets/${id}/original` + (key ? `?key=${key}` : ''),\n        signal: abort.signal,\n        onDownloadProgress: (event) => downloadManager.update(downloadKey, event.loaded, event.total),\n      });\n      downloadBlob(data, filename);\n    } catch (error) {\n      handleError(error, $t('errors.error_downloading', { values: { filename } }));\n      downloadManager.clear(downloadKey);\n    } finally {\n      setTimeout(() => downloadManager.clear(downloadKey), 5000);\n    }\n  }\n};\nexport function getFilenameExtension(filename: string): string {\n  const lastIndex = Math.max(0, filename.lastIndexOf('.'));\n  const startIndex = (lastIndex || Number.POSITIVE_INFINITY) + 1;\n  return filename.slice(startIndex).toLowerCase();\n}\nexport function getAssetFilename(asset: AssetResponseDto): string {\n  const fileExtension = getFilenameExtension(asset.originalPath);\n  return `${asset.originalFileName}.${fileExtension}`;\n}\nfunction isRotated90CW(orientation: number) {\n  return orientation === 5 || orientation === 6 || orientation === 90;\n}\nfunction isRotated270CW(orientation: number) {\n  return orientation === 7 || orientation === 8 || orientation === -90;\n}\nexport function isFlipped(orientation?: string | null) {\n  const value = Number(orientation);\n  return value && (isRotated270CW(value) || isRotated90CW(value));\n}\nexport function getFileSize(asset: AssetResponseDto): string {\n  const size = asset.exifInfo?.fileSizeInByte || 0;\n  return size > 0 ? getByteUnitString(size, undefined, 4) : 'Invalid Data';\n}\nexport function getAssetResolution(asset: AssetResponseDto): string {\n  const { width, height } = getAssetRatio(asset);\n  if (width === 235 && height === 235) {\n    return 'Invalid Data';\n  }\n  return `${width} x ${height}`;\n}\nexport function getAssetRatio(asset: AssetResponseDto) {\n  let height = asset.exifInfo?.exifImageHeight || 235;\n  let width = asset.exifInfo?.exifImageWidth || 235;\n  if (isFlipped(asset.exifInfo?.orientation)) {\n    [width, height] = [height, width];\n  }\n  return { width, height };\n}\n// list of supported image extensions from https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types excluding svg\nconst supportedImageMimeTypes = new Set([\n  'image/apng',\n  'image/avif',\n  'image/gif',\n  'image/jpeg',\n  'image/png',\n  'image/webp',\n]);\nconst isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // https://stackoverflow.com/a/23522755\nif (isSafari) {\n  supportedImageMimeTypes.add('image/heic').add('image/heif');\n}\nexport function isWebCompatibleImage(asset: AssetResponseDto): boolean {\n  if (!asset.originalMimeType) {\n    return false;\n  }\n  return supportedImageMimeTypes.has(asset.originalMimeType);\n}\nexport const getAssetType = (type: AssetTypeEnum) => {\n  switch (type) {\n    case 'IMAGE': {\n      return 'Photo';\n    }\n    case 'VIDEO': {\n      return 'Video';\n    }\n    default: {\n      return 'Asset';\n    }\n  }\n};\nexport const getSelectedAssets = (assets: Set<AssetResponseDto>, user: UserResponseDto | null): string[] => {\n  const ids = [...assets].filter((a) => user && a.ownerId === user.id).map((a) => a.id);\n  const numberOfIssues = [...assets].filter((a) => user && a.ownerId !== user.id).length;\n  if (numberOfIssues > 0) {\n    const $t = get(t);\n    notificationController.show({\n      message: $t('errors.cant_change_metadata_assets_count', { values: { count: numberOfIssues } }),\n      type: NotificationType.Warning,\n    });\n  }\n  return ids;\n};\nexport const stackAssets = async (assets: AssetResponseDto[], showNotification = true) => {\n  if (assets.length < 2) {\n    return false;\n  }\n  const $t = get(t);\n  try {\n    const stack = await createStack({ stackCreateDto: { assetIds: assets.map(({ id }) => id) } });\n    if (showNotification) {\n      notificationController.show({\n        message: $t('stacked_assets_count', { values: { count: stack.assets.length } }),\n        type: NotificationType.Info,\n        button: {\n          text: $t('view_stack'),\n          onClick: () => assetViewingStore.setAssetId(stack.primaryAssetId),\n        },\n      });\n    }\n    for (const [index, asset] of assets.entries()) {\n      asset.stack = index === 0 ? { id: stack.id, assetCount: stack.assets.length, primaryAssetId: asset.id } : null;\n    }\n    return assets.slice(1).map((asset) => asset.id);\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_stack_assets'));\n    return false;\n  }\n};\nexport const deleteStack = async (stackIds: string[]) => {\n  const ids = [...new Set(stackIds)];\n  if (ids.length === 0) {\n    return;\n  }\n  const $t = get(t);\n  try {\n    const stacks = await Promise.all(ids.map((id) => getStack({ id })));\n    const count = stacks.reduce((sum, stack) => sum + stack.assets.length, 0);\n    await deleteStacks({ bulkIdsDto: { ids: [...ids] } });\n    notificationController.show({\n      type: NotificationType.Info,\n      message: $t('unstacked_assets_count', { values: { count } }),\n    });\n    const assets = stacks.flatMap((stack) => stack.assets);\n    for (const asset of assets) {\n      asset.stack = null;\n    }\n    return assets;\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_unstack_assets'));\n  }\n};\nexport const keepThisDeleteOthers = async (keepAsset: AssetResponseDto, stack: StackResponseDto) => {\n  const $t = get(t);\n  try {\n    const assetsToDeleteIds = stack.assets.filter((asset) => asset.id !== keepAsset.id).map((asset) => asset.id);\n    await deleteAssets({ assetBulkDeleteDto: { ids: assetsToDeleteIds } });\n    await deleteStacks({ bulkIdsDto: { ids: [stack.id] } });\n    notificationController.show({\n      type: NotificationType.Info,\n      message: $t('kept_this_deleted_others', { values: { count: assetsToDeleteIds.length } }),\n    });\n    keepAsset.stack = null;\n    return keepAsset;\n  } catch (error) {\n    handleError(error, $t('errors.failed_to_keep_this_delete_others'));\n  }\n};\nexport const selectAllAssets = async (assetStore: AssetStore, assetInteractionStore: AssetInteractionStore) => {\n  if (get(isSelectingAllAssets)) {\n    // Selection is already ongoing\n    return;\n  }\n  isSelectingAllAssets.set(true);\n  try {\n    for (const bucket of assetStore.buckets) {\n      await assetStore.loadBucket(bucket.bucketDate);\n      if (!get(isSelectingAllAssets)) {\n        break; // Cancelled\n      }\n      assetInteractionStore.selectAssets(bucket.assets);\n      // We use setTimeout to allow the UI to update. Otherwise, this may\n      // cause a long delay between the start of 'select all' and the\n      // effective update of the UI, depending on the number of assets\n      // to select\n      await delay(0);\n    }\n  } catch (error) {\n    const $t = get(t);\n    handleError(error, $t('errors.error_selecting_all_assets'));\n    isSelectingAllAssets.set(false);\n  }\n};\nexport const cancelMultiselect = (assetInteractionStore: AssetInteractionStore) => {\n  isSelectingAllAssets.set(false);\n  assetInteractionStore.clearMultiselect();\n};\nexport const toggleArchive = async (asset: AssetResponseDto) => {\n  const $t = get(t);\n  try {\n    const data = await updateAsset({\n      id: asset.id,\n      updateAssetDto: {\n        isArchived: !asset.isArchived,\n      },\n    });\n    asset.isArchived = data.isArchived;\n    notificationController.show({\n      type: NotificationType.Info,\n      message: asset.isArchived ? $t(`added_to_archive`) : $t(`removed_from_archive`),\n    });\n  } catch (error) {\n    handleError(error, $t('errors.unable_to_add_remove_archive', { values: { archived: asset.isArchived } }));\n  }\n  return asset;\n};\nexport const archiveAssets = async (assets: AssetResponseDto[], archive: boolean) => {\n  const isArchived = archive;\n  const ids = assets.map(({ id }) => id);\n  const $t = get(t);\n  try {\n    if (ids.length > 0) {\n      await updateAssets({ assetBulkUpdateDto: { ids, isArchived } });\n    }\n    for (const asset of assets) {\n      asset.isArchived = isArchived;\n    }\n    notificationController.show({\n      message: isArchived\n        ? $t('archived_count', { values: { count: ids.length } })\n        : $t('unarchived_count', { values: { count: ids.length } }),\n      type: NotificationType.Info,\n    });\n  } catch (error) {\n    handleError(error, $t('errors.unable_to_archive_unarchive', { values: { archived: isArchived } }));\n  }\n  return ids;\n};\nexport const delay = async (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\nexport const canCopyImageToClipboard = (): boolean => {\n  return !!(navigator.clipboard && window.ClipboardItem);\n};\nconst imgToBlob = async (imageElement: HTMLImageElement) => {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = imageElement.naturalWidth;\n  canvas.height = imageElement.naturalHeight;\n  if (context) {\n    context.drawImage(imageElement, 0, 0);\n    return await new Promise<Blob>((resolve) => {\n      canvas.toBlob((blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          throw new Error('Canvas conversion to Blob failed');\n        }\n      });\n    });\n  }\n  throw new Error('Canvas context is null');\n};\nconst urlToBlob = async (imageSource: string) => {\n  const response = await fetch(imageSource);\n  return await response.blob();\n};\nexport const copyImageToClipboard = async (source: HTMLImageElement | string) => {\n  const blob = source instanceof HTMLImageElement ? await imgToBlob(source) : await urlToBlob(source);\n  await navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]);\n};"
}