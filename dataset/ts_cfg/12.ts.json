{
  "type": "file",
  "name": "12.ts",
  "label": "12.ts",
  "start_line": -1,
  "end_line": 2029,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1822,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: %dflt\n%0 = new @ts_files/12.ts: %AC$%dflt$%dflt$13\ninstanceinvoke %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.constructor()>()\ncameraSize = %0\nTAG = 'CameraService'\nTAG_AB = '-----AB-----'\n%1 = new @ts_files/12.ts: CameraService\ninstanceinvoke %1.<@ts_files/12.ts: CameraService.constructor()>()\ndefault = %1\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "mockInterface",
          "label": "mockInterface",
          "start_line": 1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: %dflt\n%0 = camera.<@%unk/%unk: .SceneFeatureType>\n%1 = !%0\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @ts_files/12.ts: %AC$%dflt$mockInterface$14\ninstanceinvoke %2.<@ts_files/12.ts: %AC$%dflt$mockInterface$14.constructor()>()\ncamera.<@%unk/%unk: .SceneFeatureType> = %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = camera.<@%unk/%unk: .SceneMode>\n%4 = !%3\nif %4 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = new @ts_files/12.ts: %AC$%dflt$mockInterface$15\ninstanceinvoke %5.<@ts_files/12.ts: %AC$%dflt$mockInterface$15.constructor()>()\ncamera.<@%unk/%unk: .SceneMode> = %5",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 174,
                              "end_line": 1822,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function mockInterface(): void {\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "PhotoOrientation",
      "label": "PhotoOrientation",
      "start_line": 33,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "enum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}"
    },
    {
      "type": "class",
      "name": "CaptureMode",
      "label": "CaptureMode",
      "start_line": 40,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "enum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}"
    },
    {
      "type": "class",
      "name": "CameraMode",
      "label": "CameraMode",
      "start_line": 46,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "enum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}"
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 750,
      "end_line": 750,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    latitude: number,\n    longitude: number,\n    altitude: number\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$1$%instInit$2",
      "label": "%AC$%AC$CameraService$%instInit$1$%instInit$2",
      "start_line": 96,
      "end_line": 96,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$1",
      "label": "%AC$CameraService$%instInit$1",
      "start_line": 93,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$3$%instInit$4",
      "label": "%AC$%AC$CameraService$%instInit$3$%instInit$4",
      "start_line": 114,
      "end_line": 114,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: 1920,\n      height: 1080\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$3$%instInit$5",
      "label": "%AC$%AC$CameraService$%instInit$3$%instInit$5",
      "start_line": 118,
      "end_line": 118,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$3",
      "label": "%AC$CameraService$%instInit$3",
      "start_line": 112,
      "end_line": 112,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$6$%instInit$7",
      "label": "%AC$%AC$CameraService$%instInit$6$%instInit$7",
      "start_line": 125,
      "end_line": 125,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: 1920,\n      height: 1080\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$6",
      "label": "%AC$CameraService$%instInit$6",
      "start_line": 123,
      "end_line": 123,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$8$%instInit$9",
      "label": "%AC$%AC$CameraService$%instInit$8$%instInit$9",
      "start_line": 132,
      "end_line": 132,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: 1920,\n      height: 1080\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$8",
      "label": "%AC$CameraService$%instInit$8",
      "start_line": 130,
      "end_line": 130,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$%instInit$10$%instInit$11",
      "label": "%AC$%AC$CameraService$%instInit$10$%instInit$11",
      "start_line": 139,
      "end_line": 139,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: 1920,\n      height: 1080\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$10",
      "label": "%AC$CameraService$%instInit$10",
      "start_line": 137,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$%instInit$12",
      "label": "%AC$CameraService$%instInit$12",
      "start_line": 144,
      "end_line": 144,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  }"
    },
    {
      "type": "class",
      "name": "CameraService",
      "label": "CameraService",
      "start_line": 0,
      "end_line": 2029,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 162,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke this.<@ts_files/12.ts: CameraService.%instInit()>()\nstaticinvoke <@ts_files/12.ts: %dflt.mockInterface()>()\n%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getCameraSettingContext()>()\n%2 = instanceinvoke photoAccessHelper.<@%unk/%unk: .getPhotoAccessHelper()>(%1)\nthis.<@ts_files/12.ts: CameraService.accessHelper> = %2\nimageCapacity = 8",
              "start_line": 1,
              "end_line": 162,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = cameraSize.<@ts_files/12.ts: %AC$%dflt$%dflt$13.width>\n%4 = cameraSize.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%5 = image.<@%unk/%unk: .ImageFormat>\n%6 = %5.<@%unk/%unk: .JPEG>\n%7 = instanceinvoke image.<@%unk/%unk: .createImageReceiver()>(%3, %4, %6, imageCapacity)\nthis.<@ts_files/12.ts: CameraService.mReceiver> = %7\n%8 = this.<@ts_files/12.ts: CameraService.mReceiver>\n%9 = 'createImageReceiver value: ' + %8\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %9)\n%10 = this.<@ts_files/12.ts: CameraService.mReceiver>\ninstanceinvoke %10.<@%unk/%unk: .on()>('imageArrival', %AM2$constructor)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%11 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%12 = 'savePicture err: ' + %11\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "savePicture",
          "label": "savePicture",
          "start_line": 1,
          "end_line": 202,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "buffer = parameter0: ArrayBuffer\nimg = parameter1: image.Image\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'savePicture start')\n%0 = instanceinvoke Date.<@%unk/%unk: .now()>()\n%1 = %0 + '.jpg'\nfileName = %1\n%2 = this.<@ts_files/12.ts: CameraService.accessHelper>\n%3 = instanceinvoke %2.<@%unk/%unk: .createAsset()>(fileName)\nfileAsset = await %3\nimgPhotoUri = fileAsset.<@%unk/%unk: .uri>\n%4 = instanceinvoke fileAsset.<@%unk/%unk: .open()>('rw')\nfd = await %4\n%5 = instanceinvoke fs.<@%unk/%unk: .write()>(fd, buffer)\n%6 = await %5\n%7 = instanceinvoke fileAsset.<@%unk/%unk: .close()>(fd)\n%8 = await %7\n%9 = instanceinvoke img.<@%unk/%unk: .release()>()\n%10 = await %9\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'savePicture End')\n%11 = this.<@ts_files/12.ts: CameraService.handleTakePicture>\nif %11 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.handleTakePicture()>(imgPhotoUri)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%12 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%13 = 'savePicture err: ' + %12\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %13)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "withinErrorMargin",
          "label": "withinErrorMargin",
          "start_line": 1,
          "end_line": 225,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "left = parameter0: number\nright = parameter1: number\nthis = this: @ts_files/12.ts: CameraService\nbaseNumber = 2\nindexNumber = 2\n%0 = left - right\n%1 = instanceinvoke Math.<@%unk/%unk: .abs()>(%0)\n%2 = Number.<@%unk/%unk: .EPSILON>\n%3 = instanceinvoke Math.<@%unk/%unk: .pow()>(baseNumber, indexNumber)\n%4 = %2 * %3\n%5 = %1 < %4\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }"
        },
        {
          "type": "function",
          "name": "switchProfiles",
          "label": "switchProfiles",
          "start_line": 1,
          "end_line": 233,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profiles = parameter0: camera.CameraOutputCapability\nthis = this: @ts_files/12.ts: CameraService\npreviewProfiles = profiles.<@%unk/%unk: .previewProfiles>\nvideoProfiles = profiles.<@%unk/%unk: .videoProfiles>\nphotoProfiles = profiles.<@%unk/%unk: .photoProfiles>\nisValidProfiles = true\n%0 = !previewProfiles\n%1 = previewProfiles.<@%unk/%unk: .length>\n%2 = %1 < 1\n%3 = %0 || %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "isValidProfiles = false",
                  "start_line": 239,
                  "end_line": 245,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = !photoProfiles\n%5 = photoProfiles.<@%unk/%unk: .length>\n%6 = %5 < 1\n%7 = %4 || %6\n%8 = isValidProfiles && %7\nif %8 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "isValidProfiles = false",
                          "start_line": 239,
                          "end_line": 245,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%10 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\n%11 = %9 !== %10\n%12 = isValidProfiles && %11\n%13 = !videoProfiles\n%14 = videoProfiles.<@%unk/%unk: .length>\n%15 = %14 < 1\n%16 = %13 || %15\n%17 = %12 && %16\nif %17 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "isValidProfiles = false",
                                  "start_line": 239,
                                  "end_line": 245,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%18 = !isValidProfiles\nif %18 != false",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "instanceinvoke Logger.<@%unk/%unk: .error()>('Profile is invalid')\nreturn",
                                          "start_line": 1,
                                          "end_line": 1822,
                                          "successors": []
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "defaultAspectRatio = instanceinvoke AppStorage.<@%unk/%unk: .get()>('defaultAspectRatio')\npreviewProfileObj = undefined\nphotoProfileObj = undefined\ndeviceType = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%78 = profiles.<@%unk/%unk: .previewProfiles>\n%79 = %78.<@%unk/%unk: .length>\nindex = %79 - 1\n%19 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%20 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\nif %19 == %20",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "previewProfileObj = instanceinvoke previewProfiles.<@%unk/%unk: .find()>(%AM5$switchProfiles)\n%25 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(previewProfileObj)\n%26 = 'previewProfileObj: ' + %25\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%26)\nthis.<@ts_files/12.ts: CameraService.previewProfileObj> = previewProfileObj\nphotoProfileObj = instanceinvoke photoProfiles.<@%unk/%unk: .find()>(%AM6$switchProfiles)\n%27 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoProfileObj)\n%28 = 'photoProfileObj: ' + %27\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%28)\nthis.<@ts_files/12.ts: CameraService.photoProfileObj> = photoProfileObj",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%37 = Constants.<@%unk/%unk: .DEFAULT>\nif deviceType === %37",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%38 = this.<@ts_files/12.ts: CameraService.globalContext>\n%39 = instanceinvoke %38.<@%unk/%unk: .getObject()>('cameraConfig')\ncameraConfig = <CameraConfig>%39\n%40 = this.<@ts_files/12.ts: CameraService.videoProfiles>\n%41 = %40.<@%unk/%unk: .length>\nindex = %41 - 1",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "if index >= 0",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%42 = this.<@ts_files/12.ts: CameraService.videoProfiles>\nvideoProfileObj = %42.<@%unk/%unk: .index>\n%43 = videoProfileObj.<@%unk/%unk: .size>\n%44 = %43.<@%unk/%unk: .width>\n%45 = videoProfileObj.<@%unk/%unk: .size>\n%46 = %45.<@%unk/%unk: .height>\n%47 = %44 / %46\n%48 = instanceinvoke this.<@ts_files/12.ts: CameraService.withinErrorMargin(number, number)>(defaultAspectRatio, %47)\nif %48 != false",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "%49 = videoProfileObj.<@%unk/%unk: .size>\n%50 = %49.<@%unk/%unk: .width>\n%51 = Constants.<@%unk/%unk: .VIDEO_MAX_WIDTH>\n%52 = %50 <= %51\n%53 = videoProfileObj.<@%unk/%unk: .size>\n%54 = %53.<@%unk/%unk: .height>\n%55 = Constants.<@%unk/%unk: .VIDEO_MAX_WIDTH>\n%56 = %54 <= %55\n%57 = %52 && %56\nif %57 != false",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "index = index - 1",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "blockRef",
                                                                          "label": "(RepeatedBlock)"
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%58 = new @ts_files/12.ts: %AC$CameraService$switchProfiles$19\ninstanceinvoke %58.<@ts_files/12.ts: %AC$CameraService$switchProfiles$19.constructor()>()\nvideoProfileTemp = %58\n%59 = cameraConfig.<@%unk/%unk: .videoFrame>\nif %59 === 0",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%60 = Constants.<@%unk/%unk: .VIDEO_FRAME_15>",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "%61 = videoProfileObj.<@%unk/%unk: .frameRateRange>\n%62 = %61.<@%unk/%unk: .min>\nif %60 === %62",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%64 = videoProfileObj.<@%unk/%unk: .frameRateRange>\n%65 = %64.<@%unk/%unk: .min>\n%63 = videoProfileTemp.<@ts_files/12.ts: %AC$CameraService$switchProfiles$19.frameRateRange>\n%63.<@%unk/%unk: .min> = %65\n%67 = videoProfileObj.<@%unk/%unk: .frameRateRange>\n%68 = %67.<@%unk/%unk: .max>\n%66 = videoProfileTemp.<@ts_files/12.ts: %AC$CameraService$switchProfiles$19.frameRateRange>\n%66.<@%unk/%unk: .max> = %68\nthis.<@ts_files/12.ts: CameraService.videoProfileObj> = videoProfileTemp\n%69 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%70 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%69)\n%71 = 'videoProfileObj: ' + %70\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %71)",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "return",
                                                                                      "start_line": 174,
                                                                                      "end_line": 1822,
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%72 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(videoProfileTemp)\n%73 = 'videoProfileTemp: ' + %72\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %73)\nthis.<@ts_files/12.ts: CameraService.videoProfileObj> = videoProfileTemp",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "blockRef",
                                                                                      "label": "(RepeatedBlock)"
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%60 = Constants.<@%unk/%unk: .VIDEO_FRAME_30>",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "blockRef",
                                                                              "label": "(RepeatedBlock)"
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%21 = @ts_files/12.ts: CameraMode.[static]SUPER_STAB\nif %19 == %21",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "previewProfileObj = instanceinvoke previewProfiles.<@%unk/%unk: .find()>(%AM7$switchProfiles)\n%29 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(previewProfileObj)\n%30 = 'previewProfileObj: ' + %29\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%30)\nthis.<@ts_files/12.ts: CameraService.previewProfileObj> = previewProfileObj\nphotoProfileObj = instanceinvoke photoProfiles.<@%unk/%unk: .find()>(%AM8$switchProfiles)\n%31 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoProfileObj)\n%32 = 'photoProfileObj: ' + %31\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%32)\nthis.<@ts_files/12.ts: CameraService.photoProfileObj> = photoProfileObj\n%33 = new @ts_files/12.ts: %AC$CameraService$switchProfiles$16\ninstanceinvoke %33.<@ts_files/12.ts: %AC$CameraService$switchProfiles$16.constructor()>()\nthis.<@ts_files/12.ts: CameraService.videoProfileObj> = %33\nvideoProfileObj = instanceinvoke videoProfiles.<@%unk/%unk: .find()>(%AM9$switchProfiles)\n%34 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(videoProfileObj)\n%35 = 'videoProfileObj: ' + %34\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%35)\n%36 = !videoProfileObj\nif %36 != 0",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "instanceinvoke Logger.<@%unk/%unk: .error()>('videoProfileObj not supported')",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%22 = @ts_files/12.ts: CameraMode.[static]NIGHT\nif %19 == %22",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "previewProfileObj = instanceinvoke previewProfiles.<@%unk/%unk: .find()>(%AM10$switchProfiles)\n%74 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(previewProfileObj)\n%75 = 'previewProfileObj: ' + %74\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%75)\nthis.<@ts_files/12.ts: CameraService.previewProfileObj> = previewProfileObj\nphotoProfileObj = instanceinvoke photoProfiles.<@%unk/%unk: .find()>(%AM11$switchProfiles)\n%76 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoProfileObj)\n%77 = 'photoProfileObj: ' + %76\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%77)\nthis.<@ts_files/12.ts: CameraService.photoProfileObj> = photoProfileObj",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%23 = @ts_files/12.ts: CameraMode.[static]NORMAL\nif %19 == %23",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "if index >= 0",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%80 = profiles.<@%unk/%unk: .previewProfiles>\npreviewProfile = %80.<@%unk/%unk: .index>\n%81 = previewProfile.<@%unk/%unk: .size>\n%82 = %81.<@%unk/%unk: .width>\n%83 = previewProfile.<@%unk/%unk: .size>\n%84 = %83.<@%unk/%unk: .height>\n%85 = %82 / %84\n%86 = instanceinvoke this.<@ts_files/12.ts: CameraService.withinErrorMargin(number, number)>(defaultAspectRatio, %85)\nif %86 != false",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "%87 = previewProfile.<@%unk/%unk: .size>\n%88 = %87.<@%unk/%unk: .width>\n%89 = Constants.<@%unk/%unk: .PHOTO_MAX_WIDTH>\n%90 = %88 <= %89\n%91 = previewProfile.<@%unk/%unk: .size>\n%92 = %91.<@%unk/%unk: .height>\n%93 = Constants.<@%unk/%unk: .PHOTO_MAX_WIDTH>\n%94 = %92 <= %93\n%95 = %90 && %94\nif %95 != false",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%96 = new @ts_files/12.ts: %AC$CameraService$switchProfiles$22\ninstanceinvoke %96.<@ts_files/12.ts: %AC$CameraService$switchProfiles$22.constructor()>()\npreviewProfileTemp = %96\nthis.<@ts_files/12.ts: CameraService.previewProfileObj> = previewProfileTemp\n%97 = this.<@ts_files/12.ts: CameraService.previewProfileObj>\n%98 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%97)\n%99 = 'previewProfileObj: ' + %98\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %99)",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%100 = profiles.<@%unk/%unk: .photoProfiles>\n%101 = %100.<@%unk/%unk: .length>\nindex = %101 - 1",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "if index >= 0",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%102 = profiles.<@%unk/%unk: .photoProfiles>\nphotoProfile = %102.<@%unk/%unk: .index>\n%103 = photoProfile.<@%unk/%unk: .size>\n%104 = %103.<@%unk/%unk: .width>\n%105 = photoProfile.<@%unk/%unk: .size>\n%106 = %105.<@%unk/%unk: .height>\n%107 = %104 / %106\n%108 = instanceinvoke this.<@ts_files/12.ts: CameraService.withinErrorMargin(number, number)>(defaultAspectRatio, %107)\nif %108 != false",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "%109 = photoProfile.<@%unk/%unk: .size>\n%110 = %109.<@%unk/%unk: .width>\n%111 = Constants.<@%unk/%unk: .PHOTO_MAX_WIDTH>\n%112 = %110 <= %111\n%113 = photoProfile.<@%unk/%unk: .size>\n%114 = %113.<@%unk/%unk: .height>\n%115 = Constants.<@%unk/%unk: .PHOTO_MAX_WIDTH>\n%116 = %114 <= %115\n%117 = %112 && %116\nif %117 != false",
                                                                                      "start_line": 1,
                                                                                      "end_line": 1,
                                                                                      "successors": [
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "%118 = new @ts_files/12.ts: %AC$CameraService$switchProfiles$24\ninstanceinvoke %118.<@ts_files/12.ts: %AC$CameraService$switchProfiles$24.constructor()>()\nphotoProfileTemp = %118\nthis.<@ts_files/12.ts: CameraService.photoProfileObj> = photoProfileTemp\n%119 = this.<@ts_files/12.ts: CameraService.photoProfileObj>\n%120 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%119)\n%121 = 'photoProfileObj: ' + %120\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %121)",
                                                                                          "start_line": 1,
                                                                                          "end_line": 1,
                                                                                          "successors": [
                                                                                            {
                                                                                              "type": "blockRef",
                                                                                              "label": "(RepeatedBlock)"
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "index = index - 1",
                                                                                          "start_line": 1,
                                                                                          "end_line": 1,
                                                                                          "successors": [
                                                                                            {
                                                                                              "type": "blockRef",
                                                                                              "label": "(RepeatedBlock)"
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "blockRef",
                                                                                      "label": "(RepeatedBlock)"
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "blockRef",
                                                                                  "label": "(RepeatedBlock)"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "index = index - 1",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "blockRef",
                                                                          "label": "(RepeatedBlock)"
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%24 = @ts_files/12.ts: CameraMode.[static]VIDEO\nif %19 == %24",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            },
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setCameraMode",
          "label": "setCameraMode",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraMode = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\nthis.<@ts_files/12.ts: CameraService.cameraMode> = cameraMode\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }"
        },
        {
          "type": "function",
          "name": "initProfile",
          "label": "initProfile",
          "start_line": 1,
          "end_line": 397,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraDeviceIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\nprofiles = undefined\n%0 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%1 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\nif %0 === %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/12.ts: CameraService.cameras>\n%3 = %2.<@%unk/%unk: .cameraDeviceIndex>\n%4 = camera.<@%unk/%unk: .SceneMode>\n%5 = %4.<@%unk/%unk: .PORTRAIT_PHOTO>\n%6 = this.<@ts_files/12.ts: CameraService.cameraManager>\nprofiles = instanceinvoke %6.<@%unk/%unk: .getSupportedOutputCapability()>(%3, %5)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%17 = profiles.<@%unk/%unk: .videoProfiles>\nthis.<@ts_files/12.ts: CameraService.videoProfiles> = %17\ninstanceinvoke this.<@ts_files/12.ts: CameraService.switchProfiles(camera.CameraOutputCapability)>(profiles)\nreturn",
                      "start_line": 1,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%8 = @ts_files/12.ts: CameraMode.[static]VIDEO\nif %7 === %8",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = this.<@ts_files/12.ts: CameraService.cameras>\n%10 = %9.<@%unk/%unk: .cameraDeviceIndex>\n%11 = camera.<@%unk/%unk: .SceneMode>\n%12 = %11.<@%unk/%unk: .NORMAL_VIDEO>\n%13 = this.<@ts_files/12.ts: CameraService.cameraManager>\nprofiles = instanceinvoke %13.<@%unk/%unk: .getSupportedOutputCapability()>(%10, %12)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = this.<@ts_files/12.ts: CameraService.cameras>\n%15 = %14.<@%unk/%unk: .cameraDeviceIndex>\n%16 = this.<@ts_files/12.ts: CameraService.cameraManager>\nprofiles = instanceinvoke %16.<@%unk/%unk: .getSupportedOutputCapability()>(%15)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }"
        },
        {
          "type": "function",
          "name": "initCamera",
          "label": "initCamera",
          "start_line": 1,
          "end_line": 413,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "surfaceId = parameter0: string\ncameraDeviceIndex = parameter1: number\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "this.<@ts_files/12.ts: CameraService.isFirstRecord> = true\n%0 = 'initCamera cameraDeviceIndex: ' + cameraDeviceIndex\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %0)\n%1 = instanceinvoke this.<@ts_files/12.ts: CameraService.releaseCamera()>()\n%2 = await %1\ninstanceinvoke this.<@ts_files/12.ts: CameraService.getCameraManagerFn()>()\n%3 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\n%4 = @ts_files/12.ts: CameraMode.[static]NIGHT\n%5 = @ts_files/12.ts: CameraMode.[static]MACRO_PHOTO\n%6 = @ts_files/12.ts: CameraMode.[static]MACRO_VIDEO\n%7 = newarray (unknown)[4]\n%7[0] = %3\n%7[1] = %4\n%7[2] = %5\n%7[3] = %6\nnewModes = %7\n%8 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%9 = instanceinvoke newModes.<@%unk/%unk: .indexOf()>(%8)\nif %9 >= 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.getModeManagerFn()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedCamerasFn()>()\n%10 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%11 = instanceinvoke newModes.<@%unk/%unk: .indexOf()>(%10)\nif %11 >= 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedModeFn(number)>(cameraDeviceIndex)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.initProfile(number)>(cameraDeviceIndex)\n%12 = this.<@ts_files/12.ts: CameraService.previewProfileObj>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.createPreviewOutputFn(camera.Profile, string)>(%12, surfaceId)\ninstanceinvoke this.<@ts_files/12.ts: CameraService.previewOutputCallBack()>()\n%13 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%14 = @ts_files/12.ts: CameraMode.[static]SUPER_STAB\n%15 = %13 === %14\n%16 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%17 = @ts_files/12.ts: CameraMode.[static]VIDEO\n%18 = %16 === %17\n%19 = %15 || %18\nif %19 != false",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%20 = instanceinvoke this.<@ts_files/12.ts: CameraService.createAVRecorder()>()\n%21 = await %20\n%22 = instanceinvoke this.<@ts_files/12.ts: CameraService.createVideoOutput()>()\n%23 = await %22\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onVideoOutputChange()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%24 = this.<@ts_files/12.ts: CameraService.mReceiver>\n%25 = instanceinvoke %24.<@%unk/%unk: .getReceivingSurfaceId()>()\nmSurfaceId = await %25\n%26 = this.<@ts_files/12.ts: CameraService.photoProfileObj>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.createPhotoOutputFn(camera.Profile, string)>(%26, mSurfaceId)\ninstanceinvoke this.<@ts_files/12.ts: CameraService.photoOutPutCallBack()>()\n%27 = this.<@ts_files/12.ts: CameraService.cameras>\n%28 = %27.<@%unk/%unk: .cameraDeviceIndex>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.createCameraInputFn(camera.CameraDevice)>(%28)\n%29 = instanceinvoke this.<@ts_files/12.ts: CameraService.cameraInputOpenFn()>()\n%30 = await %29\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCameraStatusChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCameraInputChange()>()\n%31 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%32 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\nif %31 == %32",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%37 = instanceinvoke this.<@ts_files/12.ts: CameraService.portraitSessionFlowFn(number)>()\n%38 = await %37",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.testAbilityFunction()>()",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "return",
                                                      "start_line": 174,
                                                      "end_line": 1822,
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%33 = @ts_files/12.ts: CameraMode.[static]NIGHT\nif %31 == %33",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%39 = instanceinvoke this.<@ts_files/12.ts: CameraService.nightSessionFlowFn(number)>()\n%40 = await %39",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%34 = @ts_files/12.ts: CameraMode.[static]MACRO_PHOTO\nif %31 == %34",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%41 = instanceinvoke this.<@ts_files/12.ts: CameraService.macroPhotoSessionFlowFn(number)>()\n%42 = await %41",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%35 = @ts_files/12.ts: CameraMode.[static]MACRO_VIDEO\nif %31 == %35",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%43 = instanceinvoke this.<@ts_files/12.ts: CameraService.videoSessionFlowFn()>()\n%44 = await %43",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%36 = @ts_files/12.ts: CameraMode.[static]VIDEO\nif %31 == %36",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            },
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%45 = instanceinvoke this.<@ts_files/12.ts: CameraService.photoSessionFlowFn()>()\n%46 = await %45",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%47 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%48 = 'initCamera fail: ' + %47\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %48)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "isVideoFrameSupportedFn",
          "label": "isVideoFrameSupportedFn",
          "start_line": 1,
          "end_line": 478,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "videoFrame = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoProfiles>\nvideoProfile = instanceinvoke %0.<@%unk/%unk: .find()>(%AM12$isVideoFrameSupportedFn)\nif videoProfile === undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return %1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }"
        },
        {
          "type": "function",
          "name": "isExposureModeSupportedFn",
          "label": "isExposureModeSupportedFn",
          "start_line": 1,
          "end_line": 492,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "aeMode = parameter0: camera.ExposureMode\nthis = this: @ts_files/12.ts: CameraService\nisSupported = false\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return isSupported",
                  "start_line": 497,
                  "end_line": 501,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "isSupported = instanceinvoke session.<@%unk/%unk: .isExposureModeSupported()>(aeMode)\n%1 = 'isExposureModeSupported success, isSupported: ' + isSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn isSupported",
                  "start_line": 1,
                  "end_line": 501,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }"
        },
        {
          "type": "function",
          "name": "setExposureMode",
          "label": "setExposureMode",
          "start_line": 1,
          "end_line": 504,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "aeMode = parameter0: camera.ExposureMode\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke session.<@%unk/%unk: .setExposureMode()>(aeMode)\nexposureMode = undefined\nexposureMode = instanceinvoke session.<@%unk/%unk: .getExposureMode()>()\n%1 = 'getExposureMode success, exposureMode: ' + exposureMode\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }"
        },
        {
          "type": "function",
          "name": "isMeteringPoint",
          "label": "isMeteringPoint",
          "start_line": 1,
          "end_line": 518,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "point = parameter0: camera.Point\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "exposureMode = undefined\nexposureMode = instanceinvoke session.<@%unk/%unk: .getExposureMode()>()\n%1 = 'getExposureMode success, exposureMode: ' + exposureMode\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\ninstanceinvoke session.<@%unk/%unk: .setMeteringPoint()>(point)\nexposurePoint = undefined\nexposurePoint = instanceinvoke session.<@%unk/%unk: .getMeteringPoint()>()\n%2 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(exposurePoint)\n%3 = 'getMeteringPoint exposurePoint: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %3)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }"
        },
        {
          "type": "function",
          "name": "isExposureBiasRange",
          "label": "isExposureBiasRange",
          "start_line": 1,
          "end_line": 536,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "exposureBias = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'setExposureBias value ' + exposureBias\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %0)\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%1 = !session\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = newarray (any)[0]\nbiasRangeArray = %2\nbiasRangeArray = instanceinvoke session.<@%unk/%unk: .getExposureBiasRange()>()\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(biasRangeArray)\n%4 = 'getExposureBiasRange success, biasRangeArray: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %4)\ninstanceinvoke session.<@%unk/%unk: .setExposureBias()>(exposureBias)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }"
        },
        {
          "type": "function",
          "name": "isFocusModeSupported",
          "label": "isFocusModeSupported",
          "start_line": 1,
          "end_line": 553,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "focusMode = parameter0: camera.FocusMode\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 556,
                  "end_line": 1583,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke session.<@%unk/%unk: .isFocusModeSupported()>(focusMode)\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }"
        },
        {
          "type": "function",
          "name": "isFocusMode",
          "label": "isFocusMode",
          "start_line": 1,
          "end_line": 564,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "focusMode = parameter0: camera.FocusMode\nthis = this: @ts_files/12.ts: CameraService\nisSupported = instanceinvoke this.<@ts_files/12.ts: CameraService.isFocusModeSupported(camera.FocusMode)>(focusMode)\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isSupported)\n%1 = 'isFocusModeSupported isSupported: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\n%2 = !isSupported\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "session = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%3 = !session\nif %3 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke session.<@%unk/%unk: .setFocusMode()>(focusMode)\nreturn",
                      "start_line": 1,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }"
        },
        {
          "type": "function",
          "name": "isFocusPoint",
          "label": "isFocusPoint",
          "start_line": 1,
          "end_line": 582,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "point = parameter0: camera.Point\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke session.<@%unk/%unk: .setFocusPoint()>(point)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'setFocusPoint success')\nnowPoint = undefined\nnowPoint = instanceinvoke session.<@%unk/%unk: .getFocusPoint()>()\n%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(nowPoint)\n%2 = 'getFocusPoint success, nowPoint: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }"
        },
        {
          "type": "function",
          "name": "hasFlashFn",
          "label": "hasFlashFn",
          "start_line": 1,
          "end_line": 599,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "flashMode = parameter0: camera.FlashMode\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "hasFlash = instanceinvoke session.<@%unk/%unk: .hasFlash()>()\n%1 = 'hasFlash success, hasFlash: ' + hasFlash\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %1)\nisFlashModeSupported = instanceinvoke session.<@%unk/%unk: .isFlashModeSupported()>(flashMode)\n%2 = 'isFlashModeSupported success, isFlashModeSupported: ' + isFlashModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %2)\ninstanceinvoke session.<@%unk/%unk: .setFlashMode()>(flashMode)\nnowFlashMode = instanceinvoke session.<@%unk/%unk: .getFlashMode()>()\n%3 = 'getFlashMode success, nowFlashMode: ' + nowFlashMode\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %3)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }"
        },
        {
          "type": "function",
          "name": "getSession",
          "label": "getSession",
          "start_line": 1,
          "end_line": 617,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nsession = undefined\n%0 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%1 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\nif %0 == %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = this.<@ts_files/12.ts: CameraService.portraitSession>\nreturn %6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = @ts_files/12.ts: CameraMode.[static]NIGHT\nif %0 == %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = this.<@ts_files/12.ts: CameraService.nightSession>\nreturn %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = @ts_files/12.ts: CameraMode.[static]MACRO_PHOTO\nif %0 == %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\nreturn %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = @ts_files/12.ts: CameraMode.[static]VIDEO\nif %0 == %4",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = this.<@ts_files/12.ts: CameraService.videoSession>\nreturn %9",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = @ts_files/12.ts: CameraMode.[static]NORMAL\nif %0 == %5",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%10 = this.<@ts_files/12.ts: CameraService.photoSession>\nreturn %10",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%11 = this.<@ts_files/12.ts: CameraService.captureSession>\nreturn %11",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setZoomRatioFn",
          "label": "setZoomRatioFn",
          "start_line": 1,
          "end_line": 638,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "zoomRatio = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'setZoomRatioFn value ' + zoomRatio\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %0)\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%1 = !session\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "zoomRatioRange = instanceinvoke session.<@%unk/%unk: .getZoomRatioRange()>()\n%2 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(zoomRatioRange)\n%3 = 'getZoomRatioRange success: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %3)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke session.<@%unk/%unk: .setZoomRatio()>(zoomRatio)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'setZoomRatioFn success')",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "nowZoomRatio = instanceinvoke session.<@%unk/%unk: .getZoomRatio()>()\n%8 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(nowZoomRatio)\n%9 = 'getZoomRatio nowZoomRatio: ' + %8\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %9)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "return",
                                          "start_line": 174,
                                          "end_line": 1822,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%5 = 'getZoomRatioRange fail: ' + %4\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%6 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%7 = 'setZoomRatioFn fail: ' + %6\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %7)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%10 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%11 = 'getZoomRatio fail: ' + %10\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %11)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "isVideoStabilizationModeSupportedFn",
          "label": "isVideoStabilizationModeSupportedFn",
          "start_line": 1,
          "end_line": 678,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "videoStabilizationMode = parameter0: camera.VideoStabilizationMode\nthis = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\nisVideoStabilizationModeSupported = instanceinvoke session.<@%unk/%unk: .isVideoStabilizationModeSupported()>(videoStabilizationMode)\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isVideoStabilizationModeSupported)\n%1 = 'isVideoStabilizationModeSupported success: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn isVideoStabilizationModeSupported",
              "start_line": 1,
              "end_line": 678,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }"
        },
        {
          "type": "function",
          "name": "setVideoStabilizationMode",
          "label": "setVideoStabilizationMode",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "videoStabilizationMode = parameter0: camera.VideoStabilizationMode\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'setVideoStabilizationMode: ' + videoStabilizationMode\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %0)\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\ninstanceinvoke session.<@%unk/%unk: .setVideoStabilizationMode()>(videoStabilizationMode)\nnowVideoStabilizationMod = instanceinvoke session.<@%unk/%unk: .getActiveVideoStabilizationMode()>()\n%1 = 'getActiveVideoStabilizationMode nowVideoStabilizationMod: ' + nowVideoStabilizationMod\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }"
        },
        {
          "type": "function",
          "name": "isNightModeSupportedFn",
          "label": "isNightModeSupportedFn",
          "start_line": 1,
          "end_line": 696,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = @ts_files/12.ts: CameraMode.[static]NIGHT\n%1 = this.<@ts_files/12.ts: CameraService.sceneModes>\n%2 = instanceinvoke %1.<@%unk/%unk: .indexOf()>(%0)\nisSupportNightMode = %2 >= 0\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isSupportNightMode)\n%4 = 'isSupportNightMode success: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn isSupportNightMode",
              "start_line": 1,
              "end_line": 696,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }"
        },
        {
          "type": "function",
          "name": "isPortraitModeSupportedFn",
          "label": "isPortraitModeSupportedFn",
          "start_line": 1,
          "end_line": 705,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\n%1 = this.<@ts_files/12.ts: CameraService.sceneModes>\n%2 = instanceinvoke %1.<@%unk/%unk: .indexOf()>(%0)\nisSupportPortraitMode = %2 >= 0\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isSupportPortraitMode)\n%4 = 'isSupportPortraitMode success: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn isSupportPortraitMode",
              "start_line": 1,
              "end_line": 705,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }"
        },
        {
          "type": "function",
          "name": "isMacroPhotoModeSupportedFn",
          "label": "isMacroPhotoModeSupportedFn",
          "start_line": 1,
          "end_line": 714,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = @ts_files/12.ts: CameraMode.[static]MACRO_PHOTO\n%1 = this.<@ts_files/12.ts: CameraService.sceneModes>\n%2 = instanceinvoke %1.<@%unk/%unk: .indexOf()>(%0)\nisSupportMacroMode = %2 >= 0\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isSupportMacroMode)\n%4 = 'isSupportMacroMode success: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn isSupportMacroMode",
              "start_line": 1,
              "end_line": 714,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }"
        },
        {
          "type": "function",
          "name": "isMirrorSupportedFn",
          "label": "isMirrorSupportedFn",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.photoOutPut>\nisSupported = instanceinvoke %0.<@%unk/%unk: .isMirrorSupported()>()\n%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(isSupported)\n%2 = 'isMirrorSupported success Bol: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(photoUri: string) => void"
        },
        {
          "type": "function",
          "name": "setTakePictureCallback",
          "label": "setTakePictureCallback",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "callback = parameter0: @ts_files/12.ts: CameraService.%AM0(string)\nthis = this: @ts_files/12.ts: CameraService\nthis.<@ts_files/12.ts: CameraService.handleTakePicture> = callback\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }"
        },
        {
          "type": "function",
          "name": "onChangeRotation",
          "label": "onChangeRotation",
          "start_line": 1,
          "end_line": 732,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('cameraConfig')\ncameraConfig = <CameraConfig>%1\n%2 = cameraConfig.<@%unk/%unk: .photoOrientation>\n%3 = @ts_files/12.ts: PhotoOrientation.[static]ORIENTATION_1\nif %2 == %3",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = this.<@ts_files/12.ts: CameraService.photoRotationMap>\n%8 = %7.<@ts_files/12.ts: %AC$CameraService$%instInit$12.rotation90>\nreturn %8",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = @ts_files/12.ts: PhotoOrientation.[static]ORIENTATION_2\nif %2 == %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = this.<@ts_files/12.ts: CameraService.photoRotationMap>\n%10 = %9.<@ts_files/12.ts: %AC$CameraService$%instInit$12.rotation180>\nreturn %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = @ts_files/12.ts: PhotoOrientation.[static]ORIENTATION_3\nif %2 == %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = this.<@ts_files/12.ts: CameraService.photoRotationMap>\n%12 = %11.<@ts_files/12.ts: %AC$CameraService$%instInit$12.rotation270>\nreturn %12",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = @ts_files/12.ts: PhotoOrientation.[static]ORIENTATION_0\nif %2 == %6",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%13 = this.<@ts_files/12.ts: CameraService.photoRotationMap>\n%14 = %13.<@ts_files/12.ts: %AC$CameraService$%instInit$12.rotation0>\nreturn %14",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onChangeLocation",
          "label": "onChangeLocation",
          "start_line": 1,
          "end_line": 750,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('cameraConfig')\ncameraConfig = <CameraConfig>%1\n%2 = cameraConfig.<@%unk/%unk: .locationBol>\nif %2 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @ts_files/12.ts: %AC$CameraService$onChangeLocation$26\ninstanceinvoke %3.<@ts_files/12.ts: %AC$CameraService$onChangeLocation$26.constructor()>()\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = new @ts_files/12.ts: %AC$CameraService$onChangeLocation$27\ninstanceinvoke %4.<@ts_files/12.ts: %AC$CameraService$onChangeLocation$27.constructor()>()\nreturn %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }"
        },
        {
          "type": "function",
          "name": "takePicture",
          "label": "takePicture",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mirrorBol = parameter0: boolean\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'takePicture start')\nmirrorBol = mirrorBol || false\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isMirrorSupportedFn()>()\n%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('cameraConfig')\ncameraConfig = <CameraConfig>%1\n%2 = new @ts_files/12.ts: %AC$CameraService$takePicture$28\ninstanceinvoke %2.<@ts_files/12.ts: %AC$CameraService$takePicture$28.constructor()>()\nphotoSettings = %2\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoSettings)\n%4 = 'takePicture photoSettings:' + %3\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %4)\n%5 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%6 = instanceinvoke %5.<@%unk/%unk: .capture()>(photoSettings)\n%7 = await %6\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'takePicture end')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }"
        },
        {
          "type": "function",
          "name": "prepareAVRecorder",
          "label": "prepareAVRecorder",
          "start_line": 1,
          "end_line": 790,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke this.<@ts_files/12.ts: CameraService.initUrl()>()\n%1 = await %0\ndeviceType = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%2 = Constants.<@%unk/%unk: .DEFAULT>\nif deviceType === %2",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = media.<@%unk/%unk: .VideoSourceType>\n%5 = %4.<@%unk/%unk: .VIDEO_SOURCE_TYPE_SURFACE_ES>\n%3 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%3.<@ts_files/12.ts: %AC$CameraService$%instInit$1.videoSourceType> = %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = Constants.<@%unk/%unk: .PHONE>\nif deviceType === %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = media.<@%unk/%unk: .VideoSourceType>\n%9 = %8.<@%unk/%unk: .VIDEO_SOURCE_TYPE_SURFACE_YUV>\n%7 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%7.<@ts_files/12.ts: %AC$CameraService$%instInit$1.videoSourceType> = %9\n%12 = media.<@%unk/%unk: .CodecMimeType>\n%13 = %12.<@%unk/%unk: .VIDEO_AVC>\n%10 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%11 = %10.<@ts_files/12.ts: %AC$CameraService$%instInit$1.profile>\n%11.<@%unk/%unk: .videoCodec> = %13\n%15 = this.<@ts_files/12.ts: CameraService.photoRotationMap>\n%16 = %15.<@ts_files/12.ts: %AC$CameraService$%instInit$12.rotation90>\n%14 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%14.<@ts_files/12.ts: %AC$CameraService$%instInit$1.rotation> = %16",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%17 = Constants.<@%unk/%unk: .TABLET>\nif deviceType === %17",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%19 = media.<@%unk/%unk: .VideoSourceType>\n%20 = %19.<@%unk/%unk: .VIDEO_SOURCE_TYPE_SURFACE_YUV>\n%18 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%18.<@ts_files/12.ts: %AC$CameraService$%instInit$1.videoSourceType> = %20",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%23 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%24 = %23.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%25 = %24.<@%unk/%unk: .width>\n%21 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%22 = %21.<@ts_files/12.ts: %AC$CameraService$%instInit$1.profile>\n%22.<@%unk/%unk: .videoFrameWidth> = %25\n%28 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%29 = %28.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%30 = %29.<@%unk/%unk: .height>\n%26 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%27 = %26.<@ts_files/12.ts: %AC$CameraService$%instInit$1.profile>\n%27.<@%unk/%unk: .videoFrameHeight> = %30\n%33 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%34 = %33.<@ts_files/12.ts: %AC$CameraService$%instInit$3.frameRateRange>\n%35 = %34.<@%unk/%unk: .max>\n%31 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%32 = %31.<@ts_files/12.ts: %AC$CameraService$%instInit$1.profile>\n%32.<@%unk/%unk: .videoFrameRate> = %35\n%36 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%37 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%36)\n%38 = 'prepareAVRecorder deviceType: ' + deviceType\n%39 = %38 + ', videoSourceType: '\n%40 = %39 + %37\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %40)\n%41 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%42 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%43 = instanceinvoke %42.<@%unk/%unk: .prepare()>(%41)\n%44 = instanceinvoke %43.<@%unk/%unk: .catch()>(%AM13$prepareAVRecorder)\n%45 = await %44\nreturn",
                                      "start_line": 1,
                                      "end_line": 1822,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "getAVRecorderSurfaceId",
          "label": "getAVRecorderSurfaceId",
          "start_line": 1,
          "end_line": 813,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%1 = instanceinvoke %0.<@%unk/%unk: .getInputSurface()>()\nreturn await %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }"
        },
        {
          "type": "function",
          "name": "createAVRecorder",
          "label": "createAVRecorder",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke media.<@%unk/%unk: .createAVRecorder()>()\nthis.<@ts_files/12.ts: CameraService.videoRecorder> = await %0\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }"
        },
        {
          "type": "function",
          "name": "createVideoOutput",
          "label": "createVideoOutput",
          "start_line": 1,
          "end_line": 824,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'createVideoOutput start')\n%0 = instanceinvoke this.<@ts_files/12.ts: CameraService.prepareAVRecorder()>()\n%1 = await %0\n%2 = instanceinvoke this.<@ts_files/12.ts: CameraService.getAVRecorderSurfaceId()>()\nvideoId = await %2\n%3 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%3)\n%5 = 'createVideoOutput videoProfileObj: ' + %4\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %5)\n%6 = this.<@ts_files/12.ts: CameraService.globalContext>\n%7 = instanceinvoke %6.<@%unk/%unk: .getObject()>('cameraConfig')\n%8 = <CameraConfig>%7\nhdrVideoBol = %8.<@%unk/%unk: .hdrVideoBol>\n%9 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%10 = @ts_files/12.ts: CameraMode.[static]VIDEO\n%11 = %9 === %10\n%12 = %11 && hdrVideoBol\nif %12 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%14 = camera.<@%unk/%unk: .CameraFormat>\n%15 = %14.<@%unk/%unk: .CAMERA_FORMAT_YCRCB_P010>\n%13 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%13.<@ts_files/12.ts: %AC$CameraService$%instInit$3.format> = %15",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%16 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%17 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%18 = instanceinvoke %17.<@%unk/%unk: .createVideoOutput()>(%16, videoId)\nthis.<@ts_files/12.ts: CameraService.videoOutput> = %18\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'createVideoOutput end')\nreturn",
                      "start_line": 1,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }"
        },
        {
          "type": "function",
          "name": "pauseVideo",
          "label": "pauseVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%1 = instanceinvoke %0.<@%unk/%unk: .pause()>()\n%2 = instanceinvoke %1.<@%unk/%unk: .then()>(%AM15$pauseVideo)\n%3 = instanceinvoke %2.<@%unk/%unk: .catch()>(%AM14$pauseVideo)\n%4 = await %3\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "resumeVideo",
          "label": "resumeVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoOutput>\n%1 = instanceinvoke %0.<@%unk/%unk: .start()>()\ninstanceinvoke %1.<@%unk/%unk: .then()>(%AM16$resumeVideo)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }"
        },
        {
          "type": "function",
          "name": "initUrl",
          "label": "initUrl",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke Date.<@%unk/%unk: .now()>()\n%1 = %0 + '.mp4'\nfileName = %1\n%2 = this.<@ts_files/12.ts: CameraService.accessHelper>\n%3 = instanceinvoke %2.<@%unk/%unk: .createAsset()>(fileName)\nthis.<@ts_files/12.ts: CameraService.fileAsset> = await %3\n%4 = this.<@ts_files/12.ts: CameraService.fileAsset>\n%5 = instanceinvoke %4.<@%unk/%unk: .open()>('rw')\nthis.<@ts_files/12.ts: CameraService.fd> = await %5\n%7 = this.<@ts_files/12.ts: CameraService.fd>\n%8 = instanceinvoke %7.<@%unk/%unk: .toString()>()\n%9 = 'fd://' + %8\n%6 = this.<@ts_files/12.ts: CameraService.videoConfig>\n%6.<@ts_files/12.ts: %AC$CameraService$%instInit$1.url> = %9\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }"
        },
        {
          "type": "function",
          "name": "startVideo",
          "label": "startVideo",
          "start_line": 1,
          "end_line": 878,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'startVideo begin')\n%0 = this.<@ts_files/12.ts: CameraService.videoOutput>\n%1 = instanceinvoke %0.<@%unk/%unk: .start()>()\n%2 = await %1\nthis.<@ts_files/12.ts: CameraService.videoOutputStatus> = true\n%3 = this.<@ts_files/12.ts: CameraService.isFirstRecord>\n%4 = !%3\nif %4 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke this.<@ts_files/12.ts: CameraService.prepareAVRecorder()>()\n%6 = await %5\n%7 = instanceinvoke this.<@ts_files/12.ts: CameraService.getAVRecorderSurfaceId()>()\n%8 = await %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%10 = instanceinvoke %9.<@%unk/%unk: .start()>()\n%11 = await %10\nthis.<@ts_files/12.ts: CameraService.isFirstRecord> = false\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('isRecorder', true)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'startVideo end')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 174,
                              "end_line": 1822,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%12 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%13 = 'startVideo err: ' + %12\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %13)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "releaseVideoRecorder",
          "label": "releaseVideoRecorder",
          "start_line": 1,
          "end_line": 897,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoRecorder>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%2 = instanceinvoke %1.<@%unk/%unk: .release()>()\n%3 = await %2\nthis.<@ts_files/12.ts: CameraService.videoOutputStatus> = false\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('isRecorder', false)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%5 = 'stopVideo err: ' + %4\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "stopVideo",
          "label": "stopVideo",
          "start_line": 1,
          "end_line": 937,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nisRecorder = instanceinvoke AppStorage.<@%unk/%unk: .get()>('isRecorder')\n%0 = !isRecorder\nif %0 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'not in recording')\nreturn undefined",
                  "start_line": 1,
                  "end_line": 937,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'stopVideo start')\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('isRecorder', false)\n%1 = this.<@ts_files/12.ts: CameraService.videoRecorder>\nif %1 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%2 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%3 = instanceinvoke %2.<@%unk/%unk: .stop()>()\n%4 = await %3",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = this.<@ts_files/12.ts: CameraService.videoOutputStatus>\nif %5 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%6 = this.<@ts_files/12.ts: CameraService.videoOutput>\n%7 = instanceinvoke %6.<@%unk/%unk: .stop()>()\n%8 = await %7\nthis.<@ts_files/12.ts: CameraService.videoOutputStatus> = false",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%9 = this.<@ts_files/12.ts: CameraService.fileAsset>\nif %9 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%10 = this.<@ts_files/12.ts: CameraService.fd>\n%11 = this.<@ts_files/12.ts: CameraService.fileAsset>\n%12 = instanceinvoke %11.<@%unk/%unk: .close()>(%10)\n%13 = await %12\n%14 = this.<@ts_files/12.ts: CameraService.fileAsset>\nreturn %14",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": []
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "return undefined",
                                          "start_line": 917,
                                          "end_line": 937,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%15 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%16 = 'stopVideo err: ' + %15\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %16)\nreturn undefined",
              "start_line": 1,
              "end_line": 937,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "releaseCamera",
          "label": "releaseCamera",
          "start_line": 1,
          "end_line": 944,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'releaseCamera is called')\n%0 = instanceinvoke this.<@ts_files/12.ts: CameraService.stopVideo()>()\n%1 = await %0\n%2 = instanceinvoke this.<@ts_files/12.ts: CameraService.releaseVideoRecorder()>()\n%3 = await %2\n%4 = this.<@ts_files/12.ts: CameraService.previewOutput>\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%6 = instanceinvoke %5.<@%unk/%unk: .stop()>()\n%7 = await %6\n%8 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%9 = instanceinvoke %8.<@%unk/%unk: .release()>()\n%10 = await %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "this.<@ts_files/12.ts: CameraService.previewOutput> = null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%13 = this.<@ts_files/12.ts: CameraService.photoOutPut>\nif %13 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%14 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%15 = instanceinvoke %14.<@%unk/%unk: .release()>()\n%16 = await %15",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "this.<@ts_files/12.ts: CameraService.photoOutPut> = null",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%19 = this.<@ts_files/12.ts: CameraService.videoOutput>\nif %19 != 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%20 = this.<@ts_files/12.ts: CameraService.videoOutput>\n%21 = instanceinvoke %20.<@%unk/%unk: .release()>()\n%22 = await %21",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "this.<@ts_files/12.ts: CameraService.videoOutput> = null",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%25 = this.<@ts_files/12.ts: CameraService.photoSession>\nif %25 != 0",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%26 = this.<@ts_files/12.ts: CameraService.photoSession>\n%27 = instanceinvoke %26.<@%unk/%unk: .release()>()\n%28 = await %27",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "this.<@ts_files/12.ts: CameraService.photoSession> = null",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "%31 = this.<@ts_files/12.ts: CameraService.videoSession>\nif %31 != 0",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "%32 = this.<@ts_files/12.ts: CameraService.videoSession>\n%33 = instanceinvoke %32.<@%unk/%unk: .release()>()\n%34 = await %33",
                                                                                      "start_line": 1,
                                                                                      "end_line": 1,
                                                                                      "successors": [
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "this.<@ts_files/12.ts: CameraService.videoSession> = null",
                                                                                          "start_line": 1,
                                                                                          "end_line": 1,
                                                                                          "successors": [
                                                                                            {
                                                                                              "type": "block",
                                                                                              "name": "Block?",
                                                                                              "label": "%37 = this.<@ts_files/12.ts: CameraService.portraitSession>\nif %37 != 0",
                                                                                              "start_line": 1,
                                                                                              "end_line": 1,
                                                                                              "successors": [
                                                                                                {
                                                                                                  "type": "block",
                                                                                                  "name": "Block?",
                                                                                                  "label": "",
                                                                                                  "start_line": 1,
                                                                                                  "end_line": 1,
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "type": "block",
                                                                                                      "name": "Block?",
                                                                                                      "label": "%38 = this.<@ts_files/12.ts: CameraService.portraitSession>\n%39 = instanceinvoke %38.<@%unk/%unk: .release()>()\n%40 = await %39",
                                                                                                      "start_line": 1,
                                                                                                      "end_line": 1,
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "type": "block",
                                                                                                          "name": "Block?",
                                                                                                          "label": "this.<@ts_files/12.ts: CameraService.portraitSession> = null",
                                                                                                          "start_line": 1,
                                                                                                          "end_line": 1,
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "type": "block",
                                                                                                              "name": "Block?",
                                                                                                              "label": "%43 = this.<@ts_files/12.ts: CameraService.nightSession>\nif %43 != 0",
                                                                                                              "start_line": 1,
                                                                                                              "end_line": 1,
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "type": "block",
                                                                                                                  "name": "Block?",
                                                                                                                  "label": "",
                                                                                                                  "start_line": 1,
                                                                                                                  "end_line": 1,
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "type": "block",
                                                                                                                      "name": "Block?",
                                                                                                                      "label": "%44 = this.<@ts_files/12.ts: CameraService.nightSession>\n%45 = instanceinvoke %44.<@%unk/%unk: .release()>()\n%46 = await %45",
                                                                                                                      "start_line": 1,
                                                                                                                      "end_line": 1,
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "type": "block",
                                                                                                                          "name": "Block?",
                                                                                                                          "label": "this.<@ts_files/12.ts: CameraService.nightSession> = null",
                                                                                                                          "start_line": 1,
                                                                                                                          "end_line": 1,
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "type": "block",
                                                                                                                              "name": "Block?",
                                                                                                                              "label": "%49 = this.<@ts_files/12.ts: CameraService.cameraInput>\nif %49 != 0",
                                                                                                                              "start_line": 1,
                                                                                                                              "end_line": 1,
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "type": "block",
                                                                                                                                  "name": "Block?",
                                                                                                                                  "label": "",
                                                                                                                                  "start_line": 1,
                                                                                                                                  "end_line": 1,
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "type": "block",
                                                                                                                                      "name": "Block?",
                                                                                                                                      "label": "%50 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%51 = instanceinvoke %50.<@%unk/%unk: .close()>()\n%52 = await %51",
                                                                                                                                      "start_line": 1,
                                                                                                                                      "end_line": 1,
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "type": "block",
                                                                                                                                          "name": "Block?",
                                                                                                                                          "label": "this.<@ts_files/12.ts: CameraService.cameraInput> = null",
                                                                                                                                          "start_line": 1,
                                                                                                                                          "end_line": 1,
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "type": "block",
                                                                                                                                              "name": "Block?",
                                                                                                                                              "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'releaseCamera success')\nreturn",
                                                                                                                                              "start_line": 1,
                                                                                                                                              "end_line": 1822,
                                                                                                                                              "successors": []
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                  "type": "blockRef",
                                                                                                                                  "label": "(RepeatedBlock)"
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                },
                                                                                                                {
                                                                                                                  "type": "blockRef",
                                                                                                                  "label": "(RepeatedBlock)"
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                {
                                                                                                  "type": "blockRef",
                                                                                                  "label": "(RepeatedBlock)"
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "blockRef",
                                                                                  "label": "(RepeatedBlock)"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%11 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%12 = 'previewOutput release fail: error: ' + %11\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%17 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%18 = 'photoOutPut release fail: error: ' + %17\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %18)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%23 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%24 = 'videoOutput release fail: error: ' + %23\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %24)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%29 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%30 = 'photoSession release fail: error: ' + %29\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %30)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%35 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%36 = 'videoSession release fail: error: ' + %35\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %36)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%41 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%42 = 'portraitSession release fail: error: ' + %41\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %42)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%47 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%48 = 'nightSession release fail: error: ' + %47\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %48)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%53 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%54 = 'cameraInput close fail: error: ' + %53\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %54)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%55 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.previewOutput> = null\nthrow %55",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%56 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.photoOutPut> = null\nthrow %56",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%57 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.videoOutput> = null\nthrow %57",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%58 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.photoSession> = null\nthrow %58",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%59 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.videoSession> = null\nthrow %59",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%60 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.portraitSession> = null\nthrow %60",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%61 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.nightSession> = null\nthrow %61",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%62 = caughtexception: unknown\nthis.<@ts_files/12.ts: CameraService.cameraInput> = null\nthrow %62",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }"
        },
        {
          "type": "function",
          "name": "getCameraManagerFn",
          "label": "getCameraManagerFn",
          "start_line": 1,
          "end_line": 1036,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.cameraManager>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = instanceinvoke GlobalContext.<@%unk/%unk: .get()>()\n%2 = instanceinvoke %1.<@%unk/%unk: .getCameraSettingContext()>()\n%3 = instanceinvoke camera.<@%unk/%unk: .getCameraManager()>(%2)\nthis.<@ts_files/12.ts: CameraService.cameraManager> = %3\n%4 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%5 = 'getCameraManager success: ' + %4\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %5)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%6 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%7 = 'getCameraManager failed: ' + %6\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %7)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getModeManagerFn",
          "label": "getModeManagerFn",
          "start_line": 1,
          "end_line": 1049,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke GlobalContext.<@%unk/%unk: .get()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getCameraSettingContext()>()\n%2 = instanceinvoke camera.<@%unk/%unk: .getCameraManager()>(%1)\nthis.<@ts_files/12.ts: CameraService.cameraManager> = %2\n%3 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%4 = 'getModeManagerFn success: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'getModeManagerFn failed: ' + %5\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getSupportedCamerasFn",
          "label": "getSupportedCamerasFn",
          "start_line": 1,
          "end_line": 1062,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%1 = instanceinvoke %0.<@%unk/%unk: .getSupportedCameras()>()\nthis.<@ts_files/12.ts: CameraService.cameras> = %1\n%2 = this.<@ts_files/12.ts: CameraService.cameras>\n%3 = this.<@ts_files/12.ts: CameraService.cameras>\n%4 = %3.<@%unk/%unk: .length>\n%5 = 'getSupportedCameras success: ' + %2\n%6 = %5 + ', length: '\n%7 = %6 + %4\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %7)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%8 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%9 = 'getSupportedCameras failed: ' + %8\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %9)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getSupportedModeFn",
          "label": "getSupportedModeFn",
          "start_line": 1,
          "end_line": 1072,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = %0.<@%unk/%unk: .cameraIndex>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .getSupportedSceneModes()>(%1)\nthis.<@ts_files/12.ts: CameraService.sceneModes> = %3\n%4 = this.<@ts_files/12.ts: CameraService.sceneModes>\n%5 = this.<@ts_files/12.ts: CameraService.sceneModes>\n%6 = %5.<@%unk/%unk: .length>\n%7 = 'getSupportedModeFn success: ' + %4\n%8 = %7 + ', length: '\n%9 = %8 + %6\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %9)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%10 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%11 = 'getSupportedModeFn failed: ' + %10\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %11)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getSupportedOutputCapabilityFn",
          "label": "getSupportedOutputCapabilityFn",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraDeviceIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = %0.<@%unk/%unk: .cameraDeviceIndex>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .getSupportedOutputCapability()>(%1)\nthis.<@ts_files/12.ts: CameraService.cameraOutputCapability> = %3\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }"
        },
        {
          "type": "function",
          "name": "createPreviewOutputFn",
          "label": "createPreviewOutputFn",
          "start_line": 1,
          "end_line": 1092,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "photoProfileObj = parameter0: camera.Profile\nsurfaceId = parameter1: string\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('cameraConfig')\n%2 = <CameraConfig>%1\nhdrVideoBol = %2.<@%unk/%unk: .hdrVideoBol>\n%3 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%4 = @ts_files/12.ts: CameraMode.[static]VIDEO\n%5 = %3 === %4\n%6 = %5 && hdrVideoBol\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = camera.<@%unk/%unk: .CameraFormat>\n%8 = %7.<@%unk/%unk: .CAMERA_FORMAT_YCRCB_P010>\nphotoProfileObj.<@%unk/%unk: .format> = %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%10 = instanceinvoke %9.<@%unk/%unk: .createPreviewOutput()>(photoProfileObj, surfaceId)\nthis.<@ts_files/12.ts: CameraService.previewOutput> = %10\n%11 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%12 = 'createPreviewOutput success: ' + %11\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %12)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 174,
                              "end_line": 1822,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%13 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%14 = 'createPreviewOutput failed: ' + %13\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %14)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createPhotoOutputFn",
          "label": "createPhotoOutputFn",
          "start_line": 1,
          "end_line": 1109,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "photoProfileObj = parameter0: camera.Profile\nsurfaceId = parameter1: string\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoProfileObj)\n%1 = this.<@ts_files/12.ts: CameraService.captureMode>\n%2 = 'createPhotoOutputFn photoProfiles: ' + %0\n%3 = %2 + ' ,captureMode: '\n%4 = %3 + %1\n%5 = %4 + ', surfaceId: '\n%6 = %5 + surfaceId\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %6)\n%7 = this.<@ts_files/12.ts: CameraService.captureMode>\n%8 = @ts_files/12.ts: CaptureMode.[static]OLD_CAPTURE\nif %7 == %8",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%11 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%12 = instanceinvoke %11.<@%unk/%unk: .createPhotoOutput()>(photoProfileObj, surfaceId)\nthis.<@ts_files/12.ts: CameraService.photoOutPut> = %12",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = @ts_files/12.ts: CaptureMode.[static]NEW_CAPTURE\nif %7 == %9",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%14 = instanceinvoke %13.<@%unk/%unk: .createPhotoOutput()>(photoProfileObj)\nthis.<@ts_files/12.ts: CameraService.photoOutPut> = %14\n%15 = this.<@ts_files/12.ts: CameraService.photoOutPut>\nif %15 == null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Logger.<@%unk/%unk: .error()>(TAG, 'createPhotoOutputFn createPhotoOutput failed')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = @ts_files/12.ts: CaptureMode.[static]NEW_DEFERRED_PHOTO\nif %7 == %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createCameraInputFn",
          "label": "createCameraInputFn",
          "start_line": 1,
          "end_line": 1128,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraDevice = parameter0: camera.CameraDevice\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'createCameraInputFn is called.')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%1 = instanceinvoke %0.<@%unk/%unk: .createCameraInput()>(cameraDevice)\nthis.<@ts_files/12.ts: CameraService.cameraInput> = %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }"
        },
        {
          "type": "function",
          "name": "cameraInputOpenFn",
          "label": "cameraInputOpenFn",
          "start_line": 1,
          "end_line": 1140,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%1 = instanceinvoke %0.<@%unk/%unk: .open()>()\n%2 = await %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'cameraInput open success')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%4 = 'createCameraInput failed : ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %4)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "configMoonCaptureBoost",
          "label": "configMoonCaptureBoost",
          "start_line": 1,
          "end_line": 1153,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = camera.<@%unk/%unk: .SceneFeatureType>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.MOON_CAPTURE_BOOST>\n%2 = this.<@ts_files/12.ts: CameraService.photoSession>\n%3 = instanceinvoke %2.<@%unk/%unk: .isSceneFeatureSupported()>(%1)\nthis.<@ts_files/12.ts: CameraService.isMoonCaptureBoostSupported> = %3\n%4 = this.<@ts_files/12.ts: CameraService.isMoonCaptureBoostSupported>\nif %4 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = camera.<@%unk/%unk: .SceneFeatureType>\n%6 = %5.<@%unk/%unk: .MOON_CAPTURE_BOOST>\n%7 = this.<@ts_files/12.ts: CameraService.photoSession>\ninstanceinvoke %7.<@%unk/%unk: .on()>('featureDetectionStatus', %6, %AM19$configMoonCaptureBoost)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%8 = err.<@%unk/%unk: .code>\n%9 = 'isMoonCaptureBoostSupported fail: error code ' + %8\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %9)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "photoSessionFlowFn",
          "label": "photoSessionFlowFn",
          "start_line": 1,
          "end_line": 1181,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'photoSessionFlowFn start')\n%0 = camera.<@%unk/%unk: .SceneMode>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.NORMAL_PHOTO>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .createSession()>(%1)\nthis.<@ts_files/12.ts: CameraService.photoSession> = %3\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onFocusStateChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCaptureSessionErrorChange()>()\n%4 = this.<@ts_files/12.ts: CameraService.photoSession>\ninstanceinvoke %4.<@%unk/%unk: .beginConfig()>()\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%6 = this.<@ts_files/12.ts: CameraService.photoSession>\ninstanceinvoke %6.<@%unk/%unk: .addInput()>(%5)\n%7 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%8 = this.<@ts_files/12.ts: CameraService.photoSession>\ninstanceinvoke %8.<@%unk/%unk: .addOutput()>(%7)\n%9 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%10 = this.<@ts_files/12.ts: CameraService.photoSession>\ninstanceinvoke %10.<@%unk/%unk: .addOutput()>(%9)\n%11 = this.<@ts_files/12.ts: CameraService.globalContext>\n%12 = instanceinvoke %11.<@%unk/%unk: .getObject()>('cameraConfig')\n%13 = <CameraConfig>%12\nhdrPhotoBol = %13.<@%unk/%unk: .hdrPhotoBol>\n%14 = 'hdrPhotoBol:' + hdrPhotoBol\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %14)\nif hdrPhotoBol != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%15 = this.<@ts_files/12.ts: CameraService.photoSession>\n%16 = colorSpaceManager.<@%unk/%unk: .ColorSpace>\n%17 = %16.<@%unk/%unk: .DISPLAY_P3>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)>(%15, %17)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%21 = this.<@ts_files/12.ts: CameraService.captureMode>\n%22 = @ts_files/12.ts: CaptureMode.[static]NEW_DEFERRED_PHOTO\nif %21 === %22",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%23 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%24 = %23.<@%unk/%unk: .PHOTO>\n%25 = instanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)>(%24)\nif %25 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%26 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%27 = %26.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)>(%27)\n%28 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%29 = %28.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)>(%29)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%30 = this.<@ts_files/12.ts: CameraService.photoSession>\n%31 = instanceinvoke %30.<@%unk/%unk: .commitConfig()>()\n%32 = await %31",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%33 = this.<@ts_files/12.ts: CameraService.photoSession>\nrange = instanceinvoke %33.<@%unk/%unk: .getZoomRatioRange()>()\n%34 = 'getZoomRatioRange:' + range\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %34)\nif range != 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%35 = range[0]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMin', %35)\n%36 = range[1]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMax', %36)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%37 = this.<@ts_files/12.ts: CameraService.photoSession>\nzoomPointInfo = instanceinvoke %37.<@%unk/%unk: .getZoomPointInfos()>()\nif zoomPointInfo != 0",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%38 = zoomPointInfo[0]\n%39 = %38.<@%unk/%unk: .zoomRatio>\n%40 = zoomPointInfo[0]\n%41 = %40.<@%unk/%unk: .equivalentFocalLength>\n%42 = 'getZoomPointInfos zoomRatio:' + %39\n%43 = %42 + ' equivalentFocalLength:'\n%44 = %43 + %41\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %44)\n%45 = zoomPointInfo[0]\n%46 = %45.<@%unk/%unk: .equivalentFocalLength>\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('equivalentFocalLength', %46)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.configMoonCaptureBoost()>()\n%47 = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\n%48 = %47.<@%unk/%unk: .length>\nif %48 > 0",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%49 = false",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "instanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('colorEffectComponentIsHidden', %49)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('deferredPhotoComponentIsHidden', false)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('moonCaptureComponentIsShow', false)\n%50 = this.<@ts_files/12.ts: CameraService.colorEffect>\nif %50 != 0",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "%51 = this.<@ts_files/12.ts: CameraService.colorEffect>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorEffect(camera.ColorEffectType)>(%51)",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%52 = this.<@ts_files/12.ts: CameraService.photoSession>\n%53 = instanceinvoke %52.<@%unk/%unk: .start()>()\n%54 = await %53\n%55 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%56 = @ts_files/12.ts: CameraMode.[static]SUPER_STAB\nif %55 === %56",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "%57 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%58 = %57.<@%unk/%unk: .HIGH>\nisSupported = instanceinvoke this.<@ts_files/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)>(%58)\nif isSupported != false",
                                                                                      "start_line": 1,
                                                                                      "end_line": 1,
                                                                                      "successors": [
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "%59 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%60 = %59.<@%unk/%unk: .HIGH>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)>(%60)",
                                                                                          "start_line": 1,
                                                                                          "end_line": 1,
                                                                                          "successors": [
                                                                                            {
                                                                                              "type": "block",
                                                                                              "name": "Block?",
                                                                                              "label": "%61 = this.<@ts_files/12.ts: CameraService.globalContext>\n%62 = instanceinvoke %61.<@%unk/%unk: .getObject()>('cameraConfig')\n%63 = <CameraConfig>%62\n%64 = %63.<@%unk/%unk: .focusMode>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isFocusMode(camera.FocusMode)>(%64)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'photoSessionFlowFn success')",
                                                                                              "start_line": 1,
                                                                                              "end_line": 1,
                                                                                              "successors": [
                                                                                                {
                                                                                                  "type": "block",
                                                                                                  "name": "Block?",
                                                                                                  "label": "return",
                                                                                                  "start_line": 174,
                                                                                                  "end_line": 1822,
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "blockRef",
                                                                                          "label": "(RepeatedBlock)"
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "blockRef",
                                                                                      "label": "(RepeatedBlock)"
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "blockRef",
                                                                              "label": "(RepeatedBlock)"
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%49 = true",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "blockRef",
                                                                          "label": "(RepeatedBlock)"
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%18 = this.<@ts_files/12.ts: CameraService.photoSession>\n%19 = colorSpaceManager.<@%unk/%unk: .ColorSpace>\n%20 = %19.<@%unk/%unk: .SRGB>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)>(%18, %20)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%65 = err.<@%unk/%unk: .code>\n%66 = 'getZoomPointInfos fail: error code ' + %65\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %66)",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%67 = err.<@%unk/%unk: .code>\n%68 = 'getZoomRatioRange fail: error code ' + %67\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %68)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%69 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%70 = 'photoSessionFlowFn fail : ' + %69\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %70)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "videoSessionFlowFn",
          "label": "videoSessionFlowFn",
          "start_line": 1,
          "end_line": 1271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'videoSessionFlowFn start')\n%0 = camera.<@%unk/%unk: .SceneMode>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.NORMAL_VIDEO>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .createSession()>(%1)\nthis.<@ts_files/12.ts: CameraService.videoSession> = %3\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onFocusStateChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCaptureSessionErrorChange()>()\n%4 = this.<@ts_files/12.ts: CameraService.videoSession>\ninstanceinvoke %4.<@%unk/%unk: .beginConfig()>()\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%6 = this.<@ts_files/12.ts: CameraService.videoSession>\ninstanceinvoke %6.<@%unk/%unk: .addInput()>(%5)\n%7 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%8 = this.<@ts_files/12.ts: CameraService.videoSession>\ninstanceinvoke %8.<@%unk/%unk: .addOutput()>(%7)\n%9 = this.<@ts_files/12.ts: CameraService.videoOutput>\n%10 = this.<@ts_files/12.ts: CameraService.videoSession>\ninstanceinvoke %10.<@%unk/%unk: .addOutput()>(%9)\n%11 = this.<@ts_files/12.ts: CameraService.videoSession>\n%12 = instanceinvoke %11.<@%unk/%unk: .commitConfig()>()\n%13 = await %12\n%14 = this.<@ts_files/12.ts: CameraService.globalContext>\n%15 = instanceinvoke %14.<@%unk/%unk: .getObject()>('cameraConfig')\n%16 = <CameraConfig>%15\nhdrVideoBol = %16.<@%unk/%unk: .hdrVideoBol>\n%17 = 'hdrVideoBol:' + hdrVideoBol\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %17)\nif hdrVideoBol != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%18 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%19 = %18.<@%unk/%unk: .HIGH>\nisSupportedVideoStabilization = instanceinvoke this.<@ts_files/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)>(%19)\nif isSupportedVideoStabilization != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%20 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%21 = %20.<@%unk/%unk: .HIGH>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)>(%21)\n%22 = this.<@ts_files/12.ts: CameraService.videoSession>\n%23 = colorSpaceManager.<@%unk/%unk: .ColorSpace>\n%24 = %23.<@%unk/%unk: .BT2020_HLG_LIMIT>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)>(%22, %24)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%28 = this.<@ts_files/12.ts: CameraService.videoSession>\nrange = instanceinvoke %28.<@%unk/%unk: .getZoomRatioRange()>()\n%29 = 'getZoomRatioRange:' + range\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %29)\nif range != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%30 = range[0]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMin', %30)\n%31 = range[1]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMax', %31)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%32 = this.<@ts_files/12.ts: CameraService.videoSession>\nzoomPointInfo = instanceinvoke %32.<@%unk/%unk: .getZoomPointInfos()>()\nif zoomPointInfo != 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%33 = zoomPointInfo[0]\n%34 = %33.<@%unk/%unk: .zoomRatio>\n%35 = zoomPointInfo[0]\n%36 = %35.<@%unk/%unk: .equivalentFocalLength>\n%37 = 'getZoomPointInfos zoomRatio:' + %34\n%38 = %37 + ' equivalentFocalLength:'\n%39 = %38 + %36\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %39)\n%40 = zoomPointInfo[0]\n%41 = %40.<@%unk/%unk: .equivalentFocalLength>\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('equivalentFocalLength', %41)",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%42 = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\n%43 = %42.<@%unk/%unk: .length>\nif %43 > 0",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%44 = false",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "instanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('colorEffectComponentIsHidden', %44)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('deferredPhotoComponentIsHidden', false)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('moonCaptureComponentIsShow', false)\n%45 = this.<@ts_files/12.ts: CameraService.colorEffect>\nif %45 != 0",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%46 = this.<@ts_files/12.ts: CameraService.colorEffect>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorEffect(camera.ColorEffectType)>(%46)",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%47 = this.<@ts_files/12.ts: CameraService.videoSession>\n%48 = instanceinvoke %47.<@%unk/%unk: .start()>()\n%49 = await %48\n%50 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%51 = @ts_files/12.ts: CameraMode.[static]SUPER_STAB\nif %50 === %51",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "%52 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%53 = %52.<@%unk/%unk: .HIGH>\nisSupported = instanceinvoke this.<@ts_files/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)>(%53)\nif isSupported != false",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%54 = camera.<@%unk/%unk: .VideoStabilizationMode>\n%55 = %54.<@%unk/%unk: .HIGH>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)>(%55)",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "%56 = this.<@ts_files/12.ts: CameraService.globalContext>\n%57 = instanceinvoke %56.<@%unk/%unk: .getObject()>('cameraConfig')\n%58 = <CameraConfig>%57\n%59 = %58.<@%unk/%unk: .focusMode>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isFocusMode(camera.FocusMode)>(%59)",
                                                                                      "start_line": 1,
                                                                                      "end_line": 1,
                                                                                      "successors": [
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "return",
                                                                                          "start_line": 174,
                                                                                          "end_line": 1822,
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "blockRef",
                                                                                  "label": "(RepeatedBlock)"
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "blockRef",
                                                                              "label": "(RepeatedBlock)"
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "blockRef",
                                                                      "label": "(RepeatedBlock)"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%44 = true",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'VideoStabilization not support')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%25 = this.<@ts_files/12.ts: CameraService.videoSession>\n%26 = colorSpaceManager.<@%unk/%unk: .ColorSpace>\n%27 = %26.<@%unk/%unk: .BT709_LIMIT>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)>(%25, %27)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%60 = err.<@%unk/%unk: .code>\n%61 = 'getZoomPointInfos fail: error code ' + %60\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %61)",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%62 = err.<@%unk/%unk: .code>\n%63 = 'getZoomRatioRange fail: error code ' + %62\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %63)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%64 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%65 = 'videoSessionFlowFn fail : ' + %64\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %65)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "portraitSessionFlowFn",
          "label": "portraitSessionFlowFn",
          "start_line": 1,
          "end_line": 1358,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "sceneModeIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = camera.<@%unk/%unk: .SceneMode>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.PORTRAIT_PHOTO>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .createSession()>(%1)\nthis.<@ts_files/12.ts: CameraService.portraitSession> = %3\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onFocusStateChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onAbilityChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCaptureSessionErrorChange()>()\n%4 = this.<@ts_files/12.ts: CameraService.portraitSession>\ninstanceinvoke %4.<@%unk/%unk: .beginConfig()>()\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%6 = this.<@ts_files/12.ts: CameraService.portraitSession>\ninstanceinvoke %6.<@%unk/%unk: .addInput()>(%5)\n%7 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%8 = this.<@ts_files/12.ts: CameraService.portraitSession>\ninstanceinvoke %8.<@%unk/%unk: .addOutput()>(%7)\n%9 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%10 = this.<@ts_files/12.ts: CameraService.portraitSession>\ninstanceinvoke %10.<@%unk/%unk: .addOutput()>(%9)\n%11 = this.<@ts_files/12.ts: CameraService.captureMode>\n%12 = @ts_files/12.ts: CaptureMode.[static]NEW_DEFERRED_PHOTO\nif %11 === %12",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%14 = %13.<@%unk/%unk: .PHOTO>\n%15 = instanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)>(%14)\nif %15 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%17 = %16.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)>(%17)\n%18 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%19 = %18.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)>(%19)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%20 = this.<@ts_files/12.ts: CameraService.portraitSession>\n%21 = instanceinvoke %20.<@%unk/%unk: .commitConfig()>()\n%22 = await %21",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%23 = this.<@ts_files/12.ts: CameraService.portraitSession>\nrange = instanceinvoke %23.<@%unk/%unk: .getZoomRatioRange()>()\n%24 = 'getZoomRatioRange:' + range\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %24)\nif range != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%25 = range[0]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMin', %25)\n%26 = range[1]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMax', %26)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.setPortraitEffect()>()\ndeviceType = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%27 = Constants.<@%unk/%unk: .DEFAULT>\nif deviceType !== %27",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%33 = this.<@ts_files/12.ts: CameraService.portraitSession>\n%34 = instanceinvoke %33.<@%unk/%unk: .start()>()\n%35 = await %34\n%36 = this.<@ts_files/12.ts: CameraService.globalContext>\n%37 = instanceinvoke %36.<@%unk/%unk: .getObject()>('cameraConfig')\n%38 = <CameraConfig>%37\n%39 = %38.<@%unk/%unk: .focusMode>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isFocusMode(camera.FocusMode)>(%39)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'portraitSessionFlowFn success')",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return",
                                                  "start_line": 174,
                                                  "end_line": 1822,
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%28 = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\n%29 = %28.<@%unk/%unk: .length>\nif %29 > 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%30 = false",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "instanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('colorEffectComponentIsHidden', %30)\n%31 = this.<@ts_files/12.ts: CameraService.colorEffect>\nif %31 != 0",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%32 = this.<@ts_files/12.ts: CameraService.colorEffect>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorEffect(camera.ColorEffectType)>(%32)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%30 = true",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%40 = err.<@%unk/%unk: .code>\n%41 = 'getZoomRatioRange fail: error code ' + %40\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %41)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%42 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%43 = 'portraitSessionFlowFn fail : ' + %42\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %43)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "nightSessionFlowFn",
          "label": "nightSessionFlowFn",
          "start_line": 1,
          "end_line": 1417,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "sceneModeIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = camera.<@%unk/%unk: .SceneMode>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.NIGHT_PHOTO>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .createSession()>(%1)\nthis.<@ts_files/12.ts: CameraService.nightSession> = %3\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onFocusStateChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCaptureSessionErrorChange()>()\n%4 = this.<@ts_files/12.ts: CameraService.nightSession>\ninstanceinvoke %4.<@%unk/%unk: .beginConfig()>()\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%6 = this.<@ts_files/12.ts: CameraService.nightSession>\ninstanceinvoke %6.<@%unk/%unk: .addInput()>(%5)\n%7 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%8 = this.<@ts_files/12.ts: CameraService.nightSession>\ninstanceinvoke %8.<@%unk/%unk: .addOutput()>(%7)\n%9 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%10 = this.<@ts_files/12.ts: CameraService.nightSession>\ninstanceinvoke %10.<@%unk/%unk: .addOutput()>(%9)\n%11 = this.<@ts_files/12.ts: CameraService.captureMode>\n%12 = @ts_files/12.ts: CaptureMode.[static]NEW_DEFERRED_PHOTO\nif %11 === %12",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%14 = %13.<@%unk/%unk: .PHOTO>\n%15 = instanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)>(%14)\nif %15 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%17 = %16.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)>(%17)\n%18 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%19 = %18.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)>(%19)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%20 = this.<@ts_files/12.ts: CameraService.nightSession>\n%21 = instanceinvoke %20.<@%unk/%unk: .commitConfig()>()\n%22 = await %21",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%23 = this.<@ts_files/12.ts: CameraService.nightSession>\nrange = instanceinvoke %23.<@%unk/%unk: .getZoomRatioRange()>()\n%24 = 'getZoomRatioRange:' + range\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %24)\nif range != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%25 = range[0]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMin', %25)\n%26 = range[1]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMax', %26)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "deviceType = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%27 = Constants.<@%unk/%unk: .DEFAULT>\nif deviceType !== %27",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%33 = this.<@ts_files/12.ts: CameraService.nightSession>\n%34 = instanceinvoke %33.<@%unk/%unk: .start()>()\n%35 = await %34\n%36 = this.<@ts_files/12.ts: CameraService.globalContext>\n%37 = instanceinvoke %36.<@%unk/%unk: .getObject()>('cameraConfig')\n%38 = <CameraConfig>%37\n%39 = %38.<@%unk/%unk: .focusMode>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isFocusMode(camera.FocusMode)>(%39)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'nightSessionFlowFn success')",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return",
                                                  "start_line": 174,
                                                  "end_line": 1822,
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%28 = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\n%29 = %28.<@%unk/%unk: .length>\nif %29 > 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%30 = false",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "instanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('colorEffectComponentIsHidden', %30)\n%31 = this.<@ts_files/12.ts: CameraService.colorEffect>\nif %31 != 0",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%32 = this.<@ts_files/12.ts: CameraService.colorEffect>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorEffect(camera.ColorEffectType)>(%32)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%30 = true",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%40 = err.<@%unk/%unk: .code>\n%41 = 'getZoomRatioRange fail: error code ' + %40\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %41)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%42 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%43 = 'nightSessionFlowFn fail : ' + %42\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %43)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "macroPhotoSessionFlowFn",
          "label": "macroPhotoSessionFlowFn",
          "start_line": 1,
          "end_line": 1473,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "sceneModeIndex = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'macroPhotoSessionFlowFn enter')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = camera.<@%unk/%unk: .SceneMode>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.MACRO_PHOTO>\n%2 = this.<@ts_files/12.ts: CameraService.cameraManager>\n%3 = instanceinvoke %2.<@%unk/%unk: .createSession()>(%1)\nthis.<@ts_files/12.ts: CameraService.macroPhotoSession> = %3\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onFocusStateChange()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.onCaptureSessionErrorChange()>()\n%4 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\ninstanceinvoke %4.<@%unk/%unk: .beginConfig()>()\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\n%6 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\ninstanceinvoke %6.<@%unk/%unk: .addInput()>(%5)\n%7 = this.<@ts_files/12.ts: CameraService.previewOutput>\n%8 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\ninstanceinvoke %8.<@%unk/%unk: .addOutput()>(%7)\n%9 = this.<@ts_files/12.ts: CameraService.photoOutPut>\n%10 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\ninstanceinvoke %10.<@%unk/%unk: .addOutput()>(%9)\n%11 = this.<@ts_files/12.ts: CameraService.captureMode>\n%12 = @ts_files/12.ts: CaptureMode.[static]NEW_DEFERRED_PHOTO\nif %11 === %12",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%14 = %13.<@%unk/%unk: .PHOTO>\n%15 = instanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)>(%14)\nif %15 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%17 = %16.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)>(%17)\n%18 = camera.<@%unk/%unk: .DeferredDeliveryImageType>\n%19 = %18.<@%unk/%unk: .PHOTO>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)>(%19)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%20 = this.<@ts_files/12.ts: CameraService.previewOutput>\nisSketchSupported = instanceinvoke %20.<@%unk/%unk: .isSketchSupported()>()\n%21 = 'isSketchSupported:' + isSketchSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %21)\n%22 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\n%23 = instanceinvoke %22.<@%unk/%unk: .commitConfig()>()\n%24 = await %23",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%25 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\nrange = instanceinvoke %25.<@%unk/%unk: .getZoomRatioRange()>()\n%26 = 'getZoomRatioRange:' + range\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %26)\nif range != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%27 = range[0]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMin', %27)\n%28 = range[1]\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('zoomRatioMax', %28)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "deviceType = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%29 = Constants.<@%unk/%unk: .DEFAULT>\nif deviceType !== %29",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%35 = this.<@ts_files/12.ts: CameraService.macroPhotoSession>\n%36 = instanceinvoke %35.<@%unk/%unk: .start()>()\n%37 = await %36\n%38 = this.<@ts_files/12.ts: CameraService.globalContext>\n%39 = instanceinvoke %38.<@%unk/%unk: .getObject()>('cameraConfig')\n%40 = <CameraConfig>%39\n%41 = %40.<@%unk/%unk: .focusMode>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.isFocusMode(camera.FocusMode)>(%41)\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'macroPhotoSessionFlowFn success')",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return",
                                                  "start_line": 174,
                                                  "end_line": 1822,
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%30 = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\n%31 = %30.<@%unk/%unk: .length>\nif %31 > 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%32 = false",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "instanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('colorEffectComponentIsHidden', %32)\n%33 = this.<@ts_files/12.ts: CameraService.colorEffect>\nif %33 != 0",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%34 = this.<@ts_files/12.ts: CameraService.colorEffect>\ninstanceinvoke this.<@ts_files/12.ts: CameraService.setColorEffect(camera.ColorEffectType)>(%34)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%32 = true",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%42 = err.<@%unk/%unk: .code>\n%43 = 'getZoomRatioRange fail: error code ' + %42\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %43)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%44 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%45 = 'macroPhotoSessionFlowFn fail : ' + %44\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %45)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setColorSpace",
          "label": "setColorSpace",
          "start_line": 1,
          "end_line": 1534,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "session = parameter0: camera.PhotoSession|camera.VideoSession\ncolorSpace = parameter1: colorSpaceManager.ColorSpace\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "colorSpaces = instanceinvoke session.<@%unk/%unk: .getSupportedColorSpaces()>()\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(colorSpaces)\n%1 = 'supportedColorSpaces: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nisSupportedUseColorSpaces = instanceinvoke colorSpaces.<@%unk/%unk: .indexOf()>(colorSpace)\nif isSupportedUseColorSpaces != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = 'setColorSpace: ' + colorSpace\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\ninstanceinvoke session.<@%unk/%unk: .setColorSpace()>(colorSpace)\n%3 = instanceinvoke session.<@%unk/%unk: .getActiveColorSpace()>()\n%4 = 'activeColorSpace: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn",
                      "start_line": 1,
                      "end_line": 1822,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'setColorSpace fail : ' + %5\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setPortraitEffect",
          "label": "setPortraitEffect",
          "start_line": 1,
          "end_line": 1551,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = camera.<@%unk/%unk: .PortraitEffect>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.CIRCLES>\n%2 = this.<@ts_files/12.ts: CameraService.portraitSession>\ninstanceinvoke %2.<@%unk/%unk: .setPortraitEffect()>(%1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.getPortraitEffect()>()\nreturn",
                      "start_line": 1,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%3 = err.<@%unk/%unk: .code>\n%4 = 'setPortraitEffect error code: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %4)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }"
        },
        {
          "type": "function",
          "name": "getPortraitEffect",
          "label": "getPortraitEffect",
          "start_line": 1,
          "end_line": 1561,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.portraitSession>\nportraitEffect = instanceinvoke %0.<@%unk/%unk: .getPortraitEffect()>()\n%1 = 'getPortraitEffect portraitEffect: ' + portraitEffect\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%2 = err.<@%unk/%unk: .code>\n%3 = 'setPortraitEffect error code: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %3)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setMoonCaptureBoostEnable",
          "label": "setMoonCaptureBoostEnable",
          "start_line": 1,
          "end_line": 1583,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "moonCaptureBoostEnable = parameter0: Boolean\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'moonCaptureBoostEnable is called.')\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 556,
                  "end_line": 1583,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = camera.<@%unk/%unk: .SceneFeatureType>\n%2 = %1.<@ts_files/12.ts: CameraService.MOON_CAPTURE_BOOST>\ninstanceinvoke session.<@%unk/%unk: .enableSceneFeature()>(%2, moonCaptureBoostEnable)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('moonCaptureComponentEnable', moonCaptureBoostEnable)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return true",
                          "start_line": 1585,
                          "end_line": 1585,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%3 = err.<@%unk/%unk: .code>\n%4 = 'setMoonCaptureBoostEnable fail: error code ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %4)\nreturn false",
              "start_line": 1,
              "end_line": 1583,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }"
        },
        {
          "type": "function",
          "name": "setColorEffect",
          "label": "setColorEffect",
          "start_line": 1,
          "end_line": 1588,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "colorEffect = parameter0: camera.ColorEffectType\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'setColorEffect is called.')\n%0 = this.<@ts_files/12.ts: CameraService.photoSession>\n%1 = this.<@ts_files/12.ts: CameraService.videoSession>\n%2 = %0 || %1\n%3 = this.<@ts_files/12.ts: CameraService.portraitSession>\n%4 = %2 || %3\n%5 = this.<@ts_files/12.ts: CameraService.nightSession>\n%6 = %4 || %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = newarray (any)[0]\nres = %7\nres = instanceinvoke this.<@ts_files/12.ts: CameraService.getSupportedColorEffects()>()\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%8 = !session\nif %8 != 0\ni = 0",
                  "start_line": 1,
                  "end_line": 1597,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = res.<@%unk/%unk: .length>\nif i < %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = res[i]\nif %10 === colorEffect\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'setColorEffect success.')\ninstanceinvoke session.<@%unk/%unk: .setColorEffect()>(colorEffect)\nthis.<@ts_files/12.ts: CameraService.colorEffect> = colorEffect\nreturn",
                              "start_line": 1,
                              "end_line": 1822,
                              "successors": []
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = 'setColorEffect fail: The colorEffect ' + colorEffect\n%12 = %11 + ' was not found'\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %12)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 174,
                              "end_line": 1822,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getColorEffect",
          "label": "getColorEffect",
          "start_line": 1,
          "end_line": 1609,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'getColorEffect is called.')\ncolorEffect = undefined\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return colorEffect",
                  "start_line": 1614,
                  "end_line": 1622,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "colorEffect = instanceinvoke session.<@%unk/%unk: .getColorEffect()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return colorEffect",
                          "start_line": 1614,
                          "end_line": 1622,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\nerr = <BusinessError>error\n%1 = err.<@%unk/%unk: .code>\n%2 = 'setColorEffect fail: error code ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %2)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }"
        },
        {
          "type": "function",
          "name": "getSupportedColorEffects",
          "label": "getSupportedColorEffects",
          "start_line": 1,
          "end_line": 1625,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'getSupportedColorEffects is called.')\n%0 = newarray (any)[0]\nres = %0\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%1 = !session\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return res",
                  "start_line": 1630,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "res = instanceinvoke session.<@%unk/%unk: .getSupportedColorEffects()>()\n%2 = res.<@%unk/%unk: .length>\n%3 = 'getSupportedColorEffects length: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %3)\nreturn res",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }"
        },
        {
          "type": "function",
          "name": "photoOutPutCallBack",
          "label": "photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %0.<@%unk/%unk: .on()>('captureStart', %AM20$photoOutPutCallBack)\n%1 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %1.<@%unk/%unk: .on()>('frameShutter', %AM21$photoOutPutCallBack)\n%2 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %2.<@%unk/%unk: .on()>('captureEnd', %AM22$photoOutPutCallBack)\n%3 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %3.<@%unk/%unk: .on()>('error', %AM23$photoOutPutCallBack)\n%4 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %4.<@%unk/%unk: .on()>('photoAvailable', %AM24$photoOutPutCallBack)\n%5 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %5.<@%unk/%unk: .on()>('deferredPhotoProxyAvailable', %AM26$photoOutPutCallBack)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "saveDeferredPhoto",
          "label": "saveDeferredPhoto",
          "start_line": 1,
          "end_line": 1698,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "proxyObj = parameter0: camera.DeferredPhotoProxy\nthis = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.globalContext>\n%1 = instanceinvoke %0.<@%unk/%unk: .getCameraSettingContext()>()\nphotoHelper = instanceinvoke photoAccessHelper.<@%unk/%unk: .getPhotoAccessHelper()>(%1)\n%2 = instanceinvoke Date.<@%unk/%unk: .now()>()\nfileName = %2 + '.jpg'\n%3 = instanceinvoke photoHelper.<@%unk/%unk: .createAsset()>(fileName)\nphotoAsset = await %3\nimgPhotoUri = photoAsset.<@%unk/%unk: .uri>\n%4 = new @%unk/%unk: photoAccessHelper.MediaAssetChangeRequest\ninstanceinvoke %4.<@%unk/%unk: photoAccessHelper.MediaAssetChangeRequest.constructor()>(photoAsset)\nmediaRequest = %4\n%5 = photoAccessHelper.<@%unk/%unk: .ResourceType>\n%6 = %5.<@%unk/%unk: .PHOTO_PROXY>\ninstanceinvoke mediaRequest.<@%unk/%unk: .addResource()>(%6, proxyObj)\n%7 = instanceinvoke photoHelper.<@%unk/%unk: .applyChanges()>(mediaRequest)\nres = await %7\ninstanceinvoke this.<@ts_files/12.ts: CameraService.handleTakePicture()>(imgPhotoUri)\n%8 = 'saveDeferredPhoto res:' + res\n%9 = %8 + '.'\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %9)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%10 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%11 = 'Failed to saveDeferredPhoto. error: ' + %10\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %11)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "previewOutputCallBack",
          "label": "previewOutputCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'previewOutputCallBack is called')\n%0 = this.<@ts_files/12.ts: CameraService.previewOutput>\ninstanceinvoke %0.<@%unk/%unk: .on()>('frameStart', %AM28$previewOutputCallBack)\n%1 = this.<@ts_files/12.ts: CameraService.previewOutput>\ninstanceinvoke %1.<@%unk/%unk: .on()>('frameEnd', %AM29$previewOutputCallBack)\n%2 = this.<@ts_files/12.ts: CameraService.previewOutput>\ninstanceinvoke %2.<@%unk/%unk: .on()>('error', %AM30$previewOutputCallBack)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onVideoOutputChange",
          "label": "onVideoOutputChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoOutput>\ninstanceinvoke %0.<@%unk/%unk: .on()>('frameStart', %AM31$onVideoOutputChange)\n%1 = this.<@ts_files/12.ts: CameraService.videoOutput>\ninstanceinvoke %1.<@%unk/%unk: .on()>('frameEnd', %AM32$onVideoOutputChange)\n%2 = this.<@ts_files/12.ts: CameraService.videoOutput>\ninstanceinvoke %2.<@%unk/%unk: .on()>('error', %AM33$onVideoOutputChange)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onCameraStatusChange",
          "label": "onCameraStatusChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onCameraStatusChange is called')\n%0 = this.<@ts_files/12.ts: CameraService.cameraManager>\ninstanceinvoke %0.<@%unk/%unk: .on()>('cameraStatus', %AM34$onCameraStatusChange)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onCameraInputChange",
          "label": "onCameraInputChange",
          "start_line": 1,
          "end_line": 1760,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = this.<@ts_files/12.ts: CameraService.globalContext>\n%2 = instanceinvoke %1.<@%unk/%unk: .getObject()>('cameraDeviceIndex')\n%3 = <number>%2\n%4 = %0.<@%unk/%unk: .%3>\n%5 = this.<@ts_files/12.ts: CameraService.cameraInput>\ninstanceinvoke %5.<@%unk/%unk: .on()>('error', %4, %AM35$onCameraInputChange)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onCameraInputChange cameraInput occur error: error')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onFocusStateChange",
          "label": "onFocusStateChange",
          "start_line": 1,
          "end_line": 1773,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke session.<@%unk/%unk: .on()>('focusStateChange', %AM36$onFocusStateChange)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onAbilityChange",
          "label": "onAbilityChange",
          "start_line": 1,
          "end_line": 1783,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke session.<@%unk/%unk: .on()>('abilityChange', %AM37$onAbilityChange)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }"
        },
        {
          "type": "function",
          "name": "onCaptureSessionErrorChange",
          "label": "onCaptureSessionErrorChange",
          "start_line": 1,
          "end_line": 1797,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\n%0 = !session\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 174,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke session.<@%unk/%unk: .on()>('error', %AM38$onCaptureSessionErrorChange)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }"
        },
        {
          "type": "function",
          "name": "setCaptureMode",
          "label": "setCaptureMode",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mode = parameter0: number\nthis = this: @ts_files/12.ts: CameraService\nthis.<@ts_files/12.ts: CameraService.captureMode> = mode\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }"
        },
        {
          "type": "function",
          "name": "getCaptureMode",
          "label": "getCaptureMode",
          "start_line": 1,
          "end_line": 1812,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.captureMode>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getCaptureMode(): number {\n    return this.captureMode;\n  }"
        },
        {
          "type": "function",
          "name": "isDeferredImageDeliverySupported",
          "label": "isDeferredImageDeliverySupported",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "deferredType = parameter0: camera.DeferredDeliveryImageType\nthis = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.photoOutPut>\nres = instanceinvoke %0.<@%unk/%unk: .isDeferredImageDeliverySupported()>(deferredType)\n%1 = 'isDeferredImageDeliverySupported deferredType:' + deferredType\n%2 = %1 + ' res: '\n%3 = %2 + res\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %3)\nreturn res",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }"
        },
        {
          "type": "function",
          "name": "isDeferredImageDeliveryEnabled",
          "label": "isDeferredImageDeliveryEnabled",
          "start_line": 1,
          "end_line": 1828,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "deferredType = parameter0: camera.DeferredDeliveryImageType\nthis = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.photoOutPut>\nres = instanceinvoke %0.<@%unk/%unk: .isDeferredImageDeliveryEnabled()>(deferredType)\n%1 = 'isDeferredImageDeliveryEnabled deferredType:' + deferredType\n%2 = %1 + ' res: '\n%3 = %2 + res\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %3)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }"
        },
        {
          "type": "function",
          "name": "deferImageDeliveryFor",
          "label": "deferImageDeliveryFor",
          "start_line": 1,
          "end_line": 1836,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "deferredType = parameter0: camera.DeferredDeliveryImageType\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'deferImageDeliveryFor type: ' + deferredType\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/12.ts: CameraService.photoOutPut>\ninstanceinvoke %1.<@%unk/%unk: .deferImageDelivery()>(deferredType)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }"
        },
        {
          "type": "function",
          "name": "testAbilityFunction",
          "label": "testAbilityFunction",
          "start_line": 1,
          "end_line": 1841,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%1 = @ts_files/12.ts: CameraMode.[static]PORTRAIT\nif %0 === %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, 'portraitSession ability')\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logPortraitSession(camera.PortraitPhotoSession)>(session)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%3 = @ts_files/12.ts: CameraMode.[static]VIDEO\nif %2 === %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, 'videoSession ability')\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logVideoSession(camera.VideoSession)>(session)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = this.<@ts_files/12.ts: CameraService.cameraMode>\n%5 = @ts_files/12.ts: CameraMode.[static]NORMAL\nif %4 === %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, 'photoSession ability')\nsession = instanceinvoke this.<@ts_files/12.ts: CameraService.getSession()>()\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logPhotoSession(camera.PhotoSession)>(session)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'not support ability')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "logPortraitSession",
          "label": "logPortraitSession",
          "start_line": 1,
          "end_line": 1859,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "session = parameter0: camera.PortraitPhotoSession\nthis = this: @ts_files/12.ts: CameraService\nlist = instanceinvoke session.<@%unk/%unk: .getSessionConflictFunctions()>()\ninstanceinvoke list.<@%unk/%unk: .forEach()>(%AM39$logPortraitSession)\n%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = this.<@ts_files/12.ts: CameraService.globalContext>\n%2 = instanceinvoke %1.<@%unk/%unk: .getObject()>('cameraDeviceIndex')\n%3 = <number>%2\n%4 = %0.<@%unk/%unk: .%3>\ncocList = instanceinvoke session.<@%unk/%unk: .getCameraOutputCapabilities()>(%4)\ncoc = cocList[0]\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)>(coc)\nif coc != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "functionsList = instanceinvoke session.<@%unk/%unk: .getSessionFunctions()>(coc)\ninstanceinvoke functionsList.<@%unk/%unk: .forEach()>(%AM40$logPortraitSession)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }"
        },
        {
          "type": "function",
          "name": "logVideoSession",
          "label": "logVideoSession",
          "start_line": 1,
          "end_line": 1875,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "session = parameter0: camera.VideoSession\nthis = this: @ts_files/12.ts: CameraService\nlist = instanceinvoke session.<@%unk/%unk: .getSessionConflictFunctions()>()\ninstanceinvoke list.<@%unk/%unk: .forEach()>(%AM41$logVideoSession)\n%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = this.<@ts_files/12.ts: CameraService.globalContext>\n%2 = instanceinvoke %1.<@%unk/%unk: .getObject()>('cameraDeviceIndex')\n%3 = <number>%2\n%4 = %0.<@%unk/%unk: .%3>\ncocList = instanceinvoke session.<@%unk/%unk: .getCameraOutputCapabilities()>(%4)\ncoc = cocList[0]\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)>(coc)\nif coc != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "functionsList = instanceinvoke session.<@%unk/%unk: .getSessionFunctions()>(coc)\ninstanceinvoke functionsList.<@%unk/%unk: .forEach()>(%AM42$logVideoSession)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }"
        },
        {
          "type": "function",
          "name": "logPhotoSession",
          "label": "logPhotoSession",
          "start_line": 1,
          "end_line": 1894,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "session = parameter0: camera.PhotoSession\nthis = this: @ts_files/12.ts: CameraService\nlist = instanceinvoke session.<@%unk/%unk: .getSessionConflictFunctions()>()\ninstanceinvoke list.<@%unk/%unk: .forEach()>(%AM43$logPhotoSession)\n%0 = this.<@ts_files/12.ts: CameraService.cameras>\n%1 = this.<@ts_files/12.ts: CameraService.globalContext>\n%2 = instanceinvoke %1.<@%unk/%unk: .getObject()>('cameraDeviceIndex')\n%3 = <number>%2\n%4 = %0.<@%unk/%unk: .%3>\ncocList = instanceinvoke session.<@%unk/%unk: .getCameraOutputCapabilities()>(%4)\ncoc = cocList[0]\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)>(coc)\nif coc != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "functionsList = instanceinvoke session.<@%unk/%unk: .getSessionFunctions()>(coc)\ninstanceinvoke functionsList.<@%unk/%unk: .forEach()>(%AM44$logPhotoSession)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 174,
                      "end_line": 1822,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }"
        },
        {
          "type": "function",
          "name": "logPortraitPhotoFunctions",
          "label": "logPortraitPhotoFunctions",
          "start_line": 1,
          "end_line": 1913,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.PortraitPhotoFunctions\nthis = this: @ts_files/12.ts: CameraService\nhasFlash = instanceinvoke functions.<@%unk/%unk: .hasFlash()>()\n%0 = 'PortraitPhotoFunctions hasFlash:' + hasFlash\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %0)\n%1 = camera.<@%unk/%unk: .FlashMode>\n%2 = %1.<@ts_files/12.ts: CameraService.FLASH_MODE_CLOSE>\nisFlashModeSupported = instanceinvoke functions.<@%unk/%unk: .isFlashModeSupported()>(%2)\n%3 = 'PortraitPhotoFunctions isFlashModeSupported:' + isFlashModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %3)\nisLcdFlashSupported = instanceinvoke functions.<@%unk/%unk: .isLcdFlashSupported()>()\n%4 = 'PortraitPhotoFunctions isLcdFlashSupported:' + isLcdFlashSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %4)\n%5 = camera.<@%unk/%unk: .ExposureMode>\n%6 = %5.<@%unk/%unk: .EXPOSURE_MODE_LOCKED>\nisExposureModeSupported = instanceinvoke functions.<@%unk/%unk: .isExposureModeSupported()>(%6)\n%7 = 'PortraitPhotoFunctions isExposureModeSupported:' + isExposureModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %7)\nexposureBiasRange = instanceinvoke functions.<@%unk/%unk: .getExposureBiasRange()>()\n%8 = exposureBiasRange[0]\n%9 = exposureBiasRange[1]\n%10 = 'PortraitPhotoFunctions getExposureBiasRange:' + %8\n%11 = %10 + ','\n%12 = %11 + %9\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %12)\n%13 = camera.<@%unk/%unk: .FocusMode>\n%14 = %13.<@%unk/%unk: .FOCUS_MODE_MANUAL>\nisFocusModeSupported = instanceinvoke functions.<@%unk/%unk: .isFocusModeSupported()>(%14)\n%15 = 'PortraitPhotoFunctions isFocusModeSupported:' + isFocusModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %15)\nzoomRatioRange = instanceinvoke functions.<@%unk/%unk: .getZoomRatioRange()>()\n%16 = zoomRatioRange[0]\n%17 = zoomRatioRange[1]\n%18 = 'PortraitPhotoFunctions getZoomRatioRange:' + %16\n%19 = %18 + ','\n%20 = %19 + %17\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %20)\nbeautyTypeList = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyTypes()>()\n%21 = beautyTypeList[0]\n%22 = beautyTypeList[1]\n%23 = 'PortraitPhotoFunctions getSupportedBeautyTypes:' + %21\n%24 = %23 + ','\n%25 = %24 + %22\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %25)\n%26 = beautyTypeList[0]\nbeautyRange = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyRange()>(%26)\n%27 = beautyRange[0]\n%28 = beautyRange[1]\n%29 = 'PortraitPhotoFunctions getSupportedBeautyRange:' + %27\n%30 = %29 + ','\n%31 = %30 + %28\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %31)\ncolorEffectList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorEffects()>()\n%32 = colorEffectList[0]\n%33 = colorEffectList[1]\n%34 = 'PortraitPhotoFunctions getSupportedColorEffects:' + %32\n%35 = %34 + ','\n%36 = %35 + %33\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %36)\ncolorSpacesList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorSpaces()>()\n%37 = colorSpacesList[0]\n%38 = colorSpacesList[1]\n%39 = 'PortraitPhotoFunctions getSupportedColorSpaces:' + %37\n%40 = %39 + ','\n%41 = %40 + %38\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %41)\nportraitEffectsList = instanceinvoke functions.<@%unk/%unk: .getSupportedPortraitEffects()>()\n%42 = portraitEffectsList[0]\n%43 = portraitEffectsList[1]\n%44 = 'PortraitPhotoFunctions getSupportedPortraitEffects:' + %42\n%45 = %44 + ','\n%46 = %45 + %43\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %46)\nvirtualAperturesList = instanceinvoke functions.<@%unk/%unk: .getSupportedVirtualApertures()>()\n%47 = virtualAperturesList[0]\n%48 = virtualAperturesList[1]\n%49 = 'PortraitPhotoFunctions getSupportedVirtualApertures:' + %47\n%50 = %49 + ','\n%51 = %50 + %48\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %51)\nphysicalAperturesList = instanceinvoke functions.<@%unk/%unk: .getSupportedPhysicalApertures()>()\ninstanceinvoke physicalAperturesList.<@%unk/%unk: .forEach()>(%AM45$logPortraitPhotoFunctions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }"
        },
        {
          "type": "function",
          "name": "logVideoFunctions",
          "label": "logVideoFunctions",
          "start_line": 1,
          "end_line": 1949,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.VideoFunctions\nthis = this: @ts_files/12.ts: CameraService\nhasFlash = instanceinvoke functions.<@%unk/%unk: .hasFlash()>()\n%0 = 'VideoFunctions hasFlash:' + hasFlash\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %0)\n%1 = camera.<@%unk/%unk: .FlashMode>\n%2 = %1.<@ts_files/12.ts: CameraService.FLASH_MODE_CLOSE>\nisFlashModeSupported = instanceinvoke functions.<@%unk/%unk: .isFlashModeSupported()>(%2)\n%3 = 'VideoFunctions isFlashModeSupported:' + isFlashModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %3)\nisLcdFlashSupported = instanceinvoke functions.<@%unk/%unk: .isLcdFlashSupported()>()\n%4 = 'VideoFunctions isLcdFlashSupported:' + isLcdFlashSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %4)\n%5 = camera.<@%unk/%unk: .ExposureMode>\n%6 = %5.<@%unk/%unk: .EXPOSURE_MODE_LOCKED>\nisExposureModeSupported = instanceinvoke functions.<@%unk/%unk: .isExposureModeSupported()>(%6)\n%7 = 'VideoFunctions isExposureModeSupported:' + isExposureModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %7)\nexposureBiasRange = instanceinvoke functions.<@%unk/%unk: .getExposureBiasRange()>()\n%8 = exposureBiasRange[0]\n%9 = exposureBiasRange[1]\n%10 = 'VideoFunctions getExposureBiasRange:' + %8\n%11 = %10 + ','\n%12 = %11 + %9\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %12)\n%13 = camera.<@%unk/%unk: .FocusMode>\n%14 = %13.<@%unk/%unk: .FOCUS_MODE_MANUAL>\nisFocusModeSupported = instanceinvoke functions.<@%unk/%unk: .isFocusModeSupported()>(%14)\n%15 = 'VideoFunctions isFocusModeSupported:' + isFocusModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %15)\nzoomRatioRange = instanceinvoke functions.<@%unk/%unk: .getZoomRatioRange()>()\n%16 = zoomRatioRange[0]\n%17 = zoomRatioRange[1]\n%18 = 'VideoFunctions getZoomRatioRange:' + %16\n%19 = %18 + ','\n%20 = %19 + %17\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %20)\nbeautyTypeList = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyTypes()>()\n%21 = beautyTypeList[0]\n%22 = beautyTypeList[1]\n%23 = 'VideoFunctions getSupportedBeautyTypes:' + %21\n%24 = %23 + ','\n%25 = %24 + %22\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %25)\n%26 = beautyTypeList[0]\nbeautyRange = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyRange()>(%26)\n%27 = beautyRange[0]\n%28 = beautyRange[1]\n%29 = 'VideoFunctions getSupportedBeautyRange:' + %27\n%30 = %29 + ','\n%31 = %30 + %28\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %31)\ncolorEffectList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorEffects()>()\n%32 = colorEffectList[0]\n%33 = colorEffectList[1]\n%34 = 'VideoFunctions getSupportedColorEffects:' + %32\n%35 = %34 + ','\n%36 = %35 + %33\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %36)\ncolorSpacesList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorSpaces()>()\n%37 = colorSpacesList[0]\n%38 = colorSpacesList[1]\n%39 = 'VideoFunctions getSupportedColorSpaces:' + %37\n%40 = %39 + ','\n%41 = %40 + %38\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %41)\nisVideoStabilizationModeSupported = instanceinvoke functions.<@%unk/%unk: .isVideoStabilizationModeSupported()>()\n%42 = 'VideoFunctions isVideoStabilizationModeSupported:' + isVideoStabilizationModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %42)\nisMacroSupported = instanceinvoke functions.<@%unk/%unk: .isMacroSupported()>()\n%43 = 'VideoFunctions isMacroSupported:' + isMacroSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %43)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }"
        },
        {
          "type": "function",
          "name": "logPhotoFunctions",
          "label": "logPhotoFunctions",
          "start_line": 1,
          "end_line": 1978,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.PhotoFunctions\nthis = this: @ts_files/12.ts: CameraService\n%0 = camera.<@%unk/%unk: .SceneFeatureType>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.MOON_CAPTURE_BOOST>\nisMoonSupported = instanceinvoke functions.<@%unk/%unk: .isSceneFeatureSupported()>(%1)\n%2 = 'PhotoFunctions isSceneFeatureSupported moon:' + isMoonSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %2)\n%3 = camera.<@%unk/%unk: .SceneFeatureType>\n%4 = %3.<@%unk/%unk: .TRIPOD_DETECTION>\nisTripodDetectionSupported = instanceinvoke functions.<@%unk/%unk: .isSceneFeatureSupported()>(%4)\n%5 = 'PhotoFunctions isSceneFeatureSupported tripod:' + isTripodDetectionSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %5)\n%6 = camera.<@%unk/%unk: .SceneFeatureType>\n%7 = %6.<@%unk/%unk: .LOW_LIGHT_BOOTST>\nisLowLightSupported = instanceinvoke functions.<@%unk/%unk: .isSceneFeatureSupported()>(%7)\n%8 = 'PhotoFunctions isSceneFeatureSupported lowlight:' + isLowLightSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %8)\nexposureRange = instanceinvoke functions.<@%unk/%unk: .getSupportedExposureRange()>()\n%9 = exposureRange.<@%unk/%unk: .length>\n%10 = 'PhotoFunctions getSupportedExposureRange size:' + %9\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %10)\nhasFlash = instanceinvoke functions.<@%unk/%unk: .hasFlash()>()\n%11 = 'PhotoFunctions hasFlash:' + hasFlash\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %11)\n%12 = camera.<@%unk/%unk: .FlashMode>\n%13 = %12.<@%unk/%unk: .FLASH_MODE_CLOSE>\nisFlashModeSupported = instanceinvoke functions.<@%unk/%unk: .isFlashModeSupported()>(%13)\n%14 = 'PhotoFunctions isFlashModeSupported:' + isFlashModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %14)\nisLcdFlashSupported = instanceinvoke functions.<@%unk/%unk: .isLcdFlashSupported()>()\n%15 = 'PhotoFunctions isLcdFlashSupported:' + isLcdFlashSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %15)\n%16 = camera.<@%unk/%unk: .ExposureMode>\n%17 = %16.<@%unk/%unk: .EXPOSURE_MODE_LOCKED>\nisExposureModeSupported = instanceinvoke functions.<@%unk/%unk: .isExposureModeSupported()>(%17)\n%18 = 'PhotoFunctions isExposureModeSupported:' + isExposureModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %18)\nexposureBiasRange = instanceinvoke functions.<@%unk/%unk: .getExposureBiasRange()>()\n%19 = exposureBiasRange[0]\n%20 = exposureBiasRange[1]\n%21 = 'PhotoFunctions getExposureBiasRange:' + %19\n%22 = %21 + ','\n%23 = %22 + %20\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %23)\n%24 = camera.<@%unk/%unk: .FocusMode>\n%25 = %24.<@%unk/%unk: .FOCUS_MODE_MANUAL>\nisFocusModeSupported = instanceinvoke functions.<@%unk/%unk: .isFocusModeSupported()>(%25)\n%26 = 'PhotoFunctions isFocusModeSupported:' + isFocusModeSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %26)\nzoomRatioRange = instanceinvoke functions.<@%unk/%unk: .getZoomRatioRange()>()\n%27 = zoomRatioRange[0]\n%28 = zoomRatioRange[1]\n%29 = 'PhotoFunctions getZoomRatioRange:' + %27\n%30 = %29 + ','\n%31 = %30 + %28\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %31)\nbeautyTypeList = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyTypes()>()\n%32 = beautyTypeList[0]\n%33 = beautyTypeList[1]\n%34 = 'PhotoFunctions getSupportedBeautyTypes:' + %32\n%35 = %34 + ','\n%36 = %35 + %33\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %36)\n%37 = beautyTypeList[0]\nbeautyRange = instanceinvoke functions.<@%unk/%unk: .getSupportedBeautyRange()>(%37)\n%38 = beautyRange[0]\n%39 = beautyRange[1]\n%40 = 'PhotoFunctions getSupportedBeautyRange:' + %38\n%41 = %40 + ','\n%42 = %41 + %39\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %42)\ncolorEffectList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorEffects()>()\n%43 = colorEffectList[0]\n%44 = colorEffectList[1]\n%45 = 'PhotoFunctions getSupportedColorEffects:' + %43\n%46 = %45 + ','\n%47 = %46 + %44\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %47)\ncolorSpacesList = instanceinvoke functions.<@%unk/%unk: .getSupportedColorSpaces()>()\n%48 = colorSpacesList[0]\n%49 = colorSpacesList[1]\n%50 = 'PhotoFunctions getSupportedColorSpaces:' + %48\n%51 = %50 + ','\n%52 = %51 + %49\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %52)\nisMacroSupported = instanceinvoke functions.<@%unk/%unk: .isMacroSupported()>()\n%53 = 'PhotoFunctions isMacroSupported:' + isMacroSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %53)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }"
        },
        {
          "type": "function",
          "name": "logPortraitPhotoConflictFunctions",
          "label": "logPortraitPhotoConflictFunctions",
          "start_line": 1,
          "end_line": 2013,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "conflictFunctions = parameter0: camera.PortraitPhotoConflictFunctions\nthis = this: @ts_files/12.ts: CameraService\nzoomRatioRange = instanceinvoke conflictFunctions.<@%unk/%unk: .getZoomRatioRange()>()\n%0 = zoomRatioRange[0]\n%1 = zoomRatioRange[1]\n%2 = 'PortraitPhotoConflictFunctions getZoomRatioRange:' + %0\n%3 = %2 + ','\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %4)\nportraitEffectsList = instanceinvoke conflictFunctions.<@%unk/%unk: .getSupportedPortraitEffects()>()\n%5 = portraitEffectsList[0]\n%6 = portraitEffectsList[1]\n%7 = 'PortraitPhotoConflictFunctions getSupportedPortraitEffects:' + %5\n%8 = %7 + ','\n%9 = %8 + %6\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %9)\nvirtualAperturesList = instanceinvoke conflictFunctions.<@%unk/%unk: .getSupportedVirtualApertures()>()\n%10 = virtualAperturesList[0]\n%11 = virtualAperturesList[1]\n%12 = 'PortraitPhotoConflictFunctions getSupportedVirtualApertures:' + %10\n%13 = %12 + ','\n%14 = %13 + %11\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %14)\nphysicalAperturesList = instanceinvoke conflictFunctions.<@%unk/%unk: .getSupportedPhysicalApertures()>()\ninstanceinvoke physicalAperturesList.<@%unk/%unk: .forEach()>(%AM47$logPortraitPhotoConflictFunctions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }"
        },
        {
          "type": "function",
          "name": "logCameraOutputCapabilities",
          "label": "logCameraOutputCapabilities",
          "start_line": 1,
          "end_line": 2029,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "coc = parameter0: camera.CameraOutputCapability\nthis = this: @ts_files/12.ts: CameraService\npreviewProfiles = coc.<@%unk/%unk: .previewProfiles>\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(previewProfiles)\n%1 = 'getCameraOutputCapabilities previewProfiles: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %1)\nphotoProfiles = coc.<@%unk/%unk: .photoProfiles>\n%2 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(photoProfiles)\n%3 = 'getCameraOutputCapabilities photoProfiles: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %3)\nvideoProfiles = coc.<@%unk/%unk: .videoProfiles>\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(videoProfiles)\n%5 = 'getCameraOutputCapabilities videoProfiles: ' + %4\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %5)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }"
        },
        {
          "type": "function",
          "name": "%AM1",
          "label": "%AM1",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(photoUri: string) => void | undefined"
        },
        {
          "type": "function",
          "name": "%AM4$%AM3$%AM2$constructor",
          "label": "%AM4$%AM3$%AM2$constructor",
          "start_line": 1,
          "end_line": 176,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "errCode = parameter0: BusinessError\ncomponent = parameter1: image.Component\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, 'getComponent start')\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(errCode)\n%1 = 'err: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\n%2 = component === undefined\n%3 = errCode || %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'getComponent failed')\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "buffer = undefined\n%4 = component.<@%unk/%unk: .byteBuffer>\nif %4 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "buffer = component.<@%unk/%unk: .byteBuffer>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.savePicture(ArrayBuffer, image.Image)>(buffer, imageObj)\nreturn",
                          "start_line": 1,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Logger.<@%unk/%unk: .error()>(TAG, 'component byteBuffer is undefined')",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM2$constructor",
          "label": "%AM3$%AM2$constructor",
          "start_line": 1,
          "end_line": 169,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "errCode = parameter0: BusinessError\nimageObj = parameter1: image.Image\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'readNextImage start')\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(errCode)\n%1 = 'err: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\n%2 = imageObj === undefined\n%3 = errCode || %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .error()>(TAG, 'readNextImage failed')\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = image.<@%unk/%unk: .ComponentType>\n%5 = %4.<@%unk/%unk: .JPEG>\ninstanceinvoke imageObj.<@%unk/%unk: .getComponent()>(%5, %AM4$%AM3$%AM2$constructor)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        }"
        },
        {
          "type": "function",
          "name": "%AM2$constructor",
          "label": "%AM2$constructor",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, 'imageArrival start')\n%0 = this.<@ts_files/12.ts: CameraService.mReceiver>\ninstanceinvoke %0.<@%unk/%unk: .readNextImage()>(%AM3$%AM2$constructor)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      }"
        },
        {
          "type": "function",
          "name": "%AM5$switchProfiles",
          "label": "%AM5$switchProfiles",
          "start_line": 1,
          "end_line": 257,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM6$switchProfiles",
          "label": "%AM6$switchProfiles",
          "start_line": 1,
          "end_line": 263,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM7$switchProfiles",
          "label": "%AM7$switchProfiles",
          "start_line": 1,
          "end_line": 271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM8$switchProfiles",
          "label": "%AM8$switchProfiles",
          "start_line": 1,
          "end_line": 277,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM9$switchProfiles",
          "label": "%AM9$switchProfiles",
          "start_line": 1,
          "end_line": 294,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.VideoProfile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\n%13 = profile.<@%unk/%unk: .frameRateRange>\n%14 = %13.<@%unk/%unk: .min>\n%15 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%16 = %15.<@ts_files/12.ts: %AC$CameraService$%instInit$3.frameRateRange>\n%17 = %16.<@%unk/%unk: .min>\n%18 = %14 === %17\n%19 = %12 && %18\n%20 = profile.<@%unk/%unk: .frameRateRange>\n%21 = %20.<@%unk/%unk: .max>\n%22 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%23 = %22.<@ts_files/12.ts: %AC$CameraService$%instInit$3.frameRateRange>\n%24 = %23.<@%unk/%unk: .max>\n%25 = %21 === %24\n%26 = %19 && %25\nreturn %26",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        }"
        },
        {
          "type": "function",
          "name": "%AM10$switchProfiles",
          "label": "%AM10$switchProfiles",
          "start_line": 1,
          "end_line": 306,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM11$switchProfiles",
          "label": "%AM11$switchProfiles",
          "start_line": 1,
          "end_line": 312,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "profile = parameter0: camera.Profile\nthis = this: @ts_files/12.ts: CameraService\n%0 = profile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = profile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.defaultProfile>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$6.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\nreturn %12",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }"
        },
        {
          "type": "function",
          "name": "%AM12$isVideoFrameSupportedFn",
          "label": "%AM12$isVideoFrameSupportedFn",
          "start_line": 1,
          "end_line": 479,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [videoFrame]\nvideoProfile = parameter1: camera.VideoProfile\nvideoFrame = %closures0.videoFrame\nthis = this: @ts_files/12.ts: CameraService\n%0 = videoProfile.<@%unk/%unk: .size>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.height>\n%2 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%3 = %2.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %1 === %4\n%6 = videoProfile.<@%unk/%unk: .size>\n%7 = %6.<@%unk/%unk: .width>\n%8 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%9 = %8.<@ts_files/12.ts: %AC$CameraService$%instInit$3.size>\n%10 = %9.<@%unk/%unk: .width>\n%11 = %7 === %10\n%12 = %5 && %11\n%13 = videoProfile.<@%unk/%unk: .format>\n%14 = this.<@ts_files/12.ts: CameraService.videoProfileObj>\n%15 = %14.<@ts_files/12.ts: %AC$CameraService$%instInit$3.format>\n%16 = %13 === %15\n%17 = %12 && %16\n%18 = videoProfile.<@%unk/%unk: .frameRateRange>\n%19 = %18.<@%unk/%unk: .min>\n%20 = %19 === videoFrame\n%21 = %17 && %20\n%22 = videoProfile.<@%unk/%unk: .frameRateRange>\n%23 = %22.<@%unk/%unk: .max>\n%24 = %23 === videoFrame\n%25 = %21 && %24\nreturn %25",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    }"
        },
        {
          "type": "function",
          "name": "%AM13$prepareAVRecorder",
          "label": "%AM13$prepareAVRecorder",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: @ts_files/12.ts: %AC$29\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%1 = 'prepareAVRecorder prepare err: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM14$pauseVideo",
          "label": "%AM14$pauseVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%1 = 'pauseVideo failed: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM15$pauseVideo",
          "label": "%AM15$pauseVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\n%0 = this.<@ts_files/12.ts: CameraService.videoOutput>\ninstanceinvoke %0.<@%unk/%unk: .stop()>()\nthis.<@ts_files/12.ts: CameraService.videoOutputStatus> = false\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'pauseVideo success')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }"
        },
        {
          "type": "function",
          "name": "%AM17$%AM16$resumeVideo",
          "label": "%AM17$%AM16$resumeVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: @ts_files/12.ts: %AC$30\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%1 = 'resumeVideo failed: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      }"
        },
        {
          "type": "function",
          "name": "%AM18$%AM16$resumeVideo",
          "label": "%AM18$%AM16$resumeVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'resumeVideo success')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }"
        },
        {
          "type": "function",
          "name": "%AM16$resumeVideo",
          "label": "%AM16$resumeVideo",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\nthis.<@ts_files/12.ts: CameraService.videoOutputStatus> = true\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'resumeVideo start')\n%0 = this.<@ts_files/12.ts: CameraService.videoRecorder>\n%1 = instanceinvoke %0.<@%unk/%unk: .resume()>()\n%2 = instanceinvoke %1.<@%unk/%unk: .then()>(%AM18$%AM16$resumeVideo)\ninstanceinvoke %2.<@%unk/%unk: .catch()>(%AM17$%AM16$resumeVideo)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    }"
        },
        {
          "type": "function",
          "name": "%AM19$configMoonCaptureBoost",
          "label": "%AM19$configMoonCaptureBoost",
          "start_line": 1,
          "end_line": 1159,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "error = parameter0: unknown\nstatusObject = parameter1: unknown\nthis = this: @ts_files/12.ts: CameraService\n%0 = statusObject.<@%unk/%unk: .featureType>\n%1 = statusObject.<@%unk/%unk: .detected>\n%2 = 'on featureDetectionStatus featureType:' + %0\n%3 = %2 + ' detected:'\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\n%5 = statusObject.<@%unk/%unk: .featureType>\n%6 = camera.<@%unk/%unk: .SceneFeatureType>\n%7 = %6.<@%unk/%unk: .MOON_CAPTURE_BOOST>\nif %5 === %7",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "status = statusObject.<@%unk/%unk: .detected>\n%8 = 'on moonCaptureBoostStatus change:' + status\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %8)\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('moonCaptureComponentIsShow', status)\n%9 = !status\nif %9 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.setMoonCaptureBoostEnable(Boolean)>(status)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 174,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          }"
        },
        {
          "type": "function",
          "name": "%AM20$photoOutPutCallBack",
          "label": "%AM20$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\ncaptureId = parameter1: number\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'photoOutPutCallBack captureStart captureId success: ' + captureId\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM21$photoOutPutCallBack",
          "label": "%AM21$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nframeShutterInfo = parameter1: camera.FrameShutterInfo\nthis = this: @ts_files/12.ts: CameraService\n%0 = frameShutterInfo.<@%unk/%unk: .captureId>\n%1 = frameShutterInfo.<@%unk/%unk: .timestamp>\n%2 = 'photoOutPutCallBack frameShutter captureId: ' + %0\n%3 = %2 + ', timestamp: '\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM22$photoOutPutCallBack",
          "label": "%AM22$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\ncaptureEndInfo = parameter1: camera.CaptureEndInfo\nthis = this: @ts_files/12.ts: CameraService\n%0 = captureEndInfo.<@%unk/%unk: .captureId>\n%1 = captureEndInfo.<@%unk/%unk: .frameCount>\n%2 = 'photoOutPutCallBack captureEnd captureId: ' + %0\n%3 = %2 + ', frameCount: '\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %4)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM23$photoOutPutCallBack",
          "label": "%AM23$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'photoOutPut data: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM25$%AM24$photoOutPutCallBack",
          "label": "%AM25$%AM24$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1665,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "errCode = parameter0: BusinessError\ncomponent = parameter1: image.Component\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, 'getComponent start')\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(errCode)\n%1 = 'err: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\n%2 = component === undefined\n%3 = errCode || %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'getComponent failed')\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "buffer = undefined\n%4 = component.<@%unk/%unk: .byteBuffer>\nif %4 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "buffer = component.<@%unk/%unk: .byteBuffer>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke this.<@ts_files/12.ts: CameraService.savePicture(ArrayBuffer, image.Image)>(buffer, mainImage)\nreturn",
                          "start_line": 1,
                          "end_line": 1822,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Logger.<@%unk/%unk: .error()>(TAG, 'component byteBuffer is undefined')",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      }"
        },
        {
          "type": "function",
          "name": "%AM24$photoOutPutCallBack",
          "label": "%AM24$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1657,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nphoto = parameter1: camera.Photo\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'photoOutPutCallBack photoAvailable 3')\nif err != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%1 = 'photoAvailable error: ' + %0\n%2 = %1 + '.'\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "mainImage = photo.<@%unk/%unk: .main>\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('mainImage', mainImage)\n%3 = image.<@%unk/%unk: .ComponentType>\n%4 = %3.<@%unk/%unk: .JPEG>\ninstanceinvoke mainImage.<@%unk/%unk: .getComponent()>(%4, %AM25$%AM24$photoOutPutCallBack)\ninstanceinvoke photo.<@%unk/%unk: .release()>()\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    }"
        },
        {
          "type": "function",
          "name": "%AM27$%AM26$photoOutPutCallBack",
          "label": "%AM27$%AM26$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "thumbnail = parameter0: image.PixelMap\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('proxyThumbnail', thumbnail)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      }"
        },
        {
          "type": "function",
          "name": "%AM26$photoOutPutCallBack",
          "label": "%AM26$photoOutPutCallBack",
          "start_line": 1,
          "end_line": 1682,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nproxyObj = parameter1: camera.DeferredPhotoProxy\nthis = this: @ts_files/12.ts: CameraService\nif err != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%1 = 'deferredPhotoProxyAvailable error: ' + %0\n%2 = %1 + '.'\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable')\n%3 = instanceinvoke proxyObj.<@%unk/%unk: .getThumbnail()>()\ninstanceinvoke %3.<@%unk/%unk: .then()>(%AM27$%AM26$photoOutPutCallBack)\ninstanceinvoke this.<@ts_files/12.ts: CameraService.saveDeferredPhoto(camera.DeferredPhotoProxy)>(proxyObj)\nreturn",
                  "start_line": 1,
                  "end_line": 1822,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    }"
        },
        {
          "type": "function",
          "name": "%AM28$previewOutputCallBack",
          "label": "%AM28$previewOutputCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, 'Preview frame started')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    }"
        },
        {
          "type": "function",
          "name": "%AM29$previewOutputCallBack",
          "label": "%AM29$previewOutputCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, 'Preview frame ended')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    }"
        },
        {
          "type": "function",
          "name": "%AM30$previewOutputCallBack",
          "label": "%AM30$previewOutputCallBack",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "previewOutputError = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(previewOutputError)\n%1 = 'Preview output previewOutputError: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM31$onVideoOutputChange",
          "label": "%AM31$onVideoOutputChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onVideoOutputChange frame started')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    }"
        },
        {
          "type": "function",
          "name": "%AM32$onVideoOutputChange",
          "label": "%AM32$onVideoOutputChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/12.ts: CameraService\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onVideoOutputChange frame frameEnd')\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    }"
        },
        {
          "type": "function",
          "name": "%AM33$onVideoOutputChange",
          "label": "%AM33$onVideoOutputChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "videoOutputError = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(videoOutputError)\n%1 = 'onVideoOutputChange fail: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM34$onCameraStatusChange",
          "label": "%AM34$onCameraStatusChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\ncameraStatusInfo = parameter1: camera.CameraStatusInfo\nthis = this: @ts_files/12.ts: CameraService\n%0 = cameraStatusInfo.<@%unk/%unk: .camera>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.cameraId>\n%2 = cameraStatusInfo.<@%unk/%unk: .status>\n%3 = 'onCameraStatusChange cameraStatus success, cameraId: ' + %1\n%4 = %3 + ', status: '\n%5 = %4 + %2\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %5)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM35$onCameraInputChange",
          "label": "%AM35$onCameraInputChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cameraInputError = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = cameraInputError.<@%unk/%unk: .code>\n%1 = 'onCameraInputChange cameraInput error code: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      }"
        },
        {
          "type": "function",
          "name": "%AM36$onFocusStateChange",
          "label": "%AM36$onFocusStateChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nfocusState = parameter1: camera.FocusState\nthis = this: @ts_files/12.ts: CameraService\n%0 = 'onFocusStateChange captureSession focusStateChange success : ' + focusState\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM37$onAbilityChange",
          "label": "%AM37$onAbilityChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [session]\nerr = parameter1: BusinessError\nsession = %closures0.session\nthis = this: @ts_files/12.ts: CameraService\nzoomRatioRange = instanceinvoke session.<@%unk/%unk: .getZoomRatioRange()>()\nisMacroSupported = instanceinvoke session.<@%unk/%unk: .isMacroSupported()>()\n%0 = zoomRatioRange[0]\n%1 = zoomRatioRange[1]\n%2 = 'call abilityChange  getZoomRatioRange:' + %0\n%3 = %2 + ','\n%4 = %3 + %1\n%5 = %4 + ' isMacroSupported:'\n%6 = %5 + isMacroSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %6)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM38$onCaptureSessionErrorChange",
          "label": "%AM38$onCaptureSessionErrorChange",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "captureSessionError = parameter0: BusinessError\nthis = this: @ts_files/12.ts: CameraService\n%0 = captureSessionError.<@%unk/%unk: .code>\n%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%0)\n%2 = 'onCaptureSessionErrorChange captureSession fail: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %2)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    }"
        },
        {
          "type": "function",
          "name": "%AM39$logPortraitSession",
          "label": "%AM39$logPortraitSession",
          "start_line": 1,
          "end_line": 1861,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "conflictFunctions = parameter0: camera.PortraitPhotoConflictFunctions\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logPortraitPhotoConflictFunctions(camera.PortraitPhotoConflictFunctions)>(conflictFunctions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    }"
        },
        {
          "type": "function",
          "name": "%AM40$logPortraitSession",
          "label": "%AM40$logPortraitSession",
          "start_line": 1,
          "end_line": 1869,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.PortraitPhotoFunctions\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logPortraitPhotoFunctions(camera.PortraitPhotoFunctions)>(functions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      }"
        },
        {
          "type": "function",
          "name": "%AM41$logVideoSession",
          "label": "%AM41$logVideoSession",
          "start_line": 1,
          "end_line": 1877,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "conflictFunctions = parameter0: camera.PortraitPhotoFunctions\nthis = this: @ts_files/12.ts: CameraService\nzoomRatioRange = instanceinvoke conflictFunctions.<@%unk/%unk: .getZoomRatioRange()>()\n%0 = zoomRatioRange[0]\n%1 = zoomRatioRange[1]\n%2 = 'VideoConflictFunctions getZoomRatioRange:' + %0\n%3 = %2 + ','\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %4)\nisMacroSupported = instanceinvoke conflictFunctions.<@%unk/%unk: .isMacroSupported()>()\n%5 = 'VideoConflictFunctions isMacroSupported:' + isMacroSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %5)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM42$logVideoSession",
          "label": "%AM42$logVideoSession",
          "start_line": 1,
          "end_line": 1888,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.VideoFunctions\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logVideoFunctions(camera.VideoFunctions)>(functions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(functions) => {\n        this.logVideoFunctions(functions);\n      }"
        },
        {
          "type": "function",
          "name": "%AM43$logPhotoSession",
          "label": "%AM43$logPhotoSession",
          "start_line": 1,
          "end_line": 1896,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "conflictFunctions = parameter0: camera.PhotoConflictFunctions\nthis = this: @ts_files/12.ts: CameraService\nzoomRatioRange = instanceinvoke conflictFunctions.<@%unk/%unk: .getZoomRatioRange()>()\n%0 = zoomRatioRange[0]\n%1 = zoomRatioRange[1]\n%2 = 'PhotoConflictFunctions getZoomRatioRange:' + %0\n%3 = %2 + ','\n%4 = %3 + %1\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %4)\nisMacroSupported = instanceinvoke conflictFunctions.<@%unk/%unk: .isMacroSupported()>()\n%5 = 'PhotoConflictFunctions isMacroSupported:' + isMacroSupported\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %5)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }"
        },
        {
          "type": "function",
          "name": "%AM44$logPhotoSession",
          "label": "%AM44$logPhotoSession",
          "start_line": 1,
          "end_line": 1907,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "functions = parameter0: camera.PhotoFunctions\nthis = this: @ts_files/12.ts: CameraService\ninstanceinvoke this.<@ts_files/12.ts: CameraService.logPhotoFunctions(camera.PhotoFunctions)>(functions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(functions) => {\n        this.logPhotoFunctions(functions);\n      }"
        },
        {
          "type": "function",
          "name": "%AM46$%AM45$logPortraitPhotoFunctions",
          "label": "%AM46$%AM45$logPortraitPhotoFunctions",
          "start_line": 1,
          "end_line": 1943,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "aperture = parameter0: unknown\nthis = this: @ts_files/12.ts: CameraService\n%0 = '           with aperture: ' + aperture\n%1 = %0 + ' '\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }"
        },
        {
          "type": "function",
          "name": "%AM45$logPortraitPhotoFunctions",
          "label": "%AM45$logPortraitPhotoFunctions",
          "start_line": 1,
          "end_line": 1941,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "physicalAperture = parameter0: camera.PhysicalAperture\nthis = this: @ts_files/12.ts: CameraService\n%0 = physicalAperture.<@%unk/%unk: .zoomRange>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.min>\n%2 = physicalAperture.<@%unk/%unk: .zoomRange>\n%3 = %2.<@%unk/%unk: .max>\n%4 = 'PortraitPhotoFunctions PhysicalAperture: zoomRange' + %1\n%5 = %4 + ','\n%6 = %5 + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %6)\n%7 = physicalAperture.<@%unk/%unk: .apertures>\ninstanceinvoke %7.<@%unk/%unk: .forEach()>(%AM46$%AM45$logPortraitPhotoFunctions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }"
        },
        {
          "type": "function",
          "name": "%AM48$%AM47$logPortraitPhotoConflictFunctions",
          "label": "%AM48$%AM47$logPortraitPhotoConflictFunctions",
          "start_line": 1,
          "end_line": 2023,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "aperture = parameter0: unknown\nthis = this: @ts_files/12.ts: CameraService\n%0 = '           with aperture: ' + aperture\n%1 = %0 + ' '\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %1)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }"
        },
        {
          "type": "function",
          "name": "%AM47$logPortraitPhotoConflictFunctions",
          "label": "%AM47$logPortraitPhotoConflictFunctions",
          "start_line": 1,
          "end_line": 2021,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "physicalAperture = parameter0: camera.PhysicalAperture\nthis = this: @ts_files/12.ts: CameraService\n%0 = physicalAperture.<@%unk/%unk: .zoomRange>\n%1 = %0.<@ts_files/12.ts: %AC$%dflt$%dflt$13.min>\n%2 = physicalAperture.<@%unk/%unk: .zoomRange>\n%3 = %2.<@%unk/%unk: .max>\n%4 = 'PortraitPhotoConflictFunctions PhysicalAperture: zoomRange' + %1\n%5 = %4 + ','\n%6 = %5 + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG_AB, %6)\n%7 = physicalAperture.<@%unk/%unk: .apertures>\ninstanceinvoke %7.<@%unk/%unk: .forEach()>(%AM48$%AM47$logPortraitPhotoConflictFunctions)\nreturn",
              "start_line": 1,
              "end_line": 1822,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class CameraService {\n  private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | undefined = undefined;\n  private sceneModes: Array<camera.SceneMode> | undefined = undefined;\n  private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutPut: camera.PhotoOutput | undefined = undefined;\n  private photoSession: camera.PhotoSession | undefined = undefined;\n  private videoSession: camera.VideoSession | undefined = undefined;\n  private portraitSession: camera.PortraitPhotoSession | undefined = undefined;\n  private nightSession: camera.NightPhotoSession | undefined = undefined;\n  private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\n  private mReceiver: image.ImageReceiver | undefined = undefined;\n  private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\n  private fd: number = -1;\n  private videoRecorder: media.AVRecorder | undefined = undefined;\n  private videoOutput: camera.VideoOutput | undefined = undefined;\n  private handleTakePicture: (photoUri: string) => void | undefined = undefined;\n  private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };\n  private videoProfiles: Array<camera.VideoProfile>;\n  private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };\n  private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };\n  private videoOutputStatus: boolean = false;\n  private colorEffect: camera.ColorEffectType | undefined = undefined;\n  private cameraMode: number = 0;\n  private accessHelper: photoAccessHelper.PhotoAccessHelper;\n  private globalContext: GlobalContext = GlobalContext.get();\n  private isFirstRecord = true;\n  private isMoonCaptureBoostSupported: Boolean = false;\n\n  constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 读取图像\n   */\n  async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 判断两浮点数是否相等\n   */\n  withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }\n\n  switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }\n\n  setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }\n\n  initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }\n\n  /**\n   * 初始化\n   */\n  async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }\n\n  /**\n   * 曝光\n   */\n  isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }\n\n  setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }\n\n  /**\n   * 曝光区域\n   */\n  isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }\n\n  /**\n   * 曝光补偿\n   */\n  isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }\n\n  /**\n   * 是否支持对应对焦模式\n   */\n  isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }\n\n  /**\n   * 对焦模式\n   */\n  isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }\n\n  /**\n   * 焦点\n   */\n  isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }\n\n  /**\n   * 闪关灯\n   */\n  hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }\n\n  getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }\n\n  /**\n   * 变焦\n   */\n  setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 防抖\n   */\n  isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }\n\n  setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }\n\n  /**\n   * 是否支持夜景模式\n   */\n  isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }\n\n  /**\n   * 是否支持人像模式\n   */\n  isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }\n\n  /**\n   * 是否支持微距模式\n   */\n  isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }\n\n  /**\n   * 是否支持镜像\n   */\n  isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }\n\n  setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }\n\n  /**\n   * 照片方向判断\n   */\n  onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }\n\n  /**\n   * 照片地理位置逻辑 ，后续需要靠定位实现 目前传入固定值\n   */\n  onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }\n\n  /**\n   * 拍照\n   */\n  async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }\n\n  async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }\n\n  async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }\n\n  async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }\n\n  /**\n   * 配置videoOutput流\n   */\n  async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }\n\n  /**\n   * 暂停录制\n   */\n  async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }\n\n  /**\n   * 恢复视频录制\n   */\n  async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }\n\n  /**\n   * 初始化录制适配地址\n   */\n  async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }\n\n  /**\n   * 开始录制\n   */\n  async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  /**\n   * 停止录制\n   */\n  async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }\n\n  /**\n   * 释放会话及其相关参数\n   */\n  async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }\n\n  /**\n   * 获取相机管理器实例\n   */\n  getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 获取支持指定的相机设备对象\n   */\n  getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 查询相机设备在模式下支持的输出能力\n   */\n  async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }\n\n  /**\n   * 创建previewOutput输出对象\n   */\n  createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 创建photoOutPut输出对象\n   */\n  createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }\n\n  /**\n   * 创建cameraInput输出对象\n   */\n  createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * 打开相机\n   */\n  async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 处理望月信息\n   */\n  configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }\n\n  /**\n   * 拍照会话流程\n   */\n  async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 会话流程\n   */\n  async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n \n  async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }\n\n  getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }\n\n  setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }\n\n  setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }\n\n  getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }\n\n  getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }\n\n  /**\n   * 监听拍照事件\n   */\n  photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }\n\n  /**\n   * 调用媒体库方式落盘缩略图\n   */\n  async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 监听预览事件\n   */\n  previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }\n\n  /**\n   * 监听录像事件\n   */\n  onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }\n\n  /**\n   * 镜头状态回调\n   */\n  onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }\n\n  /**\n   * 监听CameraInput的错误事件\n   */\n  onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }\n\n  /**\n   * 监听焦距的状态变化\n   */\n  onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }\n\n  onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }\n  /**\n   * 监听拍照会话的错误事件\n   */\n  onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }\n\n  setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }\n\n  getCaptureMode(): number {\n    return this.captureMode;\n  }\n\n  /**\n   * 查询是否支持二阶段\n   */\n  isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }\n\n  /**\n   * 查询是否已使能二阶段\n   */\n  isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }\n\n  /**\n   * 使能二阶段\n   */\n  deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }\n\n  testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }\n  \n  logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }\n  \n  logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n  \n  logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n\n  logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$13",
      "label": "%AC$%dflt$%dflt$13",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  width: 1280,\n  height: 720\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$mockInterface$14",
      "label": "%AC$%dflt$mockInterface$14",
      "start_line": 58,
      "end_line": 58,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ MOON_CAPTURE_BOOST: 0 }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$mockInterface$15",
      "label": "%AC$%dflt$mockInterface$15",
      "start_line": 61,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$16$%instInit$17",
      "label": "%AC$%AC$CameraService$switchProfiles$16$%instInit$17",
      "start_line": 285,
      "end_line": 285,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            width: 1920,\n            height: 1080\n          }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$16$%instInit$18",
      "label": "%AC$%AC$CameraService$switchProfiles$16$%instInit$18",
      "start_line": 289,
      "end_line": 289,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            min: 60,\n            max: 60\n          }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$switchProfiles$16",
      "label": "%AC$CameraService$switchProfiles$16",
      "start_line": 283,
      "end_line": 283,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$19$%instInit$20",
      "label": "%AC$%AC$CameraService$switchProfiles$19$%instInit$20",
      "start_line": 368,
      "end_line": 368,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$19$%instInit$21",
      "label": "%AC$%AC$CameraService$switchProfiles$19$%instInit$21",
      "start_line": 372,
      "end_line": 372,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$switchProfiles$19",
      "label": "%AC$CameraService$switchProfiles$19",
      "start_line": 366,
      "end_line": 366,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$22$%instInit$23",
      "label": "%AC$%AC$CameraService$switchProfiles$22$%instInit$23",
      "start_line": 329,
      "end_line": 329,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$switchProfiles$22",
      "label": "%AC$CameraService$switchProfiles$22",
      "start_line": 327,
      "end_line": 327,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CameraService$switchProfiles$24$%instInit$25",
      "label": "%AC$%AC$CameraService$switchProfiles$24$%instInit$25",
      "start_line": 347,
      "end_line": 347,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$switchProfiles$24",
      "label": "%AC$CameraService$switchProfiles$24",
      "start_line": 345,
      "end_line": 345,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$onChangeLocation$26",
      "label": "%AC$CameraService$onChangeLocation$26",
      "start_line": 757,
      "end_line": 757,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$onChangeLocation$27",
      "label": "%AC$CameraService$onChangeLocation$27",
      "start_line": 764,
      "end_line": 764,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    }"
    },
    {
      "type": "class",
      "name": "%AC$CameraService$takePicture$28",
      "label": "%AC$CameraService$takePicture$28",
      "start_line": 779,
      "end_line": 779,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    }"
    },
    {
      "type": "class",
      "name": "%AC$29",
      "label": "%AC$29",
      "start_line": 808,
      "end_line": 808,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ code?: number }"
    },
    {
      "type": "class",
      "name": "%AC$30",
      "label": "%AC$30",
      "start_line": 859,
      "end_line": 859,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ code?: number }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// @ts-nocheck\nimport camera from '@ohos.multimedia.camera';\nimport image from '@ohos.multimedia.image';\nimport media from '@ohos.multimedia.media';\nimport { BusinessError } from '@ohos.base';\nimport Logger from '../model/Logger';\nimport { Constants } from '../common/Constants';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport fs from '@ohos.file.fs';\nimport { GlobalContext } from '../common/GlobalContext';\nimport type { CameraConfig } from '../common/CameraConfig';\nimport colorSpaceManager from '@ohos.graphics.colorSpaceManager';\n\nconst cameraSize = {\n  width: 1280,\n  height: 720\n};\n\nenum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}\n\nenum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}\n\nenum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}\n\nfunction mockInterface(): void {\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}\n\nconst TAG: string = 'CameraService';\nconst TAG_AB: string = '-----AB-----';\n\nclass CameraService {\n  private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | undefined = undefined;\n  private sceneModes: Array<camera.SceneMode> | undefined = undefined;\n  private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutPut: camera.PhotoOutput | undefined = undefined;\n  private photoSession: camera.PhotoSession | undefined = undefined;\n  private videoSession: camera.VideoSession | undefined = undefined;\n  private portraitSession: camera.PortraitPhotoSession | undefined = undefined;\n  private nightSession: camera.NightPhotoSession | undefined = undefined;\n  private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\n  private mReceiver: image.ImageReceiver | undefined = undefined;\n  private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\n  private fd: number = -1;\n  private videoRecorder: media.AVRecorder | undefined = undefined;\n  private videoOutput: camera.VideoOutput | undefined = undefined;\n  private handleTakePicture: (photoUri: string) => void | undefined = undefined;\n  private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };\n  private videoProfiles: Array<camera.VideoProfile>;\n  private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };\n  private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };\n  private videoOutputStatus: boolean = false;\n  private colorEffect: camera.ColorEffectType | undefined = undefined;\n  private cameraMode: number = 0;\n  private accessHelper: photoAccessHelper.PhotoAccessHelper;\n  private globalContext: GlobalContext = GlobalContext.get();\n  private isFirstRecord = true;\n  private isMoonCaptureBoostSupported: Boolean = false;\n\n  constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 读取图像\n   */\n  async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 判断两浮点数是否相等\n   */\n  withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }\n\n  switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }\n\n  setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }\n\n  initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }\n\n  /**\n   * 初始化\n   */\n  async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }\n\n  /**\n   * 曝光\n   */\n  isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }\n\n  setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }\n\n  /**\n   * 曝光区域\n   */\n  isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }\n\n  /**\n   * 曝光补偿\n   */\n  isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }\n\n  /**\n   * 是否支持对应对焦模式\n   */\n  isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }\n\n  /**\n   * 对焦模式\n   */\n  isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }\n\n  /**\n   * 焦点\n   */\n  isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }\n\n  /**\n   * 闪关灯\n   */\n  hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }\n\n  getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }\n\n  /**\n   * 变焦\n   */\n  setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 防抖\n   */\n  isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }\n\n  setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }\n\n  /**\n   * 是否支持夜景模式\n   */\n  isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }\n\n  /**\n   * 是否支持人像模式\n   */\n  isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }\n\n  /**\n   * 是否支持微距模式\n   */\n  isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }\n\n  /**\n   * 是否支持镜像\n   */\n  isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }\n\n  setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }\n\n  /**\n   * 照片方向判断\n   */\n  onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }\n\n  /**\n   * 照片地理位置逻辑 ，后续需要靠定位实现 目前传入固定值\n   */\n  onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }\n\n  /**\n   * 拍照\n   */\n  async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }\n\n  async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }\n\n  async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }\n\n  async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }\n\n  /**\n   * 配置videoOutput流\n   */\n  async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }\n\n  /**\n   * 暂停录制\n   */\n  async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }\n\n  /**\n   * 恢复视频录制\n   */\n  async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }\n\n  /**\n   * 初始化录制适配地址\n   */\n  async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }\n\n  /**\n   * 开始录制\n   */\n  async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  /**\n   * 停止录制\n   */\n  async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }\n\n  /**\n   * 释放会话及其相关参数\n   */\n  async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }\n\n  /**\n   * 获取相机管理器实例\n   */\n  getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 获取支持指定的相机设备对象\n   */\n  getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 查询相机设备在模式下支持的输出能力\n   */\n  async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }\n\n  /**\n   * 创建previewOutput输出对象\n   */\n  createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 创建photoOutPut输出对象\n   */\n  createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }\n\n  /**\n   * 创建cameraInput输出对象\n   */\n  createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * 打开相机\n   */\n  async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 处理望月信息\n   */\n  configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }\n\n  /**\n   * 拍照会话流程\n   */\n  async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 会话流程\n   */\n  async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n \n  async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }\n\n  getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }\n\n  setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }\n\n  setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }\n\n  getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }\n\n  getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }\n\n  /**\n   * 监听拍照事件\n   */\n  photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }\n\n  /**\n   * 调用媒体库方式落盘缩略图\n   */\n  async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 监听预览事件\n   */\n  previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }\n\n  /**\n   * 监听录像事件\n   */\n  onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }\n\n  /**\n   * 镜头状态回调\n   */\n  onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }\n\n  /**\n   * 监听CameraInput的错误事件\n   */\n  onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }\n\n  /**\n   * 监听焦距的状态变化\n   */\n  onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }\n\n  onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }\n  /**\n   * 监听拍照会话的错误事件\n   */\n  onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }\n\n  setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }\n\n  getCaptureMode(): number {\n    return this.captureMode;\n  }\n\n  /**\n   * 查询是否支持二阶段\n   */\n  isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }\n\n  /**\n   * 查询是否已使能二阶段\n   */\n  isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }\n\n  /**\n   * 使能二阶段\n   */\n  deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }\n\n  testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }\n  \n  logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }\n  \n  logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n  \n  logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n\n  logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }\n}\n\nexport default new CameraService();"
}