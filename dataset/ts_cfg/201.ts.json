{
  "type": "file",
  "name": "201.ts",
  "label": "201.ts",
  "start_line": -1,
  "end_line": 8,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 8,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/201.ts: %dflt\nGRID_DENSITY_MIGRATION_V1 = 4\nreturn",
              "start_line": 1,
              "end_line": 8,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "migrateInputWidgetsMultiLineInputType",
          "label": "migrateInputWidgetsMultiLineInputType",
          "start_line": 1,
          "end_line": 4,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "currentDSL = parameter0: DSLWidget\nthis = this: @ts_files/201.ts: %dflt\n%0 = !currentDSL\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return currentDSL",
                  "start_line": 7,
                  "end_line": 7,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = staticinvoke <@%unk/%unk: .traverseDSLAndMigrate()>(currentDSL, %AM0$migrateInputWidgetsMultiLineInputType)\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function migrateInputWidgetsMultiLineInputType(\n  currentDSL: DSLWidget,\n): DSLWidget {\n  if (!currentDSL) return currentDSL;\n  return traverseDSLAndMigrate(currentDSL, (widget: WidgetProps) => {\n    if (widget.type === \"INPUT_WIDGET_V2\") {\n      const minInputSingleLineHeight =\n        widget.label || widget.tooltip\n          ? // adjust height for label | tooltip extra div\n            GRID_DENSITY_MIGRATION_V1 + 4\n          : // GRID_DENSITY_MIGRATION_V1 used to adjust code as per new scaled canvas.\n            GRID_DENSITY_MIGRATION_V1;\n      const isMultiLine =\n        (widget.bottomRow - widget.topRow) / minInputSingleLineHeight > 1 &&\n        widget.inputType === \"TEXT\";\n      if (isMultiLine) {\n        widget.inputType = \"MULTI_LINE_TEXT\";\n      }\n    }\n  });\n}"
        },
        {
          "type": "function",
          "name": "%AM0$migrateInputWidgetsMultiLineInputType",
          "label": "%AM0$migrateInputWidgetsMultiLineInputType",
          "start_line": 1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "widget = parameter0: WidgetProps\nthis = this: @ts_files/201.ts: %dflt\n%0 = widget.<@%unk/%unk: .type>\nif %0 === 'INPUT_WIDGET_V2'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 7,
                  "end_line": 8,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = widget.<@%unk/%unk: .label>\n%2 = widget.<@%unk/%unk: .tooltip>\n%3 = %1 || %2\nif %3 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "minInputSingleLineHeight = GRID_DENSITY_MIGRATION_V1 + 4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = widget.<@%unk/%unk: .bottomRow>\n%6 = widget.<@%unk/%unk: .topRow>\n%7 = %5 - %6\n%8 = %7 / minInputSingleLineHeight\n%9 = %8 > 1\n%10 = widget.<@%unk/%unk: .inputType>\n%11 = %10 === 'TEXT'\nisMultiLine = %9 && %11\nif isMultiLine != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "widget.<@%unk/%unk: .inputType> = 'MULTI_LINE_TEXT'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "minInputSingleLineHeight = GRID_DENSITY_MIGRATION_V1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(widget: WidgetProps) => {\n    if (widget.type === \"INPUT_WIDGET_V2\") {\n      const minInputSingleLineHeight =\n        widget.label || widget.tooltip\n          ? // adjust height for label | tooltip extra div\n            GRID_DENSITY_MIGRATION_V1 + 4\n          : // GRID_DENSITY_MIGRATION_V1 used to adjust code as per new scaled canvas.\n            GRID_DENSITY_MIGRATION_V1;\n      const isMultiLine =\n        (widget.bottomRow - widget.topRow) / minInputSingleLineHeight > 1 &&\n        widget.inputType === \"TEXT\";\n      if (isMultiLine) {\n        widget.inputType = \"MULTI_LINE_TEXT\";\n      }\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { DSLWidget, WidgetProps } from \"../types\";\nimport { traverseDSLAndMigrate } from \"../utils\";\nconst GRID_DENSITY_MIGRATION_V1 = 4;\nexport function migrateInputWidgetsMultiLineInputType(\n  currentDSL: DSLWidget,\n): DSLWidget {\n  if (!currentDSL) return currentDSL;\n  return traverseDSLAndMigrate(currentDSL, (widget: WidgetProps) => {\n    if (widget.type === \"INPUT_WIDGET_V2\") {\n      const minInputSingleLineHeight =\n        widget.label || widget.tooltip\n          ? // adjust height for label | tooltip extra div\n            GRID_DENSITY_MIGRATION_V1 + 4\n          : // GRID_DENSITY_MIGRATION_V1 used to adjust code as per new scaled canvas.\n            GRID_DENSITY_MIGRATION_V1;\n      const isMultiLine =\n        (widget.bottomRow - widget.topRow) / minInputSingleLineHeight > 1 &&\n        widget.inputType === \"TEXT\";\n      if (isMultiLine) {\n        widget.inputType = \"MULTI_LINE_TEXT\";\n      }\n    }\n  });\n}"
}