{
  "type": "file",
  "name": "41.ts",
  "label": "41.ts",
  "start_line": -1,
  "end_line": 188,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 188,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/41.ts: %dflt\nTAG = 'GroupDataImpl'\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "GroupDataImpl",
      "label": "GroupDataImpl",
      "start_line": 1,
      "end_line": 188,
      "functions": [
        {
          "type": "function",
          "name": "setSelectType",
          "label": "setSelectType",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "selectType = parameter0: number\nthis = this: @ts_files/41.ts: GroupDataImpl\nthis.<@ts_files/41.ts: GroupDataImpl.selectType> = selectType\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumId",
          "label": "setAlbumId",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = 'setAlbumId: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/41.ts: GroupDataImpl.albumId> = id\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.albumId = id;\n  }"
        },
        {
          "type": "function",
          "name": "setDeviceId",
          "label": "setDeviceId",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = 'setDeviceId: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/41.ts: GroupDataImpl.deviceId> = id\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.deviceId = id;\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumType",
          "label": "setAlbumType",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumType = parameter0: number\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = 'setAlbumType: ' + albumType\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/41.ts: GroupDataImpl.albumType> = albumType\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumType(albumType: number): void {\n    Log.info(TAG, 'setAlbumType: ' + albumType);\n    this.albumType = albumType;\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumSubtype",
          "label": "setAlbumSubtype",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumSubType = parameter0: number\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = 'setAlbumSubtype: ' + albumSubType\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/41.ts: GroupDataImpl.albumSubType> = albumSubType\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumSubtype(albumSubType: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);\n    this.albumSubType = albumSubType;\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumName",
          "label": "setAlbumName",
          "start_line": 1,
          "end_line": 188,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = 'setAlbumName: ' + name\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/41.ts: GroupDataImpl.albumName> = name\nreturn",
              "start_line": 1,
              "end_line": 188,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.albumName = name;\n  }"
        },
        {
          "type": "function",
          "name": "reloadGroupItemData",
          "label": "reloadGroupItemData",
          "start_line": 1,
          "end_line": 69,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isGrid = parameter0: boolean\nthis = this: @ts_files/41.ts: GroupDataImpl\nif isGrid != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke this.<@ts_files/41.ts: GroupDataImpl.reloadGridGroupItemData()>()\nreturn %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke this.<@ts_files/41.ts: GroupDataImpl.reloadBrowserGroupItemData()>()\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {\n    if (isGrid) {\n      return this.reloadGridGroupItemData();\n    } else {\n      return this.reloadBrowserGroupItemData();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "reloadBrowserGroupItemData",
          "label": "reloadBrowserGroupItemData",
          "start_line": 1,
          "end_line": 145,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/41.ts: GroupDataImpl\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reloadBrowserGroupItemData')\n%0 = newarray (any)[0]\ngroupDataItem = %0\n%1 = this.<@ts_files/41.ts: GroupDataImpl.albumName>\n%2 = this.<@ts_files/41.ts: GroupDataImpl.albumType>\n%3 = this.<@ts_files/41.ts: GroupDataImpl.albumSubType>\n%4 = instanceinvoke this.<@ts_files/41.ts: GroupDataImpl.getMediaItemFileAssets(string, number, number)>(%1, %2, %3)\nmediaFileAssets = await %4\n%5 = this.<@ts_files/41.ts: GroupDataImpl.albumId>\n%6 = MediaConstants.<@%unk/%unk: .ALBUM_ID_FAVOR>\nif %5 === %6\ni = 0",
              "start_line": 1,
              "end_line": 145,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %7",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = new @%unk/%unk: FavorUserFileDataItem\n%9 = newarray (any)[0]\ninstanceinvoke %8.<@%unk/%unk: FavorUserFileDataItem.constructor()>('', %9, i)\nfavorMediaItem = %8\n%10 = mediaFileAssets.<@%unk/%unk: .i>\n%11 = %10.<@%unk/%unk: .uri>\n%12 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .hasKey()>(%11)\nif %12 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = mediaFileAssets.<@%unk/%unk: .i>\n%14 = %13.<@%unk/%unk: .uri>\n%15 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%14)\n%16 = %15.<@%unk/%unk: .favouriteStatus>\nfavorMediaItem.<@%unk/%unk: FavorUserFileDataItem.favouriteStatus> = %16\n%17 = mediaFileAssets.<@%unk/%unk: .i>\n%18 = %17.<@%unk/%unk: .uri>\n%19 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%18)\n%20 = %19.<@%unk/%unk: .orientation>\nfavorMediaItem.<@%unk/%unk: FavorUserFileDataItem.orientation> = %20",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%21 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke favorMediaItem.<@%unk/%unk: .update()>(%21)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(favorMediaItem)\ni = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reload finish')\nreturn groupDataItem",
                      "start_line": 1,
                      "end_line": 157,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%22 = this.<@ts_files/41.ts: GroupDataImpl.albumId>\n%23 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\nif %22 === %23\ni = 0\ni = 0",
                  "start_line": 1,
                  "end_line": 145,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%24 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %24",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%25 = new @%unk/%unk: TrashUserFileDataItem\n%26 = newarray (any)[0]\ninstanceinvoke %25.<@%unk/%unk: TrashUserFileDataItem.constructor()>('', %26, i)\ntrashMediaItem = %25\n%27 = mediaFileAssets.<@%unk/%unk: .i>\n%28 = %27.<@%unk/%unk: .uri>\n%29 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .hasKey()>(%28)\nif %29 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%30 = mediaFileAssets.<@%unk/%unk: .i>\n%31 = %30.<@%unk/%unk: .uri>\n%32 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%31)\n%33 = %32.<@%unk/%unk: .favouriteStatus>\ntrashMediaItem.<@%unk/%unk: TrashUserFileDataItem.favouriteStatus> = %33\n%34 = mediaFileAssets.<@%unk/%unk: .i>\n%35 = %34.<@%unk/%unk: .uri>\n%36 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%35)\n%37 = %36.<@%unk/%unk: .orientation>\ntrashMediaItem.<@%unk/%unk: TrashUserFileDataItem.orientation> = %37",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%38 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke trashMediaItem.<@%unk/%unk: .update()>(%38)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(trashMediaItem)\ni = i + 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%39 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %39",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%40 = new @%unk/%unk: UserFileDataItem\n%41 = newarray (any)[0]\n%42 = this.<@ts_files/41.ts: GroupDataImpl.deviceId>\ninstanceinvoke %40.<@%unk/%unk: UserFileDataItem.constructor()>('', %41, %42, i)\nmediaItem = %40\n%43 = mediaFileAssets.<@%unk/%unk: .i>\n%44 = %43.<@%unk/%unk: .uri>\n%45 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .hasKey()>(%44)\nif %45 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%46 = mediaFileAssets.<@%unk/%unk: .i>\n%47 = %46.<@%unk/%unk: .uri>\nmediaItem = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%47)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%50 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke mediaItem.<@%unk/%unk: .update()>(%50)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(mediaItem)\ni = i + 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%48 = mediaFileAssets.<@%unk/%unk: .i>\n%49 = %48.<@%unk/%unk: .uri>\ninstanceinvoke userFileDataItemCache.<@%unk/%unk: .set()>(%49, mediaItem)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadBrowserGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let favorMediaItem = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          favorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        favorMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(favorMediaItem);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let trashMediaItem = new TrashUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          trashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        trashMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(trashMediaItem);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);\n        }\n        mediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(mediaItem);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }"
        },
        {
          "type": "function",
          "name": "reloadGridGroupItemData",
          "label": "reloadGridGroupItemData",
          "start_line": 1,
          "end_line": 145,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/41.ts: GroupDataImpl\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reloadGridGroupItemData')\n%0 = newarray (any)[0]\ngroupDataItem = %0\n%1 = this.<@ts_files/41.ts: GroupDataImpl.albumName>\n%2 = this.<@ts_files/41.ts: GroupDataImpl.albumType>\n%3 = this.<@ts_files/41.ts: GroupDataImpl.albumSubType>\n%4 = instanceinvoke this.<@ts_files/41.ts: GroupDataImpl.getMediaItemFileAssets(string, number, number)>(%1, %2, %3)\nmediaFileAssets = await %4\n%5 = this.<@ts_files/41.ts: GroupDataImpl.albumId>\n%6 = MediaConstants.<@%unk/%unk: .ALBUM_ID_FAVOR>\nif %5 === %6\ni = 0",
              "start_line": 1,
              "end_line": 145,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %7",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = new @%unk/%unk: FavorUserFileDataItem\n%9 = newarray (any)[0]\ninstanceinvoke %8.<@%unk/%unk: FavorUserFileDataItem.constructor()>('', %9, i)\nitem = %8\n%10 = mediaFileAssets.<@%unk/%unk: .i>\n%11 = %10.<@%unk/%unk: .uri>\n%12 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .hasKey()>(%11)\nif %12 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'hasKey')\n%13 = mediaFileAssets.<@%unk/%unk: .i>\n%14 = %13.<@%unk/%unk: .uri>\nitem = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%14)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%17 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke item.<@%unk/%unk: .update()>(%17)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(item)\ni = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%15 = mediaFileAssets.<@%unk/%unk: .i>\n%16 = %15.<@%unk/%unk: .uri>\ninstanceinvoke userFileDataItemCache.<@%unk/%unk: .set()>(%16, item)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reload finish')\nreturn groupDataItem",
                      "start_line": 1,
                      "end_line": 157,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%18 = this.<@ts_files/41.ts: GroupDataImpl.albumId>\n%19 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\nif %18 === %19\ni = 0\ni = 0",
                  "start_line": 1,
                  "end_line": 145,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%20 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %20",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%21 = new @%unk/%unk: TrashUserFileDataItem\n%22 = newarray (any)[0]\ninstanceinvoke %21.<@%unk/%unk: TrashUserFileDataItem.constructor()>('', %22, i)\nitem = %21\n%23 = mediaFileAssets.<@%unk/%unk: .i>\n%24 = %23.<@%unk/%unk: .uri>\n%25 = instanceinvoke trashUserFileDataItemCache.<@%unk/%unk: .hasKey()>(%24)\nif %25 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%26 = mediaFileAssets.<@%unk/%unk: .i>\n%27 = %26.<@%unk/%unk: .uri>\nitem = instanceinvoke trashUserFileDataItemCache.<@%unk/%unk: .get()>(%27)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%30 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke item.<@%unk/%unk: .update()>(%30)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(item)\ni = i + 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%28 = mediaFileAssets.<@%unk/%unk: .i>\n%29 = %28.<@%unk/%unk: .uri>\ninstanceinvoke trashUserFileDataItemCache.<@%unk/%unk: .set()>(%29, item)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%31 = mediaFileAssets.<@%unk/%unk: .length>\nif i < %31",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%32 = new @%unk/%unk: UserFileDataItem\n%33 = newarray (any)[0]\n%34 = this.<@ts_files/41.ts: GroupDataImpl.deviceId>\ninstanceinvoke %32.<@%unk/%unk: UserFileDataItem.constructor()>('', %33, %34, i)\nitem = %32\n%35 = mediaFileAssets.<@%unk/%unk: .i>\n%36 = %35.<@%unk/%unk: .uri>\n%37 = instanceinvoke userFileDataItemCache.<@%unk/%unk: .hasKey()>(%36)\nif %37 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%38 = mediaFileAssets.<@%unk/%unk: .i>\n%39 = %38.<@%unk/%unk: .uri>\nitem = instanceinvoke userFileDataItemCache.<@%unk/%unk: .get()>(%39)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%42 = mediaFileAssets.<@%unk/%unk: .i>\ninstanceinvoke item.<@%unk/%unk: .update()>(%42)\ninstanceinvoke groupDataItem.<@%unk/%unk: .push()>(item)\ni = i + 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%40 = mediaFileAssets.<@%unk/%unk: .i>\n%41 = %40.<@%unk/%unk: .uri>\ninstanceinvoke userFileDataItemCache.<@%unk/%unk: .set()>(%41, item)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadGridGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          Log.info(TAG, 'hasKey');\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new TrashUserFileDataItem('', [], i);\n        if (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }"
        },
        {
          "type": "function",
          "name": "getMediaItemFileAssets",
          "label": "getMediaItemFileAssets",
          "start_line": 1,
          "end_line": 160,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nalbumType = parameter1: number\nalbumSubType = parameter2: number\nthis = this: @ts_files/41.ts: GroupDataImpl\n%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%2 = %1.<@%unk/%unk: .ALBUM_NAME>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, albumName)\n%3 = new @ts_files/41.ts: %AC$GroupDataImpl$getMediaItemFileAssets$0\ninstanceinvoke %3.<@ts_files/41.ts: %AC$GroupDataImpl$getMediaItemFileAssets$0.constructor()>()\nfetchOption = %3\n%4 = 'albumName:' + albumName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\n%5 = MediaConstants.<@%unk/%unk: .ALBUM_TYPE_ALL>\nif albumType === %5",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = instanceinvoke userFileModel.<@%unk/%unk: .getAllMediaItems()>()\nreturn await %6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = MediaConstants.<@%unk/%unk: .ABSTRACT_ALBUM_TYPE_MOVING_PHOTO>\nif albumType === %7",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = instanceinvoke userFileModel.<@%unk/%unk: .getAllMovingPhotoItems()>()\nreturn await %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %9.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\nemptyPredicates = %9\n%10 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%11 = %10.<@%unk/%unk: .DATE_ADDED>\ninstanceinvoke emptyPredicates.<@%unk/%unk: .orderByDesc()>(%11)\n%12 = new @ts_files/41.ts: %AC$GroupDataImpl$getMediaItemFileAssets$1\ninstanceinvoke %12.<@ts_files/41.ts: %AC$GroupDataImpl$getMediaItemFileAssets$1.constructor()>()\nemptyFetchOption = %12\n%13 = instanceinvoke userFileModel.<@%unk/%unk: .getAllMediaItemsByType()>(albumType, albumSubType, fetchOption, emptyFetchOption)\nreturn await %13",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number): Promise<photoAccessHelper.PhotoAsset[]> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\n    let fetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    Log.info(TAG, 'albumName:' + albumName);\n    if (albumType === MediaConstants.ALBUM_TYPE_ALL) {\n      return await userFileModel.getAllMediaItems();\n    } else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {\n      return await userFileModel.getAllMovingPhotoItems();\n    }\n    let emptyPredicates = new dataSharePredicates.DataSharePredicates();\n    emptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let emptyFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    };\n    return await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);\n  }"
        },
        {
          "type": "function",
          "name": "getCount",
          "label": "getCount",
          "start_line": 1,
          "end_line": 182,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/41.ts: GroupDataImpl\ncontentWidth = instanceinvoke screenManager.<@%unk/%unk: .getWinWidth()>()\n%0 = Constants.<@%unk/%unk: .GRID_IMAGE_SIZE>\n%1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)\n%2 = Constants.<@%unk/%unk: .GRID_MAX_SIZE_RATIO>\nmaxThumbWidth = %1 * %2\n%3 = Constants.<@%unk/%unk: .GRID_MIN_COUNT>\n%4 = Constants.<@%unk/%unk: .GRID_GUTTER>\n%5 = contentWidth + %4\n%6 = Constants.<@%unk/%unk: .GRID_GUTTER>\n%7 = maxThumbWidth + %6\n%8 = %5 / %7\n%9 = instanceinvoke Math.<@%unk/%unk: .ceil()>(%8)\ncolumns = instanceinvoke Math.<@%unk/%unk: .max()>(%3, %9)\n%10 = instanceinvoke screenManager.<@%unk/%unk: .getWinHeight()>()\n%11 = Constants.<@%unk/%unk: .ACTION_BAR_HEIGHT>\n%12 = %10 - %11\n%13 = instanceinvoke screenManager.<@%unk/%unk: .getNaviBarHeight()>()\ncontentHeight = %12 - %13\n%14 = Constants.<@%unk/%unk: .GRID_GUTTER>\n%15 = contentHeight + %14\n%16 = Constants.<@%unk/%unk: .GRID_GUTTER>\n%17 = maxThumbWidth + %16\n%18 = %15 / %17\n%19 = instanceinvoke Math.<@%unk/%unk: .ceil()>(%18)\nrows = %19 + 4\n%20 = columns * rows\nreturn %20",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getCount(): number {\n    let contentWidth = screenManager.getWinWidth();\n    let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\n    let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\n    let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\n    let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;\n    return columns * rows;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class GroupDataImpl {\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private albumId: string = '';\n  private deviceId: string = '';\n  private albumType: number = -1;\n  private albumSubType: number = -1;\n  private albumName: string = '';\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.albumId = id;\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.deviceId = id;\n  }\n\n  setAlbumType(albumType: number): void {\n    Log.info(TAG, 'setAlbumType: ' + albumType);\n    this.albumType = albumType;\n  }\n\n  setAlbumSubtype(albumSubType: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);\n    this.albumSubType = albumSubType;\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.albumName = name;\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {\n    if (isGrid) {\n      return this.reloadGridGroupItemData();\n    } else {\n      return this.reloadBrowserGroupItemData();\n    }\n  }\n\n  async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadBrowserGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let favorMediaItem = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          favorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        favorMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(favorMediaItem);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let trashMediaItem = new TrashUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          trashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        trashMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(trashMediaItem);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);\n        }\n        mediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(mediaItem);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadGridGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          Log.info(TAG, 'hasKey');\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new TrashUserFileDataItem('', [], i);\n        if (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  private async getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number): Promise<photoAccessHelper.PhotoAsset[]> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\n    let fetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    Log.info(TAG, 'albumName:' + albumName);\n    if (albumType === MediaConstants.ALBUM_TYPE_ALL) {\n      return await userFileModel.getAllMediaItems();\n    } else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {\n      return await userFileModel.getAllMovingPhotoItems();\n    }\n    let emptyPredicates = new dataSharePredicates.DataSharePredicates();\n    emptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let emptyFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    };\n    return await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);\n  }\n\n  private getCount(): number {\n    let contentWidth = screenManager.getWinWidth();\n    let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\n    let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\n    let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\n    let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;\n    return columns * rows;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$GroupDataImpl$getMediaItemFileAssets$0",
      "label": "%AC$GroupDataImpl$getMediaItemFileAssets$0",
      "start_line": 163,
      "end_line": 163,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GroupDataImpl$getMediaItemFileAssets$1",
      "label": "%AC$GroupDataImpl$getMediaItemFileAssets$1",
      "start_line": 175,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { Log } from '../utils/Log';\nimport { Constants } from '../constants/Constants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { screenManager } from './ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { FavorUserFileDataItem } from '../base/FavorUserFileDataItem';\nimport { userFileDataItemCache } from '../base/UserFileDataItemCache';\nimport { trashUserFileDataItemCache } from '../base/TrashUserFileDataItemCache';\nimport { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\n\nconst TAG = 'GroupDataImpl';\n\nexport class GroupDataImpl {\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private albumId: string = '';\n  private deviceId: string = '';\n  private albumType: number = -1;\n  private albumSubType: number = -1;\n  private albumName: string = '';\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.albumId = id;\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.deviceId = id;\n  }\n\n  setAlbumType(albumType: number): void {\n    Log.info(TAG, 'setAlbumType: ' + albumType);\n    this.albumType = albumType;\n  }\n\n  setAlbumSubtype(albumSubType: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);\n    this.albumSubType = albumSubType;\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.albumName = name;\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {\n    if (isGrid) {\n      return this.reloadGridGroupItemData();\n    } else {\n      return this.reloadBrowserGroupItemData();\n    }\n  }\n\n  async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadBrowserGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let favorMediaItem = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          favorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        favorMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(favorMediaItem);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let trashMediaItem = new TrashUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          trashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        trashMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(trashMediaItem);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);\n        }\n        mediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(mediaItem);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadGridGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          Log.info(TAG, 'hasKey');\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new TrashUserFileDataItem('', [], i);\n        if (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  private async getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number): Promise<photoAccessHelper.PhotoAsset[]> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\n    let fetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    Log.info(TAG, 'albumName:' + albumName);\n    if (albumType === MediaConstants.ALBUM_TYPE_ALL) {\n      return await userFileModel.getAllMediaItems();\n    } else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {\n      return await userFileModel.getAllMovingPhotoItems();\n    }\n    let emptyPredicates = new dataSharePredicates.DataSharePredicates();\n    emptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let emptyFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    };\n    return await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);\n  }\n\n  private getCount(): number {\n    let contentWidth = screenManager.getWinWidth();\n    let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\n    let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\n    let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\n    let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;\n    return columns * rows;\n  }\n}\n"
}