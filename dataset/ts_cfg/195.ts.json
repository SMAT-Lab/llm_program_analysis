{
  "type": "file",
  "name": "195.ts",
  "label": "195.ts",
  "start_line": -1,
  "end_line": 50,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 50,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 50,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/195.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 50,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "CalendarEventFindManyPreQueryHook",
      "label": "CalendarEventFindManyPreQueryHook",
      "start_line": 1,
      "end_line": 50,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 50,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/195.ts: CalendarEventFindManyPreQueryHook.%instInit()>()\ntwentyORMManager = parameter0: TwentyORMManager\ncanAccessCalendarEventService = parameter1: CanAccessCalendarEventService\nthis = this: @ts_files/195.ts: CalendarEventFindManyPreQueryHook\nreturn",
              "start_line": 1,
              "end_line": 50,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}"
        },
        {
          "type": "function",
          "name": "execute",
          "label": "execute",
          "start_line": 1,
          "end_line": 20,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "authContext = parameter0: AuthContext\nobjectName = parameter1: string\npayload = parameter2: FindManyResolverArgs\nthis = this: @ts_files/195.ts: CalendarEventFindManyPreQueryHook\n%0 = payload.<@%unk/%unk: .filter>\n%1 = %0.<@%unk/%unk: .id>\n%2 = %1.<@%unk/%unk: .eq>\n%3 = !%2\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = new @%unk/%unk: BadRequestException\ninstanceinvoke %4.<@%unk/%unk: BadRequestException.constructor()>('id filter is required')\nthrow %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = authContext.<@%unk/%unk: .user>\n%6 = %5.<@%unk/%unk: .id>\n%7 = !%6\nif %7 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = new @%unk/%unk: BadRequestException\ninstanceinvoke %8.<@%unk/%unk: BadRequestException.constructor()>('User id is required')\nthrow %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = this.<@ts_files/195.ts: CalendarEventFindManyPreQueryHook.twentyORMManager>\n%10 = instanceinvoke %9.<@%unk/%unk: .getRepository()>('calendarChannelEventAssociation')\ncalendarChannelEventAssociationRepository = await %10\n%11 = new @ts_files/195.ts: %AC$CalendarEventFindManyPreQueryHook$execute$0\ninstanceinvoke %11.<@ts_files/195.ts: %AC$CalendarEventFindManyPreQueryHook$execute$0.constructor()>()\n%12 = instanceinvoke calendarChannelEventAssociationRepository.<@%unk/%unk: .find()>(%11)\ncalendarChannelCalendarEventAssociations = await %12\n%13 = calendarChannelCalendarEventAssociations.<@%unk/%unk: .length>\nif %13 === 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%14 = new @%unk/%unk: NotFoundException\ninstanceinvoke %14.<@%unk/%unk: NotFoundException.constructor()>()\nthrow %14",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%15 = authContext.<@%unk/%unk: .user>\n%16 = %15.<@%unk/%unk: .id>\n%17 = authContext.<@%unk/%unk: .workspace>\n%18 = %17.<@%unk/%unk: .id>\n%19 = this.<@ts_files/195.ts: CalendarEventFindManyPreQueryHook.canAccessCalendarEventService>\n%20 = instanceinvoke %19.<@%unk/%unk: .canAccessCalendarEvent()>(%16, %18, calendarChannelCalendarEventAssociations)\n%21 = await %20\nreturn payload",
                                      "start_line": 1,
                                      "end_line": 50,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      });\n    if (calendarChannelCalendarEventAssociations.length === 0) {\n      throw new NotFoundException();\n    }\n    await this.canAccessCalendarEventService.canAccessCalendarEvent(\n      authContext.user.id,\n      authContext.workspace.id,\n      calendarChannelCalendarEventAssociations,\n    );\n    return payload;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@WorkspaceQueryHook({\n  key: `calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      });\n    if (calendarChannelCalendarEventAssociations.length === 0) {\n      throw new NotFoundException();\n    }\n    await this.canAccessCalendarEventService.canAccessCalendarEvent(\n      authContext.user.id,\n      authContext.workspace.id,\n      calendarChannelCalendarEventAssociations,\n    );\n    return payload;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$CalendarEventFindManyPreQueryHook$execute$0$%instInit$1",
      "label": "%AC$%AC$CalendarEventFindManyPreQueryHook$execute$0$%instInit$1",
      "start_line": 37,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          calendarEventId: payload?.filter?.id?.eq,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$CalendarEventFindManyPreQueryHook$execute$0",
      "label": "%AC$CalendarEventFindManyPreQueryHook$execute$0",
      "start_line": 36,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { BadRequestException, NotFoundException, Scope } from '@nestjs/common';\nimport { WorkspaceQueryHookInstance } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/interfaces/workspace-query-hook.interface';\nimport { FindManyResolverArgs } from 'src/engine/api/graphql/workspace-resolver-builder/interfaces/workspace-resolvers-builder.interface';\nimport { WorkspaceQueryHook } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';\nimport { TwentyORMManager } from 'src/engine/twenty-orm/twenty-orm.manager';\nimport { CanAccessCalendarEventService } from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service';\nimport { CalendarChannelEventAssociationWorkspaceEntity } from 'src/modules/calendar/common/standard-objects/calendar-channel-event-association.workspace-entity';\nimport { AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key: `calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      });\n    if (calendarChannelCalendarEventAssociations.length === 0) {\n      throw new NotFoundException();\n    }\n    await this.canAccessCalendarEventService.canAccessCalendarEvent(\n      authContext.user.id,\n      authContext.workspace.id,\n      calendarChannelCalendarEventAssociations,\n    );\n    return payload;\n  }\n}"
}