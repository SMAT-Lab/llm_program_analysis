{
  "type": "file",
  "name": "29.ts",
  "label": "29.ts",
  "start_line": -1,
  "end_line": 172,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 165,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: %dflt\nTAG = 'ProcessMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "FindSameOperation",
      "label": "FindSameOperation",
      "start_line": 26,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export enum FindSameOperation {\n  NONE,\n  REPLACE,\n  SKIP\n}"
    },
    {
      "type": "class",
      "name": "Assets",
      "label": "Assets",
      "start_line": 32,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export interface Assets {\n  sourceAsset: photoAccessHelper.PhotoAsset,\n  targetAsset: photoAccessHelper.PhotoAsset\n}"
    },
    {
      "type": "class",
      "name": "ProcessMenuOperation",
      "label": "ProcessMenuOperation",
      "start_line": 1,
      "end_line": 172,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/29.ts: ProcessMenuOperation\nthis.<@ts_files/29.ts: ProcessMenuOperation.menuContext> = menuContext\n%0 = instanceinvoke Date.<@%unk/%unk: .now()>()\nthis.<@ts_files/29.ts: ProcessMenuOperation.requestTime> = %0\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n    this.requestTime = Date.now();\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n  }"
        },
        {
          "type": "function",
          "name": "callback",
          "label": "callback",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uris = parameter0: string[]\nthis = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.callbackBindImpl(string[])>(uris)\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "callback(uris: string[]): void {\n    this.callbackBindImpl(uris);\n  }"
        },
        {
          "type": "function",
          "name": "callbackBindImpl",
          "label": "callbackBindImpl",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uris = parameter0: string[]\nthis = this: @ts_files/29.ts: ProcessMenuOperation\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected callbackBindImpl(uris: string[]): void {\n  }"
        },
        {
          "type": "function",
          "name": "onCompleted",
          "label": "onCompleted",
          "start_line": 1,
          "end_line": 80,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\n%0 = this.<@ts_files/29.ts: ProcessMenuOperation.isPause>\n%1 = 'onCompleted ' + %0\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\n%2 = this.<@ts_files/29.ts: ProcessMenuOperation.successBatch>\n%2 = %2 + 1\n%3 = this.<@ts_files/29.ts: ProcessMenuOperation.isPause>\n%4 = !%3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.cyclicOperation()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 165,
                      "end_line": 165,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCompleted(): void {\n    Log.info(TAG, 'onCompleted ' + this.isPause);\n    this.successBatch++;\n    if (!this.isPause) {\n      this.cyclicOperation();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onError",
          "label": "onError",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\n%0 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%1 = 'Operate the ' + %0\n%2 = %1 + ' batch data error, total '\n%3 = this.<@ts_files/29.ts: ProcessMenuOperation.totalBatches>\n%4 = %2 + %3\n%5 = %4 + ' batches'\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %5)\nthis.<@ts_files/29.ts: ProcessMenuOperation.isError> = true\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.cyclicOperation()>()\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');\n    this.isError = true;\n    this.cyclicOperation();\n  }"
        },
        {
          "type": "function",
          "name": "processOperation",
          "label": "processOperation",
          "start_line": 1,
          "end_line": 95,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this.<@ts_files/29.ts: ProcessMenuOperation.isCancelled> = false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%19 = instanceinvoke Date.<@%unk/%unk: .now()>()\nthis.<@ts_files/29.ts: ProcessMenuOperation.startTime> = %19\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.requestOneBatchOperation()>()\nreturn",
                  "start_line": 1,
                  "end_line": 165,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'processOperation start')\n%0 = this.<@ts_files/29.ts: ProcessMenuOperation.items>\nlength = %0.<@%unk/%unk: .length>\n%1 = this.<@ts_files/29.ts: ProcessMenuOperation.count>\n%2 = 'selected count: ' + %1\n%3 = %2 + ', uris length: '\n%4 = %3 + length\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\n%5 = this.<@ts_files/29.ts: ProcessMenuOperation.BATCH_SIZE>\n%6 = length / %5\n%7 = instanceinvoke Math.<@%unk/%unk: .floor()>(%6)\n%8 = this.<@ts_files/29.ts: ProcessMenuOperation.BATCH_SIZE>\n%9 = length % %8\nif %9 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%10 = 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = <number>%10\n%12 = %7 + %11\nthis.<@ts_files/29.ts: ProcessMenuOperation.totalBatches> = %12\n%13 = 'The count to be operate is ' + length\n%14 = %13 + ', operate in '\n%15 = this.<@ts_files/29.ts: ProcessMenuOperation.totalBatches>\n%16 = %14 + %15\n%17 = %16 + ' batches'\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %17)\n%18 = this.<@ts_files/29.ts: ProcessMenuOperation.isCancelled>\nif %18 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%10 = 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    // Batch deletion\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');\n    if (this.isCancelled) {\n      this.isCancelled = false;\n    }\n    this.startTime = Date.now();\n\n    this.requestOneBatchOperation();\n  }"
        },
        {
          "type": "function",
          "name": "cyclicOperation",
          "label": "cyclicOperation",
          "start_line": 1,
          "end_line": 111,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'cyclicOperation')\n%0 = BroadcastConstants.<@%unk/%unk: .UPDATE_PROGRESS>\n%1 = instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.getExpectProgress()>()\n%2 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%3 = newarray (unknown)[2]\n%3[0] = %1\n%3[1] = %2\n%4 = this.<@ts_files/29.ts: ProcessMenuOperation.menuContext>\n%5 = %4.<@%unk/%unk: .broadCast>\ninstanceinvoke %5.<@%unk/%unk: .emit()>(%0, %3)\n%6 = this.<@ts_files/29.ts: ProcessMenuOperation.isCancelled>\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.onProcessDone()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%8 = this.<@ts_files/29.ts: ProcessMenuOperation.totalBatches>\n%9 = %7 >= %8\n%10 = this.<@ts_files/29.ts: ProcessMenuOperation.isError>\n%11 = %9 || %10\nif %11 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.onProcessDone()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 165,
                              "end_line": 165,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.requestOneBatchOperation()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "cyclicOperation(): void {\n    Log.info(TAG, 'cyclicOperation');\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n\n    if (this.isCancelled) {\n      this.onProcessDone();\n    }\n\n    if (this.currentBatch >= this.totalBatches || this.isError) {\n      this.onProcessDone();\n    } else {\n      this.requestOneBatchOperation();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "requestOneBatchOperation",
          "label": "requestOneBatchOperation",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "requestOneBatchOperation(): void {\n  }"
        },
        {
          "type": "function",
          "name": "onProcessDone",
          "label": "onProcessDone",
          "start_line": 1,
          "end_line": 130,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\n%0 = BroadcastConstants.<@%unk/%unk: .UPDATE_PROGRESS>\n%1 = newarray (number)[1]\n%1[0] = 100\n%2 = this.<@ts_files/29.ts: ProcessMenuOperation.menuContext>\n%3 = %2.<@%unk/%unk: .broadCast>\ninstanceinvoke %3.<@%unk/%unk: .emit()>(%0, %1)\n%4 = @ts_files/29.ts: FindSameOperation.[static]NONE\nthis.<@ts_files/29.ts: ProcessMenuOperation.findSameOperation> = %4\n%5 = this.<@ts_files/29.ts: ProcessMenuOperation.startTime>\nif %5 != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "this.<@ts_files/29.ts: ProcessMenuOperation.isCancelled> = false\n%20 = this.<@ts_files/29.ts: ProcessMenuOperation.onOperationEnd>\nif %20 != null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%21 = this.<@ts_files/29.ts: ProcessMenuOperation.isError>\n%22 = this.<@ts_files/29.ts: ProcessMenuOperation.successBatch>\n%23 = this.<@ts_files/29.ts: ProcessMenuOperation.count>\ninstanceinvoke this.<@%unk/%unk: .onOperationEnd()>(%21, %22, %23)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 165,
                          "end_line": 165,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%7 = this.<@ts_files/29.ts: ProcessMenuOperation.totalBatches>\nif %6 >= %7",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "operateCount = this.<@ts_files/29.ts: ProcessMenuOperation.count>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = instanceinvoke Date.<@%unk/%unk: .now()>()\n%12 = this.<@ts_files/29.ts: ProcessMenuOperation.startTime>\ncostTime = %11 - %12\n%13 = 'process data operate done, operate ' + operateCount\n%14 = %13 + ' items, cost time '\n%15 = %14 + costTime\n%16 = %15 + ' ms, average '\n%17 = costTime / operateCount\n%18 = %16 + %17\n%19 = %18 + ' ms/item.'\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %19)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%10 = this.<@ts_files/29.ts: ProcessMenuOperation.BATCH_SIZE>\noperateCount = %9 * %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onProcessDone(): void {\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\n    this.findSameOperation = FindSameOperation.NONE;\n    if (this.startTime != null) {\n      let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n      let costTime = Date.now() - this.startTime;\n      Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n      ' ms, average ' + (costTime / operateCount) + ' ms/item.');\n    }\n    this.isCancelled = false;\n    if (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);\n  }"
        },
        {
          "type": "function",
          "name": "onOperateCancelled",
          "label": "onOperateCancelled",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.onOperateCancelledBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "onOperateCancelledBindImpl",
          "label": "onOperateCancelledBindImpl",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Operate Cancel')\nthis.<@ts_files/29.ts: ProcessMenuOperation.isCancelled> = true\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.onProcessDone()>()\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();\n  }"
        },
        {
          "type": "function",
          "name": "onOperatePause",
          "label": "onOperatePause",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Operate Pause')\nthis.<@ts_files/29.ts: ProcessMenuOperation.isPause> = true\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');\n    this.isPause = true;\n  }"
        },
        {
          "type": "function",
          "name": "getExpectProgress",
          "label": "getExpectProgress",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getExpectProgress')\n%0 = this.<@ts_files/29.ts: ProcessMenuOperation.MAX_PROGRESS>\n%1 = this.<@ts_files/29.ts: ProcessMenuOperation.currentBatch>\n%2 = %0 * %1\n%3 = this.<@ts_files/29.ts: ProcessMenuOperation.BATCH_SIZE>\n%4 = %2 * %3\n%5 = this.<@ts_files/29.ts: ProcessMenuOperation.count>\n%6 = %4 / %5\n%7 = instanceinvoke Math.<@%unk/%unk: .floor()>(%6)\n%8 = this.<@ts_files/29.ts: ProcessMenuOperation.MAX_PROGRESS>\nprogress = instanceinvoke Math.<@%unk/%unk: .min()>(%7, %8)\nreturn progress",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getExpectProgress(): number {\n    Log.info(TAG, 'getExpectProgress');\n    let progress = Math.min(\n      Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\n    return progress;\n  }"
        },
        {
          "type": "function",
          "name": "setFindSameOperation",
          "label": "setFindSameOperation",
          "start_line": 1,
          "end_line": 168,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newOperation = parameter0: number\nthis = this: @ts_files/29.ts: ProcessMenuOperation\ninstanceinvoke this.<@ts_files/29.ts: ProcessMenuOperation.setFindSameOperationBindImpl(number)>(newOperation)\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);\n  }"
        },
        {
          "type": "function",
          "name": "setFindSameOperationBindImpl",
          "label": "setFindSameOperationBindImpl",
          "start_line": 1,
          "end_line": 172,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newOperation = parameter0: number\nthis = this: @ts_files/29.ts: ProcessMenuOperation\n%0 = 'setFindSameOperation ' + newOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nthis.<@ts_files/29.ts: ProcessMenuOperation.findSameOperation> = newOperation\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected setFindSameOperationBindImpl(newOperation: number): void {\n    Log.info(TAG, 'setFindSameOperation ' + newOperation);\n    this.findSameOperation = newOperation;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {\n  // Number of data operated in a batch\n  readonly BATCH_SIZE: number = 1;\n\n  // Maximum progress\n  readonly MAX_PROGRESS: number = 100;\n  items: Object[] = [];\n  menuContext: MenuContext;\n  uris: string[];\n  count: number;\n  onOperationEnd: Function;\n\n  // Total batches operated\n  totalBatches: number;\n\n  // Currently operated batch\n  currentBatch: number = 0;\n  successBatch: number = 0;\n  isCancelled: boolean = false;\n  startTime: number;\n  isPause: boolean = false;\n  isError: boolean = false;\n  findSameOperation: number = FindSameOperation.NONE;\n  requestTime: number;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n    this.requestTime = Date.now();\n  }\n\n  doAction(): void {\n  }\n\n  // Asynchronous callback for getSelection\n  callback(uris: string[]): void {\n    this.callbackBindImpl(uris);\n  }\n\n  protected callbackBindImpl(uris: string[]): void {\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'onCompleted ' + this.isPause);\n    this.successBatch++;\n    if (!this.isPause) {\n      this.cyclicOperation();\n    }\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');\n    this.isError = true;\n    this.cyclicOperation();\n  }\n\n  // Start processing operation\n  processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    // Batch deletion\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');\n    if (this.isCancelled) {\n      this.isCancelled = false;\n    }\n    this.startTime = Date.now();\n\n    this.requestOneBatchOperation();\n  }\n\n  // Batch circular deletion\n  cyclicOperation(): void {\n    Log.info(TAG, 'cyclicOperation');\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n\n    if (this.isCancelled) {\n      this.onProcessDone();\n    }\n\n    if (this.currentBatch >= this.totalBatches || this.isError) {\n      this.onProcessDone();\n    } else {\n      this.requestOneBatchOperation();\n    }\n  }\n\n  // Operate a batch of data\n  requestOneBatchOperation(): void {\n  }\n\n  onProcessDone(): void {\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\n    this.findSameOperation = FindSameOperation.NONE;\n    if (this.startTime != null) {\n      let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n      let costTime = Date.now() - this.startTime;\n      Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n      ' ms, average ' + (costTime / operateCount) + ' ms/item.');\n    }\n    this.isCancelled = false;\n    if (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);\n  }\n\n  // Operate cancel callback\n  onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();\n  }\n\n  protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();\n  }\n\n  // Operate cancel callback\n  onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');\n    this.isPause = true;\n  }\n\n  // Calculate the operation progress according to the batch\n  getExpectProgress(): number {\n    Log.info(TAG, 'getExpectProgress');\n    let progress = Math.min(\n      Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\n    return progress;\n  }\n\n  setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);\n  }\n\n  protected setFindSameOperationBindImpl(newOperation: number): void {\n    Log.info(TAG, 'setFindSameOperation ' + newOperation);\n    this.findSameOperation = newOperation;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { AsyncCallback } from './AsyncCallback';\nimport { Log } from '../utils/Log';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { userFileModel } from '../base/UserFileModel';\n\nexport enum FindSameOperation {\n  NONE,\n  REPLACE,\n  SKIP\n}\n\nexport interface Assets {\n  sourceAsset: photoAccessHelper.PhotoAsset,\n  targetAsset: photoAccessHelper.PhotoAsset\n}\n\nconst TAG = 'ProcessMenuOperation';\n\nexport class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {\n  // Number of data operated in a batch\n  readonly BATCH_SIZE: number = 1;\n\n  // Maximum progress\n  readonly MAX_PROGRESS: number = 100;\n  items: Object[] = [];\n  menuContext: MenuContext;\n  uris: string[];\n  count: number;\n  onOperationEnd: Function;\n\n  // Total batches operated\n  totalBatches: number;\n\n  // Currently operated batch\n  currentBatch: number = 0;\n  successBatch: number = 0;\n  isCancelled: boolean = false;\n  startTime: number;\n  isPause: boolean = false;\n  isError: boolean = false;\n  findSameOperation: number = FindSameOperation.NONE;\n  requestTime: number;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n    this.requestTime = Date.now();\n  }\n\n  doAction(): void {\n  }\n\n  // Asynchronous callback for getSelection\n  callback(uris: string[]): void {\n    this.callbackBindImpl(uris);\n  }\n\n  protected callbackBindImpl(uris: string[]): void {\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'onCompleted ' + this.isPause);\n    this.successBatch++;\n    if (!this.isPause) {\n      this.cyclicOperation();\n    }\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');\n    this.isError = true;\n    this.cyclicOperation();\n  }\n\n  // Start processing operation\n  processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    // Batch deletion\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');\n    if (this.isCancelled) {\n      this.isCancelled = false;\n    }\n    this.startTime = Date.now();\n\n    this.requestOneBatchOperation();\n  }\n\n  // Batch circular deletion\n  cyclicOperation(): void {\n    Log.info(TAG, 'cyclicOperation');\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n\n    if (this.isCancelled) {\n      this.onProcessDone();\n    }\n\n    if (this.currentBatch >= this.totalBatches || this.isError) {\n      this.onProcessDone();\n    } else {\n      this.requestOneBatchOperation();\n    }\n  }\n\n  // Operate a batch of data\n  requestOneBatchOperation(): void {\n  }\n\n  onProcessDone(): void {\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\n    this.findSameOperation = FindSameOperation.NONE;\n    if (this.startTime != null) {\n      let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n      let costTime = Date.now() - this.startTime;\n      Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n      ' ms, average ' + (costTime / operateCount) + ' ms/item.');\n    }\n    this.isCancelled = false;\n    if (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);\n  }\n\n  // Operate cancel callback\n  onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();\n  }\n\n  protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();\n  }\n\n  // Operate cancel callback\n  onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');\n    this.isPause = true;\n  }\n\n  // Calculate the operation progress according to the batch\n  getExpectProgress(): number {\n    Log.info(TAG, 'getExpectProgress');\n    let progress = Math.min(\n      Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\n    return progress;\n  }\n\n  setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);\n  }\n\n  protected setFindSameOperationBindImpl(newOperation: number): void {\n    Log.info(TAG, 'setFindSameOperation ' + newOperation);\n    this.findSameOperation = newOperation;\n  }\n}\n"
}