{
  "type": "file",
  "name": "75.ts",
  "label": "75.ts",
  "start_line": -1,
  "end_line": 112,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 112,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 112,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/75.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 112,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "PhotoGridBarModel",
      "label": "PhotoGridBarModel",
      "start_line": 1,
      "end_line": 112,
      "functions": [
        {
          "type": "function",
          "name": "setAlbumId",
          "label": "setAlbumId",
          "start_line": 1,
          "end_line": 112,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumId = parameter0: string\nthis = this: @ts_files/75.ts: PhotoGridBarModel\nthis.<@ts_files/75.ts: PhotoGridBarModel.albumId> = albumId\nreturn",
              "start_line": 1,
              "end_line": 112,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumId(albumId: string): void {\n    this.albumId = albumId;\n  }"
        },
        {
          "type": "function",
          "name": "createActionBar",
          "label": "createActionBar",
          "start_line": 1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "title = parameter0: Object\nisSelectedMode = parameter1: boolean\nselectedCount = parameter2: number\nisAllSelected = parameter3: boolean\nisEmpty = parameter4: boolean\nthis = this: @ts_files/75.ts: PhotoGridBarModel\n%0 = new @%unk/%unk: ActionBarProp\ninstanceinvoke %0.<@%unk/%unk: ActionBarProp.constructor()>()\nactionBarProp = %0\nisHorizontal = instanceinvoke screenManager.<@%unk/%unk: .isHorizontal()>()\nif isHorizontal != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/75.ts: PhotoGridBarModel.updateHorizontalActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)>(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return actionBarProp",
                      "start_line": 38,
                      "end_line": 93,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/75.ts: PhotoGridBarModel.updateVerticalActionBar(ActionBarProp, Object, boolean)>(actionBarProp, title, isSelectedMode)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number,\n                  isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "updateActionBar",
          "label": "updateActionBar",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\ntitle = parameter1: Object\nisSelectedMode = parameter2: boolean\nselectedCount = parameter3: number\nisAllSelected = parameter4: boolean\nisEmpty = parameter5: boolean\nthis = this: @ts_files/75.ts: PhotoGridBarModel\nisHorizontal = instanceinvoke screenManager.<@%unk/%unk: .isHorizontal()>()\nif isHorizontal != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/75.ts: PhotoGridBarModel.updateHorizontalActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)>(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 38,
                      "end_line": 112,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@ts_files/75.ts: PhotoGridBarModel.updateVerticalActionBar(ActionBarProp, Object, boolean)>(actionBarProp, title, isSelectedMode)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                  selectedCount: number, isAllSelected: boolean, isEmpty: boolean): void {\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "updateHorizontalActionBar",
          "label": "updateHorizontalActionBar",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\ntitle = parameter1: Object\nisSelectedMode = parameter2: boolean\nselectedCount = parameter3: number\nisAllSelected = parameter4: boolean\nisEmpty = parameter5: boolean\nthis = this: @ts_files/75.ts: PhotoGridBarModel\n%0 = ActionBarMode.<@%unk/%unk: .STANDARD_MODE>\n%1 = Action.<@%unk/%unk: .BACK>\n%2 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%1)\n%3 = instanceinvoke %2.<@%unk/%unk: .setTitle()>(title)\ninstanceinvoke %3.<@%unk/%unk: .setMode()>(%0)\nmenuList = instanceinvoke this.<@ts_files/75.ts: PhotoGridBarModel.getMenuList(boolean, number, boolean, boolean)>(isSelectedMode, selectedCount, isAllSelected, isEmpty)\nif isSelectedMode != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = ActionBarSelectionMode.<@%unk/%unk: .MULTI>\n%5 = ActionBarMode.<@%unk/%unk: .SELECTION_MODE>\n%6 = Action.<@%unk/%unk: .CANCEL>\n%7 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%6)\n%8 = instanceinvoke %7.<@%unk/%unk: .setMode()>(%5)\ninstanceinvoke %8.<@%unk/%unk: .setSelectionMode()>(%4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke actionBarProp.<@%unk/%unk: .setMenuList()>(menuList)\nreturn actionBarProp",
                      "start_line": 1,
                      "end_line": 93,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = this.<@ts_files/75.ts: PhotoGridBarModel.albumId>\n%10 = MediaConstants.<@%unk/%unk: .ALBUM_DISABLE_NEW_LIST>\n%11 = instanceinvoke %10.<@%unk/%unk: .has()>(%9)\n%12 = !%11\nif %12 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = Action.<@%unk/%unk: .NEW>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%13)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                                    selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    if (isSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n        menuList.push(Action.NEW);\n      }\n    }\n    actionBarProp.setMenuList(menuList);\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "updateVerticalActionBar",
          "label": "updateVerticalActionBar",
          "start_line": 1,
          "end_line": 72,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "actionBarProp = parameter0: ActionBarProp\ntitle = parameter1: Object\nisSelectedMode = parameter2: boolean\nthis = this: @ts_files/75.ts: PhotoGridBarModel\n%0 = newarray (any)[0]\nmenuList = %0\n%1 = this.<@ts_files/75.ts: PhotoGridBarModel.albumId>\n%2 = MediaConstants.<@%unk/%unk: .ALBUM_DISABLE_NEW_LIST>\n%3 = instanceinvoke %2.<@%unk/%unk: .has()>(%1)\n%4 = !%3\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = Action.<@%unk/%unk: .NEW>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%5)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = ActionBarMode.<@%unk/%unk: .STANDARD_MODE>\n%7 = Action.<@%unk/%unk: .BACK>\n%8 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%7)\n%9 = instanceinvoke %8.<@%unk/%unk: .setTitle()>(title)\n%10 = instanceinvoke %9.<@%unk/%unk: .setMenuList()>(menuList)\ninstanceinvoke %10.<@%unk/%unk: .setMode()>(%6)\nif isSelectedMode != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = newarray (any)[0]\nmenuList = %11\n%12 = ActionBarSelectionMode.<@%unk/%unk: .MULTI>\n%13 = ActionBarMode.<@%unk/%unk: .SELECTION_MODE>\n%14 = Action.<@%unk/%unk: .CANCEL>\n%15 = instanceinvoke actionBarProp.<@%unk/%unk: .setLeftAction()>(%14)\n%16 = instanceinvoke %15.<@%unk/%unk: .setMenuList()>(menuList)\n%17 = instanceinvoke %16.<@%unk/%unk: .setMode()>(%13)\ninstanceinvoke %17.<@%unk/%unk: .setSelectionMode()>(%12)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return actionBarProp",
                              "start_line": 38,
                              "end_line": 93,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n\n    if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n      menuList.push(Action.NEW);\n    }\n\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMenuList(menuList)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    if (isSelectedMode) {\n      menuList = [];\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    }\n\n    return actionBarProp;\n  }"
        },
        {
          "type": "function",
          "name": "getMenuList",
          "label": "getMenuList",
          "start_line": 1,
          "end_line": 96,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isSelectedMode = parameter0: boolean\nselectedCount = parameter1: number\nisAllSelected = parameter2: boolean\nisEmpty = parameter3: boolean\nthis = this: @ts_files/75.ts: PhotoGridBarModel\n%0 = newarray (any)[0]\nmenuList = %0\nif isSelectedMode != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/75.ts: PhotoGridBarModel.albumId>\n%2 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\nif %1 === %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = new @%unk/%unk: Boolean\ninstanceinvoke %3.<@%unk/%unk: Boolean.constructor()>(selectedCount)\nif %3 != undefined",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = Action.<@%unk/%unk: .RECOVER>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%4)\n%5 = new @%unk/%unk: Boolean\ninstanceinvoke %5.<@%unk/%unk: Boolean.constructor()>(selectedCount)\nif %5 != undefined",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%6 = Action.<@%unk/%unk: .DELETE>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%6)\nif isAllSelected != false",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%7 = Action.<@%unk/%unk: .DESELECT_ALL>",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%7)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return menuList",
                                                  "start_line": 112,
                                                  "end_line": 112,
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%7 = Action.<@%unk/%unk: .SELECT_ALL>",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%6 = Action.<@%unk/%unk: .DELETE_INVALID>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = Action.<@%unk/%unk: .RECOVER_INVALID>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if isAllSelected != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = Action.<@%unk/%unk: .DESELECT_ALL>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke menuList.<@%unk/%unk: .push()>(%8)\n%9 = new @%unk/%unk: Boolean\ninstanceinvoke %9.<@%unk/%unk: Boolean.constructor()>(selectedCount)\nif %9 != undefined",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%10 = Action.<@%unk/%unk: .DELETE>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%11 = Action.<@%unk/%unk: .MORE>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%10, %11)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%10 = Action.<@%unk/%unk: .DELETE_INVALID>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = Action.<@%unk/%unk: .SELECT_ALL>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%12 = this.<@ts_files/75.ts: PhotoGridBarModel.albumId>\n%13 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\n%14 = %12 === %13\n%15 = !isEmpty\n%16 = %14 && %15\nif %16 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%17 = Action.<@%unk/%unk: .CLEAR_RECYCLE>\ninstanceinvoke menuList.<@%unk/%unk: .push()>(%17)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isSelectedMode) {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n        menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n      } else {\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);\n      }\n    } else {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {\n        menuList.push(Action.CLEAR_RECYCLE);\n      }\n    }\n    return menuList;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class PhotoGridBarModel {\n  private albumId: string = '';\n\n  setAlbumId(albumId: string): void {\n    this.albumId = albumId;\n  }\n\n  createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number,\n                  isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                  selectedCount: number, isAllSelected: boolean, isEmpty: boolean): void {\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                                    selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    if (isSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n        menuList.push(Action.NEW);\n      }\n    }\n    actionBarProp.setMenuList(menuList);\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n\n    if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n      menuList.push(Action.NEW);\n    }\n\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMenuList(menuList)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    if (isSelectedMode) {\n      menuList = [];\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isSelectedMode) {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n        menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n      } else {\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);\n      }\n    } else {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {\n        menuList.push(Action.CLEAR_RECYCLE);\n      }\n    }\n    return menuList;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action';\nimport { ActionBarProp } from '../common/ActionBarProp';\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode';\nimport { screenManager } from '../common/ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\n\nexport class PhotoGridBarModel {\n  private albumId: string = '';\n\n  setAlbumId(albumId: string): void {\n    this.albumId = albumId;\n  }\n\n  createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number,\n                  isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                  selectedCount: number, isAllSelected: boolean, isEmpty: boolean): void {\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                                    selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    if (isSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n        menuList.push(Action.NEW);\n      }\n    }\n    actionBarProp.setMenuList(menuList);\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n\n    if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n      menuList.push(Action.NEW);\n    }\n\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMenuList(menuList)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    if (isSelectedMode) {\n      menuList = [];\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isSelectedMode) {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n        menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n      } else {\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);\n      }\n    } else {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {\n        menuList.push(Action.CLEAR_RECYCLE);\n      }\n    }\n    return menuList;\n  }\n}\n"
}