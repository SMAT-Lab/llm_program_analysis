{
  "type": "file",
  "name": "66.ts",
  "label": "66.ts",
  "start_line": -1,
  "end_line": 62,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 62,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/66.ts: %dflt\nTAG = 'TrashUserFileDataItem'\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "TrashUserFileDataItem",
      "label": "TrashUserFileDataItem",
      "start_line": 1,
      "end_line": 62,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/66.ts: TrashUserFileDataItem.%instInit()>()\nselections = parameter0: string\nselectionArgs = parameter1: string[]\nindex = parameter2: number\nthis = this: @ts_files/66.ts: TrashUserFileDataItem\nstaticinvoke <@%unk/%unk: .super()>(selections, selectionArgs, '', index)\ninstanceinvoke this.<@%unk/%unk: .setSelect()>(false)\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n    this.setSelect(false);\n  }"
        },
        {
          "type": "function",
          "name": "loadFileAsset",
          "label": "loadFileAsset",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/66.ts: TrashUserFileDataItem\n%0 = this.<@ts_files/66.ts: TrashUserFileDataItem.uri>\n%1 = 'loadFileAsset' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\n%2 = this.<@ts_files/66.ts: TrashUserFileDataItem.uri>\n%3 = instanceinvoke userFileModel.<@%unk/%unk: .getMediaItemByUriFromTrash()>(%2)\nreturn await %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    Log.debug(TAG, 'loadFileAsset' + this.uri);\n    return await userFileModel.getMediaItemByUriFromTrash(this.uri);\n  }"
        },
        {
          "type": "function",
          "name": "onRecover",
          "label": "onRecover",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/66.ts: TrashUserFileDataItem",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke this.<@ts_files/66.ts: TrashUserFileDataItem.loadFileAsset()>()\nfileAsset = await %0\nif fileAsset == null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .error()>(TAG, 'onRecover error: cant find file')\nreturn false",
                      "start_line": 1,
                      "end_line": 62,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = instanceinvoke userFileModel.<@%unk/%unk: .recover()>(fileAsset)\n%2 = await %1\n%3 = this.<@ts_files/66.ts: TrashUserFileDataItem.uri>\ninstanceinvoke selectManager.<@%unk/%unk: .deleteSelect()>(%3)\n%4 = MediaConstants.<@%unk/%unk: .TRASHED>\nthis.<@ts_files/66.ts: TrashUserFileDataItem.status> = %4\nreturn true",
                      "start_line": 1,
                      "end_line": 59,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'onRecover error: ' + %5\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %6)\nreturn false",
              "start_line": 1,
              "end_line": 62,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 33,
                  "end_line": 62,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async onRecover(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      if (fileAsset == null) {\n        Log.error(TAG, 'onRecover error: cant find file');\n        return false;\n      }\n      await userFileModel.recover(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));\n      return false;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onDelete",
          "label": "onDelete",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/66.ts: TrashUserFileDataItem",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke this.<@ts_files/66.ts: TrashUserFileDataItem.loadFileAsset()>()\nfileAsset = await %0\n%1 = instanceinvoke userFileModel.<@%unk/%unk: .permanentDelete()>(fileAsset)\n%2 = await %1\n%3 = this.<@ts_files/66.ts: TrashUserFileDataItem.uri>\ninstanceinvoke selectManager.<@%unk/%unk: .deleteSelect()>(%3)\n%4 = MediaConstants.<@%unk/%unk: .TRASHED>\nthis.<@ts_files/66.ts: TrashUserFileDataItem.status> = %4\nreturn true",
                  "start_line": 1,
                  "end_line": 59,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'onDelete error: ' + %5\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %6)\nreturn false",
              "start_line": 1,
              "end_line": 62,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 33,
                  "end_line": 62,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async onDelete(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await userFileModel.permanentDelete(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class TrashUserFileDataItem extends UserFileDataItem {\n  constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n    this.setSelect(false);\n  }\n\n  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    Log.debug(TAG, 'loadFileAsset' + this.uri);\n    return await userFileModel.getMediaItemByUriFromTrash(this.uri);\n  }\n\n  async onRecover(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      if (fileAsset == null) {\n        Log.error(TAG, 'onRecover error: cant find file');\n        return false;\n      }\n      await userFileModel.recover(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await userFileModel.permanentDelete(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { selectManager } from '../common/SelectManager';\nimport { userFileModel } from './UserFileModel';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from './UserFileDataItem';\n\nconst TAG = 'TrashUserFileDataItem';\n\nexport class TrashUserFileDataItem extends UserFileDataItem {\n  constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n    this.setSelect(false);\n  }\n\n  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    Log.debug(TAG, 'loadFileAsset' + this.uri);\n    return await userFileModel.getMediaItemByUriFromTrash(this.uri);\n  }\n\n  async onRecover(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      if (fileAsset == null) {\n        Log.error(TAG, 'onRecover error: cant find file');\n        return false;\n      }\n      await userFileModel.recover(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await userFileModel.permanentDelete(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n}\n"
}