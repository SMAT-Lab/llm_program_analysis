{
  "type": "file",
  "name": "51.ts",
  "label": "51.ts",
  "start_line": -1,
  "end_line": 27,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 27,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/51.ts: %dflt\nTAG = 'SingleInstanceHelper'\nglobalThis = instanceinvoke GlobalContext.<@%unk/%unk: .getContext()>()\nreturn",
              "start_line": 1,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "stashOrGetObject",
          "label": "stashOrGetObject",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "objectClass = parameter0: @ES2015/BuiltinClass: Object\nstorageKey = parameter1: string\nthis = this: @ts_files/51.ts: %dflt\n%0 = new @%unk/%unk: Boolean\n%1 = instanceinvoke globalThis.<@%unk/%unk: .getObject()>(storageKey)\ninstanceinvoke %0.<@%unk/%unk: Boolean.constructor()>(%1)\n%2 = instanceinvoke %0.<@%unk/%unk: .valueOf()>()\n%3 = !%2\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke globalThis.<@%unk/%unk: .setObject()>(storageKey, objectClass)\n%4 = 'Create key of ' + storageKey\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke globalThis.<@%unk/%unk: .getObject()>(storageKey)\n%6 = <T>%5\nreturn %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function stashOrGetObject<T>(objectClass: object, storageKey: string): T {\n  if (!new Boolean(globalThis.getObject(storageKey)).valueOf()) {\n    globalThis.setObject(storageKey, objectClass);\n    Log.debug(TAG, 'Create key of ' + storageKey);\n  }\n  return globalThis.getObject(storageKey) as T;\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'SingleInstanceHelper';\nlet globalThis = GlobalContext.getContext();\n\nexport function stashOrGetObject<T>(objectClass: object, storageKey: string): T {\n  if (!new Boolean(globalThis.getObject(storageKey)).valueOf()) {\n    globalThis.setObject(storageKey, objectClass);\n    Log.debug(TAG, 'Create key of ' + storageKey);\n  }\n  return globalThis.getObject(storageKey) as T;\n}\n"
}