{
  "type": "file",
  "name": "204.ts",
  "label": "204.ts",
  "start_line": -1,
  "end_line": 118,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 113,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\nstaticinvoke <@%unk/%unk: .describe()>('Attempt to run a basic loop automation', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = instanceinvoke automation.<@%unk/%unk: .init()>()\n%1 = await %0\n%2 = instanceinvoke config.<@%unk/%unk: .init()>()\n%3 = await %2\n%4 = instanceinvoke config.<@%unk/%unk: .createTable()>()\ntable = await %4\n%5 = instanceinvoke config.<@%unk/%unk: .createRow()>()\n%6 = await %5\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    await automation.init()\n    await config.init()\n    table = await config.createTable()\n    await config.createRow()\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%runLoop$%AM0",
          "label": "%AM2$%runLoop$%AM0",
          "start_line": 1,
          "end_line": 21,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM2$%runLoop$%AM0$0\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM2$%runLoop$%AM0$0.constructor()>()\nparams = %0\n%1 = table.<@%unk/%unk: ._id>\n%2 = staticinvoke <@%unk/%unk: .loopAutomation()>(%1, loopOpts)\n%3 = new @ts_files/204.ts: %AC$%dflt$%AM2$%runLoop$%AM0$2\ninstanceinvoke %3.<@ts_files/204.ts: %AC$%dflt$%AM2$%runLoop$%AM0$2.constructor()>()\n%4 = instanceinvoke triggers.<@%unk/%unk: .externalTrigger()>(%2, params, %3)\nreturn await %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n      const params = { fields: { appId } }\n      return await triggers.externalTrigger(\n        loopAutomation(table._id!, loopOpts),\n        params,\n        { getResponses: true }\n      )\n    }"
        },
        {
          "type": "function",
          "name": "%runLoop$%AM0",
          "label": "%runLoop$%AM0",
          "start_line": 1,
          "end_line": 19,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "loopOpts = parameter0: LoopInput\nthis = this: @ts_files/204.ts: %dflt\nappId = instanceinvoke config.<@%unk/%unk: .getAppId()>()\n%0 = instanceinvoke context.<@%unk/%unk: .doInAppContext()>(appId, %AM2$%runLoop$%AM0)\nreturn await %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function runLoop(loopOpts?: LoopInput) {\n    const appId = config.getAppId()\n    return await context.doInAppContext(appId, async () => {\n      const params = { fields: { appId } }\n      return await triggers.externalTrigger(\n        loopAutomation(table._id!, loopOpts),\n        params,\n        { getResponses: true }\n      )\n    })\n  }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .runLoop()>()\nresp = await %0\n%1 = resp.<@%unk/%unk: .steps>\n%2 = %1.<@%unk/%unk: .2>\n%3 = %2.<@%unk/%unk: .outputs>\n%4 = %3.<@%unk/%unk: .iterations>\n%5 = staticinvoke <@%unk/%unk: .expect()>(%4)\ninstanceinvoke %5.<@%unk/%unk: .toBe()>(1)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const resp = await runLoop()\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM0",
          "label": "%AM4$%AM0",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM4$%AM0$3\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM4$%AM0$3.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .runLoop()>(%0)\nresp = await %1\n%2 = resp.<@%unk/%unk: .steps>\n%3 = %2.<@%unk/%unk: .2>\n%4 = %3.<@%unk/%unk: .outputs>\n%5 = %4.<@%unk/%unk: .iterations>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\ninstanceinvoke %6.<@%unk/%unk: .toBe()>(3)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const resp = await runLoop({\n      option: LoopStepType.STRING,\n      binding: \"a,b,c\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(3)\n  }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM0",
          "label": "%AM5$%AM0",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM5$%AM0$4\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM5$%AM0$4.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .runLoop()>(%0)\nresp = await %1\n%2 = resp.<@%unk/%unk: .steps>\n%3 = %2.<@%unk/%unk: .2>\n%4 = %3.<@%unk/%unk: .outputs>\n%5 = %4.<@%unk/%unk: .iterations>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\ninstanceinvoke %6.<@%unk/%unk: .toBe()>(1)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const resp = await runLoop({\n      option: LoopStepType.ARRAY,\n      binding: \"{{ 1 }}\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  }"
        },
        {
          "type": "function",
          "name": "%AM7$%AM6$%AM0",
          "label": "%AM7$%AM6$%AM0",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM7$%AM6$%AM0$5\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM7$%AM6$%AM0$5.constructor()>()\noriginalStepInput = %0\nloopStepNumber = 3\nresult = instanceinvoke loopUtils.<@%unk/%unk: .replaceFakeBindings()>(originalStepInput, loopStepNumber)\n%1 = new @ts_files/204.ts: %AC$%dflt$%AM7$%AM6$%AM0$12\ninstanceinvoke %1.<@ts_files/204.ts: %AC$%dflt$%AM7$%AM6$%AM0$12.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .expect()>(result)\ninstanceinvoke %2.<@%unk/%unk: .toEqual()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      const originalStepInput = {\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        },\n      }\n      const loopStepNumber = 3\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        },\n      })\n    }"
        },
        {
          "type": "function",
          "name": "%AM8$%AM6$%AM0",
          "label": "%AM8$%AM6$%AM0",
          "start_line": 1,
          "end_line": 92,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM8$%AM6$%AM0$19\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM8$%AM6$%AM0$19.constructor()>()\noriginalStepInput = %0\nloopStepNumber = 2\nresult = instanceinvoke loopUtils.<@%unk/%unk: .replaceFakeBindings()>(originalStepInput, loopStepNumber)\n%1 = new @ts_files/204.ts: %AC$%dflt$%AM8$%AM6$%AM0$21\ninstanceinvoke %1.<@ts_files/204.ts: %AC$%dflt$%AM8$%AM6$%AM0$21.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .expect()>(result)\ninstanceinvoke %2.<@%unk/%unk: .toEqual()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      const originalStepInput = {\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ loop.someValue }}\",\n      }\n      const loopStepNumber = 2\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ steps.2.someValue }}\",\n      })\n    }"
        },
        {
          "type": "function",
          "name": "%AM9$%AM6$%AM0",
          "label": "%AM9$%AM6$%AM0",
          "start_line": 1,
          "end_line": 113,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\n%0 = new @ts_files/204.ts: %AC$%dflt$%AM9$%AM6$%AM0$23\ninstanceinvoke %0.<@ts_files/204.ts: %AC$%dflt$%AM9$%AM6$%AM0$23.constructor()>()\noriginalStepInput = %0\nloopStepNumber = 1\nresult = instanceinvoke loopUtils.<@%unk/%unk: .replaceFakeBindings()>(originalStepInput, loopStepNumber)\n%1 = staticinvoke <@%unk/%unk: .expect()>(result)\ninstanceinvoke %1.<@%unk/%unk: .toEqual()>(originalStepInput)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      const originalStepInput = {\n        emptyObject: {},\n        emptyArray: [],\n        nestedEmpty: {\n          emptyObj: {},\n          emptyArr: [],\n        },\n      }\n      const loopStepNumber = 1\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual(originalStepInput)\n    }"
        },
        {
          "type": "function",
          "name": "%AM6$%AM0",
          "label": "%AM6$%AM0",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should replace loop bindings in nested objects', %AM7$%AM6$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should handle null values in nested objects', %AM8$%AM6$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should handle empty objects and arrays', %AM9$%AM6$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    it(\"should replace loop bindings in nested objects\", () => {\n      const originalStepInput = {\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        },\n      }\n      const loopStepNumber = 3\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        },\n      })\n    })\n    it(\"should handle null values in nested objects\", () => {\n      const originalStepInput = {\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ loop.someValue }}\",\n      }\n      const loopStepNumber = 2\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ steps.2.someValue }}\",\n      })\n    })\n    it(\"should handle empty objects and arrays\", () => {\n      const originalStepInput = {\n        emptyObject: {},\n        emptyArray: [],\n        nestedEmpty: {\n          emptyObj: {},\n          emptyArr: [],\n        },\n      }\n      const loopStepNumber = 1\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual(originalStepInput)\n    })\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/204.ts: %dflt\nconfig = instanceinvoke setup.<@%unk/%unk: .getConfig()>()\ntable = undefined\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM1$%AM0)\n%0 = setup.<@%unk/%unk: .afterAll>\nstaticinvoke <@%unk/%unk: .afterAll()>(%0)\nstaticinvoke <@%unk/%unk: .it()>('attempt to run a basic loop', %AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('test a loop with a string', %AM4$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('test a loop with a binding that returns an integer', %AM5$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('replaceFakeBindings', %AM6$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 41,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  let config = setup.getConfig(),\n    table: Table\n  beforeEach(async () => {\n    await automation.init()\n    await config.init()\n    table = await config.createTable()\n    await config.createRow()\n  })\n  afterAll(setup.afterAll)\n  async function runLoop(loopOpts?: LoopInput) {\n    const appId = config.getAppId()\n    return await context.doInAppContext(appId, async () => {\n      const params = { fields: { appId } }\n      return await triggers.externalTrigger(\n        loopAutomation(table._id!, loopOpts),\n        params,\n        { getResponses: true }\n      )\n    })\n  }\n  it(\"attempt to run a basic loop\", async () => {\n    const resp = await runLoop()\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  })\n  it(\"test a loop with a string\", async () => {\n    const resp = await runLoop({\n      option: LoopStepType.STRING,\n      binding: \"a,b,c\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(3)\n  })\n  it(\"test a loop with a binding that returns an integer\", async () => {\n    const resp = await runLoop({\n      option: LoopStepType.ARRAY,\n      binding: \"{{ 1 }}\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  })\n  describe(\"replaceFakeBindings\", () => {\n    it(\"should replace loop bindings in nested objects\", () => {\n      const originalStepInput = {\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        },\n      }\n      const loopStepNumber = 3\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        },\n      })\n    })\n    it(\"should handle null values in nested objects\", () => {\n      const originalStepInput = {\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ loop.someValue }}\",\n      }\n      const loopStepNumber = 2\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ steps.2.someValue }}\",\n      })\n    })\n    it(\"should handle empty objects and arrays\", () => {\n      const originalStepInput = {\n        emptyObject: {},\n        emptyArray: [],\n        nestedEmpty: {\n          emptyObj: {},\n          emptyArr: [],\n        },\n      }\n      const loopStepNumber = 1\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual(originalStepInput)\n    })\n  })\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM2$%runLoop$%AM0$0$%instInit$1",
      "label": "%AC$%AC$%dflt$%AM2$%runLoop$%AM0$0$%instInit$1",
      "start_line": 22,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ appId }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%runLoop$%AM0$0",
      "label": "%AC$%dflt$%AM2$%runLoop$%AM0$0",
      "start_line": 22,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ fields: { appId } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%runLoop$%AM0$2",
      "label": "%AC$%dflt$%AM2$%runLoop$%AM0$2",
      "start_line": 26,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ getResponses: true }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM0$3",
      "label": "%AC$%dflt$%AM4$%AM0$3",
      "start_line": 35,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      option: LoopStepType.STRING,\n      binding: \"a,b,c\",\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM5$%AM0$4",
      "label": "%AC$%dflt$%AM5$%AM0$4",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      option: LoopStepType.ARRAY,\n      binding: \"{{ 1 }}\",\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$8$%instInit$9",
      "label": "%AC$%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$8$%instInit$9",
      "start_line": 56,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ maximum: null }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$8",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$8",
      "start_line": 54,
      "end_line": 54,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$10",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7$%instInit$10",
      "start_line": 60,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type: \"Text\" }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7",
      "label": "%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6$%instInit$7",
      "start_line": 52,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$6",
      "start_line": 51,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$11",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$5$%instInit$11",
      "start_line": 63,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM6$%AM0$5",
      "label": "%AC$%dflt$%AM7$%AM6$%AM0$5",
      "start_line": 50,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$15$%instInit$16",
      "label": "%AC$%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$15$%instInit$16",
      "start_line": 79,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ maximum: null }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$15",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$15",
      "start_line": 77,
      "end_line": 77,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$17",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14$%instInit$17",
      "start_line": 83,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type: \"Text\" }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14",
      "label": "%AC$%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13$%instInit$14",
      "start_line": 75,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$13",
      "start_line": 74,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$18",
      "label": "%AC$%AC$%dflt$%AM7$%AM6$%AM0$12$%instInit$18",
      "start_line": 86,
      "end_line": 86,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM6$%AM0$12",
      "label": "%AC$%dflt$%AM7$%AM6$%AM0$12",
      "start_line": 73,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM8$%AM6$%AM0$19$%instInit$20",
      "label": "%AC$%AC$%dflt$%AM8$%AM6$%AM0$19$%instInit$20",
      "start_line": 95,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          someKey: null,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM6$%AM0$19",
      "label": "%AC$%dflt$%AM8$%AM6$%AM0$19",
      "start_line": 93,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ loop.someValue }}\",\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM8$%AM6$%AM0$21$%instInit$22",
      "label": "%AC$%AC$%dflt$%AM8$%AM6$%AM0$21$%instInit$22",
      "start_line": 107,
      "end_line": 107,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          someKey: null,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM6$%AM0$21",
      "label": "%AC$%dflt$%AM8$%AM6$%AM0$21",
      "start_line": 105,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ steps.2.someValue }}\",\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$24",
      "label": "%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$24",
      "start_line": 115,
      "end_line": 115,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$25$%instInit$26",
      "label": "%AC$%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$25$%instInit$26",
      "start_line": 118,
      "end_line": 118,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$25",
      "label": "%AC$%AC$%dflt$%AM9$%AM6$%AM0$23$%instInit$25",
      "start_line": 117,
      "end_line": 117,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          emptyObj: {},\n          emptyArr: [],\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM9$%AM6$%AM0$23",
      "label": "%AC$%dflt$%AM9$%AM6$%AM0$23",
      "start_line": 114,
      "end_line": 114,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        emptyObject: {},\n        emptyArray: [],\n        nestedEmpty: {\n          emptyObj: {},\n          emptyArr: [],\n        },\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import * as automation from \"../index\"\nimport * as triggers from \"../triggers\"\nimport { loopAutomation } from \"../../tests/utilities/structures\"\nimport { context } from \"@budibase/backend-core\"\nimport * as setup from \"./utilities\"\nimport { Table, LoopStepType } from \"@budibase/types\"\nimport * as loopUtils from \"../loopUtils\"\nimport { LoopInput } from \"../../definitions/automations\"\ndescribe(\"Attempt to run a basic loop automation\", () => {\n  let config = setup.getConfig(),\n    table: Table\n  beforeEach(async () => {\n    await automation.init()\n    await config.init()\n    table = await config.createTable()\n    await config.createRow()\n  })\n  afterAll(setup.afterAll)\n  async function runLoop(loopOpts?: LoopInput) {\n    const appId = config.getAppId()\n    return await context.doInAppContext(appId, async () => {\n      const params = { fields: { appId } }\n      return await triggers.externalTrigger(\n        loopAutomation(table._id!, loopOpts),\n        params,\n        { getResponses: true }\n      )\n    })\n  }\n  it(\"attempt to run a basic loop\", async () => {\n    const resp = await runLoop()\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  })\n  it(\"test a loop with a string\", async () => {\n    const resp = await runLoop({\n      option: LoopStepType.STRING,\n      binding: \"a,b,c\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(3)\n  })\n  it(\"test a loop with a binding that returns an integer\", async () => {\n    const resp = await runLoop({\n      option: LoopStepType.ARRAY,\n      binding: \"{{ 1 }}\",\n    })\n    expect(resp.steps[2].outputs.iterations).toBe(1)\n  })\n  describe(\"replaceFakeBindings\", () => {\n    it(\"should replace loop bindings in nested objects\", () => {\n      const originalStepInput = {\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ loop.currentItem.pokemon }}\",\n        },\n      }\n      const loopStepNumber = 3\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        schema: {\n          name: {\n            type: \"string\",\n            constraints: {\n              type: \"string\",\n              length: { maximum: null },\n              presence: false,\n            },\n            name: \"name\",\n            display: { type: \"Text\" },\n          },\n        },\n        row: {\n          tableId: \"ta_aaad4296e9f74b12b1b90ef7a84afcad\",\n          name: \"{{ steps.3.currentItem.pokemon }}\",\n        },\n      })\n    })\n    it(\"should handle null values in nested objects\", () => {\n      const originalStepInput = {\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ loop.someValue }}\",\n      }\n      const loopStepNumber = 2\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual({\n        nullValue: null,\n        nestedNull: {\n          someKey: null,\n        },\n        validValue: \"{{ steps.2.someValue }}\",\n      })\n    })\n    it(\"should handle empty objects and arrays\", () => {\n      const originalStepInput = {\n        emptyObject: {},\n        emptyArray: [],\n        nestedEmpty: {\n          emptyObj: {},\n          emptyArr: [],\n        },\n      }\n      const loopStepNumber = 1\n      const result = loopUtils.replaceFakeBindings(\n        originalStepInput,\n        loopStepNumber\n      )\n      expect(result).toEqual(originalStepInput)\n    })\n  })\n})"
}