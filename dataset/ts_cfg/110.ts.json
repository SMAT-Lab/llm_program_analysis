{
  "type": "file",
  "name": "110.ts",
  "label": "110.ts",
  "start_line": -1,
  "end_line": 62,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 56,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/110.ts: %dflt\nERR_OK = 0\nTAG = '[IdlServiceExtImpl]'\nDOMAIN_NUMBER = 65280\nERR_DENY = -1\nreturn",
              "start_line": 1,
              "end_line": 56,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ServiceExtImpl",
      "label": "ServiceExtImpl",
      "start_line": 1,
      "end_line": 62,
      "functions": [
        {
          "type": "function",
          "name": "processData",
          "label": "processData",
          "start_line": 1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: number\ncallback = parameter1: ProcessDataCallback\nthis = this: @ts_files/110.ts: ServiceExtImpl\n%0 = 'processData: ' + data\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %0)\n%1 = rpc.<@%unk/%unk: .IPCSkeleton>\ncallerUid = instanceinvoke %1.<@%unk/%unk: .getCallingUid()>()\n%2 = instanceinvoke bundleManager.<@%unk/%unk: .getBundleNameByUid()>(callerUid)\n%3 = instanceinvoke %2.<@%unk/%unk: .then()>(%AM1$processData)\ninstanceinvoke %3.<@%unk/%unk: .catch()>(%AM0$processData)\n%4 = rpc.<@%unk/%unk: .IPCSkeleton>\ncallerTokenId = instanceinvoke %4.<@%unk/%unk: .getCallingTokenId()>()\naccessManger = instanceinvoke abilityAccessCtrl.<@%unk/%unk: .createAtManager()>()\ngrantStatus = instanceinvoke accessManger.<@%unk/%unk: .verifyAccessTokenSync()>(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED')\n%5 = abilityAccessCtrl.<@%unk/%unk: .GrantStatus>\n%6 = %5.<@%unk/%unk: .PERMISSION_DENIED>\nif grantStatus === %6",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED')\nstaticinvoke <@%unk/%unk: .callback()>(ERR_DENY, data)\nreturn",
                  "start_line": 1,
                  "end_line": 56,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'verify access token success.')\n%7 = data + 1\nstaticinvoke <@%unk/%unk: .callback()>(ERR_OK, %7)\nreturn",
                  "start_line": 1,
                  "end_line": 56,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "processData(data: number, callback: ProcessDataCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);\n\n    let callerUid = rpc.IPCSkeleton.getCallingUid();\n    bundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    });\n\n    let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\n    let accessManger = abilityAccessCtrl.createAtManager();\n    // 所校验的具体权限由开发者自行选择，此处ohos.permission.GET_BUNDLE_INFO_PRIVILEGED只作为示例\n    let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\n      hilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');\n      callback(ERR_DENY, data); // 鉴权失败，返回错误\n      return;\n    }\n    hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\n    callback(ERR_OK, data + 1); // 鉴权通过，执行正常业务逻辑\n  }"
        },
        {
          "type": "function",
          "name": "insertDataToMap",
          "label": "insertDataToMap",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\nval = parameter1: number\ncallback = parameter2: InsertDataToMapCallback\nthis = this: @ts_files/110.ts: ServiceExtImpl\n%0 = 'insertDataToMap, key: ' + key\n%1 = %0 + '  val: '\n%2 = %1 + val\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %2)\nstaticinvoke <@%unk/%unk: .callback()>(ERR_OK)\nreturn",
              "start_line": 1,
              "end_line": 56,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);\n    callback(ERR_OK);\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$processData",
          "label": "%AM0$processData",
          "start_line": 1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: BusinessError\nthis = this: @ts_files/110.ts: ServiceExtImpl\n%0 = err.<@%unk/%unk: .message>\n%1 = 'getBundleNameByUid failed: ' + %0\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 56,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$processData",
          "label": "%AM1$processData",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "callerBundleName = parameter0: unknown\nthis = this: @ts_files/110.ts: ServiceExtImpl\n%0 = 'getBundleNameByUid: ' + callerBundleName\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %0)\nif callerBundleName !== 'com.samples.stagemodelabilitydevelop'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject')\nreturn",
                  "start_line": 1,
                  "end_line": 56,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 42,
                  "end_line": 56,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class ServiceExtImpl extends IdlServiceExtStub {\n  processData(data: number, callback: ProcessDataCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);\n\n    let callerUid = rpc.IPCSkeleton.getCallingUid();\n    bundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    });\n\n    let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\n    let accessManger = abilityAccessCtrl.createAtManager();\n    // 所校验的具体权限由开发者自行选择，此处ohos.permission.GET_BUNDLE_INFO_PRIVILEGED只作为示例\n    let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\n      hilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');\n      callback(ERR_DENY, data); // 鉴权失败，返回错误\n      return;\n    }\n    hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\n    callback(ERR_OK, data + 1); // 鉴权通过，执行正常业务逻辑\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);\n    callback(ERR_OK);\n  };\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';\nimport IdlServiceExtStub from './idl_service_ext_stub';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\nimport type { BusinessError } from '@ohos.base';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type { ProcessDataCallback } from './i_idl_service_ext';\n\nconst ERR_OK = 0;\nconst TAG: string = '[IdlServiceExtImpl]';\nconst DOMAIN_NUMBER: number = 0xFF00;\nconst ERR_DENY = -1;\n\n// 开发者需要在这个类型里对接口进行实现\nexport default class ServiceExtImpl extends IdlServiceExtStub {\n  processData(data: number, callback: ProcessDataCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);\n\n    let callerUid = rpc.IPCSkeleton.getCallingUid();\n    bundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    });\n\n    let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\n    let accessManger = abilityAccessCtrl.createAtManager();\n    // 所校验的具体权限由开发者自行选择，此处ohos.permission.GET_BUNDLE_INFO_PRIVILEGED只作为示例\n    let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\n      hilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');\n      callback(ERR_DENY, data); // 鉴权失败，返回错误\n      return;\n    }\n    hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\n    callback(ERR_OK, data + 1); // 鉴权通过，执行正常业务逻辑\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);\n    callback(ERR_OK);\n  };\n};"
}