{
  "type": "file",
  "name": "31.ts",
  "label": "31.ts",
  "start_line": -1,
  "end_line": 291,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 271,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/31.ts: %dflt\nTAG = 'AlbumDataImpl'\nreturn",
              "start_line": 1,
              "end_line": 271,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumDataImpl",
      "label": "AlbumDataImpl",
      "start_line": 1,
      "end_line": 285,
      "functions": [
        {
          "type": "function",
          "name": "setBlackList",
          "label": "setBlackList",
          "start_line": 1,
          "end_line": 271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "blackList = parameter0: string[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\nthis.<@ts_files/31.ts: AlbumDataImpl.blackList> = blackList\nreturn",
              "start_line": 1,
              "end_line": 271,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }"
        },
        {
          "type": "function",
          "name": "setSelectType",
          "label": "setSelectType",
          "start_line": 1,
          "end_line": 271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "selectType = parameter0: number\nthis = this: @ts_files/31.ts: AlbumDataImpl\nthis.<@ts_files/31.ts: AlbumDataImpl.selectType> = selectType\nreturn",
              "start_line": 1,
              "end_line": 271,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }"
        },
        {
          "type": "function",
          "name": "setDeviceId",
          "label": "setDeviceId",
          "start_line": 1,
          "end_line": 271,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "deviceId = parameter0: string\nthis = this: @ts_files/31.ts: AlbumDataImpl\nthis.<@ts_files/31.ts: AlbumDataImpl.deviceId> = deviceId\nreturn",
              "start_line": 1,
              "end_line": 271,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setDeviceId(deviceId: string): void {\n    this.deviceId = deviceId;\n  }"
        },
        {
          "type": "function",
          "name": "reloadAlbumItemData",
          "label": "reloadAlbumItemData",
          "start_line": 1,
          "end_line": 285,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/31.ts: AlbumDataImpl\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reloadAlbumItemData')\n%0 = newarray (any)[0]\nalbumDataItems = %0\ni = 0",
              "start_line": 1,
              "end_line": 285,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = MediaConstants.<@%unk/%unk: .ALBUM_DEFAULT_SORT_LIST>\n%2 = %1.<@%unk/%unk: .length>\nif i < %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = MediaConstants.<@%unk/%unk: .ALBUM_DEFAULT_SORT_LIST>\n%4 = %3.<@%unk/%unk: .i>\n%5 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])>(%4, albumDataItems)\n%6 = await %5\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\n%8 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])>(%7, albumDataItems)\n%9 = await %8\n%10 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\n%11 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])>(%10, albumDataItems)\n%12 = await %11\nreturn albumDataItems",
                      "start_line": 1,
                      "end_line": 271,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadAlbumItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumItemData');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);\n    return albumDataItems;\n  }"
        },
        {
          "type": "function",
          "name": "getAlbumItem",
          "label": "getAlbumItem",
          "start_line": 1,
          "end_line": 54,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nalbumDataItems = parameter1: AlbumDataItem[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\n%0 = 'getAlbumItem: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/31.ts: AlbumDataImpl.blackList>\n%2 = instanceinvoke %1.<@%unk/%unk: .indexOf()>(id)\nif %2 >= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'no need as in black list')\nreturn",
                  "start_line": 1,
                  "end_line": 271,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = this.<@ts_files/31.ts: AlbumDataImpl.deviceId>\n%4 = %3.<@%unk/%unk: .length>\n%5 = %4 > 0\n%6 = MediaConstants.<@%unk/%unk: .ALBUM_ID_SNAPSHOT>\n%7 = id !== %6\n%8 = MediaConstants.<@%unk/%unk: .ALBUM_ID_CAMERA>\n%9 = id !== %8\n%10 = %7 && %9\n%11 = %5 && %10\nif %11 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'no need')\nreturn",
                      "start_line": 1,
                      "end_line": 271,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "albumType = MediaConstants.<@%unk/%unk: .ALBUM_TYPE_SYSTEM>\nalbumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_USER_GENERIC>\n%12 = MediaConstants.<@%unk/%unk: .ALBUM_ID_FAVOR>\nif id == %12",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "albumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_FAVOR>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%22 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumItemByUserFileMgr(string, photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype, AlbumDataItem[])>(id, albumType, albumSubType, albumDataItems)\n%23 = await %22\nreturn",
                              "start_line": 1,
                              "end_line": 271,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = MediaConstants.<@%unk/%unk: .ALBUM_ID_CAMERA>\nif id == %13",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "albumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_CAMERA>",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%14 = MediaConstants.<@%unk/%unk: .ALBUM_ID_RECYCLE>\nif id == %14",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "albumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_RECYCLE>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%15 = MediaConstants.<@%unk/%unk: .ALBUM_ID_SNAPSHOT>\nif id == %15",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "albumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_SNAPSHOT>",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%16 = MediaConstants.<@%unk/%unk: .ALBUM_ID_VIDEO>\nif id == %16",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "albumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_VIDEO>",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%17 = MediaConstants.<@%unk/%unk: .ALBUM_ID_ALL>\nif id == %17",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%20 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAllPhotoAlbum(AlbumDataItem[])>(albumDataItems)\n%21 = await %20\nreturn",
                                              "start_line": 1,
                                              "end_line": 271,
                                              "successors": []
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%18 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\nif id == %18",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "albumType = MediaConstants.<@%unk/%unk: .ALBUM_TYPE_USER>\nalbumSubType = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_USER_GENERIC>",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%19 = MediaConstants.<@%unk/%unk: .ALBUM_ID_MOVING_PHOTO>\nif id == %19",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%24 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getMovingPhotoAbstractAlbum(AlbumDataItem[])>(albumDataItems)\n%25 = await %24\nreturn",
                                                      "start_line": 1,
                                                      "end_line": 271,
                                                      "successors": []
                                                    },
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async getAlbumItem(id: string, albumDataItems: AlbumDataItem[]): Promise<void> {\n    Log.info(TAG, 'getAlbumItem: ' + id);\n    if (this.blackList.indexOf(id) >= 0) {\n      Log.debug(TAG, 'no need as in black list');\n      return;\n    }\n    if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {\n      Log.info(TAG, 'no need');\n      return;\n    }\n    let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;\n    let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n    switch (id) {\n      case MediaConstants.ALBUM_ID_FAVOR:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;\n        break;\n      case MediaConstants.ALBUM_ID_CAMERA:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;\n        break;\n      case MediaConstants.ALBUM_ID_RECYCLE:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;\n        break;\n      case MediaConstants.ALBUM_ID_SNAPSHOT:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;\n        break;\n      case MediaConstants.ALBUM_ID_VIDEO:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;\n        break;\n      case MediaConstants.ALBUM_ID_ALL:\n        await this.getAllPhotoAlbum(albumDataItems);\n        return;\n      case MediaConstants.ALBUM_ID_USER:\n        albumType = MediaConstants.ALBUM_TYPE_USER;\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n        break;\n      case MediaConstants.ALBUM_ID_MOVING_PHOTO:\n        await this.getMovingPhotoAbstractAlbum(albumDataItems);\n        return;\n      default:\n        break;\n    }\n    await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);\n  }"
        },
        {
          "type": "function",
          "name": "getAlbumItemByUserFileMgr",
          "label": "getAlbumItemByUserFileMgr",
          "start_line": 1,
          "end_line": 98,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\ntype = parameter1: photoAccessHelper.AlbumType\nsubType = parameter2: photoAccessHelper.AlbumSubtype\nalbumDataItems = parameter3: AlbumDataItem[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\nfetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getAlbumItemByUserFileMgr')\n%0 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getAlbums()>(type, subType)\nfetchResult = await %1\n%2 = 'type:' + type\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = 'subType:' + subType\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %3)\n%4 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%5 = 'get Album fetchResult, count: ' + %4\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %5)\ni = 0",
                  "start_line": 1,
                  "end_line": 285,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif i < %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = instanceinvoke fetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\nalbumAsset = await %7\n%8 = 'albumAsset albumType: ' + i\n%9 = %8 + '---'\n%10 = albumAsset.<@%unk/%unk: .albumType>\n%11 = %9 + %10\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %11)\n%12 = 'albumAsset albumSubType: ' + i\n%13 = %12 + '---'\n%14 = albumAsset.<@%unk/%unk: .albumSubtype>\n%15 = %13 + %14\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %15)\n%16 = 'albumAsset albumName: ' + i\n%17 = %16 + '---'\n%18 = albumAsset.<@%unk/%unk: .albumName>\n%19 = %17 + %18\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %19)\n%20 = 'albumAsset albumUri: ' + i\n%21 = %20 + '---'\n%22 = albumAsset.<@%unk/%unk: .albumUri>\n%23 = %21 + %22\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %23)\n%24 = albumAsset.<@%unk/%unk: .albumUri>\n%25 = this.<@ts_files/31.ts: AlbumDataImpl.blackList>\n%26 = instanceinvoke %25.<@%unk/%unk: .indexOf()>(%24)\nif %26 >= 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%27 = albumAsset.<@%unk/%unk: .albumUri>\n%28 = 'no need as in black list:' + %27\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %28)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "i = i + 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%29 = 'albumAsset count: ' + i\n%30 = %29 + '---'\n%31 = albumAsset.<@%unk/%unk: .count>\n%32 = %30 + %31\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %32)\n%33 = 'albumAsset coverUri: ' + i\n%34 = %33 + '---'\n%35 = albumAsset.<@%unk/%unk: .coverUri>\n%36 = %34 + %35\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %36)\nphotoFetchResult = null\nfileAsset = null\ncount = 0",
                              "start_line": 1,
                              "end_line": 120,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%37 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %37.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %37\n%38 = new @ts_files/31.ts: %AC$AlbumDataImpl$getAlbumItemByUserFileMgr$0\ninstanceinvoke %38.<@ts_files/31.ts: %AC$AlbumDataImpl$getAlbumItemByUserFileMgr$0.constructor()>()\nfetchOptions = %38\n%39 = instanceinvoke albumAsset.<@%unk/%unk: .getAssets()>(fetchOptions)\nphotoFetchResult = await %39\ncount = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\n%40 = 'photoFetchResult count: ' + count\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %40)\ndisplayName = 'unknown'\n%41 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\nif id === %41",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "displayName = albumAsset.<@%unk/%unk: .albumName>",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "albumType = albumAsset.<@%unk/%unk: .albumType>\nalbumSubType = albumAsset.<@%unk/%unk: .albumSubtype>\n%43 = new @%unk/%unk: AlbumDataItem\n%44 = this.<@ts_files/31.ts: AlbumDataImpl.selectType>\n%45 = this.<@ts_files/31.ts: AlbumDataImpl.deviceId>\ninstanceinvoke %43.<@%unk/%unk: AlbumDataItem.constructor()>(id, count, displayName, %44, %45, albumType, albumSubType)\nalbumItem = %43\n%46 = albumAsset.<@%unk/%unk: .albumUri>\nalbumItem.<@%unk/%unk: .uri> = %46\nif count > 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%47 = instanceinvoke photoFetchResult.<@%unk/%unk: .getFirstObject()>()\nfileAsset = await %47\n%48 = fileAsset.<@%unk/%unk: .displayName>\n%49 = 'getFirstObject file displayName: ' + %48\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %49)\n%50 = instanceinvoke albumItem.<@%unk/%unk: .update()>(fileAsset)\n%51 = await %50",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "instanceinvoke albumDataItems.<@%unk/%unk: .push()>(albumItem)",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "if photoFetchResult != null",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%42 = staticinvoke <@%unk/%unk: .getAlbumDisplayName()>(id)\ndisplayName = await %42",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return",
                                  "start_line": 51,
                                  "end_line": 271,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%52 = 'get Album getPhotoAssets failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %52)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%53 = 'get Album fetchResult failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %53)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%54 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %54",
                      "start_line": 51,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%55 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "i = i + 1\nthrow %55",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAlbumItemByUserFileMgr');\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);\n        Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);\n        Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);\n        Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);\n        if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {\n          Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);\n          continue;\n        }\n        Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);\n        Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);\n        let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        let fileAsset:photoAccessHelper.PhotoAsset = null;\n        let count = 0;\n        try {\n          let predicates = new dataSharePredicates.DataSharePredicates();\n          let fetchOptions = {\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          };\n          photoFetchResult = await albumAsset.getAssets(fetchOptions);\n          count = photoFetchResult.getCount();\n          Log.info(TAG, 'photoFetchResult count: ' + count);\n          let displayName = 'unknown';\n          if (id === MediaConstants.ALBUM_ID_USER) {\n            displayName = albumAsset.albumName;\n          } else {\n            displayName = await getAlbumDisplayName(id);\n          }\n          let albumType = albumAsset.albumType;\n          let albumSubType = albumAsset.albumSubtype;\n          let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);\n          albumItem.uri = albumAsset.albumUri;\n          if (count > 0) {\n            fileAsset = await photoFetchResult.getFirstObject();\n            Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n            await albumItem.update(fileAsset);\n          }\n          albumDataItems.push(albumItem);\n        } catch (err) {\n          Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getUserAlbumItemByUri",
          "label": "getUserAlbumItemByUri",
          "start_line": 1,
          "end_line": 163,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/31.ts: AlbumDataImpl\nfetchResult = null\nalbum = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getUserAlbumItemByUri')\n%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%2 = %1.<@%unk/%unk: .URI>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, uri)\n%3 = new @ts_files/31.ts: %AC$AlbumDataImpl$getUserAlbumItemByUri$1\ninstanceinvoke %3.<@ts_files/31.ts: %AC$AlbumDataImpl$getUserAlbumItemByUri$1.constructor()>()\nfetchOptions = %3\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%5 = %4.<@%unk/%unk: .USER>\n%6 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%7 = %6.<@%unk/%unk: .USER_GENERIC>\n%8 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\n%9 = instanceinvoke %8.<@%unk/%unk: .getAlbums()>(%5, %7, fetchOptions)\nfetchResult = await %9\n%10 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%11 = 'get Album fetchResult, count: ' + %10\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %11)\n%12 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif %12 > 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = instanceinvoke fetchResult.<@%unk/%unk: .getFirstObject()>()\nalbum = await %13",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return album",
                                  "start_line": 51,
                                  "end_line": 271,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%14 = 'get Album fetchResult failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %14)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%15 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return album\nthrow %15",
                      "start_line": 51,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = await fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }"
        },
        {
          "type": "function",
          "name": "removeFileFromAlbum",
          "label": "removeFileFromAlbum",
          "start_line": 1,
          "end_line": 189,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumUri = parameter0: string\nuri = parameter1: string\nthis = this: @ts_files/31.ts: AlbumDataImpl\n%0 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getUserAlbumItemByUri(string)>(albumUri)\nalbum = await %0\n%1 = instanceinvoke userFileModel.<@%unk/%unk: .getMediaItemByUri()>(uri)\nfileAsset = await %1\n%2 = album != null\n%3 = fileAsset != null\n%4 = %2 && %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = newarray (unknown)[1]\n%5[0] = fileAsset\n%6 = instanceinvoke album.<@%unk/%unk: .removeAssets()>(%5)\n%7 = await %6\nreturn true",
                      "start_line": 1,
                      "end_line": 195,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 200,
                  "end_line": 200,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%8 = 'album removePhotoAssets failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %8)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    let fileAsset = await userFileModel.getMediaItemByUri(uri);\n    if (album != null && fileAsset != null) {\n      try {\n        await album.removeAssets([fileAsset]);\n        return true;\n      } catch (err) {\n        Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);\n      }\n    }\n    return false;\n  }"
        },
        {
          "type": "function",
          "name": "getAllPhotoAlbum",
          "label": "getAllPhotoAlbum",
          "start_line": 1,
          "end_line": 204,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumDataItems = parameter0: AlbumDataItem[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\nphotoFetchResult = null",
              "start_line": 1,
              "end_line": 204,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = new @ts_files/31.ts: %AC$AlbumDataImpl$getAllPhotoAlbum$2\ninstanceinvoke %1.<@ts_files/31.ts: %AC$AlbumDataImpl$getAllPhotoAlbum$2.constructor()>()\nfetchOptions = %1\n%2 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\n%3 = instanceinvoke %2.<@%unk/%unk: .getAssets()>(fetchOptions)\nphotoFetchResult = await %3\ncount = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\n%4 = 'getAllPhotoAlbum count: ' + count\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\ndisplayName = ''\nid = MediaConstants.<@%unk/%unk: .ALBUM_ID_ALL>\n%5 = staticinvoke <@%unk/%unk: .getAlbumDisplayName()>(id)\ndisplayName = await %5\n%6 = new @%unk/%unk: AlbumDataItem\n%7 = this.<@ts_files/31.ts: AlbumDataImpl.selectType>\n%8 = this.<@ts_files/31.ts: AlbumDataImpl.deviceId>\n%9 = -1\n%10 = -1\ninstanceinvoke %6.<@%unk/%unk: AlbumDataItem.constructor()>(id, count, displayName, %7, %8, %9, %10)\nalbumItem = %6\nif count > 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = instanceinvoke photoFetchResult.<@%unk/%unk: .getFirstObject()>()\nfileAsset = await %11\n%12 = instanceinvoke albumItem.<@%unk/%unk: .update()>(fileAsset)\n%13 = await %12\n%14 = fileAsset.<@%unk/%unk: .displayName>\n%15 = 'getFirstObject file displayName: ' + %14\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %15)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke albumDataItems.<@%unk/%unk: .push()>(albumItem)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if photoFetchResult != null",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 51,
                                      "end_line": 271,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%16 = 'get Album getPhotoAssets failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %16)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%17 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %17",
                      "start_line": 51,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getAllPhotoAlbum count: ' + count);\n      let displayName = '';\n      let id = MediaConstants.ALBUM_ID_ALL;\n      displayName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getMovingPhotoAbstractAlbum",
          "label": "getMovingPhotoAbstractAlbum",
          "start_line": 1,
          "end_line": 233,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumDataItems = parameter0: AlbumDataItem[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\nphotoFetchResult = null",
              "start_line": 1,
              "end_line": 204,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = MediaConstants.<@%unk/%unk: .PHOTO_SUBTYPE>\n%2 = MediaConstants.<@%unk/%unk: .MOVING_PHOTO>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%1, %2)\n%3 = new @ts_files/31.ts: %AC$AlbumDataImpl$getMovingPhotoAbstractAlbum$3\ninstanceinvoke %3.<@ts_files/31.ts: %AC$AlbumDataImpl$getMovingPhotoAbstractAlbum$3.constructor()>()\nfetchOptions = %3\n%4 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\n%5 = instanceinvoke %4.<@%unk/%unk: .getAssets()>(fetchOptions)\nphotoFetchResult = await %5\ncount = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\n%6 = 'getMovingPhotoAbstractAlbum count: ' + count\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %6)\nid = MediaConstants.<@%unk/%unk: .ALBUM_ID_MOVING_PHOTO>\n%7 = staticinvoke <@%unk/%unk: .getAlbumDisplayName()>(id)\nalbumName = await %7\n%8 = new @%unk/%unk: AlbumDataItem\n%9 = this.<@ts_files/31.ts: AlbumDataImpl.selectType>\n%10 = this.<@ts_files/31.ts: AlbumDataImpl.deviceId>\n%11 = MediaConstants.<@%unk/%unk: .ABSTRACT_ALBUM_TYPE_MOVING_PHOTO>\n%12 = -1\ninstanceinvoke %8.<@%unk/%unk: AlbumDataItem.constructor()>(id, count, albumName, %9, %10, %11, %12)\nalbumItem = %8\nif count > 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = instanceinvoke photoFetchResult.<@%unk/%unk: .getFirstObject()>()\nfileAsset = await %13\n%14 = instanceinvoke albumItem.<@%unk/%unk: .update()>(fileAsset)\n%15 = await %14\n%16 = fileAsset.<@%unk/%unk: .displayName>\n%17 = 'first moving photo displayName: ' + %16\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %17)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke albumDataItems.<@%unk/%unk: .push()>(albumItem)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if photoFetchResult != null",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 51,
                                      "end_line": 271,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%18 = 'getMovingPhotoAbstractAlbum failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %18)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%19 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %19",
                      "start_line": 51,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);\n      let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;\n      let albumName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,\n        MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "reloadAlbumListItemData",
          "label": "reloadAlbumListItemData",
          "start_line": 1,
          "end_line": 285,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/31.ts: AlbumDataImpl\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reloadAlbumListItemData start')\n%0 = newarray (any)[0]\nalbumDataItems = %0\ni = 0",
              "start_line": 1,
              "end_line": 285,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = MediaConstants.<@%unk/%unk: .ALBUM_DEFAULT_SORT_LIST>\n%2 = %1.<@%unk/%unk: .length>\nif i < %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = MediaConstants.<@%unk/%unk: .ALBUM_DEFAULT_SORT_LIST>\n%4 = %3.<@%unk/%unk: .i>\n%5 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])>(%4, albumDataItems)\n%6 = await %5\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getCommonListAlbumItem(AlbumDataItem[])>(albumDataItems)\n%8 = await %7\nreturn albumDataItems",
                      "start_line": 1,
                      "end_line": 271,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumListItemData start');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getCommonListAlbumItem(albumDataItems);\n    return albumDataItems;\n  }"
        },
        {
          "type": "function",
          "name": "getCommonListAlbumItem",
          "label": "getCommonListAlbumItem",
          "start_line": 1,
          "end_line": 274,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumDataItems = parameter0: AlbumDataItem[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\n%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = new @ts_files/31.ts: %AC$AlbumDataImpl$getCommonListAlbumItem$4\ninstanceinvoke %1.<@ts_files/31.ts: %AC$AlbumDataImpl$getCommonListAlbumItem$4.constructor()>()\nfetchOptions = %1\n%2 = instanceinvoke userFileModel.<@%unk/%unk: .getAlbums()>(fetchOptions)\nalbums = await %2\n%3 = instanceinvoke this.<@ts_files/31.ts: AlbumDataImpl.getAlbumDataItem(AlbumDataItem[], photoAccessHelper.Album[])>(albumDataItems, albums)\n%4 = await %3\nreturn",
              "start_line": 1,
              "end_line": 271,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    let fetchOptions = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);\n    await this.getAlbumDataItem(albumDataItems, albums);\n  }"
        },
        {
          "type": "function",
          "name": "getAlbumDataItem",
          "label": "getAlbumDataItem",
          "start_line": 1,
          "end_line": 285,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumDataItems = parameter0: AlbumDataItem[]\nalbums = parameter1: photoAccessHelper.Album[]\nthis = this: @ts_files/31.ts: AlbumDataImpl\ni = 0",
              "start_line": 1,
              "end_line": 285,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = albums.<@%unk/%unk: .length>\nif i < %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "album = albums[i]\n%1 = album.<@%unk/%unk: .albumUri>\n%2 = instanceinvoke %1.<@%unk/%unk: .toString()>()\n%3 = this.<@ts_files/31.ts: AlbumDataImpl.blackList>\n%4 = instanceinvoke %3.<@%unk/%unk: .indexOf()>(%2)\nif %4 >= 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "i = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %5.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %5\n%6 = new @ts_files/31.ts: %AC$AlbumDataImpl$getAlbumDataItem$5\ninstanceinvoke %6.<@ts_files/31.ts: %AC$AlbumDataImpl$getAlbumDataItem$5.constructor()>()\nfetchOptions = %6\n%7 = instanceinvoke album.<@%unk/%unk: .getAssets()>(fetchOptions)\nfetchFileResult = await %7",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "count = instanceinvoke fetchFileResult.<@%unk/%unk: .getCount()>()\nif count === 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%8 = new @%unk/%unk: AlbumDataItem\n%9 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\n%10 = album.<@%unk/%unk: .albumName>\n%11 = this.<@ts_files/31.ts: AlbumDataImpl.selectType>\n%12 = this.<@ts_files/31.ts: AlbumDataImpl.deviceId>\ninstanceinvoke %8.<@%unk/%unk: AlbumDataItem.constructor()>(%9, count, %10, %11, %12, 0, 0)\nitem = %8\n%13 = album.<@%unk/%unk: .albumUri>\nitem.<@%unk/%unk: AlbumDataItem.uri> = %13\n%14 = instanceinvoke fetchFileResult.<@%unk/%unk: .getFirstObject()>()\n%15 = instanceinvoke item.<@%unk/%unk: .update()>(await %14)\n%16 = await %15\ninstanceinvoke albumDataItems.<@%unk/%unk: .push()>(item)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "instanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 51,
                      "end_line": 271,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%17 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%18 = 'on err: ' + %17\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %18)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%19 = caughtexception: unknown\ninstanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "i = i + 1\nthrow %19",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {\n    for (let i = 0;i < albums.length; i++) {\n      let album: photoAccessHelper.Album = albums[i];\n      if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {\n        continue;\n      }\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      let fetchFileResult = await album.getAssets(fetchOptions);\n      try {\n        let count = fetchFileResult.getCount();\n        if (count === 0) {\n          continue;\n        }\n        let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\n        item.uri = album.albumUri;\n        await item.update(await fetchFileResult.getFirstObject());\n        albumDataItems.push(item);\n      } catch (err) {\n        Log.error(TAG, 'on err: ' + JSON.stringify(err));\n      } finally {\n        fetchFileResult.close();\n      }\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumDataImpl {\n  private blackList: string[] = [];\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private deviceId: string = '';\n\n  setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.deviceId = deviceId;\n  }\n\n  async reloadAlbumItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumItemData');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getAlbumItem(id: string, albumDataItems: AlbumDataItem[]): Promise<void> {\n    Log.info(TAG, 'getAlbumItem: ' + id);\n    if (this.blackList.indexOf(id) >= 0) {\n      Log.debug(TAG, 'no need as in black list');\n      return;\n    }\n    if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {\n      Log.info(TAG, 'no need');\n      return;\n    }\n    let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;\n    let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n    switch (id) {\n      case MediaConstants.ALBUM_ID_FAVOR:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;\n        break;\n      case MediaConstants.ALBUM_ID_CAMERA:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;\n        break;\n      case MediaConstants.ALBUM_ID_RECYCLE:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;\n        break;\n      case MediaConstants.ALBUM_ID_SNAPSHOT:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;\n        break;\n      case MediaConstants.ALBUM_ID_VIDEO:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;\n        break;\n      case MediaConstants.ALBUM_ID_ALL:\n        await this.getAllPhotoAlbum(albumDataItems);\n        return;\n      case MediaConstants.ALBUM_ID_USER:\n        albumType = MediaConstants.ALBUM_TYPE_USER;\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n        break;\n      case MediaConstants.ALBUM_ID_MOVING_PHOTO:\n        await this.getMovingPhotoAbstractAlbum(albumDataItems);\n        return;\n      default:\n        break;\n    }\n    await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);\n  }\n\n  private async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAlbumItemByUserFileMgr');\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);\n        Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);\n        Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);\n        Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);\n        if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {\n          Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);\n          continue;\n        }\n        Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);\n        Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);\n        let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        let fileAsset:photoAccessHelper.PhotoAsset = null;\n        let count = 0;\n        try {\n          let predicates = new dataSharePredicates.DataSharePredicates();\n          let fetchOptions = {\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          };\n          photoFetchResult = await albumAsset.getAssets(fetchOptions);\n          count = photoFetchResult.getCount();\n          Log.info(TAG, 'photoFetchResult count: ' + count);\n          let displayName = 'unknown';\n          if (id === MediaConstants.ALBUM_ID_USER) {\n            displayName = albumAsset.albumName;\n          } else {\n            displayName = await getAlbumDisplayName(id);\n          }\n          let albumType = albumAsset.albumType;\n          let albumSubType = albumAsset.albumSubtype;\n          let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);\n          albumItem.uri = albumAsset.albumUri;\n          if (count > 0) {\n            fileAsset = await photoFetchResult.getFirstObject();\n            Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n            await albumItem.update(fileAsset);\n          }\n          albumDataItems.push(albumItem);\n        } catch (err) {\n          Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = await fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    let fileAsset = await userFileModel.getMediaItemByUri(uri);\n    if (album != null && fileAsset != null) {\n      try {\n        await album.removeAssets([fileAsset]);\n        return true;\n      } catch (err) {\n        Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);\n      }\n    }\n    return false;\n  }\n\n  async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getAllPhotoAlbum count: ' + count);\n      let displayName = '';\n      let id = MediaConstants.ALBUM_ID_ALL;\n      displayName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);\n      let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;\n      let albumName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,\n        MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumListItemData start');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getCommonListAlbumItem(albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    let fetchOptions = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);\n    await this.getAlbumDataItem(albumDataItems, albums);\n  }\n\n  private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {\n    for (let i = 0;i < albums.length; i++) {\n      let album: photoAccessHelper.Album = albums[i];\n      if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {\n        continue;\n      }\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      let fetchFileResult = await album.getAssets(fetchOptions);\n      try {\n        let count = fetchFileResult.getCount();\n        if (count === 0) {\n          continue;\n        }\n        let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\n        item.uri = album.albumUri;\n        await item.update(await fetchFileResult.getFirstObject());\n        albumDataItems.push(item);\n      } catch (err) {\n        Log.error(TAG, 'on err: ' + JSON.stringify(err));\n      } finally {\n        fetchFileResult.close();\n      }\n    }\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getAlbumItemByUserFileMgr$0",
      "label": "%AC$AlbumDataImpl$getAlbumItemByUserFileMgr$0",
      "start_line": 123,
      "end_line": 123,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getUserAlbumItemByUri$1",
      "label": "%AC$AlbumDataImpl$getUserAlbumItemByUri$1",
      "start_line": 170,
      "end_line": 170,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getAllPhotoAlbum$2",
      "label": "%AC$AlbumDataImpl$getAllPhotoAlbum$2",
      "start_line": 207,
      "end_line": 207,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getMovingPhotoAbstractAlbum$3",
      "label": "%AC$AlbumDataImpl$getMovingPhotoAbstractAlbum$3",
      "start_line": 238,
      "end_line": 238,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getCommonListAlbumItem$4",
      "label": "%AC$AlbumDataImpl$getCommonListAlbumItem$4",
      "start_line": 276,
      "end_line": 276,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataImpl$getAlbumDataItem$5",
      "label": "%AC$AlbumDataImpl$getAlbumDataItem$5",
      "start_line": 291,
      "end_line": 291,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { getAlbumDisplayName } from '../base/UserFileDataHelper';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataImpl';\n\nexport class AlbumDataImpl {\n  private blackList: string[] = [];\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private deviceId: string = '';\n\n  setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.deviceId = deviceId;\n  }\n\n  async reloadAlbumItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumItemData');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getAlbumItem(id: string, albumDataItems: AlbumDataItem[]): Promise<void> {\n    Log.info(TAG, 'getAlbumItem: ' + id);\n    if (this.blackList.indexOf(id) >= 0) {\n      Log.debug(TAG, 'no need as in black list');\n      return;\n    }\n    if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {\n      Log.info(TAG, 'no need');\n      return;\n    }\n    let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;\n    let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n    switch (id) {\n      case MediaConstants.ALBUM_ID_FAVOR:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;\n        break;\n      case MediaConstants.ALBUM_ID_CAMERA:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;\n        break;\n      case MediaConstants.ALBUM_ID_RECYCLE:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;\n        break;\n      case MediaConstants.ALBUM_ID_SNAPSHOT:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;\n        break;\n      case MediaConstants.ALBUM_ID_VIDEO:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;\n        break;\n      case MediaConstants.ALBUM_ID_ALL:\n        await this.getAllPhotoAlbum(albumDataItems);\n        return;\n      case MediaConstants.ALBUM_ID_USER:\n        albumType = MediaConstants.ALBUM_TYPE_USER;\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n        break;\n      case MediaConstants.ALBUM_ID_MOVING_PHOTO:\n        await this.getMovingPhotoAbstractAlbum(albumDataItems);\n        return;\n      default:\n        break;\n    }\n    await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);\n  }\n\n  private async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAlbumItemByUserFileMgr');\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);\n        Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);\n        Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);\n        Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);\n        if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {\n          Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);\n          continue;\n        }\n        Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);\n        Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);\n        let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        let fileAsset:photoAccessHelper.PhotoAsset = null;\n        let count = 0;\n        try {\n          let predicates = new dataSharePredicates.DataSharePredicates();\n          let fetchOptions = {\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          };\n          photoFetchResult = await albumAsset.getAssets(fetchOptions);\n          count = photoFetchResult.getCount();\n          Log.info(TAG, 'photoFetchResult count: ' + count);\n          let displayName = 'unknown';\n          if (id === MediaConstants.ALBUM_ID_USER) {\n            displayName = albumAsset.albumName;\n          } else {\n            displayName = await getAlbumDisplayName(id);\n          }\n          let albumType = albumAsset.albumType;\n          let albumSubType = albumAsset.albumSubtype;\n          let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);\n          albumItem.uri = albumAsset.albumUri;\n          if (count > 0) {\n            fileAsset = await photoFetchResult.getFirstObject();\n            Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n            await albumItem.update(fileAsset);\n          }\n          albumDataItems.push(albumItem);\n        } catch (err) {\n          Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = await fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    let fileAsset = await userFileModel.getMediaItemByUri(uri);\n    if (album != null && fileAsset != null) {\n      try {\n        await album.removeAssets([fileAsset]);\n        return true;\n      } catch (err) {\n        Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);\n      }\n    }\n    return false;\n  }\n\n  async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getAllPhotoAlbum count: ' + count);\n      let displayName = '';\n      let id = MediaConstants.ALBUM_ID_ALL;\n      displayName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);\n      let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;\n      let albumName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,\n        MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumListItemData start');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getCommonListAlbumItem(albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    let fetchOptions = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);\n    await this.getAlbumDataItem(albumDataItems, albums);\n  }\n\n  private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {\n    for (let i = 0;i < albums.length; i++) {\n      let album: photoAccessHelper.Album = albums[i];\n      if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {\n        continue;\n      }\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      let fetchFileResult = await album.getAssets(fetchOptions);\n      try {\n        let count = fetchFileResult.getCount();\n        if (count === 0) {\n          continue;\n        }\n        let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\n        item.uri = album.albumUri;\n        await item.update(await fetchFileResult.getFirstObject());\n        albumDataItems.push(item);\n      } catch (err) {\n        Log.error(TAG, 'on err: ' + JSON.stringify(err));\n      } finally {\n        fetchFileResult.close();\n      }\n    }\n  }\n}\n"
}