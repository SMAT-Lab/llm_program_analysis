{
  "type": "file",
  "name": "179.ts",
  "label": "179.ts",
  "start_line": -1,
  "end_line": 44,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 44,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/179.ts: %dflt\n%0 = new @%unk/%unk: DebugLogger\ninstanceinvoke %0.<@%unk/%unk: DebugLogger.constructor()>('createFirstAppData')\nlogger = %0\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "buildShowcaseWorkspace",
          "label": "buildShowcaseWorkspace",
          "start_line": 1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "workspacesService = parameter0: WorkspacesService\nflavour = parameter1: WorkspaceFlavour\nworkspaceName = parameter2: string\nthis = this: @ts_files/179.ts: %dflt\n%0 = instanceinvoke workspacesService.<@%unk/%unk: .create()>(flavour, %AM0$buildShowcaseWorkspace)\nmeta = await %0\n%2 = new @ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$0\ninstanceinvoke %2.<@ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$0.constructor()>()\n%1 = instanceinvoke workspacesService.<@%unk/%unk: .open()>(%2)\nworkspace = %1.<@%unk/%unk: .workspace>\ndispose = %1.<@%unk/%unk: .dispose>\n%3 = workspace.<@%unk/%unk: .engine>\n%4 = instanceinvoke %3.<@%unk/%unk: .waitForRootDocReady()>()\n%5 = await %4\n%6 = workspace.<@%unk/%unk: .scope>\ndocsService = instanceinvoke %6.<@%unk/%unk: .get()>(DocsService)\n%7 = docsService.<@%unk/%unk: .list>\n%8 = %7.<@%unk/%unk: .docs$>\n%9 = %8.<@%unk/%unk: .value>\ndefaultDoc = instanceinvoke %9.<@%unk/%unk: .find()>(%AM1$buildShowcaseWorkspace)\nif defaultDoc != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke defaultDoc.<@%unk/%unk: .setPrimaryMode()>('edgeless')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "staticinvoke <@%unk/%unk: .dispose()>()\n%10 = new @ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$1\ninstanceinvoke %10.<@ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$1.constructor()>()\nreturn %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function buildShowcaseWorkspace(\n  workspacesService: WorkspacesService,\n  flavour: WorkspaceFlavour,\n  workspaceName: string\n) {\n  const meta = await workspacesService.create(flavour, async docCollection => {\n    docCollection.meta.initialize();\n    docCollection.meta.setName(workspaceName);\n    const blob = await (await fetch(onboardingUrl)).blob();\n    await ZipTransformer.importDocs(docCollection, blob);\n  });\n  const { workspace, dispose } = workspacesService.open({ metadata: meta });\n  await workspace.engine.waitForRootDocReady();\n  const docsService = workspace.scope.get(DocsService);\n  // should jump to \"Write, Draw, Plan all at Once.\" in edgeless by default\n  const defaultDoc = docsService.list.docs$.value.find(p =>\n    p.title$.value.startsWith('Write, Draw, Plan all at Once.')\n  );\n  if (defaultDoc) {\n    defaultDoc.setPrimaryMode('edgeless');\n  }\n  dispose();\n  return { meta, defaultDocId: defaultDoc?.id };\n}"
        },
        {
          "type": "function",
          "name": "createFirstAppData",
          "label": "createFirstAppData",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "workspacesService = parameter0: WorkspacesService\nthis = this: @ts_files/179.ts: %dflt\n%0 = instanceinvoke localStorage.<@%unk/%unk: .getItem()>('is-first-open')\nif %0 !== null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 30,
                  "end_line": 44,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke localStorage.<@%unk/%unk: .setItem()>('is-first-open', 'false')\n%2 = WorkspaceFlavour.<@%unk/%unk: .LOCAL>\n%3 = staticinvoke <@ts_files/179.ts: %dflt.buildShowcaseWorkspace(WorkspacesService, WorkspaceFlavour, string)>(workspacesService, %2, DEFAULT_WORKSPACE_NAME)\n%1 = await %3\nmeta = %1.<@ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$1.meta>\ndefaultDocId = %1.<@ts_files/179.ts: %AC$%dflt$buildShowcaseWorkspace$1.defaultDocId>\ninstanceinvoke logger.<@%unk/%unk: .info()>('create first workspace', defaultDocId)\n%4 = new @ts_files/179.ts: %AC$%dflt$createFirstAppData$2\ninstanceinvoke %4.<@ts_files/179.ts: %AC$%dflt$createFirstAppData$2.constructor()>()\nreturn %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function createFirstAppData(workspacesService: WorkspacesService) {\n  if (localStorage.getItem('is-first-open') !== null) {\n    return;\n  }\n  localStorage.setItem('is-first-open', 'false');\n  const { meta, defaultDocId } = await buildShowcaseWorkspace(\n    workspacesService,\n    WorkspaceFlavour.LOCAL,\n    DEFAULT_WORKSPACE_NAME\n  );\n  logger.info('create first workspace', defaultDocId);\n  return { meta, defaultPageId: defaultDocId };\n}"
        },
        {
          "type": "function",
          "name": "%AM0$buildShowcaseWorkspace",
          "label": "%AM0$buildShowcaseWorkspace",
          "start_line": 1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [workspaceName]\ndocCollection = parameter1: unknown\nworkspaceName = %closures0.workspaceName\nthis = this: @ts_files/179.ts: %dflt\n%0 = docCollection.<@%unk/%unk: .meta>\ninstanceinvoke %0.<@%unk/%unk: .initialize()>()\n%1 = docCollection.<@%unk/%unk: .meta>\ninstanceinvoke %1.<@%unk/%unk: .setName()>(workspaceName)\n%2 = staticinvoke <@%unk/%unk: .fetch()>(onboardingUrl)\n%3 = await %2\n%4 = instanceinvoke %3.<@%unk/%unk: .blob()>()\nblob = await %4\n%5 = instanceinvoke ZipTransformer.<@%unk/%unk: .importDocs()>(docCollection, blob)\n%6 = await %5\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async docCollection => {\n    docCollection.meta.initialize();\n    docCollection.meta.setName(workspaceName);\n    const blob = await (await fetch(onboardingUrl)).blob();\n    await ZipTransformer.importDocs(docCollection, blob);\n  }"
        },
        {
          "type": "function",
          "name": "%AM1$buildShowcaseWorkspace",
          "label": "%AM1$buildShowcaseWorkspace",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "p = parameter0: unknown\nthis = this: @ts_files/179.ts: %dflt\n%0 = p.<@%unk/%unk: .title$>\n%1 = %0.<@%unk/%unk: .value>\n%2 = instanceinvoke %1.<@%unk/%unk: .startsWith()>('Write, Draw, Plan all at Once.')\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "p =>\n    p.title$.value.startsWith('Write, Draw, Plan all at Once.')"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$buildShowcaseWorkspace$0",
      "label": "%AC$%dflt$buildShowcaseWorkspace$0",
      "start_line": 19,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ metadata: meta }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$buildShowcaseWorkspace$1",
      "label": "%AC$%dflt$buildShowcaseWorkspace$1",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ meta, defaultDocId: defaultDoc?.id }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$createFirstAppData$2",
      "label": "%AC$%dflt$createFirstAppData$2",
      "start_line": 44,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ meta, defaultPageId: defaultDocId }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { DebugLogger } from '@affine/debug';\nimport { DEFAULT_WORKSPACE_NAME } from '@affine/env/constant';\nimport { WorkspaceFlavour } from '@affine/env/workspace';\nimport onboardingUrl from '@affine/templates/onboarding.zip';\nimport { ZipTransformer } from '@blocksuite/affine/blocks';\nimport type { WorkspacesService } from '@toeverything/infra';\nimport { DocsService } from '@toeverything/infra';\nexport async function buildShowcaseWorkspace(\n  workspacesService: WorkspacesService,\n  flavour: WorkspaceFlavour,\n  workspaceName: string\n) {\n  const meta = await workspacesService.create(flavour, async docCollection => {\n    docCollection.meta.initialize();\n    docCollection.meta.setName(workspaceName);\n    const blob = await (await fetch(onboardingUrl)).blob();\n    await ZipTransformer.importDocs(docCollection, blob);\n  });\n  const { workspace, dispose } = workspacesService.open({ metadata: meta });\n  await workspace.engine.waitForRootDocReady();\n  const docsService = workspace.scope.get(DocsService);\n  // should jump to \"Write, Draw, Plan all at Once.\" in edgeless by default\n  const defaultDoc = docsService.list.docs$.value.find(p =>\n    p.title$.value.startsWith('Write, Draw, Plan all at Once.')\n  );\n  if (defaultDoc) {\n    defaultDoc.setPrimaryMode('edgeless');\n  }\n  dispose();\n  return { meta, defaultDocId: defaultDoc?.id };\n}\nconst logger = new DebugLogger('createFirstAppData');\nexport async function createFirstAppData(workspacesService: WorkspacesService) {\n  if (localStorage.getItem('is-first-open') !== null) {\n    return;\n  }\n  localStorage.setItem('is-first-open', 'false');\n  const { meta, defaultDocId } = await buildShowcaseWorkspace(\n    workspacesService,\n    WorkspaceFlavour.LOCAL,\n    DEFAULT_WORKSPACE_NAME\n  );\n  logger.info('create first workspace', defaultDocId);\n  return { meta, defaultPageId: defaultDocId };\n}"
}