{
  "type": "file",
  "name": "1.ts",
  "label": "1.ts",
  "start_line": -1,
  "end_line": 32,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 29,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/1.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "GlobalContext",
      "label": "GlobalContext",
      "start_line": 1,
      "end_line": 32,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/1.ts: GlobalContext\ninstanceinvoke this.<@ts_files/1.ts: GlobalContext.%instInit()>()\nreturn",
              "start_line": 1,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private constructor() {}"
        },
        {
          "type": "function",
          "name": "getObject",
          "label": "getObject",
          "start_line": 1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: string\nthis = this: @ts_files/1.ts: GlobalContext\n%0 = this.<@ts_files/1.ts: GlobalContext._objects>\n%1 = instanceinvoke %0.<@%unk/%unk: .get()>(value)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getObject(value: string):Object {\n    return this._objects.get(value);\n  }"
        },
        {
          "type": "function",
          "name": "setObject",
          "label": "setObject",
          "start_line": 1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\nobjectClass = parameter1: Object\nthis = this: @ts_files/1.ts: GlobalContext\n%0 = this.<@ts_files/1.ts: GlobalContext._objects>\ninstanceinvoke %0.<@%unk/%unk: .set()>(key, objectClass)\nreturn",
              "start_line": 1,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }"
        },
        {
          "type": "function",
          "name": "getContext",
          "label": "getContext",
          "start_line": 1,
          "end_line": 21,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/1.ts: GlobalContext\n%0 = @ts_files/1.ts: GlobalContext.[static]instance\n%1 = !%0\nif %1 != undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @ts_files/1.ts: GlobalContext\ninstanceinvoke %2.<@ts_files/1.ts: GlobalContext.constructor()>()\n@ts_files/1.ts: GlobalContext.[static]instance = %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = @ts_files/1.ts: GlobalContext.[static]instance\nreturn %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string,Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string):Object {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (C) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// 构造单例对象\nexport class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string,Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string):Object {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n\n}"
}