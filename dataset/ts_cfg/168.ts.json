{
  "type": "file",
  "name": "168.ts",
  "label": "168.ts",
  "start_line": -1,
  "end_line": 15,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 15,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/168.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "openInBrowser",
          "label": "openInBrowser",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "address = parameter0: string\nthis = this: @ts_files/168.ts: %dflt\n%0 = process.<@%unk/%unk: .env>\nbrowserEnvVar = %0.<@%unk/%unk: .BROWSER>\n%1 = browserEnvVar === 'chrome'\n%2 = browserEnvVar === 'chromium'\n%3 = %1 || %2\n%4 = browserEnvVar === 'brave'\n%5 = %3 || %4\n%6 = browserEnvVar === 'com.brave.browser'\nuserBrowserIsChrome = %5 || %6\nif browserEnvVar != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = new @ts_files/168.ts: %AC$%dflt$openInBrowser$0\ninstanceinvoke %7.<@ts_files/168.ts: %AC$%dflt$openInBrowser$0.constructor()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "staticinvoke <@%unk/%unk: .getDefaultBrowser()>(%AM0$openInBrowser)\nreturn",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = new @ts_files/168.ts: %AC$%dflt$openInBrowser$2\ninstanceinvoke %9.<@ts_files/168.ts: %AC$%dflt$openInBrowser$2.constructor()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function openInBrowser(address: string) {\n  const browserEnvVar = process.env.BROWSER;\n  const userBrowserIsChrome =\n    browserEnvVar === 'chrome' ||\n    browserEnvVar === 'chromium' ||\n    browserEnvVar === 'brave' ||\n    browserEnvVar === 'com.brave.browser';\n  const openOptions = browserEnvVar ? { app: { name: browserEnvVar } } : {};\n  getDefaultBrowser(async (err: any, res: any) => {\n    try {\n      if (\n        res &&\n        (res.isChrome ||\n          res.isChromium ||\n          res.identity === 'com.brave.browser' ||\n          userBrowserIsChrome)\n      ) {\n        // We use betterOpn for Chrome because it is better at handling which chrome tab\n        // or window the preview loads in.\n        await betterOpn(address);\n      } else {\n        await open(address, openOptions);\n      }\n    } catch (error) {\n      logger.error(dedent`\n        Could not open ${address} inside a browser. If you're running this command inside a\n        docker container or on a CI, you need to pass the '--ci' flag to prevent opening a\n        browser by default.\n      `);\n    }\n  });\n}"
        },
        {
          "type": "function",
          "name": "%AM0$openInBrowser",
          "label": "%AM0$openInBrowser",
          "start_line": 1,
          "end_line": 15,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [userBrowserIsChrome, address, openOptions]\nerr = parameter1: any\nres = parameter2: any\nuserBrowserIsChrome = %closures0.userBrowserIsChrome\naddress = %closures0.address\nopenOptions = %closures0.openOptions\nthis = this: @ts_files/168.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = res.<@%unk/%unk: .isChrome>\n%1 = res.<@%unk/%unk: .isChromium>\n%2 = %0 || %1\n%3 = res.<@%unk/%unk: .identity>\n%4 = %3 === 'com.brave.browser'\n%5 = %2 || %4\n%6 = %5 || userBrowserIsChrome\n%7 = res && %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = staticinvoke <@%unk/%unk: .betterOpn()>(address)\n%9 = await %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = staticinvoke <@%unk/%unk: .open()>(address, openOptions)\n%11 = await %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\ninstanceinvoke logger.<@%unk/%unk: .error()>(dedent`\n        Could not open ${address} inside a browser. If you're running this command inside a\n        docker container or on a CI, you need to pass the '--ci' flag to prevent opening a\n        browser by default.\n      `)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (err: any, res: any) => {\n    try {\n      if (\n        res &&\n        (res.isChrome ||\n          res.isChromium ||\n          res.identity === 'com.brave.browser' ||\n          userBrowserIsChrome)\n      ) {\n        // We use betterOpn for Chrome because it is better at handling which chrome tab\n        // or window the preview loads in.\n        await betterOpn(address);\n      } else {\n        await open(address, openOptions);\n      }\n    } catch (error) {\n      logger.error(dedent`\n        Could not open ${address} inside a browser. If you're running this command inside a\n        docker container or on a CI, you need to pass the '--ci' flag to prevent opening a\n        browser by default.\n      `);\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$openInBrowser$0$%instInit$1",
      "label": "%AC$%AC$%dflt$openInBrowser$0$%instInit$1",
      "start_line": 14,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ name: browserEnvVar }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$openInBrowser$0",
      "label": "%AC$%dflt$openInBrowser$0",
      "start_line": 14,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ app: { name: browserEnvVar } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$openInBrowser$2",
      "label": "%AC$%dflt$openInBrowser$2",
      "start_line": 14,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { logger } from '@storybook/core/node-logger';\nimport getDefaultBrowser from '@aw-web-design/x-default-browser';\nimport betterOpn from 'better-opn';\n// betterOpn alias used because also loading open\nimport open from 'open';\nimport { dedent } from 'ts-dedent';\nexport function openInBrowser(address: string) {\n  const browserEnvVar = process.env.BROWSER;\n  const userBrowserIsChrome =\n    browserEnvVar === 'chrome' ||\n    browserEnvVar === 'chromium' ||\n    browserEnvVar === 'brave' ||\n    browserEnvVar === 'com.brave.browser';\n  const openOptions = browserEnvVar ? { app: { name: browserEnvVar } } : {};\n  getDefaultBrowser(async (err: any, res: any) => {\n    try {\n      if (\n        res &&\n        (res.isChrome ||\n          res.isChromium ||\n          res.identity === 'com.brave.browser' ||\n          userBrowserIsChrome)\n      ) {\n        // We use betterOpn for Chrome because it is better at handling which chrome tab\n        // or window the preview loads in.\n        await betterOpn(address);\n      } else {\n        await open(address, openOptions);\n      }\n    } catch (error) {\n      logger.error(dedent`\n        Could not open ${address} inside a browser. If you're running this command inside a\n        docker container or on a CI, you need to pass the '--ci' flag to prevent opening a\n        browser by default.\n      `);\n    }\n  });\n}"
}