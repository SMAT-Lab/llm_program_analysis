{
  "type": "file",
  "name": "102.ts",
  "label": "102.ts",
  "start_line": -1,
  "end_line": 34,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 34,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/102.ts: %dflt\n%0 = new @ts_files/102.ts: InputUtil\ninstanceinvoke %0.<@ts_files/102.ts: InputUtil.constructor()>()\ndefault = %0\nreturn",
              "start_line": 1,
              "end_line": 34,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "InputUtil",
      "label": "InputUtil",
      "start_line": 1,
      "end_line": 30,
      "functions": [
        {
          "type": "function",
          "name": "isEmpty",
          "label": "isEmpty",
          "start_line": 1,
          "end_line": 17,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "str = parameter0: string\nthis = this: @ts_files/102.ts: InputUtil\n%0 = str == 'undefined'\n%1 = !str\n%2 = %0 || %1\n%3 = new @%unk/%unk: RegExp\ninstanceinvoke %3.<@%unk/%unk: RegExp.constructor()>('[^\\s]')\n%4 = instanceinvoke %3.<@%unk/%unk: .test()>(str)\n%5 = !%4\n%6 = %2 || %5\nreturn %6",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }"
        },
        {
          "type": "function",
          "name": "checkNeedNumberSpace",
          "label": "checkNeedNumberSpace",
          "start_line": 1,
          "end_line": 21,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "numText = parameter0: string\nthis = this: @ts_files/102.ts: InputUtil\n%0 = new @%unk/%unk: RegExp\ninstanceinvoke %0.<@%unk/%unk: RegExp.constructor()>('[\\+;,#\\*]', 'g')\nisSpace = %0\n%1 = new @%unk/%unk: RegExp\ninstanceinvoke %1.<@%unk/%unk: RegExp.constructor()>('^\\+.*')\nisRule = %1\n%2 = instanceinvoke isSpace.<@%unk/%unk: .test()>(numText)\nif %2 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke isRule.<@%unk/%unk: .test()>(numText)\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return true",
                  "start_line": 27,
                  "end_line": 27,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }"
        },
        {
          "type": "function",
          "name": "removeSpace",
          "label": "removeSpace",
          "start_line": 1,
          "end_line": 30,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "str = parameter0: string\nthis = this: @ts_files/102.ts: InputUtil\n%0 = instanceinvoke this.<@ts_files/102.ts: InputUtil.isEmpty(string)>(str)\nif %0 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return ''",
                  "start_line": 32,
                  "end_line": 32,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: RegExp\ninstanceinvoke %1.<@%unk/%unk: RegExp.constructor()>('[\\s]', 'g')\n%2 = instanceinvoke str.<@%unk/%unk: .replace()>(%1, '')\nreturn %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class InputUtil {\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }\n\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass InputUtil {\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }\n\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n}\n\nexport default new InputUtil()"
}