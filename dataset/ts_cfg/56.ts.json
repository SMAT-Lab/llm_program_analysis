{
  "type": "file",
  "name": "56.ts",
  "label": "56.ts",
  "start_line": -1,
  "end_line": 244,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 244,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 244,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/56.ts: %dflt\nTAG = 'DateUtil'\nreturn",
              "start_line": 1,
              "end_line": 244,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "DateUtil",
      "label": "DateUtil",
      "start_line": 1,
      "end_line": 240,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$format",
          "label": "%AM0$format",
          "start_line": 1,
          "end_line": 64,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [format_s]\nvalue = parameter1: number\nkey = parameter2: string\nformat_s = %closures0.format_s\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @%unk/%unk: RegExp\n%1 = '(' + key\n%2 = %1 + ')'\ninstanceinvoke %0.<@%unk/%unk: RegExp.constructor()>(%2)\n%3 = instanceinvoke %0.<@%unk/%unk: .test()>(format_s)\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 46,
                  "end_line": 244,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = key.<@%unk/%unk: .length>\nif %4 === 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke value.<@%unk/%unk: .toString()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "format_s = instanceinvoke format_s.<@%unk/%unk: .replace()>(key, %5)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke value.<@%unk/%unk: .toString()>()\n%7 = %6.<@%unk/%unk: .length>\n%8 = '00' + value\n%5 = instanceinvoke %8.<@%unk/%unk: .substr()>(%7)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$formats",
          "label": "%AM1$formats",
          "start_line": 1,
          "end_line": 228,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [format]\nvalue = parameter1: number\nkey = parameter2: string\nformat = %closures0.format\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @%unk/%unk: RegExp\n%1 = '(' + key\n%2 = %1 + ')'\ninstanceinvoke %0.<@%unk/%unk: RegExp.constructor()>(%2)\n%3 = instanceinvoke %0.<@%unk/%unk: .test()>(format)\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 46,
                  "end_line": 244,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = key.<@%unk/%unk: .length>\nif %4 === 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke value.<@%unk/%unk: .toString()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "format = instanceinvoke format.<@%unk/%unk: .replace()>(key, %5)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke value.<@%unk/%unk: .toString()>()\n%7 = %6.<@%unk/%unk: .length>\n%8 = '00' + value\n%5 = instanceinvoke %8.<@%unk/%unk: .substr()>(%7)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }"
        },
        {
          "type": "function",
          "name": "initLanguageLocalesMap",
          "label": "initLanguageLocalesMap",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/56.ts: DateUtil\n%0 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: Map<string,string>\ninstanceinvoke %1.<@%unk/%unk: Map.constructor()>()\n@ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP = %1\n%2 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\ninstanceinvoke %2.<@%unk/%unk: .set()>('zh', 'zh-CN')\n%3 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\ninstanceinvoke %3.<@%unk/%unk: .set()>('en', 'en-US')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 46,
                      "end_line": 244,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getLocalizedDate",
          "label": "getLocalizedDate",
          "start_line": 1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nlocales = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocales()>()\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\n%1 = new @%unk/%unk: Intl.DateTimeFormat\n%2 = staticinvoke <@ts_files/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)>('numeric', 'long', 'numeric', '', '')\ninstanceinvoke %1.<@%unk/%unk: Intl.DateTimeFormat.constructor()>(locales, %2)\n%3 = instanceinvoke %1.<@%unk/%unk: .format()>(%0)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }"
        },
        {
          "type": "function",
          "name": "format",
          "label": "format",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "time = parameter0: Date\nformat_s = parameter1: string\nthis = this: @ts_files/56.ts: DateUtil\n%0 = staticinvoke <@%unk/%unk: .Boolean()>(format_s)\n%1 = instanceinvoke %0.<@%unk/%unk: .valueOf()>()\n%2 = !%1\nif %2 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke time.<@%unk/%unk: .valueOf()>()\n%4 = instanceinvoke %3.<@%unk/%unk: .toString()>()\nreturn %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = new @%unk/%unk: Map<string,number>\ninstanceinvoke %5.<@%unk/%unk: Map.constructor()>()\nopts = %5\n%6 = instanceinvoke time.<@%unk/%unk: .getMonth()>()\n%7 = %6 + 1\ninstanceinvoke opts.<@%unk/%unk: .set()>('MM', %7)\n%8 = instanceinvoke time.<@%unk/%unk: .getDate()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('dd', %8)\n%9 = instanceinvoke time.<@%unk/%unk: .getHours()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('HH', %9)\n%10 = instanceinvoke time.<@%unk/%unk: .getMinutes()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('mm', %10)\n%11 = instanceinvoke time.<@%unk/%unk: .getSeconds()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('ss', %11)\n%12 = new @%unk/%unk: RegExp\ninstanceinvoke %12.<@%unk/%unk: RegExp.constructor()>('/(y+)/')\ncheck = %12\n%13 = instanceinvoke check.<@%unk/%unk: .test()>(format_s)\nif %13 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = instanceinvoke time.<@%unk/%unk: .getFullYear()>()\n%15 = instanceinvoke %14.<@%unk/%unk: .toString()>()\n%16 = instanceinvoke %15.<@%unk/%unk: .substr()>(0)\nformat_s = instanceinvoke format_s.<@%unk/%unk: .replace()>('yyyy', %16)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke opts.<@%unk/%unk: .forEach()>(%AM0$format)\nreturn format_s",
                          "start_line": 1,
                          "end_line": 73,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }"
        },
        {
          "type": "function",
          "name": "getDateTimeFormat",
          "label": "getDateTimeFormat",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\n%1 = staticinvoke <@ts_files/56.ts: DateUtil.[static]format(Date, string)>(%0, 'yyyy/MM/dd HH:mm:ss')\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }"
        },
        {
          "type": "function",
          "name": "getGroupDataLocalizedDate",
          "label": "getGroupDataLocalizedDate",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\ndate = %0\n%1 = new @%unk/%unk: Date\ninstanceinvoke %1.<@%unk/%unk: Date.constructor()>()\ntoday = %1\n%2 = instanceinvoke date.<@%unk/%unk: .getFullYear()>()\n%3 = instanceinvoke today.<@%unk/%unk: .getFullYear()>()\n%4 = %2 === %3\n%5 = instanceinvoke date.<@%unk/%unk: .getMonth()>()\n%6 = instanceinvoke today.<@%unk/%unk: .getMonth()>()\n%7 = %5 === %6\n%8 = %4 && %7\nif %8 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = instanceinvoke date.<@%unk/%unk: .getDate()>()\n%10 = instanceinvoke today.<@%unk/%unk: .getDate()>()\nif %9 === %10",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = staticinvoke <@%unk/%unk: .$r()>('app.string.date_today')\nreturn %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%12 = instanceinvoke today.<@%unk/%unk: .getDate()>()\n%13 = instanceinvoke date.<@%unk/%unk: .getDate()>()\n%14 = %12 - %13\nif %14 === 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%15 = staticinvoke <@%unk/%unk: .$r()>('app.string.date_yesterday')\nreturn %15",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocalizedDate(number)>(milliseconds)\n%17 = staticinvoke <@%unk/%unk: .$r()>('app.string.common_place_holder', %16)\nreturn %17",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }"
        },
        {
          "type": "function",
          "name": "getLocalizedYear",
          "label": "getLocalizedYear",
          "start_line": 1,
          "end_line": 95,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nlocales = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocales()>()\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\n%1 = new @%unk/%unk: Intl.DateTimeFormat\n%2 = staticinvoke <@ts_files/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)>('numeric', '', '', '', '')\ninstanceinvoke %1.<@%unk/%unk: Intl.DateTimeFormat.constructor()>(locales, %2)\nyearText = instanceinvoke %1.<@%unk/%unk: .format()>(%0)\n%3 = instanceinvoke yearText.<@%unk/%unk: .toString()>()\n%4 = staticinvoke <@%unk/%unk: .$r()>('app.string.common_place_holder', %3)\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }"
        },
        {
          "type": "function",
          "name": "getLocalizedYearAndMonth",
          "label": "getLocalizedYearAndMonth",
          "start_line": 1,
          "end_line": 102,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nlocales = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocales()>()\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\n%1 = new @%unk/%unk: Intl.DateTimeFormat\n%2 = staticinvoke <@ts_files/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)>('numeric', 'long', '', '', '')\ninstanceinvoke %1.<@%unk/%unk: Intl.DateTimeFormat.constructor()>(locales, %2)\n%3 = instanceinvoke %1.<@%unk/%unk: .format()>(%0)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }"
        },
        {
          "type": "function",
          "name": "getLocalizedYearString",
          "label": "getLocalizedYearString",
          "start_line": 1,
          "end_line": 108,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nlocales = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocales()>()\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(milliseconds)\n%1 = new @%unk/%unk: Intl.DateTimeFormat\n%2 = staticinvoke <@ts_files/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)>('numeric', '', '', '', '')\ninstanceinvoke %1.<@%unk/%unk: Intl.DateTimeFormat.constructor()>(locales, %2)\n%3 = instanceinvoke %1.<@%unk/%unk: .format()>(%0)\n%4 = instanceinvoke %3.<@%unk/%unk: .toString()>()\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }"
        },
        {
          "type": "function",
          "name": "getLocalizedTime",
          "label": "getLocalizedTime",
          "start_line": 1,
          "end_line": 114,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliseconds = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nlocales = staticinvoke <@ts_files/56.ts: DateUtil.[static]getLocales()>()\nis24HourClock = instanceinvoke i18n.<@%unk/%unk: .is24HourClock()>()\n%0 = 'get is24HourClock ' + is24HourClock\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = new @%unk/%unk: Date\ninstanceinvoke %1.<@%unk/%unk: Date.constructor()>(milliseconds)\n%2 = new @%unk/%unk: Intl.DateTimeFormat\n%3 = staticinvoke <@%unk/%unk: .Boolean()>(is24HourClock)\n%4 = instanceinvoke %3.<@%unk/%unk: .valueOf()>()\n%5 = !%4\nif %5 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = '2-digit'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = staticinvoke <@ts_files/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)>('', '', '', %6, '2-digit')\ninstanceinvoke %2.<@%unk/%unk: Intl.DateTimeFormat.constructor()>(locales, %7)\n%8 = instanceinvoke %2.<@%unk/%unk: .format()>(%1)\nreturn %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = 'numeric'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }"
        },
        {
          "type": "function",
          "name": "getLocales",
          "label": "getLocales",
          "start_line": 1,
          "end_line": 122,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/56.ts: DateUtil\nstaticinvoke <@ts_files/56.ts: DateUtil.[static]initLanguageLocalesMap()>()\n%0 = instanceinvoke i18n.<@%unk/%unk: .getSystemLanguage()>()\nsystemLocale = instanceinvoke %0.<@%unk/%unk: .toString()>()\n%1 = instanceinvoke systemLocale.<@%unk/%unk: .split()>('-')\nlanguage = %1.<@%unk/%unk: .0>\n%2 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\nlocales = instanceinvoke %2.<@%unk/%unk: .get()>('en')\n%3 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\n%4 = instanceinvoke %3.<@%unk/%unk: .has()>(language)\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = @ts_files/56.ts: DateUtil.[static]LANGUAGE_LOCALES_MAP\nlocales = instanceinvoke %5.<@%unk/%unk: .get()>(language)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return locales",
                      "start_line": 130,
                      "end_line": 130,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }"
        },
        {
          "type": "function",
          "name": "getFormattedDuration",
          "label": "getFormattedDuration",
          "start_line": 1,
          "end_line": 134,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "milliSecond = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nif milliSecond == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'getFormattedDuration, input is null!')\nreturn '00:00'",
                  "start_line": 1,
                  "end_line": 141,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if milliSecond <= 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'getFormattedDuration, input is negative number!')\nreturn '00:00'",
                      "start_line": 1,
                      "end_line": 141,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = @ts_files/56.ts: DateUtil.[static]MILLISECONDS_PER_SECOND\nif milliSecond < %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return '00:01'",
                          "start_line": 144,
                          "end_line": 144,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%1 = @ts_files/56.ts: DateUtil.[static]MILLISECONDS_PER_SECOND\n%2 = milliSecond / %1\nseconds = instanceinvoke Math.<@%unk/%unk: .floor()>(%2)\n%3 = @ts_files/56.ts: DateUtil.[static]SECONDS_PER_HOUR\n%4 = seconds / %3\nhourTime = instanceinvoke Math.<@%unk/%unk: .floor()>(%4)\n%5 = @ts_files/56.ts: DateUtil.[static]SECONDS_PER_MINUTE\n%6 = seconds / %5\n%7 = instanceinvoke Math.<@%unk/%unk: .floor()>(%6)\n%8 = @ts_files/56.ts: DateUtil.[static]SECONDS_PER_MINUTE\n%9 = %7 % %8\nminuteTime = instanceinvoke Math.<@%unk/%unk: .floor()>(%9)\n%10 = @ts_files/56.ts: DateUtil.[static]SECONDS_PER_MINUTE\n%11 = seconds % %10\nsecondTime = instanceinvoke Math.<@%unk/%unk: .floor()>(%11)\nif hourTime > 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%12 = hourTime + ':'\n%13 = staticinvoke <@ts_files/56.ts: DateUtil.[static]checkTime(number)>(minuteTime)\n%14 = %12 + %13\n%15 = %14 + ':'\n%16 = staticinvoke <@ts_files/56.ts: DateUtil.[static]checkTime(number)>(secondTime)\n%17 = %15 + %16\nreturn %17",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%18 = staticinvoke <@ts_files/56.ts: DateUtil.[static]checkTime(number)>(minuteTime)\n%19 = %18 + ':'\n%20 = staticinvoke <@ts_files/56.ts: DateUtil.[static]checkTime(number)>(secondTime)\n%21 = %19 + %20\nreturn %21",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "checkTime",
          "label": "checkTime",
          "start_line": 1,
          "end_line": 157,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "time = parameter0: number\nthis = this: @ts_files/56.ts: DateUtil\nif time < 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'checkTime, input is negative number!')\nreturn '00'",
                  "start_line": 1,
                  "end_line": 160,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "formatTime = instanceinvoke time.<@%unk/%unk: .toString()>()\n%0 = @ts_files/56.ts: DateUtil.[static]FORMAT_DECIMAL\nif time < %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "zeroString = '0'\nformatTime = instanceinvoke zeroString.<@%unk/%unk: .concat()>(formatTime)",
                      "start_line": 164,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return formatTime",
                          "start_line": 167,
                          "end_line": 167,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }"
        },
        {
          "type": "function",
          "name": "isTheSameDay",
          "label": "isTheSameDay",
          "start_line": 1,
          "end_line": 170,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "startTime = parameter0: number\nendTime = parameter1: number\nthis = this: @ts_files/56.ts: DateUtil\n%0 = startTime == null\n%1 = endTime == null\n%2 = %0 || %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 172,
                  "end_line": 181,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Date\ninstanceinvoke %3.<@%unk/%unk: Date.constructor()>(startTime)\nstartTimeMs = instanceinvoke %3.<@%unk/%unk: .setHours()>(0, 0, 0, 0)\n%4 = new @%unk/%unk: Date\ninstanceinvoke %4.<@%unk/%unk: Date.constructor()>(endTime)\nendTimeMs = instanceinvoke %4.<@%unk/%unk: .setHours()>(0, 0, 0, 0)\nif startTimeMs === endTimeMs",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return %5",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }"
        },
        {
          "type": "function",
          "name": "isTheSameYear",
          "label": "isTheSameYear",
          "start_line": 1,
          "end_line": 179,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "startTime = parameter0: number\nendTime = parameter1: number\nthis = this: @ts_files/56.ts: DateUtil\n%0 = startTime == null\n%1 = endTime == null\n%2 = %0 || %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 172,
                  "end_line": 181,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Date\ninstanceinvoke %3.<@%unk/%unk: Date.constructor()>(startTime)\nstartYear = instanceinvoke %3.<@%unk/%unk: .getFullYear()>()\n%4 = new @%unk/%unk: Date\ninstanceinvoke %4.<@%unk/%unk: Date.constructor()>(endTime)\nendYear = instanceinvoke %4.<@%unk/%unk: .getFullYear()>()\nif startYear === endYear",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return %5",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }"
        },
        {
          "type": "function",
          "name": "buildDateTimeOpt",
          "label": "buildDateTimeOpt",
          "start_line": 1,
          "end_line": 210,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "year = parameter0: string\nmonth = parameter1: string\nday = parameter2: string\nhour = parameter3: string\nminute = parameter4: string\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @ts_files/56.ts: %AC$DateUtil$buildDateTimeOpt$0\ninstanceinvoke %0.<@ts_files/56.ts: %AC$DateUtil$buildDateTimeOpt$0.constructor()>()\nobj = %0\nreturn obj",
              "start_line": 1,
              "end_line": 210,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }"
        },
        {
          "type": "function",
          "name": "formats",
          "label": "formats",
          "start_line": 1,
          "end_line": 213,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "format = parameter0: string\nthis = this: @ts_files/56.ts: DateUtil\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>()\ntime = %0\n%1 = staticinvoke <@%unk/%unk: .Boolean()>(format)\n%2 = instanceinvoke %1.<@%unk/%unk: .valueOf()>()\n%3 = !%2\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke time.<@%unk/%unk: .valueOf()>()\n%5 = instanceinvoke %4.<@%unk/%unk: .toString()>()\nreturn %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = new @%unk/%unk: Map<string,number>\ninstanceinvoke %6.<@%unk/%unk: Map.constructor()>()\nopts = %6\n%7 = instanceinvoke time.<@%unk/%unk: .getMonth()>()\n%8 = %7 + 1\ninstanceinvoke opts.<@%unk/%unk: .set()>('MM', %8)\n%9 = instanceinvoke time.<@%unk/%unk: .getDate()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('dd', %9)\n%10 = instanceinvoke time.<@%unk/%unk: .getHours()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('HH', %10)\n%11 = instanceinvoke time.<@%unk/%unk: .getMinutes()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('mm', %11)\n%12 = instanceinvoke time.<@%unk/%unk: .getSeconds()>()\ninstanceinvoke opts.<@%unk/%unk: .set()>('ss', %12)\n%13 = new @%unk/%unk: RegExp\ninstanceinvoke %13.<@%unk/%unk: RegExp.constructor()>('/(y+)/')\n%14 = instanceinvoke %13.<@%unk/%unk: .test()>(format)\nif %14 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%15 = instanceinvoke time.<@%unk/%unk: .getFullYear()>()\n%16 = instanceinvoke %15.<@%unk/%unk: .toString()>()\n%17 = instanceinvoke %16.<@%unk/%unk: .substr()>(0)\nformat = instanceinvoke format.<@%unk/%unk: .replace()>('yyyy', %17)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke opts.<@%unk/%unk: .forEach()>(%AM1$formats)\nreturn format",
                          "start_line": 1,
                          "end_line": 237,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }"
        },
        {
          "type": "function",
          "name": "nameByDate",
          "label": "nameByDate",
          "start_line": 1,
          "end_line": 240,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isReplace = parameter0: Boolean\nname = parameter1: string\nthis = this: @ts_files/56.ts: DateUtil\n%0 = isReplace != null\n%1 = isReplace === true\n%2 = %0 && %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%18 = @ts_files/56.ts: DateUtil.[static]NEW_NAME_IMG\n%19 = staticinvoke <@ts_files/56.ts: DateUtil.[static]formats(string)>('yyyyMMdd_HHmmss')\n%20 = %18 + %19\nreturn %20",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = staticinvoke <@%unk/%unk: .Boolean()>(name)\n%4 = instanceinvoke %3.<@%unk/%unk: .valueOf()>()\n%5 = !%4\nif %5 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return %6",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = @ts_files/56.ts: DateUtil.[static]NEW_NAME_EDIT\n%8 = instanceinvoke name.<@%unk/%unk: .indexOf()>(%7)\n%9 = -1\nif %8 === %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = instanceinvoke name.<@%unk/%unk: .split()>('.')\n%11 = %10.<@%unk/%unk: .0>\n%12 = %11 + '_'\n%13 = @ts_files/56.ts: DateUtil.[static]NEW_NAME_EDIT\n%14 = %12 + %13\n%15 = staticinvoke <@ts_files/56.ts: DateUtil.[static]formats(string)>()\n%16 = %14 + %15",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%6 = %16",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%17 = instanceinvoke name.<@%unk/%unk: .split()>('.')\n%16 = %17.<@%unk/%unk: .0>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }\n\n  // Get the date after localization (year-month-day)\n  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }\n\n  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }\n\n  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }\n\n  // Gets the localization date of the photo page grouping data\n  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }\n\n  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }\n\n  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }\n\n  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }\n\n  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }\n\n  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }\n\n  // Format duration\n  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }\n\n  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }\n\n  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }\n\n  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }\n\n  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }\n\n  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }\n\n  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$DateUtil$buildDateTimeOpt$0",
      "label": "%AC$DateUtil$buildDateTimeOpt$0",
      "start_line": 189,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport i18n from '@ohos.i18n';\nimport Intl from '@ohos.intl';\n\nconst TAG = 'DateUtil';\n\nexport class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }\n\n  // Get the date after localization (year-month-day)\n  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }\n\n  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }\n\n  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }\n\n  // Gets the localization date of the photo page grouping data\n  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }\n\n  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }\n\n  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }\n\n  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }\n\n  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }\n\n  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }\n\n  // Format duration\n  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }\n\n  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }\n\n  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }\n\n  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }\n\n  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }\n\n  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }\n\n  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }\n}\n"
}