{
  "type": "file",
  "name": "52.ts",
  "label": "52.ts",
  "start_line": -1,
  "end_line": 60,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 60,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/52.ts: %dflt\nTAG = 'ImageUtil'\nMAX_BIT = 30\nBIT_SIXTEEN = 16\nBIT_EIGHT = 8\nBIT_FOUR = 4\nBIT_TWO = 2\nBIT_ONE = 1\nreturn",
              "start_line": 1,
              "end_line": 60,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "computeSampleSize",
          "label": "computeSampleSize",
          "start_line": 1,
          "end_line": 26,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "width = parameter0: number\nheight = parameter1: number\nminSideLength = parameter2: number\nmaxNumOfPixels = parameter3: number\nthis = this: @ts_files/52.ts: %dflt\n%0 = width === 0\n%1 = height === 0\n%2 = %0 || %1\n%3 = minSideLength === 0\n%4 = %2 || %3\n%5 = maxNumOfPixels === 0\n%6 = %4 || %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 2",
                  "start_line": 28,
                  "end_line": 28,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "initialSize = staticinvoke <@ts_files/52.ts: %dflt.computeInitialSampleSize(number, number, number, number)>(width, height, minSideLength, maxNumOfPixels)\n%7 = 'initialSize:  ' + initialSize\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %7)\nif initialSize <= 8",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = staticinvoke <@ts_files/52.ts: %dflt.nextPowerOf2(number)>(initialSize)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = initialSize + 8\n%10 = %9 - 1\n%11 = %10 / 8\n%12 = instanceinvoke Math.<@%unk/%unk: .floor()>(%11)\n%8 = %12 * 8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}"
        },
        {
          "type": "function",
          "name": "computeInitialSampleSize",
          "label": "computeInitialSampleSize",
          "start_line": 1,
          "end_line": 35,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "width = parameter0: number\nheight = parameter1: number\nminSideLength = parameter2: number\nmaxNumOfPixels = parameter3: number\nthis = this: @ts_files/52.ts: %dflt\n%0 = -1\n%1 = maxNumOfPixels === %0\n%2 = -1\n%3 = minSideLength === %2\n%4 = %1 && %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 1",
                  "start_line": 37,
                  "end_line": 37,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = -1\nif maxNumOfPixels === %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "lowerBound = 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = 'lowerBound: ' + lowerBound\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %10)\n%11 = -1\nif minSideLength === %11",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return lowerBound",
                              "start_line": 42,
                              "end_line": 42,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%12 = width / minSideLength\n%13 = height / minSideLength\nsampleSize = instanceinvoke Math.<@%unk/%unk: .min()>(%12, %13)\n%14 = instanceinvoke Math.<@%unk/%unk: .max()>(sampleSize, lowerBound)\nreturn %14",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = width * height\n%8 = %7 / maxNumOfPixels\n%9 = instanceinvoke Math.<@%unk/%unk: .sqrt()>(%8)\nlowerBound = instanceinvoke Math.<@%unk/%unk: .ceil()>(%9)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}"
        },
        {
          "type": "function",
          "name": "nextPowerOf2",
          "label": "nextPowerOf2",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: number\nthis = this: @ts_files/52.ts: %dflt\nuseValue = value\n%0 = useValue <= 0\n%1 = 1 << MAX_BIT\n%2 = useValue > %1\n%3 = %0 || %2\nif %3 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "useValue = useValue - 1\nuseValue = useValue | useValue >> BIT_SIXTEEN\nuseValue = useValue | useValue >> BIT_EIGHT\nuseValue = useValue | useValue >> BIT_FOUR\nuseValue = useValue | useValue >> BIT_TWO\nuseValue = useValue | useValue >> BIT_ONE\n%4 = 'nextPowerOf2:' + useValue\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\n%5 = useValue + 1\nreturn %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\n\nconst TAG = 'ImageUtil';\nconst MAX_BIT = 30;\nconst BIT_SIXTEEN = 16;\nconst BIT_EIGHT = 8;\nconst BIT_FOUR = 4;\nconst BIT_TWO = 2;\nconst BIT_ONE = 1;\n\nexport function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}\n\nfunction computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}\n\nfunction nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}\n"
}