{
  "type": "file",
  "name": "159.ts",
  "label": "159.ts",
  "start_line": -1,
  "end_line": 28,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 28,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/159.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 28,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "getTwoFactorAuthRequired",
          "label": "getTwoFactorAuthRequired",
          "start_line": 1,
          "end_line": 4,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "options = parameter0: Partial<FetchConfig>\nthis = this: @ts_files/159.ts: %dflt\n%0 = new @ts_files/159.ts: %AC$%dflt$getTwoFactorAuthRequired$0\ninstanceinvoke %0.<@ts_files/159.ts: %AC$%dflt$getTwoFactorAuthRequired$0.constructor()>()\nopts = staticinvoke <@%unk/%unk: .getFetchConfig()>(options, %0)\n%1 = opts.<@%unk/%unk: .log>\ninstanceinvoke %1.<@%unk/%unk: .info()>('', 'Checking two-factor auth mode')\n%2 = staticinvoke <@%unk/%unk: .getProfileData()>(opts)\n%3 = instanceinvoke %2.<@%unk/%unk: .then()>(success, failure)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }\n  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$getTwoFactorAuthRequired$0",
      "label": "%AC$%dflt$getTwoFactorAuthRequired$0",
      "start_line": 5,
      "end_line": 5,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { ValidationError } from \"@lerna/core\";\nimport { FetchConfig, getFetchConfig } from \"./fetch-config\";\nimport { getProfileData } from \"./get-profile-data\";\nexport function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }\n  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }\n}"
}