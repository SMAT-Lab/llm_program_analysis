{
  "type": "file",
  "name": "174.ts",
  "label": "174.ts",
  "start_line": -1,
  "end_line": 45,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 45,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/174.ts: %dflt\nkNoElementsFoundError = '<element(s) not found>'\nreturn",
              "start_line": 1,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "matcherHint",
          "label": "matcherHint",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "state = parameter0: ExpectMatcherState\nlocator = parameter1: Locator|undefined\nmatcherName = parameter2: string\nexpression = parameter3: any\nactual = parameter4: any\nmatcherOptions = parameter5: any\ntimeout = parameter6: number\nthis = this: @ts_files/174.ts: %dflt\n%0 = state.<@%unk/%unk: .utils>\n%1 = instanceinvoke %0.<@%unk/%unk: .matcherHint()>(matcherName, expression, actual, matcherOptions)\n%2 = instanceinvoke %1.<@%unk/%unk: .replace()>(/ \\/\\/ deep equality/, '')\nheader = %2 + '\n\n'\nif timeout != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = 'Timed out ' + timeout\n%4 = %3 + 'ms waiting for '\n%5 = instanceinvoke colors.<@%unk/%unk: .red()>(%4)\nheader = %5 + header",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if locator != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = staticinvoke <@%unk/%unk: .String()>(locator)\n%7 = 'Locator: ' + %6\n%8 = %7 + '\\n'\nheader = header + %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return header",
                              "start_line": 13,
                              "end_line": 13,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function matcherHint(state: ExpectMatcherState, locator: Locator | undefined, matcherName: string, expression: any, actual: any, matcherOptions: any, timeout?: number) {\n  let header = state.utils.matcherHint(matcherName, expression, actual, matcherOptions).replace(/ \\/\\/ deep equality/, '') + '\\n\\n';\n  if (timeout)\n    header = colors.red(`Timed out ${timeout}ms waiting for `) + header;\n  if (locator)\n    header += `Locator: ${String(locator)}\\n`;\n  return header;\n}"
        },
        {
          "type": "function",
          "name": "isJestError",
          "label": "isJestError",
          "start_line": 1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "e = parameter0: UnknownKeyword\nthis = this: @ts_files/174.ts: %dflt\n%0 = e instanceof Error && undefined\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function isJestError(e: unknown): e is JestError {\n  return e instanceof Error && 'matcherResult' in e;\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ExpectError",
      "label": "ExpectError",
      "start_line": 1,
      "end_line": 33,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/174.ts: ExpectError.%instInit()>()\njestError = parameter0: JestError\ncustomMessage = parameter1: string\nstackFrames = parameter2: StackFrame[]\nthis = this: @ts_files/174.ts: ExpectError\nstaticinvoke <@%unk/%unk: .super()>('')\n%0 = jestError.<@%unk/%unk: .name>\nthis.<@ts_files/174.ts: ExpectError.name> = %0\n%1 = jestError.<@%unk/%unk: .message>\nthis.<@ts_files/174.ts: ExpectError.message> = %1\n%2 = jestError.<@%unk/%unk: .matcherResult>\nthis.<@ts_files/174.ts: ExpectError.matcherResult> = %2\nif customMessage != ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = customMessage + '\n\n'\n%4 = this.<@ts_files/174.ts: ExpectError.message>\n%5 = %3 + %4\nthis.<@ts_files/174.ts: ExpectError.message> = %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = this.<@ts_files/174.ts: ExpectError.name>\n%7 = %6 + ': '\n%8 = this.<@ts_files/174.ts: ExpectError.message>\n%9 = %7 + %8\n%10 = %9 + '\n'\n%11 = staticinvoke <@%unk/%unk: .stringifyStackFrames()>(stackFrames)\n%12 = instanceinvoke %11.<@%unk/%unk: .join()>('\n')\n%13 = %10 + %12\nthis.<@ts_files/174.ts: ExpectError.stack> = %13\nreturn",
                      "start_line": 1,
                      "end_line": 45,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(jestError: JestError, customMessage: string, stackFrames: StackFrame[]) {\n    super('');\n    // Copy to erase the JestMatcherError constructor name from the console.log(error).\n    this.name = jestError.name;\n    this.message = jestError.message;\n    this.matcherResult = jestError.matcherResult;\n    if (customMessage)\n      this.message = customMessage + '\\n\\n' + this.message;\n    this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class ExpectError extends Error {\n  matcherResult: MatcherResultProperty;\n  constructor(jestError: JestError, customMessage: string, stackFrames: StackFrame[]) {\n    super('');\n    // Copy to erase the JestMatcherError constructor name from the console.log(error).\n    this.name = jestError.name;\n    this.message = jestError.message;\n    this.matcherResult = jestError.matcherResult;\n    if (customMessage)\n      this.message = customMessage + '\\n\\n' + this.message;\n    this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 0,
      "end_line": 15,
      "functions": [
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "() => string"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  name: string;\n  expected?: E;\n  message: () => string;\n  pass: boolean;\n  actual?: A;\n  log?: string[];\n  timeout?: number;\n  suggestedRebaseline?: string;\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { colors } from 'playwright-core/lib/utilsBundle';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { Locator } from 'playwright-core';\nimport type { StackFrame } from '@protocol/channels';\nimport { stringifyStackFrames } from 'playwright-core/lib/utils';\nexport const kNoElementsFoundError = '<element(s) not found>';\nexport function matcherHint(state: ExpectMatcherState, locator: Locator | undefined, matcherName: string, expression: any, actual: any, matcherOptions: any, timeout?: number) {\n  let header = state.utils.matcherHint(matcherName, expression, actual, matcherOptions).replace(/ \\/\\/ deep equality/, '') + '\\n\\n';\n  if (timeout)\n    header = colors.red(`Timed out ${timeout}ms waiting for `) + header;\n  if (locator)\n    header += `Locator: ${String(locator)}\\n`;\n  return header;\n}\nexport type MatcherResult<E, A> = {\n  name: string;\n  expected?: E;\n  message: () => string;\n  pass: boolean;\n  actual?: A;\n  log?: string[];\n  timeout?: number;\n  suggestedRebaseline?: string;\n};\nexport type MatcherResultProperty = Omit<MatcherResult<unknown, unknown>, 'message'> & {\n  message: string;\n};\ntype JestError = Error & {\n  matcherResult: MatcherResultProperty;\n};\nexport class ExpectError extends Error {\n  matcherResult: MatcherResultProperty;\n  constructor(jestError: JestError, customMessage: string, stackFrames: StackFrame[]) {\n    super('');\n    // Copy to erase the JestMatcherError constructor name from the console.log(error).\n    this.name = jestError.name;\n    this.message = jestError.message;\n    this.matcherResult = jestError.matcherResult;\n    if (customMessage)\n      this.message = customMessage + '\\n\\n' + this.message;\n    this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');\n  }\n}\nexport function isJestError(e: unknown): e is JestError {\n  return e instanceof Error && 'matcherResult' in e;\n}"
}