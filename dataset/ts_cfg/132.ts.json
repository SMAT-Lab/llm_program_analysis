{
  "type": "file",
  "name": "132.ts",
  "label": "132.ts",
  "start_line": -1,
  "end_line": 858,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 857,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/132.ts: %dflt\n%0 = new @ts_files/132.ts: %AC$%dflt$%dflt$2\ninstanceinvoke %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.constructor()>()\nBLACK = %0\n%1 = new @ts_files/132.ts: %AC$%dflt$%dflt$3\ninstanceinvoke %1.<@ts_files/132.ts: %AC$%dflt$%dflt$3.constructor()>()\nWHITE = %1\n%2 = new @ts_files/132.ts: %AC$%dflt$%dflt$4\ninstanceinvoke %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.constructor()>()\nNO_PADDING = %2\n%3 = new @ts_files/132.ts: %AC$%dflt$%dflt$5\ninstanceinvoke %3.<@ts_files/132.ts: %AC$%dflt$%dflt$5.constructor()>()\nDEFAULT_BORDER = %3\n%4 = new @ts_files/132.ts: %AC$%dflt$%dflt$7\ninstanceinvoke %4.<@ts_files/132.ts: %AC$%dflt$%dflt$7.constructor()>()\nDEFAULT_CELL_FORMAT = %4\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "Range",
      "label": "Range",
      "start_line": 68,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface Range {\n  row: number\n  column: number\n}"
    },
    {
      "type": "class",
      "name": "ValueRange",
      "label": "ValueRange",
      "start_line": 73,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface ValueRange {\n  range: string\n  majorDimension: WorksheetDimension\n  values: Value[][]\n}"
    },
    {
      "type": "class",
      "name": "UpdateValuesResponse",
      "label": "UpdateValuesResponse",
      "start_line": 79,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface UpdateValuesResponse {\n  spreadsheetId: string\n  updatedRange: string\n  updatedRows: number\n  updatedColumns: number\n  updatedCells: number\n  updatedData: ValueRange\n}"
    },
    {
      "type": "class",
      "name": "AddSheetRequest",
      "label": "AddSheetRequest",
      "start_line": 88,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface AddSheetRequest {\n  properties: Partial<WorksheetProperties>\n}"
    },
    {
      "type": "class",
      "name": "AddSheetResponse",
      "label": "AddSheetResponse",
      "start_line": 92,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface AddSheetResponse {\n  properties: WorksheetProperties\n}"
    },
    {
      "type": "class",
      "name": "DeleteRangeRequest",
      "label": "DeleteRangeRequest",
      "start_line": 95,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface DeleteRangeRequest {\n  range: GridRange\n  shiftDimension: WorksheetDimension\n}"
    },
    {
      "type": "class",
      "name": "DeleteSheetRequest",
      "label": "DeleteSheetRequest",
      "start_line": 100,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface DeleteSheetRequest {\n  sheetId: number\n}"
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 105,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    addSheet?: AddSheetRequest\n    deleteRange?: DeleteRangeRequest\n    deleteSheet?: DeleteSheetRequest\n  }"
    },
    {
      "type": "class",
      "name": "BatchUpdateRequest",
      "label": "BatchUpdateRequest",
      "start_line": 104,
      "end_line": 104,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface BatchUpdateRequest {\n  requests: {\n    addSheet?: AddSheetRequest\n    deleteRange?: DeleteRangeRequest\n    deleteSheet?: DeleteSheetRequest\n  }[]\n  includeSpreadsheetInResponse: boolean\n  responseRanges: string[]\n  responseIncludeGridData: boolean\n}"
    },
    {
      "type": "class",
      "name": "%AC$1",
      "label": "%AC$1",
      "start_line": 117,
      "end_line": 117,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    addSheet?: AddSheetResponse\n  }"
    },
    {
      "type": "class",
      "name": "BatchUpdateResponse",
      "label": "BatchUpdateResponse",
      "start_line": 115,
      "end_line": 115,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface BatchUpdateResponse {\n  spreadsheetId: string\n  replies: {\n    addSheet?: AddSheetResponse\n  }[]\n  updatedSpreadsheet: Spreadsheet\n}"
    },
    {
      "type": "class",
      "name": "RowData",
      "label": "RowData",
      "start_line": 123,
      "end_line": 123,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface RowData {\n  values: CellData[]\n}"
    },
    {
      "type": "class",
      "name": "GridData",
      "label": "GridData",
      "start_line": 127,
      "end_line": 127,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface GridData {\n  startRow: number\n  startColumn: number\n  rowData: RowData[]\n  rowMetadata: WorksheetDimensionProperties[]\n  columnMetadata: WorksheetDimensionProperties[]\n}"
    },
    {
      "type": "class",
      "name": "Sheet",
      "label": "Sheet",
      "start_line": 135,
      "end_line": 135,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface Sheet {\n  properties: WorksheetProperties\n  data: GridData[]\n}"
    },
    {
      "type": "class",
      "name": "Spreadsheet",
      "label": "Spreadsheet",
      "start_line": 140,
      "end_line": 140,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface Spreadsheet {\n  properties: SpreadsheetProperties\n  spreadsheetId: string\n  sheets: Sheet[]\n}"
    },
    {
      "type": "class",
      "name": "AppendParams",
      "label": "AppendParams",
      "start_line": 157,
      "end_line": 157,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface AppendParams {\n  valueInputOption?: ValueInputOption\n  insertDataOption?: InsertDataOption\n  includeValuesInResponse?: boolean\n  responseValueRenderOption?: ValueRenderOption\n  responseDateTimeRenderOption?: DateTimeRenderOption\n}"
    },
    {
      "type": "class",
      "name": "BatchGetParams",
      "label": "BatchGetParams",
      "start_line": 165,
      "end_line": 165,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface BatchGetParams {\n  ranges: string[]\n  majorDimension?: WorksheetDimension\n  valueRenderOption?: ValueRenderOption\n  dateTimeRenderOption?: DateTimeRenderOption\n}"
    },
    {
      "type": "class",
      "name": "BatchGetResponse",
      "label": "BatchGetResponse",
      "start_line": 172,
      "end_line": 172,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface BatchGetResponse {\n  spreadsheetId: string\n  valueRanges: ValueRange[]\n}"
    },
    {
      "type": "class",
      "name": "AppendRequest",
      "label": "AppendRequest",
      "start_line": 176,
      "end_line": 176,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface AppendRequest {\n  range: string\n  params: AppendParams\n  body: ValueRange\n}"
    },
    {
      "type": "class",
      "name": "AppendResponse",
      "label": "AppendResponse",
      "start_line": 182,
      "end_line": 182,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface AppendResponse {\n  spreadsheetId: string\n  tableRange: string\n  updates: UpdateValuesResponse\n}"
    },
    {
      "type": "class",
      "name": "GoogleSheetsMock",
      "label": "GoogleSheetsMock",
      "start_line": 0,
      "end_line": 858,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.%instInit()>()\nconfig = parameter0: GoogleSheetsConfig\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nthis.<@ts_files/132.ts: GoogleSheetsMock.config> = config\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$constructor$13\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$constructor$13.constructor()>()\nthis.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet> = %0\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.mockAuth()>()\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.mockAPI()>()\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private constructor(config: GoogleSheetsConfig) {\n    this.config = config\n    this.spreadsheet = {\n      properties: {\n        title: \"Test Spreadsheet\",\n        locale: \"en_US\",\n        autoRecalc: \"ON_CHANGE\",\n        timeZone: \"America/New_York\",\n        defaultFormat: {},\n        iterativeCalculationSettings: {},\n        spreadsheetTheme: {},\n      },\n      spreadsheetId: config.spreadsheetId,\n      sheets: [],\n    }\n    this.mockAuth()\n    this.mockAPI()\n  }"
        },
        {
          "type": "function",
          "name": "cell",
          "label": "cell",
          "start_line": 1,
          "end_line": 211,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\ncellData = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.cellData(string)>(cell)\n%0 = !cellData\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 214,
                  "end_line": 723,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.cellValue(CellData)>(cellData)\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public cell(cell: string): Value | undefined {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      return undefined\n    }\n    return this.cellValue(cellData)\n  }"
        },
        {
          "type": "function",
          "name": "set",
          "label": "set",
          "start_line": 1,
          "end_line": 218,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: string\nvalue = parameter1: Value\nthis = this: @ts_files/132.ts: GoogleSheetsMock\ncellData = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.cellData(string)>(cell)\n%0 = !cellData\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: Error\n%2 = 'Cell ' + cell\n%3 = %2 + ' not found'\ninstanceinvoke %1.<@%unk/%unk: Error.constructor()>(%3)\nthrow %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.createValue(Value)>(value)\ncellData.<@%unk/%unk: .userEnteredValue> = %4\nreturn",
                      "start_line": 1,
                      "end_line": 857,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public set(cell: string, value: Value): void {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      throw new Error(`Cell ${cell} not found`)\n    }\n    cellData.userEnteredValue = this.createValue(value)\n  }"
        },
        {
          "type": "function",
          "name": "sheet",
          "label": "sheet",
          "start_line": 1,
          "end_line": 225,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string|number\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nif typeof name === 'number'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(name)\nreturn %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetByName(string)>(name)\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public sheet(name: string | number): Sheet | undefined {\n    if (typeof name === \"number\") {\n      return this.getSheetById(name)\n    }\n    return this.getSheetByName(name)\n  }"
        },
        {
          "type": "function",
          "name": "createSheet",
          "label": "createSheet",
          "start_line": 1,
          "end_line": 231,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "opts = parameter0: Partial<WorksheetProperties>\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nproperties = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.defaultWorksheetProperties(Partial<WorksheetProperties>)>(opts)\n%0 = properties.<@ts_files/132.ts: %AC$GoogleSheetsMock$defaultWorksheetProperties$35.title>\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetByName(string)>(%0)\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Error\n%3 = properties.<@ts_files/132.ts: %AC$GoogleSheetsMock$defaultWorksheetProperties$35.title>\n%4 = 'Sheet ' + %3\n%5 = %4 + ' already exists'\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>(%5)\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createSheet$18\ninstanceinvoke %6.<@ts_files/132.ts: %AC$GoogleSheetsMock$createSheet$18.constructor()>()\nresp = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleAddSheet(@ts_files/132.ts: AddSheetRequest)>(%6)\n%7 = resp.<@ts_files/132.ts: AddSheetResponse.properties>\n%8 = %7.<@%unk/%unk: .sheetId>\n%9 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(%8)\nreturn %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public createSheet(opts: Partial<WorksheetProperties>): Sheet {\n    const properties = this.defaultWorksheetProperties(opts)\n    if (this.getSheetByName(properties.title)) {\n      throw new Error(`Sheet ${properties.title} already exists`)\n    }\n    const resp = this.handleAddSheet({ properties })\n    return this.getSheetById(resp.properties.sheetId)!\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(uri: string, request: nock.Body) => nock.Body"
        },
        {
          "type": "function",
          "name": "route",
          "label": "route",
          "start_line": 1,
          "end_line": 239,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "method = parameter0: string|string|string\npath = parameter1: string|RegExp\nhandler = parameter2: @ts_files/132.ts: GoogleSheetsMock.%AM0(string, nock.Body)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$route$19\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$route$19.constructor()>()\nheaders = %0\nscope = staticinvoke <@%unk/%unk: .nock()>('https://sheets.googleapis.com/', headers)\n%1 = instanceinvoke scope.<@%unk/%unk: .method()>(path)\n%2 = instanceinvoke %1.<@%unk/%unk: .reply()>(200, handler)\n%3 = instanceinvoke %2.<@%unk/%unk: .persist()>()\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private route(\n    method: \"get\" | \"put\" | \"post\",\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    const headers = { reqheaders: { authorization: \"Bearer test\" } }\n    const scope = nock(\"https://sheets.googleapis.com/\", headers)\n    return scope[method](path).reply(200, handler).persist()\n  }"
        },
        {
          "type": "function",
          "name": "%AM1",
          "label": "%AM1",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(uri: string, request: nock.Body) => nock.Body"
        },
        {
          "type": "function",
          "name": "get",
          "label": "get",
          "start_line": 1,
          "end_line": 248,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "path = parameter0: string|RegExp\nhandler = parameter1: @ts_files/132.ts: GoogleSheetsMock.%AM1(string, nock.Body)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.route(string|string|string, string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM0(string, nock.Body))>('get', path, handler)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private get(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"get\", path, handler)\n  }"
        },
        {
          "type": "function",
          "name": "%AM2",
          "label": "%AM2",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(uri: string, request: nock.Body) => nock.Body"
        },
        {
          "type": "function",
          "name": "put",
          "label": "put",
          "start_line": 1,
          "end_line": 254,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "path = parameter0: string|RegExp\nhandler = parameter1: @ts_files/132.ts: GoogleSheetsMock.%AM2(string, nock.Body)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.route(string|string|string, string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM0(string, nock.Body))>('put', path, handler)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private put(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"put\", path, handler)\n  }"
        },
        {
          "type": "function",
          "name": "%AM3",
          "label": "%AM3",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(uri: string, request: nock.Body) => nock.Body"
        },
        {
          "type": "function",
          "name": "post",
          "label": "post",
          "start_line": 1,
          "end_line": 260,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "path = parameter0: string|RegExp\nhandler = parameter1: @ts_files/132.ts: GoogleSheetsMock.%AM3(string, nock.Body)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.route(string|string|string, string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM0(string, nock.Body))>('post', path, handler)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private post(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"post\", path, handler)\n  }"
        },
        {
          "type": "function",
          "name": "mockAuth",
          "label": "mockAuth",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$21\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$21.constructor()>()\n%1 = staticinvoke <@%unk/%unk: .nock()>('https://www.googleapis.com/')\n%2 = instanceinvoke %1.<@%unk/%unk: .post()>('/oauth2/v4/token')\n%3 = instanceinvoke %2.<@%unk/%unk: .reply()>(200, %0)\ninstanceinvoke %3.<@%unk/%unk: .persist()>()\n%4 = new @ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$22\ninstanceinvoke %4.<@ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$22.constructor()>()\n%5 = new @ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$23\ninstanceinvoke %5.<@ts_files/132.ts: %AC$GoogleSheetsMock$mockAuth$23.constructor()>()\n%6 = staticinvoke <@%unk/%unk: .nock()>('https://oauth2.googleapis.com/')\n%7 = instanceinvoke %6.<@%unk/%unk: .post()>('/token', %5)\n%8 = instanceinvoke %7.<@%unk/%unk: .reply()>(200, %4)\ninstanceinvoke %8.<@%unk/%unk: .persist()>()\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private mockAuth() {\n    nock(\"https://www.googleapis.com/\")\n      .post(\"/oauth2/v4/token\")\n      .reply(200, {\n        grant_type: \"client_credentials\",\n        client_id: \"your-client-id\",\n        client_secret: \"your-client-secret\",\n      })\n      .persist()\n    nock(\"https://oauth2.googleapis.com/\")\n      .post(\"/token\", {\n        client_id: \"test\",\n        client_secret: \"test\",\n        grant_type: \"refresh_token\",\n        refresh_token: \"refreshToken\",\n      })\n      .reply(200, {\n        access_token: \"test\",\n        expires_in: 3600,\n        token_type: \"Bearer\",\n        scopes: \"https://www.googleapis.com/auth/spreadsheets\",\n      })\n      .persist()\n  }"
        },
        {
          "type": "function",
          "name": "mockAPI",
          "label": "mockAPI",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = this.<@ts_files/132.ts: GoogleSheetsMock.config>\nspreadsheetId = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.spreadsheetId>\n%1 = '/v4/spreadsheets/' + spreadsheetId\n%2 = %1 + '/'\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.get(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM1(string, nock.Body))>(%2, %AM6$mockAPI)\n%3 = '/v4/spreadsheets/' + spreadsheetId\n%4 = %3 + '/:batchUpdate'\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.post(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM3(string, nock.Body))>(%4, %AM7$mockAPI)\n%5 = new @%unk/%unk: RegExp\n%6 = '/v4/spreadsheets/' + spreadsheetId\n%7 = %6 + '/values/.*'\ninstanceinvoke %5.<@%unk/%unk: RegExp.constructor()>(%7)\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.put(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM2(string, nock.Body))>(%5, %AM8$mockAPI)\n%8 = new @%unk/%unk: RegExp\n%9 = '/v4/spreadsheets/' + spreadsheetId\n%10 = %9 + '/values:batchGet.*'\ninstanceinvoke %8.<@%unk/%unk: RegExp.constructor()>(%10)\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.get(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM1(string, nock.Body))>(%8, %AM9$mockAPI)\n%11 = new @%unk/%unk: RegExp\n%12 = '/v4/spreadsheets/' + spreadsheetId\n%13 = %12 + '/values/.*'\ninstanceinvoke %11.<@%unk/%unk: RegExp.constructor()>(%13)\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.get(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM1(string, nock.Body))>(%11, %AM10$mockAPI)\n%14 = new @%unk/%unk: RegExp\n%15 = '/v4/spreadsheets/' + spreadsheetId\n%16 = %15 + '/values/.*:append'\ninstanceinvoke %14.<@%unk/%unk: RegExp.constructor()>(%16)\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.post(string|RegExp, @ts_files/132.ts: GoogleSheetsMock.%AM3(string, nock.Body))>(%14, %AM11$mockAPI)\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private mockAPI() {\n    const spreadsheetId = this.config.spreadsheetId\n    this.get(`/v4/spreadsheets/${spreadsheetId}/`, () =>\n      this.handleGetSpreadsheet()\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate\n    this.post(\n      `/v4/spreadsheets/${spreadsheetId}/:batchUpdate`,\n      (_uri, request) => this.handleBatchUpdate(request as BatchUpdateRequest)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update\n    this.put(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`),\n      (_uri, request) => this.handleValueUpdate(request as ValueRange)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet\n    this.get(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values:batchGet.*`),\n      uri => {\n        const url = new URL(uri, \"https://sheets.googleapis.com/\")\n        const params: BatchGetParams = {\n          ranges: url.searchParams.getAll(\"ranges\"),\n          majorDimension:\n            (url.searchParams.get(\"majorDimension\") as WorksheetDimension) ||\n            \"ROWS\",\n          valueRenderOption:\n            (url.searchParams.get(\"valueRenderOption\") as ValueRenderOption) ||\n            undefined,\n          dateTimeRenderOption:\n            (url.searchParams.get(\n              \"dateTimeRenderOption\"\n            ) as DateTimeRenderOption) || undefined,\n        }\n        return this.handleBatchGet(params as unknown as BatchGetParams)\n      }\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get\n    this.get(new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`), uri => {\n      const range = uri.split(\"/\").pop()\n      if (!range) {\n        throw new Error(\"No range provided\")\n      }\n      return this.getValueRange(decodeURIComponent(range))\n    })\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append\n    this.post(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*:append`),\n      (_uri, request) => {\n        const url = new URL(_uri, \"https://sheets.googleapis.com/\")\n        const params: Record<string, any> = Object.fromEntries(\n          url.searchParams.entries()\n        )\n        if (params.includeValuesInResponse === \"true\") {\n          params.includeValuesInResponse = true\n        } else {\n          params.includeValuesInResponse = false\n        }\n        let range = url.pathname.split(\"/\").pop()\n        if (!range) {\n          throw new Error(\"No range provided\")\n        }\n        if (range.endsWith(\":append\")) {\n          range = range.slice(0, -7)\n        }\n        range = decodeURIComponent(range)\n        return this.handleValueAppend({\n          range,\n          params,\n          body: request as ValueRange,\n        })\n      }\n    )\n  }"
        },
        {
          "type": "function",
          "name": "handleValueAppend",
          "label": "handleValueAppend",
          "start_line": 1,
          "end_line": 363,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "request = parameter0: @ts_files/132.ts: AppendRequest\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = request\nrange = %0.<@ts_files/132.ts: AppendRequest.range>\nparams = %0.<@ts_files/132.ts: AppendRequest.params>\nbody = %0.<@ts_files/132.ts: AppendRequest.body>\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseA1Notation(string)>(range)\nsheetId = %1.<@ts_files/132.ts: %AC$%dflt$%dflt$3.sheetId>\nendRowIndex = %1.<@ts_files/132.ts: %AC$%dflt$%dflt$3.endRowIndex>\nsheet = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(sheetId)\n%2 = !sheet\nif %2 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Error\n%4 = 'Sheet ' + sheetId\n%5 = %4 + ' not found'\ninstanceinvoke %3.<@%unk/%unk: Error.constructor()>(%5)\nthrow %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = body.<@ts_files/132.ts: ValueRange.values>\nnewRows = instanceinvoke %6.<@%unk/%unk: .map()>(%AM12$handleValueAppend)\n%7 = params.<@ts_files/132.ts: AppendParams.insertDataOption>\nif %7 === 'INSERT_ROWS'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "toDelete = newRows.<@%unk/%unk: .length>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = endRowIndex + 1\n%10 = sheet.<@%unk/%unk: .data>\n%11 = %10.<@%unk/%unk: .0>\n%12 = %11.<@%unk/%unk: .rowData>\ninstanceinvoke %12.<@%unk/%unk: .splice()>(%9, toDelete, ...newRows)\n%13 = endRowIndex + 1\n%14 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$26\ninstanceinvoke %14.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$26.constructor()>()\n%15 = sheet.<@%unk/%unk: .data>\n%16 = %15.<@%unk/%unk: .0>\n%17 = %16.<@%unk/%unk: .rowMetadata>\ninstanceinvoke %17.<@%unk/%unk: .splice()>(%13, toDelete, %14)\n%18 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$27\ninstanceinvoke %18.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$27.constructor()>()\nupdatedRange = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.createA1(Required<GridRange>)>(%18)\n%21 = sheet.<@%unk/%unk: .data>\n%22 = %21.<@%unk/%unk: .0>\n%23 = %22.<@%unk/%unk: .rowData>\n%24 = %23.<@%unk/%unk: .length>\n%19 = sheet.<@%unk/%unk: .properties>\n%20 = %19.<@%unk/%unk: .gridProperties>\n%20.<@%unk/%unk: .rowCount> = %24\n%25 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$28\ninstanceinvoke %25.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleValueAppend$28.constructor()>()\nreturn %25",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "toDelete = 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleValueAppend(request: AppendRequest): AppendResponse {\n    const { range, params, body } = request\n    const { sheetId, endRowIndex } = this.parseA1Notation(range)\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${sheetId} not found`)\n    }\n    const newRows = body.values.map(v => this.valuesToRowData(v))\n    const toDelete =\n      params.insertDataOption === \"INSERT_ROWS\" ? newRows.length : 0\n    sheet.data[0].rowData.splice(endRowIndex + 1, toDelete, ...newRows)\n    sheet.data[0].rowMetadata.splice(endRowIndex + 1, toDelete, {\n      hiddenByUser: false,\n      hiddenByFilter: false,\n      pixelSize: 100,\n      developerMetadata: [],\n    })\n    // It's important to give back a correct updated range because the API\n    // library we use makes use of it to assign the correct row IDs to rows.\n    const updatedRange = this.createA1({\n      sheetId,\n      startRowIndex: endRowIndex + 1,\n      startColumnIndex: 0,\n      endRowIndex: endRowIndex + newRows.length,\n      endColumnIndex: 0,\n    })\n    sheet.properties.gridProperties.rowCount = sheet.data[0].rowData.length\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      tableRange: range,\n      updates: {\n        spreadsheetId: this.spreadsheet.spreadsheetId,\n        updatedRange,\n        updatedRows: body.values.length,\n        updatedColumns: body.values[0].length,\n        updatedCells: body.values.length * body.values[0].length,\n        updatedData: body,\n      },\n    }\n  }"
        },
        {
          "type": "function",
          "name": "handleBatchGet",
          "label": "handleBatchGet",
          "start_line": 1,
          "end_line": 403,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "params = parameter0: @ts_files/132.ts: BatchGetParams\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = params\nranges = %0.<@ts_files/132.ts: BatchGetParams.ranges>\nmajorDimension = %0.<@ts_files/132.ts: BatchGetParams.majorDimension>\n%1 = majorDimension !== 'ROWS'\n%2 = majorDimension && %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Error\ninstanceinvoke %3.<@%unk/%unk: Error.constructor()>('Only row-major updates are supported')\nthrow %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchGet$30\ninstanceinvoke %4.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchGet$30.constructor()>()\nreturn %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleBatchGet(params: BatchGetParams): BatchGetResponse {\n    const { ranges, majorDimension } = params\n    if (majorDimension && majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      valueRanges: ranges.map(range => this.getValueRange(range)),\n    }\n  }"
        },
        {
          "type": "function",
          "name": "handleBatchUpdate",
          "label": "handleBatchUpdate",
          "start_line": 1,
          "end_line": 413,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "batchUpdateRequest = parameter0: @ts_files/132.ts: BatchUpdateRequest\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$31\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$31.constructor()>()\nresponse = %0\n%1 = batchUpdateRequest.<@ts_files/132.ts: BatchUpdateRequest.requests>\n%2 = instanceinvoke %1.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke %2.<@%unk/%unk: .next()>()\n%4 = %3.<@ES2015/BuiltinClass: IteratorResult.done>\nif %4 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = %3.<@ES2015/BuiltinClass: IteratorResult.value>\nrequest = <@ts_files/132.ts: %AC$0>%5\n%6 = request.<@ts_files/132.ts: %AC$0.addSheet>\nif %6 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$32\ninstanceinvoke %7.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$32.constructor()>()\n%8 = response.<@ts_files/132.ts: BatchUpdateResponse.replies>\ninstanceinvoke %8.<@%unk/%unk: .push()>(%7)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = request.<@ts_files/132.ts: %AC$0.deleteRange>\nif %9 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%10 = request.<@ts_files/132.ts: %AC$0.deleteRange>\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleDeleteRange(@ts_files/132.ts: DeleteRangeRequest)>(%10)\n%11 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$33\ninstanceinvoke %11.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$33.constructor()>()\n%12 = response.<@ts_files/132.ts: BatchUpdateResponse.replies>\ninstanceinvoke %12.<@%unk/%unk: .push()>(%11)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%13 = request.<@ts_files/132.ts: %AC$0.deleteSheet>\nif %13 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%14 = request.<@ts_files/132.ts: %AC$0.deleteSheet>\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleDeleteSheet(@ts_files/132.ts: DeleteSheetRequest)>(%14)\n%15 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$34\ninstanceinvoke %15.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleBatchUpdate$34.constructor()>()\n%16 = response.<@ts_files/132.ts: BatchUpdateResponse.replies>\ninstanceinvoke %16.<@%unk/%unk: .push()>(%15)",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return response",
                      "start_line": 436,
                      "end_line": 499,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleBatchUpdate(\n    batchUpdateRequest: BatchUpdateRequest\n  ): BatchUpdateResponse {\n    const response: BatchUpdateResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      replies: [],\n      updatedSpreadsheet: this.spreadsheet,\n    }\n    for (const request of batchUpdateRequest.requests) {\n      if (request.addSheet) {\n        response.replies.push({\n          addSheet: this.handleAddSheet(request.addSheet),\n        })\n      }\n      if (request.deleteRange) {\n        this.handleDeleteRange(request.deleteRange)\n        response.replies.push({})\n      }\n      if (request.deleteSheet) {\n        this.handleDeleteSheet(request.deleteSheet)\n        response.replies.push({})\n      }\n    }\n    return response\n  }"
        },
        {
          "type": "function",
          "name": "defaultWorksheetProperties",
          "label": "defaultWorksheetProperties",
          "start_line": 1,
          "end_line": 438,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "opts = parameter0: Partial<WorksheetProperties>\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$defaultWorksheetProperties$35\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$defaultWorksheetProperties$35.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private defaultWorksheetProperties(\n    opts: Partial<WorksheetProperties>\n  ): WorksheetProperties {\n    return {\n      index: this.spreadsheet.sheets.length,\n      hidden: false,\n      rightToLeft: false,\n      tabColor: BLACK,\n      tabColorStyle: { rgbColor: BLACK },\n      sheetType: \"GRID\",\n      title: \"Sheet\",\n      sheetId: this.spreadsheet.sheets.length,\n      gridProperties: {\n        rowCount: 100,\n        columnCount: 26,\n      },\n      dataSourceSheetProperties: {} as DataSourceSheetProperties,\n      ...opts,\n    }\n  }"
        },
        {
          "type": "function",
          "name": "handleAddSheet",
          "label": "handleAddSheet",
          "start_line": 1,
          "end_line": 458,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "request = parameter0: @ts_files/132.ts: AddSheetRequest\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = request.<@ts_files/132.ts: AddSheetRequest.properties>\nproperties = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.defaultWorksheetProperties(Partial<WorksheetProperties>)>(%0)\n%1 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleAddSheet$39\ninstanceinvoke %1.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleAddSheet$39.constructor()>()\n%2 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\n%3 = %2.<@ts_files/132.ts: Spreadsheet.sheets>\ninstanceinvoke %3.<@%unk/%unk: .push()>(%1)\n%4 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleAddSheet$40\ninstanceinvoke %4.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleAddSheet$40.constructor()>()\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleAddSheet(request: AddSheetRequest): AddSheetResponse {\n    const properties = this.defaultWorksheetProperties(request.properties)\n    this.spreadsheet.sheets.push({\n      properties,\n      data: [\n        this.createEmptyGrid(\n          properties.gridProperties.rowCount,\n          properties.gridProperties.columnCount\n        ),\n      ],\n    })\n    return { properties }\n  }"
        },
        {
          "type": "function",
          "name": "handleDeleteRange",
          "label": "handleDeleteRange",
          "start_line": 1,
          "end_line": 471,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "request = parameter0: @ts_files/132.ts: DeleteRangeRequest\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = request\nrange = %0.<@ts_files/132.ts: DeleteRangeRequest.range>\nshiftDimension = %0.<@ts_files/132.ts: DeleteRangeRequest.shiftDimension>\nif shiftDimension !== 'ROWS'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: Error\ninstanceinvoke %1.<@%unk/%unk: Error.constructor()>('Only row-based deletes are supported')\nthrow %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.iterateRange(GridRange, @ts_files/132.ts: GoogleSheetsMock.%AM4(CellData))>(range, %AM13$handleDeleteRange)\nreturn",
                      "start_line": 1,
                      "end_line": 857,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleDeleteRange(request: DeleteRangeRequest) {\n    const { range, shiftDimension } = request\n    if (shiftDimension !== \"ROWS\") {\n      throw new Error(\"Only row-based deletes are supported\")\n    }\n    this.iterateRange(range, cell => {\n      cell.userEnteredValue = this.createValue(null)\n    })\n  }"
        },
        {
          "type": "function",
          "name": "handleDeleteSheet",
          "label": "handleDeleteSheet",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "request = parameter0: @ts_files/132.ts: DeleteSheetRequest\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = request\nsheetId = %0.<@ts_files/132.ts: DeleteSheetRequest.sheetId>\n%1 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\n%2 = %1.<@ts_files/132.ts: Spreadsheet.sheets>\ninstanceinvoke %2.<@%unk/%unk: .splice()>(sheetId, 1)\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleDeleteSheet(request: DeleteSheetRequest) {\n    const { sheetId } = request\n    this.spreadsheet.sheets.splice(sheetId, 1)\n  }"
        },
        {
          "type": "function",
          "name": "handleGetSpreadsheet",
          "label": "handleGetSpreadsheet",
          "start_line": 1,
          "end_line": 484,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleGetSpreadsheet(): Spreadsheet {\n    return this.spreadsheet\n  }"
        },
        {
          "type": "function",
          "name": "handleValueUpdate",
          "label": "handleValueUpdate",
          "start_line": 1,
          "end_line": 499,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "valueRange = parameter0: @ts_files/132.ts: ValueRange\nthis = this: @ts_files/132.ts: GoogleSheetsMock\ninstanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.iterateValueRange(@ts_files/132.ts: ValueRange, @ts_files/132.ts: GoogleSheetsMock.%AM5(CellData, Value))>(valueRange, %AM14$handleValueUpdate)\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$handleValueUpdate$41\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$handleValueUpdate$41.constructor()>()\nresponse = %0\nreturn response",
              "start_line": 1,
              "end_line": 499,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private handleValueUpdate(valueRange: ValueRange): UpdateValuesResponse {\n    this.iterateValueRange(valueRange, (cell, value) => {\n      cell.userEnteredValue = this.createValue(value)\n    })\n    const response: UpdateValuesResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      updatedRange: valueRange.range,\n      updatedRows: valueRange.values.length,\n      updatedColumns: valueRange.values[0].length,\n      updatedCells: valueRange.values.length * valueRange.values[0].length,\n      updatedData: valueRange,\n    }\n    return response\n  }"
        },
        {
          "type": "function",
          "name": "%AM4",
          "label": "%AM4",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(cell: CellData) => void"
        },
        {
          "type": "function",
          "name": "iterateRange",
          "label": "iterateRange",
          "start_line": 1,
          "end_line": 558,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: GridRange\ncb = parameter1: @ts_files/132.ts: GoogleSheetsMock.%AM4(CellData)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.ensureGridRange(GridRange)>(range)\nsheetId = %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.sheetId>\nstartRowIndex = %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.startRowIndex>\nendRowIndex = %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.endRowIndex>\nstartColumnIndex = %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.startColumnIndex>\nendColumnIndex = %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.endColumnIndex>\nrow = startRowIndex",
              "start_line": 1,
              "end_line": 558,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if row <= endRowIndex",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "col = startColumnIndex",
                      "start_line": 510,
                      "end_line": 560,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if col <= endColumnIndex",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "cell = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getCellNumericIndexes(@ts_files/132.ts: Sheet|number, number, number)>(sheetId, row, col)\n%1 = !cell\nif %1 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%2 = new @%unk/%unk: Error\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>('Cell not found')\nthrow %2",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "ptrinvoke <@%unk/%unk: .cb()>(cell)\ncol = col + 1",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "row = row + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 191,
                      "end_line": 857,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private iterateRange(range: GridRange, cb: (cell: CellData) => void) {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.ensureGridRange(range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        cb(cell)\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM5",
          "label": "%AM5",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(cell: CellData, value: Value) => void"
        },
        {
          "type": "function",
          "name": "iterateValueRange",
          "label": "iterateValueRange",
          "start_line": 1,
          "end_line": 519,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "valueRange = parameter0: @ts_files/132.ts: ValueRange\ncb = parameter1: @ts_files/132.ts: GoogleSheetsMock.%AM5(CellData, Value)\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = valueRange.<@ts_files/132.ts: ValueRange.majorDimension>\nif %0 !== 'ROWS'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: Error\ninstanceinvoke %1.<@%unk/%unk: Error.constructor()>('Only row-major updates are supported')\nthrow %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = valueRange.<@ts_files/132.ts: ValueRange.range>\n%2 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseA1Notation(string)>(%3)\nsheetId = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.sheetId>\nstartColumnIndex = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.startColumnIndex>\nstartRowIndex = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.startRowIndex>\nendColumnIndex = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.endColumnIndex>\nendRowIndex = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.endRowIndex>\nrow = startRowIndex",
                      "start_line": 1,
                      "end_line": 558,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if row <= endRowIndex",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "col = startColumnIndex",
                              "start_line": 510,
                              "end_line": 560,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if col <= endColumnIndex",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "cell = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getCellNumericIndexes(@ts_files/132.ts: Sheet|number, number, number)>(sheetId, row, col)\n%4 = !cell\nif %4 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%5 = new @%unk/%unk: Error\ninstanceinvoke %5.<@%unk/%unk: Error.constructor()>('Cell not found')\nthrow %5",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%6 = valueRange.<@ts_files/132.ts: ValueRange.values>\n%7 = row - startRowIndex\n%8 = %6[%7]\n%9 = col - startColumnIndex\nvalue = %8.<@%unk/%unk: .%9>\nptrinvoke <@%unk/%unk: .cb()>(cell, value)\ncol = col + 1",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "row = row + 1",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 191,
                              "end_line": 857,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private iterateValueRange(\n    valueRange: ValueRange,\n    cb: (cell: CellData, value: Value) => void\n  ) {\n    if (valueRange.majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = this.parseA1Notation(valueRange.range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        const value =\n          valueRange.values[row - startRowIndex][col - startColumnIndex]\n        cb(cell, value)\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getValueRange",
          "label": "getValueRange",
          "start_line": 1,
          "end_line": 558,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseA1Notation(string)>(range)\nsheetId = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.sheetId>\nstartRowIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.startRowIndex>\nendRowIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.endRowIndex>\nstartColumnIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.startColumnIndex>\nendColumnIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.endColumnIndex>\n%1 = new @ts_files/132.ts: %AC$GoogleSheetsMock$getValueRange$42\ninstanceinvoke %1.<@ts_files/132.ts: %AC$GoogleSheetsMock$getValueRange$42.constructor()>()\nvalueRange = %1\nrow = startRowIndex",
              "start_line": 1,
              "end_line": 558,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if row <= endRowIndex",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = newarray (any)[0]\nvalues = %2\ncol = startColumnIndex",
                      "start_line": 1,
                      "end_line": 560,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if col <= endColumnIndex",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "cell = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getCellNumericIndexes(@ts_files/132.ts: Sheet|number, number, number)>(sheetId, row, col)\n%3 = !cell\nif %3 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%4 = new @%unk/%unk: Error\ninstanceinvoke %4.<@%unk/%unk: Error.constructor()>('Cell not found')\nthrow %4",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%5 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.cellValue(CellData)>(cell)\ninstanceinvoke values.<@%unk/%unk: .push()>(%5)\ncol = col + 1",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%6 = valueRange.<@ts_files/132.ts: ValueRange.values>\ninstanceinvoke %6.<@%unk/%unk: .push()>(values)\nrow = row + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.trimValueRange(@ts_files/132.ts: ValueRange)>(valueRange)\nreturn %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getValueRange(range: string): ValueRange {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.parseA1Notation(range)\n    const valueRange: ValueRange = {\n      range,\n      majorDimension: \"ROWS\",\n      values: [],\n    }\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      const values: Value[] = []\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        values.push(this.cellValue(cell))\n      }\n      valueRange.values.push(values)\n    }\n    return this.trimValueRange(valueRange)\n  }"
        },
        {
          "type": "function",
          "name": "trimValueRange",
          "label": "trimValueRange",
          "start_line": 1,
          "end_line": 580,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "valueRange = parameter0: @ts_files/132.ts: ValueRange\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = valueRange.<@ts_files/132.ts: ValueRange.values>\n%1 = instanceinvoke %0.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke %1.<@%unk/%unk: .next()>()\n%3 = %2.<@ES2015/BuiltinClass: IteratorResult.done>\nif %3 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = %2.<@ES2015/BuiltinClass: IteratorResult.value>\nrow = <Value[]>%4\n%5 = instanceinvoke row.<@%unk/%unk: .every()>(%AM15$trimValueRange)\nif %5 != 0\n%7 = row.<@%unk/%unk: .length>\ni = %7 - 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = row.<@%unk/%unk: .length>\ninstanceinvoke row.<@%unk/%unk: .splice()>(0, %6)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if i >= 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "cell = row[i]\nif cell == null",
                              "start_line": 587,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke row.<@%unk/%unk: .pop()>()\ni = i - 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "i = 0",
                                  "start_line": 594,
                                  "end_line": 594,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%8 = row.<@%unk/%unk: .length>\nif i < %8",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "cell = row[i]\nif cell == null",
                                          "start_line": 587,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "row['i'] = ''\ni = i + 1",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = valueRange.<@ts_files/132.ts: ValueRange.values>\n%10 = %9.<@%unk/%unk: .length>\ni = %10 - 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if i >= 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%11 = valueRange.<@ts_files/132.ts: ValueRange.values>\nrow = %11[i]\n%12 = row.<@%unk/%unk: .length>\nif %12 === 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%13 = valueRange.<@ts_files/132.ts: ValueRange.values>\ninstanceinvoke %13.<@%unk/%unk: .pop()>()\ni = i - 1",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return valueRange",
                                  "start_line": 611,
                                  "end_line": 611,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private trimValueRange(valueRange: ValueRange): ValueRange {\n    for (const row of valueRange.values) {\n      if (row.every(v => v == null)) {\n        row.splice(0, row.length)\n        continue\n      }\n      for (let i = row.length - 1; i >= 0; i--) {\n        const cell = row[i]\n        if (cell == null) {\n          row.pop()\n        } else {\n          break\n        }\n      }\n      for (let i = 0; i < row.length; i++) {\n        const cell = row[i]\n        if (cell == null) {\n          row[i] = \"\"\n        } else {\n          break\n        }\n      }\n    }\n    for (let i = valueRange.values.length - 1; i >= 0; i--) {\n      const row = valueRange.values[i]\n      if (row.length === 0) {\n        valueRange.values.pop()\n      } else {\n        break\n      }\n    }\n    return valueRange\n  }"
        },
        {
          "type": "function",
          "name": "valuesToRowData",
          "label": "valuesToRowData",
          "start_line": 1,
          "end_line": 613,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "values = parameter0: Value[]\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$valuesToRowData$43\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$valuesToRowData$43.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private valuesToRowData(values: Value[]): RowData {\n    return {\n      values: values.map(v => {\n        return this.createCellData(v)\n      }),\n    }\n  }"
        },
        {
          "type": "function",
          "name": "unwrapValue",
          "label": "unwrapValue",
          "start_line": 1,
          "end_line": 620,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "from = parameter0: ExtendedValue\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nif undefined != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = from.<@%unk/%unk: .stringValue>\nreturn %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if undefined != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = from.<@%unk/%unk: .numberValue>\nreturn %1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if undefined != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%2 = from.<@%unk/%unk: .boolValue>\nreturn %2",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if undefined != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%3 = from.<@%unk/%unk: .formulaValue>\nreturn %3",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return null",
                              "start_line": 630,
                              "end_line": 630,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private unwrapValue(from: ExtendedValue): Value {\n    if (\"stringValue\" in from) {\n      return from.stringValue\n    } else if (\"numberValue\" in from) {\n      return from.numberValue\n    } else if (\"boolValue\" in from) {\n      return from.boolValue\n    } else if (\"formulaValue\" in from) {\n      return from.formulaValue\n    } else {\n      return null\n    }\n  }"
        },
        {
          "type": "function",
          "name": "cellValue",
          "label": "cellValue",
          "start_line": 1,
          "end_line": 633,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "from = parameter0: CellData\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = from.<@%unk/%unk: .userEnteredValue>\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.unwrapValue(ExtendedValue)>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cellValue(from: CellData): Value {\n    return this.unwrapValue(from.userEnteredValue)\n  }"
        },
        {
          "type": "function",
          "name": "createValue",
          "label": "createValue",
          "start_line": 1,
          "end_line": 636,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "from = parameter0: Value\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nif from == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createValue$44\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$createValue$44.constructor()>()\n%1 = <@ts_files/132.ts: %AC$GoogleSheetsMock$createValue$44>%0\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if typeof from === 'string'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createValue$45\ninstanceinvoke %2.<@ts_files/132.ts: %AC$GoogleSheetsMock$createValue$45.constructor()>()\nreturn %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if typeof from === 'number'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createValue$46\ninstanceinvoke %3.<@ts_files/132.ts: %AC$GoogleSheetsMock$createValue$46.constructor()>()\nreturn %3",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if typeof from === 'boolean'",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%4 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createValue$47\ninstanceinvoke %4.<@ts_files/132.ts: %AC$GoogleSheetsMock$createValue$47.constructor()>()\nreturn %4",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = new @%unk/%unk: Error\ninstanceinvoke %5.<@%unk/%unk: Error.constructor()>('Unsupported value type')\nthrow %5\nreturn",
                              "start_line": 1,
                              "end_line": 857,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private createValue(from: Value): ExtendedValue {\n    if (from == null) {\n      return {} as ExtendedValue\n    } else if (typeof from === \"string\") {\n      return {\n        stringValue: from,\n      }\n    } else if (typeof from === \"number\") {\n      return {\n        numberValue: from,\n      }\n    } else if (typeof from === \"boolean\") {\n      return {\n        boolValue: from,\n      }\n    } else {\n      throw new Error(\"Unsupported value type\")\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createCellData",
          "label": "createCellData",
          "start_line": 1,
          "end_line": 655,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: Value\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createCellData$48\ninstanceinvoke %0.<@ts_files/132.ts: %AC$GoogleSheetsMock$createCellData$48.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private createCellData(value: Value): CellData {\n    return {\n      userEnteredValue: this.createValue(value),\n      effectiveValue: this.createValue(value),\n      formattedValue: value?.toString() || \"\",\n      userEnteredFormat: DEFAULT_CELL_FORMAT,\n      effectiveFormat: DEFAULT_CELL_FORMAT,\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createEmptyGrid",
          "label": "createEmptyGrid",
          "start_line": 1,
          "end_line": 674,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "numRows = parameter0: number\nnumCols = parameter1: number\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = newarray (any)[0]\nrowData = %0\nrow = 0",
              "start_line": 1,
              "end_line": 674,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if row < numRows",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = newarray (any)[0]\ncells = %1\ncol = 0",
                      "start_line": 1,
                      "end_line": 683,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if col < numCols",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%2 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.createCellData(Value)>(null)\ninstanceinvoke cells.<@%unk/%unk: .push()>(%2)\ncol = col + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%3 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$49\ninstanceinvoke %3.<@ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$49.constructor()>()\ninstanceinvoke rowData.<@%unk/%unk: .push()>(%3)\nrow = row + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = newarray (any)[0]\nrowMetadata = %4\nrow = 0",
                      "start_line": 1,
                      "end_line": 674,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if row < numRows",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$50\ninstanceinvoke %5.<@ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$50.constructor()>()\ninstanceinvoke rowMetadata.<@%unk/%unk: .push()>(%5)\nrow = row + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%6 = newarray (any)[0]\ncolumnMetadata = %6\ncol = 0",
                              "start_line": 1,
                              "end_line": 683,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if col < numCols",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%7 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$51\ninstanceinvoke %7.<@ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$51.constructor()>()\ninstanceinvoke columnMetadata.<@%unk/%unk: .push()>(%7)\ncol = col + 1",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%8 = new @ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$52\ninstanceinvoke %8.<@ts_files/132.ts: %AC$GoogleSheetsMock$createEmptyGrid$52.constructor()>()\nreturn %8",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private createEmptyGrid(numRows: number, numCols: number): GridData {\n    const rowData: RowData[] = []\n    for (let row = 0; row < numRows; row++) {\n      const cells: CellData[] = []\n      for (let col = 0; col < numCols; col++) {\n        cells.push(this.createCellData(null))\n      }\n      rowData.push({ values: cells })\n    }\n    const rowMetadata: WorksheetDimensionProperties[] = []\n    for (let row = 0; row < numRows; row++) {\n      rowMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    const columnMetadata: WorksheetDimensionProperties[] = []\n    for (let col = 0; col < numCols; col++) {\n      columnMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    return {\n      startRow: 0,\n      startColumn: 0,\n      rowData,\n      rowMetadata,\n      columnMetadata,\n    }\n  }"
        },
        {
          "type": "function",
          "name": "cellData",
          "label": "cellData",
          "start_line": 1,
          "end_line": 699,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseA1Notation(string)>(cell)\nsheetId = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.sheetId>\nstartColumnIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.startColumnIndex>\nstartRowIndex = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.startRowIndex>\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getCellNumericIndexes(@ts_files/132.ts: Sheet|number, number, number)>(sheetId, startRowIndex, startColumnIndex)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cellData(cell: string): CellData | undefined {\n    const { sheetId, startColumnIndex, startRowIndex } =\n      this.parseA1Notation(cell)\n    return this.getCellNumericIndexes(sheetId, startRowIndex, startColumnIndex)\n  }"
        },
        {
          "type": "function",
          "name": "getCellNumericIndexes",
          "label": "getCellNumericIndexes",
          "start_line": 1,
          "end_line": 704,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "sheet = parameter0: @ts_files/132.ts: Sheet|number\nrow = parameter1: number\ncolumn = parameter2: number\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nif typeof sheet === 'number'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "foundSheet = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(sheet)\n%0 = !foundSheet\nif %0 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return undefined",
                      "start_line": 214,
                      "end_line": 723,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "sheet = foundSheet",
                      "start_line": 714,
                      "end_line": 768,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%1 = sheet.<@%unk/%unk: .data>\ndata = %1.<@ts_files/132.ts: %AC$%dflt$%dflt$3.0>\n%2 = data.<@%unk/%unk: .rowData>\nrowData = %2.<@ts_files/132.ts: %AC$%dflt$%dflt$4.row>\n%3 = !rowData\nif %3 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return undefined",
                              "start_line": 214,
                              "end_line": 723,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%4 = rowData.<@%unk/%unk: .values>\ncell = %4.<@ts_files/132.ts: %AC$%dflt$%dflt$7.column>\n%5 = !cell\nif %5 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return undefined",
                                  "start_line": 214,
                                  "end_line": 723,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return cell",
                                  "start_line": 725,
                                  "end_line": 725,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getCellNumericIndexes(\n    sheet: Sheet | number,\n    row: number,\n    column: number\n  ): CellData | undefined {\n    if (typeof sheet === \"number\") {\n      const foundSheet = this.getSheetById(sheet)\n      if (!foundSheet) {\n        return undefined\n      }\n      sheet = foundSheet\n    }\n    const data = sheet.data[0]\n    const rowData = data.rowData[row]\n    if (!rowData) {\n      return undefined\n    }\n    const cell = rowData.values[column]\n    if (!cell) {\n      return undefined\n    }\n    return cell\n  }"
        },
        {
          "type": "function",
          "name": "parseA1Notation",
          "label": "parseA1Notation",
          "start_line": 1,
          "end_line": 753,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nsheet = undefined\nrest = undefined\n%0 = instanceinvoke range.<@%unk/%unk: .includes()>('!')\n%1 = !%0\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\n%3 = %2.<@ts_files/132.ts: Spreadsheet.sheets>\nsheet = %3[0]\nrest = range",
                  "start_line": 1,
                  "end_line": 769,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = instanceinvoke rest.<@%unk/%unk: .split()>(':')\ntopLeft = %14[0]\nbottomRight = %14[1]\nif topLeft != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "parsedTopLeft = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseCell(string)>(topLeft)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if bottomRight != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "parsedBottomRight = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.parseCell(string)>(bottomRight)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%17 = !parsedTopLeft\n%18 = !parsedBottomRight\n%19 = %17 && %18\nif %19 != false",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%20 = new @%unk/%unk: Error\ninstanceinvoke %20.<@%unk/%unk: Error.constructor()>('No range provided')\nthrow %20",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%21 = !parsedTopLeft\nif %21 != 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%22 = new @%unk/%unk: Error\ninstanceinvoke %22.<@%unk/%unk: Error.constructor()>('No top left cell provided')\nthrow %22",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%23 = !parsedBottomRight\nif %23 != 0",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "parsedBottomRight = parsedTopLeft",
                                                          "start_line": 783,
                                                          "end_line": 783,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%24 = new @ts_files/132.ts: %AC$GoogleSheetsMock$parseA1Notation$53\ninstanceinvoke %24.<@ts_files/132.ts: %AC$GoogleSheetsMock$parseA1Notation$53.constructor()>()\n%25 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.ensureGridRange(GridRange)>(%24)\nreturn %25",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "parsedBottomRight = undefined",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "parsedTopLeft = undefined",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke range.<@%unk/%unk: .split()>('!')\nsheetName = %4.<@ts_files/132.ts: %AC$%dflt$%dflt$7.0>\n%5 = instanceinvoke sheetName.<@%unk/%unk: .startsWith()>(''')\n%6 = instanceinvoke sheetName.<@%unk/%unk: .endsWith()>(''')\n%7 = %5 && %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = -1\nsheetName = instanceinvoke sheetName.<@%unk/%unk: .slice()>(1, %8)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "foundSheet = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetByName(string)>(sheetName)\n%9 = !foundSheet\nif %9 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%10 = new @%unk/%unk: Error\n%11 = 'Sheet ' + sheetName\n%12 = %11 + ' not found'\ninstanceinvoke %10.<@%unk/%unk: Error.constructor()>(%12)\nthrow %10",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "sheet = foundSheet\n%13 = instanceinvoke range.<@%unk/%unk: .split()>('!')\nrest = %13.<@%unk/%unk: .1>",
                                  "start_line": 714,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private parseA1Notation(range: string): Required<GridRange> {\n    let sheet: Sheet\n    let rest: string\n    if (!range.includes(\"!\")) {\n      sheet = this.spreadsheet.sheets[0]\n      rest = range\n    } else {\n      let sheetName = range.split(\"!\")[0]\n      if (sheetName.startsWith(\"'\") && sheetName.endsWith(\"'\")) {\n        sheetName = sheetName.slice(1, -1)\n      }\n      const foundSheet = this.getSheetByName(sheetName)\n      if (!foundSheet) {\n        throw new Error(`Sheet ${sheetName} not found`)\n      }\n      sheet = foundSheet\n      rest = range.split(\"!\")[1]\n    }\n    const [topLeft, bottomRight] = rest.split(\":\")\n    const parsedTopLeft = topLeft ? this.parseCell(topLeft) : undefined\n    let parsedBottomRight = bottomRight\n      ? this.parseCell(bottomRight)\n      : undefined\n    if (!parsedTopLeft && !parsedBottomRight) {\n      throw new Error(\"No range provided\")\n    }\n    if (!parsedTopLeft) {\n      throw new Error(\"No top left cell provided\")\n    }\n    if (!parsedBottomRight) {\n      parsedBottomRight = parsedTopLeft\n    }\n    return this.ensureGridRange({\n      sheetId: sheet.properties.sheetId,\n      startRowIndex: parsedTopLeft.row,\n      endRowIndex: parsedBottomRight.row,\n      startColumnIndex: parsedTopLeft.column,\n      endColumnIndex: parsedBottomRight.column,\n    })\n  }"
        },
        {
          "type": "function",
          "name": "ensureGridRange",
          "label": "ensureGridRange",
          "start_line": 1,
          "end_line": 793,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: GridRange\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = range.<@%unk/%unk: .sheetId>\nsheet = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(%0)\n%1 = !sheet\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Error\n%3 = range.<@%unk/%unk: .sheetId>\n%4 = 'Sheet ' + %3\n%5 = %4 + ' not found'\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>(%5)\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = new @ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54\ninstanceinvoke %6.<@ts_files/132.ts: %AC$GoogleSheetsMock$ensureGridRange$54.constructor()>()\nreturn %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private ensureGridRange(range: GridRange): Required<GridRange> {\n    const sheet = this.getSheetById(range.sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    return {\n      sheetId: range.sheetId,\n      startRowIndex: range.startRowIndex ?? 0,\n      endRowIndex:\n        range.endRowIndex ?? sheet.properties.gridProperties.rowCount - 1,\n      startColumnIndex: range.startColumnIndex ?? 0,\n      endColumnIndex:\n        range.endColumnIndex ?? sheet.properties.gridProperties.columnCount - 1,\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createA1",
          "label": "createA1",
          "start_line": 1,
          "end_line": 808,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: Required<GridRange>\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = range\nsheetId = %0.<@%unk/%unk: .sheetId>\nstartColumnIndex = %0.<@%unk/%unk: .startColumnIndex>\nstartRowIndex = %0.<@%unk/%unk: .startRowIndex>\nendColumnIndex = %0.<@%unk/%unk: .endColumnIndex>\nendRowIndex = %0.<@%unk/%unk: .endRowIndex>\nsheet = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getSheetById(number)>(sheetId)\n%1 = !sheet\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Error\n%3 = range.<@%unk/%unk: .sheetId>\n%4 = 'Sheet ' + %3\n%5 = %4 + ' not found'\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>(%5)\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = sheet.<@%unk/%unk: .properties>\ntitle = %6.<@%unk/%unk: .title>\n%7 = instanceinvoke title.<@%unk/%unk: .includes()>(' ')\nif %7 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = ''' + title\n%9 = %8 + '''\ntitle = %9",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "topLeftLetter = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.numberToLetter(number)>(startColumnIndex)\nbottomRightLetter = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.numberToLetter(number)>(endColumnIndex)\ntopLeftRow = startRowIndex + 1\nbottomRightRow = endRowIndex + 1\n%10 = title + '!'\n%11 = %10 + topLeftLetter\n%12 = %11 + topLeftRow\n%13 = %12 + ':'\n%14 = %13 + bottomRightLetter\n%15 = %14 + bottomRightRow\nreturn %15",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private createA1(range: Required<GridRange>) {\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = range\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    let title = sheet.properties.title\n    if (title.includes(\" \")) {\n      title = `'${title}'`\n    }\n    const topLeftLetter = this.numberToLetter(startColumnIndex)\n    const bottomRightLetter = this.numberToLetter(endColumnIndex)\n    const topLeftRow = startRowIndex + 1\n    const bottomRightRow = endRowIndex + 1\n    return `${title}!${topLeftLetter}${topLeftRow}:${bottomRightLetter}${bottomRightRow}`\n  }"
        },
        {
          "type": "function",
          "name": "parseCell",
          "label": "parseCell",
          "start_line": 1,
          "end_line": 830,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\nfirstChar = instanceinvoke cell.<@%unk/%unk: .slice()>(0, 1)\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.isInteger(string)>(firstChar)\nif %0 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$55\ninstanceinvoke %1.<@ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$55.constructor()>()\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "column = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.letterToNumber(string)>(firstChar)\n%2 = cell.<@%unk/%unk: .length>\nif %2 === 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = new @ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$56\ninstanceinvoke %3.<@ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$56.constructor()>()\nreturn %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "number = instanceinvoke cell.<@%unk/%unk: .slice()>(1)\n%4 = new @ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$57\ninstanceinvoke %4.<@ts_files/132.ts: %AC$GoogleSheetsMock$parseCell$57.constructor()>()\nreturn %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private parseCell(cell: string): Partial<Range> {\n    const firstChar = cell.slice(0, 1)\n    if (this.isInteger(firstChar)) {\n      return { row: parseInt(cell) - 1 }\n    }\n    const column = this.letterToNumber(firstChar)\n    if (cell.length === 1) {\n      return { column }\n    }\n    const number = cell.slice(1)\n    return { row: parseInt(number) - 1, column }\n  }"
        },
        {
          "type": "function",
          "name": "isInteger",
          "label": "isInteger",
          "start_line": 1,
          "end_line": 842,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = staticinvoke <@%unk/%unk: .parseInt()>(value)\n%1 = staticinvoke <@%unk/%unk: .isNaN()>(%0)\n%2 = !%1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private isInteger(value: string): boolean {\n    return !isNaN(parseInt(value))\n  }"
        },
        {
          "type": "function",
          "name": "letterToNumber",
          "label": "letterToNumber",
          "start_line": 1,
          "end_line": 845,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "letter = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke letter.<@%unk/%unk: .charCodeAt()>(0)\n%1 = %0 - 65\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private letterToNumber(letter: string): number {\n    return letter.charCodeAt(0) - 65\n  }"
        },
        {
          "type": "function",
          "name": "numberToLetter",
          "label": "numberToLetter",
          "start_line": 1,
          "end_line": 848,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "number = parameter0: number\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = number + 65\n%1 = instanceinvoke String.<@%unk/%unk: .fromCharCode()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private numberToLetter(number: number): string {\n    return String.fromCharCode(number + 65)\n  }"
        },
        {
          "type": "function",
          "name": "getSheetByName",
          "label": "getSheetByName",
          "start_line": 1,
          "end_line": 851,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\n%1 = %0.<@ts_files/132.ts: Spreadsheet.sheets>\n%2 = instanceinvoke %1.<@%unk/%unk: .find()>(%AM16$getSheetByName)\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getSheetByName(name: string): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.title === name\n    )\n  }"
        },
        {
          "type": "function",
          "name": "getSheetById",
          "label": "getSheetById",
          "start_line": 1,
          "end_line": 856,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: number\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = this.<@ts_files/132.ts: GoogleSheetsMock.spreadsheet>\n%1 = %0.<@ts_files/132.ts: Spreadsheet.sheets>\n%2 = instanceinvoke %1.<@%unk/%unk: .find()>(%AM17$getSheetById)\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getSheetById(id: number): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.sheetId === id\n    )\n  }"
        },
        {
          "type": "function",
          "name": "%AM6$mockAPI",
          "label": "%AM6$mockAPI",
          "start_line": 1,
          "end_line": 292,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleGetSpreadsheet()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() =>\n      this.handleGetSpreadsheet()"
        },
        {
          "type": "function",
          "name": "%AM7$mockAPI",
          "label": "%AM7$mockAPI",
          "start_line": 1,
          "end_line": 298,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "_uri = parameter0: string\nrequest = parameter1: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = <@ts_files/132.ts: BatchUpdateRequest>request\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleBatchUpdate(@ts_files/132.ts: BatchUpdateRequest)>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(_uri, request) => this.handleBatchUpdate(request as BatchUpdateRequest)"
        },
        {
          "type": "function",
          "name": "%AM8$mockAPI",
          "label": "%AM8$mockAPI",
          "start_line": 1,
          "end_line": 303,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "_uri = parameter0: string\nrequest = parameter1: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = <@ts_files/132.ts: ValueRange>request\n%1 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleValueUpdate(@ts_files/132.ts: ValueRange)>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(_uri, request) => this.handleValueUpdate(request as ValueRange)"
        },
        {
          "type": "function",
          "name": "%AM9$mockAPI",
          "label": "%AM9$mockAPI",
          "start_line": 1,
          "end_line": 308,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @%unk/%unk: URL\ninstanceinvoke %0.<@%unk/%unk: URL.constructor()>(uri, 'https://sheets.googleapis.com/')\nurl = %0\n%1 = new @ts_files/132.ts: %AC$GoogleSheetsMock$%AM9$mockAPI$24\ninstanceinvoke %1.<@ts_files/132.ts: %AC$GoogleSheetsMock$%AM9$mockAPI$24.constructor()>()\nparams = %1\n%2 = <@ts_files/132.ts: BatchGetParams>params\n%3 = <@ts_files/132.ts: BatchGetParams>%2\n%4 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleBatchGet(@ts_files/132.ts: BatchGetParams)>(%3)\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "uri => {\n        const url = new URL(uri, \"https://sheets.googleapis.com/\")\n        const params: BatchGetParams = {\n          ranges: url.searchParams.getAll(\"ranges\"),\n          majorDimension:\n            (url.searchParams.get(\"majorDimension\") as WorksheetDimension) ||\n            \"ROWS\",\n          valueRenderOption:\n            (url.searchParams.get(\"valueRenderOption\") as ValueRenderOption) ||\n            undefined,\n          dateTimeRenderOption:\n            (url.searchParams.get(\n              \"dateTimeRenderOption\"\n            ) as DateTimeRenderOption) || undefined,\n        }\n        return this.handleBatchGet(params as unknown as BatchGetParams)\n      }"
        },
        {
          "type": "function",
          "name": "%AM10$mockAPI",
          "label": "%AM10$mockAPI",
          "start_line": 1,
          "end_line": 327,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke uri.<@%unk/%unk: .split()>('/')\nrange = instanceinvoke %0.<@%unk/%unk: .pop()>()\n%1 = !range\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Error\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>('No range provided')\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = staticinvoke <@%unk/%unk: .decodeURIComponent()>(range)\n%4 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.getValueRange(string)>(%3)\nreturn %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "uri => {\n      const range = uri.split(\"/\").pop()\n      if (!range) {\n        throw new Error(\"No range provided\")\n      }\n      return this.getValueRange(decodeURIComponent(range))\n    }"
        },
        {
          "type": "function",
          "name": "%AM11$mockAPI",
          "label": "%AM11$mockAPI",
          "start_line": 1,
          "end_line": 337,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "_uri = parameter0: string\nrequest = parameter1: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @%unk/%unk: URL\ninstanceinvoke %0.<@%unk/%unk: URL.constructor()>(_uri, 'https://sheets.googleapis.com/')\nurl = %0\n%1 = url.<@%unk/%unk: URL.searchParams>\n%2 = instanceinvoke %1.<@%unk/%unk: .entries()>()\nparams = instanceinvoke Object.<@%unk/%unk: .fromEntries()>(%2)\n%3 = params.<@%unk/%unk: .includeValuesInResponse>\nif %3 === 'true'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "params.<@%unk/%unk: .includeValuesInResponse> = true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = url.<@%unk/%unk: URL.pathname>\n%5 = instanceinvoke %4.<@%unk/%unk: .split()>('/')\nrange = instanceinvoke %5.<@%unk/%unk: .pop()>()\n%6 = !range\nif %6 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = new @%unk/%unk: Error\ninstanceinvoke %7.<@%unk/%unk: Error.constructor()>('No range provided')\nthrow %7",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%8 = instanceinvoke range.<@%unk/%unk: .endsWith()>(':append')\nif %8 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%9 = -7\nrange = instanceinvoke range.<@%unk/%unk: .slice()>(0, %9)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "range = staticinvoke <@%unk/%unk: .decodeURIComponent()>(range)\n%10 = new @ts_files/132.ts: %AC$GoogleSheetsMock$%AM11$mockAPI$25\ninstanceinvoke %10.<@ts_files/132.ts: %AC$GoogleSheetsMock$%AM11$mockAPI$25.constructor()>()\n%11 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.handleValueAppend(@ts_files/132.ts: AppendRequest)>(%10)\nreturn %11",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "params.<@%unk/%unk: .includeValuesInResponse> = false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(_uri, request) => {\n        const url = new URL(_uri, \"https://sheets.googleapis.com/\")\n        const params: Record<string, any> = Object.fromEntries(\n          url.searchParams.entries()\n        )\n        if (params.includeValuesInResponse === \"true\") {\n          params.includeValuesInResponse = true\n        } else {\n          params.includeValuesInResponse = false\n        }\n        let range = url.pathname.split(\"/\").pop()\n        if (!range) {\n          throw new Error(\"No range provided\")\n        }\n        if (range.endsWith(\":append\")) {\n          range = range.slice(0, -7)\n        }\n        range = decodeURIComponent(range)\n        return this.handleValueAppend({\n          range,\n          params,\n          body: request as ValueRange,\n        })\n      }"
        },
        {
          "type": "function",
          "name": "%AM12$handleValueAppend",
          "label": "%AM12$handleValueAppend",
          "start_line": 1,
          "end_line": 370,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "v = parameter0: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.valuesToRowData(Value[])>(v)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "v => this.valuesToRowData(v)"
        },
        {
          "type": "function",
          "name": "%AM13$handleDeleteRange",
          "label": "%AM13$handleDeleteRange",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.createValue(Value)>(null)\ncell.<@%unk/%unk: .userEnteredValue> = %0\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "cell => {\n      cell.userEnteredValue = this.createValue(null)\n    }"
        },
        {
          "type": "function",
          "name": "%AM14$handleValueUpdate",
          "label": "%AM14$handleValueUpdate",
          "start_line": 1,
          "end_line": 857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "cell = parameter0: unknown\nvalue = parameter1: Value\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@ts_files/132.ts: GoogleSheetsMock.createValue(Value)>(value)\ncell.<@%unk/%unk: .userEnteredValue> = %0\nreturn",
              "start_line": 1,
              "end_line": 857,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(cell, value) => {\n      cell.userEnteredValue = this.createValue(value)\n    }"
        },
        {
          "type": "function",
          "name": "%AM15$trimValueRange",
          "label": "%AM15$trimValueRange",
          "start_line": 1,
          "end_line": 582,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "v = parameter0: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = v == null\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "v => v == null"
        },
        {
          "type": "function",
          "name": "%AM16$getSheetByName",
          "label": "%AM16$getSheetByName",
          "start_line": 1,
          "end_line": 853,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [name]\nsheet = parameter1: unknown\nname = %closures0.name\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = sheet.<@%unk/%unk: .properties>\n%1 = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.title>\n%2 = %1 === name\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "sheet => sheet.properties.title === name"
        },
        {
          "type": "function",
          "name": "%AM17$getSheetById",
          "label": "%AM17$getSheetById",
          "start_line": 1,
          "end_line": 858,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [id]\nsheet = parameter1: unknown\nid = %closures0.id\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = sheet.<@%unk/%unk: .properties>\n%1 = %0.<@ts_files/132.ts: %AC$%dflt$%dflt$2.sheetId>\n%2 = %1 === id\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "sheet => sheet.properties.sheetId === id"
        },
        {
          "type": "function",
          "name": "forDatasource",
          "label": "forDatasource",
          "start_line": 1,
          "end_line": 190,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "datasource = parameter0: Datasource\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = new @ts_files/132.ts: GoogleSheetsMock\n%1 = datasource.<@%unk/%unk: .config>\n%2 = <GoogleSheetsConfig>%1\ninstanceinvoke %0.<@ts_files/132.ts: GoogleSheetsMock.constructor(GoogleSheetsConfig)>(%2)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "static forDatasource(datasource: Datasource): GoogleSheetsMock {\n    return new GoogleSheetsMock(datasource.config as GoogleSheetsConfig)\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class GoogleSheetsMock {\n  private config: GoogleSheetsConfig\n  private spreadsheet: Spreadsheet\n  static forDatasource(datasource: Datasource): GoogleSheetsMock {\n    return new GoogleSheetsMock(datasource.config as GoogleSheetsConfig)\n  }\n  private constructor(config: GoogleSheetsConfig) {\n    this.config = config\n    this.spreadsheet = {\n      properties: {\n        title: \"Test Spreadsheet\",\n        locale: \"en_US\",\n        autoRecalc: \"ON_CHANGE\",\n        timeZone: \"America/New_York\",\n        defaultFormat: {},\n        iterativeCalculationSettings: {},\n        spreadsheetTheme: {},\n      },\n      spreadsheetId: config.spreadsheetId,\n      sheets: [],\n    }\n    this.mockAuth()\n    this.mockAPI()\n  }\n  public cell(cell: string): Value | undefined {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      return undefined\n    }\n    return this.cellValue(cellData)\n  }\n  public set(cell: string, value: Value): void {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      throw new Error(`Cell ${cell} not found`)\n    }\n    cellData.userEnteredValue = this.createValue(value)\n  }\n  public sheet(name: string | number): Sheet | undefined {\n    if (typeof name === \"number\") {\n      return this.getSheetById(name)\n    }\n    return this.getSheetByName(name)\n  }\n  public createSheet(opts: Partial<WorksheetProperties>): Sheet {\n    const properties = this.defaultWorksheetProperties(opts)\n    if (this.getSheetByName(properties.title)) {\n      throw new Error(`Sheet ${properties.title} already exists`)\n    }\n    const resp = this.handleAddSheet({ properties })\n    return this.getSheetById(resp.properties.sheetId)!\n  }\n  private route(\n    method: \"get\" | \"put\" | \"post\",\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    const headers = { reqheaders: { authorization: \"Bearer test\" } }\n    const scope = nock(\"https://sheets.googleapis.com/\", headers)\n    return scope[method](path).reply(200, handler).persist()\n  }\n  private get(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"get\", path, handler)\n  }\n  private put(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"put\", path, handler)\n  }\n  private post(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"post\", path, handler)\n  }\n  private mockAuth() {\n    nock(\"https://www.googleapis.com/\")\n      .post(\"/oauth2/v4/token\")\n      .reply(200, {\n        grant_type: \"client_credentials\",\n        client_id: \"your-client-id\",\n        client_secret: \"your-client-secret\",\n      })\n      .persist()\n    nock(\"https://oauth2.googleapis.com/\")\n      .post(\"/token\", {\n        client_id: \"test\",\n        client_secret: \"test\",\n        grant_type: \"refresh_token\",\n        refresh_token: \"refreshToken\",\n      })\n      .reply(200, {\n        access_token: \"test\",\n        expires_in: 3600,\n        token_type: \"Bearer\",\n        scopes: \"https://www.googleapis.com/auth/spreadsheets\",\n      })\n      .persist()\n  }\n  private mockAPI() {\n    const spreadsheetId = this.config.spreadsheetId\n    this.get(`/v4/spreadsheets/${spreadsheetId}/`, () =>\n      this.handleGetSpreadsheet()\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate\n    this.post(\n      `/v4/spreadsheets/${spreadsheetId}/:batchUpdate`,\n      (_uri, request) => this.handleBatchUpdate(request as BatchUpdateRequest)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update\n    this.put(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`),\n      (_uri, request) => this.handleValueUpdate(request as ValueRange)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet\n    this.get(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values:batchGet.*`),\n      uri => {\n        const url = new URL(uri, \"https://sheets.googleapis.com/\")\n        const params: BatchGetParams = {\n          ranges: url.searchParams.getAll(\"ranges\"),\n          majorDimension:\n            (url.searchParams.get(\"majorDimension\") as WorksheetDimension) ||\n            \"ROWS\",\n          valueRenderOption:\n            (url.searchParams.get(\"valueRenderOption\") as ValueRenderOption) ||\n            undefined,\n          dateTimeRenderOption:\n            (url.searchParams.get(\n              \"dateTimeRenderOption\"\n            ) as DateTimeRenderOption) || undefined,\n        }\n        return this.handleBatchGet(params as unknown as BatchGetParams)\n      }\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get\n    this.get(new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`), uri => {\n      const range = uri.split(\"/\").pop()\n      if (!range) {\n        throw new Error(\"No range provided\")\n      }\n      return this.getValueRange(decodeURIComponent(range))\n    })\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append\n    this.post(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*:append`),\n      (_uri, request) => {\n        const url = new URL(_uri, \"https://sheets.googleapis.com/\")\n        const params: Record<string, any> = Object.fromEntries(\n          url.searchParams.entries()\n        )\n        if (params.includeValuesInResponse === \"true\") {\n          params.includeValuesInResponse = true\n        } else {\n          params.includeValuesInResponse = false\n        }\n        let range = url.pathname.split(\"/\").pop()\n        if (!range) {\n          throw new Error(\"No range provided\")\n        }\n        if (range.endsWith(\":append\")) {\n          range = range.slice(0, -7)\n        }\n        range = decodeURIComponent(range)\n        return this.handleValueAppend({\n          range,\n          params,\n          body: request as ValueRange,\n        })\n      }\n    )\n  }\n  private handleValueAppend(request: AppendRequest): AppendResponse {\n    const { range, params, body } = request\n    const { sheetId, endRowIndex } = this.parseA1Notation(range)\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${sheetId} not found`)\n    }\n    const newRows = body.values.map(v => this.valuesToRowData(v))\n    const toDelete =\n      params.insertDataOption === \"INSERT_ROWS\" ? newRows.length : 0\n    sheet.data[0].rowData.splice(endRowIndex + 1, toDelete, ...newRows)\n    sheet.data[0].rowMetadata.splice(endRowIndex + 1, toDelete, {\n      hiddenByUser: false,\n      hiddenByFilter: false,\n      pixelSize: 100,\n      developerMetadata: [],\n    })\n    // It's important to give back a correct updated range because the API\n    // library we use makes use of it to assign the correct row IDs to rows.\n    const updatedRange = this.createA1({\n      sheetId,\n      startRowIndex: endRowIndex + 1,\n      startColumnIndex: 0,\n      endRowIndex: endRowIndex + newRows.length,\n      endColumnIndex: 0,\n    })\n    sheet.properties.gridProperties.rowCount = sheet.data[0].rowData.length\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      tableRange: range,\n      updates: {\n        spreadsheetId: this.spreadsheet.spreadsheetId,\n        updatedRange,\n        updatedRows: body.values.length,\n        updatedColumns: body.values[0].length,\n        updatedCells: body.values.length * body.values[0].length,\n        updatedData: body,\n      },\n    }\n  }\n  private handleBatchGet(params: BatchGetParams): BatchGetResponse {\n    const { ranges, majorDimension } = params\n    if (majorDimension && majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      valueRanges: ranges.map(range => this.getValueRange(range)),\n    }\n  }\n  private handleBatchUpdate(\n    batchUpdateRequest: BatchUpdateRequest\n  ): BatchUpdateResponse {\n    const response: BatchUpdateResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      replies: [],\n      updatedSpreadsheet: this.spreadsheet,\n    }\n    for (const request of batchUpdateRequest.requests) {\n      if (request.addSheet) {\n        response.replies.push({\n          addSheet: this.handleAddSheet(request.addSheet),\n        })\n      }\n      if (request.deleteRange) {\n        this.handleDeleteRange(request.deleteRange)\n        response.replies.push({})\n      }\n      if (request.deleteSheet) {\n        this.handleDeleteSheet(request.deleteSheet)\n        response.replies.push({})\n      }\n    }\n    return response\n  }\n  private defaultWorksheetProperties(\n    opts: Partial<WorksheetProperties>\n  ): WorksheetProperties {\n    return {\n      index: this.spreadsheet.sheets.length,\n      hidden: false,\n      rightToLeft: false,\n      tabColor: BLACK,\n      tabColorStyle: { rgbColor: BLACK },\n      sheetType: \"GRID\",\n      title: \"Sheet\",\n      sheetId: this.spreadsheet.sheets.length,\n      gridProperties: {\n        rowCount: 100,\n        columnCount: 26,\n      },\n      dataSourceSheetProperties: {} as DataSourceSheetProperties,\n      ...opts,\n    }\n  }\n  private handleAddSheet(request: AddSheetRequest): AddSheetResponse {\n    const properties = this.defaultWorksheetProperties(request.properties)\n    this.spreadsheet.sheets.push({\n      properties,\n      data: [\n        this.createEmptyGrid(\n          properties.gridProperties.rowCount,\n          properties.gridProperties.columnCount\n        ),\n      ],\n    })\n    return { properties }\n  }\n  private handleDeleteRange(request: DeleteRangeRequest) {\n    const { range, shiftDimension } = request\n    if (shiftDimension !== \"ROWS\") {\n      throw new Error(\"Only row-based deletes are supported\")\n    }\n    this.iterateRange(range, cell => {\n      cell.userEnteredValue = this.createValue(null)\n    })\n  }\n  private handleDeleteSheet(request: DeleteSheetRequest) {\n    const { sheetId } = request\n    this.spreadsheet.sheets.splice(sheetId, 1)\n  }\n  private handleGetSpreadsheet(): Spreadsheet {\n    return this.spreadsheet\n  }\n  private handleValueUpdate(valueRange: ValueRange): UpdateValuesResponse {\n    this.iterateValueRange(valueRange, (cell, value) => {\n      cell.userEnteredValue = this.createValue(value)\n    })\n    const response: UpdateValuesResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      updatedRange: valueRange.range,\n      updatedRows: valueRange.values.length,\n      updatedColumns: valueRange.values[0].length,\n      updatedCells: valueRange.values.length * valueRange.values[0].length,\n      updatedData: valueRange,\n    }\n    return response\n  }\n  private iterateRange(range: GridRange, cb: (cell: CellData) => void) {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.ensureGridRange(range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        cb(cell)\n      }\n    }\n  }\n  private iterateValueRange(\n    valueRange: ValueRange,\n    cb: (cell: CellData, value: Value) => void\n  ) {\n    if (valueRange.majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = this.parseA1Notation(valueRange.range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        const value =\n          valueRange.values[row - startRowIndex][col - startColumnIndex]\n        cb(cell, value)\n      }\n    }\n  }\n  private getValueRange(range: string): ValueRange {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.parseA1Notation(range)\n    const valueRange: ValueRange = {\n      range,\n      majorDimension: \"ROWS\",\n      values: [],\n    }\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      const values: Value[] = []\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        values.push(this.cellValue(cell))\n      }\n      valueRange.values.push(values)\n    }\n    return this.trimValueRange(valueRange)\n  }\n  // When Google Sheets returns a value range, it will trim the data down to the\n  // smallest possible size. It does all of the following:\n  //\n  // 1. Converts cells in non-empty rows up to the first value to empty strings.\n  // 2. Removes all cells after the last non-empty cell in a row.\n  // 3. Removes all rows after the last non-empty row.\n  // 4. Rows that are before the first non-empty row that are empty are replaced with [].\n  //\n  // We replicate this behaviour here.\n  private trimValueRange(valueRange: ValueRange): ValueRange {\n    for (const row of valueRange.values) {\n      if (row.every(v => v == null)) {\n        row.splice(0, row.length)\n        continue\n      }\n      for (let i = row.length - 1; i >= 0; i--) {\n        const cell = row[i]\n        if (cell == null) {\n          row.pop()\n        } else {\n          break\n        }\n      }\n      for (let i = 0; i < row.length; i++) {\n        const cell = row[i]\n        if (cell == null) {\n          row[i] = \"\"\n        } else {\n          break\n        }\n      }\n    }\n    for (let i = valueRange.values.length - 1; i >= 0; i--) {\n      const row = valueRange.values[i]\n      if (row.length === 0) {\n        valueRange.values.pop()\n      } else {\n        break\n      }\n    }\n    return valueRange\n  }\n  private valuesToRowData(values: Value[]): RowData {\n    return {\n      values: values.map(v => {\n        return this.createCellData(v)\n      }),\n    }\n  }\n  private unwrapValue(from: ExtendedValue): Value {\n    if (\"stringValue\" in from) {\n      return from.stringValue\n    } else if (\"numberValue\" in from) {\n      return from.numberValue\n    } else if (\"boolValue\" in from) {\n      return from.boolValue\n    } else if (\"formulaValue\" in from) {\n      return from.formulaValue\n    } else {\n      return null\n    }\n  }\n  private cellValue(from: CellData): Value {\n    return this.unwrapValue(from.userEnteredValue)\n  }\n  private createValue(from: Value): ExtendedValue {\n    if (from == null) {\n      return {} as ExtendedValue\n    } else if (typeof from === \"string\") {\n      return {\n        stringValue: from,\n      }\n    } else if (typeof from === \"number\") {\n      return {\n        numberValue: from,\n      }\n    } else if (typeof from === \"boolean\") {\n      return {\n        boolValue: from,\n      }\n    } else {\n      throw new Error(\"Unsupported value type\")\n    }\n  }\n  private createCellData(value: Value): CellData {\n    return {\n      userEnteredValue: this.createValue(value),\n      effectiveValue: this.createValue(value),\n      formattedValue: value?.toString() || \"\",\n      userEnteredFormat: DEFAULT_CELL_FORMAT,\n      effectiveFormat: DEFAULT_CELL_FORMAT,\n    }\n  }\n  private createEmptyGrid(numRows: number, numCols: number): GridData {\n    const rowData: RowData[] = []\n    for (let row = 0; row < numRows; row++) {\n      const cells: CellData[] = []\n      for (let col = 0; col < numCols; col++) {\n        cells.push(this.createCellData(null))\n      }\n      rowData.push({ values: cells })\n    }\n    const rowMetadata: WorksheetDimensionProperties[] = []\n    for (let row = 0; row < numRows; row++) {\n      rowMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    const columnMetadata: WorksheetDimensionProperties[] = []\n    for (let col = 0; col < numCols; col++) {\n      columnMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    return {\n      startRow: 0,\n      startColumn: 0,\n      rowData,\n      rowMetadata,\n      columnMetadata,\n    }\n  }\n  private cellData(cell: string): CellData | undefined {\n    const { sheetId, startColumnIndex, startRowIndex } =\n      this.parseA1Notation(cell)\n    return this.getCellNumericIndexes(sheetId, startRowIndex, startColumnIndex)\n  }\n  private getCellNumericIndexes(\n    sheet: Sheet | number,\n    row: number,\n    column: number\n  ): CellData | undefined {\n    if (typeof sheet === \"number\") {\n      const foundSheet = this.getSheetById(sheet)\n      if (!foundSheet) {\n        return undefined\n      }\n      sheet = foundSheet\n    }\n    const data = sheet.data[0]\n    const rowData = data.rowData[row]\n    if (!rowData) {\n      return undefined\n    }\n    const cell = rowData.values[column]\n    if (!cell) {\n      return undefined\n    }\n    return cell\n  }\n  // https://developers.google.com/sheets/api/guides/concepts#cell\n  //\n  // Examples from\n  //   https://code.luasoftware.com/tutorials/google-sheets-api/google-sheets-api-range-parameter-a1-notation\n  //\n  //   \"Sheet1!A1\"     -> First cell on Row 1 Col 1\n  //   \"Sheet1!A1:C1\"  -> Col 1-3 (A, B, C) on Row 1 = A1, B1, C1\n  //   \"A1\"            -> First visible sheet (if sheet name is ommitted)\n  //   \"'My Sheet'!A1\" -> If sheet name which contain space or start with a bracket.\n  //   \"Sheet1\"        -> All cells in Sheet1.\n  //   \"Sheet1!A:A\"    -> All cells on Col 1.\n  //   \"Sheet1!A:B\"    -> All cells on Col 1 and 2.\n  //   \"Sheet1!1:1\"    -> All cells on Row 1.\n  //   \"Sheet1!1:2\"    -> All cells on Row 1 and 2.\n  //\n  // How that translates to our code below, omitting the `sheet` property:\n  //\n  //   \"Sheet1!A1\"     -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 0 } }\n  //   \"Sheet1!A1:C1\"  -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 2 } }\n  //   \"A1\"            -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 0 } }\n  //   \"Sheet1\"        -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 100, column: 25 } }\n  //                    -> This is because we default to having a 100x26 grid.\n  //   \"Sheet1!A:A\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 99, column: 0 } }\n  //   \"Sheet1!A:B\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 99, column: 1 } }\n  //   \"Sheet1!1:1\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 25 } }\n  //   \"Sheet1!1:2\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 1, column: 25 } }\n  private parseA1Notation(range: string): Required<GridRange> {\n    let sheet: Sheet\n    let rest: string\n    if (!range.includes(\"!\")) {\n      sheet = this.spreadsheet.sheets[0]\n      rest = range\n    } else {\n      let sheetName = range.split(\"!\")[0]\n      if (sheetName.startsWith(\"'\") && sheetName.endsWith(\"'\")) {\n        sheetName = sheetName.slice(1, -1)\n      }\n      const foundSheet = this.getSheetByName(sheetName)\n      if (!foundSheet) {\n        throw new Error(`Sheet ${sheetName} not found`)\n      }\n      sheet = foundSheet\n      rest = range.split(\"!\")[1]\n    }\n    const [topLeft, bottomRight] = rest.split(\":\")\n    const parsedTopLeft = topLeft ? this.parseCell(topLeft) : undefined\n    let parsedBottomRight = bottomRight\n      ? this.parseCell(bottomRight)\n      : undefined\n    if (!parsedTopLeft && !parsedBottomRight) {\n      throw new Error(\"No range provided\")\n    }\n    if (!parsedTopLeft) {\n      throw new Error(\"No top left cell provided\")\n    }\n    if (!parsedBottomRight) {\n      parsedBottomRight = parsedTopLeft\n    }\n    return this.ensureGridRange({\n      sheetId: sheet.properties.sheetId,\n      startRowIndex: parsedTopLeft.row,\n      endRowIndex: parsedBottomRight.row,\n      startColumnIndex: parsedTopLeft.column,\n      endColumnIndex: parsedBottomRight.column,\n    })\n  }\n  private ensureGridRange(range: GridRange): Required<GridRange> {\n    const sheet = this.getSheetById(range.sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    return {\n      sheetId: range.sheetId,\n      startRowIndex: range.startRowIndex ?? 0,\n      endRowIndex:\n        range.endRowIndex ?? sheet.properties.gridProperties.rowCount - 1,\n      startColumnIndex: range.startColumnIndex ?? 0,\n      endColumnIndex:\n        range.endColumnIndex ?? sheet.properties.gridProperties.columnCount - 1,\n    }\n  }\n  private createA1(range: Required<GridRange>) {\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = range\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    let title = sheet.properties.title\n    if (title.includes(\" \")) {\n      title = `'${title}'`\n    }\n    const topLeftLetter = this.numberToLetter(startColumnIndex)\n    const bottomRightLetter = this.numberToLetter(endColumnIndex)\n    const topLeftRow = startRowIndex + 1\n    const bottomRightRow = endRowIndex + 1\n    return `${title}!${topLeftLetter}${topLeftRow}:${bottomRightLetter}${bottomRightRow}`\n  }\n  private parseCell(cell: string): Partial<Range> {\n    const firstChar = cell.slice(0, 1)\n    if (this.isInteger(firstChar)) {\n      return { row: parseInt(cell) - 1 }\n    }\n    const column = this.letterToNumber(firstChar)\n    if (cell.length === 1) {\n      return { column }\n    }\n    const number = cell.slice(1)\n    return { row: parseInt(number) - 1, column }\n  }\n  private isInteger(value: string): boolean {\n    return !isNaN(parseInt(value))\n  }\n  private letterToNumber(letter: string): number {\n    return letter.charCodeAt(0) - 65\n  }\n  private numberToLetter(number: number): string {\n    return String.fromCharCode(number + 65)\n  }\n  private getSheetByName(name: string): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.title === name\n    )\n  }\n  private getSheetById(id: number): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.sheetId === id\n    )\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$2",
      "label": "%AC$%dflt$%dflt$2",
      "start_line": 27,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ red: 0, green: 0, blue: 0 }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$3",
      "label": "%AC$%dflt$%dflt$3",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ red: 1, green: 1, blue: 1 }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$4",
      "label": "%AC$%dflt$%dflt$4",
      "start_line": 29,
      "end_line": 29,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ top: 0, right: 0, bottom: 0, left: 0 }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$5$%instInit$6",
      "label": "%AC$%AC$%dflt$%dflt$5$%instInit$6",
      "start_line": 34,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rgbColor: BLACK }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$5",
      "label": "%AC$%dflt$%dflt$5",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  style: \"SOLID\",\n  width: 1,\n  color: BLACK,\n  colorStyle: { rgbColor: BLACK },\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$7$%instInit$8",
      "label": "%AC$%AC$%dflt$%dflt$7$%instInit$8",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ angle: 0, vertical: false }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$7$%instInit$9",
      "label": "%AC$%AC$%dflt$%dflt$7$%instInit$9",
      "start_line": 44,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rgbColor: BLACK }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$7$%instInit$10",
      "label": "%AC$%AC$%dflt$%dflt$7$%instInit$10",
      "start_line": 45,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    top: DEFAULT_BORDER,\n    bottom: DEFAULT_BORDER,\n    left: DEFAULT_BORDER,\n    right: DEFAULT_BORDER,\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$7$%instInit$11",
      "label": "%AC$%AC$%dflt$%dflt$7$%instInit$11",
      "start_line": 51,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    type: \"NUMBER\",\n    pattern: \"General\",\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$7$%instInit$12",
      "label": "%AC$%AC$%dflt$%dflt$7$%instInit$12",
      "start_line": 56,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    foregroundColor: BLACK,\n    fontFamily: \"Arial\",\n    fontSize: 10,\n    bold: false,\n    italic: false,\n    strikethrough: false,\n    underline: false,\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$7",
      "label": "%AC$%dflt$%dflt$7",
      "start_line": 36,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  hyperlinkDisplayType: \"PLAIN_TEXT\",\n  horizontalAlignment: \"LEFT\",\n  verticalAlignment: \"BOTTOM\",\n  wrapStrategy: \"OVERFLOW_CELL\",\n  textDirection: \"LEFT_TO_RIGHT\",\n  textRotation: { angle: 0, vertical: false },\n  padding: NO_PADDING,\n  backgroundColorStyle: { rgbColor: BLACK },\n  borders: {\n    top: DEFAULT_BORDER,\n    bottom: DEFAULT_BORDER,\n    left: DEFAULT_BORDER,\n    right: DEFAULT_BORDER,\n  },\n  numberFormat: {\n    type: \"NUMBER\",\n    pattern: \"General\",\n  },\n  backgroundColor: WHITE,\n  textFormat: {\n    foregroundColor: BLACK,\n    fontFamily: \"Arial\",\n    fontSize: 10,\n    bold: false,\n    italic: false,\n    strikethrough: false,\n    underline: false,\n  },\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$15",
      "label": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$15",
      "start_line": 201,
      "end_line": 201,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$16",
      "label": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$16",
      "start_line": 202,
      "end_line": 202,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$17",
      "label": "%AC$%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14$%instInit$17",
      "start_line": 203,
      "end_line": 203,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14",
      "label": "%AC$%AC$GoogleSheetsMock$constructor$13$%instInit$14",
      "start_line": 196,
      "end_line": 196,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        title: \"Test Spreadsheet\",\n        locale: \"en_US\",\n        autoRecalc: \"ON_CHANGE\",\n        timeZone: \"America/New_York\",\n        defaultFormat: {},\n        iterativeCalculationSettings: {},\n        spreadsheetTheme: {},\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$constructor$13",
      "label": "%AC$GoogleSheetsMock$constructor$13",
      "start_line": 195,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      properties: {\n        title: \"Test Spreadsheet\",\n        locale: \"en_US\",\n        autoRecalc: \"ON_CHANGE\",\n        timeZone: \"America/New_York\",\n        defaultFormat: {},\n        iterativeCalculationSettings: {},\n        spreadsheetTheme: {},\n      },\n      spreadsheetId: config.spreadsheetId,\n      sheets: [],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createSheet$18",
      "label": "%AC$GoogleSheetsMock$createSheet$18",
      "start_line": 236,
      "end_line": 236,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ properties }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$route$19$%instInit$20",
      "label": "%AC$%AC$GoogleSheetsMock$route$19$%instInit$20",
      "start_line": 244,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ authorization: \"Bearer test\" }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$route$19",
      "label": "%AC$GoogleSheetsMock$route$19",
      "start_line": 244,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ reqheaders: { authorization: \"Bearer test\" } }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$mockAuth$21",
      "label": "%AC$GoogleSheetsMock$mockAuth$21",
      "start_line": 269,
      "end_line": 269,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        grant_type: \"client_credentials\",\n        client_id: \"your-client-id\",\n        client_secret: \"your-client-secret\",\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$mockAuth$22",
      "label": "%AC$GoogleSheetsMock$mockAuth$22",
      "start_line": 282,
      "end_line": 282,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        access_token: \"test\",\n        expires_in: 3600,\n        token_type: \"Bearer\",\n        scopes: \"https://www.googleapis.com/auth/spreadsheets\",\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$mockAuth$23",
      "label": "%AC$GoogleSheetsMock$mockAuth$23",
      "start_line": 276,
      "end_line": 276,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        client_id: \"test\",\n        client_secret: \"test\",\n        grant_type: \"refresh_token\",\n        refresh_token: \"refreshToken\",\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$%AM9$mockAPI$24",
      "label": "%AC$GoogleSheetsMock$%AM9$mockAPI$24",
      "start_line": 310,
      "end_line": 310,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          ranges: url.searchParams.getAll(\"ranges\"),\n          majorDimension:\n            (url.searchParams.get(\"majorDimension\") as WorksheetDimension) ||\n            \"ROWS\",\n          valueRenderOption:\n            (url.searchParams.get(\"valueRenderOption\") as ValueRenderOption) ||\n            undefined,\n          dateTimeRenderOption:\n            (url.searchParams.get(\n              \"dateTimeRenderOption\"\n            ) as DateTimeRenderOption) || undefined,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$%AM11$mockAPI$25",
      "label": "%AC$GoogleSheetsMock$%AM11$mockAPI$25",
      "start_line": 355,
      "end_line": 355,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          range,\n          params,\n          body: request as ValueRange,\n        }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleValueAppend$26",
      "label": "%AC$GoogleSheetsMock$handleValueAppend$26",
      "start_line": 374,
      "end_line": 374,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      hiddenByUser: false,\n      hiddenByFilter: false,\n      pixelSize: 100,\n      developerMetadata: [],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleValueAppend$27",
      "label": "%AC$GoogleSheetsMock$handleValueAppend$27",
      "start_line": 382,
      "end_line": 382,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      sheetId,\n      startRowIndex: endRowIndex + 1,\n      startColumnIndex: 0,\n      endRowIndex: endRowIndex + newRows.length,\n      endColumnIndex: 0,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$handleValueAppend$28$%instInit$29",
      "label": "%AC$%AC$GoogleSheetsMock$handleValueAppend$28$%instInit$29",
      "start_line": 393,
      "end_line": 393,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        spreadsheetId: this.spreadsheet.spreadsheetId,\n        updatedRange,\n        updatedRows: body.values.length,\n        updatedColumns: body.values[0].length,\n        updatedCells: body.values.length * body.values[0].length,\n        updatedData: body,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleValueAppend$28",
      "label": "%AC$GoogleSheetsMock$handleValueAppend$28",
      "start_line": 390,
      "end_line": 390,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      tableRange: range,\n      updates: {\n        spreadsheetId: this.spreadsheet.spreadsheetId,\n        updatedRange,\n        updatedRows: body.values.length,\n        updatedColumns: body.values[0].length,\n        updatedCells: body.values.length * body.values[0].length,\n        updatedData: body,\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleBatchGet$30",
      "label": "%AC$GoogleSheetsMock$handleBatchGet$30",
      "start_line": 1,
      "end_line": 410,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 410,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "range = parameter0: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@%unk/%unk: .getValueRange()>(range)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "range => this.getValueRange(range)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      valueRanges: ranges.map(range => this.getValueRange(range)),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleBatchUpdate$31",
      "label": "%AC$GoogleSheetsMock$handleBatchUpdate$31",
      "start_line": 416,
      "end_line": 416,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      replies: [],\n      updatedSpreadsheet: this.spreadsheet,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleBatchUpdate$32",
      "label": "%AC$GoogleSheetsMock$handleBatchUpdate$32",
      "start_line": 423,
      "end_line": 423,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          addSheet: this.handleAddSheet(request.addSheet),\n        }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleBatchUpdate$33",
      "label": "%AC$GoogleSheetsMock$handleBatchUpdate$33",
      "start_line": 429,
      "end_line": 429,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleBatchUpdate$34",
      "label": "%AC$GoogleSheetsMock$handleBatchUpdate$34",
      "start_line": 433,
      "end_line": 433,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$36",
      "label": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$36",
      "start_line": 446,
      "end_line": 446,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rgbColor: BLACK }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$37",
      "label": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$37",
      "start_line": 450,
      "end_line": 450,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        rowCount: 100,\n        columnCount: 26,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$38",
      "label": "%AC$%AC$GoogleSheetsMock$defaultWorksheetProperties$35$%instInit$38",
      "start_line": 454,
      "end_line": 454,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$defaultWorksheetProperties$35",
      "label": "%AC$GoogleSheetsMock$defaultWorksheetProperties$35",
      "start_line": 441,
      "end_line": 441,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      index: this.spreadsheet.sheets.length,\n      hidden: false,\n      rightToLeft: false,\n      tabColor: BLACK,\n      tabColorStyle: { rgbColor: BLACK },\n      sheetType: \"GRID\",\n      title: \"Sheet\",\n      sheetId: this.spreadsheet.sheets.length,\n      gridProperties: {\n        rowCount: 100,\n        columnCount: 26,\n      },\n      dataSourceSheetProperties: {} as DataSourceSheetProperties,\n      ...opts,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleAddSheet$39",
      "label": "%AC$GoogleSheetsMock$handleAddSheet$39",
      "start_line": 460,
      "end_line": 460,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      properties,\n      data: [\n        this.createEmptyGrid(\n          properties.gridProperties.rowCount,\n          properties.gridProperties.columnCount\n        ),\n      ],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleAddSheet$40",
      "label": "%AC$GoogleSheetsMock$handleAddSheet$40",
      "start_line": 469,
      "end_line": 469,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ properties }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$handleValueUpdate$41",
      "label": "%AC$GoogleSheetsMock$handleValueUpdate$41",
      "start_line": 491,
      "end_line": 491,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      updatedRange: valueRange.range,\n      updatedRows: valueRange.values.length,\n      updatedColumns: valueRange.values[0].length,\n      updatedCells: valueRange.values.length * valueRange.values[0].length,\n      updatedData: valueRange,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$getValueRange$42",
      "label": "%AC$GoogleSheetsMock$getValueRange$42",
      "start_line": 553,
      "end_line": 553,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      range,\n      majorDimension: \"ROWS\",\n      values: [],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$valuesToRowData$43",
      "label": "%AC$GoogleSheetsMock$valuesToRowData$43",
      "start_line": 1,
      "end_line": 615,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 615,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "v = parameter0: unknown\nthis = this: @ts_files/132.ts: GoogleSheetsMock\n%0 = instanceinvoke this.<@%unk/%unk: .createCellData()>(v)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "v => {\n        return this.createCellData(v)\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      values: values.map(v => {\n        return this.createCellData(v)\n      }),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createValue$44",
      "label": "%AC$GoogleSheetsMock$createValue$44",
      "start_line": 638,
      "end_line": 638,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createValue$45",
      "label": "%AC$GoogleSheetsMock$createValue$45",
      "start_line": 640,
      "end_line": 640,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        stringValue: from,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createValue$46",
      "label": "%AC$GoogleSheetsMock$createValue$46",
      "start_line": 644,
      "end_line": 644,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        numberValue: from,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createValue$47",
      "label": "%AC$GoogleSheetsMock$createValue$47",
      "start_line": 648,
      "end_line": 648,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        boolValue: from,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createCellData$48",
      "label": "%AC$GoogleSheetsMock$createCellData$48",
      "start_line": 656,
      "end_line": 656,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      userEnteredValue: this.createValue(value),\n      effectiveValue: this.createValue(value),\n      formattedValue: value?.toString() || \"\",\n      userEnteredFormat: DEFAULT_CELL_FORMAT,\n      effectiveFormat: DEFAULT_CELL_FORMAT,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createEmptyGrid$49",
      "label": "%AC$GoogleSheetsMock$createEmptyGrid$49",
      "start_line": 671,
      "end_line": 671,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ values: cells }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createEmptyGrid$50",
      "label": "%AC$GoogleSheetsMock$createEmptyGrid$50",
      "start_line": 675,
      "end_line": 675,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createEmptyGrid$51",
      "label": "%AC$GoogleSheetsMock$createEmptyGrid$51",
      "start_line": 684,
      "end_line": 684,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$createEmptyGrid$52",
      "label": "%AC$GoogleSheetsMock$createEmptyGrid$52",
      "start_line": 691,
      "end_line": 691,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      startRow: 0,\n      startColumn: 0,\n      rowData,\n      rowMetadata,\n      columnMetadata,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$parseA1Notation$53",
      "label": "%AC$GoogleSheetsMock$parseA1Notation$53",
      "start_line": 785,
      "end_line": 785,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      sheetId: sheet.properties.sheetId,\n      startRowIndex: parsedTopLeft.row,\n      endRowIndex: parsedBottomRight.row,\n      startColumnIndex: parsedTopLeft.column,\n      endColumnIndex: parsedBottomRight.column,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$ensureGridRange$54",
      "label": "%AC$GoogleSheetsMock$ensureGridRange$54",
      "start_line": 798,
      "end_line": 798,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      sheetId: range.sheetId,\n      startRowIndex: range.startRowIndex ?? 0,\n      endRowIndex:\n        range.endRowIndex ?? sheet.properties.gridProperties.rowCount - 1,\n      startColumnIndex: range.startColumnIndex ?? 0,\n      endColumnIndex:\n        range.endColumnIndex ?? sheet.properties.gridProperties.columnCount - 1,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$parseCell$55",
      "label": "%AC$GoogleSheetsMock$parseCell$55",
      "start_line": 833,
      "end_line": 833,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ row: parseInt(cell) - 1 }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$parseCell$56",
      "label": "%AC$GoogleSheetsMock$parseCell$56",
      "start_line": 837,
      "end_line": 837,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ column }"
    },
    {
      "type": "class",
      "name": "%AC$GoogleSheetsMock$parseCell$57",
      "label": "%AC$GoogleSheetsMock$parseCell$57",
      "start_line": 840,
      "end_line": 840,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ row: parseInt(number) - 1, column }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// In this file is a mock implementation of the Google Sheets API.  It is used\n// to test the Google Sheets integration, and it keeps track of a single\n// spreadsheet with many sheets. It aims to be a faithful recreation of the\n// Google Sheets API, but it is not a perfect recreation. Some fields are\n// missing if they aren't relevant to our use of the API. It's possible that\n// this will cause problems for future feature development, but the original\n// development of these tests involved hitting Google's APIs directly and\n// examining the responses. If we couldn't find a good example of something in\n// use, it wasn't included.\nimport { Datasource } from \"@budibase/types\"\nimport nock from \"nock\"\nimport { GoogleSheetsConfig } from \"../../googlesheets\"\nimport type {\n  SpreadsheetProperties,\n  ExtendedValue,\n  WorksheetDimension,\n  WorksheetDimensionProperties,\n  WorksheetProperties,\n  CellData,\n  CellBorder,\n  CellFormat,\n  CellPadding,\n  Color,\n  GridRange,\n  DataSourceSheetProperties,\n} from \"google-spreadsheet/src/lib/types/sheets-types\"\nconst BLACK: Color = { red: 0, green: 0, blue: 0 }\nconst WHITE: Color = { red: 1, green: 1, blue: 1 }\nconst NO_PADDING: CellPadding = { top: 0, right: 0, bottom: 0, left: 0 }\nconst DEFAULT_BORDER: CellBorder = {\n  style: \"SOLID\",\n  width: 1,\n  color: BLACK,\n  colorStyle: { rgbColor: BLACK },\n}\nconst DEFAULT_CELL_FORMAT: CellFormat = {\n  hyperlinkDisplayType: \"PLAIN_TEXT\",\n  horizontalAlignment: \"LEFT\",\n  verticalAlignment: \"BOTTOM\",\n  wrapStrategy: \"OVERFLOW_CELL\",\n  textDirection: \"LEFT_TO_RIGHT\",\n  textRotation: { angle: 0, vertical: false },\n  padding: NO_PADDING,\n  backgroundColorStyle: { rgbColor: BLACK },\n  borders: {\n    top: DEFAULT_BORDER,\n    bottom: DEFAULT_BORDER,\n    left: DEFAULT_BORDER,\n    right: DEFAULT_BORDER,\n  },\n  numberFormat: {\n    type: \"NUMBER\",\n    pattern: \"General\",\n  },\n  backgroundColor: WHITE,\n  textFormat: {\n    foregroundColor: BLACK,\n    fontFamily: \"Arial\",\n    fontSize: 10,\n    bold: false,\n    italic: false,\n    strikethrough: false,\n    underline: false,\n  },\n}\n// https://protobuf.dev/reference/protobuf/google.protobuf/#value\ntype Value = string | number | boolean | null\ninterface Range {\n  row: number\n  column: number\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values#ValueRange\ninterface ValueRange {\n  range: string\n  majorDimension: WorksheetDimension\n  values: Value[][]\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/UpdateValuesResponse\ninterface UpdateValuesResponse {\n  spreadsheetId: string\n  updatedRange: string\n  updatedRows: number\n  updatedColumns: number\n  updatedCells: number\n  updatedData: ValueRange\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\ninterface AddSheetRequest {\n  properties: Partial<WorksheetProperties>\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/response#AddSheetResponse\ninterface AddSheetResponse {\n  properties: WorksheetProperties\n}\ninterface DeleteRangeRequest {\n  range: GridRange\n  shiftDimension: WorksheetDimension\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\ninterface DeleteSheetRequest {\n  sheetId: number\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request\ninterface BatchUpdateRequest {\n  requests: {\n    addSheet?: AddSheetRequest\n    deleteRange?: DeleteRangeRequest\n    deleteSheet?: DeleteSheetRequest\n  }[]\n  includeSpreadsheetInResponse: boolean\n  responseRanges: string[]\n  responseIncludeGridData: boolean\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/response\ninterface BatchUpdateResponse {\n  spreadsheetId: string\n  replies: {\n    addSheet?: AddSheetResponse\n  }[]\n  updatedSpreadsheet: Spreadsheet\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#RowData\ninterface RowData {\n  values: CellData[]\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridData\ninterface GridData {\n  startRow: number\n  startColumn: number\n  rowData: RowData[]\n  rowMetadata: WorksheetDimensionProperties[]\n  columnMetadata: WorksheetDimensionProperties[]\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#Sheet\ninterface Sheet {\n  properties: WorksheetProperties\n  data: GridData[]\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#Spreadsheet\ninterface Spreadsheet {\n  properties: SpreadsheetProperties\n  spreadsheetId: string\n  sheets: Sheet[]\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption\ntype ValueInputOption =\n  | \"USER_ENTERED\"\n  | \"RAW\"\n  | \"INPUT_VALUE_OPTION_UNSPECIFIED\"\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append#InsertDataOption\ntype InsertDataOption = \"OVERWRITE\" | \"INSERT_ROWS\"\n// https://developers.google.com/sheets/api/reference/rest/v4/ValueRenderOption\ntype ValueRenderOption = \"FORMATTED_VALUE\" | \"UNFORMATTED_VALUE\" | \"FORMULA\"\n// https://developers.google.com/sheets/api/reference/rest/v4/DateTimeRenderOption\ntype DateTimeRenderOption = \"SERIAL_NUMBER\" | \"FORMATTED_STRING\"\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append#query-parameters\ninterface AppendParams {\n  valueInputOption?: ValueInputOption\n  insertDataOption?: InsertDataOption\n  includeValuesInResponse?: boolean\n  responseValueRenderOption?: ValueRenderOption\n  responseDateTimeRenderOption?: DateTimeRenderOption\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet#query-parameters\ninterface BatchGetParams {\n  ranges: string[]\n  majorDimension?: WorksheetDimension\n  valueRenderOption?: ValueRenderOption\n  dateTimeRenderOption?: DateTimeRenderOption\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet#response-body\ninterface BatchGetResponse {\n  spreadsheetId: string\n  valueRanges: ValueRange[]\n}\ninterface AppendRequest {\n  range: string\n  params: AppendParams\n  body: ValueRange\n}\n// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append#response-body\ninterface AppendResponse {\n  spreadsheetId: string\n  tableRange: string\n  updates: UpdateValuesResponse\n}\nexport class GoogleSheetsMock {\n  private config: GoogleSheetsConfig\n  private spreadsheet: Spreadsheet\n  static forDatasource(datasource: Datasource): GoogleSheetsMock {\n    return new GoogleSheetsMock(datasource.config as GoogleSheetsConfig)\n  }\n  private constructor(config: GoogleSheetsConfig) {\n    this.config = config\n    this.spreadsheet = {\n      properties: {\n        title: \"Test Spreadsheet\",\n        locale: \"en_US\",\n        autoRecalc: \"ON_CHANGE\",\n        timeZone: \"America/New_York\",\n        defaultFormat: {},\n        iterativeCalculationSettings: {},\n        spreadsheetTheme: {},\n      },\n      spreadsheetId: config.spreadsheetId,\n      sheets: [],\n    }\n    this.mockAuth()\n    this.mockAPI()\n  }\n  public cell(cell: string): Value | undefined {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      return undefined\n    }\n    return this.cellValue(cellData)\n  }\n  public set(cell: string, value: Value): void {\n    const cellData = this.cellData(cell)\n    if (!cellData) {\n      throw new Error(`Cell ${cell} not found`)\n    }\n    cellData.userEnteredValue = this.createValue(value)\n  }\n  public sheet(name: string | number): Sheet | undefined {\n    if (typeof name === \"number\") {\n      return this.getSheetById(name)\n    }\n    return this.getSheetByName(name)\n  }\n  public createSheet(opts: Partial<WorksheetProperties>): Sheet {\n    const properties = this.defaultWorksheetProperties(opts)\n    if (this.getSheetByName(properties.title)) {\n      throw new Error(`Sheet ${properties.title} already exists`)\n    }\n    const resp = this.handleAddSheet({ properties })\n    return this.getSheetById(resp.properties.sheetId)!\n  }\n  private route(\n    method: \"get\" | \"put\" | \"post\",\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    const headers = { reqheaders: { authorization: \"Bearer test\" } }\n    const scope = nock(\"https://sheets.googleapis.com/\", headers)\n    return scope[method](path).reply(200, handler).persist()\n  }\n  private get(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"get\", path, handler)\n  }\n  private put(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"put\", path, handler)\n  }\n  private post(\n    path: string | RegExp,\n    handler: (uri: string, request: nock.Body) => nock.Body\n  ): nock.Scope {\n    return this.route(\"post\", path, handler)\n  }\n  private mockAuth() {\n    nock(\"https://www.googleapis.com/\")\n      .post(\"/oauth2/v4/token\")\n      .reply(200, {\n        grant_type: \"client_credentials\",\n        client_id: \"your-client-id\",\n        client_secret: \"your-client-secret\",\n      })\n      .persist()\n    nock(\"https://oauth2.googleapis.com/\")\n      .post(\"/token\", {\n        client_id: \"test\",\n        client_secret: \"test\",\n        grant_type: \"refresh_token\",\n        refresh_token: \"refreshToken\",\n      })\n      .reply(200, {\n        access_token: \"test\",\n        expires_in: 3600,\n        token_type: \"Bearer\",\n        scopes: \"https://www.googleapis.com/auth/spreadsheets\",\n      })\n      .persist()\n  }\n  private mockAPI() {\n    const spreadsheetId = this.config.spreadsheetId\n    this.get(`/v4/spreadsheets/${spreadsheetId}/`, () =>\n      this.handleGetSpreadsheet()\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate\n    this.post(\n      `/v4/spreadsheets/${spreadsheetId}/:batchUpdate`,\n      (_uri, request) => this.handleBatchUpdate(request as BatchUpdateRequest)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update\n    this.put(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`),\n      (_uri, request) => this.handleValueUpdate(request as ValueRange)\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet\n    this.get(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values:batchGet.*`),\n      uri => {\n        const url = new URL(uri, \"https://sheets.googleapis.com/\")\n        const params: BatchGetParams = {\n          ranges: url.searchParams.getAll(\"ranges\"),\n          majorDimension:\n            (url.searchParams.get(\"majorDimension\") as WorksheetDimension) ||\n            \"ROWS\",\n          valueRenderOption:\n            (url.searchParams.get(\"valueRenderOption\") as ValueRenderOption) ||\n            undefined,\n          dateTimeRenderOption:\n            (url.searchParams.get(\n              \"dateTimeRenderOption\"\n            ) as DateTimeRenderOption) || undefined,\n        }\n        return this.handleBatchGet(params as unknown as BatchGetParams)\n      }\n    )\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get\n    this.get(new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*`), uri => {\n      const range = uri.split(\"/\").pop()\n      if (!range) {\n        throw new Error(\"No range provided\")\n      }\n      return this.getValueRange(decodeURIComponent(range))\n    })\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append\n    this.post(\n      new RegExp(`/v4/spreadsheets/${spreadsheetId}/values/.*:append`),\n      (_uri, request) => {\n        const url = new URL(_uri, \"https://sheets.googleapis.com/\")\n        const params: Record<string, any> = Object.fromEntries(\n          url.searchParams.entries()\n        )\n        if (params.includeValuesInResponse === \"true\") {\n          params.includeValuesInResponse = true\n        } else {\n          params.includeValuesInResponse = false\n        }\n        let range = url.pathname.split(\"/\").pop()\n        if (!range) {\n          throw new Error(\"No range provided\")\n        }\n        if (range.endsWith(\":append\")) {\n          range = range.slice(0, -7)\n        }\n        range = decodeURIComponent(range)\n        return this.handleValueAppend({\n          range,\n          params,\n          body: request as ValueRange,\n        })\n      }\n    )\n  }\n  private handleValueAppend(request: AppendRequest): AppendResponse {\n    const { range, params, body } = request\n    const { sheetId, endRowIndex } = this.parseA1Notation(range)\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${sheetId} not found`)\n    }\n    const newRows = body.values.map(v => this.valuesToRowData(v))\n    const toDelete =\n      params.insertDataOption === \"INSERT_ROWS\" ? newRows.length : 0\n    sheet.data[0].rowData.splice(endRowIndex + 1, toDelete, ...newRows)\n    sheet.data[0].rowMetadata.splice(endRowIndex + 1, toDelete, {\n      hiddenByUser: false,\n      hiddenByFilter: false,\n      pixelSize: 100,\n      developerMetadata: [],\n    })\n    // It's important to give back a correct updated range because the API\n    // library we use makes use of it to assign the correct row IDs to rows.\n    const updatedRange = this.createA1({\n      sheetId,\n      startRowIndex: endRowIndex + 1,\n      startColumnIndex: 0,\n      endRowIndex: endRowIndex + newRows.length,\n      endColumnIndex: 0,\n    })\n    sheet.properties.gridProperties.rowCount = sheet.data[0].rowData.length\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      tableRange: range,\n      updates: {\n        spreadsheetId: this.spreadsheet.spreadsheetId,\n        updatedRange,\n        updatedRows: body.values.length,\n        updatedColumns: body.values[0].length,\n        updatedCells: body.values.length * body.values[0].length,\n        updatedData: body,\n      },\n    }\n  }\n  private handleBatchGet(params: BatchGetParams): BatchGetResponse {\n    const { ranges, majorDimension } = params\n    if (majorDimension && majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    return {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      valueRanges: ranges.map(range => this.getValueRange(range)),\n    }\n  }\n  private handleBatchUpdate(\n    batchUpdateRequest: BatchUpdateRequest\n  ): BatchUpdateResponse {\n    const response: BatchUpdateResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      replies: [],\n      updatedSpreadsheet: this.spreadsheet,\n    }\n    for (const request of batchUpdateRequest.requests) {\n      if (request.addSheet) {\n        response.replies.push({\n          addSheet: this.handleAddSheet(request.addSheet),\n        })\n      }\n      if (request.deleteRange) {\n        this.handleDeleteRange(request.deleteRange)\n        response.replies.push({})\n      }\n      if (request.deleteSheet) {\n        this.handleDeleteSheet(request.deleteSheet)\n        response.replies.push({})\n      }\n    }\n    return response\n  }\n  private defaultWorksheetProperties(\n    opts: Partial<WorksheetProperties>\n  ): WorksheetProperties {\n    return {\n      index: this.spreadsheet.sheets.length,\n      hidden: false,\n      rightToLeft: false,\n      tabColor: BLACK,\n      tabColorStyle: { rgbColor: BLACK },\n      sheetType: \"GRID\",\n      title: \"Sheet\",\n      sheetId: this.spreadsheet.sheets.length,\n      gridProperties: {\n        rowCount: 100,\n        columnCount: 26,\n      },\n      dataSourceSheetProperties: {} as DataSourceSheetProperties,\n      ...opts,\n    }\n  }\n  private handleAddSheet(request: AddSheetRequest): AddSheetResponse {\n    const properties = this.defaultWorksheetProperties(request.properties)\n    this.spreadsheet.sheets.push({\n      properties,\n      data: [\n        this.createEmptyGrid(\n          properties.gridProperties.rowCount,\n          properties.gridProperties.columnCount\n        ),\n      ],\n    })\n    return { properties }\n  }\n  private handleDeleteRange(request: DeleteRangeRequest) {\n    const { range, shiftDimension } = request\n    if (shiftDimension !== \"ROWS\") {\n      throw new Error(\"Only row-based deletes are supported\")\n    }\n    this.iterateRange(range, cell => {\n      cell.userEnteredValue = this.createValue(null)\n    })\n  }\n  private handleDeleteSheet(request: DeleteSheetRequest) {\n    const { sheetId } = request\n    this.spreadsheet.sheets.splice(sheetId, 1)\n  }\n  private handleGetSpreadsheet(): Spreadsheet {\n    return this.spreadsheet\n  }\n  private handleValueUpdate(valueRange: ValueRange): UpdateValuesResponse {\n    this.iterateValueRange(valueRange, (cell, value) => {\n      cell.userEnteredValue = this.createValue(value)\n    })\n    const response: UpdateValuesResponse = {\n      spreadsheetId: this.spreadsheet.spreadsheetId,\n      updatedRange: valueRange.range,\n      updatedRows: valueRange.values.length,\n      updatedColumns: valueRange.values[0].length,\n      updatedCells: valueRange.values.length * valueRange.values[0].length,\n      updatedData: valueRange,\n    }\n    return response\n  }\n  private iterateRange(range: GridRange, cb: (cell: CellData) => void) {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.ensureGridRange(range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        cb(cell)\n      }\n    }\n  }\n  private iterateValueRange(\n    valueRange: ValueRange,\n    cb: (cell: CellData, value: Value) => void\n  ) {\n    if (valueRange.majorDimension !== \"ROWS\") {\n      throw new Error(\"Only row-major updates are supported\")\n    }\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = this.parseA1Notation(valueRange.range)\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        const value =\n          valueRange.values[row - startRowIndex][col - startColumnIndex]\n        cb(cell, value)\n      }\n    }\n  }\n  private getValueRange(range: string): ValueRange {\n    const {\n      sheetId,\n      startRowIndex,\n      endRowIndex,\n      startColumnIndex,\n      endColumnIndex,\n    } = this.parseA1Notation(range)\n    const valueRange: ValueRange = {\n      range,\n      majorDimension: \"ROWS\",\n      values: [],\n    }\n    for (let row = startRowIndex; row <= endRowIndex; row++) {\n      const values: Value[] = []\n      for (let col = startColumnIndex; col <= endColumnIndex; col++) {\n        const cell = this.getCellNumericIndexes(sheetId, row, col)\n        if (!cell) {\n          throw new Error(\"Cell not found\")\n        }\n        values.push(this.cellValue(cell))\n      }\n      valueRange.values.push(values)\n    }\n    return this.trimValueRange(valueRange)\n  }\n  // When Google Sheets returns a value range, it will trim the data down to the\n  // smallest possible size. It does all of the following:\n  //\n  // 1. Converts cells in non-empty rows up to the first value to empty strings.\n  // 2. Removes all cells after the last non-empty cell in a row.\n  // 3. Removes all rows after the last non-empty row.\n  // 4. Rows that are before the first non-empty row that are empty are replaced with [].\n  //\n  // We replicate this behaviour here.\n  private trimValueRange(valueRange: ValueRange): ValueRange {\n    for (const row of valueRange.values) {\n      if (row.every(v => v == null)) {\n        row.splice(0, row.length)\n        continue\n      }\n      for (let i = row.length - 1; i >= 0; i--) {\n        const cell = row[i]\n        if (cell == null) {\n          row.pop()\n        } else {\n          break\n        }\n      }\n      for (let i = 0; i < row.length; i++) {\n        const cell = row[i]\n        if (cell == null) {\n          row[i] = \"\"\n        } else {\n          break\n        }\n      }\n    }\n    for (let i = valueRange.values.length - 1; i >= 0; i--) {\n      const row = valueRange.values[i]\n      if (row.length === 0) {\n        valueRange.values.pop()\n      } else {\n        break\n      }\n    }\n    return valueRange\n  }\n  private valuesToRowData(values: Value[]): RowData {\n    return {\n      values: values.map(v => {\n        return this.createCellData(v)\n      }),\n    }\n  }\n  private unwrapValue(from: ExtendedValue): Value {\n    if (\"stringValue\" in from) {\n      return from.stringValue\n    } else if (\"numberValue\" in from) {\n      return from.numberValue\n    } else if (\"boolValue\" in from) {\n      return from.boolValue\n    } else if (\"formulaValue\" in from) {\n      return from.formulaValue\n    } else {\n      return null\n    }\n  }\n  private cellValue(from: CellData): Value {\n    return this.unwrapValue(from.userEnteredValue)\n  }\n  private createValue(from: Value): ExtendedValue {\n    if (from == null) {\n      return {} as ExtendedValue\n    } else if (typeof from === \"string\") {\n      return {\n        stringValue: from,\n      }\n    } else if (typeof from === \"number\") {\n      return {\n        numberValue: from,\n      }\n    } else if (typeof from === \"boolean\") {\n      return {\n        boolValue: from,\n      }\n    } else {\n      throw new Error(\"Unsupported value type\")\n    }\n  }\n  private createCellData(value: Value): CellData {\n    return {\n      userEnteredValue: this.createValue(value),\n      effectiveValue: this.createValue(value),\n      formattedValue: value?.toString() || \"\",\n      userEnteredFormat: DEFAULT_CELL_FORMAT,\n      effectiveFormat: DEFAULT_CELL_FORMAT,\n    }\n  }\n  private createEmptyGrid(numRows: number, numCols: number): GridData {\n    const rowData: RowData[] = []\n    for (let row = 0; row < numRows; row++) {\n      const cells: CellData[] = []\n      for (let col = 0; col < numCols; col++) {\n        cells.push(this.createCellData(null))\n      }\n      rowData.push({ values: cells })\n    }\n    const rowMetadata: WorksheetDimensionProperties[] = []\n    for (let row = 0; row < numRows; row++) {\n      rowMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    const columnMetadata: WorksheetDimensionProperties[] = []\n    for (let col = 0; col < numCols; col++) {\n      columnMetadata.push({\n        hiddenByFilter: false,\n        hiddenByUser: false,\n        pixelSize: 100,\n        developerMetadata: [],\n      })\n    }\n    return {\n      startRow: 0,\n      startColumn: 0,\n      rowData,\n      rowMetadata,\n      columnMetadata,\n    }\n  }\n  private cellData(cell: string): CellData | undefined {\n    const { sheetId, startColumnIndex, startRowIndex } =\n      this.parseA1Notation(cell)\n    return this.getCellNumericIndexes(sheetId, startRowIndex, startColumnIndex)\n  }\n  private getCellNumericIndexes(\n    sheet: Sheet | number,\n    row: number,\n    column: number\n  ): CellData | undefined {\n    if (typeof sheet === \"number\") {\n      const foundSheet = this.getSheetById(sheet)\n      if (!foundSheet) {\n        return undefined\n      }\n      sheet = foundSheet\n    }\n    const data = sheet.data[0]\n    const rowData = data.rowData[row]\n    if (!rowData) {\n      return undefined\n    }\n    const cell = rowData.values[column]\n    if (!cell) {\n      return undefined\n    }\n    return cell\n  }\n  // https://developers.google.com/sheets/api/guides/concepts#cell\n  //\n  // Examples from\n  //   https://code.luasoftware.com/tutorials/google-sheets-api/google-sheets-api-range-parameter-a1-notation\n  //\n  //   \"Sheet1!A1\"     -> First cell on Row 1 Col 1\n  //   \"Sheet1!A1:C1\"  -> Col 1-3 (A, B, C) on Row 1 = A1, B1, C1\n  //   \"A1\"            -> First visible sheet (if sheet name is ommitted)\n  //   \"'My Sheet'!A1\" -> If sheet name which contain space or start with a bracket.\n  //   \"Sheet1\"        -> All cells in Sheet1.\n  //   \"Sheet1!A:A\"    -> All cells on Col 1.\n  //   \"Sheet1!A:B\"    -> All cells on Col 1 and 2.\n  //   \"Sheet1!1:1\"    -> All cells on Row 1.\n  //   \"Sheet1!1:2\"    -> All cells on Row 1 and 2.\n  //\n  // How that translates to our code below, omitting the `sheet` property:\n  //\n  //   \"Sheet1!A1\"     -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 0 } }\n  //   \"Sheet1!A1:C1\"  -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 2 } }\n  //   \"A1\"            -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 0 } }\n  //   \"Sheet1\"        -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 100, column: 25 } }\n  //                    -> This is because we default to having a 100x26 grid.\n  //   \"Sheet1!A:A\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 99, column: 0 } }\n  //   \"Sheet1!A:B\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 99, column: 1 } }\n  //   \"Sheet1!1:1\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 0, column: 25 } }\n  //   \"Sheet1!1:2\"    -> { topLeft: { row: 0, column: 0 }, bottomRight: { row: 1, column: 25 } }\n  private parseA1Notation(range: string): Required<GridRange> {\n    let sheet: Sheet\n    let rest: string\n    if (!range.includes(\"!\")) {\n      sheet = this.spreadsheet.sheets[0]\n      rest = range\n    } else {\n      let sheetName = range.split(\"!\")[0]\n      if (sheetName.startsWith(\"'\") && sheetName.endsWith(\"'\")) {\n        sheetName = sheetName.slice(1, -1)\n      }\n      const foundSheet = this.getSheetByName(sheetName)\n      if (!foundSheet) {\n        throw new Error(`Sheet ${sheetName} not found`)\n      }\n      sheet = foundSheet\n      rest = range.split(\"!\")[1]\n    }\n    const [topLeft, bottomRight] = rest.split(\":\")\n    const parsedTopLeft = topLeft ? this.parseCell(topLeft) : undefined\n    let parsedBottomRight = bottomRight\n      ? this.parseCell(bottomRight)\n      : undefined\n    if (!parsedTopLeft && !parsedBottomRight) {\n      throw new Error(\"No range provided\")\n    }\n    if (!parsedTopLeft) {\n      throw new Error(\"No top left cell provided\")\n    }\n    if (!parsedBottomRight) {\n      parsedBottomRight = parsedTopLeft\n    }\n    return this.ensureGridRange({\n      sheetId: sheet.properties.sheetId,\n      startRowIndex: parsedTopLeft.row,\n      endRowIndex: parsedBottomRight.row,\n      startColumnIndex: parsedTopLeft.column,\n      endColumnIndex: parsedBottomRight.column,\n    })\n  }\n  private ensureGridRange(range: GridRange): Required<GridRange> {\n    const sheet = this.getSheetById(range.sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    return {\n      sheetId: range.sheetId,\n      startRowIndex: range.startRowIndex ?? 0,\n      endRowIndex:\n        range.endRowIndex ?? sheet.properties.gridProperties.rowCount - 1,\n      startColumnIndex: range.startColumnIndex ?? 0,\n      endColumnIndex:\n        range.endColumnIndex ?? sheet.properties.gridProperties.columnCount - 1,\n    }\n  }\n  private createA1(range: Required<GridRange>) {\n    const {\n      sheetId,\n      startColumnIndex,\n      startRowIndex,\n      endColumnIndex,\n      endRowIndex,\n    } = range\n    const sheet = this.getSheetById(sheetId)\n    if (!sheet) {\n      throw new Error(`Sheet ${range.sheetId} not found`)\n    }\n    let title = sheet.properties.title\n    if (title.includes(\" \")) {\n      title = `'${title}'`\n    }\n    const topLeftLetter = this.numberToLetter(startColumnIndex)\n    const bottomRightLetter = this.numberToLetter(endColumnIndex)\n    const topLeftRow = startRowIndex + 1\n    const bottomRightRow = endRowIndex + 1\n    return `${title}!${topLeftLetter}${topLeftRow}:${bottomRightLetter}${bottomRightRow}`\n  }\n  private parseCell(cell: string): Partial<Range> {\n    const firstChar = cell.slice(0, 1)\n    if (this.isInteger(firstChar)) {\n      return { row: parseInt(cell) - 1 }\n    }\n    const column = this.letterToNumber(firstChar)\n    if (cell.length === 1) {\n      return { column }\n    }\n    const number = cell.slice(1)\n    return { row: parseInt(number) - 1, column }\n  }\n  private isInteger(value: string): boolean {\n    return !isNaN(parseInt(value))\n  }\n  private letterToNumber(letter: string): number {\n    return letter.charCodeAt(0) - 65\n  }\n  private numberToLetter(number: number): string {\n    return String.fromCharCode(number + 65)\n  }\n  private getSheetByName(name: string): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.title === name\n    )\n  }\n  private getSheetById(id: number): Sheet | undefined {\n    return this.spreadsheet.sheets.find(\n      sheet => sheet.properties.sheetId === id\n    )\n  }\n}"
}