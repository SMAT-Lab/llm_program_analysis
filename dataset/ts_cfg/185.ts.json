{
  "type": "file",
  "name": "185.ts",
  "label": "185.ts",
  "start_line": -1,
  "end_line": 347,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 347,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 347,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: %dflt\nstaticinvoke <@%unk/%unk: .RegisterClass()>('BABYLON.NormalMaterial', NormalMaterial)\nreturn",
              "start_line": 1,
              "end_line": 347,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "NormalMaterialDefines",
      "label": "NormalMaterialDefines",
      "start_line": 1,
      "end_line": 347,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 347,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterialDefines\ninstanceinvoke this.<@ts_files/185.ts: NormalMaterialDefines.%instInit()>()\nstaticinvoke <@%unk/%unk: .super()>()\ninstanceinvoke this.<@%unk/%unk: .rebuild()>()\nreturn",
              "start_line": 1,
              "end_line": 347,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n        super();\n        this.rebuild();\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class NormalMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public LIGHTING = false;\n    public IMAGEPROCESSINGPOSTPROCESS = false;\n    public SKIPFINALCOLORCLAMP = false;\n    public LOGARITHMICDEPTH = false;\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}"
    },
    {
      "type": "class",
      "name": "NormalMaterial",
      "label": "NormalMaterial",
      "start_line": 1,
      "end_line": 347,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 347,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/185.ts: NormalMaterial.%instInit()>()\nname = parameter0: string\nscene = parameter1: Scene\nthis = this: @ts_files/185.ts: NormalMaterial\nstaticinvoke <@%unk/%unk: .super()>(name, scene)\nreturn",
              "start_line": 1,
              "end_line": 347,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string, scene?: Scene) {\n        super(name, scene);\n    }"
        },
        {
          "type": "function",
          "name": "needAlphaBlending",
          "label": "needAlphaBlending",
          "start_line": 1,
          "end_line": 122,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\n%0 = this.<@ts_files/185.ts: NormalMaterial.alpha>\n%1 = %0 < 1\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override needAlphaBlending(): boolean {\n        return this.alpha < 1.0;\n    }"
        },
        {
          "type": "function",
          "name": "needAlphaBlendingForMesh",
          "label": "needAlphaBlendingForMesh",
          "start_line": 1,
          "end_line": 125,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mesh = parameter0: AbstractMesh\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = instanceinvoke this.<@ts_files/185.ts: NormalMaterial.needAlphaBlending()>()\n%1 = mesh.<@%unk/%unk: .visibility>\n%2 = %1 < 1\n%3 = %0 || %2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\n        return this.needAlphaBlending() || mesh.visibility < 1.0;\n    }"
        },
        {
          "type": "function",
          "name": "needAlphaTesting",
          "label": "needAlphaTesting",
          "start_line": 1,
          "end_line": 326,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\nreturn false",
              "start_line": 1,
              "end_line": 326,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override needAlphaTesting(): boolean {\n        return false;\n    }"
        },
        {
          "type": "function",
          "name": "getAlphaTestTexture",
          "label": "getAlphaTestTexture",
          "start_line": 1,
          "end_line": 132,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\nreturn null",
              "start_line": 1,
              "end_line": 132,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }"
        },
        {
          "type": "function",
          "name": "isReadyForSubMesh",
          "label": "isReadyForSubMesh",
          "start_line": 1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mesh = parameter0: AbstractMesh\nsubMesh = parameter1: SubMesh\nuseInstances = parameter2: boolean\nthis = this: @ts_files/185.ts: NormalMaterial\ndrawWrapper = subMesh.<@%unk/%unk: ._drawWrapper>\n%0 = this.<@ts_files/185.ts: NormalMaterial.isFrozen>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = drawWrapper.<@%unk/%unk: .effect>\n%2 = drawWrapper.<@%unk/%unk: ._wasPreviouslyReady>\n%3 = %1 && %2\n%4 = drawWrapper.<@%unk/%unk: ._wasPreviouslyUsingInstances>\n%5 = %4 === useInstances\n%6 = %3 && %5\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return true",
                      "start_line": 139,
                      "end_line": 324,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = subMesh.<@%unk/%unk: .materialDefines>\n%8 = !%7\nif %8 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = new @ts_files/185.ts: NormalMaterialDefines\ninstanceinvoke %9.<@ts_files/185.ts: NormalMaterialDefines.constructor()>()\nsubMesh.<@%unk/%unk: .materialDefines> = %9",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "defines = <@ts_files/185.ts: NormalMaterialDefines>subMesh.<@%unk/%unk: .materialDefines>\nscene = instanceinvoke this.<@%unk/%unk: .getScene()>()\n%10 = instanceinvoke this.<@%unk/%unk: ._isReadyForSubMesh()>(subMesh)\nif %10 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return true",
                                  "start_line": 139,
                                  "end_line": 324,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "engine = instanceinvoke scene.<@%unk/%unk: .getEngine()>()\n%11 = defines.<@ts_files/185.ts: NormalMaterialDefines._areTexturesDirty>\nif %11 != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "defines.<@ts_files/185.ts: NormalMaterialDefines._needUVs> = false\n%12 = scene.<@%unk/%unk: .texturesEnabled>\nif %12 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%13 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>\n%14 = MaterialFlags.<@%unk/%unk: .DiffuseTextureEnabled>\n%15 = %13 && %14\nif %15 != false",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%16 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>\n%17 = instanceinvoke %16.<@%unk/%unk: .isReady()>()\n%18 = !%17\nif %18 != 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return false",
                                                  "start_line": 129,
                                                  "end_line": 326,
                                                  "successors": []
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "defines.<@ts_files/185.ts: NormalMaterialDefines._needUVs> = true\ndefines.<@ts_files/185.ts: NormalMaterialDefines.DIFFUSE> = true",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%19 = this.<@ts_files/185.ts: NormalMaterial._useLogarithmicDepth>\n%20 = this.<@ts_files/185.ts: NormalMaterial.pointsCloud>\n%21 = this.<@ts_files/185.ts: NormalMaterial.fogEnabled>\n%22 = instanceinvoke this.<@%unk/%unk: ._shouldTurnAlphaTestOn()>(mesh)\nstaticinvoke <@%unk/%unk: .PrepareDefinesForMisc()>(mesh, scene, %19, %20, %21, %22, defines)\ndefines.<@ts_files/185.ts: NormalMaterialDefines._needNormals> = true\n%23 = this.<@ts_files/185.ts: NormalMaterial._maxSimultaneousLights>\n%24 = this.<@ts_files/185.ts: NormalMaterial._disableLighting>\nstaticinvoke <@%unk/%unk: .PrepareDefinesForLights()>(scene, mesh, defines, false, %23, %24)\nif useInstances != false",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%25 = true",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "staticinvoke <@%unk/%unk: .PrepareDefinesForFrameBoundValues()>(scene, engine, this, defines, %25)\n%26 = this.<@ts_files/185.ts: NormalMaterial._disableLighting>\n%27 = !%26\ndefines.<@ts_files/185.ts: NormalMaterialDefines.LIGHTING> = %27\nstaticinvoke <@%unk/%unk: .PrepareDefinesForAttributes()>(mesh, defines, true, true)\n%28 = defines.<@ts_files/185.ts: NormalMaterialDefines.isDirty>\nif %28 != 0",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "instanceinvoke defines.<@%unk/%unk: .markAsProcessed()>()\ninstanceinvoke scene.<@%unk/%unk: .resetCachedMaterial()>()\n%29 = new @%unk/%unk: EffectFallbacks\ninstanceinvoke %29.<@%unk/%unk: EffectFallbacks.constructor()>()\nfallbacks = %29\n%30 = defines.<@ts_files/185.ts: NormalMaterialDefines.FOG>\nif %30 != false",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "instanceinvoke fallbacks.<@%unk/%unk: .addFallback()>(1, 'FOG')",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "staticinvoke <@%unk/%unk: .HandleFallbacksForShadows()>(defines, fallbacks)\n%31 = defines.<@ts_files/185.ts: NormalMaterialDefines.NUM_BONE_INFLUENCERS>\nif %31 > 0",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "instanceinvoke fallbacks.<@%unk/%unk: .addCPUSkinningFallback()>(0, mesh)",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%32 = scene.<@%unk/%unk: .imageProcessingConfiguration>\n%33 = %32.<@%unk/%unk: .applyByPostProcess>\ndefines.<@ts_files/185.ts: NormalMaterialDefines.IMAGEPROCESSINGPOSTPROCESS> = %33\n%34 = VertexBuffer.<@%unk/%unk: .PositionKind>\n%35 = newarray (unknown)[1]\n%35[0] = %34\nattribs = %35\n%36 = defines.<@ts_files/185.ts: NormalMaterialDefines.NORMAL>\nif %36 != false",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "block",
                                                                                      "name": "Block?",
                                                                                      "label": "%37 = VertexBuffer.<@%unk/%unk: .NormalKind>\ninstanceinvoke attribs.<@%unk/%unk: .push()>(%37)",
                                                                                      "start_line": 1,
                                                                                      "end_line": 1,
                                                                                      "successors": [
                                                                                        {
                                                                                          "type": "block",
                                                                                          "name": "Block?",
                                                                                          "label": "%38 = defines.<@ts_files/185.ts: NormalMaterialDefines.UV1>\nif %38 != false",
                                                                                          "start_line": 1,
                                                                                          "end_line": 1,
                                                                                          "successors": [
                                                                                            {
                                                                                              "type": "block",
                                                                                              "name": "Block?",
                                                                                              "label": "%39 = VertexBuffer.<@%unk/%unk: .UVKind>\ninstanceinvoke attribs.<@%unk/%unk: .push()>(%39)",
                                                                                              "start_line": 1,
                                                                                              "end_line": 1,
                                                                                              "successors": [
                                                                                                {
                                                                                                  "type": "block",
                                                                                                  "name": "Block?",
                                                                                                  "label": "%40 = defines.<@ts_files/185.ts: NormalMaterialDefines.UV2>\nif %40 != false",
                                                                                                  "start_line": 1,
                                                                                                  "end_line": 1,
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "type": "block",
                                                                                                      "name": "Block?",
                                                                                                      "label": "%41 = VertexBuffer.<@%unk/%unk: .UV2Kind>\ninstanceinvoke attribs.<@%unk/%unk: .push()>(%41)",
                                                                                                      "start_line": 1,
                                                                                                      "end_line": 1,
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "type": "block",
                                                                                                          "name": "Block?",
                                                                                                          "label": "staticinvoke <@%unk/%unk: .PrepareAttributesForBones()>(attribs, mesh, defines, fallbacks)\nstaticinvoke <@%unk/%unk: .PrepareAttributesForInstances()>(attribs, defines)\nshaderName = 'normal'\njoin = instanceinvoke defines.<@%unk/%unk: .toString()>()\n%42 = newarray (string)[13]\n%42[0] = 'world'\n%42[1] = 'view'\n%42[2] = 'viewProjection'\n%42[3] = 'vEyePosition'\n%42[4] = 'vLightsType'\n%42[5] = 'vDiffuseColor'\n%42[6] = 'vFogInfos'\n%42[7] = 'vFogColor'\n%42[8] = 'pointSize'\n%42[9] = 'vDiffuseInfos'\n%42[10] = 'mBones'\n%42[11] = 'diffuseMatrix'\n%42[12] = 'logarithmicDepthConstant'\nuniforms = %42\n%43 = newarray (string)[1]\n%43[0] = 'diffuseSampler'\nsamplers = %43\n%44 = newarray (any)[0]\nuniformBuffers = %44\nstaticinvoke <@%unk/%unk: .addClipPlaneUniforms()>(uniforms)\n%45 = new @ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0\ninstanceinvoke %45.<@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0.constructor()>()\n%46 = <@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0>%45\nstaticinvoke <@%unk/%unk: .PrepareUniformsAndSamplersList()>(%46)\n%47 = new @ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1\ninstanceinvoke %47.<@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1.constructor()>()\n%48 = <@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1>%47\n%49 = instanceinvoke scene.<@%unk/%unk: .getEngine()>()\n%50 = instanceinvoke %49.<@%unk/%unk: .createEffect()>(shaderName, %48, engine)\n%51 = this.<@ts_files/185.ts: NormalMaterial._materialContext>\ninstanceinvoke subMesh.<@%unk/%unk: .setEffect()>(%50, defines, %51)",
                                                                                                          "start_line": 1,
                                                                                                          "end_line": 1,
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "type": "block",
                                                                                                              "name": "Block?",
                                                                                                              "label": "%52 = subMesh.<@%unk/%unk: .effect>\n%53 = !%52\n%54 = subMesh.<@%unk/%unk: .effect>\n%55 = instanceinvoke %54.<@%unk/%unk: .isReady()>()\n%56 = !%55\n%57 = %53 || %56\nif %57 != false",
                                                                                                              "start_line": 1,
                                                                                                              "end_line": 1,
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "type": "block",
                                                                                                                  "name": "Block?",
                                                                                                                  "label": "return false",
                                                                                                                  "start_line": 129,
                                                                                                                  "end_line": 326,
                                                                                                                  "successors": []
                                                                                                                },
                                                                                                                {
                                                                                                                  "type": "block",
                                                                                                                  "name": "Block?",
                                                                                                                  "label": "%58 = instanceinvoke scene.<@%unk/%unk: .getRenderId()>()\ndefines.<@ts_files/185.ts: NormalMaterialDefines._renderId> = %58\ndrawWrapper.<@%unk/%unk: ._wasPreviouslyReady> = true\n%59 = !useInstances\n%60 = !%59\ndrawWrapper.<@%unk/%unk: ._wasPreviouslyUsingInstances> = %60\nreturn true",
                                                                                                                  "start_line": 1,
                                                                                                                  "end_line": 324,
                                                                                                                  "successors": []
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    },
                                                                                                    {
                                                                                                      "type": "blockRef",
                                                                                                      "label": "(RepeatedBlock)"
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "type": "blockRef",
                                                                                              "label": "(RepeatedBlock)"
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "blockRef",
                                                                                      "label": "(RepeatedBlock)"
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "blockRef",
                                                                              "label": "(RepeatedBlock)"
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "blockRef",
                                                                      "label": "(RepeatedBlock)"
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%25 = false",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        const drawWrapper = subMesh._drawWrapper;\n        if (this.isFrozen) {\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new NormalMaterialDefines();\n        }\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n        // Lights\n        defines._needNormals = true;\n        PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\n        defines.LIGHTING = !this._disableLighting;\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks);\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            const shaderName = \"normal\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vDiffuseColor\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"logarithmicDepthConstant\",\n            ];\n            const samplers = [\"diffuseSampler\"];\n            const uniformBuffers: string[] = [];\n            addClipPlaneUniforms(uniforms);\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(\n                scene.getEngine().createEffect(\n                    shaderName,\n                    <IEffectCreationOptions>{\n                        attributes: attribs,\n                        uniformsNames: uniforms,\n                        uniformBuffersNames: uniformBuffers,\n                        samplers: samplers,\n                        defines: join,\n                        fallbacks: fallbacks,\n                        onCompiled: this.onCompiled,\n                        onError: this.onError,\n                        indexParameters: { maxSimultaneousLights: 4 },\n                    },\n                    engine\n                ),\n                defines,\n                this._materialContext\n            );\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        return true;\n    }"
        },
        {
          "type": "function",
          "name": "bindForSubMesh",
          "label": "bindForSubMesh",
          "start_line": 1,
          "end_line": 257,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "world = parameter0: Matrix\nmesh = parameter1: Mesh\nsubMesh = parameter2: SubMesh\nthis = this: @ts_files/185.ts: NormalMaterial\nscene = instanceinvoke this.<@%unk/%unk: .getScene()>()\ndefines = <@ts_files/185.ts: NormalMaterialDefines>subMesh.<@%unk/%unk: .materialDefines>\n%0 = !defines\nif %0 != undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 123,
                  "end_line": 347,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "effect = subMesh.<@%unk/%unk: .effect>\n%1 = !effect\nif %1 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 123,
                      "end_line": 347,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/185.ts: NormalMaterial._activeEffect> = effect\ninstanceinvoke this.<@%unk/%unk: .bindOnlyWorldMatrix()>(world)\n%2 = instanceinvoke scene.<@%unk/%unk: .getTransformMatrix()>()\n%3 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %3.<@%unk/%unk: .setMatrix()>('viewProjection', %2)\n%4 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\nstaticinvoke <@%unk/%unk: .BindBonesParameters()>(mesh, %4)\n%5 = instanceinvoke this.<@%unk/%unk: ._mustRebind()>(scene, effect, subMesh)\nif %5 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%7 = MaterialFlags.<@%unk/%unk: .DiffuseTextureEnabled>\n%8 = %6 && %7\nif %8 != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%10 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %10.<@%unk/%unk: .setTexture()>('diffuseSampler', %9)\n%11 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%12 = %11.<@%unk/%unk: .coordinatesIndex>\n%13 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%14 = %13.<@%unk/%unk: .level>\n%15 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %15.<@%unk/%unk: .setFloat2()>('vDiffuseInfos', %12, %14)\n%16 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%17 = instanceinvoke %16.<@%unk/%unk: .getTextureMatrix()>()\n%18 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %18.<@%unk/%unk: .setMatrix()>('diffuseMatrix', %17)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "staticinvoke <@%unk/%unk: .bindClipPlane()>(effect, this, scene)\n%19 = this.<@ts_files/185.ts: NormalMaterial.pointsCloud>\nif %19 != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%20 = this.<@ts_files/185.ts: NormalMaterial.pointSize>\n%21 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %21.<@%unk/%unk: .setFloat()>('pointSize', %20)",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%22 = this.<@ts_files/185.ts: NormalMaterial._useLogarithmicDepth>\nif %22 != 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "staticinvoke <@%unk/%unk: .BindLogDepth()>(defines, effect, scene)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "instanceinvoke scene.<@%unk/%unk: .bindEyePosition()>(effect)",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%23 = this.<@ts_files/185.ts: NormalMaterial.diffuseColor>\n%24 = this.<@ts_files/185.ts: NormalMaterial.alpha>\n%25 = mesh.<@%unk/%unk: .visibility>\n%26 = %24 * %25\n%27 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %27.<@%unk/%unk: .setColor4()>('vDiffuseColor', %23, %26)\n%28 = scene.<@%unk/%unk: .lightsEnabled>\n%29 = this.<@ts_files/185.ts: NormalMaterial.disableLighting>\n%30 = !%29\n%31 = %28 && %30\nif %31 != false",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%32 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\nstaticinvoke <@%unk/%unk: .BindLights()>(scene, mesh, %32, defines)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%33 = scene.<@%unk/%unk: .fogEnabled>\n%34 = mesh.<@%unk/%unk: .applyFog>\n%35 = %33 && %34\n%36 = scene.<@%unk/%unk: .fogMode>\n%37 = Scene.<@%unk/%unk: .FOGMODE_NONE>\n%38 = %36 !== %37\n%39 = %35 && %38\nif %39 != false",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "%40 = instanceinvoke scene.<@%unk/%unk: .getViewMatrix()>()\n%41 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke %41.<@%unk/%unk: .setMatrix()>('view', %40)",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%42 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\nstaticinvoke <@%unk/%unk: .BindFogParameters()>(scene, mesh, %42)\n%43 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>\ninstanceinvoke this.<@%unk/%unk: ._afterBind()>(mesh, %43, subMesh)\nreturn",
                                                                      "start_line": 1,
                                                                      "end_line": 347,
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        const scene = this.getScene();\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect);\n        if (this._mustRebind(scene, effect, subMesh)) {\n            // Textures\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n            // Log. depth\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            scene.bindEyePosition(effect);\n        }\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n        // Lights\n        if (scene.lightsEnabled && !this.disableLighting) {\n            BindLights(scene, mesh, this._activeEffect, defines);\n        }\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n        // Fog\n        BindFogParameters(scene, mesh, this._activeEffect);\n        this._afterBind(mesh, this._activeEffect, subMesh);\n    }"
        },
        {
          "type": "function",
          "name": "getAnimatables",
          "label": "getAnimatables",
          "start_line": 1,
          "end_line": 305,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\n%0 = newarray (any)[0]\nresults = %0\n%1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%2 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%3 = %2.<@%unk/%unk: .animations>\n%4 = %1 && %3\n%5 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\n%6 = %5.<@%unk/%unk: .animations>\n%7 = %6.<@%unk/%unk: .length>\n%8 = %7 > 0\n%9 = %4 && %8\nif %9 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%10 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\ninstanceinvoke results.<@%unk/%unk: .push()>(%10)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return results",
                      "start_line": 310,
                      "end_line": 310,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getAnimatables(): IAnimatable[] {\n        const results = [];\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n        return results;\n    }"
        },
        {
          "type": "function",
          "name": "getActiveTextures",
          "label": "getActiveTextures",
          "start_line": 1,
          "end_line": 312,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\nactiveTextures = instanceinvoke super.<@%unk/%unk: .getActiveTextures()>()\n%0 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>\ninstanceinvoke activeTextures.<@%unk/%unk: .push()>(%1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return activeTextures",
                      "start_line": 317,
                      "end_line": 317,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getActiveTextures(): BaseTexture[] {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        return activeTextures;\n    }"
        },
        {
          "type": "function",
          "name": "hasTexture",
          "label": "hasTexture",
          "start_line": 1,
          "end_line": 319,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "texture = parameter0: BaseTexture\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = instanceinvoke super.<@%unk/%unk: .hasTexture()>(texture)\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return true",
                  "start_line": 139,
                  "end_line": 324,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\nif %1 === texture",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return true",
                      "start_line": 139,
                      "end_line": 324,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return false",
                      "start_line": 129,
                      "end_line": 326,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n        return false;\n    }"
        },
        {
          "type": "function",
          "name": "dispose",
          "label": "dispose",
          "start_line": 1,
          "end_line": 328,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "forceDisposeEffect = parameter0: boolean\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>\ninstanceinvoke %1.<@%unk/%unk: .dispose()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke super.<@%unk/%unk: .dispose()>(forceDisposeEffect)\nreturn",
                      "start_line": 1,
                      "end_line": 347,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        super.dispose(forceDisposeEffect);\n    }"
        },
        {
          "type": "function",
          "name": "clone",
          "label": "clone",
          "start_line": 1,
          "end_line": 334,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = instanceinvoke SerializationHelper.<@%unk/%unk: .Clone()>(%AM0$clone, this)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override clone(name: string): NormalMaterial {\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\n    }"
        },
        {
          "type": "function",
          "name": "serialize",
          "label": "serialize",
          "start_line": 1,
          "end_line": 340,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\nserializationObject = instanceinvoke super.<@%unk/%unk: .serialize()>()\nserializationObject.<@%unk/%unk: .customType> = 'BABYLON.NormalMaterial'\nreturn serializationObject",
              "start_line": 1,
              "end_line": 340,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\n        return serializationObject;\n    }"
        },
        {
          "type": "function",
          "name": "getClassName",
          "label": "getClassName",
          "start_line": 1,
          "end_line": 342,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/185.ts: NormalMaterial\nreturn 'NormalMaterial'",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getClassName(): string {\n        return \"NormalMaterial\";\n    }"
        },
        {
          "type": "function",
          "name": "%AM0$clone",
          "label": "%AM0$clone",
          "start_line": 1,
          "end_line": 335,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [name]\nname = %closures0.name\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = new @ts_files/185.ts: NormalMaterial\n%1 = instanceinvoke this.<@%unk/%unk: .getScene()>()\ninstanceinvoke %0.<@ts_files/185.ts: NormalMaterial.constructor(string, Scene)>(name, %1)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => new NormalMaterial(name, this.getScene())"
        },
        {
          "type": "function",
          "name": "%AM1$Parse",
          "label": "%AM1$Parse",
          "start_line": 1,
          "end_line": 347,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [source, scene]\nsource = %closures0.source\nscene = %closures0.scene\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = new @ts_files/185.ts: NormalMaterial\n%1 = source.<@%unk/%unk: .name>\ninstanceinvoke %0.<@ts_files/185.ts: NormalMaterial.constructor(string, Scene)>(%1, scene)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => new NormalMaterial(source.name, scene)"
        },
        {
          "type": "function",
          "name": "Parse",
          "label": "Parse",
          "start_line": 1,
          "end_line": 346,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "source = parameter0: any\nscene = parameter1: Scene\nrootUrl = parameter2: string\nthis = this: @ts_files/185.ts: NormalMaterial\n%0 = instanceinvoke SerializationHelper.<@%unk/%unk: .Parse()>(%AM1$Parse, source, scene, rootUrl)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static override Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class NormalMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n    constructor(name: string, scene?: Scene) {\n        super(name, scene);\n    }\n    public override needAlphaBlending(): boolean {\n        return this.alpha < 1.0;\n    }\n    public override needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\n        return this.needAlphaBlending() || mesh.visibility < 1.0;\n    }\n    public override needAlphaTesting(): boolean {\n        return false;\n    }\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n    // Methods\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        const drawWrapper = subMesh._drawWrapper;\n        if (this.isFrozen) {\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new NormalMaterialDefines();\n        }\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n        // Lights\n        defines._needNormals = true;\n        PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\n        defines.LIGHTING = !this._disableLighting;\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks);\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            const shaderName = \"normal\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vDiffuseColor\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"logarithmicDepthConstant\",\n            ];\n            const samplers = [\"diffuseSampler\"];\n            const uniformBuffers: string[] = [];\n            addClipPlaneUniforms(uniforms);\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(\n                scene.getEngine().createEffect(\n                    shaderName,\n                    <IEffectCreationOptions>{\n                        attributes: attribs,\n                        uniformsNames: uniforms,\n                        uniformBuffersNames: uniformBuffers,\n                        samplers: samplers,\n                        defines: join,\n                        fallbacks: fallbacks,\n                        onCompiled: this.onCompiled,\n                        onError: this.onError,\n                        indexParameters: { maxSimultaneousLights: 4 },\n                    },\n                    engine\n                ),\n                defines,\n                this._materialContext\n            );\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        return true;\n    }\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        const scene = this.getScene();\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect);\n        if (this._mustRebind(scene, effect, subMesh)) {\n            // Textures\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n            // Log. depth\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            scene.bindEyePosition(effect);\n        }\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n        // Lights\n        if (scene.lightsEnabled && !this.disableLighting) {\n            BindLights(scene, mesh, this._activeEffect, defines);\n        }\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n        // Fog\n        BindFogParameters(scene, mesh, this._activeEffect);\n        this._afterBind(mesh, this._activeEffect, subMesh);\n    }\n    public override getAnimatables(): IAnimatable[] {\n        const results = [];\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n        return results;\n    }\n    public override getActiveTextures(): BaseTexture[] {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        return activeTextures;\n    }\n    public override hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    public override dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        super.dispose(forceDisposeEffect);\n    }\n    public override clone(name: string): NormalMaterial {\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\n    }\n    public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\n        return serializationObject;\n    }\n    public override getClassName(): string {\n        return \"NormalMaterial\";\n    }\n    // Statics\n    public static override Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}"
    },
    {
      "type": "class",
      "name": "%AC$NormalMaterial$isReadyForSubMesh$0",
      "label": "%AC$NormalMaterial$isReadyForSubMesh$0",
      "start_line": 222,
      "end_line": 222,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$NormalMaterial$isReadyForSubMesh$1$%instInit$2",
      "label": "%AC$%AC$NormalMaterial$isReadyForSubMesh$1$%instInit$2",
      "start_line": 241,
      "end_line": 241,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ maxSimultaneousLights: 4 }"
    },
    {
      "type": "class",
      "name": "%AC$NormalMaterial$isReadyForSubMesh$1",
      "label": "%AC$NormalMaterial$isReadyForSubMesh$1",
      "start_line": 232,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n                        attributes: attribs,\n                        uniformsNames: uniforms,\n                        uniformBuffersNames: uniformBuffers,\n                        samplers: samplers,\n                        defines: join,\n                        fallbacks: fallbacks,\n                        onCompiled: this.onCompiled,\n                        onError: this.onError,\n                        indexParameters: { maxSimultaneousLights: 4 },\n                    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { Nullable } from \"core/types\";\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3 } from \"core/Misc/decorators\";\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\nimport type { Matrix } from \"core/Maths/math.vector\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\nimport { VertexBuffer } from \"core/Buffers/buffer\";\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\nimport type { SubMesh } from \"core/Meshes/subMesh\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport { Scene } from \"core/scene\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport \"./normal.fragment\";\nimport \"./normal.vertex\";\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\nimport {\n    BindBonesParameters,\n    BindFogParameters,\n    BindLights,\n    BindLogDepth,\n    HandleFallbacksForShadows,\n    PrepareAttributesForBones,\n    PrepareAttributesForInstances,\n    PrepareDefinesForAttributes,\n    PrepareDefinesForFrameBoundValues,\n    PrepareDefinesForLights,\n    PrepareDefinesForMisc,\n    PrepareUniformsAndSamplersList,\n} from \"core/Materials/materialHelper.functions\";\nclass NormalMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public LIGHTING = false;\n    public IMAGEPROCESSINGPOSTPROCESS = false;\n    public SKIPFINALCOLORCLAMP = false;\n    public LOGARITHMICDEPTH = false;\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\nexport class NormalMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n    constructor(name: string, scene?: Scene) {\n        super(name, scene);\n    }\n    public override needAlphaBlending(): boolean {\n        return this.alpha < 1.0;\n    }\n    public override needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\n        return this.needAlphaBlending() || mesh.visibility < 1.0;\n    }\n    public override needAlphaTesting(): boolean {\n        return false;\n    }\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n    // Methods\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        const drawWrapper = subMesh._drawWrapper;\n        if (this.isFrozen) {\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new NormalMaterialDefines();\n        }\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n        // Lights\n        defines._needNormals = true;\n        PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\n        defines.LIGHTING = !this._disableLighting;\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks);\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            const shaderName = \"normal\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vDiffuseColor\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"logarithmicDepthConstant\",\n            ];\n            const samplers = [\"diffuseSampler\"];\n            const uniformBuffers: string[] = [];\n            addClipPlaneUniforms(uniforms);\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(\n                scene.getEngine().createEffect(\n                    shaderName,\n                    <IEffectCreationOptions>{\n                        attributes: attribs,\n                        uniformsNames: uniforms,\n                        uniformBuffersNames: uniformBuffers,\n                        samplers: samplers,\n                        defines: join,\n                        fallbacks: fallbacks,\n                        onCompiled: this.onCompiled,\n                        onError: this.onError,\n                        indexParameters: { maxSimultaneousLights: 4 },\n                    },\n                    engine\n                ),\n                defines,\n                this._materialContext\n            );\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        return true;\n    }\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        const scene = this.getScene();\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect);\n        if (this._mustRebind(scene, effect, subMesh)) {\n            // Textures\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n            // Log. depth\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            scene.bindEyePosition(effect);\n        }\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n        // Lights\n        if (scene.lightsEnabled && !this.disableLighting) {\n            BindLights(scene, mesh, this._activeEffect, defines);\n        }\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n        // Fog\n        BindFogParameters(scene, mesh, this._activeEffect);\n        this._afterBind(mesh, this._activeEffect, subMesh);\n    }\n    public override getAnimatables(): IAnimatable[] {\n        const results = [];\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n        return results;\n    }\n    public override getActiveTextures(): BaseTexture[] {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        return activeTextures;\n    }\n    public override hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    public override dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        super.dispose(forceDisposeEffect);\n    }\n    public override clone(name: string): NormalMaterial {\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\n    }\n    public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\n        return serializationObject;\n    }\n    public override getClassName(): string {\n        return \"NormalMaterial\";\n    }\n    // Statics\n    public static override Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.NormalMaterial\", NormalMaterial);"
}