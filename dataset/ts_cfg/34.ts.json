{
  "type": "file",
  "name": "34.ts",
  "label": "34.ts",
  "start_line": -1,
  "end_line": 78,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 57,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/34.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 57,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "Broadcast",
      "label": "Broadcast",
      "start_line": 1,
      "end_line": 78,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/34.ts: Broadcast\ninstanceinvoke this.<@ts_files/34.ts: Broadcast.%instInit()>()\nreturn",
              "start_line": 1,
              "end_line": 57,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n  }"
        },
        {
          "type": "function",
          "name": "on",
          "label": "on",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: string\ncallback = parameter1: CallbackType\nthis = this: @ts_files/34.ts: Broadcast\n%0 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%1 = instanceinvoke %0.<@%unk/%unk: .get()>(event)\n%2 = %1 === null\n%3 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%4 = instanceinvoke %3.<@%unk/%unk: .get()>(event)\n%5 = %4 === undefined\n%6 = %2 || %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = newarray (any)[0]\n%8 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ninstanceinvoke %8.<@%unk/%unk: .set()>(event, %7)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%10 = instanceinvoke %9.<@%unk/%unk: .get()>(event)\ninstanceinvoke %10.<@%unk/%unk: .push()>(callback)\nreturn",
                      "start_line": 1,
                      "end_line": 57,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public on(event: string, callback: CallbackType): void {\n    if (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {\n      this.callBackArray.set(event, []);\n    }\n    this.callBackArray.get(event).push(callback);\n  }"
        },
        {
          "type": "function",
          "name": "off",
          "label": "off",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: string|null\ncallback = parameter1: CallbackType|null\nthis = this: @ts_files/34.ts: Broadcast\nif event == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ninstanceinvoke %0.<@%unk/%unk: .clear()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ncbs = instanceinvoke %1.<@%unk/%unk: .get()>(event)\n%2 = staticinvoke <@%unk/%unk: .Boolean()>(cbs)\n%3 = instanceinvoke %2.<@%unk/%unk: .valueOf()>()\n%4 = !%3\nif %4 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 38,
                          "end_line": 57,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if callback == null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ninstanceinvoke %5.<@%unk/%unk: .set()>(event, null)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "cb = undefined\nl = cbs.<@%unk/%unk: .length>\ni = 0",
                                  "start_line": 1,
                                  "end_line": 67,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "if i < l",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "cb = cbs[i]\n%6 = cb === callback\n%7 = cb.<@%unk/%unk: .fn>\n%8 = %7 === callback\n%9 = %6 || %8\nif %9 != false\ni = i + 1",
                                          "start_line": 46,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "instanceinvoke cbs.<@%unk/%unk: .splice()>(i, 1)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return",
                                                  "start_line": 38,
                                                  "end_line": 57,
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public off(event: string | null, callback: CallbackType | null): void {\n    if (event == null) {\n      this.callBackArray.clear();\n    }\n\n    const cbs: CallbackType[] = this.callBackArray.get(event);\n    if (!Boolean<Function[]>(cbs).valueOf()) {\n      return;\n    }\n    if (callback == null) {\n      this.callBackArray.set(event, null);\n    }\n    let cb;\n    let l = cbs.length;\n    for (let i = 0; i < l; i++) {\n      cb = cbs[i];\n      if (cb === callback || cb.fn === callback) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "emit",
          "label": "emit",
          "start_line": 1,
          "end_line": 54,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: string\nargs = parameter1: Object[]\nthis = this: @ts_files/34.ts: Broadcast\n_self = this\n%0 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%1 = instanceinvoke %0.<@%unk/%unk: .get()>(event)\n%2 = staticinvoke <@%unk/%unk: .Boolean()>(%1)\n%3 = instanceinvoke %2.<@%unk/%unk: .valueOf()>()\n%4 = !%3\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 38,
                  "end_line": 57,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = newarray (any)[0]\ncbs = %5\ni = 0",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%7 = instanceinvoke %6.<@%unk/%unk: .get()>(event)\n%8 = %7.<@%unk/%unk: .length>\nif i < %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = this.<@ts_files/34.ts: Broadcast.callBackArray>\n%10 = instanceinvoke %9.<@%unk/%unk: .get()>(event)\n%11 = %10.<@%unk/%unk: .i>\ninstanceinvoke cbs.<@%unk/%unk: .push()>(%11)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if cbs != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "l = cbs.<@%unk/%unk: .length>\ni = 0",
                              "start_line": 1,
                              "end_line": 67,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if i < l",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%12 = cbs[i]\ninstanceinvoke %12.<@%unk/%unk: .apply()>(_self, args)",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 38,
                                      "end_line": 57,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "e = caughtexception: unknown\n%13 = new @%unk/%unk: Error\ninstanceinvoke %13.<@%unk/%unk: Error.constructor()>(e)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public emit(event: string, args: Object[]): void {\n    let _self = this;\n    if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.callBackArray.get(event).length; i++) {\n      cbs.push(this.callBackArray.get(event)[i])\n    }\n\n    if (cbs != null) {\n      let l = cbs.length;\n      for (let i = 0; i < l; i++) {\n        try {\n          cbs[i].apply(_self, args);\n        } catch (e) {\n          new Error(e);\n        }\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "release",
          "label": "release",
          "start_line": 1,
          "end_line": 77,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/34.ts: Broadcast\n%0 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM0$release)\n%1 = this.<@ts_files/34.ts: Broadcast.callBackArray>\ninstanceinvoke %1.<@%unk/%unk: .clear()>()\nreturn",
              "start_line": 1,
              "end_line": 57,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public release(): void {\n    this.callBackArray.forEach((array: Object[]): void => {\n      array.length = 0;\n    });\n    this.callBackArray.clear();\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$release",
          "label": "%AM0$release",
          "start_line": 1,
          "end_line": 78,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "array = parameter0: Object[]\nthis = this: @ts_files/34.ts: Broadcast\narray.<@%unk/%unk: .length> = 0\nreturn",
              "start_line": 1,
              "end_line": 57,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(array: Object[]): void => {\n      array.length = 0;\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class Broadcast {\n  private callBackArray: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n\n  constructor() {\n  }\n\n  public on(event: string, callback: CallbackType): void {\n    if (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {\n      this.callBackArray.set(event, []);\n    }\n    this.callBackArray.get(event).push(callback);\n  }\n\n  public off(event: string | null, callback: CallbackType | null): void {\n    if (event == null) {\n      this.callBackArray.clear();\n    }\n\n    const cbs: CallbackType[] = this.callBackArray.get(event);\n    if (!Boolean<Function[]>(cbs).valueOf()) {\n      return;\n    }\n    if (callback == null) {\n      this.callBackArray.set(event, null);\n    }\n    let cb;\n    let l = cbs.length;\n    for (let i = 0; i < l; i++) {\n      cb = cbs[i];\n      if (cb === callback || cb.fn === callback) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  public emit(event: string, args: Object[]): void {\n    let _self = this;\n    if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.callBackArray.get(event).length; i++) {\n      cbs.push(this.callBackArray.get(event)[i])\n    }\n\n    if (cbs != null) {\n      let l = cbs.length;\n      for (let i = 0; i < l; i++) {\n        try {\n          cbs[i].apply(_self, args);\n        } catch (e) {\n          new Error(e);\n        }\n      }\n    }\n  }\n\n  public release(): void {\n    this.callBackArray.forEach((array: Object[]): void => {\n      array.length = 0;\n    });\n    this.callBackArray.clear();\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype CallbackType = Function;\n\nexport class Broadcast {\n  private callBackArray: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n\n  constructor() {\n  }\n\n  public on(event: string, callback: CallbackType): void {\n    if (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {\n      this.callBackArray.set(event, []);\n    }\n    this.callBackArray.get(event).push(callback);\n  }\n\n  public off(event: string | null, callback: CallbackType | null): void {\n    if (event == null) {\n      this.callBackArray.clear();\n    }\n\n    const cbs: CallbackType[] = this.callBackArray.get(event);\n    if (!Boolean<Function[]>(cbs).valueOf()) {\n      return;\n    }\n    if (callback == null) {\n      this.callBackArray.set(event, null);\n    }\n    let cb;\n    let l = cbs.length;\n    for (let i = 0; i < l; i++) {\n      cb = cbs[i];\n      if (cb === callback || cb.fn === callback) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  public emit(event: string, args: Object[]): void {\n    let _self = this;\n    if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.callBackArray.get(event).length; i++) {\n      cbs.push(this.callBackArray.get(event)[i])\n    }\n\n    if (cbs != null) {\n      let l = cbs.length;\n      for (let i = 0; i < l; i++) {\n        try {\n          cbs[i].apply(_self, args);\n        } catch (e) {\n          new Error(e);\n        }\n      }\n    }\n  }\n\n  public release(): void {\n    this.callBackArray.forEach((array: Object[]): void => {\n      array.length = 0;\n    });\n    this.callBackArray.clear();\n  }\n}\n"
}