{
  "type": "file",
  "name": "42.ts",
  "label": "42.ts",
  "start_line": -1,
  "end_line": 177,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 177,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: %dflt\nTAG = 'AlbumsDataSource'\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumsDataSource",
      "label": "AlbumsDataSource",
      "start_line": 1,
      "end_line": 177,
      "functions": [
        {
          "type": "function",
          "name": "setBlackList",
          "label": "setBlackList",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "blackList = parameter0: string[]\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataImpl>\ninstanceinvoke %0.<@%unk/%unk: .setBlackList()>(blackList)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);\n  }"
        },
        {
          "type": "function",
          "name": "setSelectType",
          "label": "setSelectType",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "selectType = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataImpl>\ninstanceinvoke %0.<@%unk/%unk: .setSelectType()>(selectType)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);\n  }"
        },
        {
          "type": "function",
          "name": "setDeviceId",
          "label": "setDeviceId",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "deviceId = parameter0: string\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataImpl>\ninstanceinvoke %0.<@%unk/%unk: .setDeviceId()>(deviceId)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);\n  }"
        },
        {
          "type": "function",
          "name": "totalCount",
          "label": "totalCount",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "totalCount(): number {\n    return this.albumDataItems.length;\n  }"
        },
        {
          "type": "function",
          "name": "getData",
          "label": "getData",
          "start_line": 1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = new @%unk/%unk: LazyItem<AlbumDataItem>\n%1 = instanceinvoke this.<@ts_files/42.ts: AlbumsDataSource.getDataByIndex(number)>(index)\ninstanceinvoke %0.<@%unk/%unk: LazyItem.constructor()>(%1, index, %AM0$getData)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getData(index: number): LazyItem<AlbumDataItem> {\n    return new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }"
        },
        {
          "type": "function",
          "name": "getDataByIndex",
          "label": "getDataByIndex",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = index < 0\n%1 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%2 = %1.<@%unk/%unk: .length>\n%3 = index >= %2\n%4 = %0 || %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = index + '/'\n%6 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%7 = %6.<@%unk/%unk: .length>\n%8 = %5 + %7\ninstanceinvoke Log.<@%unk/%unk: .warn()>(TAG, %8)\nreturn undefined",
                  "start_line": 1,
                  "end_line": 51,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%10 = %9[index]\n%10.<@%unk/%unk: .index> = index\n%11 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%12 = %11[index]\nreturn %12",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getDataByIndex(index: number): AlbumDataItem {\n    if (index < 0 || index >= this.albumDataItems.length) {\n      Log.warn(TAG, index + '/' + this.albumDataItems.length);\n      return undefined;\n    }\n    this.albumDataItems[index].index = index;\n    return this.albumDataItems[index];\n  }"
        },
        {
          "type": "function",
          "name": "isSelect",
          "label": "isSelect",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\nisSelect = true\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .isSelect>\n%5 = !%4\nif %5 != 0\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "isSelect = false",
                          "start_line": 61,
                          "end_line": 61,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return isSelect",
                              "start_line": 65,
                              "end_line": 65,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (!this.albumDataItems[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }"
        },
        {
          "type": "function",
          "name": "resetLoadState",
          "label": "resetLoadState",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .status>\n%5 = MediaConstants.<@%unk/%unk: .LOADED>\nif %4 === %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = MediaConstants.<@%unk/%unk: .UNDEFINED>\n%6 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%7 = %6[i]\n%7.<@%unk/%unk: .status> = %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "i = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 41,
                      "end_line": 177,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "resetLoadState(): void {\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].status === MediaConstants.LOADED) {\n        this.albumDataItems[i].status = MediaConstants.UNDEFINED;\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getAlbumDataItemById",
          "label": "getAlbumDataItemById",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nthis = this: @ts_files/42.ts: AlbumsDataSource\nalbumDataItem = null\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .id>\nif %4 === id",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\nalbumDataItem = %5[i]",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "i = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return albumDataItem",
                      "start_line": 83,
                      "end_line": 83,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getAlbumDataItemById(id: string): AlbumDataItem | null {\n    let albumDataItem: AlbumDataItem = null;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].id === id) {\n        albumDataItem = this.albumDataItems[i];\n      }\n    }\n    return albumDataItem;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedUris",
          "label": "getSelectedUris",
          "start_line": 1,
          "end_line": 93,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = newarray (any)[0]\nuris = %0\n%1 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\ninstanceinvoke %1.<@%unk/%unk: .forEach()>(%AM1$getSelectedUris)\nreturn uris",
              "start_line": 1,
              "end_line": 93,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }"
        },
        {
          "type": "function",
          "name": "isDisableRename",
          "label": "isDisableRename",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\nisDisableRename = false\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .isSelect>\n%5 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%6 = %5[i]\n%7 = %6.<@%unk/%unk: .isDisableRename>\n%8 = %4 && %7\nif %8 != false\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "isDisableRename = true",
                          "start_line": 100,
                          "end_line": 100,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return isDisableRename",
                              "start_line": 104,
                              "end_line": 104,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isDisableRename(): boolean {\n    let isDisableRename = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {\n        isDisableRename = true;\n        break;\n      }\n    }\n    return isDisableRename;\n  }"
        },
        {
          "type": "function",
          "name": "isDisableDelete",
          "label": "isDisableDelete",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\nisDisableDelete = false\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .isSelect>\n%5 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%6 = %5[i]\n%7 = %6.<@%unk/%unk: .isDisableDelete>\n%8 = %4 && %7\nif %8 != false\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "isDisableDelete = true",
                          "start_line": 111,
                          "end_line": 111,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return isDisableDelete",
                              "start_line": 115,
                              "end_line": 115,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isDisableDelete(): boolean {\n    let isDisableDelete = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\n        isDisableDelete = true;\n        break;\n      }\n    }\n    return isDisableDelete;\n  }"
        },
        {
          "type": "function",
          "name": "setSelect",
          "label": "setSelect",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isSelect = parameter0: boolean\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM2$setSelect)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelect(isSelect: boolean): void {\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    })\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedCount",
          "label": "getSelectedCount",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\ncount = 0\ni = 0",
              "start_line": 1,
              "end_line": 126,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .isSelect>\nif %4 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "count = count + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "i = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return count",
                      "start_line": 131,
                      "end_line": 131,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedCount(): number {\n    let count = 0;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect) {\n        count++;\n      }\n    }\n    return count;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedItems",
          "label": "getSelectedItems",
          "start_line": 1,
          "end_line": 141,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = newarray (any)[0]\nitems = %0\n%1 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\ninstanceinvoke %1.<@%unk/%unk: .forEach()>(%AM3$getSelectedItems)\nreturn items",
              "start_line": 1,
              "end_line": 141,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedItems(): Object[] {\n    let items: AlbumDataItem[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }"
        },
        {
          "type": "function",
          "name": "onDataUpdate",
          "label": "onDataUpdate",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\ninstanceinvoke this.<@ts_files/42.ts: AlbumsDataSource.onDataUpdateBindImpl(number)>(index)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }"
        },
        {
          "type": "function",
          "name": "onDataUpdateBindImpl",
          "label": "onDataUpdateBindImpl",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = 'onDataUpdate ' + index\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\ninstanceinvoke this.<@%unk/%unk: .notifyDataChange()>(index)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onDataUpdateBindImpl(index: number): void {\n    Log.info(TAG, 'onDataUpdate ' + index);\n    this.notifyDataChange(index);\n  }"
        },
        {
          "type": "function",
          "name": "dataReload",
          "label": "dataReload",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = instanceinvoke this.<@ts_files/42.ts: AlbumsDataSource.reloadAlbumItemData()>()\ninstanceinvoke %0.<@%unk/%unk: .then()>(%AM4$dataReload)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "dataReload(): void {\n    this.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }"
        },
        {
          "type": "function",
          "name": "dataRemove",
          "label": "dataRemove",
          "start_line": 1,
          "end_line": 159,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%1 = %0.<@%unk/%unk: .length>\ni = %1 - 1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i >= 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2[i]\n%4 = instanceinvoke %3.<@%unk/%unk: .isDeleted()>()\nif %4 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\ninstanceinvoke %5.<@%unk/%unk: .splice()>(i, 1)\ninstanceinvoke super.<@%unk/%unk: .notifyDataDelete()>(i)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "i = i - 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 41,
                      "end_line": 177,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "dataRemove(): void {\n    for (let i = this.albumDataItems.length - 1;i >= 0; i--) {\n      if (this.albumDataItems[i].isDeleted()) {\n        this.albumDataItems.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "reloadAlbumItemData",
          "label": "reloadAlbumItemData",
          "start_line": 1,
          "end_line": 168,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataImpl>\n%1 = instanceinvoke %0.<@%unk/%unk: .reloadAlbumItemData()>()\nthis.<@ts_files/42.ts: AlbumsDataSource.albumDataItems> = await %1\n%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2.<@%unk/%unk: .length>\n%4 = %3 === 0\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    return this.albumDataItems.length === 0;\n  }"
        },
        {
          "type": "function",
          "name": "reloadAlbumListItemData",
          "label": "reloadAlbumListItemData",
          "start_line": 1,
          "end_line": 173,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/42.ts: AlbumsDataSource\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'reloadAlbumListItemData')\n%0 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataImpl>\n%1 = instanceinvoke %0.<@%unk/%unk: .reloadAlbumItemData()>()\nthis.<@ts_files/42.ts: AlbumsDataSource.albumDataItems> = await %1\ninstanceinvoke this.<@%unk/%unk: .notifyDataReload()>()\n%2 = this.<@ts_files/42.ts: AlbumsDataSource.albumDataItems>\n%3 = %2.<@%unk/%unk: .length>\n%4 = %3 === 0\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadAlbumListItemData(): Promise<boolean> {\n    Log.info(TAG, 'reloadAlbumListItemData');\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    this.notifyDataReload();\n    return this.albumDataItems.length === 0;\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$getData",
          "label": "%AM0$getData",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = instanceinvoke this.<@ts_files/42.ts: AlbumsDataSource.onDataUpdateBindImpl(number)>(index)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(index: number): void => this.onDataUpdateBindImpl(index)"
        },
        {
          "type": "function",
          "name": "%AM1$getSelectedUris",
          "label": "%AM1$getSelectedUris",
          "start_line": 1,
          "end_line": 88,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [uris]\nitem = parameter1: any\nuris = %closures0.uris\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = item.<@%unk/%unk: .isSelect>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = item.<@%unk/%unk: .uri>\ninstanceinvoke uris.<@%unk/%unk: .push()>(%1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 41,
                      "end_line": 177,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM2$setSelect",
          "label": "%AM2$setSelect",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [isSelect]\nitem = parameter1: any\nisSelect = %closures0.isSelect\nthis = this: @ts_files/42.ts: AlbumsDataSource\ninstanceinvoke item.<@%unk/%unk: .setSelect()>(isSelect)\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$getSelectedItems",
          "label": "%AM3$getSelectedItems",
          "start_line": 1,
          "end_line": 136,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [items]\nitem = parameter1: any\nitems = %closures0.items\nthis = this: @ts_files/42.ts: AlbumsDataSource\n%0 = item.<@%unk/%unk: .isSelect>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke items.<@%unk/%unk: .push()>(item)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 41,
                      "end_line": 177,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM4$dataReload",
          "label": "%AM4$dataReload",
          "start_line": 1,
          "end_line": 177,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isEmpty = parameter0: boolean\nthis = this: @ts_files/42.ts: AlbumsDataSource\ninstanceinvoke this.<@%unk/%unk: .notifyDataReload()>()\nreturn",
              "start_line": 1,
              "end_line": 177,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(isEmpty: boolean): void => {\n      this.notifyDataReload();\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumsDataSource extends ItemDataSource {\n  private albumDataItems: AlbumDataItem[] = [];\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);\n  }\n\n  setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);\n  }\n\n  totalCount(): number {\n    return this.albumDataItems.length;\n  }\n\n  getData(index: number): LazyItem<AlbumDataItem> {\n    return new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): AlbumDataItem {\n    if (index < 0 || index >= this.albumDataItems.length) {\n      Log.warn(TAG, index + '/' + this.albumDataItems.length);\n      return undefined;\n    }\n    this.albumDataItems[index].index = index;\n    return this.albumDataItems[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (!this.albumDataItems[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  resetLoadState(): void {\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].status === MediaConstants.LOADED) {\n        this.albumDataItems[i].status = MediaConstants.UNDEFINED;\n      }\n    }\n  }\n\n  getAlbumDataItemById(id: string): AlbumDataItem | null {\n    let albumDataItem: AlbumDataItem = null;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].id === id) {\n        albumDataItem = this.albumDataItems[i];\n      }\n    }\n    return albumDataItem;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  isDisableRename(): boolean {\n    let isDisableRename = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {\n        isDisableRename = true;\n        break;\n      }\n    }\n    return isDisableRename;\n  }\n\n  isDisableDelete(): boolean {\n    let isDisableDelete = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\n        isDisableDelete = true;\n        break;\n      }\n    }\n    return isDisableDelete;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    })\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: AlbumDataItem[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.info(TAG, 'onDataUpdate ' + index);\n    this.notifyDataChange(index);\n  }\n\n  dataReload(): void {\n    this.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.albumDataItems.length - 1;i >= 0; i--) {\n      if (this.albumDataItems[i].isDeleted()) {\n        this.albumDataItems.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    return this.albumDataItems.length === 0;\n  }\n\n  async reloadAlbumListItemData(): Promise<boolean> {\n    Log.info(TAG, 'reloadAlbumListItemData');\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    this.notifyDataReload();\n    return this.albumDataItems.length === 0;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataImpl } from './AlbumDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants'\n\nconst TAG = 'AlbumsDataSource'\n\nexport class AlbumsDataSource extends ItemDataSource {\n  private albumDataItems: AlbumDataItem[] = [];\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);\n  }\n\n  setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);\n  }\n\n  totalCount(): number {\n    return this.albumDataItems.length;\n  }\n\n  getData(index: number): LazyItem<AlbumDataItem> {\n    return new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): AlbumDataItem {\n    if (index < 0 || index >= this.albumDataItems.length) {\n      Log.warn(TAG, index + '/' + this.albumDataItems.length);\n      return undefined;\n    }\n    this.albumDataItems[index].index = index;\n    return this.albumDataItems[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (!this.albumDataItems[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  resetLoadState(): void {\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].status === MediaConstants.LOADED) {\n        this.albumDataItems[i].status = MediaConstants.UNDEFINED;\n      }\n    }\n  }\n\n  getAlbumDataItemById(id: string): AlbumDataItem | null {\n    let albumDataItem: AlbumDataItem = null;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].id === id) {\n        albumDataItem = this.albumDataItems[i];\n      }\n    }\n    return albumDataItem;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  isDisableRename(): boolean {\n    let isDisableRename = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {\n        isDisableRename = true;\n        break;\n      }\n    }\n    return isDisableRename;\n  }\n\n  isDisableDelete(): boolean {\n    let isDisableDelete = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\n        isDisableDelete = true;\n        break;\n      }\n    }\n    return isDisableDelete;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    })\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: AlbumDataItem[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.info(TAG, 'onDataUpdate ' + index);\n    this.notifyDataChange(index);\n  }\n\n  dataReload(): void {\n    this.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.albumDataItems.length - 1;i >= 0; i--) {\n      if (this.albumDataItems[i].isDeleted()) {\n        this.albumDataItems.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    return this.albumDataItems.length === 0;\n  }\n\n  async reloadAlbumListItemData(): Promise<boolean> {\n    Log.info(TAG, 'reloadAlbumListItemData');\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    this.notifyDataReload();\n    return this.albumDataItems.length === 0;\n  }\n}\n"
}