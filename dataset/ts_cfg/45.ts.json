{
  "type": "file",
  "name": "45.ts",
  "label": "45.ts",
  "start_line": -1,
  "end_line": 143,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 143,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 143,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: %dflt\nTAG = 'AlbumDataItem'\nobjectIndex = 0\nreturn",
              "start_line": 1,
              "end_line": 143,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumDataItem",
      "label": "AlbumDataItem",
      "start_line": 1,
      "end_line": 143,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 143,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/45.ts: AlbumDataItem.%instInit()>()\nid = parameter0: string\ncount = parameter1: number\ndisplayName = parameter2: string\nselectType = parameter3: number\ndeviceId = parameter4: string\nalbumType = parameter5: number\nalbumSubType = parameter6: number\nthis = this: @ts_files/45.ts: AlbumDataItem\nthis.<@ts_files/45.ts: AlbumDataItem.id> = id\nthis.<@ts_files/45.ts: AlbumDataItem.displayName> = displayName\nthis.<@ts_files/45.ts: AlbumDataItem.count> = count\n%0 = MediaConstants.<@%unk/%unk: .ALBUM_DISABLE_RENAME_LIST>\n%1 = instanceinvoke %0.<@%unk/%unk: .has()>(id)\nthis.<@ts_files/45.ts: AlbumDataItem.isDisableRename> = %1\n%2 = MediaConstants.<@%unk/%unk: .ALBUM_DISABLE_DELETE_LIST>\n%3 = instanceinvoke %2.<@%unk/%unk: .has()>(id)\nthis.<@ts_files/45.ts: AlbumDataItem.isDisableDelete> = %3\nthis.<@ts_files/45.ts: AlbumDataItem.selectType> = selectType\nthis.<@ts_files/45.ts: AlbumDataItem.deviceId> = deviceId\nobjectIndex = objectIndex + 1\nthis.<@ts_files/45.ts: AlbumDataItem.objectIndex> = objectIndex\nthis.<@ts_files/45.ts: AlbumDataItem.albumType> = albumType\nthis.<@ts_files/45.ts: AlbumDataItem.albumSubType> = albumSubType\nreturn",
              "start_line": 1,
              "end_line": 143,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }"
        },
        {
          "type": "function",
          "name": "getHashCode",
          "label": "getHashCode",
          "start_line": 1,
          "end_line": 61,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.objectIndex>\n%1 = %0 + ''\n%2 = this.<@ts_files/45.ts: AlbumDataItem.id>\n%3 = %1 + %2\n%4 = %3 + ' '\n%5 = this.<@ts_files/45.ts: AlbumDataItem.orientation>\n%6 = %4 + %5\n%7 = %6 + ' '\n%8 = this.<@ts_files/45.ts: AlbumDataItem.isSelect>\n%9 = %7 + %8\nreturn %9",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getHashCode(): string {\n    return this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;\n  }"
        },
        {
          "type": "function",
          "name": "load",
          "label": "load",
          "start_line": 1,
          "end_line": 65,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.status>\n%1 = MediaConstants.<@%unk/%unk: .LOADED>\nif %0 >= %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 62,
                  "end_line": 143,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/45.ts: AlbumDataItem.fileUir>\n%3 = %2 !== undefined\n%4 = this.<@ts_files/45.ts: AlbumDataItem.fileUir>\n%5 = %4 !== null\n%6 = %3 && %5\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = this.<@ts_files/45.ts: AlbumDataItem.fileUir>\n%8 = instanceinvoke userFileModel.<@%unk/%unk: .getMediaItemByUri()>(%7)\nfileAsset = await %8\n%9 = instanceinvoke this.<@ts_files/45.ts: AlbumDataItem.update(photoAccessHelper.PhotoAsset)>(fileAsset)\n%10 = await %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 62,
                          "end_line": 143,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async load(): Promise<void> {\n    if (this.status >= MediaConstants.LOADED) {\n      return;\n    }\n    if (this.fileUir !== undefined && this.fileUir !== null) {\n      let fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));\n      await this.update(fileAsset);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "update",
          "label": "update",
          "start_line": 1,
          "end_line": 75,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fileAsset = parameter0: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.displayName>\n%1 = 'this.uri ' + %0\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\n%2 = this.<@ts_files/45.ts: AlbumDataItem.uri>\n%3 = 'this.uri ' + %2\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %3)\nif fileAsset != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = fileAsset.<@%unk/%unk: .uri>\nthis.<@ts_files/45.ts: AlbumDataItem.fileUir> = %4\nthis.<@ts_files/45.ts: AlbumDataItem.fileAsset> = fileAsset\n%5 = this.<@ts_files/45.ts: AlbumDataItem.fileAsset>\nif %5 != null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = instanceinvoke this.<@ts_files/45.ts: AlbumDataItem.getThumbnail()>()\n%7 = await %6",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = this.<@ts_files/45.ts: AlbumDataItem.fileUir>\n%9 = 'this.fileUri ' + %8\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %9)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%10 = MediaConstants.<@%unk/%unk: .LOADED>\nthis.<@ts_files/45.ts: AlbumDataItem.status> = %10\n%11 = this.<@ts_files/45.ts: AlbumDataItem.id>\n%12 = this.<@ts_files/45.ts: AlbumDataItem.isSelect>\n%13 = instanceinvoke selectManager.<@%unk/%unk: .isSelect()>(%11, %12)\nthis.<@ts_files/45.ts: AlbumDataItem.isSelect> = %13\nreturn",
                              "start_line": 1,
                              "end_line": 143,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'this.uri ' + this.displayName);\n    Log.info(TAG, 'this.uri ' + this.uri);\n    if (fileAsset != null) {\n      this.fileUir = fileAsset.uri;\n      this.fileAsset = fileAsset;\n      if (this.fileAsset != null) {\n        await this.getThumbnail();\n      }\n      Log.info(TAG, 'this.fileUri ' + this.fileUir);\n    }\n    this.status = MediaConstants.LOADED;\n    this.isSelect = selectManager.isSelect(this.id, this.isSelect);\n  }"
        },
        {
          "type": "function",
          "name": "getThumbnail",
          "label": "getThumbnail",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.thumbnail>\nif %0 == undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @ts_files/45.ts: %AC$AlbumDataItem$getThumbnail$0\ninstanceinvoke %1.<@ts_files/45.ts: %AC$AlbumDataItem$getThumbnail$0.constructor()>()\nsize = %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/45.ts: AlbumDataItem.fileAsset>\n%3 = instanceinvoke %2.<@%unk/%unk: .getThumbnail()>(size)\nthis.<@ts_files/45.ts: AlbumDataItem.thumbnail> = await %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = this.<@ts_files/45.ts: AlbumDataItem.thumbnail>\nreturn %6",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%5 = 'getThumbnail error: ' + %4\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getThumbnail(): Promise<PixelMap> {\n    if (this.thumbnail == undefined) {\n      let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n      try {\n        this.thumbnail = await this.fileAsset.getThumbnail(size)\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return this.thumbnail;\n  }"
        },
        {
          "type": "function",
          "name": "getVideoCount",
          "label": "getVideoCount",
          "start_line": 1,
          "end_line": 102,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.selectType>\n%1 = MediaConstants.<@%unk/%unk: .SELECT_TYPE_IMAGE>\nif %0 === %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 0",
                  "start_line": 104,
                  "end_line": 104,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = newarray (any)[0]\nfileAssets = %2\n%3 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %3.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\nalbumPredicates = %3\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%5 = %4.<@%unk/%unk: .ALBUM_NAME>\n%6 = this.<@ts_files/45.ts: AlbumDataItem.displayName>\ninstanceinvoke albumPredicates.<@%unk/%unk: .equalTo()>(%5, %6)\n%7 = new @ts_files/45.ts: %AC$AlbumDataItem$getVideoCount$1\ninstanceinvoke %7.<@ts_files/45.ts: %AC$AlbumDataItem$getVideoCount$1.constructor()>()\nalbumFetchOption = %7\n%8 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %8.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %8\n%9 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%10 = %9.<@%unk/%unk: .PHOTO_TYPE>\n%11 = photoAccessHelper.<@%unk/%unk: .PhotoType>\n%12 = %11.<@%unk/%unk: .VIDEO>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%10, %12)\n%13 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%14 = %13.<@%unk/%unk: .DATE_ADDED>\ninstanceinvoke predicates.<@%unk/%unk: .orderByDesc()>(%14)\n%15 = new @ts_files/45.ts: %AC$AlbumDataItem$getVideoCount$2\ninstanceinvoke %15.<@ts_files/45.ts: %AC$AlbumDataItem$getVideoCount$2.constructor()>()\nfileFetchOption = %15\n%16 = this.<@ts_files/45.ts: AlbumDataItem.albumType>\n%17 = this.<@ts_files/45.ts: AlbumDataItem.albumSubType>\n%18 = instanceinvoke userFileModel.<@%unk/%unk: .getAllMediaItemsByType()>(%16, %17, albumFetchOption, fileFetchOption)\nfileAssets = await %18\n%19 = fileAssets.<@%unk/%unk: .length>\nreturn %19",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getVideoCount(): Promise<number> {\n    if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\n      return 0;\n    }\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let albumPredicates = new dataSharePredicates.DataSharePredicates();\n    albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\n    let albumFetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    };\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)\n    predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let fileFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\n    return fileAssets.length;\n  }"
        },
        {
          "type": "function",
          "name": "setSelect",
          "label": "setSelect",
          "start_line": 1,
          "end_line": 143,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isSelect = parameter0: boolean\nthis = this: @ts_files/45.ts: AlbumDataItem\nthis.<@ts_files/45.ts: AlbumDataItem.isSelect> = isSelect\n%0 = this.<@ts_files/45.ts: AlbumDataItem.id>\n%1 = this.<@ts_files/45.ts: AlbumDataItem.isSelect>\ninstanceinvoke selectManager.<@%unk/%unk: .setSelect()>(%0, %1)\nreturn",
              "start_line": 1,
              "end_line": 143,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.id, this.isSelect);\n  }"
        },
        {
          "type": "function",
          "name": "onDelete",
          "label": "onDelete",
          "start_line": 1,
          "end_line": 138,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/45.ts: AlbumDataItem.displayName>\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)\n%1 = this.<@ts_files/45.ts: AlbumDataItem.displayName>\n%2 = instanceinvoke userFileModel.<@%unk/%unk: .deleteAlbum()>(%1)\n%3 = await %2\n%4 = this.<@ts_files/45.ts: AlbumDataItem.uri>\ninstanceinvoke selectManager.<@%unk/%unk: .deleteSelect()>(%4)\n%5 = MediaConstants.<@%unk/%unk: .TRASHED>\nthis.<@ts_files/45.ts: AlbumDataItem.status> = %5\nreturn true",
                  "start_line": 1,
                  "end_line": 135,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%6 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%7 = 'onDelete error: ' + %6\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %7)\nreturn false",
              "start_line": 1,
              "end_line": 138,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 62,
                  "end_line": 143,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async onDelete(): Promise<boolean> {\n    try {\n      Log.error(TAG, this.displayName);\n      await userFileModel.deleteAlbum(this.displayName);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "isDeleted",
          "label": "isDeleted",
          "start_line": 1,
          "end_line": 142,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/45.ts: AlbumDataItem\n%0 = this.<@ts_files/45.ts: AlbumDataItem.status>\n%1 = MediaConstants.<@%unk/%unk: .TRASHED>\n%2 = %0 === %1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumDataItem {\n  index: number;\n  id: string;\n  uri: string;\n  orientation: number;\n  displayName: string;\n  count: number;\n  isDisableRename: boolean;\n  isDisableDelete: boolean;\n  innerId: number;\n  selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  deviceId: string = '';\n  isSelect: boolean = false;\n  status: number = MediaConstants.UNDEFINED;\n  objectIndex: number;\n  albumType: number;\n  albumSubType: number;\n  fileUir: string = undefined;\n  fileAsset: photoAccessHelper.PhotoAsset;\n  thumbnail: PixelMap = undefined;\n\n  constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }\n\n  getHashCode(): string {\n    return this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;\n  }\n\n  async load(): Promise<void> {\n    if (this.status >= MediaConstants.LOADED) {\n      return;\n    }\n    if (this.fileUir !== undefined && this.fileUir !== null) {\n      let fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));\n      await this.update(fileAsset);\n    }\n  }\n\n  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'this.uri ' + this.displayName);\n    Log.info(TAG, 'this.uri ' + this.uri);\n    if (fileAsset != null) {\n      this.fileUir = fileAsset.uri;\n      this.fileAsset = fileAsset;\n      if (this.fileAsset != null) {\n        await this.getThumbnail();\n      }\n      Log.info(TAG, 'this.fileUri ' + this.fileUir);\n    }\n    this.status = MediaConstants.LOADED;\n    this.isSelect = selectManager.isSelect(this.id, this.isSelect);\n  }\n\n  async getThumbnail(): Promise<PixelMap> {\n    if (this.thumbnail == undefined) {\n      let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n      try {\n        this.thumbnail = await this.fileAsset.getThumbnail(size)\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return this.thumbnail;\n  }\n\n  async getVideoCount(): Promise<number> {\n    if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\n      return 0;\n    }\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let albumPredicates = new dataSharePredicates.DataSharePredicates();\n    albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\n    let albumFetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    };\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)\n    predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let fileFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\n    return fileAssets.length;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.id, this.isSelect);\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      Log.error(TAG, this.displayName);\n      await userFileModel.deleteAlbum(this.displayName);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataItem$getThumbnail$0",
      "label": "%AC$AlbumDataItem$getThumbnail$0",
      "start_line": 92,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataItem$getVideoCount$1",
      "label": "%AC$AlbumDataItem$getVideoCount$1",
      "start_line": 109,
      "end_line": 109,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumDataItem$getVideoCount$2",
      "label": "%AC$AlbumDataItem$getVideoCount$2",
      "start_line": 116,
      "end_line": 116,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { selectManager } from './SelectManager';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataItem';\n\nlet objectIndex = 0;\n\nexport class AlbumDataItem {\n  index: number;\n  id: string;\n  uri: string;\n  orientation: number;\n  displayName: string;\n  count: number;\n  isDisableRename: boolean;\n  isDisableDelete: boolean;\n  innerId: number;\n  selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  deviceId: string = '';\n  isSelect: boolean = false;\n  status: number = MediaConstants.UNDEFINED;\n  objectIndex: number;\n  albumType: number;\n  albumSubType: number;\n  fileUir: string = undefined;\n  fileAsset: photoAccessHelper.PhotoAsset;\n  thumbnail: PixelMap = undefined;\n\n  constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }\n\n  getHashCode(): string {\n    return this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;\n  }\n\n  async load(): Promise<void> {\n    if (this.status >= MediaConstants.LOADED) {\n      return;\n    }\n    if (this.fileUir !== undefined && this.fileUir !== null) {\n      let fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));\n      await this.update(fileAsset);\n    }\n  }\n\n  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'this.uri ' + this.displayName);\n    Log.info(TAG, 'this.uri ' + this.uri);\n    if (fileAsset != null) {\n      this.fileUir = fileAsset.uri;\n      this.fileAsset = fileAsset;\n      if (this.fileAsset != null) {\n        await this.getThumbnail();\n      }\n      Log.info(TAG, 'this.fileUri ' + this.fileUir);\n    }\n    this.status = MediaConstants.LOADED;\n    this.isSelect = selectManager.isSelect(this.id, this.isSelect);\n  }\n\n  async getThumbnail(): Promise<PixelMap> {\n    if (this.thumbnail == undefined) {\n      let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n      try {\n        this.thumbnail = await this.fileAsset.getThumbnail(size)\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return this.thumbnail;\n  }\n\n  async getVideoCount(): Promise<number> {\n    if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\n      return 0;\n    }\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let albumPredicates = new dataSharePredicates.DataSharePredicates();\n    albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\n    let albumFetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    };\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)\n    predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let fileFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\n    return fileAssets.length;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.id, this.isSelect);\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      Log.error(TAG, this.displayName);\n      await userFileModel.deleteAlbum(this.displayName);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }\n}\n"
}