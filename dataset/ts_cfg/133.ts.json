{
  "type": "file",
  "name": "133.ts",
  "label": "133.ts",
  "start_line": -1,
  "end_line": 287,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/133.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(\n  schematic: FileSystemSchematicDescription,\n  options: T,\n  context?: FileSystemSchematicContext,\n) => Observable<R> | PromiseLike<R> | R"
        },
        {
          "type": "function",
          "name": "%AM1",
          "label": "%AM1",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(\n  context: FileSystemSchematicContext,\n) => FileSystemSchematicContext"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "CollectionCannotBeResolvedException",
      "label": "CollectionCannotBeResolvedException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: CollectionCannotBeResolvedException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: CollectionCannotBeResolvedException\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(name)\n%1 = 'Collection ' + %0\n%2 = %1 + ' cannot be resolved.'\nstaticinvoke <@%unk/%unk: .super()>(%2)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Collection ${JSON.stringify(name)} cannot be resolved.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class CollectionCannotBeResolvedException extends BaseException {\n  constructor(name: string) {\n    super(`Collection ${JSON.stringify(name)} cannot be resolved.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "InvalidCollectionJsonException",
      "label": "InvalidCollectionJsonException",
      "start_line": 1,
      "end_line": 37,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: InvalidCollectionJsonException.%instInit()>()\n_name = parameter0: string\npath = parameter1: string\njsonException = parameter2: Error\nthis = this: @ts_files/133.ts: InvalidCollectionJsonException\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(path)\n%1 = 'Collection JSON at path ' + %0\n%2 = %1 + ' is invalid.'\nmsg = %2\nif jsonException != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = jsonException.<@%unk/%unk: .message>\n%4 = msg + ' '\n%5 = %4 + %3\nmsg = %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "staticinvoke <@%unk/%unk: .super()>(msg)\nreturn",
                      "start_line": 1,
                      "end_line": 287,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(_name: string, path: string, jsonException?: Error) {\n    let msg = `Collection JSON at path ${JSON.stringify(path)} is invalid.`;\n    if (jsonException) {\n      msg = `${msg} ${jsonException.message}`;\n    }\n    super(msg);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class InvalidCollectionJsonException extends BaseException {\n  constructor(_name: string, path: string, jsonException?: Error) {\n    let msg = `Collection JSON at path ${JSON.stringify(path)} is invalid.`;\n    if (jsonException) {\n      msg = `${msg} ${jsonException.message}`;\n    }\n    super(msg);\n  }\n}"
    },
    {
      "type": "class",
      "name": "SchematicMissingFactoryException",
      "label": "SchematicMissingFactoryException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: SchematicMissingFactoryException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: SchematicMissingFactoryException\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(name)\n%1 = 'Schematic ' + %0\n%2 = %1 + ' is missing a factory.'\nstaticinvoke <@%unk/%unk: .super()>(%2)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} is missing a factory.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class SchematicMissingFactoryException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} is missing a factory.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "FactoryCannotBeResolvedException",
      "label": "FactoryCannotBeResolvedException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: FactoryCannotBeResolvedException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: FactoryCannotBeResolvedException\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(name)\n%1 = 'Schematic ' + %0\n%2 = %1 + ' cannot resolve the factory.'\nstaticinvoke <@%unk/%unk: .super()>(%2)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} cannot resolve the factory.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class FactoryCannotBeResolvedException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} cannot resolve the factory.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "CollectionMissingSchematicsMapException",
      "label": "CollectionMissingSchematicsMapException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: CollectionMissingSchematicsMapException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: CollectionMissingSchematicsMapException\n%0 = 'Collection \"' + name\n%1 = %0 + '\" does not have a schematics map.'\nstaticinvoke <@%unk/%unk: .super()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Collection \"${name}\" does not have a schematics map.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class CollectionMissingSchematicsMapException extends BaseException {\n  constructor(name: string) {\n    super(`Collection \"${name}\" does not have a schematics map.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "CollectionMissingFieldsException",
      "label": "CollectionMissingFieldsException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: CollectionMissingFieldsException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: CollectionMissingFieldsException\n%0 = 'Collection \"' + name\n%1 = %0 + '\" is missing fields.'\nstaticinvoke <@%unk/%unk: .super()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Collection \"${name}\" is missing fields.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class CollectionMissingFieldsException extends BaseException {\n  constructor(name: string) {\n    super(`Collection \"${name}\" is missing fields.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "SchematicMissingFieldsException",
      "label": "SchematicMissingFieldsException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: SchematicMissingFieldsException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: SchematicMissingFieldsException\n%0 = 'Schematic \"' + name\n%1 = %0 + '\" is missing fields.'\nstaticinvoke <@%unk/%unk: .super()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Schematic \"${name}\" is missing fields.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class SchematicMissingFieldsException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic \"${name}\" is missing fields.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "SchematicMissingDescriptionException",
      "label": "SchematicMissingDescriptionException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: SchematicMissingDescriptionException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: SchematicMissingDescriptionException\n%0 = 'Schematics \"' + name\n%1 = %0 + '\" does not have a description.'\nstaticinvoke <@%unk/%unk: .super()>(%1)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(`Schematics \"${name}\" does not have a description.`);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class SchematicMissingDescriptionException extends BaseException {\n  constructor(name: string) {\n    super(`Schematics \"${name}\" does not have a description.`);\n  }\n}"
    },
    {
      "type": "class",
      "name": "SchematicNameCollisionException",
      "label": "SchematicNameCollisionException",
      "start_line": 1,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/133.ts: SchematicNameCollisionException.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/133.ts: SchematicNameCollisionException\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(name)\n%1 = 'Schematics/alias ' + %0\n%2 = %1 + ' collides with another alias or schematic'\n%3 = %2 + ' name.'\nstaticinvoke <@%unk/%unk: .super()>(%3)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string) {\n    super(\n      `Schematics/alias ${JSON.stringify(name)} collides with another alias or schematic` +\n        ' name.',\n    );\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class SchematicNameCollisionException extends BaseException {\n  constructor(name: string) {\n    super(\n      `Schematics/alias ${JSON.stringify(name)} collides with another alias or schematic` +\n        ' name.',\n    );\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$1",
      "label": "%AC$1",
      "start_line": 89,
      "end_line": 89,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 89,
      "end_line": 89,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ref: RuleFactory<{}>; path: string }"
    },
    {
      "type": "class",
      "name": "FileSystemEngineHostBase",
      "label": "FileSystemEngineHostBase",
      "start_line": 0,
      "end_line": 287,
      "functions": [
        {
          "type": "function",
          "name": "_resolveCollectionPath",
          "label": "_resolveCollectionPath",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "protected abstract _resolveCollectionPath(name: string, requester?: string): string;"
        },
        {
          "type": "function",
          "name": "_resolveReferenceString",
          "label": "_resolveReferenceString",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "protected abstract _resolveReferenceString(\n    name: string,\n    parentPath: string,\n    collectionDescription: FileSystemCollectionDesc,\n  ): { ref: RuleFactory<{}>; path: string } | null;"
        },
        {
          "type": "function",
          "name": "_transformCollectionDescription",
          "label": "_transformCollectionDescription",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "protected abstract _transformCollectionDescription(\n    name: string,\n    desc: Partial<FileSystemCollectionDesc>,\n  ): FileSystemCollectionDesc;"
        },
        {
          "type": "function",
          "name": "_transformSchematicDescription",
          "label": "_transformSchematicDescription",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "protected abstract _transformSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n    desc: Partial<FileSystemSchematicDesc>,\n  ): FileSystemSchematicDesc;"
        },
        {
          "type": "function",
          "name": "listSchematicNames",
          "label": "listSchematicNames",
          "start_line": 1,
          "end_line": 103,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "collection = parameter0: FileSystemCollectionDesc\nincludeHidden = parameter1: boolean\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = newarray (any)[0]\nschematics = %0\n%1 = collection.<@%unk/%unk: .schematics>\n%2 = instanceinvoke Object.<@%unk/%unk: .keys()>(%1)\n%3 = instanceinvoke %2.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke %3.<@%unk/%unk: .next()>()\n%5 = %4.<@ES2015/BuiltinClass: IteratorResult.done>\nif %5 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = %4.<@ES2015/BuiltinClass: IteratorResult.value>\nkey = <Value[]>%6\n%7 = collection.<@%unk/%unk: .schematics>\nschematic = %7.<@%unk/%unk: .key>\n%8 = schematic.<@%unk/%unk: .hidden>\n%9 = !includeHidden\n%10 = %8 && %9\n%11 = schematic.<@%unk/%unk: .private>\n%12 = %10 || %11\nif %12 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = schematic.<@%unk/%unk: .extends>\n%14 = !%13\n%15 = schematic.<@%unk/%unk: .factory>\n%16 = %14 || %15\nif %16 != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke schematics.<@%unk/%unk: .push()>(key)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%17 = schematic.<@%unk/%unk: .extends>\n%18 = schematic.<@%unk/%unk: .extends>\n%19 = instanceinvoke %18.<@%unk/%unk: .indexOf()>(':')\n%20 = -1\n%21 = %19 !== %20\n%22 = %17 && %21\nif %22 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke schematics.<@%unk/%unk: .push()>(key)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return schematics",
                      "start_line": 118,
                      "end_line": 118,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "listSchematicNames(collection: FileSystemCollectionDesc, includeHidden?: boolean) {\n    const schematics: string[] = [];\n    for (const key of Object.keys(collection.schematics)) {\n      const schematic = collection.schematics[key];\n      if ((schematic.hidden && !includeHidden) || schematic.private) {\n        continue;\n      }\n      // If extends is present without a factory it is an alias, do not return it\n      //   unless it is from another collection.\n      if (!schematic.extends || schematic.factory) {\n        schematics.push(key);\n      } else if (schematic.extends && schematic.extends.indexOf(':') !== -1) {\n        schematics.push(key);\n      }\n    }\n    return schematics;\n  }"
        },
        {
          "type": "function",
          "name": "registerOptionsTransform",
          "label": "registerOptionsTransform",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "t = parameter0: OptionTransform\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._transforms>\ninstanceinvoke %0.<@%unk/%unk: .push()>(t)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "registerOptionsTransform<T extends object | null, R extends object>(t: OptionTransform<T, R>) {\n    this._transforms.push(t);\n  }"
        },
        {
          "type": "function",
          "name": "registerContextTransform",
          "label": "registerContextTransform",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "t = parameter0: ContextTransform\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._contextTransforms>\ninstanceinvoke %0.<@%unk/%unk: .push()>(t)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "registerContextTransform(t: ContextTransform) {\n    this._contextTransforms.push(t);\n  }"
        },
        {
          "type": "function",
          "name": "createCollectionDescription",
          "label": "createCollectionDescription",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nrequester = parameter1: FileSystemCollectionDesc\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = requester.<@%unk/%unk: .path>\npath = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase._resolveCollectionPath(string, string)>(name, %0)\njsonValue = staticinvoke <@%unk/%unk: .readJsonFile()>(path)\n%1 = !jsonValue\n%2 = typeof jsonValue != 'object'\n%3 = %1 || %2\n%4 = instanceinvoke Array.<@%unk/%unk: .isArray()>(jsonValue)\n%5 = %3 || %4\nif %5 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = new @ts_files/133.ts: InvalidCollectionJsonException\ninstanceinvoke %6.<@ts_files/133.ts: InvalidCollectionJsonException.constructor(string, string, Error)>(name, path)\nthrow %6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if typeof jsonValue.<@%unk/%unk: .'extends'> === 'string'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = jsonValue.<@%unk/%unk: .'extends'>\n%8 = newarray (unknown)[1]\n%8[0] = %7\njsonValue.<@%unk/%unk: .'extends'> = %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = new @ts_files/133.ts: %AC$FileSystemEngineHostBase$createCollectionDescription$2\ninstanceinvoke %9.<@ts_files/133.ts: %AC$FileSystemEngineHostBase$createCollectionDescription$2.constructor()>()\ndescription = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase._transformCollectionDescription(string, Partial<FileSystemCollectionDesc>)>(name, %9)\n%10 = !description\n%11 = description.<@%unk/%unk: .name>\n%12 = !%11\n%13 = %10 || %12\nif %13 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%14 = new @ts_files/133.ts: InvalidCollectionJsonException\ninstanceinvoke %14.<@ts_files/133.ts: InvalidCollectionJsonException.constructor(string, string, Error)>(name, path)\nthrow %14",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%15 = description.<@%unk/%unk: .schematics>\nallNames = instanceinvoke Object.<@%unk/%unk: .keys()>(%15)\n%16 = description.<@%unk/%unk: .schematics>\n%17 = instanceinvoke Object.<@%unk/%unk: .keys()>(%16)\n%18 = instanceinvoke %17.<@%unk/%unk: .iterator()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%19 = instanceinvoke %18.<@%unk/%unk: .next()>()\n%20 = %19.<@ES2015/BuiltinClass: IteratorResult.done>\nif %20 == true",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%21 = %19.<@ES2015/BuiltinClass: IteratorResult.value>\nschematicName = <Value[]>%21\n%22 = description.<@%unk/%unk: .schematics>\n%23 = %22.<@%unk/%unk: .schematicName>\n%24 = %23.<@%unk/%unk: .aliases>\n%25 = newarray (any)[0]\naliases = %24 || %25\n%26 = instanceinvoke aliases.<@%unk/%unk: .iterator()>()",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%27 = instanceinvoke %26.<@%unk/%unk: .next()>()\n%28 = %27.<@ES2015/BuiltinClass: IteratorResult.done>\nif %28 == true",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%29 = %27.<@ES2015/BuiltinClass: IteratorResult.value>\nalias = <Value[]>%29\n%30 = instanceinvoke allNames.<@%unk/%unk: .indexOf()>(alias)\n%31 = -1\nif %30 != %31",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%32 = new @ts_files/133.ts: SchematicNameCollisionException\ninstanceinvoke %32.<@ts_files/133.ts: SchematicNameCollisionException.constructor(string)>(alias)\nthrow %32",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "instanceinvoke allNames.<@%unk/%unk: .push()>(...aliases)",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "return description",
                                              "start_line": 157,
                                              "end_line": 157,
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createCollectionDescription(\n    name: string,\n    requester?: FileSystemCollectionDesc,\n  ): FileSystemCollectionDesc {\n    const path = this._resolveCollectionPath(name, requester?.path);\n    const jsonValue = readJsonFile(path);\n    if (!jsonValue || typeof jsonValue != 'object' || Array.isArray(jsonValue)) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // normalize extends property to an array\n    if (typeof jsonValue['extends'] === 'string') {\n      jsonValue['extends'] = [jsonValue['extends']];\n    }\n    const description = this._transformCollectionDescription(name, {\n      ...jsonValue,\n      path,\n    });\n    if (!description || !description.name) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // Validate aliases.\n    const allNames = Object.keys(description.schematics);\n    for (const schematicName of Object.keys(description.schematics)) {\n      const aliases = description.schematics[schematicName].aliases || [];\n      for (const alias of aliases) {\n        if (allNames.indexOf(alias) != -1) {\n          throw new SchematicNameCollisionException(alias);\n        }\n      }\n      allNames.push(...aliases);\n    }\n    return description;\n  }"
        },
        {
          "type": "function",
          "name": "createSchematicDescription",
          "label": "createSchematicDescription",
          "start_line": 1,
          "end_line": 159,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\ncollection = parameter1: FileSystemCollectionDesc\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = collection.<@%unk/%unk: .schematics>\n%1 = instanceinvoke Object.<@%unk/%unk: .keys()>(%0)\n%2 = instanceinvoke %1.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke %2.<@%unk/%unk: .next()>()\n%4 = %3.<@ES2015/BuiltinClass: IteratorResult.done>\nif %4 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = %3.<@ES2015/BuiltinClass: IteratorResult.value>\nschematicName = <Value[]>%5\n%6 = collection.<@%unk/%unk: .schematics>\nschematicDescription = %6.<@%unk/%unk: .schematicName>\n%7 = schematicDescription.<@%unk/%unk: .aliases>\n%8 = schematicDescription.<@%unk/%unk: .aliases>\n%9 = instanceinvoke %8.<@%unk/%unk: .indexOf()>(name)\n%10 = -1\n%11 = %9 != %10\n%12 = %7 && %11\nif %12 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "name = schematicName",
                          "start_line": 167,
                          "end_line": 167,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%13 = collection.<@%unk/%unk: .schematics>\n%14 = !undefined\nif %14 != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return null",
                                  "start_line": 172,
                                  "end_line": 248,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%15 = collection.<@%unk/%unk: .path>\ncollectionPath = staticinvoke <@%unk/%unk: .dirname()>(%15)\n%16 = collection.<@%unk/%unk: .schematics>\npartialDesc = %16.<@%unk/%unk: .name>\n%17 = !partialDesc\nif %17 != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return null",
                                      "start_line": 172,
                                      "end_line": 248,
                                      "successors": []
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%18 = partialDesc.<@%unk/%unk: .extends>\nif %18 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%29 = partialDesc.<@%unk/%unk: .factory>\n%30 = !%29\nif %30 != 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%31 = new @ts_files/133.ts: SchematicMissingFactoryException\ninstanceinvoke %31.<@ts_files/133.ts: SchematicMissingFactoryException.constructor(string)>(name)\nthrow %31",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%32 = partialDesc.<@%unk/%unk: .factory>\nresolvedRef = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase._resolveReferenceString(string, string, FileSystemCollectionDesc)>(%32, collectionPath, collection)\n%33 = !resolvedRef\nif %33 != 0",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%34 = new @ts_files/133.ts: FactoryCannotBeResolvedException\ninstanceinvoke %34.<@ts_files/133.ts: FactoryCannotBeResolvedException.constructor(string)>(name)\nthrow %34",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "schema = partialDesc.<@%unk/%unk: .schema>\nschemaJson = undefined\nif schema != 0",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%35 = staticinvoke <@%unk/%unk: .isAbsolute()>(schema)\n%36 = !%35\nif %36 != 0",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "schema = staticinvoke <@%unk/%unk: .join()>(collectionPath, schema)",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%37 = staticinvoke <@%unk/%unk: .readJsonFile()>(schema)\nschemaJson = <JsonObject>%37",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%38 = partialDesc.<@%unk/%unk: .factory>\nmaybePath = staticinvoke <@%unk/%unk: .join()>(collectionPath, %38)\n%39 = staticinvoke <@%unk/%unk: .existsSync()>(maybePath)\n%40 = staticinvoke <@%unk/%unk: .statSync()>(maybePath)\n%41 = instanceinvoke %40.<@%unk/%unk: .isDirectory()>()\n%42 = %39 && %41\nif %42 != false",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "path = maybePath",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%44 = new @ts_files/133.ts: %AC$FileSystemEngineHostBase$createSchematicDescription$3\ninstanceinvoke %44.<@ts_files/133.ts: %AC$FileSystemEngineHostBase$createSchematicDescription$3.constructor()>()\n%45 = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase._transformSchematicDescription(string, FileSystemCollectionDesc, Partial<FileSystemSchematicDesc>)>(name, collection, %44)\nreturn %45",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "path = staticinvoke <@%unk/%unk: .dirname()>(maybePath)",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "blockRef",
                                                                                  "label": "(RepeatedBlock)"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "blockRef",
                                                              "label": "(RepeatedBlock)"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%19 = partialDesc.<@%unk/%unk: .extends>\nindex = instanceinvoke %19.<@%unk/%unk: .indexOf()>(':')\n%20 = -1\nif index !== %20",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%21 = partialDesc.<@%unk/%unk: .extends>\ncollectionName = instanceinvoke %21.<@%unk/%unk: .slice()>(0, index)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%23 = -1\nif index === %23",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "schematicName = partialDesc.<@%unk/%unk: .extends>",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "if collectionName !== null",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "extendCollection = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase.createCollectionDescription(string, FileSystemCollectionDesc)>(collectionName)\n%27 = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase.createSchematicDescription(string, FileSystemCollectionDesc)>(schematicName, extendCollection)\nreturn %27",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": []
                                                            },
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%28 = instanceinvoke this.<@ts_files/133.ts: FileSystemEngineHostBase.createSchematicDescription(string, FileSystemCollectionDesc)>(schematicName, collection)\nreturn %28",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%25 = index + 1\n%26 = partialDesc.<@%unk/%unk: .extends>\nschematicName = instanceinvoke %26.<@%unk/%unk: .slice()>(%25)",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "collectionName = null",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n  ): FileSystemSchematicDesc | null {\n    // Resolve aliases first.\n    for (const schematicName of Object.keys(collection.schematics)) {\n      const schematicDescription = collection.schematics[schematicName];\n      if (schematicDescription.aliases && schematicDescription.aliases.indexOf(name) != -1) {\n        name = schematicName;\n        break;\n      }\n    }\n    if (!(name in collection.schematics)) {\n      return null;\n    }\n    const collectionPath = dirname(collection.path);\n    const partialDesc: Partial<FileSystemSchematicDesc> | null = collection.schematics[name];\n    if (!partialDesc) {\n      return null;\n    }\n    if (partialDesc.extends) {\n      const index = partialDesc.extends.indexOf(':');\n      const collectionName = index !== -1 ? partialDesc.extends.slice(0, index) : null;\n      const schematicName =\n        index === -1 ? partialDesc.extends : partialDesc.extends.slice(index + 1);\n      if (collectionName !== null) {\n        const extendCollection = this.createCollectionDescription(collectionName);\n        return this.createSchematicDescription(schematicName, extendCollection);\n      } else {\n        return this.createSchematicDescription(schematicName, collection);\n      }\n    }\n    // Use any on this ref as we don't have the OptionT here, but we don't need it (we only need\n    // the path).\n    if (!partialDesc.factory) {\n      throw new SchematicMissingFactoryException(name);\n    }\n    const resolvedRef = this._resolveReferenceString(\n      partialDesc.factory,\n      collectionPath,\n      collection,\n    );\n    if (!resolvedRef) {\n      throw new FactoryCannotBeResolvedException(name);\n    }\n    let schema = partialDesc.schema;\n    let schemaJson: JsonObject | undefined = undefined;\n    if (schema) {\n      if (!isAbsolute(schema)) {\n        schema = join(collectionPath, schema);\n      }\n      schemaJson = readJsonFile(schema) as JsonObject;\n    }\n    // The schematic path is used to resolve URLs.\n    // We should be able to just do `dirname(resolvedRef.path)` but for compatibility with\n    // Bazel under Windows this directory needs to be resolved from the collection instead.\n    // This is needed because on Bazel under Windows the data files (such as the collection or\n    // url files) are not in the same place as the compiled JS.\n    const maybePath = join(collectionPath, partialDesc.factory);\n    const path =\n      existsSync(maybePath) && statSync(maybePath).isDirectory() ? maybePath : dirname(maybePath);\n    return this._transformSchematicDescription(name, collection, {\n      ...partialDesc,\n      schema,\n      schemaJson,\n      name,\n      path,\n      factoryFn: resolvedRef.ref,\n      collection,\n    });\n  }"
        },
        {
          "type": "function",
          "name": "createSourceFromUrl",
          "label": "createSourceFromUrl",
          "start_line": 1,
          "end_line": 230,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "url = parameter0: Url\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = url.<@%unk/%unk: .protocol>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return %AM1$createSourceFromUrl",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "if %0 == 'file:'",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createSourceFromUrl(url: Url): Source | null {\n    switch (url.protocol) {\n      case null:\n      case 'file:':\n        return (context) => {\n          // Check if context has necessary FileSystemSchematicContext path property\n          const fileDescription = context.schematic.description as { path?: string };\n          if (fileDescription.path === undefined) {\n            throw new Error(\n              'Unsupported schematic context. Expected a FileSystemSchematicContext.',\n            );\n          }\n          // Resolve all file:///a/b/c/d from the schematic's own path, and not the current\n          // path.\n          const root = normalize(resolve(fileDescription.path, url.path || ''));\n          return new HostCreateTree(new virtualFs.ScopedHost(new NodeJsSyncHost(), root));\n        };\n    }\n    return null;\n  }"
        },
        {
          "type": "function",
          "name": "transformOptions",
          "label": "transformOptions",
          "start_line": 1,
          "end_line": 250,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "schematic = parameter0: FileSystemSchematicDesc\noptions = parameter1: OptionT extends @ES2015/BuiltinClass: Object\ncontext = parameter2: FileSystemSchematicContext\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\ntransform = %AM2$transformOptions\n%0 = ptrinvoke <@ts_files/133.ts: FileSystemEngineHostBase.%AM2$transformOptions([options, schematic, context])>(%closures0)\n%1 = staticinvoke <@%unk/%unk: .observableFrom()>(%0)\n%2 = <unknown>%1\n%3 = <Observable<ResultT>>%2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "transformOptions<OptionT extends object, ResultT extends object>(\n    schematic: FileSystemSchematicDesc,\n    options: OptionT,\n    context?: FileSystemSchematicContext,\n  ): Observable<ResultT> {\n    const transform = async () => {\n      let transformedOptions = options;\n      for (const transformer of this._transforms) {\n        const transformerResult = transformer(schematic, transformedOptions, context);\n        transformedOptions = await (isObservable(transformerResult)\n          ? lastValueFrom(transformerResult)\n          : transformerResult);\n      }\n      return transformedOptions;\n    };\n    return observableFrom(transform()) as unknown as Observable<ResultT>;\n  }"
        },
        {
          "type": "function",
          "name": "transformContext",
          "label": "transformContext",
          "start_line": 1,
          "end_line": 267,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "context = parameter0: FileSystemSchematicContext\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._contextTransforms>\n%1 = instanceinvoke %0.<@%unk/%unk: .reduce()>(%AM3$transformContext, context)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "transformContext(context: FileSystemSchematicContext): FileSystemSchematicContext {\n    return this._contextTransforms.reduce((acc, curr) => curr(acc), context);\n  }"
        },
        {
          "type": "function",
          "name": "getSchematicRuleFactory",
          "label": "getSchematicRuleFactory",
          "start_line": 1,
          "end_line": 270,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "schematic = parameter0: FileSystemSchematicDesc\n_collection = parameter1: FileSystemCollectionDesc\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = schematic.<@%unk/%unk: .factoryFn>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSchematicRuleFactory<OptionT extends object>(\n    schematic: FileSystemSchematicDesc,\n    _collection: FileSystemCollectionDesc,\n  ): RuleFactory<OptionT> {\n    return schematic.factoryFn;\n  }"
        },
        {
          "type": "function",
          "name": "registerTaskExecutor",
          "label": "registerTaskExecutor",
          "start_line": 1,
          "end_line": 287,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "factory = parameter0: TaskExecutorFactory<T>\noptions = parameter1: T\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = factory.<@%unk/%unk: .name>\n%1 = this.<@ts_files/133.ts: FileSystemEngineHostBase._taskFactories>\ninstanceinvoke %1.<@%unk/%unk: .set()>(%0, %AM4$registerTaskExecutor)\nreturn",
              "start_line": 1,
              "end_line": 287,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "registerTaskExecutor<T>(factory: TaskExecutorFactory<T>, options?: T): void {\n    this._taskFactories.set(factory.name, () => observableFrom(factory.create(options)));\n  }"
        },
        {
          "type": "function",
          "name": "createTaskExecutor",
          "label": "createTaskExecutor",
          "start_line": 1,
          "end_line": 279,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._taskFactories>\nfactory = instanceinvoke %0.<@%unk/%unk: .get()>(name)\nif factory != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = staticinvoke <@%unk/%unk: .factory()>()\nreturn %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: UnregisteredTaskException\ninstanceinvoke %2.<@%unk/%unk: UnregisteredTaskException.constructor()>(name)\n%3 = staticinvoke <@%unk/%unk: .throwError()>(%2)\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "createTaskExecutor(name: string): Observable<TaskExecutor> {\n    const factory = this._taskFactories.get(name);\n    if (factory) {\n      return factory();\n    }\n    return throwError(new UnregisteredTaskException(name));\n  }"
        },
        {
          "type": "function",
          "name": "hasTaskExecutor",
          "label": "hasTaskExecutor",
          "start_line": 1,
          "end_line": 286,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._taskFactories>\n%1 = instanceinvoke %0.<@%unk/%unk: .has()>(name)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "hasTaskExecutor(name: string): boolean {\n    return this._taskFactories.has(name);\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "() => Observable<TaskExecutor>"
        },
        {
          "type": "function",
          "name": "%AM1$createSourceFromUrl",
          "label": "%AM1$createSourceFromUrl",
          "start_line": 1,
          "end_line": 234,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [url]\ncontext = parameter1: unknown\nurl = %closures0.url\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = context.<@%unk/%unk: .schematic>\n%1 = %0.<@%unk/%unk: .description>\nfileDescription = <@ts_files/133.ts: %AC$4>%1\n%2 = fileDescription.<@ts_files/133.ts: %AC$4.path>\nif %2 === undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = new @%unk/%unk: Error\ninstanceinvoke %3.<@%unk/%unk: Error.constructor()>('Unsupported schematic context. Expected a FileSystemSchematicContext.')\nthrow %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = fileDescription.<@ts_files/133.ts: %AC$4.path>\n%5 = url.<@%unk/%unk: .path>\n%6 = %5 || ''\n%7 = staticinvoke <@%unk/%unk: .resolve()>(%4, %6)\nroot = staticinvoke <@%unk/%unk: .normalize()>(%7)\n%8 = new @%unk/%unk: HostCreateTree\n%9 = new @%unk/%unk: virtualFs.ScopedHost\n%10 = new @%unk/%unk: NodeJsSyncHost\ninstanceinvoke %10.<@%unk/%unk: NodeJsSyncHost.constructor()>()\ninstanceinvoke %9.<@%unk/%unk: virtualFs.ScopedHost.constructor()>(%10, root)\ninstanceinvoke %8.<@%unk/%unk: HostCreateTree.constructor()>(%9)\nreturn %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(context) => {\n          // Check if context has necessary FileSystemSchematicContext path property\n          const fileDescription = context.schematic.description as { path?: string };\n          if (fileDescription.path === undefined) {\n            throw new Error(\n              'Unsupported schematic context. Expected a FileSystemSchematicContext.',\n            );\n          }\n          // Resolve all file:///a/b/c/d from the schematic's own path, and not the current\n          // path.\n          const root = normalize(resolve(fileDescription.path, url.path || ''));\n          return new HostCreateTree(new virtualFs.ScopedHost(new NodeJsSyncHost(), root));\n        }"
        },
        {
          "type": "function",
          "name": "%AM2$transformOptions",
          "label": "%AM2$transformOptions",
          "start_line": 1,
          "end_line": 255,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [options, schematic, context]\noptions = %closures0.options\nschematic = %closures0.schematic\ncontext = %closures0.context\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\ntransformedOptions = options\n%0 = this.<@ts_files/133.ts: FileSystemEngineHostBase._transforms>\n%1 = instanceinvoke %0.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke %1.<@%unk/%unk: .next()>()\n%3 = %2.<@ES2015/BuiltinClass: IteratorResult.done>\nif %3 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return transformedOptions",
                      "start_line": 263,
                      "end_line": 263,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = %2.<@ES2015/BuiltinClass: IteratorResult.value>\ntransformer = <OptionTransform>%4\ntransformerResult = staticinvoke <@%unk/%unk: .transformer()>(schematic, transformedOptions, context)\n%5 = staticinvoke <@%unk/%unk: .isObservable()>(transformerResult)\nif %5 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = staticinvoke <@%unk/%unk: .lastValueFrom()>(transformerResult)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "transformedOptions = await %6",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = transformerResult",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n      let transformedOptions = options;\n      for (const transformer of this._transforms) {\n        const transformerResult = transformer(schematic, transformedOptions, context);\n        transformedOptions = await (isObservable(transformerResult)\n          ? lastValueFrom(transformerResult)\n          : transformerResult);\n      }\n      return transformedOptions;\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$transformContext",
          "label": "%AM3$transformContext",
          "start_line": 1,
          "end_line": 268,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "acc = parameter0: unknown\ncurr = parameter1: unknown\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = staticinvoke <@%unk/%unk: .curr()>(acc)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, curr) => curr(acc)"
        },
        {
          "type": "function",
          "name": "%AM4$registerTaskExecutor",
          "label": "%AM4$registerTaskExecutor",
          "start_line": 1,
          "end_line": 277,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [options, factory]\noptions = %closures0.options\nfactory = %closures0.factory\nthis = this: @ts_files/133.ts: FileSystemEngineHostBase\n%0 = instanceinvoke factory.<@%unk/%unk: .create()>(options)\n%1 = staticinvoke <@%unk/%unk: .observableFrom()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => observableFrom(factory.create(options))"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export abstract class FileSystemEngineHostBase implements FileSystemEngineHost {\n  protected abstract _resolveCollectionPath(name: string, requester?: string): string;\n  protected abstract _resolveReferenceString(\n    name: string,\n    parentPath: string,\n    collectionDescription: FileSystemCollectionDesc,\n  ): { ref: RuleFactory<{}>; path: string } | null;\n  protected abstract _transformCollectionDescription(\n    name: string,\n    desc: Partial<FileSystemCollectionDesc>,\n  ): FileSystemCollectionDesc;\n  protected abstract _transformSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n    desc: Partial<FileSystemSchematicDesc>,\n  ): FileSystemSchematicDesc;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _transforms: OptionTransform<any, any>[] = [];\n  private _contextTransforms: ContextTransform[] = [];\n  private _taskFactories = new Map<string, () => Observable<TaskExecutor>>();\n  listSchematicNames(collection: FileSystemCollectionDesc, includeHidden?: boolean) {\n    const schematics: string[] = [];\n    for (const key of Object.keys(collection.schematics)) {\n      const schematic = collection.schematics[key];\n      if ((schematic.hidden && !includeHidden) || schematic.private) {\n        continue;\n      }\n      // If extends is present without a factory it is an alias, do not return it\n      //   unless it is from another collection.\n      if (!schematic.extends || schematic.factory) {\n        schematics.push(key);\n      } else if (schematic.extends && schematic.extends.indexOf(':') !== -1) {\n        schematics.push(key);\n      }\n    }\n    return schematics;\n  }\n  registerOptionsTransform<T extends object | null, R extends object>(t: OptionTransform<T, R>) {\n    this._transforms.push(t);\n  }\n  registerContextTransform(t: ContextTransform) {\n    this._contextTransforms.push(t);\n  }\n  createCollectionDescription(\n    name: string,\n    requester?: FileSystemCollectionDesc,\n  ): FileSystemCollectionDesc {\n    const path = this._resolveCollectionPath(name, requester?.path);\n    const jsonValue = readJsonFile(path);\n    if (!jsonValue || typeof jsonValue != 'object' || Array.isArray(jsonValue)) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // normalize extends property to an array\n    if (typeof jsonValue['extends'] === 'string') {\n      jsonValue['extends'] = [jsonValue['extends']];\n    }\n    const description = this._transformCollectionDescription(name, {\n      ...jsonValue,\n      path,\n    });\n    if (!description || !description.name) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // Validate aliases.\n    const allNames = Object.keys(description.schematics);\n    for (const schematicName of Object.keys(description.schematics)) {\n      const aliases = description.schematics[schematicName].aliases || [];\n      for (const alias of aliases) {\n        if (allNames.indexOf(alias) != -1) {\n          throw new SchematicNameCollisionException(alias);\n        }\n      }\n      allNames.push(...aliases);\n    }\n    return description;\n  }\n  createSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n  ): FileSystemSchematicDesc | null {\n    // Resolve aliases first.\n    for (const schematicName of Object.keys(collection.schematics)) {\n      const schematicDescription = collection.schematics[schematicName];\n      if (schematicDescription.aliases && schematicDescription.aliases.indexOf(name) != -1) {\n        name = schematicName;\n        break;\n      }\n    }\n    if (!(name in collection.schematics)) {\n      return null;\n    }\n    const collectionPath = dirname(collection.path);\n    const partialDesc: Partial<FileSystemSchematicDesc> | null = collection.schematics[name];\n    if (!partialDesc) {\n      return null;\n    }\n    if (partialDesc.extends) {\n      const index = partialDesc.extends.indexOf(':');\n      const collectionName = index !== -1 ? partialDesc.extends.slice(0, index) : null;\n      const schematicName =\n        index === -1 ? partialDesc.extends : partialDesc.extends.slice(index + 1);\n      if (collectionName !== null) {\n        const extendCollection = this.createCollectionDescription(collectionName);\n        return this.createSchematicDescription(schematicName, extendCollection);\n      } else {\n        return this.createSchematicDescription(schematicName, collection);\n      }\n    }\n    // Use any on this ref as we don't have the OptionT here, but we don't need it (we only need\n    // the path).\n    if (!partialDesc.factory) {\n      throw new SchematicMissingFactoryException(name);\n    }\n    const resolvedRef = this._resolveReferenceString(\n      partialDesc.factory,\n      collectionPath,\n      collection,\n    );\n    if (!resolvedRef) {\n      throw new FactoryCannotBeResolvedException(name);\n    }\n    let schema = partialDesc.schema;\n    let schemaJson: JsonObject | undefined = undefined;\n    if (schema) {\n      if (!isAbsolute(schema)) {\n        schema = join(collectionPath, schema);\n      }\n      schemaJson = readJsonFile(schema) as JsonObject;\n    }\n    // The schematic path is used to resolve URLs.\n    // We should be able to just do `dirname(resolvedRef.path)` but for compatibility with\n    // Bazel under Windows this directory needs to be resolved from the collection instead.\n    // This is needed because on Bazel under Windows the data files (such as the collection or\n    // url files) are not in the same place as the compiled JS.\n    const maybePath = join(collectionPath, partialDesc.factory);\n    const path =\n      existsSync(maybePath) && statSync(maybePath).isDirectory() ? maybePath : dirname(maybePath);\n    return this._transformSchematicDescription(name, collection, {\n      ...partialDesc,\n      schema,\n      schemaJson,\n      name,\n      path,\n      factoryFn: resolvedRef.ref,\n      collection,\n    });\n  }\n  createSourceFromUrl(url: Url): Source | null {\n    switch (url.protocol) {\n      case null:\n      case 'file:':\n        return (context) => {\n          // Check if context has necessary FileSystemSchematicContext path property\n          const fileDescription = context.schematic.description as { path?: string };\n          if (fileDescription.path === undefined) {\n            throw new Error(\n              'Unsupported schematic context. Expected a FileSystemSchematicContext.',\n            );\n          }\n          // Resolve all file:///a/b/c/d from the schematic's own path, and not the current\n          // path.\n          const root = normalize(resolve(fileDescription.path, url.path || ''));\n          return new HostCreateTree(new virtualFs.ScopedHost(new NodeJsSyncHost(), root));\n        };\n    }\n    return null;\n  }\n  transformOptions<OptionT extends object, ResultT extends object>(\n    schematic: FileSystemSchematicDesc,\n    options: OptionT,\n    context?: FileSystemSchematicContext,\n  ): Observable<ResultT> {\n    const transform = async () => {\n      let transformedOptions = options;\n      for (const transformer of this._transforms) {\n        const transformerResult = transformer(schematic, transformedOptions, context);\n        transformedOptions = await (isObservable(transformerResult)\n          ? lastValueFrom(transformerResult)\n          : transformerResult);\n      }\n      return transformedOptions;\n    };\n    return observableFrom(transform()) as unknown as Observable<ResultT>;\n  }\n  transformContext(context: FileSystemSchematicContext): FileSystemSchematicContext {\n    return this._contextTransforms.reduce((acc, curr) => curr(acc), context);\n  }\n  getSchematicRuleFactory<OptionT extends object>(\n    schematic: FileSystemSchematicDesc,\n    _collection: FileSystemCollectionDesc,\n  ): RuleFactory<OptionT> {\n    return schematic.factoryFn;\n  }\n  registerTaskExecutor<T>(factory: TaskExecutorFactory<T>, options?: T): void {\n    this._taskFactories.set(factory.name, () => observableFrom(factory.create(options)));\n  }\n  createTaskExecutor(name: string): Observable<TaskExecutor> {\n    const factory = this._taskFactories.get(name);\n    if (factory) {\n      return factory();\n    }\n    return throwError(new UnregisteredTaskException(name));\n  }\n  hasTaskExecutor(name: string): boolean {\n    return this._taskFactories.has(name);\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$FileSystemEngineHostBase$createCollectionDescription$2",
      "label": "%AC$FileSystemEngineHostBase$createCollectionDescription$2",
      "start_line": 139,
      "end_line": 139,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      ...jsonValue,\n      path,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$FileSystemEngineHostBase$createSchematicDescription$3",
      "label": "%AC$FileSystemEngineHostBase$createSchematicDescription$3",
      "start_line": 220,
      "end_line": 220,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      ...partialDesc,\n      schema,\n      schemaJson,\n      name,\n      path,\n      factoryFn: resolvedRef.ref,\n      collection,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$4",
      "label": "%AC$4",
      "start_line": 236,
      "end_line": 236,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ path?: string }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { BaseException, JsonObject, normalize, virtualFs } from '@angular-devkit/core';\nimport { NodeJsSyncHost } from '@angular-devkit/core/node';\nimport { existsSync, statSync } from 'fs';\nimport { dirname, isAbsolute, join, resolve } from 'path';\nimport { Observable, isObservable, lastValueFrom, from as observableFrom, throwError } from 'rxjs';\nimport { Url } from 'url';\nimport {\n  HostCreateTree,\n  RuleFactory,\n  Source,\n  TaskExecutor,\n  TaskExecutorFactory,\n  UnregisteredTaskException,\n} from '../src';\nimport {\n  FileSystemCollectionDesc,\n  FileSystemEngineHost,\n  FileSystemSchematicContext,\n  FileSystemSchematicDesc,\n  FileSystemSchematicDescription,\n} from './description';\nimport { readJsonFile } from './file-system-utility';\nexport declare type OptionTransform<T extends object | null, R extends object> = (\n  schematic: FileSystemSchematicDescription,\n  options: T,\n  context?: FileSystemSchematicContext,\n) => Observable<R> | PromiseLike<R> | R;\nexport declare type ContextTransform = (\n  context: FileSystemSchematicContext,\n) => FileSystemSchematicContext;\nexport class CollectionCannotBeResolvedException extends BaseException {\n  constructor(name: string) {\n    super(`Collection ${JSON.stringify(name)} cannot be resolved.`);\n  }\n}\nexport class InvalidCollectionJsonException extends BaseException {\n  constructor(_name: string, path: string, jsonException?: Error) {\n    let msg = `Collection JSON at path ${JSON.stringify(path)} is invalid.`;\n    if (jsonException) {\n      msg = `${msg} ${jsonException.message}`;\n    }\n    super(msg);\n  }\n}\nexport class SchematicMissingFactoryException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} is missing a factory.`);\n  }\n}\nexport class FactoryCannotBeResolvedException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic ${JSON.stringify(name)} cannot resolve the factory.`);\n  }\n}\nexport class CollectionMissingSchematicsMapException extends BaseException {\n  constructor(name: string) {\n    super(`Collection \"${name}\" does not have a schematics map.`);\n  }\n}\nexport class CollectionMissingFieldsException extends BaseException {\n  constructor(name: string) {\n    super(`Collection \"${name}\" is missing fields.`);\n  }\n}\nexport class SchematicMissingFieldsException extends BaseException {\n  constructor(name: string) {\n    super(`Schematic \"${name}\" is missing fields.`);\n  }\n}\nexport class SchematicMissingDescriptionException extends BaseException {\n  constructor(name: string) {\n    super(`Schematics \"${name}\" does not have a description.`);\n  }\n}\nexport class SchematicNameCollisionException extends BaseException {\n  constructor(name: string) {\n    super(\n      `Schematics/alias ${JSON.stringify(name)} collides with another alias or schematic` +\n        ' name.',\n    );\n  }\n}\nexport abstract class FileSystemEngineHostBase implements FileSystemEngineHost {\n  protected abstract _resolveCollectionPath(name: string, requester?: string): string;\n  protected abstract _resolveReferenceString(\n    name: string,\n    parentPath: string,\n    collectionDescription: FileSystemCollectionDesc,\n  ): { ref: RuleFactory<{}>; path: string } | null;\n  protected abstract _transformCollectionDescription(\n    name: string,\n    desc: Partial<FileSystemCollectionDesc>,\n  ): FileSystemCollectionDesc;\n  protected abstract _transformSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n    desc: Partial<FileSystemSchematicDesc>,\n  ): FileSystemSchematicDesc;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _transforms: OptionTransform<any, any>[] = [];\n  private _contextTransforms: ContextTransform[] = [];\n  private _taskFactories = new Map<string, () => Observable<TaskExecutor>>();\n  listSchematicNames(collection: FileSystemCollectionDesc, includeHidden?: boolean) {\n    const schematics: string[] = [];\n    for (const key of Object.keys(collection.schematics)) {\n      const schematic = collection.schematics[key];\n      if ((schematic.hidden && !includeHidden) || schematic.private) {\n        continue;\n      }\n      // If extends is present without a factory it is an alias, do not return it\n      //   unless it is from another collection.\n      if (!schematic.extends || schematic.factory) {\n        schematics.push(key);\n      } else if (schematic.extends && schematic.extends.indexOf(':') !== -1) {\n        schematics.push(key);\n      }\n    }\n    return schematics;\n  }\n  registerOptionsTransform<T extends object | null, R extends object>(t: OptionTransform<T, R>) {\n    this._transforms.push(t);\n  }\n  registerContextTransform(t: ContextTransform) {\n    this._contextTransforms.push(t);\n  }\n  createCollectionDescription(\n    name: string,\n    requester?: FileSystemCollectionDesc,\n  ): FileSystemCollectionDesc {\n    const path = this._resolveCollectionPath(name, requester?.path);\n    const jsonValue = readJsonFile(path);\n    if (!jsonValue || typeof jsonValue != 'object' || Array.isArray(jsonValue)) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // normalize extends property to an array\n    if (typeof jsonValue['extends'] === 'string') {\n      jsonValue['extends'] = [jsonValue['extends']];\n    }\n    const description = this._transformCollectionDescription(name, {\n      ...jsonValue,\n      path,\n    });\n    if (!description || !description.name) {\n      throw new InvalidCollectionJsonException(name, path);\n    }\n    // Validate aliases.\n    const allNames = Object.keys(description.schematics);\n    for (const schematicName of Object.keys(description.schematics)) {\n      const aliases = description.schematics[schematicName].aliases || [];\n      for (const alias of aliases) {\n        if (allNames.indexOf(alias) != -1) {\n          throw new SchematicNameCollisionException(alias);\n        }\n      }\n      allNames.push(...aliases);\n    }\n    return description;\n  }\n  createSchematicDescription(\n    name: string,\n    collection: FileSystemCollectionDesc,\n  ): FileSystemSchematicDesc | null {\n    // Resolve aliases first.\n    for (const schematicName of Object.keys(collection.schematics)) {\n      const schematicDescription = collection.schematics[schematicName];\n      if (schematicDescription.aliases && schematicDescription.aliases.indexOf(name) != -1) {\n        name = schematicName;\n        break;\n      }\n    }\n    if (!(name in collection.schematics)) {\n      return null;\n    }\n    const collectionPath = dirname(collection.path);\n    const partialDesc: Partial<FileSystemSchematicDesc> | null = collection.schematics[name];\n    if (!partialDesc) {\n      return null;\n    }\n    if (partialDesc.extends) {\n      const index = partialDesc.extends.indexOf(':');\n      const collectionName = index !== -1 ? partialDesc.extends.slice(0, index) : null;\n      const schematicName =\n        index === -1 ? partialDesc.extends : partialDesc.extends.slice(index + 1);\n      if (collectionName !== null) {\n        const extendCollection = this.createCollectionDescription(collectionName);\n        return this.createSchematicDescription(schematicName, extendCollection);\n      } else {\n        return this.createSchematicDescription(schematicName, collection);\n      }\n    }\n    // Use any on this ref as we don't have the OptionT here, but we don't need it (we only need\n    // the path).\n    if (!partialDesc.factory) {\n      throw new SchematicMissingFactoryException(name);\n    }\n    const resolvedRef = this._resolveReferenceString(\n      partialDesc.factory,\n      collectionPath,\n      collection,\n    );\n    if (!resolvedRef) {\n      throw new FactoryCannotBeResolvedException(name);\n    }\n    let schema = partialDesc.schema;\n    let schemaJson: JsonObject | undefined = undefined;\n    if (schema) {\n      if (!isAbsolute(schema)) {\n        schema = join(collectionPath, schema);\n      }\n      schemaJson = readJsonFile(schema) as JsonObject;\n    }\n    // The schematic path is used to resolve URLs.\n    // We should be able to just do `dirname(resolvedRef.path)` but for compatibility with\n    // Bazel under Windows this directory needs to be resolved from the collection instead.\n    // This is needed because on Bazel under Windows the data files (such as the collection or\n    // url files) are not in the same place as the compiled JS.\n    const maybePath = join(collectionPath, partialDesc.factory);\n    const path =\n      existsSync(maybePath) && statSync(maybePath).isDirectory() ? maybePath : dirname(maybePath);\n    return this._transformSchematicDescription(name, collection, {\n      ...partialDesc,\n      schema,\n      schemaJson,\n      name,\n      path,\n      factoryFn: resolvedRef.ref,\n      collection,\n    });\n  }\n  createSourceFromUrl(url: Url): Source | null {\n    switch (url.protocol) {\n      case null:\n      case 'file:':\n        return (context) => {\n          // Check if context has necessary FileSystemSchematicContext path property\n          const fileDescription = context.schematic.description as { path?: string };\n          if (fileDescription.path === undefined) {\n            throw new Error(\n              'Unsupported schematic context. Expected a FileSystemSchematicContext.',\n            );\n          }\n          // Resolve all file:///a/b/c/d from the schematic's own path, and not the current\n          // path.\n          const root = normalize(resolve(fileDescription.path, url.path || ''));\n          return new HostCreateTree(new virtualFs.ScopedHost(new NodeJsSyncHost(), root));\n        };\n    }\n    return null;\n  }\n  transformOptions<OptionT extends object, ResultT extends object>(\n    schematic: FileSystemSchematicDesc,\n    options: OptionT,\n    context?: FileSystemSchematicContext,\n  ): Observable<ResultT> {\n    const transform = async () => {\n      let transformedOptions = options;\n      for (const transformer of this._transforms) {\n        const transformerResult = transformer(schematic, transformedOptions, context);\n        transformedOptions = await (isObservable(transformerResult)\n          ? lastValueFrom(transformerResult)\n          : transformerResult);\n      }\n      return transformedOptions;\n    };\n    return observableFrom(transform()) as unknown as Observable<ResultT>;\n  }\n  transformContext(context: FileSystemSchematicContext): FileSystemSchematicContext {\n    return this._contextTransforms.reduce((acc, curr) => curr(acc), context);\n  }\n  getSchematicRuleFactory<OptionT extends object>(\n    schematic: FileSystemSchematicDesc,\n    _collection: FileSystemCollectionDesc,\n  ): RuleFactory<OptionT> {\n    return schematic.factoryFn;\n  }\n  registerTaskExecutor<T>(factory: TaskExecutorFactory<T>, options?: T): void {\n    this._taskFactories.set(factory.name, () => observableFrom(factory.create(options)));\n  }\n  createTaskExecutor(name: string): Observable<TaskExecutor> {\n    const factory = this._taskFactories.get(name);\n    if (factory) {\n      return factory();\n    }\n    return throwError(new UnregisteredTaskException(name));\n  }\n  hasTaskExecutor(name: string): boolean {\n    return this._taskFactories.has(name);\n  }\n}"
}