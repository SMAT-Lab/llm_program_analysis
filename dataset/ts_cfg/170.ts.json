{
  "type": "file",
  "name": "170.ts",
  "label": "170.ts",
  "start_line": -1,
  "end_line": 154,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/170.ts: %dflt\ngetCompletionsForKeyword = %AM0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 2,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%3 = new @ts_files/170.ts: %AC$%dflt$%AM0$0\ninstanceinvoke %3.<@ts_files/170.ts: %AC$%dflt$%AM0$0.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%3)\n%4 = new @ts_files/170.ts: %AC$%dflt$%AM0$1\ninstanceinvoke %4.<@ts_files/170.ts: %AC$%dflt$%AM0$1.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%4)\n%5 = new @ts_files/170.ts: %AC$%dflt$%AM0$2\ninstanceinvoke %5.<@ts_files/170.ts: %AC$%dflt$%AM0$2.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return completions",
                  "start_line": 154,
                  "end_line": 154,
                  "successors": []
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%6 = new @ts_files/170.ts: %AC$%dflt$%AM0$3\ninstanceinvoke %6.<@ts_files/170.ts: %AC$%dflt$%AM0$3.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%7 = new @ts_files/170.ts: %AC$%dflt$%AM0$4\ninstanceinvoke %7.<@ts_files/170.ts: %AC$%dflt$%AM0$4.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%7)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%8 = new @ts_files/170.ts: %AC$%dflt$%AM0$5\ninstanceinvoke %8.<@ts_files/170.ts: %AC$%dflt$%AM0$5.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%8)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%9 = new @ts_files/170.ts: %AC$%dflt$%AM0$6\ninstanceinvoke %9.<@ts_files/170.ts: %AC$%dflt$%AM0$6.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%9)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%10 = new @ts_files/170.ts: %AC$%dflt$%AM0$7\ninstanceinvoke %10.<@ts_files/170.ts: %AC$%dflt$%AM0$7.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%10)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%11 = new @ts_files/170.ts: %AC$%dflt$%AM0$8\ninstanceinvoke %11.<@ts_files/170.ts: %AC$%dflt$%AM0$8.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%11)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%12 = new @ts_files/170.ts: %AC$%dflt$%AM0$9\ninstanceinvoke %12.<@ts_files/170.ts: %AC$%dflt$%AM0$9.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%13 = new @ts_files/170.ts: %AC$%dflt$%AM0$10\ninstanceinvoke %13.<@ts_files/170.ts: %AC$%dflt$%AM0$10.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%13)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%14 = new @ts_files/170.ts: %AC$%dflt$%AM0$11\ninstanceinvoke %14.<@ts_files/170.ts: %AC$%dflt$%AM0$11.constructor()>()\n%15 = new @ts_files/170.ts: %AC$%dflt$%AM0$12\ninstanceinvoke %15.<@ts_files/170.ts: %AC$%dflt$%AM0$12.constructor()>()\ninstanceinvoke completions.<@%unk/%unk: .push()>(%14, %15)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "if keywordName == 'while'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if keywordName == 'do'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if keywordName == 'if'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if keywordName == 'switch'",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if keywordName == 'function'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if keywordName == 'try'",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "if keywordName == 'throw'",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "if keywordName == 'new'",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "if keywordName == 'async'",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "completion = parameter0: Completion<TernCompletionResult>\ncursorHorizontalPos = parameter1: number\nthis = this: @ts_files/170.ts: %dflt\nkeywordName = completion.<@%unk/%unk: .text>\nif cursorHorizontalPos < 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "indentation = 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = ' '\nindentationSpace = instanceinvoke %1.<@%unk/%unk: .repeat()>(indentation)\n%2 = newarray (any)[0]\ncompletions = %2\nif keywordName == 'for'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "indentation = cursorHorizontalPos",
                  "start_line": 8,
                  "end_line": 8,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(\n  completion: Completion<TernCompletionResult>,\n  cursorHorizontalPos: number,\n) => {\n  const keywordName = completion.text;\n  // indentation needs to be positive number\n  const indentation = cursorHorizontalPos < 0 ? 0 : cursorHorizontalPos;\n  const indentationSpace = \" \".repeat(indentation);\n  const completions = [];\n  switch (keywordName) {\n    // loops\n    case \"for\":\n      completions.push({\n        ...completion,\n        name: \"for-loop\",\n        text: `for(let i=0;i < array.length;i++){\\n${indentationSpace}\\tconst element = array[i];\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For Loop\");\n          element.innerHTML = completion.text;\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-in-loop\",\n        text: `for(const key in object) {\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-in Loop\");\n          element.innerHTML = \"forin\";\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-of-loop\",\n        text: `for(const iterator of object){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-of Loop\");\n          element.innerHTML = \"forof\";\n        },\n      });\n      break;\n    case \"while\":\n      completions.push({\n        ...completion,\n        name: \"while-loop\",\n        text: `while(condition){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"While Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"do\":\n      completions.push({\n        ...completion,\n        name: \"do-while-statement\",\n        text: `do{\\n\\n${indentationSpace}} while (condition);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"do-While Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    // conditional statement\n    case \"if\":\n      completions.push({\n        ...completion,\n        name: \"if-statement\",\n        text: `if(condition){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"if Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"switch\":\n      completions.push({\n        ...completion,\n        name: \"switch-statement\",\n        text: `switch(key){\\n${indentationSpace}\\tcase value:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}\\tdefault:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Switch Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"function\":\n      completions.push({\n        ...completion,\n        name: \"function-statement\",\n        text: `function name(params){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Function Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"try\":\n      completions.push({\n        ...completion,\n        name: \"try-catch\",\n        text: `try{\\n\\n${indentationSpace}}catch(error){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Try-catch Statement\");\n          element.innerHTML = \"try-catch\";\n        },\n      });\n      break;\n    case \"throw\":\n      completions.push({\n        ...completion,\n        name: \"throw-exception\",\n        text: `throw new Error(\"\");`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Throw Exception\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"new\":\n      completions.push({\n        ...completion,\n        name: \"new-statement\",\n        text: `const name = new type(arguments);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"new Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"async\":\n      completions.push(\n        {\n          ...completion,\n          name: \"async-function\",\n          text: `async function() {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        },\n        {\n          ...completion,\n          name: \"async-arrow-function\",\n          text: `async () => {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Arrow Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        },\n      );\n      break;\n  }\n  return completions;\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$0",
      "label": "%AC$%dflt$%AM0$0",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'For Loop')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For Loop\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"for-loop\",\n        text: `for(let i=0;i < array.length;i++){\\n${indentationSpace}\\tconst element = array[i];\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For Loop\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$1",
      "label": "%AC$%dflt$%AM0$1",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'For-in Loop')\nelement.<@%unk/%unk: .innerHTML> = 'forin'\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-in Loop\");\n          element.innerHTML = \"forin\";\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"for-in-loop\",\n        text: `for(const key in object) {\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-in Loop\");\n          element.innerHTML = \"forin\";\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$2",
      "label": "%AC$%dflt$%AM0$2",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'For-of Loop')\nelement.<@%unk/%unk: .innerHTML> = 'forof'\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-of Loop\");\n          element.innerHTML = \"forof\";\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"for-of-loop\",\n        text: `for(const iterator of object){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-of Loop\");\n          element.innerHTML = \"forof\";\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$3",
      "label": "%AC$%dflt$%AM0$3",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'While Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"While Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"while-loop\",\n        text: `while(condition){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"While Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$4",
      "label": "%AC$%dflt$%AM0$4",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'do-While Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"do-While Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"do-while-statement\",\n        text: `do{\\n\\n${indentationSpace}} while (condition);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"do-While Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$5",
      "label": "%AC$%dflt$%AM0$5",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'if Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"if Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"if-statement\",\n        text: `if(condition){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"if Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$6",
      "label": "%AC$%dflt$%AM0$6",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'Switch Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Switch Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"switch-statement\",\n        text: `switch(key){\\n${indentationSpace}\\tcase value:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}\\tdefault:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Switch Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$7",
      "label": "%AC$%dflt$%AM0$7",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'Function Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Function Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"function-statement\",\n        text: `function name(params){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Function Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$8",
      "label": "%AC$%dflt$%AM0$8",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'Try-catch Statement')\nelement.<@%unk/%unk: .innerHTML> = 'try-catch'\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Try-catch Statement\");\n          element.innerHTML = \"try-catch\";\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"try-catch\",\n        text: `try{\\n\\n${indentationSpace}}catch(error){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Try-catch Statement\");\n          element.innerHTML = \"try-catch\";\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$9",
      "label": "%AC$%dflt$%AM0$9",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'Throw Exception')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Throw Exception\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"throw-exception\",\n        text: `throw new Error(\"\");`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Throw Exception\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$10",
      "label": "%AC$%dflt$%AM0$10",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'new Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"new Statement\");\n          element.innerHTML = completion.text;\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        ...completion,\n        name: \"new-statement\",\n        text: `const name = new type(arguments);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"new Statement\");\n          element.innerHTML = completion.text;\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$11",
      "label": "%AC$%dflt$%AM0$11",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'async Function Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Function Statement\");\n            element.innerHTML = completion.text;\n          }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          ...completion,\n          name: \"async-function\",\n          text: `async function() {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$12",
      "label": "%AC$%dflt$%AM0$12",
      "start_line": 1,
      "end_line": 154,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLElement\nthis = this: @ts_files/170.ts: %dflt\ninstanceinvoke element.<@%unk/%unk: .setAttribute()>('keyword', 'async Arrow Function Statement')\n%0 = completion.<@%unk/%unk: .text>\nelement.<@%unk/%unk: .innerHTML> = %0\nreturn",
              "start_line": 1,
              "end_line": 154,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Arrow Function Statement\");\n            element.innerHTML = completion.text;\n          }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          ...completion,\n          name: \"async-arrow-function\",\n          text: `async () => {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Arrow Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { Completion, TernCompletionResult } from \"./CodemirrorTernService\";\nexport const getCompletionsForKeyword = (\n  completion: Completion<TernCompletionResult>,\n  cursorHorizontalPos: number,\n) => {\n  const keywordName = completion.text;\n  // indentation needs to be positive number\n  const indentation = cursorHorizontalPos < 0 ? 0 : cursorHorizontalPos;\n  const indentationSpace = \" \".repeat(indentation);\n  const completions = [];\n  switch (keywordName) {\n    // loops\n    case \"for\":\n      completions.push({\n        ...completion,\n        name: \"for-loop\",\n        text: `for(let i=0;i < array.length;i++){\\n${indentationSpace}\\tconst element = array[i];\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For Loop\");\n          element.innerHTML = completion.text;\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-in-loop\",\n        text: `for(const key in object) {\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-in Loop\");\n          element.innerHTML = \"forin\";\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-of-loop\",\n        text: `for(const iterator of object){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-of Loop\");\n          element.innerHTML = \"forof\";\n        },\n      });\n      break;\n    case \"while\":\n      completions.push({\n        ...completion,\n        name: \"while-loop\",\n        text: `while(condition){\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"While Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"do\":\n      completions.push({\n        ...completion,\n        name: \"do-while-statement\",\n        text: `do{\\n\\n${indentationSpace}} while (condition);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"do-While Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    // conditional statement\n    case \"if\":\n      completions.push({\n        ...completion,\n        name: \"if-statement\",\n        text: `if(condition){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"if Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"switch\":\n      completions.push({\n        ...completion,\n        name: \"switch-statement\",\n        text: `switch(key){\\n${indentationSpace}\\tcase value:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}\\tdefault:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Switch Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"function\":\n      completions.push({\n        ...completion,\n        name: \"function-statement\",\n        text: `function name(params){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Function Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"try\":\n      completions.push({\n        ...completion,\n        name: \"try-catch\",\n        text: `try{\\n\\n${indentationSpace}}catch(error){\\n\\n${indentationSpace}}`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Try-catch Statement\");\n          element.innerHTML = \"try-catch\";\n        },\n      });\n      break;\n    case \"throw\":\n      completions.push({\n        ...completion,\n        name: \"throw-exception\",\n        text: `throw new Error(\"\");`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Throw Exception\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"new\":\n      completions.push({\n        ...completion,\n        name: \"new-statement\",\n        text: `const name = new type(arguments);`,\n        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"new Statement\");\n          element.innerHTML = completion.text;\n        },\n      });\n      break;\n    case \"async\":\n      completions.push(\n        {\n          ...completion,\n          name: \"async-function\",\n          text: `async function() {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        },\n        {\n          ...completion,\n          name: \"async-arrow-function\",\n          text: `async () => {\\n\\n${indentationSpace}}`,\n          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Arrow Function Statement\");\n            element.innerHTML = completion.text;\n          },\n        },\n      );\n      break;\n  }\n  return completions;\n};"
}