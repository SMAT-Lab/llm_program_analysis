{
  "type": "file",
  "name": "142.ts",
  "label": "142.ts",
  "start_line": -1,
  "end_line": 21,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 21,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 21,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/142.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 21,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "renderNumberLabels",
          "label": "renderNumberLabels",
          "start_line": 1,
          "end_line": 3,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "label = parameter0: string\nthis = this: @ts_files/142.ts: %dflt\nif label > 1000",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = staticinvoke <@%unk/%unk: .formatLongNumber()>(label)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = label",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function renderNumberLabels(label: string) {\n  return +label > 1000 ? formatLongNumber(+label) : label;\n}"
        },
        {
          "type": "function",
          "name": "renderDateLabels",
          "label": "renderDateLabels",
          "start_line": 1,
          "end_line": 6,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "unit = parameter0: string\nlocale = parameter1: string\nthis = this: @ts_files/142.ts: %dflt\nreturn %AM0$renderDateLabels",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function renderDateLabels(unit: string, locale: string) {\n  return (label: string, index: number, values: any[]) => {\n    const d = new Date(values[index].value);\n    switch (unit) {\n      case 'minute':\n        return formatDate(d, 'h:mm', locale);\n      case 'hour':\n        return formatDate(d, 'p', locale);\n      case 'day':\n        return formatDate(d, 'MMM d', locale);\n      case 'month':\n        return formatDate(d, 'MMM', locale);\n      case 'year':\n        return formatDate(d, 'YYY', locale);\n      default:\n        return label;\n    }\n  };\n}"
        },
        {
          "type": "function",
          "name": "%AM0$renderDateLabels",
          "label": "%AM0$renderDateLabels",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [unit, locale]\nlabel = parameter1: string\nindex = parameter2: number\nvalues = parameter3: any[]\nunit = %closures0.unit\nlocale = %closures0.locale\nthis = this: @ts_files/142.ts: %dflt\n%0 = new @%unk/%unk: Date\n%1 = values[index]\n%2 = %1.<@%unk/%unk: .value>\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(%2)\nd = %0\nif unit == 'minute'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = staticinvoke <@%unk/%unk: .formatDate()>(d, 'h:mm', locale)\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if unit == 'hour'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = staticinvoke <@%unk/%unk: .formatDate()>(d, 'p', locale)\nreturn %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if unit == 'day'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = staticinvoke <@%unk/%unk: .formatDate()>(d, 'MMM d', locale)\nreturn %5",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if unit == 'month'",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%6 = staticinvoke <@%unk/%unk: .formatDate()>(d, 'MMM', locale)\nreturn %6",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if unit == 'year'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%7 = staticinvoke <@%unk/%unk: .formatDate()>(d, 'YYY', locale)\nreturn %7",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return label",
                                  "start_line": 21,
                                  "end_line": 21,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(label: string, index: number, values: any[]) => {\n    const d = new Date(values[index].value);\n    switch (unit) {\n      case 'minute':\n        return formatDate(d, 'h:mm', locale);\n      case 'hour':\n        return formatDate(d, 'p', locale);\n      case 'day':\n        return formatDate(d, 'MMM d', locale);\n      case 'month':\n        return formatDate(d, 'MMM', locale);\n      case 'year':\n        return formatDate(d, 'YYY', locale);\n      default:\n        return label;\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { formatDate } from 'lib/date';\nimport { formatLongNumber } from 'lib/format';\nexport function renderNumberLabels(label: string) {\n  return +label > 1000 ? formatLongNumber(+label) : label;\n}\nexport function renderDateLabels(unit: string, locale: string) {\n  return (label: string, index: number, values: any[]) => {\n    const d = new Date(values[index].value);\n    switch (unit) {\n      case 'minute':\n        return formatDate(d, 'h:mm', locale);\n      case 'hour':\n        return formatDate(d, 'p', locale);\n      case 'day':\n        return formatDate(d, 'MMM d', locale);\n      case 'month':\n        return formatDate(d, 'MMM', locale);\n      case 'year':\n        return formatDate(d, 'YYY', locale);\n      default:\n        return label;\n    }\n  };\n}"
}