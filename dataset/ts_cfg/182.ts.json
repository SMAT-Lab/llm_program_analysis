{
  "type": "file",
  "name": "182.ts",
  "label": "182.ts",
  "start_line": -1,
  "end_line": 128,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 128,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 128,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/182.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 128,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "deployContract",
          "label": "deployContract",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "wallet = parameter0: WalletUnlocked\nbinaryPath = parameter1: string\nabiPath = parameter2: string\nstorageSlotsPath = parameter3: string\ndeployConfig = parameter4: DeployContractOptions\ncontractPath = parameter5: string\ntomlContents = parameter6: ForcToml\nthis = this: @ts_files/182.ts: %dflt\n%0 = 'Deploying contract for ABI: ' + abiPath\nstaticinvoke <@%unk/%unk: .debug()>(%0)\n%1 = staticinvoke <@%unk/%unk: .existsSync()>(storageSlotsPath)\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = staticinvoke <@%unk/%unk: .readFileSync()>(storageSlotsPath, 'utf-8')\nstorageSlots = instanceinvoke JSON.<@%unk/%unk: .parse()>(%2)\ndeployConfig.<@%unk/%unk: .storageSlots> = storageSlots",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "targetBytecode = staticinvoke <@%unk/%unk: .readFileSync()>(binaryPath)\n%3 = staticinvoke <@%unk/%unk: .readFileSync()>(abiPath, 'utf-8')\ntargetAbi = instanceinvoke JSON.<@%unk/%unk: .parse()>(%3)\n%4 = deployConfig.<@%unk/%unk: .storageSlots>\n%5 = newarray (any)[0]\ntargetStorageSlots = %4 ?? %5\nproxyBytecode = Src14OwnedProxyFactory.<@%unk/%unk: .bytecode>\nproxyAbi = Src14OwnedProxy.<@%unk/%unk: .abi>\n%6 = Src14OwnedProxy.<@%unk/%unk: .storageSlots>\n%7 = newarray (any)[0]\nproxyStorageSlots = %6 ?? %7\n%8 = tomlContents.<@%unk/%unk: .proxy>\nisProxyEnabled = %8.<@%unk/%unk: .enabled>\n%9 = tomlContents.<@%unk/%unk: .proxy>\nproxyAddress = %9.<@%unk/%unk: .address>\n%10 = !isProxyEnabled\nif %10 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = new @%unk/%unk: ContractFactory\ninstanceinvoke %11.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)\ncontractFactory = %11\n%13 = instanceinvoke contractFactory.<@%unk/%unk: .deploy()>(deployConfig)\n%12 = await %13\nwaitForResult = %12.<@%unk/%unk: .waitForResult>\n%15 = staticinvoke <@%unk/%unk: .waitForResult()>()\n%14 = await %15\ncontract = %14.<@%unk/%unk: .contract>\n%16 = contract.<@%unk/%unk: .id>\n%17 = instanceinvoke %16.<@%unk/%unk: .toB256()>()\nreturn %17",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if proxyAddress != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%18 = new @%unk/%unk: ContractFactory\ninstanceinvoke %18.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)\ntargetContractFactory = %18\n%20 = instanceinvoke targetContractFactory.<@%unk/%unk: .deploy()>(deployConfig)\n%19 = await %20\nwaitForTarget = %19.<@%unk/%unk: .waitForResult>\n%22 = staticinvoke <@%unk/%unk: .waitForTarget()>()\n%21 = await %22\ntargetContract = %21.<@%unk/%unk: .contract>\n%23 = new @%unk/%unk: Contract\ninstanceinvoke %23.<@%unk/%unk: Contract.constructor()>(proxyAddress, proxyAbi, wallet)\nproxyContract = %23\n%25 = new @ts_files/182.ts: %AC$%dflt$deployContract$0\ninstanceinvoke %25.<@ts_files/182.ts: %AC$%dflt$deployContract$0.constructor()>()\n%26 = proxyContract.<@%unk/%unk: Contract.functions>\n%27 = instanceinvoke %26.<@%unk/%unk: .set_proxy_target()>(%25)\n%28 = instanceinvoke %27.<@%unk/%unk: .call()>()\n%24 = await %28\nwaitForProxyUpdate = %24.<@%unk/%unk: .waitForResult>\n%29 = staticinvoke <@%unk/%unk: .waitForProxyUpdate()>()\n%30 = await %29\nreturn proxyAddress",
                              "start_line": 1,
                              "end_line": 63,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%31 = new @%unk/%unk: ContractFactory\ninstanceinvoke %31.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)\ntargetContractFactory = %31\n%33 = instanceinvoke targetContractFactory.<@%unk/%unk: .deploy()>(deployConfig)\n%32 = await %33\nwaitForTarget = %32.<@%unk/%unk: .waitForResult>\n%35 = staticinvoke <@%unk/%unk: .waitForTarget()>()\n%34 = await %35\ntargetContract = %34.<@%unk/%unk: .contract>\n%36 = deployConfig\nstorageSlots = %36.<@%unk/%unk: .storageSlots>\nstateRoot = %36.<@%unk/%unk: .stateRoot>\ncommonDeployConfig = %36.<@%unk/%unk: .commonDeployConfig>\nmergedStorageSlots = instanceinvoke targetStorageSlots.<@%unk/%unk: .concat()>(proxyStorageSlots)\n%37 = new @ts_files/182.ts: %AC$%dflt$deployContract$1\ninstanceinvoke %37.<@ts_files/182.ts: %AC$%dflt$deployContract$1.constructor()>()\nproxyDeployConfig = %37\n%38 = new @%unk/%unk: ContractFactory\ninstanceinvoke %38.<@%unk/%unk: ContractFactory.constructor()>(proxyBytecode, proxyAbi, wallet)\nproxyFactory = %38\n%40 = instanceinvoke proxyFactory.<@%unk/%unk: .deploy()>(proxyDeployConfig)\n%39 = await %40\nwaitForProxy = %39.<@%unk/%unk: .waitForResult>\n%42 = staticinvoke <@%unk/%unk: .waitForProxy()>()\n%41 = await %42\nproxyContract = %41.<@%unk/%unk: .contract>\n%44 = proxyContract.<@%unk/%unk: .functions>\n%45 = instanceinvoke %44.<@%unk/%unk: .initialize_proxy()>()\n%46 = instanceinvoke %45.<@%unk/%unk: .call()>()\n%43 = await %46\nwaitForProxyInit = %43.<@%unk/%unk: .waitForResult>\n%47 = staticinvoke <@%unk/%unk: .waitForProxyInit()>()\n%48 = await %47\n%49 = proxyContract.<@%unk/%unk: .id>\nproxyContractId = instanceinvoke %49.<@%unk/%unk: .toB256()>()\nstaticinvoke <@%unk/%unk: .setForcTomlProxyAddress()>(contractPath, proxyContractId)\nreturn proxyContractId",
                              "start_line": 1,
                              "end_line": 92,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function deployContract(\n  wallet: WalletUnlocked,\n  binaryPath: string,\n  abiPath: string,\n  storageSlotsPath: string,\n  deployConfig: DeployContractOptions,\n  contractPath: string,\n  tomlContents: ForcToml\n) {\n  debug(`Deploying contract for ABI: ${abiPath}`);\n  if (existsSync(storageSlotsPath)) {\n    const storageSlots = JSON.parse(readFileSync(storageSlotsPath, 'utf-8'));\n    // eslint-disable-next-line no-param-reassign\n    deployConfig.storageSlots = storageSlots;\n  }\n  const targetBytecode = readFileSync(binaryPath);\n  const targetAbi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n  const targetStorageSlots = deployConfig.storageSlots ?? [];\n  const proxyBytecode = Src14OwnedProxyFactory.bytecode;\n  const proxyAbi = Src14OwnedProxy.abi;\n  const proxyStorageSlots = Src14OwnedProxy.storageSlots ?? [];\n  const isProxyEnabled = tomlContents?.proxy?.enabled;\n  const proxyAddress = tomlContents?.proxy?.address;\n  if (!isProxyEnabled) {\n    // a. Deploy the target contract\n    const contractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult } = await contractFactory.deploy(deployConfig);\n    const { contract } = await waitForResult();\n    return contract.id.toB256();\n  }\n  if (proxyAddress) {\n    // a. Deploy the target contract\n    const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n    const { contract: targetContract } = await waitForTarget();\n    // b. Update proxy contract with the new target contract ID\n    const proxyContract = new Contract(proxyAddress, proxyAbi, wallet);\n    const { waitForResult: waitForProxyUpdate } = await proxyContract.functions\n      .set_proxy_target({ bits: targetContract.id.toB256() })\n      .call();\n    await waitForProxyUpdate();\n    return proxyAddress;\n  }\n  // a. Deploy the target contract\n  const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n  const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n  const { contract: targetContract } = await waitForTarget();\n  // b. Deploy the SR-C14 Compliant / Proxy Contract\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { storageSlots, stateRoot, ...commonDeployConfig } = deployConfig;\n  const mergedStorageSlots = targetStorageSlots.concat(proxyStorageSlots);\n  const proxyDeployConfig: DeployContractOptions = {\n    ...commonDeployConfig,\n    storageSlots: mergedStorageSlots,\n    configurableConstants: {\n      INITIAL_TARGET: { bits: targetContract.id.toB256() },\n      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } },\n    },\n  };\n  const proxyFactory = new ContractFactory(proxyBytecode, proxyAbi, wallet);\n  const { waitForResult: waitForProxy } = await proxyFactory.deploy(proxyDeployConfig);\n  const { contract: proxyContract } = await waitForProxy();\n  // c. Initialize the proxy contract\n  const { waitForResult: waitForProxyInit } = await proxyContract.functions\n    .initialize_proxy()\n    .call();\n  await waitForProxyInit();\n  const proxyContractId = proxyContract.id.toB256();\n  // d. Write the address of the proxy contract to user's Forc.Toml file\n  setForcTomlProxyAddress(contractPath, proxyContractId);\n  return proxyContractId;\n}"
        },
        {
          "type": "function",
          "name": "deployContracts",
          "label": "deployContracts",
          "start_line": 1,
          "end_line": 99,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "config = parameter0: FuelsConfig\nthis = this: @ts_files/182.ts: %dflt\n%0 = newarray (any)[0]\ncontracts = %0\n%1 = config.<@%unk/%unk: .providerUrl>\n%2 = config.<@%unk/%unk: .privateKey>\n%3 = staticinvoke <@%unk/%unk: .createWallet()>(%1, %2)\nwallet = await %3\n%4 = wallet.<@%unk/%unk: .provider>\n%5 = %4.<@%unk/%unk: .url>\n%6 = 'Deploying contracts to: ' + %5\nstaticinvoke <@%unk/%unk: .log()>(%6)\n%7 = config.<@%unk/%unk: .contracts>\ncontractsLen = %7.<@%unk/%unk: .length>\ni = 0",
              "start_line": 1,
              "end_line": 99,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < contractsLen",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = config.<@%unk/%unk: .contracts>\ncontractPath = %8.<@%unk/%unk: .i>\nforcTomlPath = staticinvoke <@%unk/%unk: .getClosestForcTomlDir()>(contractPath)\nbinaryPath = staticinvoke <@%unk/%unk: .getBinaryPath()>(contractPath, config)\nabiPath = staticinvoke <@%unk/%unk: .getABIPath()>(contractPath, config)\nstorageSlotsPath = staticinvoke <@%unk/%unk: .getStorageSlotsPath()>(contractPath, config)\nprojectName = staticinvoke <@%unk/%unk: .getContractName()>(contractPath)\ncontractName = staticinvoke <@%unk/%unk: .getContractCamelCase()>(contractPath)\ntomlContents = staticinvoke <@%unk/%unk: .readForcToml()>(forcTomlPath)\n%9 = config.<@%unk/%unk: .deployConfig>\n%10 = new @ts_files/182.ts: %AC$%dflt$deployContracts$7\ninstanceinvoke %10.<@ts_files/182.ts: %AC$%dflt$deployContracts$7.constructor()>()\n%11 = staticinvoke <@%unk/%unk: .getDeployConfig()>(%9, %10)\ndeployConfig = await %11\n%12 = staticinvoke <@ts_files/182.ts: %dflt.deployContract(WalletUnlocked, string, string, string, DeployContractOptions, string, ForcToml)>(wallet, binaryPath, abiPath, storageSlotsPath, deployConfig, contractPath, tomlContents)\ncontractId = await %12\n%13 = 'Contract deployed: ' + projectName\n%14 = %13 + ' - '\n%15 = %14 + contractId\nstaticinvoke <@%unk/%unk: .debug()>(%15)\n%16 = new @ts_files/182.ts: %AC$%dflt$deployContracts$8\ninstanceinvoke %16.<@ts_files/182.ts: %AC$%dflt$deployContracts$8.constructor()>()\ninstanceinvoke contracts.<@%unk/%unk: .push()>(%16)\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return contracts",
                      "start_line": 128,
                      "end_line": 128,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function deployContracts(config: FuelsConfig) {\n  const contracts: DeployedContract[] = [];\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n  log(`Deploying contracts to: ${wallet.provider.url}`);\n  const contractsLen = config.contracts.length;\n  for (let i = 0; i < contractsLen; i++) {\n    const contractPath = config.contracts[i];\n    const forcTomlPath = getClosestForcTomlDir(contractPath);\n    const binaryPath = getBinaryPath(contractPath, config);\n    const abiPath = getABIPath(contractPath, config);\n    const storageSlotsPath = getStorageSlotsPath(contractPath, config);\n    const projectName = getContractName(contractPath);\n    const contractName = getContractCamelCase(contractPath);\n    const tomlContents = readForcToml(forcTomlPath);\n    const deployConfig = await getDeployConfig(config.deployConfig, {\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    });\n    const contractId = await deployContract(\n      wallet,\n      binaryPath,\n      abiPath,\n      storageSlotsPath,\n      deployConfig,\n      contractPath,\n      tomlContents\n    );\n    debug(`Contract deployed: ${projectName} - ${contractId}`);\n    contracts.push({\n      name: contractName,\n      contractId,\n    });\n  }\n  return contracts;\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$deployContract$0",
      "label": "%AC$%dflt$deployContract$0",
      "start_line": 60,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ bits: targetContract.id.toB256() }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$3",
      "label": "%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$3",
      "start_line": 77,
      "end_line": 77,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ bits: targetContract.id.toB256() }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4$%instInit$5$%instInit$6",
      "label": "%AC$%AC$%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4$%instInit$5$%instInit$6",
      "start_line": 78,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ bits: wallet.address.toB256() }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4$%instInit$5",
      "label": "%AC$%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4$%instInit$5",
      "start_line": 78,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ Address: { bits: wallet.address.toB256() } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4",
      "label": "%AC$%AC$%AC$%dflt$deployContract$1$%instInit$2$%instInit$4",
      "start_line": 78,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ Initialized: { Address: { bits: wallet.address.toB256() } } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$deployContract$1$%instInit$2",
      "label": "%AC$%AC$%dflt$deployContract$1$%instInit$2",
      "start_line": 76,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      INITIAL_TARGET: { bits: targetContract.id.toB256() },\n      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$deployContract$1",
      "label": "%AC$%dflt$deployContract$1",
      "start_line": 73,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    ...commonDeployConfig,\n    storageSlots: mergedStorageSlots,\n    configurableConstants: {\n      INITIAL_TARGET: { bits: targetContract.id.toB256() },\n      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } },\n    },\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$deployContracts$7",
      "label": "%AC$%dflt$deployContracts$7",
      "start_line": 108,
      "end_line": 108,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$deployContracts$8",
      "label": "%AC$%dflt$deployContracts$8",
      "start_line": 123,
      "end_line": 123,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      name: contractName,\n      contractId,\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { WalletUnlocked } from '@fuel-ts/account';\nimport { ContractFactory } from '@fuel-ts/contract';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\nimport { Contract } from '@fuel-ts/program';\nimport { Src14OwnedProxy, Src14OwnedProxyFactory } from '@fuel-ts/recipes';\nimport { existsSync, readFileSync } from 'fs';\nimport {\n  getABIPath,\n  getBinaryPath,\n  getClosestForcTomlDir,\n  getContractCamelCase,\n  getContractName,\n  getStorageSlotsPath,\n  readForcToml,\n  setForcTomlProxyAddress,\n  type ForcToml,\n} from '../../config/forcUtils';\nimport type { FuelsConfig, DeployedContract } from '../../types';\nimport { debug, log } from '../../utils/logger';\nimport { createWallet } from './createWallet';\nimport { getDeployConfig } from './getDeployConfig';\nexport async function deployContract(\n  wallet: WalletUnlocked,\n  binaryPath: string,\n  abiPath: string,\n  storageSlotsPath: string,\n  deployConfig: DeployContractOptions,\n  contractPath: string,\n  tomlContents: ForcToml\n) {\n  debug(`Deploying contract for ABI: ${abiPath}`);\n  if (existsSync(storageSlotsPath)) {\n    const storageSlots = JSON.parse(readFileSync(storageSlotsPath, 'utf-8'));\n    // eslint-disable-next-line no-param-reassign\n    deployConfig.storageSlots = storageSlots;\n  }\n  const targetBytecode = readFileSync(binaryPath);\n  const targetAbi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n  const targetStorageSlots = deployConfig.storageSlots ?? [];\n  const proxyBytecode = Src14OwnedProxyFactory.bytecode;\n  const proxyAbi = Src14OwnedProxy.abi;\n  const proxyStorageSlots = Src14OwnedProxy.storageSlots ?? [];\n  const isProxyEnabled = tomlContents?.proxy?.enabled;\n  const proxyAddress = tomlContents?.proxy?.address;\n  if (!isProxyEnabled) {\n    // a. Deploy the target contract\n    const contractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult } = await contractFactory.deploy(deployConfig);\n    const { contract } = await waitForResult();\n    return contract.id.toB256();\n  }\n  if (proxyAddress) {\n    // a. Deploy the target contract\n    const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n    const { contract: targetContract } = await waitForTarget();\n    // b. Update proxy contract with the new target contract ID\n    const proxyContract = new Contract(proxyAddress, proxyAbi, wallet);\n    const { waitForResult: waitForProxyUpdate } = await proxyContract.functions\n      .set_proxy_target({ bits: targetContract.id.toB256() })\n      .call();\n    await waitForProxyUpdate();\n    return proxyAddress;\n  }\n  // a. Deploy the target contract\n  const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n  const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n  const { contract: targetContract } = await waitForTarget();\n  // b. Deploy the SR-C14 Compliant / Proxy Contract\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { storageSlots, stateRoot, ...commonDeployConfig } = deployConfig;\n  const mergedStorageSlots = targetStorageSlots.concat(proxyStorageSlots);\n  const proxyDeployConfig: DeployContractOptions = {\n    ...commonDeployConfig,\n    storageSlots: mergedStorageSlots,\n    configurableConstants: {\n      INITIAL_TARGET: { bits: targetContract.id.toB256() },\n      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } },\n    },\n  };\n  const proxyFactory = new ContractFactory(proxyBytecode, proxyAbi, wallet);\n  const { waitForResult: waitForProxy } = await proxyFactory.deploy(proxyDeployConfig);\n  const { contract: proxyContract } = await waitForProxy();\n  // c. Initialize the proxy contract\n  const { waitForResult: waitForProxyInit } = await proxyContract.functions\n    .initialize_proxy()\n    .call();\n  await waitForProxyInit();\n  const proxyContractId = proxyContract.id.toB256();\n  // d. Write the address of the proxy contract to user's Forc.Toml file\n  setForcTomlProxyAddress(contractPath, proxyContractId);\n  return proxyContractId;\n}\nexport async function deployContracts(config: FuelsConfig) {\n  const contracts: DeployedContract[] = [];\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n  log(`Deploying contracts to: ${wallet.provider.url}`);\n  const contractsLen = config.contracts.length;\n  for (let i = 0; i < contractsLen; i++) {\n    const contractPath = config.contracts[i];\n    const forcTomlPath = getClosestForcTomlDir(contractPath);\n    const binaryPath = getBinaryPath(contractPath, config);\n    const abiPath = getABIPath(contractPath, config);\n    const storageSlotsPath = getStorageSlotsPath(contractPath, config);\n    const projectName = getContractName(contractPath);\n    const contractName = getContractCamelCase(contractPath);\n    const tomlContents = readForcToml(forcTomlPath);\n    const deployConfig = await getDeployConfig(config.deployConfig, {\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    });\n    const contractId = await deployContract(\n      wallet,\n      binaryPath,\n      abiPath,\n      storageSlotsPath,\n      deployConfig,\n      contractPath,\n      tomlContents\n    );\n    debug(`Contract deployed: ${projectName} - ${contractId}`);\n    contracts.push({\n      name: contractName,\n      contractId,\n    });\n  }\n  return contracts;\n}"
}