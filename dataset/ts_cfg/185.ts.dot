digraph "185.ts" {
subgraph "cluster_@ts_files/185.ts: %dflt.[static]%dflt()" {
  label="@ts_files/185.ts: %dflt.[static]%dflt()";
  Node33780 [label="id:0
      this = this: @ts_files/185.ts: %dflt
      staticinvoke <@%unk/%unk: .RegisterClass()>('BABYLON.NormalMaterial', NormalMaterial)
      return"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterialDefines.constructor()" {
  label="@ts_files/185.ts: NormalMaterialDefines.constructor()";
  Node49760 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterialDefines
      instanceinvoke this.<@ts_files/185.ts: NormalMaterialDefines.%instInit()>()
      staticinvoke <@%unk/%unk: .super()>()
      instanceinvoke this.<@%unk/%unk: .rebuild()>()
      return"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.constructor(string, Scene)" {
  label="@ts_files/185.ts: NormalMaterial.constructor(string, Scene)";
  Node55070 [label="id:0
      instanceinvoke this.<@ts_files/185.ts: NormalMaterial.%instInit()>()
      name = parameter0: string
      scene = parameter1: Scene
      this = this: @ts_files/185.ts: NormalMaterial
      staticinvoke <@%unk/%unk: .super()>(name, scene)
      return"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.needAlphaBlending()" {
  label="@ts_files/185.ts: NormalMaterial.needAlphaBlending()";
  Node47530 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = this.<@ts_files/185.ts: NormalMaterial.alpha>
      %1 = %0 < 1
      return %1"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.needAlphaBlendingForMesh(AbstractMesh)" {
  label="@ts_files/185.ts: NormalMaterial.needAlphaBlendingForMesh(AbstractMesh)";
  Node66620 [label="id:0
      mesh = parameter0: AbstractMesh
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = instanceinvoke this.<@ts_files/185.ts: NormalMaterial.needAlphaBlending()>()
      %1 = mesh.<@%unk/%unk: .visibility>
      %2 = %1 < 1
      %3 = %0 || %2
      return %3"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.needAlphaTesting()" {
  label="@ts_files/185.ts: NormalMaterial.needAlphaTesting()";
  Node46840 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      return false"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.getAlphaTestTexture()" {
  label="@ts_files/185.ts: NormalMaterial.getAlphaTestTexture()";
  Node50270 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      return null"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.isReadyForSubMesh(AbstractMesh, SubMesh, boolean)" {
  label="@ts_files/185.ts: NormalMaterial.isReadyForSubMesh(AbstractMesh, SubMesh, boolean)";
  Node75630 [label="id:0
      mesh = parameter0: AbstractMesh
      subMesh = parameter1: SubMesh
      useInstances = parameter2: boolean
      this = this: @ts_files/185.ts: NormalMaterial
      drawWrapper = subMesh.<@%unk/%unk: ._drawWrapper>
      %0 = this.<@ts_files/185.ts: NormalMaterial.isFrozen>
      if %0 != 0"];
  Node75631 [label="id:1
      %1 = drawWrapper.<@%unk/%unk: .effect>
      %2 = drawWrapper.<@%unk/%unk: ._wasPreviouslyReady>
      %3 = %1 && %2
      %4 = drawWrapper.<@%unk/%unk: ._wasPreviouslyUsingInstances>
      %5 = %4 === useInstances
      %6 = %3 && %5
      if %6 != false"];
  Node75632 [label="id:2
      return true"];
  Node75633 [label="id:3
      %7 = subMesh.<@%unk/%unk: .materialDefines>
      %8 = !%7
      if %8 != 0"];
  Node75634 [label="id:4
      %9 = new @ts_files/185.ts: NormalMaterialDefines
      instanceinvoke %9.<@ts_files/185.ts: NormalMaterialDefines.constructor()>()
      subMesh.<@%unk/%unk: .materialDefines> = %9"];
  Node75635 [label="id:5
      defines = <@ts_files/185.ts: NormalMaterialDefines>subMesh.<@%unk/%unk: .materialDefines>
      scene = instanceinvoke this.<@%unk/%unk: .getScene()>()
      %10 = instanceinvoke this.<@%unk/%unk: ._isReadyForSubMesh()>(subMesh)
      if %10 != 0"];
  Node75636 [label="id:6
      return true"];
  Node75637 [label="id:7
      engine = instanceinvoke scene.<@%unk/%unk: .getEngine()>()
      %11 = defines.<@ts_files/185.ts: NormalMaterialDefines._areTexturesDirty>
      if %11 != 0"];
  Node75638 [label="id:8
      defines.<@ts_files/185.ts: NormalMaterialDefines._needUVs> = false
      %12 = scene.<@%unk/%unk: .texturesEnabled>
      if %12 != 0"];
  Node75639 [label="id:9
      %13 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>
      %14 = MaterialFlags.<@%unk/%unk: .DiffuseTextureEnabled>
      %15 = %13 && %14
      if %15 != false"];
  Node756310 [label="id:10
      %16 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>
      %17 = instanceinvoke %16.<@%unk/%unk: .isReady()>()
      %18 = !%17
      if %18 != 0"];
  Node756311 [label="id:11
      return false"];
  Node756312 [label="id:12
      defines.<@ts_files/185.ts: NormalMaterialDefines._needUVs> = true
      defines.<@ts_files/185.ts: NormalMaterialDefines.DIFFUSE> = true"];
  Node756313 [label="id:13
      instanceinvoke defines.<@%unk/%unk: .markAsProcessed()>()
      instanceinvoke scene.<@%unk/%unk: .resetCachedMaterial()>()
      %29 = new @%unk/%unk: EffectFallbacks
      instanceinvoke %29.<@%unk/%unk: EffectFallbacks.constructor()>()
      fallbacks = %29
      %30 = defines.<@ts_files/185.ts: NormalMaterialDefines.FOG>
      if %30 != false"];
  Node756314 [label="id:14
      instanceinvoke fallbacks.<@%unk/%unk: .addFallback()>(1, 'FOG')"];
  Node756315 [label="id:15
      staticinvoke <@%unk/%unk: .HandleFallbacksForShadows()>(defines, fallbacks)
      %31 = defines.<@ts_files/185.ts: NormalMaterialDefines.NUM_BONE_INFLUENCERS>
      if %31 > 0"];
  Node756316 [label="id:16
      instanceinvoke fallbacks.<@%unk/%unk: .addCPUSkinningFallback()>(0, mesh)"];
  Node756317 [label="id:17
      %32 = scene.<@%unk/%unk: .imageProcessingConfiguration>
      %33 = %32.<@%unk/%unk: .applyByPostProcess>
      defines.<@ts_files/185.ts: NormalMaterialDefines.IMAGEPROCESSINGPOSTPROCESS> = %33
      %34 = VertexBuffer.<@%unk/%unk: .PositionKind>
      %35 = newarray (unknown)[1]
      %35[0] = %34
      attribs = %35
      %36 = defines.<@ts_files/185.ts: NormalMaterialDefines.NORMAL>
      if %36 != false"];
  Node756318 [label="id:18
      %37 = VertexBuffer.<@%unk/%unk: .NormalKind>
      instanceinvoke attribs.<@%unk/%unk: .push()>(%37)"];
  Node756319 [label="id:19
      %38 = defines.<@ts_files/185.ts: NormalMaterialDefines.UV1>
      if %38 != false"];
  Node756320 [label="id:20
      %39 = VertexBuffer.<@%unk/%unk: .UVKind>
      instanceinvoke attribs.<@%unk/%unk: .push()>(%39)"];
  Node756321 [label="id:21
      %40 = defines.<@ts_files/185.ts: NormalMaterialDefines.UV2>
      if %40 != false"];
  Node756322 [label="id:22
      %41 = VertexBuffer.<@%unk/%unk: .UV2Kind>
      instanceinvoke attribs.<@%unk/%unk: .push()>(%41)"];
  Node756323 [label="id:23
      staticinvoke <@%unk/%unk: .PrepareAttributesForBones()>(attribs, mesh, defines, fallbacks)
      staticinvoke <@%unk/%unk: .PrepareAttributesForInstances()>(attribs, defines)
      shaderName = 'normal'
      join = instanceinvoke defines.<@%unk/%unk: .toString()>()
      %42 = newarray (string)[13]
      %42[0] = 'world'
      %42[1] = 'view'
      %42[2] = 'viewProjection'
      %42[3] = 'vEyePosition'
      %42[4] = 'vLightsType'
      %42[5] = 'vDiffuseColor'
      %42[6] = 'vFogInfos'
      %42[7] = 'vFogColor'
      %42[8] = 'pointSize'
      %42[9] = 'vDiffuseInfos'
      %42[10] = 'mBones'
      %42[11] = 'diffuseMatrix'
      %42[12] = 'logarithmicDepthConstant'
      uniforms = %42
      %43 = newarray (string)[1]
      %43[0] = 'diffuseSampler'
      samplers = %43
      %44 = newarray (any)[0]
      uniformBuffers = %44
      staticinvoke <@%unk/%unk: .addClipPlaneUniforms()>(uniforms)
      %45 = new @ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0
      instanceinvoke %45.<@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0.constructor()>()
      %46 = <@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$0>%45
      staticinvoke <@%unk/%unk: .PrepareUniformsAndSamplersList()>(%46)
      %47 = new @ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1
      instanceinvoke %47.<@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1.constructor()>()
      %48 = <@ts_files/185.ts: %AC$NormalMaterial$isReadyForSubMesh$1>%47
      %49 = instanceinvoke scene.<@%unk/%unk: .getEngine()>()
      %50 = instanceinvoke %49.<@%unk/%unk: .createEffect()>(shaderName, %48, engine)
      %51 = this.<@ts_files/185.ts: NormalMaterial._materialContext>
      instanceinvoke subMesh.<@%unk/%unk: .setEffect()>(%50, defines, %51)"];
  Node756324 [label="id:24
      %52 = subMesh.<@%unk/%unk: .effect>
      %53 = !%52
      %54 = subMesh.<@%unk/%unk: .effect>
      %55 = instanceinvoke %54.<@%unk/%unk: .isReady()>()
      %56 = !%55
      %57 = %53 || %56
      if %57 != false"];
  Node756325 [label="id:25
      return false"];
  Node756326 [label="id:26
      %58 = instanceinvoke scene.<@%unk/%unk: .getRenderId()>()
      defines.<@ts_files/185.ts: NormalMaterialDefines._renderId> = %58
      drawWrapper.<@%unk/%unk: ._wasPreviouslyReady> = true
      %59 = !useInstances
      %60 = !%59
      drawWrapper.<@%unk/%unk: ._wasPreviouslyUsingInstances> = %60
      return true"];
  Node756327 [label="id:27
      %19 = this.<@ts_files/185.ts: NormalMaterial._useLogarithmicDepth>
      %20 = this.<@ts_files/185.ts: NormalMaterial.pointsCloud>
      %21 = this.<@ts_files/185.ts: NormalMaterial.fogEnabled>
      %22 = instanceinvoke this.<@%unk/%unk: ._shouldTurnAlphaTestOn()>(mesh)
      staticinvoke <@%unk/%unk: .PrepareDefinesForMisc()>(mesh, scene, %19, %20, %21, %22, defines)
      defines.<@ts_files/185.ts: NormalMaterialDefines._needNormals> = true
      %23 = this.<@ts_files/185.ts: NormalMaterial._maxSimultaneousLights>
      %24 = this.<@ts_files/185.ts: NormalMaterial._disableLighting>
      staticinvoke <@%unk/%unk: .PrepareDefinesForLights()>(scene, mesh, defines, false, %23, %24)
      if useInstances != false"];
  Node756328 [label="id:28
      %25 = true"];
  Node756329 [label="id:29
      %25 = false"];
  Node756330 [label="id:30
      staticinvoke <@%unk/%unk: .PrepareDefinesForFrameBoundValues()>(scene, engine, this, defines, %25)
      %26 = this.<@ts_files/185.ts: NormalMaterial._disableLighting>
      %27 = !%26
      defines.<@ts_files/185.ts: NormalMaterialDefines.LIGHTING> = %27
      staticinvoke <@%unk/%unk: .PrepareDefinesForAttributes()>(mesh, defines, true, true)
      %28 = defines.<@ts_files/185.ts: NormalMaterialDefines.isDirty>
      if %28 != 0"];
  Node75630 -> Node75631;
  Node75630 -> Node75633;
  Node75631 -> Node75632;
  Node75631 -> Node75633;
  Node75633 -> Node75634;
  Node75633 -> Node75635;
  Node75634 -> Node75635;
  Node75635 -> Node75636;
  Node75635 -> Node75637;
  Node75637 -> Node75638;
  Node75637 -> Node756327;
  Node75638 -> Node75639;
  Node75638 -> Node756327;
  Node75639 -> Node756310;
  Node75639 -> Node756327;
  Node756310 -> Node756311;
  Node756310 -> Node756312;
  Node756312 -> Node756327;
  Node756313 -> Node756314;
  Node756313 -> Node756315;
  Node756314 -> Node756315;
  Node756315 -> Node756316;
  Node756315 -> Node756317;
  Node756316 -> Node756317;
  Node756317 -> Node756318;
  Node756317 -> Node756319;
  Node756318 -> Node756319;
  Node756319 -> Node756320;
  Node756319 -> Node756321;
  Node756320 -> Node756321;
  Node756321 -> Node756322;
  Node756321 -> Node756323;
  Node756322 -> Node756323;
  Node756323 -> Node756324;
  Node756324 -> Node756325;
  Node756324 -> Node756326;
  Node756327 -> Node756328;
  Node756327 -> Node756329;
  Node756328 -> Node756330;
  Node756329 -> Node756330;
  Node756330 -> Node756313;
  Node756330 -> Node756324;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.bindForSubMesh(Matrix, Mesh, SubMesh)" {
  label="@ts_files/185.ts: NormalMaterial.bindForSubMesh(Matrix, Mesh, SubMesh)";
  Node63280 [label="id:0
      world = parameter0: Matrix
      mesh = parameter1: Mesh
      subMesh = parameter2: SubMesh
      this = this: @ts_files/185.ts: NormalMaterial
      scene = instanceinvoke this.<@%unk/%unk: .getScene()>()
      defines = <@ts_files/185.ts: NormalMaterialDefines>subMesh.<@%unk/%unk: .materialDefines>
      %0 = !defines
      if %0 != undefined"];
  Node63281 [label="id:1
      return"];
  Node63282 [label="id:2
      effect = subMesh.<@%unk/%unk: .effect>
      %1 = !effect
      if %1 != 0"];
  Node63283 [label="id:3
      return"];
  Node63284 [label="id:4
      this.<@ts_files/185.ts: NormalMaterial._activeEffect> = effect
      instanceinvoke this.<@%unk/%unk: .bindOnlyWorldMatrix()>(world)
      %2 = instanceinvoke scene.<@%unk/%unk: .getTransformMatrix()>()
      %3 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %3.<@%unk/%unk: .setMatrix()>('viewProjection', %2)
      %4 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      staticinvoke <@%unk/%unk: .BindBonesParameters()>(mesh, %4)
      %5 = instanceinvoke this.<@%unk/%unk: ._mustRebind()>(scene, effect, subMesh)
      if %5 != 0"];
  Node63285 [label="id:5
      %6 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %7 = MaterialFlags.<@%unk/%unk: .DiffuseTextureEnabled>
      %8 = %6 && %7
      if %8 != false"];
  Node63286 [label="id:6
      %9 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %10 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %10.<@%unk/%unk: .setTexture()>('diffuseSampler', %9)
      %11 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %12 = %11.<@%unk/%unk: .coordinatesIndex>
      %13 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %14 = %13.<@%unk/%unk: .level>
      %15 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %15.<@%unk/%unk: .setFloat2()>('vDiffuseInfos', %12, %14)
      %16 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %17 = instanceinvoke %16.<@%unk/%unk: .getTextureMatrix()>()
      %18 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %18.<@%unk/%unk: .setMatrix()>('diffuseMatrix', %17)"];
  Node63287 [label="id:7
      staticinvoke <@%unk/%unk: .bindClipPlane()>(effect, this, scene)
      %19 = this.<@ts_files/185.ts: NormalMaterial.pointsCloud>
      if %19 != 0"];
  Node63288 [label="id:8
      %20 = this.<@ts_files/185.ts: NormalMaterial.pointSize>
      %21 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %21.<@%unk/%unk: .setFloat()>('pointSize', %20)"];
  Node63289 [label="id:9
      %22 = this.<@ts_files/185.ts: NormalMaterial._useLogarithmicDepth>
      if %22 != 0"];
  Node632810 [label="id:10
      staticinvoke <@%unk/%unk: .BindLogDepth()>(defines, effect, scene)"];
  Node632811 [label="id:11
      instanceinvoke scene.<@%unk/%unk: .bindEyePosition()>(effect)"];
  Node632812 [label="id:12
      %23 = this.<@ts_files/185.ts: NormalMaterial.diffuseColor>
      %24 = this.<@ts_files/185.ts: NormalMaterial.alpha>
      %25 = mesh.<@%unk/%unk: .visibility>
      %26 = %24 * %25
      %27 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %27.<@%unk/%unk: .setColor4()>('vDiffuseColor', %23, %26)
      %28 = scene.<@%unk/%unk: .lightsEnabled>
      %29 = this.<@ts_files/185.ts: NormalMaterial.disableLighting>
      %30 = !%29
      %31 = %28 && %30
      if %31 != false"];
  Node632813 [label="id:13
      %32 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      staticinvoke <@%unk/%unk: .BindLights()>(scene, mesh, %32, defines)"];
  Node632814 [label="id:14
      %33 = scene.<@%unk/%unk: .fogEnabled>
      %34 = mesh.<@%unk/%unk: .applyFog>
      %35 = %33 && %34
      %36 = scene.<@%unk/%unk: .fogMode>
      %37 = Scene.<@%unk/%unk: .FOGMODE_NONE>
      %38 = %36 !== %37
      %39 = %35 && %38
      if %39 != false"];
  Node632815 [label="id:15
      %40 = instanceinvoke scene.<@%unk/%unk: .getViewMatrix()>()
      %41 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke %41.<@%unk/%unk: .setMatrix()>('view', %40)"];
  Node632816 [label="id:16
      %42 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      staticinvoke <@%unk/%unk: .BindFogParameters()>(scene, mesh, %42)
      %43 = this.<@ts_files/185.ts: NormalMaterial._activeEffect>
      instanceinvoke this.<@%unk/%unk: ._afterBind()>(mesh, %43, subMesh)
      return"];
  Node63280 -> Node63281;
  Node63280 -> Node63282;
  Node63282 -> Node63283;
  Node63282 -> Node63284;
  Node63284 -> Node63285;
  Node63284 -> Node632812;
  Node63285 -> Node63286;
  Node63285 -> Node63287;
  Node63286 -> Node63287;
  Node63287 -> Node63288;
  Node63287 -> Node63289;
  Node63288 -> Node63289;
  Node63289 -> Node632810;
  Node63289 -> Node632811;
  Node632810 -> Node632811;
  Node632811 -> Node632812;
  Node632812 -> Node632813;
  Node632812 -> Node632814;
  Node632813 -> Node632814;
  Node632814 -> Node632815;
  Node632814 -> Node632816;
  Node632815 -> Node632816;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.getAnimatables()" {
  label="@ts_files/185.ts: NormalMaterial.getAnimatables()";
  Node44930 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = newarray (any)[0]
      results = %0
      %1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %2 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %3 = %2.<@%unk/%unk: .animations>
      %4 = %1 && %3
      %5 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      %6 = %5.<@%unk/%unk: .animations>
      %7 = %6.<@%unk/%unk: .length>
      %8 = %7 > 0
      %9 = %4 && %8
      if %9 != false"];
  Node44931 [label="id:1
      %10 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      instanceinvoke results.<@%unk/%unk: .push()>(%10)"];
  Node44932 [label="id:2
      return results"];
  Node44930 -> Node44931;
  Node44930 -> Node44932;
  Node44931 -> Node44932;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.getActiveTextures()" {
  label="@ts_files/185.ts: NormalMaterial.getActiveTextures()";
  Node48440 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      activeTextures = instanceinvoke super.<@%unk/%unk: .getActiveTextures()>()
      %0 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>
      if %0 != 0"];
  Node48441 [label="id:1
      %1 = this.<@ts_files/185.ts: NormalMaterial._diffuseTexture>
      instanceinvoke activeTextures.<@%unk/%unk: .push()>(%1)"];
  Node48442 [label="id:2
      return activeTextures"];
  Node48440 -> Node48441;
  Node48440 -> Node48442;
  Node48441 -> Node48442;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.hasTexture(BaseTexture)" {
  label="@ts_files/185.ts: NormalMaterial.hasTexture(BaseTexture)";
  Node52530 [label="id:0
      texture = parameter0: BaseTexture
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = instanceinvoke super.<@%unk/%unk: .hasTexture()>(texture)
      if %0 != 0"];
  Node52531 [label="id:1
      return true"];
  Node52532 [label="id:2
      %1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      if %1 === texture"];
  Node52533 [label="id:3
      return true"];
  Node52534 [label="id:4
      return false"];
  Node52530 -> Node52531;
  Node52530 -> Node52532;
  Node52532 -> Node52533;
  Node52532 -> Node52534;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.dispose(boolean)" {
  label="@ts_files/185.ts: NormalMaterial.dispose(boolean)";
  Node45470 [label="id:0
      forceDisposeEffect = parameter0: boolean
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      if %0 != 0"];
  Node45471 [label="id:1
      %1 = this.<@ts_files/185.ts: NormalMaterial.diffuseTexture>
      instanceinvoke %1.<@%unk/%unk: .dispose()>()"];
  Node45472 [label="id:2
      instanceinvoke super.<@%unk/%unk: .dispose()>(forceDisposeEffect)
      return"];
  Node45470 -> Node45471;
  Node45470 -> Node45472;
  Node45471 -> Node45472;
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.clone(string)" {
  label="@ts_files/185.ts: NormalMaterial.clone(string)";
  Node42440 [label="id:0
      name = parameter0: string
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = instanceinvoke SerializationHelper.<@%unk/%unk: .Clone()>(%AM0$clone, this)
      return %0"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.serialize()" {
  label="@ts_files/185.ts: NormalMaterial.serialize()";
  Node40200 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      serializationObject = instanceinvoke super.<@%unk/%unk: .serialize()>()
      serializationObject.<@%unk/%unk: .customType> = 'BABYLON.NormalMaterial'
      return serializationObject"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.getClassName()" {
  label="@ts_files/185.ts: NormalMaterial.getClassName()";
  Node42590 [label="id:0
      this = this: @ts_files/185.ts: NormalMaterial
      return 'NormalMaterial'"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.%AM0$clone([name])" {
  label="@ts_files/185.ts: NormalMaterial.%AM0$clone([name])";
  Node44450 [label="id:0
      %closures0 = parameter0: [name]
      name = %closures0.name
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = new @ts_files/185.ts: NormalMaterial
      %1 = instanceinvoke this.<@%unk/%unk: .getScene()>()
      instanceinvoke %0.<@ts_files/185.ts: NormalMaterial.constructor(string, Scene)>(name, %1)
      return %0"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.%AM1$Parse([source, scene])" {
  label="@ts_files/185.ts: NormalMaterial.%AM1$Parse([source, scene])";
  Node52660 [label="id:0
      %closures0 = parameter0: [source, scene]
      source = %closures0.source
      scene = %closures0.scene
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = new @ts_files/185.ts: NormalMaterial
      %1 = source.<@%unk/%unk: .name>
      instanceinvoke %0.<@ts_files/185.ts: NormalMaterial.constructor(string, Scene)>(%1, scene)
      return %0"];
}
subgraph "cluster_@ts_files/185.ts: NormalMaterial.[static]Parse(any, Scene, string)" {
  label="@ts_files/185.ts: NormalMaterial.[static]Parse(any, Scene, string)";
  Node60280 [label="id:0
      source = parameter0: any
      scene = parameter1: Scene
      rootUrl = parameter2: string
      this = this: @ts_files/185.ts: NormalMaterial
      %0 = instanceinvoke SerializationHelper.<@%unk/%unk: .Parse()>(%AM1$Parse, source, scene, rootUrl)
      return %0"];
}
}
