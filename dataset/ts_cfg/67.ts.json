{
  "type": "file",
  "name": "67.ts",
  "label": "67.ts",
  "start_line": -1,
  "end_line": 525,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 497,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: %dflt\nTAG = 'UserFileModel'\n%0 = new @ts_files/67.ts: UserFileModel\ninstanceinvoke %0.<@ts_files/67.ts: UserFileModel.constructor()>()\nuserFileModel = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "UserFileModelItem",
      "label": "UserFileModelItem",
      "start_line": 29,
      "end_line": 29,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class UserFileModelItem {\n  fileAsset: photoAccessHelper.PhotoAsset;\n  counts: number;\n}"
    },
    {
      "type": "class",
      "name": "UserFileModel",
      "label": "UserFileModel",
      "start_line": 1,
      "end_line": 525,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke this.<@ts_files/67.ts: UserFileModel.%instInit()>()\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n  }"
        },
        {
          "type": "function",
          "name": "onCreate",
          "label": "onCreate",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "context = parameter0: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\nif %0 == undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke photoAccessHelper.<@%unk/%unk: .getPhotoAccessHelper()>(context)\nthis.<@ts_files/67.ts: UserFileModel.userFileMgr> = %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 47,
                      "end_line": 497,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCreate(context): void {\n    if (this.userFileMgr == undefined) {\n      this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getUserFileMgr",
          "label": "getUserFileMgr",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\n%0 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;\n  }"
        },
        {
          "type": "function",
          "name": "createOne",
          "label": "createOne",
          "start_line": 1,
          "end_line": 377,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "displayName = parameter0: string\nalbumUri = parameter1: string\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'createOne displayName:' + displayName\n%1 = %0 + ' albumUri: '\n%2 = %1 + albumUri\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%4 = instanceinvoke %3.<@%unk/%unk: .createAsset()>(displayName, albumUri)\nfileAsset = await %4\n%5 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.getUserAlbumItemByUri(string)>(albumUri)\nalbum = await %5\n%6 = newarray (unknown)[1]\n%6[0] = fileAsset\n%7 = instanceinvoke album.<@%unk/%unk: .addAssets()>(%6)\n%8 = await %7\nreturn fileAsset",
              "start_line": 1,
              "end_line": 377,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);\n    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    await album.addAssets([fileAsset]);\n    return fileAsset;\n  }"
        },
        {
          "type": "function",
          "name": "getUserAlbumItemByUri",
          "label": "getUserAlbumItemByUri",
          "start_line": 1,
          "end_line": 453,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\nfetchResult = null\nalbum = null",
              "start_line": 1,
              "end_line": 453,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getUserAlbumItemByUri')\n%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%2 = %1.<@%unk/%unk: .URI>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, uri)\n%3 = new @ts_files/67.ts: %AC$UserFileModel$getUserAlbumItemByUri$0\ninstanceinvoke %3.<@ts_files/67.ts: %AC$UserFileModel$getUserAlbumItemByUri$0.constructor()>()\nfetchOptions = %3\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%5 = %4.<@%unk/%unk: .USER>\n%6 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%7 = %6.<@%unk/%unk: .USER_GENERIC>\n%8 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%9 = instanceinvoke %8.<@%unk/%unk: .getAlbums()>(%5, %7, fetchOptions)\nfetchResult = await %9\n%10 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%11 = 'get Album fetchResult, count: ' + %10\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %11)\n%12 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif %12 > 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "album = instanceinvoke fetchResult.<@%unk/%unk: .getFirstObject()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return album",
                                  "start_line": 81,
                                  "end_line": 487,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%13 = 'get Album fetchResult failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %13)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%14 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return album\nthrow %14",
                      "start_line": 81,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }"
        },
        {
          "type": "function",
          "name": "copyOne",
          "label": "copyOne",
          "start_line": 1,
          "end_line": 84,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "source = parameter0: photoAccessHelper.PhotoAsset\ntarget = parameter1: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = source.<@%unk/%unk: .uri>\n%1 = 'copy start: src:' + %0\n%2 = %1 + ' target: '\n%3 = target.<@%unk/%unk: .uri>\n%4 = %2 + %3\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\n%5 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.openAsset(string, photoAccessHelper.PhotoAsset)>('R', source)\nfd = await %5\nif fd <= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = new @%unk/%unk: Error\ninstanceinvoke %6.<@%unk/%unk: Error.constructor()>('fd is invalid')\nthrow %6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.openAsset(string, photoAccessHelper.PhotoAsset)>('RW', target)\ntargetFd = await %7\nif targetFd <= 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%8 = new @%unk/%unk: Error\ninstanceinvoke %8.<@%unk/%unk: Error.constructor()>('targetFd is invalid')\nthrow %8",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = instanceinvoke fileIO.<@%unk/%unk: .copyFile()>(fd, targetFd)\n%10 = await %9\n%11 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.closeAsset(number, photoAccessHelper.PhotoAsset)>(fd, source)\n%12 = await %11\n%13 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.closeAsset(number, photoAccessHelper.PhotoAsset)>(targetFd, target)\n%14 = await %13\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'copy end')\nreturn",
                              "start_line": 1,
                              "end_line": 497,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n    let fd: Number = await this.openAsset('R', source);\n    if (fd <= 0) {\n      throw new Error('fd is invalid');\n    }\n\n    let targetFd: Number = await this.openAsset('RW', target);\n    if (targetFd <= 0) {\n      throw new Error('targetFd is invalid');\n    }\n\n    await fileIO.copyFile(fd, targetFd);\n\n    await this.closeAsset(fd, source);\n    await this.closeAsset(targetFd, target);\n\n    Log.debug(TAG, 'copy end');\n  }"
        },
        {
          "type": "function",
          "name": "deleteOne",
          "label": "deleteOne",
          "start_line": 1,
          "end_line": 104,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'deleteAsset uri: ' + uri\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %0)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = newarray (string)[1]\n%1[0] = uri\n%2 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%3 = instanceinvoke %2.<@%unk/%unk: .deleteAssets()>(%1)\n%4 = await %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 47,
                      "end_line": 497,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%5 = 'deleteOne with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async deleteOne(uri: string): Promise<void> {\n    Log.debug(TAG, 'deleteAsset uri: ' + uri);\n    try {\n      await this.userFileMgr.deleteAssets([uri]);\n    } catch (err) {\n      Log.error(TAG, 'deleteOne with error: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "recover",
          "label": "recover",
          "start_line": 1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fileAsset = parameter0: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/67.ts: UserFileModel\nalbumFetchResult = null",
              "start_line": 1,
              "end_line": 135,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = fileAsset.<@%unk/%unk: .displayName>\n%1 = 'recoverPhotoAssetsDemoPromise:' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\n%2 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%3 = %2.<@%unk/%unk: .SYSTEM>\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%5 = %4.<@%unk/%unk: .TRASH>\n%6 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%7 = instanceinvoke %6.<@%unk/%unk: .getAlbums()>(%3, %5)\nalbumFetchResult = await %7\n%8 = instanceinvoke albumFetchResult.<@%unk/%unk: .getFirstObject()>()\nalbum = await %8\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'album  get')\n%9 = newarray (photoAccessHelper.PhotoAsset)[1]\n%9[0] = fileAsset\n%10 = instanceinvoke album.<@%unk/%unk: .recoverAssets()>(%9)\n%11 = instanceinvoke %10.<@%unk/%unk: .then()>(%AM1$recover)\ninstanceinvoke %11.<@%unk/%unk: .catch()>(%AM0$recover)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if albumFetchResult != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 47,
                              "end_line": 497,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%12 = 'recoverPhotoAssetsDemoPromise failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%13 = caughtexception: unknown\nif albumFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %13",
                      "start_line": 47,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "permanentDelete",
          "label": "permanentDelete",
          "start_line": 1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fileAsset = parameter0: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/67.ts: UserFileModel\nalbumFetchResult = null",
              "start_line": 1,
              "end_line": 135,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'permanentDelete')\n%0 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%1 = %0.<@ts_files/67.ts: UserFileModel.SYSTEM>\n%2 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%3 = %2.<@%unk/%unk: .TRASH>\n%4 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%5 = instanceinvoke %4.<@%unk/%unk: .getAlbums()>(%1, %3)\nalbumFetchResult = await %5\n%6 = instanceinvoke albumFetchResult.<@%unk/%unk: .getFirstObject()>()\nalbum = await %6\n%7 = newarray (photoAccessHelper.PhotoAsset)[1]\n%7[0] = fileAsset\n%8 = instanceinvoke album.<@%unk/%unk: .deleteAssets()>(%7)\n%9 = instanceinvoke %8.<@%unk/%unk: .then()>(%AM3$permanentDelete)\ninstanceinvoke %9.<@%unk/%unk: .catch()>(%AM2$permanentDelete)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if albumFetchResult != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 47,
                              "end_line": 497,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%10 = 'permanentDelete failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %10)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%11 = caughtexception: unknown\nif albumFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %11",
                      "start_line": 47,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "createAlbum",
          "label": "createAlbum",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\nnewAlbum = undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%1 = instanceinvoke %0.<@%unk/%unk: .createAlbum()>(albumName)\nalbum = await %1\n%2 = new @%unk/%unk: SimpleAlbumDataItem\n%3 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\n%4 = album.<@%unk/%unk: .albumUri>\n%5 = MediaConstants.<@%unk/%unk: .ALBUM_TYPE_USER>\n%6 = MediaConstants.<@%unk/%unk: .ALBUM_SUBTYPE_USER_GENERIC>\ninstanceinvoke %2.<@%unk/%unk: SimpleAlbumDataItem.constructor()>(%3, albumName, %4, '', '', %5, %6)\nnewAlbum = %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return newAlbum",
                      "start_line": 163,
                      "end_line": 163,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%7 = 'createAlbum failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %7)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\n    let newAlbum: SimpleAlbumDataItem = undefined;\n    try {\n      let album = await this.userFileMgr.createAlbum(albumName);\n      newAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri,\n        '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);\n    } catch (err) {\n      Log.error(TAG, 'createAlbum failed with error: ' + err);\n    }\n    return newAlbum;\n  }"
        },
        {
          "type": "function",
          "name": "deleteAlbum",
          "label": "deleteAlbum",
          "start_line": 1,
          "end_line": 166,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\nfetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%2 = %1.<@%unk/%unk: .ALBUM_NAME>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, albumName)\n%3 = new @ts_files/67.ts: %AC$UserFileModel$deleteAlbum$1\ninstanceinvoke %3.<@ts_files/67.ts: %AC$UserFileModel$deleteAlbum$1.constructor()>()\nfetchOptions = %3\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%5 = %4.<@%unk/%unk: .USER>\n%6 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%7 = %6.<@%unk/%unk: .USER_GENERIC>\n%8 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%9 = instanceinvoke %8.<@%unk/%unk: .getAlbums()>(%5, %7, fetchOptions)\nfetchResult = await %9\ni = 0",
                  "start_line": 1,
                  "end_line": 328,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif i < %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = instanceinvoke fetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\nalbumAsset = await %11\n%12 = albumAsset.<@%unk/%unk: .albumUri>\n%13 = 'deleteAlbum albumUri' + %12\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %13)\n%14 = albumAsset.<@%unk/%unk: .albumName>\n%15 = 'deleteAlbum albumName' + %14\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %15)\n%16 = newarray (unknown)[1]\n%16[0] = albumAsset\n%17 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%18 = instanceinvoke %17.<@%unk/%unk: .deleteAlbums()>(%16)\n%19 = instanceinvoke %18.<@%unk/%unk: .then()>(%AM5$deleteAlbum)\ninstanceinvoke %19.<@%unk/%unk: .catch()>(%AM4$deleteAlbum)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return",
                                  "start_line": 47,
                                  "end_line": 497,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%20 = 'deletePhotoAlbumsPromise failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %20)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%21 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return\nthrow %21",
                      "start_line": 47,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async deleteAlbum(albumName: string): Promise<void> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\n        Log.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\n        this.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }).catch((err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        });\n      }\n    } catch (err) {\n      Log.error(TAG, 'deletePhotoAlbumsPromise failed with error: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "deleteAll",
          "label": "deleteAll",
          "start_line": 1,
          "end_line": 195,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fetchOption = parameter0: photoAccessHelper.FetchOptions\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'deleteAll')\nfetchFileResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%1 = instanceinvoke %0.<@%unk/%unk: .getAssets()>(fetchOption)\nfetchFileResult = await %1\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'deleteAll getPhotoAssets')\ndeleteAllGetAllObject = staticinvoke <@%unk/%unk: .hiSysEventDataQueryTimedOut()>('deleteAllGetAllObject')\n%2 = instanceinvoke fetchFileResult.<@%unk/%unk: .getAllObject()>()\nfileAssets = await %2\nstaticinvoke <@%unk/%unk: .clearTimeout()>(deleteAllGetAllObject)\ni = 0",
                  "start_line": 1,
                  "end_line": 328,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = fileAssets.<@%unk/%unk: .length>\nif i < %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = fileAssets[i]\n%5 = %4.<@%unk/%unk: .uri>\n%6 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.deleteOne(string)>(%5)\n%7 = await %6\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'deleteAll getFirstObject')",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if fetchFileResult != null",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'deleteAll finish')\nreturn",
                                      "start_line": 1,
                                      "end_line": 497,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%8 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%9 = 'deleteAll error:' + %8\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %9)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%10 = caughtexception: unknown\nif fetchFileResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'deleteAll finish')\nreturn\nthrow %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n    Log.info(TAG, 'deleteAll');\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n      Log.debug(TAG, 'deleteAll getPhotoAssets');\n      let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n      let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n      clearTimeout(deleteAllGetAllObject);\n      for (let i = 0;i < fileAssets.length; i++) {\n        await this.deleteOne(fileAssets[i].uri);\n      }\n      Log.debug(TAG, 'deleteAll getFirstObject');\n    } catch (err) {\n      Log.error(TAG, 'deleteAll error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'deleteAll finish');\n  }"
        },
        {
          "type": "function",
          "name": "getAllMediaItems",
          "label": "getAllMediaItems",
          "start_line": 1,
          "end_line": 218,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\n%0 = newarray (any)[0]\nfileAssets = %0\nphotoFetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %1.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %1\n%2 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%3 = %2.<@%unk/%unk: .DATE_ADDED>\ninstanceinvoke predicates.<@%unk/%unk: .orderByDesc()>(%3)\n%4 = new @ts_files/67.ts: %AC$UserFileModel$getAllMediaItems$2\ninstanceinvoke %4.<@ts_files/67.ts: %AC$UserFileModel$getAllMediaItems$2.constructor()>()\nemptyFetchOption = %4\n%5 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%6 = instanceinvoke %5.<@%unk/%unk: .getAssets()>(emptyFetchOption)\nphotoFetchResult = await %6\n%7 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\n%8 = 'getAllMediaItems count: ' + %7\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %8)\ni = 0",
                  "start_line": 1,
                  "end_line": 328,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\nif i < %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = instanceinvoke photoFetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\ninstanceinvoke fileAssets.<@%unk/%unk: .push()>(await %10)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if photoFetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return fileAssets",
                                  "start_line": 240,
                                  "end_line": 309,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%11 = 'getAllMediaItems failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %11)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%12 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return fileAssets\nthrow %12",
                      "start_line": 240,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let emptyFetchOption = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\n      Log.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());\n      for (let i = 0;i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMediaItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }"
        },
        {
          "type": "function",
          "name": "getAllMovingPhotoItems",
          "label": "getAllMovingPhotoItems",
          "start_line": 1,
          "end_line": 243,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\n%0 = newarray (any)[0]\nfileAssets = %0\nphotoFetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %1.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %1\n%2 = MediaConstants.<@%unk/%unk: .PHOTO_SUBTYPE>\n%3 = MediaConstants.<@%unk/%unk: .MOVING_PHOTO>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, %3)\n%4 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%5 = %4.<@%unk/%unk: .DATE_ADDED>\ninstanceinvoke predicates.<@%unk/%unk: .orderByDesc()>(%5)\n%6 = new @ts_files/67.ts: %AC$UserFileModel$getAllMovingPhotoItems$3\ninstanceinvoke %6.<@ts_files/67.ts: %AC$UserFileModel$getAllMovingPhotoItems$3.constructor()>()\nfetchOptions = %6\n%7 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%8 = instanceinvoke %7.<@%unk/%unk: .getAssets()>(fetchOptions)\nphotoFetchResult = await %8\n%9 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\n%10 = 'getAllMovingPhotoItems count: ' + %9\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %10)\ni = 0",
                  "start_line": 1,
                  "end_line": 328,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\nif i < %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%12 = instanceinvoke photoFetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\ninstanceinvoke fileAssets.<@%unk/%unk: .push()>(await %12)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if photoFetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return fileAssets",
                                  "start_line": 240,
                                  "end_line": 309,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%13 = 'getAllMovingPhotoItems failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %13)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%14 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return fileAssets\nthrow %14",
                      "start_line": 240,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\n      for (let i = 0; i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }"
        },
        {
          "type": "function",
          "name": "getAllMediaItemsByType",
          "label": "getAllMediaItemsByType",
          "start_line": 1,
          "end_line": 269,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "type = parameter0: number\nsubType = parameter1: number\nalbumFetchOption = parameter2: unknown\nfileFetchOption = parameter3: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = newarray (any)[0]\nfileAssets = %0\nfetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getAllMediaItemsByUserFile')\n%1 = 'type:' + type\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\n%2 = 'subType:' + subType\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%4 = %3.<@%unk/%unk: .USER>\n%5 = type === %4\n%6 = albumFetchOption != null\n%7 = %5 && %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'albumFetchOption ！= null')\n%8 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%9 = instanceinvoke %8.<@%unk/%unk: .getAlbums()>(type, subType, albumFetchOption)\nfetchResult = await %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%12 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%13 = 'get Album fetchResult, count: ' + %12\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %13)\ni = 0",
                          "start_line": 1,
                          "end_line": 328,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%14 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif i < %14",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%15 = instanceinvoke fetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\nalbumAsset = await %15\nphotoFetchResult = null",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%16 = instanceinvoke albumAsset.<@%unk/%unk: .getAssets()>(fileFetchOption)\nphotoFetchResult = await %16\ni = 0",
                                      "start_line": 1,
                                      "end_line": 328,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%17 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\nif i < %17",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%18 = instanceinvoke photoFetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\nphotoAsset = await %18\ninstanceinvoke fileAssets.<@%unk/%unk: .push()>(photoAsset)\n%19 = photoAsset.<@%unk/%unk: .displayName>\n%20 = 'getPhotoAssets successfully, file displayName: ' + %19\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %20)\ni = i + 1",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "if photoFetchResult != null",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "i = i + 1",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if fetchResult != null",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%22 = fileAssets.<@%unk/%unk: .length>\n%23 = 'fileAssets: ' + %22\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %23)\nreturn fileAssets",
                                          "start_line": 1,
                                          "end_line": 309,
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%11 = instanceinvoke %10.<@%unk/%unk: .getAlbums()>(type, subType)\nfetchResult = await %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%21 = 'get Album getPhotoAssets failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %21)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%24 = 'get Album fetchResult failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %24)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%25 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%22 = fileAssets.<@%unk/%unk: .length>\n%23 = 'fileAssets: ' + %22\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %23)\nreturn fileAssets\nthrow %25",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%26 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "i = i + 1\nthrow %26",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAllMediaItemsByUserFile');\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {\n        Log.info(TAG, 'albumFetchOption ！= null');\n        fetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\n      } else {\n        fetchResult = await this.userFileMgr.getAlbums(type, subType);\n      }\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        try {\n          photoFetchResult = await albumAsset.getAssets(fileFetchOption);\n          for (let i = 0; i < photoFetchResult.getCount(); i++) {\n            let photoAsset = await photoFetchResult.getObjectByPosition(i);\n            fileAssets.push(photoAsset);\n            Log.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n          }\n        } catch (err) {\n          Log.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.info(TAG, 'fileAssets: ' + fileAssets.length);\n    return fileAssets;\n  }"
        },
        {
          "type": "function",
          "name": "getMediaItemByUriFromTrash",
          "label": "getMediaItemByUriFromTrash",
          "start_line": 1,
          "end_line": 312,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getMediaItemByUriFromTrash')\n%0 = 'uri:' + uri\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nalbumFetchResult = null\nfileAsset = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%2 = %1.<@%unk/%unk: .SYSTEM>\n%3 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%4 = %3.<@%unk/%unk: .TRASH>\n%5 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%6 = instanceinvoke %5.<@%unk/%unk: .getAlbums()>(%2, %4)\nalbumFetchResult = await %6\n%7 = instanceinvoke albumFetchResult.<@%unk/%unk: .getFirstObject()>()\nalbumAsset = await %7\nphotoFetchResult = null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %8.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %8\n%9 = new @ts_files/67.ts: %AC$UserFileModel$getMediaItemByUriFromTrash$4\ninstanceinvoke %9.<@ts_files/67.ts: %AC$UserFileModel$getMediaItemByUriFromTrash$4.constructor()>()\nemptyFetchOption = %9\n%10 = instanceinvoke albumAsset.<@%unk/%unk: .getAssets()>(emptyFetchOption)\nphotoFetchResult = await %10\ni = 0",
                      "start_line": 1,
                      "end_line": 328,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = instanceinvoke photoFetchResult.<@%unk/%unk: .getCount()>()\nif i < %11",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%12 = instanceinvoke photoFetchResult.<@%unk/%unk: .getObjectByPosition()>(i)\nphotoAsset = await %12\n%13 = photoAsset.<@%unk/%unk: .uri>\nif %13 === uri\ni = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "fileAsset = photoAsset\n%14 = photoAsset.<@%unk/%unk: .displayName>\n%15 = 'getMediaItemByUriFromTrash success: ' + %14\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %15)",
                                  "start_line": 331,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "if photoFetchResult != null",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "if albumFetchResult != null",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "return fileAsset",
                                                      "start_line": 55,
                                                      "end_line": 377,
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%16 = 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %16)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%17 = 'getMediaItemByUriFromTrash failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %17)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%18 = caughtexception: unknown\nif albumFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return fileAsset\nthrow %18",
                      "start_line": 55,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%19 = caughtexception: unknown\nif photoFetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke photoFetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if albumFetchResult != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke albumFetchResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return fileAsset\nthrow %19",
                              "start_line": 55,
                              "end_line": 1,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n      try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);\n        for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }\n      } catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      } finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n    return fileAsset;\n  }"
        },
        {
          "type": "function",
          "name": "getMediaItemByUri",
          "label": "getMediaItemByUri",
          "start_line": 1,
          "end_line": 353,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getMediaItemByUri')\n%0 = 'uri:' + uri\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %1.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %1\n%2 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%3 = %2.<@%unk/%unk: .URI>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%3, uri)\n%4 = new @ts_files/67.ts: %AC$UserFileModel$getMediaItemByUri$5\ninstanceinvoke %4.<@ts_files/67.ts: %AC$UserFileModel$getMediaItemByUri$5.constructor()>()\nfetchOptions = %4\nfileAsset = null\nfetchResult = null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'fetchResult start')\n%5 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%6 = instanceinvoke %5.<@%unk/%unk: .getAssets()>(fetchOptions)\nfetchResult = await %6\n%7 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%8 = 'fetchResult count ' + %7\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %8)\n%9 = instanceinvoke fetchResult.<@%unk/%unk: .getFirstObject()>()\nfileAsset = await %9\n%10 = fileAsset.<@%unk/%unk: .displayName>\n%11 = 'fileAsset ' + %10\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %11)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if fetchResult != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return fileAsset",
                              "start_line": 55,
                              "end_line": 377,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%12 = 'getMediaItemByUri failed, message = ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%13 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return fileAsset\nthrow %13",
                      "start_line": 55,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {\n      Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return fileAsset;\n  }"
        },
        {
          "type": "function",
          "name": "getMediaItemCountsByDisplayName",
          "label": "getMediaItemCountsByDisplayName",
          "start_line": 1,
          "end_line": 380,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "displayName = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getMediaItemCountsByDisplayName')\ncount = 0\nfetchFileResult = null\n%0 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %0.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %0\n%1 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%2 = %1.<@%unk/%unk: .DISPLAY_NAME>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%2, displayName)\n%3 = new @ts_files/67.ts: %AC$UserFileModel$getMediaItemCountsByDisplayName$6\ninstanceinvoke %3.<@ts_files/67.ts: %AC$UserFileModel$getMediaItemCountsByDisplayName$6.constructor()>()\nfetchOptions = %3",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%5 = instanceinvoke %4.<@%unk/%unk: .getAssets()>(fetchOptions)\nfetchFileResult = await %5\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets')\n%6 = instanceinvoke fetchFileResult.<@%unk/%unk: .getCount()>()\ncount = await %6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if fetchFileResult != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getMediaItemCountsByDisplayName finish')\nreturn count",
                              "start_line": 1,
                              "end_line": 432,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%7 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%8 = 'getMediaItemCountsByDisplayName error:' + %7\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %8)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%9 = caughtexception: unknown\nif fetchFileResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchFileResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getMediaItemCountsByDisplayName finish')\nreturn count\nthrow %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\n    Log.info(TAG, 'getMediaItemCountsByDisplayName');\n    let count = 0;\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\n      count = await fetchFileResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'getMediaItemCountsByDisplayName finish');\n    return count;\n  }"
        },
        {
          "type": "function",
          "name": "getUserAlbumCountByName",
          "label": "getUserAlbumCountByName",
          "start_line": 1,
          "end_line": 405,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getUserAlbumCountByName')\n%0 = 'album_name：' + albumName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\ncount = 0\n%1 = staticinvoke <@%unk/%unk: .getSystemAlbumDisplayName()>()\nsystemAlbums = await %1\n%2 = instanceinvoke systemAlbums.<@%unk/%unk: .indexOf()>(albumName)\nif %2 >= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return 1",
                  "start_line": 411,
                  "end_line": 411,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "fetchResult = null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %3.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %3\n%4 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%5 = %4.<@%unk/%unk: .ALBUM_NAME>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%5, albumName)\n%6 = new @ts_files/67.ts: %AC$UserFileModel$getUserAlbumCountByName$7\ninstanceinvoke %6.<@ts_files/67.ts: %AC$UserFileModel$getUserAlbumCountByName$7.constructor()>()\nfetchOptions = %6\n%7 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%8 = %7.<@%unk/%unk: .USER>\n%9 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%10 = %9.<@%unk/%unk: .USER_GENERIC>\n%11 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%12 = instanceinvoke %11.<@%unk/%unk: .getAlbums()>(%8, %10, fetchOptions)\nfetchResult = await %12\n%13 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%14 = 'fetchResult' + %13\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %14)\ncount = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getUserAlbumCountByName finish')\nreturn count",
                                  "start_line": 1,
                                  "end_line": 432,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%15 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%16 = 'getUserAlbumCountByName error:' + %15\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %16)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%17 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getUserAlbumCountByName finish')\nreturn count\nthrow %17",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\n    if (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }"
        },
        {
          "type": "function",
          "name": "getActivePeers",
          "label": "getActivePeers",
          "start_line": 1,
          "end_line": 435,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getActivePeers')\n%0 = newarray (any)[0]\npeers = %0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "getActivePeers = staticinvoke <@%unk/%unk: .hiSysEventDataQueryTimedOut()>('getActivePeers')\n%1 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%2 = instanceinvoke %1.<@%unk/%unk: .getActivePeers()>()\npeers = await %2\nstaticinvoke <@%unk/%unk: .clearTimeout()>(getActivePeers)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getActivePeers finish')\nreturn peers",
                      "start_line": 1,
                      "end_line": 446,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%4 = 'getActivePeers error:' + %3\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %4)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n    Log.info(TAG, 'getActivePeers');\n    let peers: photoAccessHelper.PeerInfo[] = [];\n    try {\n      let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n      peers = await this.userFileMgr.getActivePeers();\n      clearTimeout(getActivePeers);\n    } catch (err) {\n      Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getActivePeers finish');\n    return peers;\n  }"
        },
        {
          "type": "function",
          "name": "getUserAlbumByName",
          "label": "getUserAlbumByName",
          "start_line": 1,
          "end_line": 453,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumName = parameter0: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getUserAlbumByName')\n%0 = 'album_name' + albumName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nfetchResult = null\nalbum = null",
              "start_line": 1,
              "end_line": 453,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %1.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %1\n%2 = photoAccessHelper.<@%unk/%unk: .AlbumKeys>\n%3 = %2.<@%unk/%unk: .ALBUM_NAME>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%3, albumName)\n%4 = new @ts_files/67.ts: %AC$UserFileModel$getUserAlbumByName$8\ninstanceinvoke %4.<@ts_files/67.ts: %AC$UserFileModel$getUserAlbumByName$8.constructor()>()\nfetchOptions = %4\n%5 = photoAccessHelper.<@%unk/%unk: .AlbumType>\n%6 = %5.<@%unk/%unk: .USER>\n%7 = photoAccessHelper.<@%unk/%unk: .AlbumSubtype>\n%8 = %7.<@%unk/%unk: .USER_GENERIC>\n%9 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%10 = instanceinvoke %9.<@%unk/%unk: .getAlbums()>(%6, %8, fetchOptions)\nfetchResult = await %10\n%11 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\n%12 = 'fetchResult' + %11\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %12)\n%13 = instanceinvoke fetchResult.<@%unk/%unk: .getCount()>()\nif %13 > 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "album = instanceinvoke fetchResult.<@%unk/%unk: .getFirstObject()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if fetchResult != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getUserAlbumByName finish')\nreturn album",
                                  "start_line": 1,
                                  "end_line": 487,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%14 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%15 = 'getUserAlbumByName error:' + %14\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %15)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%16 = caughtexception: unknown\nif fetchResult != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getUserAlbumByName finish')\nreturn album\nthrow %16",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }"
        },
        {
          "type": "function",
          "name": "getAlbums",
          "label": "getAlbums",
          "start_line": 1,
          "end_line": 477,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fetchOption = parameter0: photoAccessHelper.FetchOptions\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'getAlbums')\n%0 = newarray (any)[0]\nalbums = %0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\n%2 = instanceinvoke %1.<@%unk/%unk: .getAlbums()>(fetchOption)\nalbums = await %2\n%3 = instanceinvoke albums.<@%unk/%unk: .getCounts()>()\n%4 = 'getAlbums albums ' + %3\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getAlbums finish')\nreturn albums",
                      "start_line": 1,
                      "end_line": 487,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'getAlbums error:' + %5\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\n    Log.info(TAG, 'getAlbums');\n    let albums: photoAccessHelper.Album[] = [];\n    try {\n      albums = await this.userFileMgr.getAlbums(fetchOption);\n      Log.info(TAG, 'getAlbums albums ' + albums.getCounts());\n    } catch (err) {\n      Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getAlbums finish');\n    return albums;\n  }"
        },
        {
          "type": "function",
          "name": "openAsset",
          "label": "openAsset",
          "start_line": 1,
          "end_line": 490,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mode = parameter0: string\nfileAsset = parameter1: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'openAsset start')\n%0 = instanceinvoke fileAsset.<@%unk/%unk: .open()>(mode)\nfd = await %0\n%1 = 'openAsset end. fd: ' + fd\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\nif fd <= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'openAsset Fail')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return fd",
                      "start_line": 497,
                      "end_line": 497,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset): Promise<number> {\n    Log.debug(TAG, 'openAsset start');\n    let fd: number = await fileAsset.open(mode);\n    Log.info(TAG, 'openAsset end. fd: ' + fd);\n    if (fd <= 0) {\n      Log.info(TAG, 'openAsset Fail');\n    }\n    return fd;\n  }"
        },
        {
          "type": "function",
          "name": "closeAsset",
          "label": "closeAsset",
          "start_line": 1,
          "end_line": 500,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "fd = parameter0: number\nfileAsset = parameter1: photoAccessHelper.PhotoAsset\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'closeAsset start')\n%0 = instanceinvoke fileAsset.<@%unk/%unk: .close()>(fd)\n%1 = await %0\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.debug(TAG, 'closeAsset start');\n    await fileAsset.close(fd);\n  }"
        },
        {
          "type": "function",
          "name": "addPhotoToAlbumByUserFileMgr",
          "label": "addPhotoToAlbumByUserFileMgr",
          "start_line": 1,
          "end_line": 505,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumUri = parameter0: string\nuri = parameter1: string\nthis = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'addPhotoAssetsDemoPromise')\n%0 = 'albumUri' + albumUri\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = 'mediaItem.uri' + uri\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke this.<@ts_files/67.ts: UserFileModel.getUserAlbumItemByUri(string)>(albumUri)\nalbum = await %2\n%3 = new @%unk/%unk: dataSharePredicates.DataSharePredicates\ninstanceinvoke %3.<@%unk/%unk: dataSharePredicates.DataSharePredicates.constructor()>()\npredicates = %3\n%4 = photoAccessHelper.<@%unk/%unk: .PhotoKeys>\n%5 = %4.<@%unk/%unk: .URI>\ninstanceinvoke predicates.<@%unk/%unk: .equalTo()>(%5, uri)\n%6 = new @ts_files/67.ts: %AC$UserFileModel$addPhotoToAlbumByUserFileMgr$9\ninstanceinvoke %6.<@ts_files/67.ts: %AC$UserFileModel$addPhotoToAlbumByUserFileMgr$9.constructor()>()\nfetchOptions = %6\n%7 = this.<@ts_files/67.ts: UserFileModel.userFileMgr>\ninstanceinvoke %7.<@%unk/%unk: .getAssets()>(fetchOptions, %AM6$addPhotoToAlbumByUserFileMgr)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 47,
                      "end_line": 497,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%8 = 'addPhotoAssetsDemoPromise failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %8)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\n    Log.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);\n    try {\n      let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      this.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      });\n    } catch (err) {\n      Log.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$recover",
          "label": "%AM0$recover",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'album recoverPhotoAssets failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      }"
        },
        {
          "type": "function",
          "name": "%AM1$recover",
          "label": "%AM1$recover",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'album recoverPhotoAssets successfully')\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }"
        },
        {
          "type": "function",
          "name": "%AM2$permanentDelete",
          "label": "%AM2$permanentDelete",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'album deletePhotoAssets failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      }"
        },
        {
          "type": "function",
          "name": "%AM3$permanentDelete",
          "label": "%AM3$permanentDelete",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .debug()>('album deletePhotoAssets successfully')\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }"
        },
        {
          "type": "function",
          "name": "%AM4$deleteAlbum",
          "label": "%AM4$deleteAlbum",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'deletePhotoAlbumsPromise failed with err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        }"
        },
        {
          "type": "function",
          "name": "%AM5$deleteAlbum",
          "label": "%AM5$deleteAlbum",
          "start_line": 1,
          "end_line": 497,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'deletePhotoAlbumsPromise successfully')\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }"
        },
        {
          "type": "function",
          "name": "%AM7$%AM6$addPhotoToAlbumByUserFileMgr",
          "label": "%AM7$%AM6$addPhotoToAlbumByUserFileMgr",
          "start_line": 1,
          "end_line": 525,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/67.ts: UserFileModel\n%0 = 'album addPhotoAssets failed with error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            }"
        },
        {
          "type": "function",
          "name": "%AM8$%AM6$addPhotoToAlbumByUserFileMgr",
          "label": "%AM8$%AM6$addPhotoToAlbumByUserFileMgr",
          "start_line": 1,
          "end_line": 523,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/67.ts: UserFileModel\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'album addPhotoAssets successfully')\nreturn",
              "start_line": 1,
              "end_line": 497,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }"
        },
        {
          "type": "function",
          "name": "%AM6$addPhotoToAlbumByUserFileMgr",
          "label": "%AM6$addPhotoToAlbumByUserFileMgr",
          "start_line": 1,
          "end_line": 517,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [album]\nerr = parameter1: unknown\nfetchResult = parameter2: unknown\nalbum = %closures0.album\nthis = this: @ts_files/67.ts: UserFileModel\nif fetchResult != undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'fetchResult success')\n%0 = instanceinvoke fetchResult.<@%unk/%unk: .getFirstObject()>()\nfileAsset = await %0\nif fileAsset != undefined",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = fileAsset.<@ts_files/67.ts: UserFileModel.displayName>\n%2 = 'addPhotoToAlbumByUserFileMgr photo displayName : ' + %1\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = newarray (unknown)[1]\n%3[0] = fileAsset\n%4 = instanceinvoke album.<@%unk/%unk: .addAssets()>(%3)\n%5 = instanceinvoke %4.<@%unk/%unk: .then()>(%AM8$%AM6$addPhotoToAlbumByUserFileMgr)\ninstanceinvoke %5.<@%unk/%unk: .catch()>(%AM7$%AM6$addPhotoToAlbumByUserFileMgr)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke fetchResult.<@%unk/%unk: .close()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 47,
                              "end_line": 497,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = 'fetchResult fail' + err\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %6)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class UserFileModel {\n  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;\n\n  constructor() {\n  }\n\n  onCreate(context): void {\n    if (this.userFileMgr == undefined) {\n      this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);\n    }\n  }\n\n  getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;\n  }\n\n  async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);\n    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    await album.addAssets([fileAsset]);\n    return fileAsset;\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n    let fd: Number = await this.openAsset('R', source);\n    if (fd <= 0) {\n      throw new Error('fd is invalid');\n    }\n\n    let targetFd: Number = await this.openAsset('RW', target);\n    if (targetFd <= 0) {\n      throw new Error('targetFd is invalid');\n    }\n\n    await fileIO.copyFile(fd, targetFd);\n\n    await this.closeAsset(fd, source);\n    await this.closeAsset(targetFd, target);\n\n    Log.debug(TAG, 'copy end');\n  }\n\n  async deleteOne(uri: string): Promise<void> {\n    Log.debug(TAG, 'deleteAsset uri: ' + uri);\n    try {\n      await this.userFileMgr.deleteAssets([uri]);\n    } catch (err) {\n      Log.error(TAG, 'deleteOne with error: ' + err);\n    }\n  }\n\n  async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\n    let newAlbum: SimpleAlbumDataItem = undefined;\n    try {\n      let album = await this.userFileMgr.createAlbum(albumName);\n      newAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri,\n        '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);\n    } catch (err) {\n      Log.error(TAG, 'createAlbum failed with error: ' + err);\n    }\n    return newAlbum;\n  }\n\n  async deleteAlbum(albumName: string): Promise<void> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\n        Log.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\n        this.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }).catch((err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        });\n      }\n    } catch (err) {\n      Log.error(TAG, 'deletePhotoAlbumsPromise failed with error: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n    Log.info(TAG, 'deleteAll');\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n      Log.debug(TAG, 'deleteAll getPhotoAssets');\n      let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n      let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n      clearTimeout(deleteAllGetAllObject);\n      for (let i = 0;i < fileAssets.length; i++) {\n        await this.deleteOne(fileAssets[i].uri);\n      }\n      Log.debug(TAG, 'deleteAll getFirstObject');\n    } catch (err) {\n      Log.error(TAG, 'deleteAll error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'deleteAll finish');\n  }\n\n  async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let emptyFetchOption = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\n      Log.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());\n      for (let i = 0;i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMediaItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\n      for (let i = 0; i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAllMediaItemsByUserFile');\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {\n        Log.info(TAG, 'albumFetchOption ！= null');\n        fetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\n      } else {\n        fetchResult = await this.userFileMgr.getAlbums(type, subType);\n      }\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        try {\n          photoFetchResult = await albumAsset.getAssets(fileFetchOption);\n          for (let i = 0; i < photoFetchResult.getCount(); i++) {\n            let photoAsset = await photoFetchResult.getObjectByPosition(i);\n            fileAssets.push(photoAsset);\n            Log.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n          }\n        } catch (err) {\n          Log.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.info(TAG, 'fileAssets: ' + fileAssets.length);\n    return fileAssets;\n  }\n\n  async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n      try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);\n        for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }\n      } catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      } finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {\n      Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\n    Log.info(TAG, 'getMediaItemCountsByDisplayName');\n    let count = 0;\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\n      count = await fetchFileResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'getMediaItemCountsByDisplayName finish');\n    return count;\n  }\n\n  async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\n    if (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }\n\n  async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n    Log.info(TAG, 'getActivePeers');\n    let peers: photoAccessHelper.PeerInfo[] = [];\n    try {\n      let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n      peers = await this.userFileMgr.getActivePeers();\n      clearTimeout(getActivePeers);\n    } catch (err) {\n      Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getActivePeers finish');\n    return peers;\n  }\n\n  async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }\n\n  async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\n    Log.info(TAG, 'getAlbums');\n    let albums: photoAccessHelper.Album[] = [];\n    try {\n      albums = await this.userFileMgr.getAlbums(fetchOption);\n      Log.info(TAG, 'getAlbums albums ' + albums.getCounts());\n    } catch (err) {\n      Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getAlbums finish');\n    return albums;\n  }\n\n  async openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset): Promise<number> {\n    Log.debug(TAG, 'openAsset start');\n    let fd: number = await fileAsset.open(mode);\n    Log.info(TAG, 'openAsset end. fd: ' + fd);\n    if (fd <= 0) {\n      Log.info(TAG, 'openAsset Fail');\n    }\n    return fd;\n  }\n\n  async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.debug(TAG, 'closeAsset start');\n    await fileAsset.close(fd);\n  }\n\n  async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\n    Log.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);\n    try {\n      let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      this.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      });\n    } catch (err) {\n      Log.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);\n    }\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getUserAlbumItemByUri$0",
      "label": "%AC$UserFileModel$getUserAlbumItemByUri$0",
      "start_line": 65,
      "end_line": 65,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$deleteAlbum$1",
      "label": "%AC$UserFileModel$deleteAlbum$1",
      "start_line": 171,
      "end_line": 171,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getAllMediaItems$2",
      "label": "%AC$UserFileModel$getAllMediaItems$2",
      "start_line": 224,
      "end_line": 224,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getAllMovingPhotoItems$3",
      "label": "%AC$UserFileModel$getAllMovingPhotoItems$3",
      "start_line": 250,
      "end_line": 250,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getMediaItemByUriFromTrash$4",
      "label": "%AC$UserFileModel$getMediaItemByUriFromTrash$4",
      "start_line": 323,
      "end_line": 323,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getMediaItemByUri$5",
      "label": "%AC$UserFileModel$getMediaItemByUri$5",
      "start_line": 358,
      "end_line": 358,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getMediaItemCountsByDisplayName$6",
      "label": "%AC$UserFileModel$getMediaItemCountsByDisplayName$6",
      "start_line": 386,
      "end_line": 386,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getUserAlbumCountByName$7",
      "label": "%AC$UserFileModel$getUserAlbumCountByName$7",
      "start_line": 417,
      "end_line": 417,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$getUserAlbumByName$8",
      "label": "%AC$UserFileModel$getUserAlbumByName$8",
      "start_line": 457,
      "end_line": 457,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    },
    {
      "type": "class",
      "name": "%AC$UserFileModel$addPhotoToAlbumByUserFileMgr$9",
      "label": "%AC$UserFileModel$addPhotoToAlbumByUserFileMgr$9",
      "start_line": 513,
      "end_line": 513,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fileIO from '@ohos.fileio';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { hiSysEventDataQueryTimedOut } from '../utils/hisysEventUtil';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\nimport { MediaConstants } from '../constants/MediaConstants'\nimport { getSystemAlbumDisplayName } from './UserFileDataHelper';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\n\nconst TAG = 'UserFileModel';\n\nexport class UserFileModelItem {\n  fileAsset: photoAccessHelper.PhotoAsset;\n  counts: number;\n}\n\nclass UserFileModel {\n  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;\n\n  constructor() {\n  }\n\n  onCreate(context): void {\n    if (this.userFileMgr == undefined) {\n      this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);\n    }\n  }\n\n  getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;\n  }\n\n  async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);\n    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    await album.addAssets([fileAsset]);\n    return fileAsset;\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n    let fd: Number = await this.openAsset('R', source);\n    if (fd <= 0) {\n      throw new Error('fd is invalid');\n    }\n\n    let targetFd: Number = await this.openAsset('RW', target);\n    if (targetFd <= 0) {\n      throw new Error('targetFd is invalid');\n    }\n\n    await fileIO.copyFile(fd, targetFd);\n\n    await this.closeAsset(fd, source);\n    await this.closeAsset(targetFd, target);\n\n    Log.debug(TAG, 'copy end');\n  }\n\n  async deleteOne(uri: string): Promise<void> {\n    Log.debug(TAG, 'deleteAsset uri: ' + uri);\n    try {\n      await this.userFileMgr.deleteAssets([uri]);\n    } catch (err) {\n      Log.error(TAG, 'deleteOne with error: ' + err);\n    }\n  }\n\n  async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\n    let newAlbum: SimpleAlbumDataItem = undefined;\n    try {\n      let album = await this.userFileMgr.createAlbum(albumName);\n      newAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri,\n        '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);\n    } catch (err) {\n      Log.error(TAG, 'createAlbum failed with error: ' + err);\n    }\n    return newAlbum;\n  }\n\n  async deleteAlbum(albumName: string): Promise<void> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\n        Log.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\n        this.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }).catch((err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        });\n      }\n    } catch (err) {\n      Log.error(TAG, 'deletePhotoAlbumsPromise failed with error: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n    Log.info(TAG, 'deleteAll');\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n      Log.debug(TAG, 'deleteAll getPhotoAssets');\n      let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n      let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n      clearTimeout(deleteAllGetAllObject);\n      for (let i = 0;i < fileAssets.length; i++) {\n        await this.deleteOne(fileAssets[i].uri);\n      }\n      Log.debug(TAG, 'deleteAll getFirstObject');\n    } catch (err) {\n      Log.error(TAG, 'deleteAll error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'deleteAll finish');\n  }\n\n  async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let emptyFetchOption = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\n      Log.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());\n      for (let i = 0;i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMediaItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\n      for (let i = 0; i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAllMediaItemsByUserFile');\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {\n        Log.info(TAG, 'albumFetchOption ！= null');\n        fetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\n      } else {\n        fetchResult = await this.userFileMgr.getAlbums(type, subType);\n      }\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        try {\n          photoFetchResult = await albumAsset.getAssets(fileFetchOption);\n          for (let i = 0; i < photoFetchResult.getCount(); i++) {\n            let photoAsset = await photoFetchResult.getObjectByPosition(i);\n            fileAssets.push(photoAsset);\n            Log.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n          }\n        } catch (err) {\n          Log.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.info(TAG, 'fileAssets: ' + fileAssets.length);\n    return fileAssets;\n  }\n\n  async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n      try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);\n        for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }\n      } catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      } finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {\n      Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\n    Log.info(TAG, 'getMediaItemCountsByDisplayName');\n    let count = 0;\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\n      count = await fetchFileResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'getMediaItemCountsByDisplayName finish');\n    return count;\n  }\n\n  async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\n    if (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }\n\n  async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n    Log.info(TAG, 'getActivePeers');\n    let peers: photoAccessHelper.PeerInfo[] = [];\n    try {\n      let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n      peers = await this.userFileMgr.getActivePeers();\n      clearTimeout(getActivePeers);\n    } catch (err) {\n      Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getActivePeers finish');\n    return peers;\n  }\n\n  async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }\n\n  async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\n    Log.info(TAG, 'getAlbums');\n    let albums: photoAccessHelper.Album[] = [];\n    try {\n      albums = await this.userFileMgr.getAlbums(fetchOption);\n      Log.info(TAG, 'getAlbums albums ' + albums.getCounts());\n    } catch (err) {\n      Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getAlbums finish');\n    return albums;\n  }\n\n  async openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset): Promise<number> {\n    Log.debug(TAG, 'openAsset start');\n    let fd: number = await fileAsset.open(mode);\n    Log.info(TAG, 'openAsset end. fd: ' + fd);\n    if (fd <= 0) {\n      Log.info(TAG, 'openAsset Fail');\n    }\n    return fd;\n  }\n\n  async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.debug(TAG, 'closeAsset start');\n    await fileAsset.close(fd);\n  }\n\n  async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\n    Log.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);\n    try {\n      let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      this.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      });\n    } catch (err) {\n      Log.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);\n    }\n  }\n}\n\nexport let userFileModel: UserFileModel = stashOrGetObject<UserFileModel>(new UserFileModel(), TAG);\n"
}