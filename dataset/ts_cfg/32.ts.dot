digraph "32.ts" {
subgraph "cluster_@ts_files/32.ts: %dflt.[static]%dflt()" {
  label="@ts_files/32.ts: %dflt.[static]%dflt()";
  Node33210 [label="id:0
      this = this: @ts_files/32.ts: %dflt
      TAG = 'ScreenManager'
      APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager'
      SCREEN_ORIENTATION_HORIZONTAL = 'isHorizontal'
      SCREEN_SIDEBAR = 'isSidebar'
      COLUMN_MARGIN = 12
      COLUMN_GUTTER = 12
      %0 = new @ts_files/32.ts: ScreenManager
      instanceinvoke %0.<@ts_files/32.ts: ScreenManager.constructor()>()
      screenManager = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)
      return"];
}
subgraph "cluster_@ts_files/32.ts: GetWindowMode.getWindowMode()" {
  label="@ts_files/32.ts: GetWindowMode.getWindowMode()";
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.constructor()" {
  label="@ts_files/32.ts: ScreenManager.constructor()";
  Node40920 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.%instInit()>()
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'constructor')
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.initializationSize(unknown)" {
  label="@ts_files/32.ts: ScreenManager.initializationSize(unknown)";
  Node55770 [label="id:0
      win = parameter0: unknown
      this = this: @ts_files/32.ts: ScreenManager
      this.<@ts_files/32.ts: ScreenManager.mainWindow> = win
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.setMainWindow(window.Window)>(win)
      %0 = await instanceinvoke this.<@ts_files/32.ts: ScreenManager.checkWindowMode()>()
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.getWindowProperties(window.Window)>(win)
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.on(unknown, unknown)" {
  label="@ts_files/32.ts: ScreenManager.on(unknown, unknown)";
  Node47350 [label="id:0
      event = parameter0: unknown
      fn = parameter1: unknown
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke Array.<@%unk/%unk: .isArray()>(event)
      if %0 != 0
      i = 0
      l = event.<@%unk/%unk: .length>"];
  Node47351 [label="id:1
      if i < l"];
  Node47352 [label="id:2
      %1 = event.<@%unk/%unk: .i>
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.on(unknown, unknown)>(%1, fn)
      i = i + 1"];
  Node47353 [label="id:3
      %2 = this.<@ts_files/32.ts: ScreenManager.events>
      %3 = instanceinvoke %2.<@%unk/%unk: .get()>(event)
      %4 = %3 === null
      %5 = this.<@ts_files/32.ts: ScreenManager.events>
      %6 = instanceinvoke %5.<@%unk/%unk: .get()>(event)
      %7 = %6 === undefined
      %8 = %4 || %7
      if %8 != false"];
  Node47354 [label="id:4
      %9 = newarray (any)[0]
      %10 = this.<@ts_files/32.ts: ScreenManager.events>
      instanceinvoke %10.<@%unk/%unk: .set()>(event, %9)"];
  Node47355 [label="id:5
      %11 = this.<@ts_files/32.ts: ScreenManager.events>
      %12 = instanceinvoke %11.<@%unk/%unk: .get()>(event)
      instanceinvoke %12.<@%unk/%unk: .push()>(fn)"];
  Node47356 [label="id:6
      return"];
  Node47350 -> Node47351;
  Node47350 -> Node47353;
  Node47351 -> Node47352;
  Node47351 -> Node47356;
  Node47352 -> Node47351;
  Node47353 -> Node47354;
  Node47353 -> Node47355;
  Node47354 -> Node47355;
  Node47355 -> Node47356;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.off(unknown, unknown)" {
  label="@ts_files/32.ts: ScreenManager.off(unknown, unknown)";
  Node48290 [label="id:0
      event = parameter0: unknown
      fn = parameter1: unknown
      this = this: @ts_files/32.ts: ScreenManager
      %0 = event == null
      %1 = event == undefined
      %2 = %0 || %1
      if %2 != false"];
  Node48291 [label="id:1
      return"];
  Node48292 [label="id:2
      %3 = instanceinvoke Array.<@%unk/%unk: .isArray()>(event)
      if %3 != 0
      i = 0
      l = event.<@%unk/%unk: .length>"];
  Node48293 [label="id:3
      if i < l"];
  Node48294 [label="id:4
      %4 = event.<@%unk/%unk: .i>
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.off(unknown, unknown)>(%4, fn)
      i = i + 1"];
  Node48295 [label="id:5
      %5 = this.<@ts_files/32.ts: ScreenManager.events>
      cbs = instanceinvoke %5.<@%unk/%unk: .get()>(event)
      %6 = new @%unk/%unk: Boolean
      instanceinvoke %6.<@%unk/%unk: Boolean.constructor()>(cbs)
      %7 = instanceinvoke %6.<@%unk/%unk: .valueOf()>()
      %8 = !%7
      if %8 != 0"];
  Node48296 [label="id:6
      return"];
  Node48297 [label="id:7
      %9 = fn == null
      %10 = fn == undefined
      %11 = %9 || %10
      if %11 != false"];
  Node48298 [label="id:8
      return"];
  Node48299 [label="id:9
      cb = undefined
      i = cbs.<@%unk/%unk: .length>"];
  Node482910 [label="id:10
      i = i - 1
      if i > 0"];
  Node482911 [label="id:11
      cb = cbs[i]
      %12 = cb === fn
      %13 = cb.<@%unk/%unk: .fn>
      %14 = %13 === fn
      %15 = %12 || %14
      if %15 != false"];
  Node482912 [label="id:12
      instanceinvoke cbs.<@%unk/%unk: .splice()>(i, 1)"];
  Node482913 [label="id:13
      return"];
  Node48290 -> Node48291;
  Node48290 -> Node48292;
  Node48292 -> Node48293;
  Node48292 -> Node48295;
  Node48293 -> Node48294;
  Node48293 -> Node48295;
  Node48294 -> Node48293;
  Node48295 -> Node48296;
  Node48295 -> Node48297;
  Node48297 -> Node48298;
  Node48297 -> Node48299;
  Node48299 -> Node482910;
  Node482910 -> Node482911;
  Node482910 -> Node482913;
  Node482911 -> Node482912;
  Node482911 -> Node482910;
  Node482912 -> Node482913;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.emit(unknown, Object[])" {
  label="@ts_files/32.ts: ScreenManager.emit(unknown, Object[])";
  Node49440 [label="id:0
      event = parameter0: unknown
      argument = parameter1: Object[]
      this = this: @ts_files/32.ts: ScreenManager
      _self = this
      %0 = new @%unk/%unk: Boolean
      %1 = this.<@ts_files/32.ts: ScreenManager.events>
      %2 = instanceinvoke %1.<@%unk/%unk: .get()>(event)
      instanceinvoke %0.<@%unk/%unk: Boolean.constructor()>(%2)
      %3 = instanceinvoke %0.<@%unk/%unk: .valueOf()>()
      %4 = !%3
      if %4 != 0"];
  Node49441 [label="id:1
      return"];
  Node49442 [label="id:2
      %5 = newarray (any)[0]
      cbs = %5
      i = 0"];
  Node49443 [label="id:3
      %6 = this.<@ts_files/32.ts: ScreenManager.events>
      %7 = instanceinvoke %6.<@%unk/%unk: .get()>(event)
      %8 = %7.<@%unk/%unk: .length>
      if i < %8"];
  Node49444 [label="id:4
      %9 = this.<@ts_files/32.ts: ScreenManager.events>
      %10 = instanceinvoke %9.<@%unk/%unk: .get()>(event)
      %11 = %10.<@%unk/%unk: .i>
      instanceinvoke cbs.<@%unk/%unk: .push()>(%11)
      i = i + 1"];
  Node49445 [label="id:5
      %12 = cbs.<@%unk/%unk: .length>
      if %12 > 0
      i = 0
      l = cbs.<@%unk/%unk: .length>"];
  Node49446 [label="id:6
      if i < l"];
  Node49447 [label="id:7
      ref = cbs[i]
      if ref != null"];
  Node49448 [label="id:8
      instanceinvoke ref.<@%unk/%unk: .apply()>(_self, argument)"];
  Node49449 [label="id:9
      e = caughtexception: unknown
      %13 = new @%unk/%unk: Error
      instanceinvoke %13.<@%unk/%unk: Error.constructor()>(e)"];
  Node494410 [label="id:10
      return"];
  Node494411 [label="id:11
      i = i + 1"];
  Node49440 -> Node49441;
  Node49440 -> Node49442;
  Node49442 -> Node49443;
  Node49443 -> Node49444;
  Node49443 -> Node49445;
  Node49444 -> Node49443;
  Node49445 -> Node49446;
  Node49445 -> Node494410;
  Node49446 -> Node49447;
  Node49446 -> Node494410;
  Node49447 -> Node49448;
  Node49447 -> Node494411;
  Node49448 -> Node494411;
  Node494411 -> Node49446;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.isLeftBlankInitialized()" {
  label="@ts_files/32.ts: ScreenManager.isLeftBlankInitialized()";
  Node51150 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %1 = %0[0]
      %2 = %1 !== 0
      %3 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %4 = %3[1]
      %5 = %4 !== 0
      %6 = %2 || %5
      %7 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %8 = %7[2]
      %9 = %8 !== 0
      %10 = %6 || %9
      %11 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %12 = %11[3]
      %13 = %12 !== 0
      %14 = %10 || %13
      return %14"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getWinWidth()" {
  label="@ts_files/32.ts: ScreenManager.getWinWidth()";
  Node40040 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.winWidth>
      %1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)
      return %1"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setWinWidth(number)" {
  label="@ts_files/32.ts: ScreenManager.setWinWidth(number)";
  Node46650 [label="id:0
      width = parameter0: number
      this = this: @ts_files/32.ts: ScreenManager
      this.<@ts_files/32.ts: ScreenManager.winWidth> = width
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getWinHeight()" {
  label="@ts_files/32.ts: ScreenManager.getWinHeight()";
  Node40930 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.winHeight>
      %1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)
      return %1"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getStatusBarHeight()" {
  label="@ts_files/32.ts: ScreenManager.getStatusBarHeight()";
  Node47120 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.statusBarHeight>
      %1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)
      return %1"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getNaviBarHeight()" {
  label="@ts_files/32.ts: ScreenManager.getNaviBarHeight()";
  Node44660 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.naviBarHeight>
      %1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)
      return %1"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.initWindowMode()" {
  label="@ts_files/32.ts: ScreenManager.initWindowMode()";
  Node43270 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.windowMode>
      %1 = 'start to initialize photos application window mode: ' + %0
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.isSplitMode()" {
  label="@ts_files/32.ts: ScreenManager.isSplitMode()";
  Node40030 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = @ts_files/32.ts: WindowMode.[static]PRIMARY
      %1 = this.<@ts_files/32.ts: ScreenManager.windowMode>
      %2 = %0 === %1
      %3 = @ts_files/32.ts: WindowMode.[static]SECONDARY
      %4 = this.<@ts_files/32.ts: ScreenManager.windowMode>
      %5 = %3 === %4
      %6 = %2 || %5
      return %6"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.checkWindowMode()" {
  label="@ts_files/32.ts: ScreenManager.checkWindowMode()";
  Node44010 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      before = this.<@ts_files/32.ts: ScreenManager.windowMode>
      %0 = this.<@ts_files/32.ts: ScreenManager.globalThis>
      %1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('photosWindowStage')
      photosWindowStage = <@ts_files/32.ts: GetWindowMode>%1
      mode = await instanceinvoke photosWindowStage.<@ts_files/32.ts: GetWindowMode.getWindowMode()>()
      %2 = 'photos application before/current window mode: ' + before
      %3 = %2 + '/'
      %4 = %3 + mode
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)
      if before === mode"];
  Node44011 [label="id:1
      return"];
  Node44012 [label="id:2
      this.<@ts_files/32.ts: ScreenManager.windowMode> = mode
      %5 = @ts_files/32.ts: WindowMode.[static]FULL_SCREEN
      %6 = this.<@ts_files/32.ts: ScreenManager.windowMode>
      if %5 == %6"];
  Node44013 [label="id:3
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.setFullScreen()>()"];
  Node44014 [label="id:4
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.setSplitScreen()>()"];
  Node44015 [label="id:5
      return"];
  Node44010 -> Node44011;
  Node44010 -> Node44012;
  Node44012 -> Node44013;
  Node44012 -> Node44014;
  Node44013 -> Node44015;
  Node44014 -> Node44015;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setMainWindow(window.Window)" {
  label="@ts_files/32.ts: ScreenManager.setMainWindow(window.Window)";
  Node55650 [label="id:0
      win = parameter0: window.Window
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setMainWindow')
      instanceinvoke win.<@%unk/%unk: .on()>('windowSizeChange', %AM0$setMainWindow)
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getWindowProperties(window.Window)" {
  label="@ts_files/32.ts: ScreenManager.getWindowProperties(window.Window)";
  Node62330 [label="id:0
      win = parameter0: window.Window
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getWindowProperties')
      properties = instanceinvoke win.<@%unk/%unk: .getWindowProperties()>()
      %0 = properties.<@%unk/%unk: .windowRect>
      %1 = %0.<@ts_files/32.ts: ScreenManager.width>
      %2 = %1 !== 0
      %3 = properties.<@%unk/%unk: .windowRect>
      %4 = %3.<@%unk/%unk: .height>
      %5 = %4 !== 0
      %6 = %2 && %5
      if %6 != false"];
  Node62331 [label="id:1
      %7 = properties.<@%unk/%unk: .windowRect>
      %8 = %7.<@%unk/%unk: .width>
      this.<@ts_files/32.ts: ScreenManager.winWidth> = %8
      %9 = properties.<@%unk/%unk: .windowRect>
      %10 = %9.<@%unk/%unk: .height>
      this.<@ts_files/32.ts: ScreenManager.winHeight> = %10"];
  Node62332 [label="id:2
      %11 = this.<@ts_files/32.ts: ScreenManager.winWidth>
      %12 = 'this.winWidth = ' + %11
      %13 = %12 + ' this.winHeight = '
      %14 = this.<@ts_files/32.ts: ScreenManager.winHeight>
      %15 = %13 + %14
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %15)
      return"];
  Node62333 [label="id:3
      exception = caughtexception: unknown
      %16 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(exception)
      %17 = 'Failed to obtain the window properties. Cause: ' + %16
      instanceinvoke console.<@%unk/%unk: .error()>(%17)"];
  Node62330 -> Node62331;
  Node62330 -> Node62332;
  Node62331 -> Node62332;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setFullScreen()" {
  label="@ts_files/32.ts: ScreenManager.setFullScreen()";
  Node42130 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = Constants.<@%unk/%unk: .MAIN_WINDOW>
      topWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getTopWindow start')
      %1 = await instanceinvoke topWindow.<@%unk/%unk: .setWindowLayoutFullScreen()>(true)
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setFullScreen true Succeeded')
      %2 = await instanceinvoke this.<@ts_files/32.ts: ScreenManager.hideStatusBar(window.Window)>(topWindow)"];
  Node42131 [label="id:1
      err = caughtexception: unknown
      %3 = 'setFullScreen err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %3)"];
  Node42132 [label="id:2
      return"];
  Node42130 -> Node42132;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setSplitScreen()" {
  label="@ts_files/32.ts: ScreenManager.setSplitScreen()";
  Node43340 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      this.<@ts_files/32.ts: ScreenManager.statusBarHeight> = 0
      this.<@ts_files/32.ts: ScreenManager.naviBarHeight> = 0
      %0 = newarray (number)[4]
      %0[0] = 0
      %0[1] = 0
      %0[2] = 0
      %0[3] = 0
      this.<@ts_files/32.ts: ScreenManager.leftBlank> = %0
      %1 = BroadcastConstants.<@%unk/%unk: .LEFT_BLANK>
      %2 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      instanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(%1, %2)"];
  Node43341 [label="id:1
      err = caughtexception: unknown
      %3 = 'setSplitScreen err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %3)"];
  Node43342 [label="id:2
      return"];
  Node43340 -> Node43342;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.hideStatusBar(window.Window)" {
  label="@ts_files/32.ts: ScreenManager.hideStatusBar(window.Window)";
  Node55430 [label="id:0
      topWindow = parameter0: window.Window
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'hideStatusBar start')
      %0 = newarray (string)[1]
      %0[0] = 'navigation'
      names = %0
      %1 = 'getTopWindow names: ' + names
      %2 = %1 + ' end'
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %2)
      %3 = await instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarEnable()>(names)
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'hideStatusBar Succeeded')
      data = await instanceinvoke topWindow.<@%unk/%unk: .getWindowAvoidArea()>(0)
      %4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)
      %5 = 'Succeeded in obtaining the area. Data: ' + %4
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %5)
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)>(data)
      %6 = staticinvoke <@%unk/%unk: .$r()>('app.color.default_background_color')
      barColor = await staticinvoke <@%unk/%unk: .getResourceString()>(%6)
      %7 = staticinvoke <@%unk/%unk: .$r()>('app.color.default_bar_content_color')
      barContentColor = await staticinvoke <@%unk/%unk: .getResourceString()>(%7)
      %8 = !barColor
      if %8 != ''"];
  Node55431 [label="id:1
      barColor = '#FFF1F3F5'"];
  Node55432 [label="id:2
      %9 = !barContentColor
      if %9 != ''"];
  Node55433 [label="id:3
      barContentColor = '#FF000000'"];
  Node55434 [label="id:4
      %10 = new @ts_files/32.ts: %AC$ScreenManager$hideStatusBar$0
      instanceinvoke %10.<@ts_files/32.ts: %AC$ScreenManager$hideStatusBar$0.constructor()>()
      systemBarProperties = %10
      %11 = await instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarProperties()>(systemBarProperties)
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setStatusBarColor done')
      return"];
  Node55435 [label="id:5
      err = caughtexception: unknown
      %12 = 'hideStatusBar err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %12)"];
  Node55430 -> Node55431;
  Node55430 -> Node55432;
  Node55431 -> Node55432;
  Node55432 -> Node55433;
  Node55432 -> Node55434;
  Node55433 -> Node55434;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setNavigationBarColor(string, string)" {
  label="@ts_files/32.ts: ScreenManager.setNavigationBarColor(string, string)";
  Node64320 [label="id:0
      barColor = parameter0: string
      barContentColor = parameter1: string
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setNavigationBarColor start')
      %0 = Constants.<@%unk/%unk: .MAIN_WINDOW>
      topWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)
      %1 = new @ts_files/32.ts: %AC$ScreenManager$setNavigationBarColor$1
      instanceinvoke %1.<@ts_files/32.ts: %AC$ScreenManager$setNavigationBarColor$1.constructor()>()
      systemBarProperties = %1
      instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarProperties()>(systemBarProperties, %AM1$setNavigationBarColor)"];
  Node64321 [label="id:1
      err = caughtexception: unknown
      %2 = 'setNavigationBarColor err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %2)"];
  Node64322 [label="id:2
      return"];
  Node64320 -> Node64322;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setSystemUi(boolean)" {
  label="@ts_files/32.ts: ScreenManager.setSystemUi(boolean)";
  Node47730 [label="id:0
      isShowBar = parameter0: boolean
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setSystemUi start')
      %0 = Constants.<@%unk/%unk: .MAIN_WINDOW>
      topWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getTopWindow start')
      %1 = newarray (string)[1]
      %1[0] = 'navigation'
      names = %1
      %2 = !isShowBar
      if %2 != false"];
  Node47731 [label="id:1
      %3 = newarray (any)[0]
      names = %3"];
  Node47732 [label="id:2
      %4 = 'getTopWindow names: ' + names
      %5 = %4 + ' end'
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %5)
      instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarEnable()>(names, %AM2$setSystemUi)"];
  Node47733 [label="id:3
      err = caughtexception: unknown
      %6 = 'setSystemUi err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %6)"];
  Node47734 [label="id:4
      return"];
  Node47730 -> Node47731;
  Node47730 -> Node47732;
  Node47731 -> Node47732;
  Node47732 -> Node47734;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)" {
  label="@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)";
  Node62420 [label="id:0
      area = parameter0: window.AvoidArea
      this = this: @ts_files/32.ts: ScreenManager
      %0 = area == null
      %1 = area == undefined
      %2 = %0 || %1
      %3 = area.<@%unk/%unk: .bottomRect>
      %4 = %3.<@%unk/%unk: .height>
      %5 = %4 === 0
      %6 = %2 || %5
      if %6 != false"];
  Node62421 [label="id:1
      return"];
  Node62422 [label="id:2
      %7 = new @ts_files/32.ts: %AC$ScreenManager$onLeftBlankChanged$2
      instanceinvoke %7.<@ts_files/32.ts: %AC$ScreenManager$onLeftBlankChanged$2.constructor()>()
      leftBlankBefore = %7
      this.<@ts_files/32.ts: ScreenManager.statusBarHeight> = 0
      %8 = area.<@%unk/%unk: .bottomRect>
      %9 = %8.<@%unk/%unk: .height>
      this.<@ts_files/32.ts: ScreenManager.naviBarHeight> = %9
      %10 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %11 = %10[0]
      %12 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %13 = %12[1]
      %14 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %15 = %14[2]
      %16 = area.<@%unk/%unk: .bottomRect>
      %17 = %16.<@%unk/%unk: .height>
      %18 = newarray (unknown)[4]
      %18[0] = %11
      %18[1] = %13
      %18[2] = %15
      %18[3] = %17
      this.<@ts_files/32.ts: ScreenManager.leftBlank> = %18
      %19 = leftBlankBefore.<@ts_files/32.ts: StatusNaviHeight.status>
      %20 = this.<@ts_files/32.ts: ScreenManager.statusBarHeight>
      %21 = %19 !== %20
      %22 = leftBlankBefore.<@ts_files/32.ts: StatusNaviHeight.navi>
      %23 = this.<@ts_files/32.ts: ScreenManager.naviBarHeight>
      %24 = %22 !== %23
      %25 = %21 || %24
      if %25 != false"];
  Node62423 [label="id:3
      %26 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(leftBlankBefore)
      %27 = 'leftBlank changed: ' + %26
      %28 = %27 + '-'
      %29 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      %30 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%29)
      %31 = %28 + %30
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %31)
      %32 = BroadcastConstants.<@%unk/%unk: .LEFT_BLANK>
      %33 = this.<@ts_files/32.ts: ScreenManager.leftBlank>
      instanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(%32, %33)"];
  Node62424 [label="id:4
      return"];
  Node62420 -> Node62421;
  Node62420 -> Node62422;
  Node62422 -> Node62423;
  Node62422 -> Node62424;
  Node62423 -> Node62424;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.onWinSizeChanged(unknown)" {
  label="@ts_files/32.ts: ScreenManager.onWinSizeChanged(unknown)";
  Node52700 [label="id:0
      size = parameter0: unknown
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(size)
      %1 = 'onWinSizeChanged ' + %0
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)
      %2 = size == null
      %3 = size == undefined
      %4 = %2 || %3
      if %4 != false"];
  Node52701 [label="id:1
      return"];
  Node52702 [label="id:2
      %5 = new @ts_files/32.ts: %AC$ScreenManager$onWinSizeChanged$3
      instanceinvoke %5.<@ts_files/32.ts: %AC$ScreenManager$onWinSizeChanged$3.constructor()>()
      sizeBefore = %5
      %6 = size.<@%unk/%unk: .width>
      this.<@ts_files/32.ts: ScreenManager.winWidth> = %6
      %7 = size.<@%unk/%unk: .height>
      this.<@ts_files/32.ts: ScreenManager.winHeight> = %7
      %8 = sizeBefore.<@ts_files/32.ts: Size.width>
      %9 = this.<@ts_files/32.ts: ScreenManager.winWidth>
      %10 = %8 !== %9
      %11 = sizeBefore.<@ts_files/32.ts: Size.height>
      %12 = this.<@ts_files/32.ts: ScreenManager.winHeight>
      %13 = %11 !== %12
      %14 = %10 || %13
      if %14 != false"];
  Node52703 [label="id:3
      %15 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(sizeBefore)
      %16 = 'winSize changed: ' + %15
      %17 = %16 + ' -> '
      %18 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(size)
      %19 = %17 + %18
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %19)
      %20 = screenManager.<@ts_files/32.ts: ScreenManager.ON_WIN_SIZE_CHANGED>
      %21 = newarray (unknown)[1]
      %21[0] = size
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.emit(unknown, Object[])>(%20, %21)"];
  Node52704 [label="id:4
      return"];
  Node52700 -> Node52701;
  Node52700 -> Node52702;
  Node52702 -> Node52703;
  Node52702 -> Node52704;
  Node52703 -> Node52704;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.onRotationAngleChanged(unknown)" {
  label="@ts_files/32.ts: ScreenManager.onRotationAngleChanged(unknown)";
  Node58920 [label="id:0
      angle = parameter0: unknown
      this = this: @ts_files/32.ts: ScreenManager
      %0 = angle == null
      %1 = angle == undefined
      %2 = %0 || %1
      if %2 != false"];
  Node58921 [label="id:1
      return"];
  Node58922 [label="id:2
      if angle === 0"];
  Node58923 [label="id:3
      this.<@ts_files/32.ts: ScreenManager.horizontal> = false"];
  Node58924 [label="id:4
      this.<@ts_files/32.ts: ScreenManager.horizontal> = true"];
  Node58925 [label="id:5
      %3 = this.<@ts_files/32.ts: ScreenManager.horizontal>
      instanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_ORIENTATION_HORIZONTAL, %3)
      return"];
  Node58920 -> Node58921;
  Node58920 -> Node58922;
  Node58922 -> Node58923;
  Node58922 -> Node58924;
  Node58923 -> Node58925;
  Node58924 -> Node58925;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.isHorizontal()" {
  label="@ts_files/32.ts: ScreenManager.isHorizontal()";
  Node41560 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_ORIENTATION_HORIZONTAL)
      if %0 == null"];
  Node41561 [label="id:1
      %1 = this.<@ts_files/32.ts: ScreenManager.horizontal>
      instanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_ORIENTATION_HORIZONTAL, %1)"];
  Node41562 [label="id:2
      %2 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_ORIENTATION_HORIZONTAL)
      return %2"];
  Node41560 -> Node41561;
  Node41560 -> Node41562;
  Node41561 -> Node41562;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.isSidebar()" {
  label="@ts_files/32.ts: ScreenManager.isSidebar()";
  Node37880 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_SIDEBAR)
      if %0 == null"];
  Node37881 [label="id:1
      %1 = this.<@ts_files/32.ts: ScreenManager.sidebar>
      instanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_SIDEBAR, %1)"];
  Node37882 [label="id:2
      %2 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_SIDEBAR)
      return %2"];
  Node37880 -> Node37881;
  Node37880 -> Node37882;
  Node37881 -> Node37882;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getColumnsWidth(number)" {
  label="@ts_files/32.ts: ScreenManager.getColumnsWidth(number)";
  Node50880 [label="id:0
      count = parameter0: number
      this = this: @ts_files/32.ts: ScreenManager
      columns = instanceinvoke this.<@ts_files/32.ts: ScreenManager.getScreenColumns()>()
      %0 = 'getColumnsWidth count is ' + count
      %1 = %0 + ' columns: '
      %2 = %1 + columns
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)
      %3 = this.<@ts_files/32.ts: ScreenManager.winWidth>
      %4 = staticinvoke <@%unk/%unk: .px2vp()>(%3)
      %5 = %4 - COLUMN_MARGIN
      columnWidth = %5 / columns
      %6 = columnWidth * count
      %7 = %6 - COLUMN_GUTTER
      return %7"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.getScreenColumns()" {
  label="@ts_files/32.ts: ScreenManager.getScreenColumns()";
  Node45350 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = this.<@ts_files/32.ts: ScreenManager.winWidth>
      width = staticinvoke <@%unk/%unk: .px2vp()>(%0)
      %1 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_MEDIUM
      if width < %1"];
  Node45351 [label="id:1
      %2 = @ts_files/32.ts: ColumnSize.[static]COLUMN_FOUR
      return %2"];
  Node45352 [label="id:2
      %3 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_MEDIUM
      %4 = width >= %3
      %5 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_LARGE
      %6 = width < %5
      %7 = %4 && %6
      if %7 != false"];
  Node45353 [label="id:3
      %8 = @ts_files/32.ts: ColumnSize.[static]COLUMN_EIGHT
      return %8"];
  Node45354 [label="id:4
      %9 = @ts_files/32.ts: ColumnSize.[static]COLUMN_TWELVE
      return %9"];
  Node45350 -> Node45351;
  Node45350 -> Node45352;
  Node45352 -> Node45353;
  Node45352 -> Node45354;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setKeepScreenOn()" {
  label="@ts_files/32.ts: ScreenManager.setKeepScreenOn()";
  Node43880 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOn start')
      topWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>('mainWindow')
      instanceinvoke topWindow.<@%unk/%unk: .setWindowKeepScreenOn()>(true, %AM3$setKeepScreenOn)"];
  Node43881 [label="id:1
      err = caughtexception: unknown
      %0 = 'setKeepScreenOn err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)"];
  Node43882 [label="id:2
      return"];
  Node43880 -> Node43882;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.setKeepScreenOff()" {
  label="@ts_files/32.ts: ScreenManager.setKeepScreenOff()";
  Node44820 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOff start')
      topWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>('mainWindow')
      instanceinvoke topWindow.<@%unk/%unk: .setWindowKeepScreenOn()>(false, %AM4$setKeepScreenOff)"];
  Node44821 [label="id:1
      err = caughtexception: unknown
      %0 = 'setKeepScreenOff err: ' + err
      instanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)"];
  Node44822 [label="id:2
      return"];
  Node44820 -> Node44822;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)" {
  label="@ts_files/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)";
  Node56070 [label="id:0
      data = parameter0: window.Size
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)
      %1 = 'windowSizeChange ' + %0
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.checkWindowMode()>()
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.onWinSizeChanged(unknown)>(data)
      return"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.%AM1$setNavigationBarColor()" {
  label="@ts_files/32.ts: ScreenManager.%AM1$setNavigationBarColor()";
  Node52940 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setStatusBarColor done')
      return %0"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.%AM2$setSystemUi()" {
  label="@ts_files/32.ts: ScreenManager.%AM2$setSystemUi()";
  Node43020 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      instanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setFullScreen Succeeded')
      if isShowBar != 0"];
  Node43021 [label="id:1
      data = await instanceinvoke topWindow.<@%unk/%unk: .getWindowAvoidArea()>(0)
      instanceinvoke this.<@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)>(data)"];
  Node43022 [label="id:2
      return"];
  Node43020 -> Node43021;
  Node43020 -> Node43022;
  Node43021 -> Node43022;
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.%AM3$setKeepScreenOn()" {
  label="@ts_files/32.ts: ScreenManager.%AM3$setKeepScreenOn()";
  Node46540 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOn Succeeded')
      return %0"];
}
subgraph "cluster_@ts_files/32.ts: ScreenManager.%AM4$setKeepScreenOff()" {
  label="@ts_files/32.ts: ScreenManager.%AM4$setKeepScreenOff()";
  Node47490 [label="id:0
      this = this: @ts_files/32.ts: ScreenManager
      %0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOff Succeeded')
      return %0"];
}
}
