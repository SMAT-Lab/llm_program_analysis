{
  "type": "file",
  "name": "209.ts",
  "label": "209.ts",
  "start_line": -1,
  "end_line": 81,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 81,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/209.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "Frustum",
      "label": "Frustum",
      "start_line": 1,
      "end_line": 81,
      "functions": [
        {
          "type": "function",
          "name": "GetPlanes",
          "label": "GetPlanes",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nthis = this: @ts_files/209.ts: Frustum\n%0 = newarray (any)[0]\nfrustumPlanes = %0\nindex = 0",
              "start_line": 1,
              "end_line": 7,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if index < 6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = new @%unk/%unk: Plane\ninstanceinvoke %1.<@%unk/%unk: Plane.constructor()>(0, 0, 0, 0)\ninstanceinvoke frustumPlanes.<@%unk/%unk: .push()>(%1)\nindex = index + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "staticinvoke <@ts_files/209.ts: Frustum.[static]GetPlanesToRef(DeepImmutable<Matrix>, Plane[])>(transform, frustumPlanes)\nreturn frustumPlanes",
                      "start_line": 1,
                      "end_line": 11,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\n        const frustumPlanes = [];\n        for (let index = 0; index < 6; index++) {\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n        }\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\n        return frustumPlanes;\n    }"
        },
        {
          "type": "function",
          "name": "GetNearPlaneToRef",
          "label": "GetNearPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .2>\n%3 = %1 + %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .6>\n%7 = %5 + %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .10>\n%11 = %9 + %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .14>\n%14 = %12 + %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[2];\n        frustumPlane.normal.y = m[7] + m[6];\n        frustumPlane.normal.z = m[11] + m[10];\n        frustumPlane.d = m[15] + m[14];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetFarPlaneToRef",
          "label": "GetFarPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .2>\n%3 = %1 - %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .6>\n%7 = %5 - %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .10>\n%11 = %9 - %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .14>\n%14 = %12 - %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[2];\n        frustumPlane.normal.y = m[7] - m[6];\n        frustumPlane.normal.z = m[11] - m[10];\n        frustumPlane.d = m[15] - m[14];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetLeftPlaneToRef",
          "label": "GetLeftPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .0>\n%3 = %1 + %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .4>\n%7 = %5 + %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .8>\n%11 = %9 + %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .12>\n%14 = %12 + %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[0];\n        frustumPlane.normal.y = m[7] + m[4];\n        frustumPlane.normal.z = m[11] + m[8];\n        frustumPlane.d = m[15] + m[12];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetRightPlaneToRef",
          "label": "GetRightPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .0>\n%3 = %1 - %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .4>\n%7 = %5 - %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .8>\n%11 = %9 - %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .12>\n%14 = %12 - %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[0];\n        frustumPlane.normal.y = m[7] - m[4];\n        frustumPlane.normal.z = m[11] - m[8];\n        frustumPlane.d = m[15] - m[12];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetTopPlaneToRef",
          "label": "GetTopPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .1>\n%3 = %1 - %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .5>\n%7 = %5 - %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .9>\n%11 = %9 - %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .13>\n%14 = %12 - %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[1];\n        frustumPlane.normal.y = m[7] - m[5];\n        frustumPlane.normal.z = m[11] - m[9];\n        frustumPlane.d = m[15] - m[13];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetBottomPlaneToRef",
          "label": "GetBottomPlaneToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlane = parameter1: Plane\nthis = this: @ts_files/209.ts: Frustum\nm = transform.<@%unk/%unk: .m>\n%1 = m.<@%unk/%unk: .3>\n%2 = m.<@%unk/%unk: .1>\n%3 = %1 + %2\n%0 = frustumPlane.<@%unk/%unk: .normal>\n%0.<@%unk/%unk: .x> = %3\n%5 = m.<@%unk/%unk: .7>\n%6 = m.<@%unk/%unk: .5>\n%7 = %5 + %6\n%4 = frustumPlane.<@%unk/%unk: .normal>\n%4.<@%unk/%unk: .y> = %7\n%9 = m.<@%unk/%unk: .11>\n%10 = m.<@%unk/%unk: .9>\n%11 = %9 + %10\n%8 = frustumPlane.<@%unk/%unk: .normal>\n%8.<@%unk/%unk: .z> = %11\n%12 = m.<@%unk/%unk: .15>\n%13 = m.<@%unk/%unk: .13>\n%14 = %12 + %13\nfrustumPlane.<@%unk/%unk: .d> = %14\ninstanceinvoke frustumPlane.<@%unk/%unk: .normalize()>()\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[1];\n        frustumPlane.normal.y = m[7] + m[5];\n        frustumPlane.normal.z = m[11] + m[9];\n        frustumPlane.d = m[15] + m[13];\n        frustumPlane.normalize();\n    }"
        },
        {
          "type": "function",
          "name": "GetPlanesToRef",
          "label": "GetPlanesToRef",
          "start_line": 1,
          "end_line": 81,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "transform = parameter0: DeepImmutable<Matrix>\nfrustumPlanes = parameter1: Plane[]\nthis = this: @ts_files/209.ts: Frustum\n%0 = frustumPlanes[0]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetNearPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %0)\n%1 = frustumPlanes[1]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetFarPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %1)\n%2 = frustumPlanes[2]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetLeftPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %2)\n%3 = frustumPlanes[3]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetRightPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %3)\n%4 = frustumPlanes[4]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetTopPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %4)\n%5 = frustumPlanes[5]\nstaticinvoke <@ts_files/209.ts: Frustum.[static]GetBottomPlaneToRef(DeepImmutable<Matrix>, Plane)>(transform, %5)\nreturn",
              "start_line": 1,
              "end_line": 81,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\n        // Near\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n        // Far\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n        // Left\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n        // Right\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n        // Top\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n        // Bottom\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n    }"
        },
        {
          "type": "function",
          "name": "IsPointInFrustum",
          "label": "IsPointInFrustum",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "point = parameter0: Vector3\nfrustumPlanes = parameter1: DeepImmutable<Plane>[]\nthis = this: @ts_files/209.ts: Frustum\ni = 0",
              "start_line": 1,
              "end_line": 76,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < 6",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = frustumPlanes[i]\n%1 = instanceinvoke %0.<@%unk/%unk: .dotCoordinate()>(point)\nif %1 < 0\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return false",
                          "start_line": 78,
                          "end_line": 78,
                          "successors": []
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return true",
                      "start_line": 81,
                      "end_line": 81,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\n        for (let i = 0; i < 6; i++) {\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class Frustum {\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\n        const frustumPlanes = [];\n        for (let index = 0; index < 6; index++) {\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n        }\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\n        return frustumPlanes;\n    }\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[2];\n        frustumPlane.normal.y = m[7] + m[6];\n        frustumPlane.normal.z = m[11] + m[10];\n        frustumPlane.d = m[15] + m[14];\n        frustumPlane.normalize();\n    }\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[2];\n        frustumPlane.normal.y = m[7] - m[6];\n        frustumPlane.normal.z = m[11] - m[10];\n        frustumPlane.d = m[15] - m[14];\n        frustumPlane.normalize();\n    }\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[0];\n        frustumPlane.normal.y = m[7] + m[4];\n        frustumPlane.normal.z = m[11] + m[8];\n        frustumPlane.d = m[15] + m[12];\n        frustumPlane.normalize();\n    }\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[0];\n        frustumPlane.normal.y = m[7] - m[4];\n        frustumPlane.normal.z = m[11] - m[8];\n        frustumPlane.d = m[15] - m[12];\n        frustumPlane.normalize();\n    }\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[1];\n        frustumPlane.normal.y = m[7] - m[5];\n        frustumPlane.normal.z = m[11] - m[9];\n        frustumPlane.d = m[15] - m[13];\n        frustumPlane.normalize();\n    }\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[1];\n        frustumPlane.normal.y = m[7] + m[5];\n        frustumPlane.normal.z = m[11] + m[9];\n        frustumPlane.d = m[15] + m[13];\n        frustumPlane.normalize();\n    }\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\n        // Near\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n        // Far\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n        // Left\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n        // Right\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n        // Top\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n        // Bottom\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n    }\n    public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\n        for (let i = 0; i < 6; i++) {\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { Matrix, Vector3 } from \"./math.vector\";\nimport type { DeepImmutable } from \"../types\";\nimport { Plane } from \"./math.plane\";\nexport class Frustum {\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\n        const frustumPlanes = [];\n        for (let index = 0; index < 6; index++) {\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n        }\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\n        return frustumPlanes;\n    }\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[2];\n        frustumPlane.normal.y = m[7] + m[6];\n        frustumPlane.normal.z = m[11] + m[10];\n        frustumPlane.d = m[15] + m[14];\n        frustumPlane.normalize();\n    }\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[2];\n        frustumPlane.normal.y = m[7] - m[6];\n        frustumPlane.normal.z = m[11] - m[10];\n        frustumPlane.d = m[15] - m[14];\n        frustumPlane.normalize();\n    }\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[0];\n        frustumPlane.normal.y = m[7] + m[4];\n        frustumPlane.normal.z = m[11] + m[8];\n        frustumPlane.d = m[15] + m[12];\n        frustumPlane.normalize();\n    }\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[0];\n        frustumPlane.normal.y = m[7] - m[4];\n        frustumPlane.normal.z = m[11] - m[8];\n        frustumPlane.d = m[15] - m[12];\n        frustumPlane.normalize();\n    }\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] - m[1];\n        frustumPlane.normal.y = m[7] - m[5];\n        frustumPlane.normal.z = m[11] - m[9];\n        frustumPlane.d = m[15] - m[13];\n        frustumPlane.normalize();\n    }\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\n        const m = transform.m;\n        frustumPlane.normal.x = m[3] + m[1];\n        frustumPlane.normal.y = m[7] + m[5];\n        frustumPlane.normal.z = m[11] + m[9];\n        frustumPlane.d = m[15] + m[13];\n        frustumPlane.normalize();\n    }\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\n        // Near\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n        // Far\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n        // Left\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n        // Right\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n        // Top\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n        // Bottom\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n    }\n    public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\n        for (let i = 0; i < 6; i++) {\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
}