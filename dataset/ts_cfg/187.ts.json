{
  "type": "file",
  "name": "187.ts",
  "label": "187.ts",
  "start_line": -1,
  "end_line": 15,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 14,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/187.ts: %dflt\n%0 = new @ts_files/187.ts: %AC$%dflt$%dflt$0\ninstanceinvoke %0.<@ts_files/187.ts: %AC$%dflt$%dflt$0.constructor()>()\nmockConfig = %0\ninstanceinvoke jest.<@%unk/%unk: .mock()>('axios')\nstaticinvoke <@%unk/%unk: .describe()>('test use of novus node package - InboundParse class', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 10,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/187.ts: %dflt\n%0 = mockedAxios.<@%unk/%unk: .create>\ninstanceinvoke %0.<@%unk/%unk: .mockReturnThis()>()\n%1 = new @%unk/%unk: Novu\n%2 = mockConfig.<@ts_files/187.ts: %AC$%dflt$%dflt$0.apiKey>\ninstanceinvoke %1.<@%unk/%unk: Novu.constructor()>(%2)\nnovu = %1\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 14,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/187.ts: %dflt\n%0 = new @ts_files/187.ts: %AC$%dflt$%AM2$%AM0$1\ninstanceinvoke %0.<@ts_files/187.ts: %AC$%dflt$%AM2$%AM0$1.constructor()>()\n%1 = mockedAxios.<@%unk/%unk: .get>\ninstanceinvoke %1.<@%unk/%unk: .mockResolvedValue()>(%0)\n%2 = novu.<@%unk/%unk: .inboundParse>\n%3 = instanceinvoke %2.<@%unk/%unk: .getMxStatus()>()\n%4 = await %3\n%5 = mockedAxios.<@%unk/%unk: .get>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\ninstanceinvoke %6.<@%unk/%unk: .toHaveBeenCalled()>()\n%7 = mockedAxios.<@%unk/%unk: .get>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\ninstanceinvoke %8.<@%unk/%unk: .toHaveBeenCalledWith()>('/inbound-parse/mx/status')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled();\n    expect(mockedAxios.get).toHaveBeenCalledWith('/inbound-parse/mx/status');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/187.ts: %dflt\nmockedAxios = <jest.Mocked<unknown>>axios\nnovu = undefined\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .test()>('should get inbound parse correctly', %AM2$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled();\n    expect(mockedAxios.get).toHaveBeenCalledWith('/inbound-parse/mx/status');\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$0",
      "label": "%AC$%dflt$%dflt$0",
      "start_line": 3,
      "end_line": 3,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  apiKey: '1234',\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%AM0$1",
      "label": "%AC$%dflt$%AM2$%AM0$1",
      "start_line": 15,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import axios from 'axios';\nimport { Novu } from '../novu';\nconst mockConfig = {\n  apiKey: '1234',\n};\njest.mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled();\n    expect(mockedAxios.get).toHaveBeenCalledWith('/inbound-parse/mx/status');\n  });\n});"
}