{
  "type": "file",
  "name": "8.ts",
  "label": "8.ts",
  "start_line": -1,
  "end_line": 43,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 43,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/8.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 19,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    width: number,\n    height: number\n  }"
    },
    {
      "type": "class",
      "name": "DisplayCalculator",
      "label": "DisplayCalculator",
      "start_line": 1,
      "end_line": 19,
      "functions": [
        {
          "type": "function",
          "name": "calcSurfaceDisplaySize",
          "label": "calcSurfaceDisplaySize",
          "start_line": 1,
          "end_line": 19,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "screenWidth = parameter0: number\nscreenHeight = parameter1: number\ndefaultAspectRatio = parameter2: number\nthis = this: @ts_files/8.ts: DisplayCalculator\n%0 = new @ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1\ninstanceinvoke %0.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.constructor()>()\ndisplaySize = %0\n%1 = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')\n%2 = Constants.<@%unk/%unk: .TABLET>\n%3 = %1 === %2\n%4 = screenWidth > screenHeight\n%5 = %3 || %4\nif %5 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = screenWidth / screenHeight\nif %6 > defaultAspectRatio",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = screenHeight * defaultAspectRatio\n%8 = instanceinvoke Math.<@%unk/%unk: .floor()>(%7)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %8\n%9 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenHeight)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return displaySize",
                          "start_line": 43,
                          "end_line": 43,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenWidth)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %10\n%11 = screenWidth / defaultAspectRatio\n%12 = instanceinvoke Math.<@%unk/%unk: .floor()>(%11)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %12",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%13 = screenWidth / screenHeight\nif %13 > defaultAspectRatio",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = screenHeight / defaultAspectRatio\n%15 = instanceinvoke Math.<@%unk/%unk: .floor()>(%14)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %15\n%16 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenHeight)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %16",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%17 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenWidth)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %17\n%18 = screenWidth * defaultAspectRatio\n%19 = instanceinvoke Math.<@%unk/%unk: .floor()>(%18)\ndisplaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %19",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static calcSurfaceDisplaySize(screenWidth: number, screenHeight: number, defaultAspectRatio: number): {\n    width: number,\n    height: number\n  } {\n    const displaySize = {\n      width: 1920, height: 1080\n    };\n    if (AppStorage.get<string>('deviceType') === Constants.TABLET || screenWidth > screenHeight) {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight * defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth / defaultAspectRatio);\n      }\n    } else {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight / defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth * defaultAspectRatio);\n      }\n    }\n    return displaySize;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class DisplayCalculator {\n  public static calcSurfaceDisplaySize(screenWidth: number, screenHeight: number, defaultAspectRatio: number): {\n    width: number,\n    height: number\n  } {\n    const displaySize = {\n      width: 1920, height: 1080\n    };\n    if (AppStorage.get<string>('deviceType') === Constants.TABLET || screenWidth > screenHeight) {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight * defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth / defaultAspectRatio);\n      }\n    } else {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight / defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth * defaultAspectRatio);\n      }\n    }\n    return displaySize;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$DisplayCalculator$calcSurfaceDisplaySize$1",
      "label": "%AC$DisplayCalculator$calcSurfaceDisplaySize$1",
      "start_line": 23,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: 1920, height: 1080\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Constants } from '../common/Constants';\n\nexport default class DisplayCalculator {\n  public static calcSurfaceDisplaySize(screenWidth: number, screenHeight: number, defaultAspectRatio: number): {\n    width: number,\n    height: number\n  } {\n    const displaySize = {\n      width: 1920, height: 1080\n    };\n    if (AppStorage.get<string>('deviceType') === Constants.TABLET || screenWidth > screenHeight) {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight * defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth / defaultAspectRatio);\n      }\n    } else {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight / defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth * defaultAspectRatio);\n      }\n    }\n    return displaySize;\n  }\n}"
}