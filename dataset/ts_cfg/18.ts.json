{
  "type": "file",
  "name": "18.ts",
  "label": "18.ts",
  "start_line": -1,
  "end_line": 124,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 73,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: %dflt\nTAG = 'BatchRemoveMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "BatchRemoveMenuOperation",
      "label": "BatchRemoveMenuOperation",
      "start_line": 1,
      "end_line": 124,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/18.ts: BatchRemoveMenuOperation\nstaticinvoke <@%unk/%unk: .super()>(menuContext)\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'remove doAction')\n%0 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'menuContext is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 73,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\ndataSource = %1.<@%unk/%unk: .dataSource>\nif dataSource == null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%3 = %2.<@%unk/%unk: .items>\n%4 = %3.<@%unk/%unk: .length>\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.count> = %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.count>\nif %6 <= 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'count <= 0, return')\nreturn",
                              "start_line": 1,
                              "end_line": 73,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "this.<@ts_files/18.ts: BatchRemoveMenuOperation.confirmCallback> = %AM0$doAction\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.cancelCallback> = %AM1$doAction\nresource = instanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.getRemoveMessageResource(ItemDataSource)>(dataSource)\nremoveResource = staticinvoke <@%unk/%unk: .$r()>('app.string.dialog_remove')\n%7 = BroadcastConstants.<@%unk/%unk: .SHOW_DELETE_DIALOG>\n%8 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.confirmCallback>\n%9 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.cancelCallback>\n%10 = newarray (Resource|Resource|unknown)[4]\n%10[0] = resource\n%10[1] = removeResource\n%10[2] = %8\n%10[3] = %9\n%11 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%12 = %11.<@%unk/%unk: .broadCast>\ninstanceinvoke %12.<@%unk/%unk: .emit()>(%7, %10)\nreturn",
                              "start_line": 1,
                              "end_line": 73,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke dataSource.<@%unk/%unk: .getSelectedCount()>()\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.count> = %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n    Log.info(TAG, 'remove doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getRemoveMessageResource(dataSource);\n    let removeResource: Resource = $r('app.string.dialog_remove');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, removeResource, this.confirmCallback, this.cancelCallback]);\n  }"
        },
        {
          "type": "function",
          "name": "getResourceFromGrid",
          "label": "getResourceFromGrid",
          "start_line": 1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "dataSource = parameter0: ItemDataSource\nthis = this: @ts_files/18.ts: BatchRemoveMenuOperation\n%0 = dataSource != null\n%1 = instanceinvoke dataSource.<@%unk/%unk: .isSelect()>()\n%2 = %0 && %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = staticinvoke <@%unk/%unk: .$r()>('app.string.remove_all_files_tips')\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.count>\nif %4 === 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = staticinvoke <@%unk/%unk: .$r()>('app.string.remove_single_file_tips')\nreturn %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.count>\n%7 = staticinvoke <@%unk/%unk: .$r()>('app.string.remove_files_tips', %6)\nreturn %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return $r('app.string.remove_all_files_tips');\n    } else if (this.count === 1) {\n      return $r('app.string.remove_single_file_tips');\n    } else {\n      return $r('app.string.remove_files_tips', this.count);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getRemoveMessageResource",
          "label": "getRemoveMessageResource",
          "start_line": 1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "dataSource = parameter0: ItemDataSource\nthis = this: @ts_files/18.ts: BatchRemoveMenuOperation\nresource = undefined\nresource = instanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.getResourceFromGrid(ItemDataSource)>(dataSource)\nreturn resource",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getRemoveMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    resource = this.getResourceFromGrid(dataSource);\n    return resource;\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallback",
          "label": "confirmCallback",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\ninstanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.confirmCallbackBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallbackBindImpl",
          "label": "confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 80,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Batch remove confirm')\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>('isRemove', 1)\n%0 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%1 = %0.<@%unk/%unk: .onOperationEnd>\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.onOperationEnd> = %1\n%2 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\nonOperationStart = %2.<@%unk/%unk: .onOperationStart>\nif onOperationStart != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .onOperationStart()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = BroadcastConstants.<@%unk/%unk: .DELETE_PROGRESS_DIALOG>\n%4 = staticinvoke <@%unk/%unk: .$r()>('app.string.action_remove')\n%5 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.count>\n%6 = newarray (unknown)[2]\n%6[0] = %4\n%6[1] = %5\n%7 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%8 = %7.<@%unk/%unk: .broadCast>\ninstanceinvoke %8.<@%unk/%unk: .emit()>(%3, %6)\n%9 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\ndataSource = %9.<@%unk/%unk: .dataSource>\nif dataSource == null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%11 = %10.<@%unk/%unk: .items>\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.items> = %11",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke this.<@%unk/%unk: .processOperation()>()\nreturn",
                              "start_line": 1,
                              "end_line": 73,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%12 = instanceinvoke dataSource.<@%unk/%unk: .getSelectedItems()>()\nthis.<@ts_files/18.ts: BatchRemoveMenuOperation.items> = %12",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove confirm');\n    AppStorage.SetOrCreate<number>('isRemove', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onRemoveStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_remove'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }"
        },
        {
          "type": "function",
          "name": "requestOneBatchOperation",
          "label": "requestOneBatchOperation",
          "start_line": 1,
          "end_line": 106,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\n%0 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.items>\n%1 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.currentBatch>\n%2 = %0.<@%unk/%unk: .%1>\nitem = <UserFileDataItem>%2\nif item != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%4 = %3.<@%unk/%unk: .albumId>\n%5 = MediaConstants.<@%unk/%unk: .ALBUM_ID_USER>\nif %4 === %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%7 = %6.<@%unk/%unk: .albumInfo>\n%8 = %7.<@%unk/%unk: .uri>\n%9 = 'Remove from user album:' + %8\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %9)\n%10 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%11 = %10.<@%unk/%unk: .albumInfo>\n%12 = %11.<@%unk/%unk: .uri>\n%13 = item.<@%unk/%unk: .uri>\n%14 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.albumDataImpl>\n%15 = instanceinvoke %14.<@%unk/%unk: .removeFileFromAlbum()>(%12, %13)\ninstanceinvoke %15.<@%unk/%unk: .then()>(%AM2$requestOneBatchOperation)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 37,
                          "end_line": 73,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      if(this.menuContext.albumId === MediaConstants.ALBUM_ID_USER){\n        Log.error(TAG,'Remove from user album:'+this.menuContext.albumInfo.uri);\n        this.albumDataImpl.removeFileFromAlbum(this.menuContext.albumInfo.uri,item.uri).then<void, void>((): void => {\n          this.currentBatch++;\n          this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n          this.cyclicOperation();\n        })\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallback",
          "label": "cancelCallback",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\ninstanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.cancelCallbackBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallbackBindImpl",
          "label": "cancelCallbackBindImpl",
          "start_line": 1,
          "end_line": 124,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Batch remove cancel')\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove cancel');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$doAction",
          "label": "%AM0$doAction",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\n%0 = instanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.confirmCallbackBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.confirmCallbackBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM1$doAction",
          "label": "%AM1$doAction",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\n%0 = instanceinvoke this.<@ts_files/18.ts: BatchRemoveMenuOperation.cancelCallbackBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.cancelCallbackBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM2$requestOneBatchOperation",
          "label": "%AM2$requestOneBatchOperation",
          "start_line": 1,
          "end_line": 111,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/18.ts: BatchRemoveMenuOperation\n%0 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.currentBatch>\n%0 = %0 + 1\n%1 = BroadcastConstants.<@%unk/%unk: .UPDATE_PROGRESS>\n%2 = instanceinvoke this.<@%unk/%unk: .getExpectProgress()>()\n%3 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.currentBatch>\n%4 = newarray (unknown)[2]\n%4[0] = %2\n%4[1] = %3\n%5 = this.<@ts_files/18.ts: BatchRemoveMenuOperation.menuContext>\n%6 = %5.<@%unk/%unk: .broadCast>\ninstanceinvoke %6.<@%unk/%unk: .emit()>(%1, %4)\ninstanceinvoke this.<@%unk/%unk: .cyclicOperation()>()\nreturn",
              "start_line": 1,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n          this.currentBatch++;\n          this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n          this.cyclicOperation();\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class BatchRemoveMenuOperation extends ProcessMenuOperation {\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'remove doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getRemoveMessageResource(dataSource);\n    let removeResource: Resource = $r('app.string.dialog_remove');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, removeResource, this.confirmCallback, this.cancelCallback]);\n  }\n\n  getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return $r('app.string.remove_all_files_tips');\n    } else if (this.count === 1) {\n      return $r('app.string.remove_single_file_tips');\n    } else {\n      return $r('app.string.remove_files_tips', this.count);\n    }\n  }\n\n  getRemoveMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    resource = this.getResourceFromGrid(dataSource);\n    return resource;\n  }\n\n  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove confirm');\n    AppStorage.SetOrCreate<number>('isRemove', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onRemoveStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_remove'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }\n\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      if(this.menuContext.albumId === MediaConstants.ALBUM_ID_USER){\n        Log.error(TAG,'Remove from user album:'+this.menuContext.albumInfo.uri);\n        this.albumDataImpl.removeFileFromAlbum(this.menuContext.albumInfo.uri,item.uri).then<void, void>((): void => {\n          this.currentBatch++;\n          this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n          this.cyclicOperation();\n        })\n      }\n    }\n  }\n\n  cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove cancel');\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumDataImpl } from '../common/AlbumDataImpl';\n\nconst TAG = 'BatchRemoveMenuOperation';\n\nexport class BatchRemoveMenuOperation extends ProcessMenuOperation {\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'remove doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getRemoveMessageResource(dataSource);\n    let removeResource: Resource = $r('app.string.dialog_remove');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, removeResource, this.confirmCallback, this.cancelCallback]);\n  }\n\n  getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return $r('app.string.remove_all_files_tips');\n    } else if (this.count === 1) {\n      return $r('app.string.remove_single_file_tips');\n    } else {\n      return $r('app.string.remove_files_tips', this.count);\n    }\n  }\n\n  getRemoveMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    resource = this.getResourceFromGrid(dataSource);\n    return resource;\n  }\n\n  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove confirm');\n    AppStorage.SetOrCreate<number>('isRemove', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onRemoveStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_remove'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }\n\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      if(this.menuContext.albumId === MediaConstants.ALBUM_ID_USER){\n        Log.error(TAG,'Remove from user album:'+this.menuContext.albumInfo.uri);\n        this.albumDataImpl.removeFileFromAlbum(this.menuContext.albumInfo.uri,item.uri).then<void, void>((): void => {\n          this.currentBatch++;\n          this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n          this.cyclicOperation();\n        })\n      }\n    }\n  }\n\n  cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove cancel');\n  }\n}\n"
}