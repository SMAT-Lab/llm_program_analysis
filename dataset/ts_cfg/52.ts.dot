digraph "52.ts" {
subgraph "cluster_@ts_files/52.ts: %dflt.[static]%dflt()" {
  label="@ts_files/52.ts: %dflt.[static]%dflt()";
  Node33230 [label="id:0
      this = this: @ts_files/52.ts: %dflt
      TAG = 'ImageUtil'
      MAX_BIT = 30
      BIT_SIXTEEN = 16
      BIT_EIGHT = 8
      BIT_FOUR = 4
      BIT_TWO = 2
      BIT_ONE = 1
      return"];
}
subgraph "cluster_@ts_files/52.ts: %dflt.computeSampleSize(number, number, number, number)" {
  label="@ts_files/52.ts: %dflt.computeSampleSize(number, number, number, number)";
  Node66380 [label="id:0
      width = parameter0: number
      height = parameter1: number
      minSideLength = parameter2: number
      maxNumOfPixels = parameter3: number
      this = this: @ts_files/52.ts: %dflt
      %0 = width === 0
      %1 = height === 0
      %2 = %0 || %1
      %3 = minSideLength === 0
      %4 = %2 || %3
      %5 = maxNumOfPixels === 0
      %6 = %4 || %5
      if %6 != false"];
  Node66381 [label="id:1
      return 2"];
  Node66382 [label="id:2
      initialSize = staticinvoke <@ts_files/52.ts: %dflt.computeInitialSampleSize(number, number, number, number)>(width, height, minSideLength, maxNumOfPixels)
      %7 = 'initialSize:  ' + initialSize
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %7)
      if initialSize <= 8
      %8 = staticinvoke <@ts_files/52.ts: %dflt.nextPowerOf2(number)>(initialSize)
      %9 = initialSize + 8
      %10 = %9 - 1
      %11 = %10 / 8
      %12 = instanceinvoke Math.<@%unk/%unk: .floor()>(%11)
      %8 = %12 * 8
      return %8"];
  Node66380 -> Node66381;
  Node66380 -> Node66382;
}
subgraph "cluster_@ts_files/52.ts: %dflt.computeInitialSampleSize(number, number, number, number)" {
  label="@ts_files/52.ts: %dflt.computeInitialSampleSize(number, number, number, number)";
  Node73520 [label="id:0
      width = parameter0: number
      height = parameter1: number
      minSideLength = parameter2: number
      maxNumOfPixels = parameter3: number
      this = this: @ts_files/52.ts: %dflt
      %0 = -1
      %1 = maxNumOfPixels === %0
      %2 = -1
      %3 = minSideLength === %2
      %4 = %1 && %3
      if %4 != false"];
  Node73521 [label="id:1
      return 1"];
  Node73522 [label="id:2
      %5 = -1
      if maxNumOfPixels === %5
      %6 = 1
      %7 = width * height
      %8 = %7 / maxNumOfPixels
      %9 = instanceinvoke Math.<@%unk/%unk: .sqrt()>(%8)
      %6 = instanceinvoke Math.<@%unk/%unk: .ceil()>(%9)
      lowerBound = %6
      %10 = 'lowerBound: ' + lowerBound
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %10)
      %11 = -1
      if minSideLength === %11"];
  Node73523 [label="id:3
      return lowerBound"];
  Node73524 [label="id:4
      %12 = width / minSideLength
      %13 = height / minSideLength
      sampleSize = instanceinvoke Math.<@%unk/%unk: .min()>(%12, %13)
      %14 = instanceinvoke Math.<@%unk/%unk: .max()>(sampleSize, lowerBound)
      return %14"];
  Node73520 -> Node73521;
  Node73520 -> Node73522;
  Node73522 -> Node73523;
  Node73522 -> Node73524;
}
subgraph "cluster_@ts_files/52.ts: %dflt.nextPowerOf2(number)" {
  label="@ts_files/52.ts: %dflt.nextPowerOf2(number)";
  Node38800 [label="id:0
      value = parameter0: number
      this = this: @ts_files/52.ts: %dflt
      useValue = value
      %0 = useValue <= 0
      %1 = 1 << MAX_BIT
      %2 = useValue > %1
      %3 = %0 || %2
      if %3 != false"];
  Node38801 [label="id:1
      useValue = useValue - 1
      useValue = useValue | useValue >> BIT_SIXTEEN
      useValue = useValue | useValue >> BIT_EIGHT
      useValue = useValue | useValue >> BIT_FOUR
      useValue = useValue | useValue >> BIT_TWO
      useValue = useValue | useValue >> BIT_ONE
      %4 = 'nextPowerOf2:' + useValue
      instanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)
      %5 = useValue + 1
      return %5"];
  Node38800 -> Node38801;
}
}
