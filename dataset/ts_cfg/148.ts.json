{
  "type": "file",
  "name": "148.ts",
  "label": "148.ts",
  "start_line": -1,
  "end_line": 302,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 302,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 302,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/148.ts: %dflt\nplaceholderDateComponentValue = -9999\nreturn",
              "start_line": 1,
              "end_line": 302,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "scheduleNotificationAsync",
          "label": "scheduleNotificationAsync",
          "start_line": 1,
          "end_line": 18,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "request = parameter0: NotificationRequestInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = NotificationScheduler.<@%unk/%unk: .scheduleNotificationAsync>\n%1 = !%0\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: UnavailabilityError\ninstanceinvoke %2.<@%unk/%unk: UnavailabilityError.constructor()>('Notifications', 'scheduleNotificationAsync')\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = request.<@%unk/%unk: .identifier>\n%4 = instanceinvoke uuid.<@%unk/%unk: .v4()>()\n%5 = %3 ?? %4\n%6 = request.<@%unk/%unk: .content>\n%7 = request.<@%unk/%unk: .trigger>\n%8 = staticinvoke <@ts_files/148.ts: %dflt.parseTrigger(NotificationTriggerInput)>(%7)\n%9 = instanceinvoke NotificationScheduler.<@%unk/%unk: .scheduleNotificationAsync()>(%5, %6, %8)\nreturn await %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {\n  if (!NotificationScheduler.scheduleNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');\n  }\n  return await NotificationScheduler.scheduleNotificationAsync(\n    request.identifier ?? uuid.v4(),\n    request.content,\n    parseTrigger(request.trigger)\n  );\n}"
        },
        {
          "type": "function",
          "name": "parseTrigger",
          "label": "parseTrigger",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "userFacingTrigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\nif userFacingTrigger === null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return null",
                  "start_line": 35,
                  "end_line": 35,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if userFacingTrigger === undefined",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = new @%unk/%unk: TypeError\ninstanceinvoke %0.<@%unk/%unk: TypeError.constructor()>('Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.')\nthrow %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "dateTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseDateTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif dateTrigger != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return dateTrigger",
                              "start_line": 44,
                              "end_line": 44,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "calendarTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseCalendarTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif calendarTrigger != 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return calendarTrigger",
                                  "start_line": 48,
                                  "end_line": 48,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "dailyTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseDailyTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif dailyTrigger != 0",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return dailyTrigger",
                                      "start_line": 52,
                                      "end_line": 52,
                                      "successors": []
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "weeklyTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseWeeklyTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif weeklyTrigger != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "return weeklyTrigger",
                                          "start_line": 56,
                                          "end_line": 56,
                                          "successors": []
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "monthlyTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseMonthlyTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif monthlyTrigger != 0",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "return monthlyTrigger",
                                              "start_line": 60,
                                              "end_line": 60,
                                              "successors": []
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "yearlyTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseYearlyTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif yearlyTrigger != 0",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return yearlyTrigger",
                                                  "start_line": 64,
                                                  "end_line": 64,
                                                  "successors": []
                                                },
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "timeIntervalTrigger = staticinvoke <@ts_files/148.ts: %dflt.parseTimeIntervalTrigger(NotificationTriggerInput)>(userFacingTrigger)\nif timeIntervalTrigger != 0",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "return timeIntervalTrigger",
                                                      "start_line": 68,
                                                      "end_line": 68,
                                                      "successors": []
                                                    },
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%1 = new @ts_files/148.ts: %AC$%dflt$parseTrigger$0\ninstanceinvoke %1.<@ts_files/148.ts: %AC$%dflt$parseTrigger$0.constructor()>()\n%2 = instanceinvoke Platform.<@%unk/%unk: .select()>(%1)\nreturn %2",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {\n  if (userFacingTrigger === null) {\n    return null;\n  }\n  if (userFacingTrigger === undefined) {\n    throw new TypeError(\n      'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n    );\n  }\n  const dateTrigger = parseDateTrigger(userFacingTrigger);\n  if (dateTrigger) {\n    return dateTrigger;\n  }\n  const calendarTrigger = parseCalendarTrigger(userFacingTrigger);\n  if (calendarTrigger) {\n    return calendarTrigger;\n  }\n  const dailyTrigger = parseDailyTrigger(userFacingTrigger);\n  if (dailyTrigger) {\n    return dailyTrigger;\n  }\n  const weeklyTrigger = parseWeeklyTrigger(userFacingTrigger);\n  if (weeklyTrigger) {\n    return weeklyTrigger;\n  }\n  const monthlyTrigger = parseMonthlyTrigger(userFacingTrigger);\n  if (monthlyTrigger) {\n    return monthlyTrigger;\n  }\n  const yearlyTrigger = parseYearlyTrigger(userFacingTrigger);\n  if (yearlyTrigger) {\n    return yearlyTrigger;\n  }\n  const timeIntervalTrigger = parseTimeIntervalTrigger(userFacingTrigger);\n  if (timeIntervalTrigger) {\n    return timeIntervalTrigger;\n  }\n  return Platform.select({\n    default: null, // There's no notion of channels on platforms other than Android.\n    android: {\n      type: 'channel',\n      channelId:\n        typeof userFacingTrigger === 'object' &&\n        userFacingTrigger !== null &&\n        !(userFacingTrigger instanceof Date)\n          ? userFacingTrigger?.channelId\n          : undefined,\n    },\n  });\n}"
        },
        {
          "type": "function",
          "name": "parseCalendarTrigger",
          "label": "parseCalendarTrigger",
          "start_line": 1,
          "end_line": 83,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .CALENDAR>\n%6 = %4 === %5\n%7 = %3 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = trigger\nrepeats = %8.<@%unk/%unk: .repeats>\ncalendarTrigger = %8.<@%unk/%unk: .calendarTrigger>\n%9 = new @ts_files/148.ts: %AC$%dflt$parseCalendarTrigger$2\ninstanceinvoke %9.<@ts_files/148.ts: %AC$%dflt$parseCalendarTrigger$2.constructor()>()\nreturn %9",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseCalendarTrigger(\n  trigger: NotificationTriggerInput\n): NativeCalendarTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.CALENDAR\n  ) {\n    const { repeats, ...calendarTrigger } = trigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "parseDateTrigger",
          "label": "parseDateTrigger",
          "start_line": 1,
          "end_line": 97,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = typeof trigger === 'number'\n%1 = trigger instanceof Date || %0\nif %1 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @ts_files/148.ts: %AC$%dflt$parseDateTrigger$3\ninstanceinvoke %2.<@ts_files/148.ts: %AC$%dflt$parseDateTrigger$3.constructor()>()\nreturn %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = typeof trigger === 'object'\n%4 = trigger !== null\n%5 = %3 && %4\n%6 = %5 && undefined\n%7 = trigger.<@%unk/%unk: .type>\n%8 = SchedulableTriggerInputTypes.<@%unk/%unk: .DATE>\n%9 = %7 === %8\n%10 = %6 && %9\n%11 = %10 && undefined\n%12 = trigger.<@%unk/%unk: .date>\n%13 = %11 && %12 instanceof Date\nif %13 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%14 = new @ts_files/148.ts: %AC$%dflt$parseDateTrigger$4\ninstanceinvoke %14.<@ts_files/148.ts: %AC$%dflt$parseDateTrigger$4.constructor()>()\nresult = %14\n%15 = trigger.<@%unk/%unk: .channelId>\nif %15 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%16 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseDateTrigger$4.channelId> = %16",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return result",
                              "start_line": 115,
                              "end_line": 235,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return undefined",
                      "start_line": 95,
                      "end_line": 237,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseDateTrigger(trigger: NotificationTriggerInput): NativeDateTriggerInput | undefined {\n  if (trigger instanceof Date || typeof trigger === 'number') {\n    return { type: 'date', timestamp: toTimestamp(trigger) };\n  } else if (\n    typeof trigger === 'object' &&\n    trigger !== null &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DATE &&\n    'date' in trigger &&\n    trigger.date instanceof Date\n  ) {\n    const result: NativeDateTriggerInput = {\n      type: 'date',\n      timestamp: toTimestamp(trigger.date),\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  } else {\n    return undefined;\n  }\n}"
        },
        {
          "type": "function",
          "name": "toTimestamp",
          "label": "toTimestamp",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "date = parameter0: number|Date\nthis = this: @ts_files/148.ts: %dflt\nif date instanceof Date != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke date.<@%unk/%unk: .getTime()>()\nreturn %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return date",
                  "start_line": 44,
                  "end_line": 124,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function toTimestamp(date: number | Date) {\n  if (date instanceof Date) {\n    return date.getTime();\n  }\n  return date;\n}"
        },
        {
          "type": "function",
          "name": "parseDailyTrigger",
          "label": "parseDailyTrigger",
          "start_line": 1,
          "end_line": 126,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .DAILY>\n%6 = %4 === %5\n%7 = %3 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = newarray (string)[2]\n%8[0] = 'hour'\n%8[1] = 'minute'\nstaticinvoke <@ts_files/148.ts: %dflt.validateDateComponentsInTrigger(NonNullable<NotificationTriggerInput>, TypeOperator)>(trigger, %8)\n%9 = new @ts_files/148.ts: %AC$%dflt$parseDailyTrigger$5\ninstanceinvoke %9.<@ts_files/148.ts: %AC$%dflt$parseDailyTrigger$5.constructor()>()\nresult = %9\n%10 = trigger.<@%unk/%unk: .channelId>\nif %10 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseDailyTrigger$5.channelId> = %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return result",
                          "start_line": 115,
                          "end_line": 235,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseDailyTrigger(trigger: NotificationTriggerInput): NativeDailyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DAILY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['hour', 'minute']);\n    const result: NativeDailyTriggerInput = {\n      type: 'daily',\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "parseWeeklyTrigger",
          "label": "parseWeeklyTrigger",
          "start_line": 1,
          "end_line": 146,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .WEEKLY>\n%6 = %4 === %5\n%7 = %3 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = newarray (string)[3]\n%8[0] = 'weekday'\n%8[1] = 'hour'\n%8[2] = 'minute'\nstaticinvoke <@ts_files/148.ts: %dflt.validateDateComponentsInTrigger(NonNullable<NotificationTriggerInput>, TypeOperator)>(trigger, %8)\n%9 = new @ts_files/148.ts: %AC$%dflt$parseWeeklyTrigger$6\ninstanceinvoke %9.<@ts_files/148.ts: %AC$%dflt$parseWeeklyTrigger$6.constructor()>()\nresult = %9\n%10 = trigger.<@%unk/%unk: .channelId>\nif %10 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseWeeklyTrigger$6.channelId> = %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return result",
                          "start_line": 115,
                          "end_line": 235,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseWeeklyTrigger(\n  trigger: NotificationTriggerInput\n): NativeWeeklyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.WEEKLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['weekday', 'hour', 'minute']);\n    const result: NativeWeeklyTriggerInput = {\n      type: 'weekly',\n      weekday: trigger.weekday ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "parseMonthlyTrigger",
          "label": "parseMonthlyTrigger",
          "start_line": 1,
          "end_line": 169,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .MONTHLY>\n%6 = %4 === %5\n%7 = %3 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = newarray (string)[3]\n%8[0] = 'day'\n%8[1] = 'hour'\n%8[2] = 'minute'\nstaticinvoke <@ts_files/148.ts: %dflt.validateDateComponentsInTrigger(NonNullable<NotificationTriggerInput>, TypeOperator)>(trigger, %8)\n%9 = new @ts_files/148.ts: %AC$%dflt$parseMonthlyTrigger$7\ninstanceinvoke %9.<@ts_files/148.ts: %AC$%dflt$parseMonthlyTrigger$7.constructor()>()\nresult = %9\n%10 = trigger.<@%unk/%unk: .channelId>\nif %10 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseMonthlyTrigger$7.channelId> = %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return result",
                          "start_line": 115,
                          "end_line": 235,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseMonthlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeMonthlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.MONTHLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['day', 'hour', 'minute']);\n    const result: NativeMonthlyTriggerInput = {\n      type: 'monthly',\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "parseYearlyTrigger",
          "label": "parseYearlyTrigger",
          "start_line": 1,
          "end_line": 192,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .YEARLY>\n%6 = %4 === %5\n%7 = %3 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = newarray (string)[4]\n%8[0] = 'month'\n%8[1] = 'day'\n%8[2] = 'hour'\n%8[3] = 'minute'\nstaticinvoke <@ts_files/148.ts: %dflt.validateDateComponentsInTrigger(NonNullable<NotificationTriggerInput>, TypeOperator)>(trigger, %8)\n%9 = new @ts_files/148.ts: %AC$%dflt$parseYearlyTrigger$8\ninstanceinvoke %9.<@ts_files/148.ts: %AC$%dflt$parseYearlyTrigger$8.constructor()>()\nresult = %9\n%10 = trigger.<@%unk/%unk: .channelId>\nif %10 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%11 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseYearlyTrigger$8.channelId> = %11",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return result",
                          "start_line": 115,
                          "end_line": 235,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseYearlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeYearlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.YEARLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['month', 'day', 'hour', 'minute']);\n    const result: NativeYearlyTriggerInput = {\n      type: 'yearly',\n      month: trigger.month ?? placeholderDateComponentValue,\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "parseTimeIntervalTrigger",
          "label": "parseTimeIntervalTrigger",
          "start_line": 1,
          "end_line": 216,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NotificationTriggerInput\nthis = this: @ts_files/148.ts: %dflt\n%0 = trigger !== null\n%1 = typeof trigger === 'object'\n%2 = %0 && %1\n%3 = %2 && undefined\n%4 = trigger.<@%unk/%unk: .type>\n%5 = SchedulableTriggerInputTypes.<@%unk/%unk: .TIME_INTERVAL>\n%6 = %4 === %5\n%7 = %3 && %6\n%8 = %7 && undefined\n%9 = typeof trigger.<@%unk/%unk: .seconds> === 'number'\n%10 = %8 && %9\nif %10 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%11 = new @ts_files/148.ts: %AC$%dflt$parseTimeIntervalTrigger$9\ninstanceinvoke %11.<@ts_files/148.ts: %AC$%dflt$parseTimeIntervalTrigger$9.constructor()>()\nresult = %11\n%12 = trigger.<@%unk/%unk: .channelId>\nif %12 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%13 = trigger.<@%unk/%unk: .channelId>\nresult.<@ts_files/148.ts: %AC$%dflt$parseTimeIntervalTrigger$9.channelId> = %13",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return result",
                          "start_line": 115,
                          "end_line": 235,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return undefined",
                  "start_line": 95,
                  "end_line": 237,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function parseTimeIntervalTrigger(\n  trigger: NotificationTriggerInput\n): NativeTimeIntervalTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.TIME_INTERVAL &&\n    'seconds' in trigger &&\n    typeof trigger.seconds === 'number'\n  ) {\n    const result: NativeTimeIntervalTriggerInput = {\n      type: 'timeInterval',\n      seconds: trigger.seconds,\n      repeats: trigger.repeats ?? false,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}"
        },
        {
          "type": "function",
          "name": "validateDateComponentsInTrigger",
          "label": "validateDateComponentsInTrigger",
          "start_line": 1,
          "end_line": 302,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "trigger = parameter0: NonNullable<NotificationTriggerInput>\ncomponents = parameter1: TypeOperator\nthis = this: @ts_files/148.ts: %dflt\nanyTriggerType = <any>trigger\ninstanceinvoke components.<@%unk/%unk: .forEach()>(%AM0$validateDateComponentsInTrigger)\nreturn",
              "start_line": 1,
              "end_line": 302,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {\n  const anyTriggerType = trigger as any;\n  components.forEach((component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const day = anyTriggerType.day;\n        const month =\n          anyTriggerType.month !== undefined ? anyTriggerType.month : new Date().getMonth();\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  });\n}"
        },
        {
          "type": "function",
          "name": "daysInMonth",
          "label": "daysInMonth",
          "start_line": 1,
          "end_line": 301,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "month = parameter0: number\nyear = parameter1: number\nthis = this: @ts_files/148.ts: %dflt\n%0 = new @%unk/%unk: Date\n%1 = year ?? 2000\n%2 = month + 1\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>(%1, %2, 0)\n%3 = instanceinvoke %0.<@%unk/%unk: .getDate()>()\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function daysInMonth(month: number = 0, year?: number) {\n  return new Date(year ?? 2000, month + 1, 0).getDate();\n}"
        },
        {
          "type": "function",
          "name": "%AM0$validateDateComponentsInTrigger",
          "label": "%AM0$validateDateComponentsInTrigger",
          "start_line": 1,
          "end_line": 246,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [anyTriggerType]\ncomponent = parameter1: unknown\nanyTriggerType = %closures0.anyTriggerType\nthis = this: @ts_files/148.ts: %dflt\n%0 = !undefined\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @%unk/%unk: TypeError\n%2 = 'The ' + component\n%3 = %2 + ' parameter needs to be present'\ninstanceinvoke %1.<@%unk/%unk: TypeError.constructor()>(%3)\nthrow %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if typeof anyTriggerType.<@%unk/%unk: .component> !== 'number'",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = new @%unk/%unk: TypeError\n%5 = 'The ' + component\n%6 = %5 + ' parameter should be a number'\ninstanceinvoke %4.<@%unk/%unk: TypeError.constructor()>(%6)\nthrow %4",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if component == 'month'",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%7 = anyTriggerType\nmonth = %7.<@%unk/%unk: .month>\n%8 = month < 0\n%9 = month > 11\n%10 = %8 || %9\nif %10 != false",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%11 = new @%unk/%unk: RangeError\n%12 = 'The month parameter needs to be between 0 and 11. Found: ' + month\ninstanceinvoke %11.<@%unk/%unk: RangeError.constructor()>(%12)\nthrow %11",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "return",
                                          "start_line": 24,
                                          "end_line": 302,
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "if component == 'day'",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "if component == 'weekday'",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%25 = anyTriggerType\nweekday = %25.<@%unk/%unk: .weekday>\n%26 = weekday < 1\n%27 = weekday > 7\n%28 = %26 || %27\nif %28 != false",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%29 = new @%unk/%unk: RangeError\n%30 = 'The weekday parameter needs to be between 1 and 7. Found: ' + weekday\ninstanceinvoke %29.<@%unk/%unk: RangeError.constructor()>(%30)\nthrow %29",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "if component == 'hour'",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%31 = anyTriggerType\nhour = %31.<@%unk/%unk: .hour>\n%32 = hour < 0\n%33 = hour > 23\n%34 = %32 || %33\nif %34 != false",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%35 = new @%unk/%unk: RangeError\n%36 = 'The hour parameter needs to be between 0 and 23. Found: ' + hour\ninstanceinvoke %35.<@%unk/%unk: RangeError.constructor()>(%36)\nthrow %35",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "if component == 'minute'",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%37 = anyTriggerType\nminute = %37.<@%unk/%unk: .minute>\n%38 = minute < 0\n%39 = minute > 59\n%40 = %38 || %39\nif %40 != false",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%41 = new @%unk/%unk: RangeError\n%42 = 'The minute parameter needs to be between 0 and 59. Found: ' + minute\ninstanceinvoke %41.<@%unk/%unk: RangeError.constructor()>(%42)\nthrow %41",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "day = anyTriggerType.<@%unk/%unk: .day>\n%13 = anyTriggerType.<@%unk/%unk: .month>\nif %13 !== undefined",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "month = anyTriggerType.<@%unk/%unk: .month>",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "daysInGivenMonth = staticinvoke <@ts_files/148.ts: %dflt.daysInMonth(number, number)>(month)\n%16 = day < 1\n%17 = day > daysInGivenMonth\n%18 = %16 || %17\nif %18 != false",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "%19 = new @%unk/%unk: RangeError\n%20 = 'The day parameter for month ' + month\n%21 = %20 + ' must be between 1 and '\n%22 = %21 + daysInGivenMonth\n%23 = %22 + '. Found: '\n%24 = %23 + day\ninstanceinvoke %19.<@%unk/%unk: RangeError.constructor()>(%24)\nthrow %19",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "blockRef",
                                                  "label": "(RepeatedBlock)"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%15 = new @%unk/%unk: Date\ninstanceinvoke %15.<@%unk/%unk: Date.constructor()>()\nmonth = instanceinvoke %15.<@%unk/%unk: .getMonth()>()",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const day = anyTriggerType.day;\n        const month =\n          anyTriggerType.month !== undefined ? anyTriggerType.month : new Date().getMonth();\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$parseTrigger$0$%instInit$1",
      "label": "%AC$%AC$%dflt$parseTrigger$0$%instInit$1",
      "start_line": 72,
      "end_line": 72,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'channel',\n      channelId:\n        typeof userFacingTrigger === 'object' &&\n        userFacingTrigger !== null &&\n        !(userFacingTrigger instanceof Date)\n          ? userFacingTrigger?.channelId\n          : undefined,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseTrigger$0",
      "label": "%AC$%dflt$parseTrigger$0",
      "start_line": 70,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    default: null, // There's no notion of channels on platforms other than Android.\n    android: {\n      type: 'channel',\n      channelId:\n        typeof userFacingTrigger === 'object' &&\n        userFacingTrigger !== null &&\n        !(userFacingTrigger instanceof Date)\n          ? userFacingTrigger?.channelId\n          : undefined,\n    },\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseCalendarTrigger$2",
      "label": "%AC$%dflt$parseCalendarTrigger$2",
      "start_line": 93,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type: 'calendar', value: calendarTrigger, repeats }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseDateTrigger$3",
      "label": "%AC$%dflt$parseDateTrigger$3",
      "start_line": 99,
      "end_line": 99,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ type: 'date', timestamp: toTimestamp(trigger) }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseDateTrigger$4",
      "label": "%AC$%dflt$parseDateTrigger$4",
      "start_line": 108,
      "end_line": 108,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'date',\n      timestamp: toTimestamp(trigger.date),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseDailyTrigger$5",
      "label": "%AC$%dflt$parseDailyTrigger$5",
      "start_line": 134,
      "end_line": 134,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'daily',\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseWeeklyTrigger$6",
      "label": "%AC$%dflt$parseWeeklyTrigger$6",
      "start_line": 156,
      "end_line": 156,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'weekly',\n      weekday: trigger.weekday ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseMonthlyTrigger$7",
      "label": "%AC$%dflt$parseMonthlyTrigger$7",
      "start_line": 179,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'monthly',\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseYearlyTrigger$8",
      "label": "%AC$%dflt$parseYearlyTrigger$8",
      "start_line": 202,
      "end_line": 202,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'yearly',\n      month: trigger.month ?? placeholderDateComponentValue,\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseTimeIntervalTrigger$9",
      "label": "%AC$%dflt$parseTimeIntervalTrigger$9",
      "start_line": 227,
      "end_line": 227,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      type: 'timeInterval',\n      seconds: trigger.seconds,\n      repeats: trigger.repeats ?? false,\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { Platform, UnavailabilityError, uuid } from 'expo-modules-core';\nimport NotificationScheduler from './NotificationScheduler';\nimport {\n  NativeCalendarTriggerInput,\n  NativeDailyTriggerInput,\n  NativeDateTriggerInput,\n  NativeNotificationTriggerInput,\n  NativeTimeIntervalTriggerInput,\n  NativeWeeklyTriggerInput,\n  NativeMonthlyTriggerInput,\n  NativeYearlyTriggerInput,\n} from './NotificationScheduler.types';\nimport {\n  NotificationRequestInput,\n  NotificationTriggerInput,\n  SchedulableTriggerInputTypes,\n} from './Notifications.types';\nexport default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {\n  if (!NotificationScheduler.scheduleNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');\n  }\n  return await NotificationScheduler.scheduleNotificationAsync(\n    request.identifier ?? uuid.v4(),\n    request.content,\n    parseTrigger(request.trigger)\n  );\n}\ntype ValidTriggerDateComponents = 'month' | 'day' | 'weekday' | 'hour' | 'minute';\nexport function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {\n  if (userFacingTrigger === null) {\n    return null;\n  }\n  if (userFacingTrigger === undefined) {\n    throw new TypeError(\n      'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n    );\n  }\n  const dateTrigger = parseDateTrigger(userFacingTrigger);\n  if (dateTrigger) {\n    return dateTrigger;\n  }\n  const calendarTrigger = parseCalendarTrigger(userFacingTrigger);\n  if (calendarTrigger) {\n    return calendarTrigger;\n  }\n  const dailyTrigger = parseDailyTrigger(userFacingTrigger);\n  if (dailyTrigger) {\n    return dailyTrigger;\n  }\n  const weeklyTrigger = parseWeeklyTrigger(userFacingTrigger);\n  if (weeklyTrigger) {\n    return weeklyTrigger;\n  }\n  const monthlyTrigger = parseMonthlyTrigger(userFacingTrigger);\n  if (monthlyTrigger) {\n    return monthlyTrigger;\n  }\n  const yearlyTrigger = parseYearlyTrigger(userFacingTrigger);\n  if (yearlyTrigger) {\n    return yearlyTrigger;\n  }\n  const timeIntervalTrigger = parseTimeIntervalTrigger(userFacingTrigger);\n  if (timeIntervalTrigger) {\n    return timeIntervalTrigger;\n  }\n  return Platform.select({\n    default: null, // There's no notion of channels on platforms other than Android.\n    android: {\n      type: 'channel',\n      channelId:\n        typeof userFacingTrigger === 'object' &&\n        userFacingTrigger !== null &&\n        !(userFacingTrigger instanceof Date)\n          ? userFacingTrigger?.channelId\n          : undefined,\n    },\n  });\n}\nfunction parseCalendarTrigger(\n  trigger: NotificationTriggerInput\n): NativeCalendarTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.CALENDAR\n  ) {\n    const { repeats, ...calendarTrigger } = trigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  }\n  return undefined;\n}\nfunction parseDateTrigger(trigger: NotificationTriggerInput): NativeDateTriggerInput | undefined {\n  if (trigger instanceof Date || typeof trigger === 'number') {\n    return { type: 'date', timestamp: toTimestamp(trigger) };\n  } else if (\n    typeof trigger === 'object' &&\n    trigger !== null &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DATE &&\n    'date' in trigger &&\n    trigger.date instanceof Date\n  ) {\n    const result: NativeDateTriggerInput = {\n      type: 'date',\n      timestamp: toTimestamp(trigger.date),\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  } else {\n    return undefined;\n  }\n}\nfunction toTimestamp(date: number | Date) {\n  if (date instanceof Date) {\n    return date.getTime();\n  }\n  return date;\n}\nfunction parseDailyTrigger(trigger: NotificationTriggerInput): NativeDailyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DAILY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['hour', 'minute']);\n    const result: NativeDailyTriggerInput = {\n      type: 'daily',\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}\nfunction parseWeeklyTrigger(\n  trigger: NotificationTriggerInput\n): NativeWeeklyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.WEEKLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['weekday', 'hour', 'minute']);\n    const result: NativeWeeklyTriggerInput = {\n      type: 'weekly',\n      weekday: trigger.weekday ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}\nfunction parseMonthlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeMonthlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.MONTHLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['day', 'hour', 'minute']);\n    const result: NativeMonthlyTriggerInput = {\n      type: 'monthly',\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}\nfunction parseYearlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeYearlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.YEARLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['month', 'day', 'hour', 'minute']);\n    const result: NativeYearlyTriggerInput = {\n      type: 'yearly',\n      month: trigger.month ?? placeholderDateComponentValue,\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}\nfunction parseTimeIntervalTrigger(\n  trigger: NotificationTriggerInput\n): NativeTimeIntervalTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.TIME_INTERVAL &&\n    'seconds' in trigger &&\n    typeof trigger.seconds === 'number'\n  ) {\n    const result: NativeTimeIntervalTriggerInput = {\n      type: 'timeInterval',\n      seconds: trigger.seconds,\n      repeats: trigger.repeats ?? false,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}\n// Needed only to satisfy Typescript types for validated date components\nconst placeholderDateComponentValue = -9999;\nfunction validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {\n  const anyTriggerType = trigger as any;\n  components.forEach((component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const day = anyTriggerType.day;\n        const month =\n          anyTriggerType.month !== undefined ? anyTriggerType.month : new Date().getMonth();\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  });\n}\nfunction daysInMonth(month: number = 0, year?: number) {\n  return new Date(year ?? 2000, month + 1, 0).getDate();\n}"
}