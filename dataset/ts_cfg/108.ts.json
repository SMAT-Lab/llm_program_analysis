{
  "type": "file",
  "name": "108.ts",
  "label": "108.ts",
  "start_line": -1,
  "end_line": 67,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 49,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/108.ts: %dflt\nTAG = '[IdlServiceExtProxy]'\nDOMAIN_NUMBER = 65280\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "IdlServiceExtProxy",
      "label": "IdlServiceExtProxy",
      "start_line": 1,
      "end_line": 67,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/108.ts: IdlServiceExtProxy.%instInit()>()\nproxy = parameter0: unknown\nthis = this: @ts_files/108.ts: IdlServiceExtProxy\nthis.<@ts_files/108.ts: IdlServiceExtProxy.proxy> = proxy\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(proxy) {\n    this.proxy = proxy;\n  }"
        },
        {
          "type": "function",
          "name": "processData",
          "label": "processData",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: number\ncallback = parameter1: ProcessDataCallback\nthis = this: @ts_files/108.ts: IdlServiceExtProxy\n%0 = new @%unk/%unk: rpc.MessageOption\ninstanceinvoke %0.<@%unk/%unk: rpc.MessageOption.constructor()>()\noption = %0\n%1 = rpc.<@%unk/%unk: .MessageSequence>\ndataSequence = instanceinvoke %1.<@%unk/%unk: .create()>()\n%2 = rpc.<@%unk/%unk: .MessageSequence>\nreplySequence = instanceinvoke %2.<@%unk/%unk: .create()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke dataSequence.<@%unk/%unk: .writeInt()>(data)\n%3 = @ts_files/108.ts: IdlServiceExtProxy.[static]COMMAND_PROCESS_DATA\n%4 = this.<@ts_files/108.ts: IdlServiceExtProxy.proxy>\n%5 = instanceinvoke %4.<@%unk/%unk: .sendMessageRequest()>(%3, dataSequence, replySequence, option)\ninstanceinvoke %5.<@%unk/%unk: .then()>(%AM0$processData)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke dataSequence.<@%unk/%unk: .reclaim()>()\ninstanceinvoke replySequence.<@%unk/%unk: .reclaim()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 44,
                          "end_line": 49,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%6 = caughtexception: unknown\ninstanceinvoke dataSequence.<@%unk/%unk: .reclaim()>()\ninstanceinvoke replySequence.<@%unk/%unk: .reclaim()>()\nthrow %6",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }"
        },
        {
          "type": "function",
          "name": "insertDataToMap",
          "label": "insertDataToMap",
          "start_line": 1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\nval = parameter1: number\ncallback = parameter2: InsertDataToMapCallback\nthis = this: @ts_files/108.ts: IdlServiceExtProxy\n%0 = new @%unk/%unk: rpc.MessageOption\ninstanceinvoke %0.<@%unk/%unk: rpc.MessageOption.constructor()>()\noption = %0\n%1 = rpc.<@%unk/%unk: .MessageSequence>\ndataSequence = instanceinvoke %1.<@%unk/%unk: .create()>()\n%2 = rpc.<@%unk/%unk: .MessageSequence>\nreplySequence = instanceinvoke %2.<@%unk/%unk: .create()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke dataSequence.<@%unk/%unk: .writeString()>(key)\ninstanceinvoke dataSequence.<@%unk/%unk: .writeInt()>(val)\n%3 = @ts_files/108.ts: IdlServiceExtProxy.[static]COMMAND_INSERT_DATA_TO_MAP\n%4 = this.<@ts_files/108.ts: IdlServiceExtProxy.proxy>\n%5 = instanceinvoke %4.<@%unk/%unk: .sendMessageRequest()>(%3, dataSequence, replySequence, option)\ninstanceinvoke %5.<@%unk/%unk: .then()>(%AM1$insertDataToMap)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke dataSequence.<@%unk/%unk: .reclaim()>()\ninstanceinvoke replySequence.<@%unk/%unk: .reclaim()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 44,
                          "end_line": 49,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "%6 = caughtexception: unknown\ninstanceinvoke dataSequence.<@%unk/%unk: .reclaim()>()\ninstanceinvoke replySequence.<@%unk/%unk: .reclaim()>()\nthrow %6",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$processData",
          "label": "%AM0$processData",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [callback]\nresult = parameter1: unknown\ncallback = %closures0.callback\nthis = this: @ts_files/108.ts: IdlServiceExtProxy\n%0 = result.<@%unk/%unk: .errCode>\nif %0 === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = result.<@%unk/%unk: .reply>\nerrCodeVar = instanceinvoke %1.<@%unk/%unk: .readInt()>()\nif errCodeVar !== 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "returnValueVar = undefined\nstaticinvoke <@%unk/%unk: .callback()>(errCodeVar, returnValueVar)\nreturn",
                      "start_line": 44,
                      "end_line": 49,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = result.<@%unk/%unk: .reply>\nreturnValueVar = instanceinvoke %2.<@%unk/%unk: .readInt()>()\nstaticinvoke <@%unk/%unk: .callback()>(errCodeVar, returnValueVar)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 44,
                          "end_line": 49,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = result.<@%unk/%unk: .errCode>\n%4 = 'sendMessageRequest failed, errCode: ' + %3\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }"
        },
        {
          "type": "function",
          "name": "%AM1$insertDataToMap",
          "label": "%AM1$insertDataToMap",
          "start_line": 1,
          "end_line": 67,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [callback]\nresult = parameter1: unknown\ncallback = %closures0.callback\nthis = this: @ts_files/108.ts: IdlServiceExtProxy\n%0 = result.<@%unk/%unk: .errCode>\nif %0 === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = result.<@%unk/%unk: .reply>\nerrCodeVar = instanceinvoke %1.<@%unk/%unk: .readInt()>()\nstaticinvoke <@%unk/%unk: .callback()>(errCodeVar)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 44,
                      "end_line": 49,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = result.<@%unk/%unk: .errCode>\n%3 = 'sendMessageRequest failed, errCode: ' + %2\ninstanceinvoke hilog.<@%unk/%unk: .info()>(DOMAIN_NUMBER, TAG, %3)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  constructor(proxy) {\n    this.proxy = proxy;\n  };\n\n  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtProxy]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  constructor(proxy) {\n    this.proxy = proxy;\n  };\n\n  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n};\n\n"
}