{
  "type": "file",
  "name": "194.ts",
  "label": "194.ts",
  "start_line": -1,
  "end_line": 1893,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1879,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%1 = new @ts_files/194.ts: %AC$%dflt$%dflt$0\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%dflt$0.constructor()>()\n%2 = instanceinvoke proxyquire.<@%unk/%unk: .noCallThru()>()\n%0 = instanceinvoke %2.<@%unk/%unk: .load()>('../../../../../../../server/services/federation/application/room/receiver/RoomServiceReceiver', %1)\nFederationRoomServiceReceiver = %0.<@%unk/%unk: .FederationRoomServiceReceiver>\n%4 = new @ts_files/194.ts: %AC$%dflt$%dflt$2\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.constructor()>()\n%5 = instanceinvoke proxyquire.<@%unk/%unk: .noCallThru()>()\n%3 = instanceinvoke %5.<@%unk/%unk: .load()>('../../../../../../../server/services/federation/domain/FederatedUser', %4)\nFederatedUser = %3.<@%unk/%unk: .FederatedUser>\n%7 = new @ts_files/194.ts: %AC$%dflt$%dflt$4\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.constructor()>()\n%8 = instanceinvoke proxyquire.<@%unk/%unk: .noCallThru()>()\n%6 = instanceinvoke %8.<@%unk/%unk: .load()>('../../../../../../../server/services/federation/domain/FederatedRoom', %7)\nDirectMessageFederatedRoom = %6.<@%unk/%unk: .DirectMessageFederatedRoom>\nFederatedRoom = %6.<@%unk/%unk: .FederatedRoom>\nstaticinvoke <@%unk/%unk: .describe()>('Federation - Application - FederationRoomServiceReceiver', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @%unk/%unk: FederationRoomServiceReceiver\n%1 = <any>roomAdapter\n%2 = <any>userAdapter\n%3 = <any>messageAdapter\n%4 = <any>fileAdapter\n%5 = <any>settingsAdapter\n%6 = <any>notificationsAdapter\n%7 = <any>queueInstance\n%8 = <any>bridge\ninstanceinvoke %0.<@%unk/%unk: FederationRoomServiceReceiver.constructor()>(%1, %2, %3, %4, %5, %6, %7, %8)\nservice = %0\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tservice = new FederationRoomServiceReceiver(\n\t\t\troomAdapter as any,\n\t\t\tuserAdapter as any,\n\t\t\tmessageAdapter as any,\n\t\t\tfileAdapter as any,\n\t\t\tsettingsAdapter as any,\n\t\t\tnotificationsAdapter as any,\n\t\t\tqueueInstance as any,\n\t\t\tbridge as any,\n\t\t);\n\t}"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .reset()>()\n%1 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\ninstanceinvoke %1.<@%unk/%unk: .reset()>()\n%2 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\ninstanceinvoke %2.<@%unk/%unk: .reset()>()\n%3 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\ninstanceinvoke %3.<@%unk/%unk: .reset()>()\n%4 = roomAdapter.<@%unk/%unk: .updateRoomType>\ninstanceinvoke %4.<@%unk/%unk: .reset()>()\n%5 = roomAdapter.<@%unk/%unk: .updateRoomName>\ninstanceinvoke %5.<@%unk/%unk: .reset()>()\n%6 = roomAdapter.<@%unk/%unk: .updateFederatedRoomByInternalRoomId>\ninstanceinvoke %6.<@%unk/%unk: .reset()>()\n%7 = roomAdapter.<@%unk/%unk: .updateRoomTopic>\ninstanceinvoke %7.<@%unk/%unk: .reset()>()\n%8 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\ninstanceinvoke %8.<@%unk/%unk: .reset()>()\n%9 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %9.<@%unk/%unk: .reset()>()\n%10 = roomAdapter.<@%unk/%unk: .addUsersToRoomWhenJoinExternalPublicRoom>\ninstanceinvoke %10.<@%unk/%unk: .reset()>()\n%11 = roomAdapter.<@%unk/%unk: .getInternalRoomById>\ninstanceinvoke %11.<@%unk/%unk: .reset()>()\n%12 = roomAdapter.<@%unk/%unk: .addUserToRoom>\ninstanceinvoke %12.<@%unk/%unk: .reset()>()\n%13 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\ninstanceinvoke %13.<@%unk/%unk: .reset()>()\n%14 = roomAdapter.<@%unk/%unk: .updateDisplayRoomName>\ninstanceinvoke %14.<@%unk/%unk: .reset()>()\n%15 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %15.<@%unk/%unk: .reset()>()\n%16 = userAdapter.<@%unk/%unk: .createFederatedUser>\ninstanceinvoke %16.<@%unk/%unk: .reset()>()\n%17 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\ninstanceinvoke %17.<@%unk/%unk: .reset()>()\n%18 = userAdapter.<@%unk/%unk: .setAvatar>\ninstanceinvoke %18.<@%unk/%unk: .reset()>()\n%19 = userAdapter.<@%unk/%unk: .getInternalUserByUsername>\ninstanceinvoke %19.<@%unk/%unk: .reset()>()\n%20 = userAdapter.<@%unk/%unk: .updateRealName>\ninstanceinvoke %20.<@%unk/%unk: .reset()>()\n%21 = userAdapter.<@%unk/%unk: .getFederatedUsersByExternalIds>\ninstanceinvoke %21.<@%unk/%unk: .reset()>()\n%22 = messageAdapter.<@%unk/%unk: .sendMessage>\ninstanceinvoke %22.<@%unk/%unk: .reset()>()\n%23 = messageAdapter.<@%unk/%unk: .sendFileMessage>\ninstanceinvoke %23.<@%unk/%unk: .reset()>()\n%24 = messageAdapter.<@%unk/%unk: .deleteMessage>\ninstanceinvoke %24.<@%unk/%unk: .reset()>()\n%25 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %25.<@%unk/%unk: .reset()>()\n%26 = messageAdapter.<@%unk/%unk: .editMessage>\ninstanceinvoke %26.<@%unk/%unk: .reset()>()\n%27 = messageAdapter.<@%unk/%unk: .unreactToMessage>\ninstanceinvoke %27.<@%unk/%unk: .reset()>()\n%28 = messageAdapter.<@%unk/%unk: .findOneByFederationIdOnReactions>\ninstanceinvoke %28.<@%unk/%unk: .reset()>()\n%29 = messageAdapter.<@%unk/%unk: .sendQuoteFileMessage>\ninstanceinvoke %29.<@%unk/%unk: .reset()>()\n%30 = messageAdapter.<@%unk/%unk: .sendQuoteMessage>\ninstanceinvoke %30.<@%unk/%unk: .reset()>()\n%31 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\ninstanceinvoke %31.<@%unk/%unk: .reset()>()\n%32 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\ninstanceinvoke %32.<@%unk/%unk: .reset()>()\n%33 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\ninstanceinvoke %33.<@%unk/%unk: .reset()>()\n%34 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\ninstanceinvoke %34.<@%unk/%unk: .reset()>()\n%35 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %35.<@%unk/%unk: .reset()>()\n%36 = bridge.<@%unk/%unk: .joinRoom>\ninstanceinvoke %36.<@%unk/%unk: .reset()>()\n%37 = bridge.<@%unk/%unk: .getUserProfileInformation>\ninstanceinvoke %37.<@%unk/%unk: .reset()>()\n%38 = bridge.<@%unk/%unk: .getReadStreamForFileFromUrl>\ninstanceinvoke %38.<@%unk/%unk: .reset()>()\n%39 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %39.<@%unk/%unk: .reset()>()\n%40 = bridge.<@%unk/%unk: .getRoomHistoricalJoinEvents>\ninstanceinvoke %40.<@%unk/%unk: .reset()>()\n%41 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %41.<@%unk/%unk: .reset()>()\n%42 = queueInstance.<@%unk/%unk: .addToQueue>\ninstanceinvoke %42.<@%unk/%unk: .reset()>()\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\troomAdapter.getFederatedRoomByExternalId.reset();\n\t\troomAdapter.createFederatedRoom.reset();\n\t\troomAdapter.createFederatedRoomForDirectMessage.reset();\n\t\troomAdapter.removeDirectMessageRoom.reset();\n\t\troomAdapter.updateRoomType.reset();\n\t\troomAdapter.updateRoomName.reset();\n\t\troomAdapter.updateFederatedRoomByInternalRoomId.reset();\n\t\troomAdapter.updateRoomTopic.reset();\n\t\troomAdapter.removeUserFromRoom.reset();\n\t\troomAdapter.isUserAlreadyJoined.reset();\n\t\troomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.reset();\n\t\troomAdapter.getInternalRoomById.reset();\n\t\troomAdapter.addUserToRoom.reset();\n\t\troomAdapter.applyRoomRolesToUser.reset();\n\t\troomAdapter.updateDisplayRoomName.reset();\n\t\tuserAdapter.getFederatedUserByExternalId.reset();\n\t\tuserAdapter.createFederatedUser.reset();\n\t\tuserAdapter.updateFederationAvatar.reset();\n\t\tuserAdapter.setAvatar.reset();\n\t\tuserAdapter.getInternalUserByUsername.reset();\n\t\tuserAdapter.updateRealName.reset();\n\t\tuserAdapter.getFederatedUsersByExternalIds.reset();\n\t\tmessageAdapter.sendMessage.reset();\n\t\tmessageAdapter.sendFileMessage.reset();\n\t\tmessageAdapter.deleteMessage.reset();\n\t\tmessageAdapter.getMessageByFederationId.reset();\n\t\tmessageAdapter.editMessage.reset();\n\t\tmessageAdapter.unreactToMessage.reset();\n\t\tmessageAdapter.findOneByFederationIdOnReactions.reset();\n\t\tmessageAdapter.sendQuoteFileMessage.reset();\n\t\tmessageAdapter.sendQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadMessage.reset();\n\t\tmessageAdapter.sendThreadFileMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteFileMessage.reset();\n\t\tbridge.extractHomeserverOrigin.reset();\n\t\tbridge.joinRoom.reset();\n\t\tbridge.getUserProfileInformation.reset();\n\t\tbridge.getReadStreamForFileFromUrl.reset();\n\t\tbridge.getRoomData.reset();\n\t\tbridge.getRoomHistoricalJoinEvents.reset();\n\t\tfileAdapter.uploadFile.reset();\n\t\tqueueInstance.addToQueue.reset();\n\t}"
        },
        {
          "type": "function",
          "name": "%AM4$%AM3$%AM0",
          "label": "%AM4$%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$15\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$15.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$15>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$16\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$16.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM4$%AM3$%AM0$16>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onCreateRoom()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tawait service.onCreateRoom({} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM5$%AM3$%AM0",
          "label": "%AM5$%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM5$%AM3$%AM0$17\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM5$%AM3$%AM0$17.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM5$%AM3$%AM0$17>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onCreateRoom()>(%2)\n%4 = await %3\n%5 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM6$%AM3$%AM0",
          "label": "%AM6$%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM6$%AM3$%AM0$18\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM6$%AM3$%AM0$18.constructor()>()\n%2 = roomAdapter.<@%unk/%unk: .getInternalRoomById>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM6$%AM3$%AM0$19\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM6$%AM3$%AM0$19.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM6$%AM3$%AM0$19>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onCreateRoom()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .updateFederatedRoomByInternalRoomId>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\n%17 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'c' });\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM7$%AM3$%AM0",
          "label": "%AM7$%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = roomAdapter.<@%unk/%unk: .getInternalRoomById>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM7$%AM3$%AM0$20\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM7$%AM3$%AM0$20.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM7$%AM3$%AM0$20>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onCreateRoom()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .updateFederatedRoomByInternalRoomId>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM8$%AM3$%AM0",
          "label": "%AM8$%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM8$%AM3$%AM0$21\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM8$%AM3$%AM0$21.constructor()>()\n%2 = roomAdapter.<@%unk/%unk: .getInternalRoomById>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM8$%AM3$%AM0$22\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM8$%AM3$%AM0$22.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM8$%AM3$%AM0$22>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onCreateRoom()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .updateFederatedRoomByInternalRoomId>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>('internalRoomId', 'externalRoomId')\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\n%17 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'd' });\n\t\t\tawait service.onCreateRoom({\n\t\t\t\twasInternallyProgramaticallyCreated: true,\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.calledWith('internalRoomId', 'externalRoomId')).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT create users nor room if the room already exists', %AM4$%AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create users nor room if the room was created internally and programatically even if the room does not exists', %AM5$%AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the room if it was created internally and programatically but it is not a DM message and dont create the room', %AM6$%AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the room if it was created internally and programatically but it does not exists and dont create the room', %AM7$%AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should update the room if it was created internally and programatically but it is a DM message but it should NOT create a new DM Room(this is necessary due to a race condition on matrix events)', %AM8$%AM3$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tit('should NOT create users nor room if the room already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tawait service.onCreateRoom({} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create users nor room if the room was created internally and programatically even if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it is not a DM message and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'c' });\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it does not exists and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room if it was created internally and programatically but it is a DM message but it should NOT create a new DM Room(this is necessary due to a race condition on matrix events)', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'd' });\n\t\t\tawait service.onCreateRoom({\n\t\t\t\twasInternallyProgramaticallyCreated: true,\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.calledWith('internalRoomId', 'externalRoomId')).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM10$%AM9$%AM0",
          "label": "%AM10$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM10$%AM9$%AM0$24\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM10$%AM9$%AM0$24.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM10$%AM9$%AM0$24>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM11$%AM9$%AM0",
          "label": "%AM11$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM11$%AM9$%AM0$25\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM11$%AM9$%AM0$25.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM11$%AM9$%AM0$25>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.REMOTE } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM12$%AM9$%AM0",
          "label": "%AM12$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM12$%AM9$%AM0$26\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM12$%AM9$%AM0$26.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM12$%AM9$%AM0$26>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM13$%AM9$%AM0",
          "label": "%AM13$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM13$%AM9$%AM0$27\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM13$%AM9$%AM0$27.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM13$%AM9$%AM0$27>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM14$%AM9$%AM0",
          "label": "%AM14$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM14$%AM9$%AM0$28\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM14$%AM9$%AM0$28.constructor()>()\ninviter = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(user)\n%5 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %5.<@%unk/%unk: .returns()>('localDomain')\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM14$%AM9$%AM0$29\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM14$%AM9$%AM0$29.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM14$%AM9$%AM0$29>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%7)\n%9 = await %8\n%10 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%11 = instanceinvoke %10.<@%unk/%unk: .calledWith()>(inviter)\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst inviter = FederatedUser.createInstance('externalInviterId', {\n\t\t\t\tname: 'inviterUsernameOnly',\n\t\t\t\tusername: 'inviterUsernameOnly',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\tnormalizedInviterId: 'normalizedInviterId',\n\t\t\t\tinviterUsernameOnly: 'inviterUsernameOnly',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM15$%AM9$%AM0",
          "label": "%AM15$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM15$%AM9$%AM0$30\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM15$%AM9$%AM0$30.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM15$%AM9$%AM0$30>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM16$%AM9$%AM0",
          "label": "%AM16$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM16$%AM9$%AM0$31\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM16$%AM9$%AM0$31.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(invitee)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%4 = instanceinvoke %3.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(undefined)\n%5 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\n%6 = instanceinvoke %5.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %6.<@%unk/%unk: .returns()>('externalDomain')\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM16$%AM9$%AM0$32\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM16$%AM9$%AM0$32.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM16$%AM9$%AM0$32>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%8)\n%10 = await %9\n%11 = userAdapter.<@%unk/%unk: .createFederatedUser>\n%12 = instanceinvoke %11.<@%unk/%unk: .calledWith()>(invitee)\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onSecondCall().resolves(undefined);\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM17$%AM9$%AM0",
          "label": "%AM17$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM17$%AM9$%AM0$33\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM17$%AM9$%AM0$33.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM17$%AM9$%AM0$33>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = staticinvoke <@%unk/%unk: .expect()>(%4)\n%6 = %5.<@%unk/%unk: .to>\n%7 = %6.<@%unk/%unk: .be>\n%8 = instanceinvoke %7.<@%unk/%unk: .rejectedWith()>('Invitee or inviter user not found')\n%9 = await %8\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM18$%AM9$%AM0",
          "label": "%AM18$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM18$%AM9$%AM0$34\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM18$%AM9$%AM0$34.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM18$%AM9$%AM0$34>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = staticinvoke <@%unk/%unk: .expect()>(%4)\n%6 = %5.<@%unk/%unk: .to>\n%7 = %6.<@%unk/%unk: .be>\n%8 = instanceinvoke %7.<@%unk/%unk: .rejectedWith()>('Invitee or inviter user not found')\n%9 = await %8\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM19$%AM9$%AM0",
          "label": "%AM19$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(room)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM19$%AM9$%AM0$35\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM19$%AM9$%AM0$35.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM19$%AM9$%AM0$35>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%5)\n%7 = await %6\n%8 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%9 = %8.<@%unk/%unk: .called>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: undefined,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM20$%AM9$%AM0",
          "label": "%AM20$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\ninviter = user\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM20$%AM9$%AM0$36\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM20$%AM9$%AM0$36.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(inviter)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(invitee)\n%7 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %7.<@%unk/%unk: .returns()>('localDomain')\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM20$%AM9$%AM0$37\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM20$%AM9$%AM0$37.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM20$%AM9$%AM0$37>%8\n%10 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%9)\n%11 = await %10\n%12 = newarray (unknown)[2]\n%12[0] = inviter\n%12[1] = invitee\ncreatedRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', inviter, %12)\n%13 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(createdRoom)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = bridge.<@%unk/%unk: .joinRoom>\n%24 = instanceinvoke %23.<@%unk/%unk: .calledOnceWith()>('externalRoomId', 'externalInviteeId')\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM21$%AM9$%AM0",
          "label": "%AM21$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\ninviter = user\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM21$%AM9$%AM0$38\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM21$%AM9$%AM0$38.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(inviter)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(invitee)\n%7 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %7.<@%unk/%unk: .returns()>('externalDomain')\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM21$%AM9$%AM0$39\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM21$%AM9$%AM0$39.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM21$%AM9$%AM0$39>%8\n%10 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%9)\n%11 = await %10\n%12 = newarray (unknown)[2]\n%12[0] = inviter\n%12[1] = invitee\ncreatedRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', inviter, %12)\n%13 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(createdRoom)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = bridge.<@%unk/%unk: .joinRoom>\n%24 = %23.<@%unk/%unk: .called>\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM22$%AM9$%AM0",
          "label": "%AM22$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\ninviter = user\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM22$%AM9$%AM0$40\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM22$%AM9$%AM0$40.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(inviter)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(invitee)\n%7 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %7.<@%unk/%unk: .returns()>('localDomain')\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM22$%AM9$%AM0$41\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM22$%AM9$%AM0$41.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM22$%AM9$%AM0$41>%8\n%10 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%9)\n%11 = await %10\n%12 = newarray (unknown)[2]\n%12[0] = inviter\n%12[1] = invitee\ncreatedRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', inviter, %12)\n%13 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(createdRoom)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = bridge.<@%unk/%unk: .joinRoom>\n%24 = instanceinvoke %23.<@%unk/%unk: .calledOnceWith()>('externalRoomId', 'externalInviteeId')\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM23$%AM9$%AM0",
          "label": "%AM23$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\ninviter = user\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM23$%AM9$%AM0$43\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM23$%AM9$%AM0$43.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(inviter)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(invitee)\n%7 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %7.<@%unk/%unk: .returns()>('externalDomain')\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM23$%AM9$%AM0$44\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM23$%AM9$%AM0$44.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM23$%AM9$%AM0$44>%8\n%10 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%9)\n%11 = await %10\n%12 = newarray (unknown)[2]\n%12[0] = inviter\n%12[1] = invitee\ncreatedRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', inviter, %12)\n%13 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(createdRoom)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = bridge.<@%unk/%unk: .joinRoom>\n%24 = %23.<@%unk/%unk: .called>\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM25$%AM24$%AM9$%AM0",
          "label": "%AM25$%AM24$%AM9$%AM0",
          "start_line": 1,
          "end_line": 460,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: string\nthis = this: @ts_files/194.ts: %dflt\n%0 = queueInstance.<@%unk/%unk: .addToQueue>\n%1 = instanceinvoke %0.<@%unk/%unk: .calledWith()>(event)\n%2 = staticinvoke <@%unk/%unk: .expect()>(%1)\n%3 = %2.<@%unk/%unk: .to>\n%4 = %3.<@%unk/%unk: .be>\n%5 = %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.true>\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(event) => expect(queueInstance.addToQueue.calledWith(event)).to.be.true"
        },
        {
          "type": "function",
          "name": "%AM24$%AM9$%AM0",
          "label": "%AM24$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM24$%AM9$%AM0$46\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM24$%AM9$%AM0$46.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(invitee)\n%5 = newarray (string)[2]\n%5[0] = 'event1'\n%5[1] = 'event2'\n%6 = bridge.<@%unk/%unk: .getRoomHistoricalJoinEvents>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(%5)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM24$%AM9$%AM0$47\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM24$%AM9$%AM0$47.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM24$%AM9$%AM0$47>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%8)\n%10 = await %9\n%11 = RoomType.<@%unk/%unk: .CHANNEL>\ncreatedRoom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', invitee, %11)\n%12 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%13 = instanceinvoke %12.<@%unk/%unk: .calledWith()>(createdRoom)\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\n%17 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = bridge.<@%unk/%unk: .joinRoom>\n%23 = instanceinvoke %22.<@%unk/%unk: .calledWith()>('externalRoomId', 'externalInviteeId')\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\n%27 = newarray (string)[2]\n%27[0] = 'event1'\n%27[1] = 'event2'\ninstanceinvoke %27.<@%unk/%unk: .forEach()>(%AM25$%AM24$%AM9$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves(['event1', 'event2']);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\t['event1', 'event2'].forEach((event) => expect(queueInstance.addToQueue.calledWith(event)).to.be.true);\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM26$%AM9$%AM0",
          "label": "%AM26$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM26$%AM9$%AM0$48\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM26$%AM9$%AM0$48.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(invitee)\n%5 = newarray (any)[0]\n%6 = bridge.<@%unk/%unk: .getRoomHistoricalJoinEvents>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(%5)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM26$%AM9$%AM0$49\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM26$%AM9$%AM0$49.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM26$%AM9$%AM0$49>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%8)\n%10 = await %9\n%11 = RoomType.<@%unk/%unk: .CHANNEL>\ncreatedRoom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', invitee, %11)\n%12 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%13 = instanceinvoke %12.<@%unk/%unk: .calledWith()>(createdRoom)\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\n%17 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = bridge.<@%unk/%unk: .joinRoom>\n%23 = instanceinvoke %22.<@%unk/%unk: .calledWith()>('externalRoomId', 'externalInviteeId')\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\n%27 = queueInstance.<@%unk/%unk: .addToQueue>\n%28 = %27.<@%unk/%unk: .called>\n%29 = staticinvoke <@%unk/%unk: .expect()>(%28)\n%30 = %29.<@%unk/%unk: .to>\n%31 = %30.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\texpect(queueInstance.addToQueue.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM27$%AM9$%AM0",
          "label": "%AM27$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$50\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$50.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(room)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(invitee)\n%5 = newarray (any)[0]\n%6 = bridge.<@%unk/%unk: .getRoomHistoricalJoinEvents>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(%5)\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'onChangeRoomName')\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$51\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$51.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$51>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%8)\n%10 = await %9\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$52\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM27$%AM9$%AM0$52.constructor()>()\n%12 = instanceinvoke spy.<@%unk/%unk: .calledWith()>(%11)\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tspy.calledWith({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomName: 'externalRoomName',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\texternalSenderId: 'externalInviterId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM28$%AM9$%AM0",
          "label": "%AM28$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM28$%AM9$%AM0$53\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM28$%AM9$%AM0$53.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM28$%AM9$%AM0$53>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = bridge.<@%unk/%unk: .joinRoom>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM29$%AM9$%AM0",
          "label": "%AM29$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(true)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM29$%AM9$%AM0$54\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM29$%AM9$%AM0$54.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM29$%AM9$%AM0$54>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>(room, user, user)\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM30$%AM9$%AM0",
          "label": "%AM30$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(false)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM30$%AM9$%AM0$55\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM30$%AM9$%AM0$55.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM30$%AM9$%AM0$55>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM31$%AM9$%AM0",
          "label": "%AM31$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$56\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$56.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$56>%0\n%2 = newarray (unknown)[2]\n%2[0] = user\n%2[1] = user\ndmRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createWithInternalReference()>('externalRoomId', %1, %2)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(dmRoom)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(user)\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$57\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$57.constructor()>()\n%6 = <@ts_files/194.ts: %AC$%dflt$%AM31$%AM9$%AM0$57>%5\n%7 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%6)\n%8 = await %7\n%9 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\n%14 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%15 = %14.<@%unk/%unk: .called>\n%16 = staticinvoke <@%unk/%unk: .expect()>(%15)\n%17 = %16.<@%unk/%unk: .to>\n%18 = %17.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference(\n\t\t\t\t'externalRoomId',\n\t\t\t\t{ usernames: [user.getUsername() as string] } as any,\n\t\t\t\t[user, user],\n\t\t\t);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM32$%AM9$%AM0",
          "label": "%AM32$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$58\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$58.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$58>%0\n%2 = newarray (unknown)[2]\n%2[0] = user\n%2[1] = user\ndmRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createWithInternalReference()>('externalRoomId', %1, %2)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$59\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$59.constructor()>()\ninvitee = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviteeId', %3)\n%4 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(dmRoom)\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(invitee)\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$60\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$60.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM32$%AM9$%AM0$60>%8\n%10 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%9)\n%11 = await %10\n%12 = newarray (unknown)[3]\n%12[0] = user\n%12[1] = user\n%12[2] = invitee\ncreatedRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', user, %12)\n%13 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(dmRoom)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%19 = instanceinvoke %18.<@%unk/%unk: .calledWith()>(createdRoom)\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%24 = %23.<@%unk/%unk: .called>\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference('externalRoomId', { usernames: [] } as any, [user, user]);\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(invitee);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user, invitee]);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.calledWith(dmRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM33$%AM9$%AM0",
          "label": "%AM33$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(true)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM33$%AM9$%AM0$61\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM33$%AM9$%AM0$61.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM33$%AM9$%AM0$61>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\n%17 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = bridge.<@%unk/%unk: .joinRoom>\n%23 = %22.<@%unk/%unk: .called>\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\n%27 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%28 = %27.<@%unk/%unk: .called>\n%29 = staticinvoke <@%unk/%unk: .expect()>(%28)\n%30 = %29.<@%unk/%unk: .to>\n%31 = %30.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM34$%AM9$%AM0",
          "label": "%AM34$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM34$%AM9$%AM0$62\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM34$%AM9$%AM0$62.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM34$%AM9$%AM0$62>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\n%21 = bridge.<@%unk/%unk: .joinRoom>\n%22 = %21.<@%unk/%unk: .called>\n%23 = staticinvoke <@%unk/%unk: .expect()>(%22)\n%24 = %23.<@%unk/%unk: .to>\n%25 = %24.<@%unk/%unk: .be>\n%26 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%27 = instanceinvoke %26.<@%unk/%unk: .calledWith()>(room, user, user)\n%28 = staticinvoke <@%unk/%unk: .expect()>(%27)\n%29 = %28.<@%unk/%unk: .to>\n%30 = %29.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM35$%AM9$%AM0",
          "label": "%AM35$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %2.<@%unk/%unk: .returns()>('localDomain')\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM35$%AM9$%AM0$63\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM35$%AM9$%AM0$63.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM35$%AM9$%AM0$63>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>(room, user, user)\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = bridge.<@%unk/%unk: .joinRoom>\n%13 = instanceinvoke %12.<@%unk/%unk: .calledWith()>('externalRoomId', 'externalInviteeId')\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM36$%AM9$%AM0",
          "label": "%AM36$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %2.<@%unk/%unk: .returns()>('externalDomain')\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM36$%AM9$%AM0$64\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM36$%AM9$%AM0$64.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM36$%AM9$%AM0$64>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>(room, user, user)\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = bridge.<@%unk/%unk: .joinRoom>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM37$%AM9$%AM0",
          "label": "%AM37$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM37$%AM9$%AM0$65\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM37$%AM9$%AM0$65.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM37$%AM9$%AM0$65>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .removeUserFromRoom>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = roomAdapter.<@%unk/%unk: .removeDirectMessageRoom>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = roomAdapter.<@%unk/%unk: .createFederatedRoomForDirectMessage>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\n%21 = bridge.<@%unk/%unk: .joinRoom>\n%22 = %21.<@%unk/%unk: .called>\n%23 = staticinvoke <@%unk/%unk: .expect()>(%22)\n%24 = %23.<@%unk/%unk: .to>\n%25 = %24.<@%unk/%unk: .be>\n%26 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%27 = instanceinvoke %26.<@%unk/%unk: .calledWith()>(room, user)\n%28 = staticinvoke <@%unk/%unk: .expect()>(%27)\n%29 = %28.<@%unk/%unk: .to>\n%30 = %29.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM39$%AM38$%AM9$%AM0",
          "label": "%AM39$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM39$%AM38$%AM9$%AM0$66\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM39$%AM38$%AM9$%AM0$66.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM39$%AM38$%AM9$%AM0$66>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = notificationsAdapter.<@%unk/%unk: .subscribeToUserTypingEventsOnFederatedRoomId>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM40$%AM38$%AM9$%AM0",
          "label": "%AM40$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(true)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM40$%AM38$%AM9$%AM0$67\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM40$%AM38$%AM9$%AM0$67.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM40$%AM38$%AM9$%AM0$67>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM41$%AM38$%AM9$%AM0",
          "label": "%AM41$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(false)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM41$%AM38$%AM9$%AM0$68\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM41$%AM38$%AM9$%AM0$68.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM41$%AM38$%AM9$%AM0$68>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>(room, user)\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM42$%AM38$%AM9$%AM0",
          "label": "%AM42$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(false)\n%5 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(undefined)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM42$%AM38$%AM9$%AM0$69\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM42$%AM38$%AM9$%AM0$69.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM42$%AM38$%AM9$%AM0$69>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%7)\n%9 = await %8\n%10 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM43$%AM38$%AM9$%AM0",
          "label": "%AM43$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = roomAdapter.<@%unk/%unk: .isUserAlreadyJoined>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(false)\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM43$%AM38$%AM9$%AM0$70\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM43$%AM38$%AM9$%AM0$70.constructor()>()\n%6 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(%5)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM43$%AM38$%AM9$%AM0$72\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM43$%AM38$%AM9$%AM0$72.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM43$%AM38$%AM9$%AM0$72>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%8)\n%10 = await %9\n%11 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves({ creator: {} });\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM44$%AM38$%AM9$%AM0",
          "label": "%AM44$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'createFederatedUserInternallyOnly')\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(undefined)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM44$%AM38$%AM9$%AM0$73\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM44$%AM38$%AM9$%AM0$73.constructor()>()\n%11 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%10)\n%12 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %12.<@%unk/%unk: .returns()>('localDomain')\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM44$%AM38$%AM9$%AM0$75\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM44$%AM38$%AM9$%AM0$75.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM44$%AM38$%AM9$%AM0$75>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%14)\n%16 = await %15\nexistsOnlyOnProxyServer = true\n%17 = instanceinvoke spy.<@%unk/%unk: .calledWith()>('creatorId', 'creatorUsername', existsOnlyOnProxyServer)\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: 'creatorId', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\t\texpect(spy.calledWith('creatorId', 'creatorUsername', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM45$%AM38$%AM9$%AM0",
          "label": "%AM45$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'createFederatedUserInternallyOnly')\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(undefined)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM45$%AM38$%AM9$%AM0$76\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM45$%AM38$%AM9$%AM0$76.constructor()>()\n%11 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%10)\n%12 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %12.<@%unk/%unk: .returns()>('externalDomain')\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM45$%AM38$%AM9$%AM0$78\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM45$%AM38$%AM9$%AM0$78.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM45$%AM38$%AM9$%AM0$78>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%14)\n%16 = await %15\nexistsOnlyOnProxyServer = false\n%17 = instanceinvoke spy.<@%unk/%unk: .calledWith()>('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\texpect(spy.calledWith('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM46$%AM38$%AM9$%AM0",
          "label": "%AM46$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\ninstanceinvoke %0.<@%unk/%unk: .resolves()>()\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM46$%AM38$%AM9$%AM0$79\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM46$%AM38$%AM9$%AM0$79.constructor()>()\n%9 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(%8)\n%10 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %10.<@%unk/%unk: .returns()>('externalDomain')\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM46$%AM38$%AM9$%AM0$81\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM46$%AM38$%AM9$%AM0$81.constructor()>()\n%12 = <@ts_files/194.ts: %AC$%dflt$%AM46$%AM38$%AM9$%AM0$81>%11\n%13 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%12)\n%14 = await %13\n%15 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM47$%AM38$%AM9$%AM0",
          "label": "%AM47$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\ninstanceinvoke %0.<@%unk/%unk: .resolves()>()\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(user)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM47$%AM38$%AM9$%AM0$82\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM47$%AM38$%AM9$%AM0$82.constructor()>()\n%11 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%10)\n%12 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %12.<@%unk/%unk: .returns()>('localDomain')\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM47$%AM38$%AM9$%AM0$84\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM47$%AM38$%AM9$%AM0$84.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM47$%AM38$%AM9$%AM0$84>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%14)\n%16 = await %15\n%17 = RoomType.<@%unk/%unk: .CHANNEL>\n%18 = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %17, 'roomName')\n%19 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%20 = instanceinvoke %19.<@%unk/%unk: .calledWith()>(%18)\n%21 = staticinvoke <@%unk/%unk: .expect()>(%20)\n%22 = %21.<@%unk/%unk: .to>\n%23 = %22.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'roomName'),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM48$%AM38$%AM9$%AM0",
          "label": "%AM48$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\ninstanceinvoke %0.<@%unk/%unk: .resolves()>()\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(user)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM48$%AM38$%AM9$%AM0$85\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM48$%AM38$%AM9$%AM0$85.constructor()>()\n%11 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%10)\n%12 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %12.<@%unk/%unk: .returns()>('externalDomain')\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM48$%AM38$%AM9$%AM0$87\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM48$%AM38$%AM9$%AM0$87.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM48$%AM38$%AM9$%AM0$87>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%14)\n%16 = await %15\n%17 = RoomType.<@%unk/%unk: .CHANNEL>\n%18 = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %17, undefined)\n%19 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\n%20 = instanceinvoke %19.<@%unk/%unk: .calledWith()>(%18)\n%21 = staticinvoke <@%unk/%unk: .expect()>(%20)\n%22 = %21.<@%unk/%unk: .to>\n%23 = %22.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, undefined),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM49$%AM38$%AM9$%AM0",
          "label": "%AM49$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'onChangeRoomName')\n%0 = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\ninstanceinvoke %0.<@%unk/%unk: .resolves()>()\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(user)\n%4 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(user)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(user)\n%10 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\ninstanceinvoke %10.<@%unk/%unk: .resolves()>()\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$88\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$88.constructor()>()\n%12 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %12.<@%unk/%unk: .resolves()>(%11)\n%13 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %13.<@%unk/%unk: .returns()>('externalDomain')\n%14 = new @ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$90\ninstanceinvoke %14.<@ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$90.constructor()>()\n%15 = <@ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$90>%14\n%16 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%15)\n%17 = await %16\n%18 = new @ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$91\ninstanceinvoke %18.<@ts_files/194.ts: %AC$%dflt$%AM49$%AM38$%AM9$%AM0$91.constructor()>()\n%19 = instanceinvoke spy.<@%unk/%unk: .calledWith()>(%18)\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves();\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tspy.calledWith({\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}),\n\t\t\t\t).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM50$%AM38$%AM9$%AM0",
          "label": "%AM50$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstub = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%1 = instanceinvoke %0.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%3 = instanceinvoke %2.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(room)\n%6 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(user)\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(user)\n%10 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%11 = instanceinvoke %10.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(undefined)\n%12 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%13 = instanceinvoke %12.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %13.<@%unk/%unk: .resolves()>(user)\ninstanceinvoke stub.<@%unk/%unk: .resolves()>(user)\n%14 = new @ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$92\ninstanceinvoke %14.<@ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$92.constructor()>()\n%15 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\ninstanceinvoke %15.<@%unk/%unk: .resolves()>(%14)\n%16 = new @ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$93\ninstanceinvoke %16.<@ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$93.constructor()>()\n%17 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %17.<@%unk/%unk: .resolves()>(%16)\n%18 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %18.<@%unk/%unk: .returns()>('localDomain')\n%19 = new @ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$95\ninstanceinvoke %19.<@ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$95.constructor()>()\n%20 = <@ts_files/194.ts: %AC$%dflt$%AM50$%AM38$%AM9$%AM0$95>%19\n%21 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%20)\n%22 = await %21\n%23 = stub.<@%unk/%unk: .callCount>\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\ninstanceinvoke %26.<@%unk/%unk: .equal()>(3)\n%27 = instanceinvoke stub.<@%unk/%unk: .getCall()>(1)\n%28 = instanceinvoke %27.<@%unk/%unk: .calledWith()>('user1')\n%29 = staticinvoke <@%unk/%unk: .expect()>(%28)\n%30 = %29.<@%unk/%unk: .to>\n%31 = %30.<@%unk/%unk: .be>\n%32 = instanceinvoke stub.<@%unk/%unk: .getCall()>(2)\n%33 = instanceinvoke %32.<@%unk/%unk: .calledWith()>('user2')\n%34 = staticinvoke <@%unk/%unk: .expect()>(%33)\n%35 = %34.<@%unk/%unk: .to>\n%36 = %35.<@%unk/%unk: .be>\n%37 = newarray (unknown)[2]\n%37[0] = user\n%37[1] = user\n%38 = roomAdapter.<@%unk/%unk: .addUsersToRoomWhenJoinExternalPublicRoom>\n%39 = instanceinvoke %38.<@%unk/%unk: .calledWith()>(%37)\n%40 = staticinvoke <@%unk/%unk: .expect()>(%39)\n%41 = %40.<@%unk/%unk: .to>\n%42 = %41.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst stub = sinon.stub(service, 'createFederatedUserAndReturnIt');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tstub.resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(stub.callCount).to.be.equal(3);\n\t\t\t\texpect(stub.getCall(1).calledWith('user1')).to.be.true;\n\t\t\t\texpect(stub.getCall(2).calledWith('user2')).to.be.true;\n\t\t\t\texpect(roomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.calledWith([user, user])).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM51$%AM38$%AM9$%AM0",
          "label": "%AM51$%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = instanceinvoke sinon.<@%unk/%unk: .stub()>(service, 'createFederatedUserAndReturnIt')\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(user)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%4 = instanceinvoke %3.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(undefined)\n%5 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%6 = instanceinvoke %5.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(room)\n%7 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%8 = instanceinvoke %7.<@%unk/%unk: .onCall()>(0)\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(user)\n%9 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%10 = instanceinvoke %9.<@%unk/%unk: .onCall()>(1)\ninstanceinvoke %10.<@%unk/%unk: .resolves()>(user)\n%11 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%12 = instanceinvoke %11.<@%unk/%unk: .onCall()>(2)\ninstanceinvoke %12.<@%unk/%unk: .resolves()>(undefined)\n%13 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\n%14 = instanceinvoke %13.<@%unk/%unk: .onCall()>(3)\ninstanceinvoke %14.<@%unk/%unk: .resolves()>(user)\n%15 = new @ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$96\ninstanceinvoke %15.<@ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$96.constructor()>()\n%16 = roomAdapter.<@%unk/%unk: .createFederatedRoom>\ninstanceinvoke %16.<@%unk/%unk: .resolves()>(%15)\n%17 = new @ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$97\ninstanceinvoke %17.<@ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$97.constructor()>()\n%18 = bridge.<@%unk/%unk: .getRoomData>\ninstanceinvoke %18.<@%unk/%unk: .resolves()>(%17)\n%19 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %19.<@%unk/%unk: .returns()>('localDomain')\n%20 = new @ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$99\ninstanceinvoke %20.<@ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$99.constructor()>()\n%21 = <@ts_files/194.ts: %AC$%dflt$%AM51$%AM38$%AM9$%AM0$99>%20\n%22 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%21)\n%23 = await %22\n%24 = notificationsAdapter.<@%unk/%unk: .subscribeToUserTypingEventsOnFederatedRoomId>\n%25 = %24.<@%unk/%unk: .called>\n%26 = staticinvoke <@%unk/%unk: .expect()>(%25)\n%27 = %26.<@%unk/%unk: .to>\n%28 = %27.<@%unk/%unk: .be>\n%29 = roomAdapter.<@%unk/%unk: .addUserToRoom>\n%30 = instanceinvoke %29.<@%unk/%unk: .calledWith()>(room, user)\n%31 = staticinvoke <@%unk/%unk: .expect()>(%30)\n%32 = %31.<@%unk/%unk: .to>\n%33 = %32.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves(user);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM38$%AM9$%AM0",
          "label": "%AM38$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should subscribe to the typings events if the room already exists', %AM39$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT add the user to the room if the user is already a room member', %AM40$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should add the user to the room if the user is NOT a room member yet', %AM41$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the room if it was not possible to retrieve the information from the room from the bridge', %AM42$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the room if it there is already a room creation process already running', %AM43$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the creator user only if it does not exists yet and use the provided username if its from the same homeserver', %AM44$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the creator user if it does not exists yet and use the external id as username if its not from the same homeserver', %AM45$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the room if the creator does not exists nor was created successfully previously', %AM46$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the room using the external room name if its original from the same homeserver', %AM47$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the room using nothing if its not original from the same homeserver', %AM48$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should dispatch a room name event if its not from the same homeserver and it was possible to retrieve the name from the bridge query', %AM49$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create federated users for each member of the room excluding the one joining and the creator, and add them to the room ', %AM50$%AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should add the user to the room and subscribe to typings events if everything was done correctly', %AM51$%AM38$%AM9$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should subscribe to the typings events if the room already exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT add the user to the room if the user is already a room member', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should add the user to the room if the user is NOT a room member yet', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if it was not possible to retrieve the information from the room from the bridge', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT create the room if it there is already a room creation process already running', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves({ creator: {} });\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the creator user only if it does not exists yet and use the provided username if its from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: 'creatorId', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\t\texpect(spy.calledWith('creatorId', 'creatorUsername', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should create the creator user if it does not exists yet and use the external id as username if its not from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\texpect(spy.calledWith('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if the creator does not exists nor was created successfully previously', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the room using the external room name if its original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'roomName'),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create the room using nothing if its not original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, undefined),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should dispatch a room name event if its not from the same homeserver and it was possible to retrieve the name from the bridge query', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves();\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tspy.calledWith({\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create federated users for each member of the room excluding the one joining and the creator, and add them to the room ', async () => {\n\t\t\t\tconst stub = sinon.stub(service, 'createFederatedUserAndReturnIt');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tstub.resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(stub.callCount).to.be.equal(3);\n\t\t\t\texpect(stub.getCall(1).calledWith('user1')).to.be.true;\n\t\t\t\texpect(stub.getCall(2).calledWith('user2')).to.be.true;\n\t\t\t\texpect(roomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.calledWith([user, user])).to.be.true;\n\t\t\t});\n\t\t\tit('should add the user to the room and subscribe to typings events if everything was done correctly', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves(user);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM53$%AM52$%AM9$%AM0",
          "label": "%AM53$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'updateUserAvatarInternally')\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM53$%AM52$%AM9$%AM0$100\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM53$%AM52$%AM9$%AM0$100.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM53$%AM52$%AM9$%AM0$100>%0\n%2 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%1)\n%3 = await %2\n%4 = spy.<@%unk/%unk: .called>\n%5 = staticinvoke <@%unk/%unk: .expect()>(%4)\n%6 = %5.<@%unk/%unk: .to>\n%7 = %6.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM54$%AM52$%AM9$%AM0",
          "label": "%AM54$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nspy = instanceinvoke sinon.<@%unk/%unk: .spy()>(service, 'updateUserAvatarInternally')\n%0 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(eventForUserProfileChanges)\n%2 = await %1\n%3 = spy.<@%unk/%unk: .called>\n%4 = staticinvoke <@%unk/%unk: .expect()>(%3)\n%5 = %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.to>\n%6 = %5.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM55$%AM52$%AM9$%AM0",
          "label": "%AM55$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(user)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM55$%AM52$%AM9$%AM0$103\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM55$%AM52$%AM9$%AM0$103.constructor()>()\n%2 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%1)\n%3 = await %2\n%4 = userAdapter.<@%unk/%unk: .setAvatar>\n%5 = %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.called>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.be>\n%9 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\n%14 = userAdapter.<@%unk/%unk: .updateRealName>\n%15 = %14.<@%unk/%unk: .called>\n%16 = staticinvoke <@%unk/%unk: .expect()>(%15)\n%17 = %16.<@%unk/%unk: .to>\n%18 = %17.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: {} });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM56$%AM52$%AM9$%AM0",
          "label": "%AM56$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM56$%AM52$%AM9$%AM0$105\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM56$%AM52$%AM9$%AM0$105.constructor()>()\n%1 = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(eventForUserProfileChanges)\n%4 = await %3\n%5 = userAdapter.<@%unk/%unk: .setAvatar>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = userAdapter.<@%unk/%unk: .updateRealName>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createInstance('externalInviterId', {\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM57$%AM52$%AM9$%AM0",
          "label": "%AM57$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nexistsOnlyOnProxyServer = false\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM57$%AM52$%AM9$%AM0$106\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM57$%AM52$%AM9$%AM0$106.constructor()>()\n%1 = instanceinvoke FederatedUser.<@%unk/%unk: .createWithInternalReference()>('externalInviterId', existsOnlyOnProxyServer, %0)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM57$%AM52$%AM9$%AM0$108\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM57$%AM52$%AM9$%AM0$108.constructor()>()\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .setAvatar>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM58$%AM52$%AM9$%AM0",
          "label": "%AM58$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nexistsOnlyOnProxyServer = false\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM58$%AM52$%AM9$%AM0$110\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM58$%AM52$%AM9$%AM0$110.constructor()>()\nuserAvatar = instanceinvoke FederatedUser.<@%unk/%unk: .createWithInternalReference()>('externalInviterId', existsOnlyOnProxyServer, %0)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(userAvatar)\n%2 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(eventForUserProfileChanges)\n%3 = await %2\n%4 = userAdapter.<@%unk/%unk: .setAvatar>\n%5 = instanceinvoke %4.<@%unk/%unk: .calledWith()>(userAvatar, 'toHttpUrl')\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.be>\n%9 = instanceinvoke userAvatar.<@%unk/%unk: .getInternalId()>()\n%10 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%11 = instanceinvoke %10.<@%unk/%unk: .calledWith()>(%9, 'avatarUrl')\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst userAvatar = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.calledWith(userAvatar, 'toHttpUrl')).to.be.true;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.calledWith(userAvatar.getInternalId(), 'avatarUrl')).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM59$%AM52$%AM9$%AM0",
          "label": "%AM59$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nexistsOnlyOnProxyServer = false\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM59$%AM52$%AM9$%AM0$112\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM59$%AM52$%AM9$%AM0$112.constructor()>()\n%1 = instanceinvoke FederatedUser.<@%unk/%unk: .createWithInternalReference()>('externalInviterId', existsOnlyOnProxyServer, %0)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM59$%AM52$%AM9$%AM0$113\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM59$%AM52$%AM9$%AM0$113.constructor()>()\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%3)\n%5 = await %4\n%6 = userAdapter.<@%unk/%unk: .setAvatar>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = userAdapter.<@%unk/%unk: .updateRealName>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM60$%AM52$%AM9$%AM0",
          "label": "%AM60$%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nexistsOnlyOnProxyServer = false\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM60$%AM52$%AM9$%AM0$115\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM60$%AM52$%AM9$%AM0$115.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createWithInternalReference()>('externalInviterId', existsOnlyOnProxyServer, %0)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM60$%AM52$%AM9$%AM0$116\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM60$%AM52$%AM9$%AM0$116.constructor()>()\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeRoomMembership()>(%2)\n%4 = await %3\n%5 = userAdapter.<@%unk/%unk: .setAvatar>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = userAdapter.<@%unk/%unk: .updateFederationAvatar>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = instanceinvoke user.<@%unk/%unk: .getInternalReference()>()\n%16 = userAdapter.<@%unk/%unk: .updateRealName>\n%17 = instanceinvoke %16.<@%unk/%unk: .calledWith()>(%15, 'displayName')\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst user = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.calledWith(user.getInternalReference(), 'displayName')).to.be.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM52$%AM9$%AM0",
          "label": "%AM52$%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT call the function to update the user avatar if the event does not include an avatarUrl property', %AM53$%AM52$%AM9$%AM0)\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM52$%AM9$%AM0$101\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM52$%AM9$%AM0$101.constructor()>()\neventForUserProfileChanges = <@ts_files/194.ts: %AC$%dflt$%AM52$%AM9$%AM0$101>%0\nstaticinvoke <@%unk/%unk: .it()>('should NOT call the function to update the avatar internally if the user does not exists', %AM54$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the avatar nor the display name if both does not exists', %AM55$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the avatar url nor the display name if the user is from the local home server', %AM56$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the avatar url if the url received in the event is equal to the one already used', %AM57$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should call the functions to update the avatar internally correctly', %AM58$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the display name if the name received in the event is equal to the one already used', %AM59$%AM52$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should call the functions to update the display name internally correctly', %AM60$%AM52$%AM9$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT call the function to update the user avatar if the event does not include an avatarUrl property', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tconst eventForUserProfileChanges = {\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tuserProfile: {\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t},\n\t\t\t} as any;\n\t\t\tit('should NOT call the function to update the avatar internally if the user does not exists', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar nor the display name if both does not exists', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: {} });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url nor the display name if the user is from the local home server', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createInstance('externalInviterId', {\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url if the url received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst userAvatar = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.calledWith(userAvatar, 'toHttpUrl')).to.be.true;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.calledWith(userAvatar.getInternalId(), 'avatarUrl')).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT update the display name if the name received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst user = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.calledWith(user.getInternalReference(), 'displayName')).to.be.true;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM9$%AM0",
          "label": "%AM9$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM9$%AM0$23\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM9$%AM0$23.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT process the method if the room already exists AND event origin is equal to LOCAL', %AM10$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT process the method if the room already exists AND event origin is equal to REMOTE', %AM11$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT process the method logic if the event was generated on the proxy home server, it is NOT a join event (user joining himself), but the room does not exists yet', %AM12$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the inviter if it already exists', %AM13$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the inviter if it does not exists', %AM14$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the invitee if it already exists', %AM15$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create the invitee if it does not exists', %AM16$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an error if the invitee user does not exists at all', %AM17$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an error if the inviter user does not exists at all', %AM18$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the room if it does not exists yet AND the event origin is REMOTE but there is no room type on the event', %AM19$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state)', %AM20$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state), but not automatically join the invitee if he/she is not from the proxy homeserver', %AM21$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state', %AM22$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state, but not automatically join the user if he/she is not from the proxy homeserver', %AM23$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room (not DM) if the room type is NOT equal a direct message AND to add the historical room events to the processing queue when they exists', %AM24$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should create a room (not DM) if the room type is NOT equal a direct message AND NOT to add the historical room events to the processing queue when they exists', %AM26$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should call the update name function if the name is inside the received input', %AM27$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT create the room if it already exists yet AND the event origin is REMOTE', %AM28$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should remove the user from room if its a LEAVE event and the user is in the room already', %AM29$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT remove the user from room if its a LEAVE event and the user is NOT in the room anymore', %AM30$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT remove and recreate the DM room if the user is already part of the room (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', %AM31$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should remove and recreate the DM room if the user is part of the room yet (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', %AM32$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT add the user to the room if its NOT a LEAVE event but the user is already in the room', %AM33$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should add the user into the room if its NOT a LEAVE event providing the inviter when the user is NOT joining by himself', %AM34$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should join the room using the bridge if its NOT a leave event AND the invitee is from the proxy home server', %AM35$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT join the room using the bridge if its NOT a leave event AND the invitee is NOT from the proxy home server', %AM36$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should add the user into the room if its NOT a LEAVE event NOT providing the inviter when the user is joining by himself', %AM37$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Handling users auto-joining', %AM38$%AM9$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('User profile changed event', %AM52$%AM9$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to LOCAL', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.REMOTE } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method logic if the event was generated on the proxy home server, it is NOT a join event (user joining himself), but the room does not exists yet', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create the inviter if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the inviter if it does not exists', async () => {\n\t\t\tconst inviter = FederatedUser.createInstance('externalInviterId', {\n\t\t\t\tname: 'inviterUsernameOnly',\n\t\t\t\tusername: 'inviterUsernameOnly',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\tnormalizedInviterId: 'normalizedInviterId',\n\t\t\t\tinviterUsernameOnly: 'inviterUsernameOnly',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\t\tit('should NOT create the invitee if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the invitee if it does not exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onSecondCall().resolves(undefined);\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\t\tit('should throw an error if the invitee user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should throw an error if the inviter user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should NOT create the room if it does not exists yet AND the event origin is REMOTE but there is no room type on the event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: undefined,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state)', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state), but not automatically join the invitee if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state, but not automatically join the user if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves(['event1', 'event2']);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\t['event1', 'event2'].forEach((event) => expect(queueInstance.addToQueue.calledWith(event)).to.be.true);\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND NOT to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\texpect(queueInstance.addToQueue.called).to.be.false;\n\t\t});\n\t\tit('should call the update name function if the name is inside the received input', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tspy.calledWith({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomName: 'externalRoomName',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\texternalSenderId: 'externalInviterId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should NOT create the room if it already exists yet AND the event origin is REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should remove the user from room if its a LEAVE event and the user is in the room already', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove the user from room if its a LEAVE event and the user is NOT in the room anymore', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove and recreate the DM room if the user is already part of the room (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference(\n\t\t\t\t'externalRoomId',\n\t\t\t\t{ usernames: [user.getUsername() as string] } as any,\n\t\t\t\t[user, user],\n\t\t\t);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t});\n\t\tit('should remove and recreate the DM room if the user is part of the room yet (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference('externalRoomId', { usernames: [] } as any, [user, user]);\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(invitee);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user, invitee]);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.calledWith(dmRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT add the user to the room if its NOT a LEAVE event but the user is already in the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event providing the inviter when the user is NOT joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t});\n\t\tit('should join the room using the bridge if its NOT a leave event AND the invitee is from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should NOT join the room using the bridge if its NOT a leave event AND the invitee is NOT from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event NOT providing the inviter when the user is joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t});\n\t\tdescribe('Handling users auto-joining', () => {\n\t\t\tit('should subscribe to the typings events if the room already exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT add the user to the room if the user is already a room member', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should add the user to the room if the user is NOT a room member yet', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if it was not possible to retrieve the information from the room from the bridge', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT create the room if it there is already a room creation process already running', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves({ creator: {} });\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the creator user only if it does not exists yet and use the provided username if its from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: 'creatorId', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\t\texpect(spy.calledWith('creatorId', 'creatorUsername', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should create the creator user if it does not exists yet and use the external id as username if its not from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\texpect(spy.calledWith('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if the creator does not exists nor was created successfully previously', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the room using the external room name if its original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'roomName'),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create the room using nothing if its not original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, undefined),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should dispatch a room name event if its not from the same homeserver and it was possible to retrieve the name from the bridge query', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves();\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tspy.calledWith({\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create federated users for each member of the room excluding the one joining and the creator, and add them to the room ', async () => {\n\t\t\t\tconst stub = sinon.stub(service, 'createFederatedUserAndReturnIt');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tstub.resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(stub.callCount).to.be.equal(3);\n\t\t\t\texpect(stub.getCall(1).calledWith('user1')).to.be.true;\n\t\t\t\texpect(stub.getCall(2).calledWith('user2')).to.be.true;\n\t\t\t\texpect(roomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.calledWith([user, user])).to.be.true;\n\t\t\t});\n\t\t\tit('should add the user to the room and subscribe to typings events if everything was done correctly', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves(user);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t});\n\t\tdescribe('User profile changed event', () => {\n\t\t\tit('should NOT call the function to update the user avatar if the event does not include an avatarUrl property', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tconst eventForUserProfileChanges = {\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tuserProfile: {\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t},\n\t\t\t} as any;\n\t\t\tit('should NOT call the function to update the avatar internally if the user does not exists', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar nor the display name if both does not exists', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: {} });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url nor the display name if the user is from the local home server', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createInstance('externalInviterId', {\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url if the url received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst userAvatar = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.calledWith(userAvatar, 'toHttpUrl')).to.be.true;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.calledWith(userAvatar.getInternalId(), 'avatarUrl')).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT update the display name if the name received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst user = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.calledWith(user.getInternalReference(), 'displayName')).to.be.true;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM62$%AM61$%AM0",
          "label": "%AM62$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM62$%AM61$%AM0$119\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM62$%AM61$%AM0$119.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM62$%AM61$%AM0$119>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onExternalFileMessageReceived()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .sendFileMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM63$%AM61$%AM0",
          "label": "%AM63$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$120\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$120.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$120>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$121\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$121.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM63$%AM61$%AM0$121>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onExternalFileMessageReceived()>(%5)\n%7 = await %6\n%8 = messageAdapter.<@%unk/%unk: .sendFileMessage>\n%9 = %8.<@%unk/%unk: .called>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM64$%AM61$%AM0",
          "label": "%AM64$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .getReadStreamForFileFromUrl>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>()\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$122\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$122.constructor()>()\n%4 = newarray (@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$122)[1]\n%4[0] = %3\nfiles = %4\n%5 = newarray (string)[2]\n%5[0] = 'attachment'\n%5[1] = 'attachment2'\nattachments = %5\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$123\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$123.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$123>%6\n%8 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%7)\n%9 = new @ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$124\ninstanceinvoke %9.<@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$124.constructor()>()\n%10 = <@ts_files/194.ts: %AC$%dflt$%AM64$%AM61$%AM0$124>%9\n%11 = instanceinvoke service.<@%unk/%unk: .onExternalFileMessageReceived()>(%10)\n%12 = await %11\n%13 = messageAdapter.<@%unk/%unk: .sendFileMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(user, room, files, attachments)\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.calledWith(user, room, files, attachments)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM66$%AM65$%AM61$%AM0",
          "label": "%AM66$%AM65$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$126\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$126.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$126>%3\n%5 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$127\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$127.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM66$%AM65$%AM61$%AM0$127>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onExternalFileMessageReceived()>(%7)\n%9 = await %8\n%10 = messageAdapter.<@%unk/%unk: .sendQuoteFileMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .sendFileMessage>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM67$%AM65$%AM61$%AM0",
          "label": "%AM67$%AM65$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$129\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$129.constructor()>()\nmessageToReplyTo = <@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$129>%0\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%4 = instanceinvoke %3.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(undefined)\n%5 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%6 = instanceinvoke %5.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(messageToReplyTo)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$131\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$131.constructor()>()\n%8 = newarray (@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$131)[1]\n%8[0] = %7\nfiles = %8\n%9 = newarray (string)[2]\n%9[0] = 'attachment'\n%9[1] = 'attachment2'\nattachments = %9\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$132\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$132.constructor()>()\n%11 = <@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$132>%10\n%12 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %12.<@%unk/%unk: .resolves()>(%11)\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$133\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$133.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM67$%AM65$%AM61$%AM0$133>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onExternalFileMessageReceived()>(%14)\n%16 = await %15\n%17 = messageAdapter.<@%unk/%unk: .sendQuoteFileMessage>\n%18 = instanceinvoke %17.<@%unk/%unk: .calledWith()>(user, room, files, attachments, 'externalEventId', messageToReplyTo, 'localDomain')\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = messageAdapter.<@%unk/%unk: .sendFileMessage>\n%23 = %22.<@%unk/%unk: .called>\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM65$%AM61$%AM0",
          "label": "%AM65$%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a quote message if its necessary to quote but the message to quote does not exists', %AM66$%AM65$%AM61$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a quote message if its necessary to quote and the message to quote exists', %AM67$%AM65$%AM61$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM61$%AM0",
          "label": "%AM61$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM61$%AM0$118\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM61$%AM0$118.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the room does not exists', %AM62$%AM61$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the sender does not exists', %AM63$%AM61$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a message if the room and the sender already exists', %AM64$%AM61$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Quoting messages', %AM65$%AM61$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.calledWith(user, room, files, attachments)).to.be.true;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM69$%AM68$%AM0",
          "label": "%AM69$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM69$%AM68$%AM0$135\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM69$%AM68$%AM0$135.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM69$%AM68$%AM0$135>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .sendMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM70$%AM68$%AM0",
          "label": "%AM70$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$136\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$136.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$136>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$137\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$137.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM70$%AM68$%AM0$137>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%5)\n%7 = await %6\n%8 = messageAdapter.<@%unk/%unk: .sendMessage>\n%9 = %8.<@%unk/%unk: .called>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM71$%AM68$%AM0",
          "label": "%AM71$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$138\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$138.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$138>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$139\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$139.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$139>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$140\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$140.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$140>%6\n%8 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%7)\n%9 = new @ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$141\ninstanceinvoke %9.<@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$141.constructor()>()\n%10 = <@ts_files/194.ts: %AC$%dflt$%AM71$%AM68$%AM0$141>%9\n%11 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%10)\n%12 = await %11\n%13 = messageAdapter.<@%unk/%unk: .sendMessage>\n%14 = %13.<@%unk/%unk: .called>\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM72$%AM68$%AM0",
          "label": "%AM72$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$142\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$142.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$142>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$143\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$143.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$143>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(undefined)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$144\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$144.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$144>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%8)\n%10 = await %9\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$145\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$145.constructor()>()\n%12 = new @ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$146\ninstanceinvoke %12.<@ts_files/194.ts: %AC$%dflt$%AM72$%AM68$%AM0$146.constructor()>()\n%13 = messageAdapter.<@%unk/%unk: .sendMessage>\n%14 = instanceinvoke %13.<@%unk/%unk: .calledWith()>(%11, %12, 'rawMessage', 'externalFormattedText', 'externalEventId', 'localDomain')\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = messageAdapter.<@%unk/%unk: .sendQuoteMessage>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.calledWith({}, {}, 'rawMessage', 'externalFormattedText', 'externalEventId', 'localDomain')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM74$%AM73$%AM68$%AM0",
          "label": "%AM74$%AM73$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$147\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$147.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$147>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$148\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$148.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$148>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(undefined)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$149\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$149.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM74$%AM73$%AM68$%AM0$149>%7\n%9 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%8)\n%10 = await %9\n%11 = messageAdapter.<@%unk/%unk: .sendQuoteMessage>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\n%16 = messageAdapter.<@%unk/%unk: .sendMessage>\n%17 = %16.<@%unk/%unk: .called>\n%18 = staticinvoke <@%unk/%unk: .expect()>(%17)\n%19 = %18.<@%unk/%unk: .to>\n%20 = %19.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM75$%AM73$%AM68$%AM0",
          "label": "%AM75$%AM73$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$150\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$150.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$150>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$151\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$151.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$151>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$152\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$152.constructor()>()\n%9 = <@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$152>%8\n%10 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%11 = instanceinvoke %10.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%9)\n%12 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$153\ninstanceinvoke %12.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$153.constructor()>()\n%13 = <@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$153>%12\n%14 = instanceinvoke service.<@%unk/%unk: .onExternalMessageReceived()>(%13)\n%15 = await %14\n%16 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$154\ninstanceinvoke %16.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$154.constructor()>()\n%17 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$155\ninstanceinvoke %17.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$155.constructor()>()\n%18 = new @ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$156\ninstanceinvoke %18.<@ts_files/194.ts: %AC$%dflt$%AM75$%AM73$%AM68$%AM0$156.constructor()>()\n%19 = messageAdapter.<@%unk/%unk: .sendQuoteMessage>\n%20 = instanceinvoke %19.<@%unk/%unk: .calledWith()>(%16, %17, 'externalFormattedText', 'rawMessage', 'externalEventId', %18, 'localDomain')\n%21 = staticinvoke <@%unk/%unk: .expect()>(%20)\n%22 = %21.<@%unk/%unk: .to>\n%23 = %22.<@%unk/%unk: .be>\n%24 = messageAdapter.<@%unk/%unk: .sendMessage>\n%25 = %24.<@%unk/%unk: .called>\n%26 = staticinvoke <@%unk/%unk: .expect()>(%25)\n%27 = %26.<@%unk/%unk: .to>\n%28 = %27.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves({} as any);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteMessage.calledWith({}, {}, 'externalFormattedText', 'rawMessage', 'externalEventId', {}, 'localDomain'),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM73$%AM68$%AM0",
          "label": "%AM73$%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a quote message if its necessary to quote but the message to quote does not exists', %AM74$%AM73$%AM68$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a quote message if its necessary to quote and the message to quote exists', %AM75$%AM73$%AM68$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves({} as any);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteMessage.calledWith({}, {}, 'externalFormattedText', 'rawMessage', 'externalEventId', {}, 'localDomain'),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM68$%AM0",
          "label": "%AM68$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the room does not exists', %AM69$%AM68$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the sender does not exists', %AM70$%AM68$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the message was already be sent through federation and is just a reply back event', %AM71$%AM68$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', %AM72$%AM68$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Quoting messages', %AM73$%AM68$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.calledWith({}, {}, 'rawMessage', 'externalFormattedText', 'externalEventId', 'localDomain')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves({} as any);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteMessage.calledWith({}, {}, 'externalFormattedText', 'rawMessage', 'externalEventId', {}, 'localDomain'),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM77$%AM76$%AM0",
          "label": "%AM77$%AM76$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM77$%AM76$%AM0$158\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM77$%AM76$%AM0$158.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM77$%AM76$%AM0$158>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeJoinRules()>(%2)\n%4 = await %3\n%5 = roomAdapter.<@%unk/%unk: .updateRoomType>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM78$%AM76$%AM0",
          "label": "%AM78$%AM76$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = newarray (unknown)[2]\n%0[0] = user\n%0[1] = user\ndmRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', user, %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(dmRoom)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM78$%AM76$%AM0$159\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM78$%AM76$%AM0$159.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM78$%AM76$%AM0$159>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeJoinRules()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .updateRoomType>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM79$%AM76$%AM0",
          "label": "%AM79$%AM76$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM79$%AM76$%AM0$160\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM79$%AM76$%AM0$160.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM79$%AM76$%AM0$160>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeJoinRules()>(%2)\n%4 = await %3\n%5 = RoomType.<@%unk/%unk: .PRIVATE_GROUP>\ninstanceinvoke room.<@%unk/%unk: .changeRoomType()>(%5)\n%6 = roomAdapter.<@%unk/%unk: .updateRoomType>\n%7 = instanceinvoke %6.<@%unk/%unk: .calledWith()>(room)\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.PRIVATE_GROUP,\n\t\t\t} as any);\n\t\t\troom.changeRoomType(RoomType.PRIVATE_GROUP);\n\t\t\texpect(roomAdapter.updateRoomType.calledWith(room)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM76$%AM0",
          "label": "%AM76$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM76$%AM0$157\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM76$%AM0$157.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room type if the room does not exists', %AM77$%AM76$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room type if it exists and is a direct message', %AM78$%AM76$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should change the room type if it exists and is NOT a direct message', %AM79$%AM76$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room type if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room type if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should change the room type if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.PRIVATE_GROUP,\n\t\t\t} as any);\n\t\t\troom.changeRoomType(RoomType.PRIVATE_GROUP);\n\t\t\texpect(roomAdapter.updateRoomType.calledWith(room)).to.be.true;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM81$%AM80$%AM0",
          "label": "%AM81$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM81$%AM80$%AM0$162\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM81$%AM80$%AM0$162.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM81$%AM80$%AM0$162>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%2)\n%4 = await %3\n%5 = roomAdapter.<@%unk/%unk: .updateRoomName>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = roomAdapter.<@%unk/%unk: .updateDisplayRoomName>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM82$%AM80$%AM0",
          "label": "%AM82$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM82$%AM80$%AM0$163\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM82$%AM80$%AM0$163.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM82$%AM80$%AM0$163>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .updateRoomName>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = roomAdapter.<@%unk/%unk: .updateDisplayRoomName>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM83$%AM80$%AM0",
          "label": "%AM83$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %2.<@%unk/%unk: .returns()>('localDomain')\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM83$%AM80$%AM0$164\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM83$%AM80$%AM0$164.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM83$%AM80$%AM0$164>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%4)\n%6 = await %5\n%7 = roomAdapter.<@%unk/%unk: .updateRoomName>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:localDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM84$%AM80$%AM0",
          "label": "%AM84$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %2.<@%unk/%unk: .returns()>('externalDomain')\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM84$%AM80$%AM0$165\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM84$%AM80$%AM0$165.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM84$%AM80$%AM0$165>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%4)\n%6 = await %5\ninstanceinvoke room.<@%unk/%unk: .changeRoomName()>('!externalRoomId:externalDomain')\n%7 = roomAdapter.<@%unk/%unk: .updateRoomName>\n%8 = instanceinvoke %7.<@%unk/%unk: .calledWith()>(room)\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:externalDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\troom.changeRoomName('!externalRoomId:externalDomain');\n\t\t\texpect(roomAdapter.updateRoomName.calledWith(room)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM85$%AM80$%AM0",
          "label": "%AM85$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = newarray (unknown)[2]\n%0[0] = user\n%0[1] = user\ndmRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', user, %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(dmRoom)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM85$%AM80$%AM0$166\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM85$%AM80$%AM0$166.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM85$%AM80$%AM0$166>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .updateDisplayRoomName>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM86$%AM80$%AM0",
          "label": "%AM86$%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM86$%AM80$%AM0$167\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM86$%AM80$%AM0$167.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM86$%AM80$%AM0$167>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomName()>(%3)\n%5 = await %4\ninstanceinvoke room.<@%unk/%unk: .changeDisplayRoomName()>('normalizedRoomName2')\n%6 = roomAdapter.<@%unk/%unk: .updateDisplayRoomName>\n%7 = instanceinvoke %6.<@%unk/%unk: .calledWith()>(room, user)\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName2',\n\t\t\t} as any);\n\t\t\troom.changeDisplayRoomName('normalizedRoomName2');\n\t\t\texpect(roomAdapter.updateDisplayRoomName.calledWith(room, user)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM80$%AM0",
          "label": "%AM80$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM80$%AM0$161\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM80$%AM0$161.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room name if the room does not exists', %AM81$%AM80$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room name if the user does not exists', %AM82$%AM80$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room name if the room is an internal room', %AM83$%AM80$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should change the room name if the room is NOT an internal room', %AM84$%AM80$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room fname if it exists and is a direct message', %AM85$%AM80$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should change the room fname if it exists and is NOT a direct message', %AM86$%AM80$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room name if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the room is an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:localDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room name if the room is NOT an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:externalDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\troom.changeRoomName('!externalRoomId:externalDomain');\n\t\t\texpect(roomAdapter.updateRoomName.calledWith(room)).to.be.true;\n\t\t});\n\t\tit('should NOT change the room fname if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room fname if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName2',\n\t\t\t} as any);\n\t\t\troom.changeDisplayRoomName('normalizedRoomName2');\n\t\t\texpect(roomAdapter.updateDisplayRoomName.calledWith(room, user)).to.be.true;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM88$%AM87$%AM0",
          "label": "%AM88$%AM87$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM88$%AM87$%AM0$169\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM88$%AM87$%AM0$169.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM88$%AM87$%AM0$169>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeRoomTopic()>(%2)\n%4 = await %3\n%5 = roomAdapter.<@%unk/%unk: .updateRoomTopic>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM89$%AM87$%AM0",
          "label": "%AM89$%AM87$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = newarray (unknown)[2]\n%0[0] = user\n%0[1] = user\ndmRoom = instanceinvoke DirectMessageFederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', user, %0)\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(dmRoom)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM89$%AM87$%AM0$170\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM89$%AM87$%AM0$170.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM89$%AM87$%AM0$170>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomTopic()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .updateRoomTopic>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM90$%AM87$%AM0",
          "label": "%AM90$%AM87$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM90$%AM87$%AM0$171\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM90$%AM87$%AM0$171.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM90$%AM87$%AM0$171>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomTopic()>(%3)\n%5 = await %4\ninstanceinvoke room.<@%unk/%unk: .changeRoomTopic()>('roomTopic')\n%6 = roomAdapter.<@%unk/%unk: .updateRoomTopic>\n%7 = instanceinvoke %6.<@%unk/%unk: .calledWith()>(room, user)\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\troom.changeRoomTopic('roomTopic');\n\t\t\texpect(roomAdapter.updateRoomTopic.calledWith(room, user)).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM87$%AM0",
          "label": "%AM87$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM87$%AM0$168\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM87$%AM0$168.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room topic if the room does not exists', %AM88$%AM87$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT change the room topic if it exists and is a direct message', %AM89$%AM87$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should change the room topic if it exists and is NOT a direct message', %AM90$%AM87$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room topic if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room topic if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should change the room topic if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\troom.changeRoomTopic('roomTopic');\n\t\t\texpect(roomAdapter.updateRoomTopic.calledWith(room, user)).to.be.true;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM92$%AM91$%AM0",
          "label": "%AM92$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM92$%AM91$%AM0$173\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM92$%AM91$%AM0$173.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM92$%AM91$%AM0$173>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM93$%AM91$%AM0",
          "label": "%AM93$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM93$%AM91$%AM0$174\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM93$%AM91$%AM0$174.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM93$%AM91$%AM0$174>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%3)\n%5 = await %4\n%6 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\n%11 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%12 = %11.<@%unk/%unk: .called>\n%13 = staticinvoke <@%unk/%unk: .expect()>(%12)\n%14 = %13.<@%unk/%unk: .to>\n%15 = %14.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM94$%AM91$%AM0",
          "label": "%AM94$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM94$%AM91$%AM0$175\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM94$%AM91$%AM0$175.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM94$%AM91$%AM0$175>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%4)\n%6 = await %5\n%7 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM95$%AM91$%AM0",
          "label": "%AM95$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$176\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$176.constructor()>()\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = messageAdapter.<@%unk/%unk: .findOneByFederationIdOnReactions>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(undefined)\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$177\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$177.constructor()>()\n%6 = <@ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$177>%5\n%7 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%6)\n%8 = await %7\n%9 = new @ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$178\ninstanceinvoke %9.<@ts_files/194.ts: %AC$%dflt$%AM95$%AM91$%AM0$178.constructor()>()\n%10 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%11 = instanceinvoke %10.<@%unk/%unk: .calledWith()>(%9, user)\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'msg' });\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.calledWith({ msg: 'msg' }, user)).to.be.true;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM96$%AM91$%AM0",
          "label": "%AM96$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM96$%AM91$%AM0$179\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM96$%AM91$%AM0$179.constructor()>()\n%4 = messageAdapter.<@%unk/%unk: .findOneByFederationIdOnReactions>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(%3)\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM96$%AM91$%AM0$183\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM96$%AM91$%AM0$183.constructor()>()\n%6 = <@ts_files/194.ts: %AC$%dflt$%AM96$%AM91$%AM0$183>%5\n%7 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%6)\n%8 = await %7\n%9 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\n%14 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%15 = %14.<@%unk/%unk: .called>\n%16 = staticinvoke <@%unk/%unk: .expect()>(%15)\n%17 = %16.<@%unk/%unk: .to>\n%18 = %17.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves({\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM97$%AM91$%AM0",
          "label": "%AM97$%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM97$%AM91$%AM0$184\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM97$%AM91$%AM0$184.constructor()>()\nmessage = %0\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = messageAdapter.<@%unk/%unk: .findOneByFederationIdOnReactions>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(message)\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM97$%AM91$%AM0$188\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM97$%AM91$%AM0$188.constructor()>()\n%6 = <@ts_files/194.ts: %AC$%dflt$%AM97$%AM91$%AM0$188>%5\n%7 = instanceinvoke service.<@%unk/%unk: .onRedactEvent()>(%6)\n%8 = await %7\n%9 = messageAdapter.<@%unk/%unk: .deleteMessage>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\n%14 = messageAdapter.<@%unk/%unk: .unreactToMessage>\n%15 = instanceinvoke %14.<@%unk/%unk: .calledWith()>(user, message, 'reaction', 'redactsEvent')\n%16 = staticinvoke <@%unk/%unk: .expect()>(%15)\n%17 = %16.<@%unk/%unk: .to>\n%18 = %17.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tconst message = {\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(message);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.calledWith(user, message, 'reaction', 'redactsEvent')).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM91$%AM0",
          "label": "%AM91$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM91$%AM0$172\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM91$%AM0$172.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT delete the message if the room does not exists', %AM92$%AM91$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT delete the message if the sender does not exists', %AM93$%AM91$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT delete the message if the message does not exists', %AM94$%AM91$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should delete the message if its a raw text redact handler', %AM95$%AM91$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT unreact if the message was not reacted before by the user', %AM96$%AM91$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should unreact if the message was reacted before by the user', %AM97$%AM91$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT delete the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should delete the message if its a raw text redact handler', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'msg' });\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.calledWith({ msg: 'msg' }, user)).to.be.true;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT unreact if the message was not reacted before by the user', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves({\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should unreact if the message was reacted before by the user', async () => {\n\t\t\tconst message = {\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(message);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.calledWith(user, message, 'reaction', 'redactsEvent')).to.be.true;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM99$%AM98$%AM0",
          "label": "%AM99$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM99$%AM98$%AM0$190\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM99$%AM98$%AM0$190.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM99$%AM98$%AM0$190>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .editMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM100$%AM98$%AM0",
          "label": "%AM100$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM100$%AM98$%AM0$191\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM100$%AM98$%AM0$191.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM100$%AM98$%AM0$191>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%3)\n%5 = await %4\n%6 = messageAdapter.<@%unk/%unk: .editMessage>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM101$%AM98$%AM0",
          "label": "%AM101$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM101$%AM98$%AM0$192\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM101$%AM98$%AM0$192.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM101$%AM98$%AM0$192>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%4)\n%6 = await %5\n%7 = messageAdapter.<@%unk/%unk: .editMessage>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM102$%AM98$%AM0",
          "label": "%AM102$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM102$%AM98$%AM0$193\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM102$%AM98$%AM0$193.constructor()>()\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM102$%AM98$%AM0$194\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM102$%AM98$%AM0$194.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM102$%AM98$%AM0$194>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%5)\n%7 = await %6\n%8 = messageAdapter.<@%unk/%unk: .editMessage>\n%9 = %8.<@%unk/%unk: .called>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'newRawMessage' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM103$%AM98$%AM0",
          "label": "%AM103$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$195\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$195.constructor()>()\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$196\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$196.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$196>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%5)\n%7 = await %6\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$197\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM103$%AM98$%AM0$197.constructor()>()\n%9 = messageAdapter.<@%unk/%unk: .editMessage>\n%10 = instanceinvoke %9.<@%unk/%unk: .calledWith()>(user, 'newRawMessage', 'newExternalFormattedText', %8, 'localDomain')\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.editMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', { msg: 'differentOne' }, 'localDomain'),\n\t\t\t).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM105$%AM104$%AM98$%AM0",
          "label": "%AM105$%AM104$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM105$%AM104$%AM98$%AM0$198\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM105$%AM104$%AM98$%AM0$198.constructor()>()\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %4.<@%unk/%unk: .returns()>('localDomain')\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM105$%AM104$%AM98$%AM0$200\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM105$%AM104$%AM98$%AM0$200.constructor()>()\n%6 = <@ts_files/194.ts: %AC$%dflt$%AM105$%AM104$%AM98$%AM0$200>%5\n%7 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%6)\n%8 = await %7\n%9 = messageAdapter.<@%unk/%unk: .editMessage>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\n%14 = messageAdapter.<@%unk/%unk: .editQuotedMessage>\n%15 = %14.<@%unk/%unk: .called>\n%16 = staticinvoke <@%unk/%unk: .expect()>(%15)\n%17 = %16.<@%unk/%unk: .to>\n%18 = %17.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne', attachments: [{ message_link: 'link' }] });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM106$%AM104$%AM98$%AM0",
          "label": "%AM106$%AM104$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM106$%AM104$%AM98$%AM0$201\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM106$%AM104$%AM98$%AM0$201.constructor()>()\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %4.<@%unk/%unk: .returns()>('externalDomain')\n%5 = messageAdapter.<@%unk/%unk: .getMessageToEditWhenReplyAndQuote>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>('internalFormattedMessageToBeEdited')\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM106$%AM104$%AM98$%AM0$203\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM106$%AM104$%AM98$%AM0$203.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM106$%AM104$%AM98$%AM0$203>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%7)\n%9 = await %8\n%10 = messageAdapter.<@%unk/%unk: .editMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .editQuotedMessage>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM107$%AM104$%AM98$%AM0",
          "label": "%AM107$%AM104$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM107$%AM104$%AM98$%AM0$204\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM107$%AM104$%AM98$%AM0$204.constructor()>()\nmessage = %0\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(message)\n%4 = bridge.<@%unk/%unk: .extractHomeserverOrigin>\ninstanceinvoke %4.<@%unk/%unk: .returns()>('externalDomain')\n%5 = messageAdapter.<@%unk/%unk: .getMessageToEditWhenReplyAndQuote>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>('internalFormattedMessageToBeEdited')\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM107$%AM104$%AM98$%AM0$206\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM107$%AM104$%AM98$%AM0$206.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM107$%AM104$%AM98$%AM0$206>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onExternalMessageEditedReceived()>(%7)\n%9 = await %8\n%10 = messageAdapter.<@%unk/%unk: .editMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .editQuotedMessage>\n%16 = instanceinvoke %15.<@%unk/%unk: .calledWith()>(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst message = {\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t};\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(message);\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')).to.be\n\t\t\t\t\t.true;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM104$%AM98$%AM0",
          "label": "%AM104$%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT edit the quoted message if the event was generated locally (the message edited was on local server only)', %AM105$%AM104$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT edit the quoted message if the event was remotely generated but the message content is the same as the current one (the message is already up to date)', %AM106$%AM104$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should edit the quoted message if the event was remotely the message content is outdated', %AM107$%AM104$%AM98$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT edit the quoted message if the event was generated locally (the message edited was on local server only)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne', attachments: [{ message_link: 'link' }] });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT edit the quoted message if the event was remotely generated but the message content is the same as the current one (the message is already up to date)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should edit the quoted message if the event was remotely the message content is outdated', async () => {\n\t\t\t\tconst message = {\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t};\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(message);\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')).to.be\n\t\t\t\t\t.true;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM98$%AM0",
          "label": "%AM98$%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM98$%AM0$189\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM98$%AM0$189.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the message if the room does not exists', %AM99$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the message if the sender does not exists', %AM100$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the message if the message does not exists', %AM101$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the message if the content of the message is equal of the oldest one', %AM102$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should update the message', %AM103$%AM98$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Editing quoted messages', %AM104$%AM98$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the content of the message is equal of the oldest one', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'newRawMessage' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should update the message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.editMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', { msg: 'differentOne' }, 'localDomain'),\n\t\t\t).to.be.true;\n\t\t});\n\t\tdescribe('Editing quoted messages', () => {\n\t\t\tit('should NOT edit the quoted message if the event was generated locally (the message edited was on local server only)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne', attachments: [{ message_link: 'link' }] });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT edit the quoted message if the event was remotely generated but the message content is the same as the current one (the message is already up to date)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should edit the quoted message if the event was remotely the message content is outdated', async () => {\n\t\t\t\tconst message = {\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t};\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(message);\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')).to.be\n\t\t\t\t\t.true;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM109$%AM108$%AM0",
          "label": "%AM109$%AM108$%AM0",
          "start_line": 1,
          "end_line": 1584,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM109$%AM108$%AM0$208\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM109$%AM108$%AM0$208.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM109$%AM108$%AM0$208>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onChangeRoomPowerLevels()>(%2)\n%4 = await %3\n%5 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM110$%AM108$%AM0",
          "label": "%AM110$%AM108$%AM0",
          "start_line": 1,
          "end_line": 1593,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(undefined)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM110$%AM108$%AM0$209\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM110$%AM108$%AM0$209.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM110$%AM108$%AM0$209>%2\n%4 = instanceinvoke service.<@%unk/%unk: .onChangeRoomPowerLevels()>(%3)\n%5 = await %4\n%6 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\n%7 = %6.<@%unk/%unk: .called>\n%8 = staticinvoke <@%unk/%unk: .expect()>(%7)\n%9 = %8.<@%unk/%unk: .to>\n%10 = %9.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM111$%AM108$%AM0",
          "label": "%AM111$%AM108$%AM0",
          "start_line": 1,
          "end_line": 1603,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = newarray (any)[0]\n%3 = userAdapter.<@%unk/%unk: .getFederatedUsersByExternalIds>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM111$%AM108$%AM0$210\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM111$%AM108$%AM0$210.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM111$%AM108$%AM0$210>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onChangeRoomPowerLevels()>(%5)\n%7 = await %6\n%8 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\n%9 = %8.<@%unk/%unk: .called>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM112$%AM108$%AM0",
          "label": "%AM112$%AM108$%AM0",
          "start_line": 1,
          "end_line": 1614,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = newarray (unknown)[1]\n%2[0] = user\n%3 = userAdapter.<@%unk/%unk: .getFederatedUsersByExternalIds>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM112$%AM108$%AM0$211\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM112$%AM108$%AM0$211.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM112$%AM108$%AM0$211>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onChangeRoomPowerLevels()>(%5)\n%7 = await %6\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM112$%AM108$%AM0$214\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM112$%AM108$%AM0$214.constructor()>()\n%9 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\n%10 = instanceinvoke %9.<@%unk/%unk: .calledWith()>(%8)\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: ['owner'],\n\t\t\t\t\trolesToRemove: [],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM113$%AM108$%AM0",
          "label": "%AM113$%AM108$%AM0",
          "start_line": 1,
          "end_line": 1641,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = newarray (unknown)[1]\n%2[0] = user\n%3 = userAdapter.<@%unk/%unk: .getFederatedUsersByExternalIds>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(%2)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM113$%AM108$%AM0$215\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM113$%AM108$%AM0$215.constructor()>()\n%5 = <@ts_files/194.ts: %AC$%dflt$%AM113$%AM108$%AM0$215>%4\n%6 = instanceinvoke service.<@%unk/%unk: .onChangeRoomPowerLevels()>(%5)\n%7 = await %6\n%8 = new @ts_files/194.ts: %AC$%dflt$%AM113$%AM108$%AM0$218\ninstanceinvoke %8.<@ts_files/194.ts: %AC$%dflt$%AM113$%AM108$%AM0$218.constructor()>()\n%9 = roomAdapter.<@%unk/%unk: .applyRoomRolesToUser>\n%10 = instanceinvoke %9.<@%unk/%unk: .calledWith()>(%8)\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: [],\n\t\t\t\t\trolesToRemove: ['owner'],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM108$%AM0",
          "label": "%AM108$%AM0",
          "start_line": 1,
          "end_line": 1577,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM108$%AM0$207\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM108$%AM0$207.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalUserId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the room roles if the room does not exists', %AM109$%AM108$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the room roles if the user does not exists', %AM110$%AM108$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT update the room roles if there is no target users', %AM111$%AM108$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should update the room roles adding one role to be added', %AM112$%AM108$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should update the room roles adding one role to be removed', %AM113$%AM108$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalUserId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the room roles if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if there is no target users', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room roles adding one role to be added', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: ['owner'],\n\t\t\t\t\trolesToRemove: [],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should update the room roles adding one role to be removed', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: [],\n\t\t\t\t\trolesToRemove: ['owner'],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM115$%AM114$%AM0",
          "label": "%AM115$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1670,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM115$%AM114$%AM0$219\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM115$%AM114$%AM0$219.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM115$%AM114$%AM0$219>%0\n%2 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%1)\n%3 = await %2\n%4 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%5 = %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.called>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.be>\n%9 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM116$%AM114$%AM0",
          "label": "%AM116$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1677,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM116$%AM114$%AM0$220\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM116$%AM114$%AM0$220.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM116$%AM114$%AM0$220>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM117$%AM114$%AM0",
          "label": "%AM117$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1686,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM117$%AM114$%AM0$222\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM117$%AM114$%AM0$222.constructor()>()\n%1 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(%0)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM117$%AM114$%AM0$223\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM117$%AM114$%AM0$223.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM117$%AM114$%AM0$223>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%4)\n%6 = await %5\n%7 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM118$%AM114$%AM0",
          "label": "%AM118$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1696,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$225\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$225.constructor()>()\n%1 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(%0)\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$226\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$226.constructor()>()\n%3 = <@ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$226>%2\n%4 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(%3)\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(undefined)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$227\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$227.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM118$%AM114$%AM0$227>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%7)\n%9 = await %8\n%10 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM119$%AM114$%AM0",
          "label": "%AM119$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1707,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$229\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$229.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$229>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$230\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$230.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$230>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$231\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$231.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$231>%6\n%8 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%7)\n%9 = new @ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$232\ninstanceinvoke %9.<@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$232.constructor()>()\n%10 = <@ts_files/194.ts: %AC$%dflt$%AM119$%AM114$%AM0$232>%9\n%11 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%10)\n%12 = await %11\n%13 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%14 = %13.<@%unk/%unk: .called>\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\n%17 = %16.<@%unk/%unk: .be>\n%18 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM120$%AM114$%AM0",
          "label": "%AM120$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1718,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$234\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$234.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$234>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$235\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$235.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$235>%3\n%5 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$236\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$236.constructor()>()\n%7 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%8 = instanceinvoke %7.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%6)\n%9 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%10 = instanceinvoke %9.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %10.<@%unk/%unk: .resolves()>(undefined)\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$237\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$237.constructor()>()\n%12 = <@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$237>%11\n%13 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%12)\n%14 = await %13\n%15 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$239\ninstanceinvoke %15.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$239.constructor()>()\n%16 = new @ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$240\ninstanceinvoke %16.<@ts_files/194.ts: %AC$%dflt$%AM120$%AM114$%AM0$240.constructor()>()\n%17 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%18 = instanceinvoke %17.<@%unk/%unk: .calledWith()>(%15, %16, 'rawMessage', 'externalEventId', 'messageThreadId', 'externalFormattedText', 'localDomain')\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%23 = %22.<@%unk/%unk: .called>\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.sendThreadMessage.calledWith(\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'rawMessage',\n\t\t\t\t\t'externalEventId',\n\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t'localDomain',\n\t\t\t\t),\n\t\t\t).to.be.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM122$%AM121$%AM114$%AM0",
          "label": "%AM122$%AM121$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1744,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$241\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$241.constructor()>()\n%1 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%0)\n%3 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%4 = instanceinvoke %3.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %4.<@%unk/%unk: .resolves()>(undefined)\n%5 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\n%6 = instanceinvoke %5.<@%unk/%unk: .onThirdCall()>()\ninstanceinvoke %6.<@%unk/%unk: .resolves()>(undefined)\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$242\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$242.constructor()>()\n%8 = <@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$242>%7\n%9 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(%8)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$243\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$243.constructor()>()\n%11 = <@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$243>%10\n%12 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %12.<@%unk/%unk: .resolves()>(%11)\n%13 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %13.<@%unk/%unk: .resolves()>(undefined)\n%14 = new @ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$244\ninstanceinvoke %14.<@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$244.constructor()>()\n%15 = <@ts_files/194.ts: %AC$%dflt$%AM122$%AM121$%AM114$%AM0$244>%14\n%16 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%15)\n%17 = await %16\n%18 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%19 = %18.<@%unk/%unk: .called>\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%24 = %23.<@%unk/%unk: .called>\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onThirdCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM123$%AM121$%AM114$%AM0",
          "label": "%AM123$%AM121$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1759,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$246\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$246.constructor()>()\n%1 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%2 = instanceinvoke %1.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%0)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$247\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$247.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$247>%3\n%5 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$248\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$248.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$248>%6\n%8 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%7)\n%9 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%10 = instanceinvoke %9.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %10.<@%unk/%unk: .resolves()>(undefined)\n%11 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$249\ninstanceinvoke %11.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$249.constructor()>()\n%12 = <@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$249>%11\n%13 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%14 = instanceinvoke %13.<@%unk/%unk: .onThirdCall()>()\ninstanceinvoke %14.<@%unk/%unk: .resolves()>(%12)\n%15 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$250\ninstanceinvoke %15.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$250.constructor()>()\n%16 = <@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$250>%15\n%17 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedMessageReceived()>(%16)\n%18 = await %17\n%19 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$252\ninstanceinvoke %19.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$252.constructor()>()\n%20 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$253\ninstanceinvoke %20.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$253.constructor()>()\n%21 = new @ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$254\ninstanceinvoke %21.<@ts_files/194.ts: %AC$%dflt$%AM123$%AM121$%AM114$%AM0$254.constructor()>()\n%22 = messageAdapter.<@%unk/%unk: .sendThreadQuoteMessage>\n%23 = instanceinvoke %22.<@%unk/%unk: .calledWith()>(%19, %20, 'rawMessage', 'externalEventId', %21, 'localDomain', 'messageThreadId', 'externalFormattedText')\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\n%27 = messageAdapter.<@%unk/%unk: .sendThreadMessage>\n%28 = %27.<@%unk/%unk: .called>\n%29 = staticinvoke <@%unk/%unk: .expect()>(%28)\n%30 = %29.<@%unk/%unk: .to>\n%31 = %30.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves({} as any);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteMessage.calledWith(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'rawMessage',\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM121$%AM114$%AM0",
          "label": "%AM121$%AM114$%AM0",
          "start_line": 1,
          "end_line": 1743,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a quote message if its necessary to quote but the message to quote does not exists', %AM122$%AM121$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a quote message if its necessary to quote and the message to quote exists', %AM123$%AM121$%AM114$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onThirdCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves({} as any);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteMessage.calledWith(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'rawMessage',\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM114$%AM0",
          "label": "%AM114$%AM0",
          "start_line": 1,
          "end_line": 1669,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the thread root event id does not exist', %AM115$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the internal thread parent message does not exist', %AM116$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the room does not exists', %AM117$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the sender does not exists', %AM118$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the message was already be sent through federation and is just a reply back event', %AM119$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', %AM120$%AM114$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Quoting messages', %AM121$%AM114$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.sendThreadMessage.calledWith(\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'rawMessage',\n\t\t\t\t\t'externalEventId',\n\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t'localDomain',\n\t\t\t\t),\n\t\t\t).to.be.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onThirdCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves({} as any);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteMessage.calledWith(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'rawMessage',\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM125$%AM124$%AM0",
          "label": "%AM125$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1796,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM125$%AM124$%AM0$256\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM125$%AM124$%AM0$256.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM125$%AM124$%AM0$256>%0\n%2 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%1)\n%3 = await %2\n%4 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%5 = %4.<@ts_files/194.ts: %AC$%dflt$%dflt$2.called>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.be>\n%9 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%10 = %9.<@%unk/%unk: .called>\n%11 = staticinvoke <@%unk/%unk: .expect()>(%10)\n%12 = %11.<@%unk/%unk: .to>\n%13 = %12.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM126$%AM124$%AM0",
          "label": "%AM126$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1803,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(undefined)\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM126$%AM124$%AM0$257\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM126$%AM124$%AM0$257.constructor()>()\n%2 = <@ts_files/194.ts: %AC$%dflt$%AM126$%AM124$%AM0$257>%1\n%3 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%2)\n%4 = await %3\n%5 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%6 = %5.<@%unk/%unk: .called>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.to>\n%9 = %8.<@%unk/%unk: .be>\n%10 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM127$%AM124$%AM0",
          "label": "%AM127$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1812,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM127$%AM124$%AM0$259\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM127$%AM124$%AM0$259.constructor()>()\n%1 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(%0)\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM127$%AM124$%AM0$260\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM127$%AM124$%AM0$260.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM127$%AM124$%AM0$260>%3\n%5 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%4)\n%6 = await %5\n%7 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%8 = %7.<@ts_files/194.ts: %AC$%dflt$%dflt$4.called>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\n%11 = %10.<@%unk/%unk: .be>\n%12 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%13 = %12.<@%unk/%unk: .called>\n%14 = staticinvoke <@%unk/%unk: .expect()>(%13)\n%15 = %14.<@%unk/%unk: .to>\n%16 = %15.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM128$%AM124$%AM0",
          "label": "%AM128$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1822,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$262\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$262.constructor()>()\n%1 = <@ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$262>%0\n%2 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(%1)\n%3 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %3.<@%unk/%unk: .resolves()>(undefined)\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$263\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$263.constructor()>()\n%5 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$264\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$264.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM128$%AM124$%AM0$264>%6\n%8 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%7)\n%9 = await %8\n%10 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%11 = %10.<@%unk/%unk: .called>\n%12 = staticinvoke <@%unk/%unk: .expect()>(%11)\n%13 = %12.<@%unk/%unk: .to>\n%14 = %13.<@%unk/%unk: .be>\n%15 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%16 = %15.<@%unk/%unk: .called>\n%17 = staticinvoke <@%unk/%unk: .expect()>(%16)\n%18 = %17.<@%unk/%unk: .to>\n%19 = %18.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM129$%AM124$%AM0",
          "label": "%AM129$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1833,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = bridge.<@%unk/%unk: .getReadStreamForFileFromUrl>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>()\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$266\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$266.constructor()>()\n%4 = newarray (@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$266)[1]\n%4[0] = %3\nfiles = %4\n%5 = newarray (string)[2]\n%5[0] = 'attachment'\n%5[1] = 'attachment2'\nattachments = %5\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$267\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$267.constructor()>()\n%7 = <@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$267>%6\n%8 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%7)\n%9 = new @ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$268\ninstanceinvoke %9.<@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$268.constructor()>()\n%10 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%11 = instanceinvoke %10.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %11.<@%unk/%unk: .resolves()>(%9)\n%12 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%13 = instanceinvoke %12.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %13.<@%unk/%unk: .resolves()>(undefined)\n%14 = new @ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$269\ninstanceinvoke %14.<@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$269.constructor()>()\n%15 = <@ts_files/194.ts: %AC$%dflt$%AM129$%AM124$%AM0$269>%14\n%16 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%15)\n%17 = await %16\n%18 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%19 = instanceinvoke %18.<@%unk/%unk: .calledWith()>(user, room, files, attachments, 'externalEventId', 'messageThreadId')\n%20 = staticinvoke <@%unk/%unk: .expect()>(%19)\n%21 = %20.<@%unk/%unk: .to>\n%22 = %21.<@%unk/%unk: .be>\n%23 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%24 = %23.<@%unk/%unk: .called>\n%25 = staticinvoke <@%unk/%unk: .expect()>(%24)\n%26 = %25.<@%unk/%unk: .to>\n%27 = %26.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadFileMessage.calledWith(user, room, files, attachments, 'externalEventId', 'messageThreadId')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM131$%AM130$%AM124$%AM0",
          "label": "%AM131$%AM130$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1857,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %0.<@%unk/%unk: .resolves()>(room)\n%1 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(user)\n%2 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(undefined)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$272\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$272.constructor()>()\n%4 = <@ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$272>%3\n%5 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%4)\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$273\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$273.constructor()>()\n%7 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%8 = instanceinvoke %7.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %8.<@%unk/%unk: .resolves()>(%6)\n%9 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%10 = instanceinvoke %9.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %10.<@%unk/%unk: .resolves()>(undefined)\n%11 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%12 = instanceinvoke %11.<@%unk/%unk: .onThirdCall()>()\ninstanceinvoke %12.<@%unk/%unk: .resolves()>(undefined)\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$274\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$274.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM131$%AM130$%AM124$%AM0$274>%13\n%15 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%14)\n%16 = await %15\n%17 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%18 = %17.<@%unk/%unk: .called>\n%19 = staticinvoke <@%unk/%unk: .expect()>(%18)\n%20 = %19.<@%unk/%unk: .to>\n%21 = %20.<@%unk/%unk: .be>\n%22 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%23 = %22.<@%unk/%unk: .called>\n%24 = staticinvoke <@%unk/%unk: .expect()>(%23)\n%25 = %24.<@%unk/%unk: .to>\n%26 = %25.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM132$%AM130$%AM124$%AM0",
          "label": "%AM132$%AM130$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1879,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$277\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$277.constructor()>()\nmessageToReplyTo = <@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$277>%0\n%1 = roomAdapter.<@%unk/%unk: .getFederatedRoomByExternalId>\ninstanceinvoke %1.<@%unk/%unk: .resolves()>(room)\n%2 = userAdapter.<@%unk/%unk: .getFederatedUserByExternalId>\ninstanceinvoke %2.<@%unk/%unk: .resolves()>(user)\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$279\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$279.constructor()>()\n%4 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%5 = instanceinvoke %4.<@%unk/%unk: .onFirstCall()>()\ninstanceinvoke %5.<@%unk/%unk: .resolves()>(%3)\n%6 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%7 = instanceinvoke %6.<@%unk/%unk: .onSecondCall()>()\ninstanceinvoke %7.<@%unk/%unk: .resolves()>(undefined)\n%8 = messageAdapter.<@%unk/%unk: .getMessageByFederationId>\n%9 = instanceinvoke %8.<@%unk/%unk: .onThirdCall()>()\ninstanceinvoke %9.<@%unk/%unk: .resolves()>(messageToReplyTo)\n%10 = new @ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$280\ninstanceinvoke %10.<@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$280.constructor()>()\n%11 = newarray (@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$280)[1]\n%11[0] = %10\nfiles = %11\n%12 = newarray (string)[2]\n%12[0] = 'attachment'\n%12[1] = 'attachment2'\nattachments = %12\n%13 = new @ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$281\ninstanceinvoke %13.<@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$281.constructor()>()\n%14 = <@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$281>%13\n%15 = fileAdapter.<@%unk/%unk: .uploadFile>\ninstanceinvoke %15.<@%unk/%unk: .resolves()>(%14)\n%16 = new @ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$282\ninstanceinvoke %16.<@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$282.constructor()>()\n%17 = <@ts_files/194.ts: %AC$%dflt$%AM132$%AM130$%AM124$%AM0$282>%16\n%18 = instanceinvoke service.<@%unk/%unk: .onExternalThreadedFileMessageReceived()>(%17)\n%19 = await %18\n%20 = messageAdapter.<@%unk/%unk: .sendThreadQuoteFileMessage>\n%21 = instanceinvoke %20.<@%unk/%unk: .calledWith()>(user, room, files, attachments, 'externalEventId', messageToReplyTo, 'localDomain', 'messageThreadId')\n%22 = staticinvoke <@%unk/%unk: .expect()>(%21)\n%23 = %22.<@%unk/%unk: .to>\n%24 = %23.<@%unk/%unk: .be>\n%25 = messageAdapter.<@%unk/%unk: .sendThreadFileMessage>\n%26 = %25.<@%unk/%unk: .called>\n%27 = staticinvoke <@%unk/%unk: .expect()>(%26)\n%28 = %27.<@%unk/%unk: .to>\n%29 = %28.<@%unk/%unk: .be>\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t}"
        },
        {
          "type": "function",
          "name": "%AM130$%AM124$%AM0",
          "label": "%AM130$%AM124$%AM0",
          "start_line": 1,
          "end_line": 1856,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a quote message if its necessary to quote but the message to quote does not exists', %AM131$%AM130$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a quote message if its necessary to quote and the message to quote exists', %AM132$%AM130$%AM124$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t}"
        },
        {
          "type": "function",
          "name": "%AM124$%AM0",
          "label": "%AM124$%AM0",
          "start_line": 1,
          "end_line": 1789,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM124$%AM0$255\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM124$%AM0$255.constructor()>()\nuser = instanceinvoke FederatedUser.<@%unk/%unk: .createInstance()>('externalInviterId', %0)\n%1 = RoomType.<@%unk/%unk: .CHANNEL>\nroom = instanceinvoke FederatedRoom.<@%unk/%unk: .createInstance()>('externalRoomId', 'normalizedRoomId', user, %1, 'externalRoomName')\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the thread root event id does not exist', %AM125$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the internal thread parent message does not exist', %AM126$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the room does not exists', %AM127$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should NOT send a message if the sender does not exists', %AM128$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should send a message if the room and the sender already exists', %AM129$%AM124$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('Quoting messages', %AM130$%AM124$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadFileMessage.calledWith(user, room, files, attachments, 'externalEventId', 'messageThreadId')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t}"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 1562,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: %dflt\nservice = undefined\n%0 = new @ts_files/194.ts: %AC$%dflt$%AM0$6\ninstanceinvoke %0.<@ts_files/194.ts: %AC$%dflt$%AM0$6.constructor()>()\nroomAdapter = %0\n%1 = new @ts_files/194.ts: %AC$%dflt$%AM0$7\ninstanceinvoke %1.<@ts_files/194.ts: %AC$%dflt$%AM0$7.constructor()>()\nuserAdapter = %1\n%2 = new @ts_files/194.ts: %AC$%dflt$%AM0$8\ninstanceinvoke %2.<@ts_files/194.ts: %AC$%dflt$%AM0$8.constructor()>()\nmessageAdapter = %2\n%3 = new @ts_files/194.ts: %AC$%dflt$%AM0$9\ninstanceinvoke %3.<@ts_files/194.ts: %AC$%dflt$%AM0$9.constructor()>()\nsettingsAdapter = %3\n%4 = new @ts_files/194.ts: %AC$%dflt$%AM0$10\ninstanceinvoke %4.<@ts_files/194.ts: %AC$%dflt$%AM0$10.constructor()>()\nnotificationsAdapter = %4\n%5 = new @ts_files/194.ts: %AC$%dflt$%AM0$11\ninstanceinvoke %5.<@ts_files/194.ts: %AC$%dflt$%AM0$11.constructor()>()\nfileAdapter = %5\n%6 = new @ts_files/194.ts: %AC$%dflt$%AM0$12\ninstanceinvoke %6.<@ts_files/194.ts: %AC$%dflt$%AM0$12.constructor()>()\nqueueInstance = %6\n%7 = new @ts_files/194.ts: %AC$%dflt$%AM0$13\ninstanceinvoke %7.<@ts_files/194.ts: %AC$%dflt$%AM0$13.constructor()>()\nbridge = %7\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .afterEach()>(%AM2$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onCreateRoom()', %AM3$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onChangeRoomMembership()', %AM9$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onExternalFileMessageReceived()', %AM61$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onExternalMessageReceived()', %AM68$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onChangeJoinRules()', %AM76$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onChangeRoomName()', %AM80$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onChangeRoomTopic()', %AM87$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onRedactEvent()', %AM91$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onExternalMessageEditedReceived()', %AM98$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onChangeRoomPowerLevels()', %AM108$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onExternalThreadedMessageReceived()', %AM114$%AM0)\nstaticinvoke <@%unk/%unk: .describe()>('#onExternalThreadedFileMessageReceived()', %AM124$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1562,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n\tlet service: typeof FederationRoomServiceReceiver;\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByExternalId: sinon.stub(),\n\t\tcreateFederatedRoom: sinon.stub(),\n\t\tcreateFederatedRoomForDirectMessage: sinon.stub(),\n\t\tremoveDirectMessageRoom: sinon.stub(),\n\t\tremoveUserFromRoom: sinon.stub(),\n\t\taddUserToRoom: sinon.stub(),\n\t\tisUserAlreadyJoined: sinon.stub(),\n\t\tgetInternalRoomById: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t\tupdateRoomType: sinon.stub(),\n\t\tupdateRoomName: sinon.stub(),\n\t\tupdateRoomTopic: sinon.stub(),\n\t\tapplyRoomRolesToUser: sinon.stub(),\n\t\tupdateDisplayRoomName: sinon.stub(),\n\t\taddUsersToRoomWhenJoinExternalPublicRoom: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tupdateFederationAvatar: sinon.stub(),\n\t\tsetAvatar: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t\tupdateRealName: sinon.stub(),\n\t\tgetFederatedUsersByExternalIds: sinon.stub(),\n\t};\n\tconst messageAdapter = {\n\t\tsendMessage: sinon.stub(),\n\t\tsendFileMessage: sinon.stub(),\n\t\tdeleteMessage: sinon.stub(),\n\t\tgetMessageByFederationId: sinon.stub(),\n\t\teditMessage: sinon.stub(),\n\t\tfindOneByFederationIdOnReactions: sinon.stub(),\n\t\tunreactToMessage: sinon.stub(),\n\t\tsendQuoteMessage: sinon.stub(),\n\t\tsendQuoteFileMessage: sinon.stub(),\n\t\teditQuotedMessage: sinon.stub(),\n\t\tgetMessageToEditWhenReplyAndQuote: sinon.stub(),\n\t\tsendThreadQuoteMessage: sinon.stub(),\n\t\tsendThreadMessage: sinon.stub(),\n\t\tsendThreadFileMessage: sinon.stub(),\n\t\tsendThreadQuoteFileMessage: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t};\n\tconst notificationsAdapter = {\n\t\tsubscribeToUserTypingEventsOnFederatedRoomId: sinon.stub(),\n\t\tbroadcastUserTypingOnRoom: sinon.stub(),\n\t};\n\tconst fileAdapter = {\n\t\tuploadFile: sinon.stub(),\n\t};\n\tconst queueInstance = {\n\t\taddToQueue: sinon.stub(),\n\t};\n\tconst bridge = {\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),\n\t\textractHomeserverOrigin: sinon.stub().returns('localDomain'),\n\t\tjoinRoom: sinon.stub(),\n\t\tconvertMatrixUrlToHttp: sinon.stub().returns('toHttpUrl'),\n\t\tgetReadStreamForFileFromUrl: sinon.stub(),\n\t\tgetRoomHistoricalJoinEvents: sinon.stub(),\n\t\tgetRoomData: sinon.stub(),\n\t};\n\tbeforeEach(() => {\n\t\tservice = new FederationRoomServiceReceiver(\n\t\t\troomAdapter as any,\n\t\t\tuserAdapter as any,\n\t\t\tmessageAdapter as any,\n\t\t\tfileAdapter as any,\n\t\t\tsettingsAdapter as any,\n\t\t\tnotificationsAdapter as any,\n\t\t\tqueueInstance as any,\n\t\t\tbridge as any,\n\t\t);\n\t});\n\tafterEach(() => {\n\t\troomAdapter.getFederatedRoomByExternalId.reset();\n\t\troomAdapter.createFederatedRoom.reset();\n\t\troomAdapter.createFederatedRoomForDirectMessage.reset();\n\t\troomAdapter.removeDirectMessageRoom.reset();\n\t\troomAdapter.updateRoomType.reset();\n\t\troomAdapter.updateRoomName.reset();\n\t\troomAdapter.updateFederatedRoomByInternalRoomId.reset();\n\t\troomAdapter.updateRoomTopic.reset();\n\t\troomAdapter.removeUserFromRoom.reset();\n\t\troomAdapter.isUserAlreadyJoined.reset();\n\t\troomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.reset();\n\t\troomAdapter.getInternalRoomById.reset();\n\t\troomAdapter.addUserToRoom.reset();\n\t\troomAdapter.applyRoomRolesToUser.reset();\n\t\troomAdapter.updateDisplayRoomName.reset();\n\t\tuserAdapter.getFederatedUserByExternalId.reset();\n\t\tuserAdapter.createFederatedUser.reset();\n\t\tuserAdapter.updateFederationAvatar.reset();\n\t\tuserAdapter.setAvatar.reset();\n\t\tuserAdapter.getInternalUserByUsername.reset();\n\t\tuserAdapter.updateRealName.reset();\n\t\tuserAdapter.getFederatedUsersByExternalIds.reset();\n\t\tmessageAdapter.sendMessage.reset();\n\t\tmessageAdapter.sendFileMessage.reset();\n\t\tmessageAdapter.deleteMessage.reset();\n\t\tmessageAdapter.getMessageByFederationId.reset();\n\t\tmessageAdapter.editMessage.reset();\n\t\tmessageAdapter.unreactToMessage.reset();\n\t\tmessageAdapter.findOneByFederationIdOnReactions.reset();\n\t\tmessageAdapter.sendQuoteFileMessage.reset();\n\t\tmessageAdapter.sendQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadMessage.reset();\n\t\tmessageAdapter.sendThreadFileMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteFileMessage.reset();\n\t\tbridge.extractHomeserverOrigin.reset();\n\t\tbridge.joinRoom.reset();\n\t\tbridge.getUserProfileInformation.reset();\n\t\tbridge.getReadStreamForFileFromUrl.reset();\n\t\tbridge.getRoomData.reset();\n\t\tbridge.getRoomHistoricalJoinEvents.reset();\n\t\tfileAdapter.uploadFile.reset();\n\t\tqueueInstance.addToQueue.reset();\n\t});\n\tdescribe('#onCreateRoom()', () => {\n\t\tit('should NOT create users nor room if the room already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tawait service.onCreateRoom({} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create users nor room if the room was created internally and programatically even if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it is not a DM message and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'c' });\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it does not exists and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room if it was created internally and programatically but it is a DM message but it should NOT create a new DM Room(this is necessary due to a race condition on matrix events)', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'd' });\n\t\t\tawait service.onCreateRoom({\n\t\t\t\twasInternallyProgramaticallyCreated: true,\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.calledWith('internalRoomId', 'externalRoomId')).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomMembership()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to LOCAL', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.REMOTE } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method logic if the event was generated on the proxy home server, it is NOT a join event (user joining himself), but the room does not exists yet', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create the inviter if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the inviter if it does not exists', async () => {\n\t\t\tconst inviter = FederatedUser.createInstance('externalInviterId', {\n\t\t\t\tname: 'inviterUsernameOnly',\n\t\t\t\tusername: 'inviterUsernameOnly',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\tnormalizedInviterId: 'normalizedInviterId',\n\t\t\t\tinviterUsernameOnly: 'inviterUsernameOnly',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\t\tit('should NOT create the invitee if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the invitee if it does not exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onSecondCall().resolves(undefined);\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\t\tit('should throw an error if the invitee user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should throw an error if the inviter user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should NOT create the room if it does not exists yet AND the event origin is REMOTE but there is no room type on the event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: undefined,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state)', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state), but not automatically join the invitee if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state, but not automatically join the user if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves(['event1', 'event2']);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\t['event1', 'event2'].forEach((event) => expect(queueInstance.addToQueue.calledWith(event)).to.be.true);\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND NOT to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\texpect(queueInstance.addToQueue.called).to.be.false;\n\t\t});\n\t\tit('should call the update name function if the name is inside the received input', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tspy.calledWith({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomName: 'externalRoomName',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\texternalSenderId: 'externalInviterId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should NOT create the room if it already exists yet AND the event origin is REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should remove the user from room if its a LEAVE event and the user is in the room already', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove the user from room if its a LEAVE event and the user is NOT in the room anymore', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove and recreate the DM room if the user is already part of the room (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference(\n\t\t\t\t'externalRoomId',\n\t\t\t\t{ usernames: [user.getUsername() as string] } as any,\n\t\t\t\t[user, user],\n\t\t\t);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t});\n\t\tit('should remove and recreate the DM room if the user is part of the room yet (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference('externalRoomId', { usernames: [] } as any, [user, user]);\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(invitee);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user, invitee]);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.calledWith(dmRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT add the user to the room if its NOT a LEAVE event but the user is already in the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event providing the inviter when the user is NOT joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t});\n\t\tit('should join the room using the bridge if its NOT a leave event AND the invitee is from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should NOT join the room using the bridge if its NOT a leave event AND the invitee is NOT from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event NOT providing the inviter when the user is joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t});\n\t\tdescribe('Handling users auto-joining', () => {\n\t\t\tit('should subscribe to the typings events if the room already exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT add the user to the room if the user is already a room member', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should add the user to the room if the user is NOT a room member yet', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if it was not possible to retrieve the information from the room from the bridge', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT create the room if it there is already a room creation process already running', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves({ creator: {} });\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the creator user only if it does not exists yet and use the provided username if its from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: 'creatorId', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\t\texpect(spy.calledWith('creatorId', 'creatorUsername', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should create the creator user if it does not exists yet and use the external id as username if its not from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\texpect(spy.calledWith('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if the creator does not exists nor was created successfully previously', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the room using the external room name if its original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'roomName'),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create the room using nothing if its not original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, undefined),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should dispatch a room name event if its not from the same homeserver and it was possible to retrieve the name from the bridge query', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves();\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tspy.calledWith({\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create federated users for each member of the room excluding the one joining and the creator, and add them to the room ', async () => {\n\t\t\t\tconst stub = sinon.stub(service, 'createFederatedUserAndReturnIt');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tstub.resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(stub.callCount).to.be.equal(3);\n\t\t\t\texpect(stub.getCall(1).calledWith('user1')).to.be.true;\n\t\t\t\texpect(stub.getCall(2).calledWith('user2')).to.be.true;\n\t\t\t\texpect(roomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.calledWith([user, user])).to.be.true;\n\t\t\t});\n\t\t\tit('should add the user to the room and subscribe to typings events if everything was done correctly', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves(user);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t});\n\t\tdescribe('User profile changed event', () => {\n\t\t\tit('should NOT call the function to update the user avatar if the event does not include an avatarUrl property', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tconst eventForUserProfileChanges = {\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tuserProfile: {\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t},\n\t\t\t} as any;\n\t\t\tit('should NOT call the function to update the avatar internally if the user does not exists', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar nor the display name if both does not exists', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: {} });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url nor the display name if the user is from the local home server', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createInstance('externalInviterId', {\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url if the url received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst userAvatar = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.calledWith(userAvatar, 'toHttpUrl')).to.be.true;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.calledWith(userAvatar.getInternalId(), 'avatarUrl')).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT update the display name if the name received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst user = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.calledWith(user.getInternalReference(), 'displayName')).to.be.true;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalFileMessageReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.calledWith(user, room, files, attachments)).to.be.true;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalMessageReceived()', () => {\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.calledWith({}, {}, 'rawMessage', 'externalFormattedText', 'externalEventId', 'localDomain')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves({} as any);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteMessage.calledWith({}, {}, 'externalFormattedText', 'rawMessage', 'externalEventId', {}, 'localDomain'),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onChangeJoinRules()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room type if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room type if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should change the room type if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.PRIVATE_GROUP,\n\t\t\t} as any);\n\t\t\troom.changeRoomType(RoomType.PRIVATE_GROUP);\n\t\t\texpect(roomAdapter.updateRoomType.calledWith(room)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomName()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room name if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the room is an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:localDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room name if the room is NOT an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:externalDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\troom.changeRoomName('!externalRoomId:externalDomain');\n\t\t\texpect(roomAdapter.updateRoomName.calledWith(room)).to.be.true;\n\t\t});\n\t\tit('should NOT change the room fname if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room fname if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName2',\n\t\t\t} as any);\n\t\t\troom.changeDisplayRoomName('normalizedRoomName2');\n\t\t\texpect(roomAdapter.updateDisplayRoomName.calledWith(room, user)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomTopic()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room topic if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room topic if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should change the room topic if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\troom.changeRoomTopic('roomTopic');\n\t\t\texpect(roomAdapter.updateRoomTopic.calledWith(room, user)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onRedactEvent()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT delete the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should delete the message if its a raw text redact handler', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'msg' });\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.calledWith({ msg: 'msg' }, user)).to.be.true;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT unreact if the message was not reacted before by the user', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves({\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should unreact if the message was reacted before by the user', async () => {\n\t\t\tconst message = {\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(message);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.calledWith(user, message, 'reaction', 'redactsEvent')).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onExternalMessageEditedReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the content of the message is equal of the oldest one', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'newRawMessage' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should update the message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.editMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', { msg: 'differentOne' }, 'localDomain'),\n\t\t\t).to.be.true;\n\t\t});\n\t\tdescribe('Editing quoted messages', () => {\n\t\t\tit('should NOT edit the quoted message if the event was generated locally (the message edited was on local server only)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne', attachments: [{ message_link: 'link' }] });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT edit the quoted message if the event was remotely generated but the message content is the same as the current one (the message is already up to date)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should edit the quoted message if the event was remotely the message content is outdated', async () => {\n\t\t\t\tconst message = {\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t};\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(message);\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')).to.be\n\t\t\t\t\t.true;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onChangeRoomPowerLevels()', () => {\n\t\tconst user = FederatedUser.createInstance('externalUserId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the room roles if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if there is no target users', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room roles adding one role to be added', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: ['owner'],\n\t\t\t\t\trolesToRemove: [],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should update the room roles adding one role to be removed', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: [],\n\t\t\t\t\trolesToRemove: ['owner'],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onExternalThreadedMessageReceived()', () => {\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.sendThreadMessage.calledWith(\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'rawMessage',\n\t\t\t\t\t'externalEventId',\n\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t'localDomain',\n\t\t\t\t),\n\t\t\t).to.be.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onThirdCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves({} as any);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteMessage.calledWith(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'rawMessage',\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalThreadedFileMessageReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadFileMessage.calledWith(user, room, files, attachments, 'externalEventId', 'messageThreadId')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ObjectId",
      "label": "ObjectId",
      "start_line": 1,
      "end_line": 34,
      "functions": [
        {
          "type": "function",
          "name": "toHexString",
          "label": "toHexString",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/194.ts: ObjectId\nreturn 'hexString'",
              "start_line": 1,
              "end_line": 34,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "toHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$%instInit$1",
      "label": "%AC$%AC$%dflt$%dflt$0$%instInit$1",
      "start_line": 9,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$0",
      "label": "%AC$%dflt$%dflt$0",
      "start_line": 8,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tmongodb: {\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t},\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$2$%instInit$3",
      "label": "%AC$%AC$%dflt$%dflt$2$%instInit$3",
      "start_line": 19,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t'ObjectId': class ObjectId {\n\t\t\ttoHexString(): string {\n\t\t\t\treturn 'hexString';\n\t\t\t}\n\t\t},\n\t\t'@global': true,\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$2",
      "label": "%AC$%dflt$%dflt$2",
      "start_line": 18,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\tmongodb: {\n\t\t'ObjectId': class ObjectId {\n\t\t\ttoHexString(): string {\n\t\t\t\treturn 'hexString';\n\t\t\t}\n\t\t},\n\t\t'@global': true,\n\t},\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$4$%instInit$5",
      "label": "%AC$%AC$%dflt$%dflt$4$%instInit$5",
      "start_line": 31,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$4",
      "label": "%AC$%dflt$%dflt$4",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tmongodb: {\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t},\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$6",
      "label": "%AC$%dflt$%AM0$6",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tgetFederatedRoomByExternalId: sinon.stub(),\n\t\tcreateFederatedRoom: sinon.stub(),\n\t\tcreateFederatedRoomForDirectMessage: sinon.stub(),\n\t\tremoveDirectMessageRoom: sinon.stub(),\n\t\tremoveUserFromRoom: sinon.stub(),\n\t\taddUserToRoom: sinon.stub(),\n\t\tisUserAlreadyJoined: sinon.stub(),\n\t\tgetInternalRoomById: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t\tupdateRoomType: sinon.stub(),\n\t\tupdateRoomName: sinon.stub(),\n\t\tupdateRoomTopic: sinon.stub(),\n\t\tapplyRoomRolesToUser: sinon.stub(),\n\t\tupdateDisplayRoomName: sinon.stub(),\n\t\taddUsersToRoomWhenJoinExternalPublicRoom: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$7",
      "label": "%AC$%dflt$%AM0$7",
      "start_line": 59,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tupdateFederationAvatar: sinon.stub(),\n\t\tsetAvatar: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t\tupdateRealName: sinon.stub(),\n\t\tgetFederatedUsersByExternalIds: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$8",
      "label": "%AC$%dflt$%AM0$8",
      "start_line": 68,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tsendMessage: sinon.stub(),\n\t\tsendFileMessage: sinon.stub(),\n\t\tdeleteMessage: sinon.stub(),\n\t\tgetMessageByFederationId: sinon.stub(),\n\t\teditMessage: sinon.stub(),\n\t\tfindOneByFederationIdOnReactions: sinon.stub(),\n\t\tunreactToMessage: sinon.stub(),\n\t\tsendQuoteMessage: sinon.stub(),\n\t\tsendQuoteFileMessage: sinon.stub(),\n\t\teditQuotedMessage: sinon.stub(),\n\t\tgetMessageToEditWhenReplyAndQuote: sinon.stub(),\n\t\tsendThreadQuoteMessage: sinon.stub(),\n\t\tsendThreadMessage: sinon.stub(),\n\t\tsendThreadFileMessage: sinon.stub(),\n\t\tsendThreadQuoteFileMessage: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$9",
      "label": "%AC$%dflt$%AM0$9",
      "start_line": 85,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$10",
      "label": "%AC$%dflt$%AM0$10",
      "start_line": 88,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tsubscribeToUserTypingEventsOnFederatedRoomId: sinon.stub(),\n\t\tbroadcastUserTypingOnRoom: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$11",
      "label": "%AC$%dflt$%AM0$11",
      "start_line": 92,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tuploadFile: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$12",
      "label": "%AC$%dflt$%AM0$12",
      "start_line": 95,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\taddToQueue: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM0$13$%instInit$14",
      "label": "%AC$%AC$%dflt$%AM0$13$%instInit$14",
      "start_line": 99,
      "end_line": 99,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM0$13",
      "label": "%AC$%dflt$%AM0$13",
      "start_line": 98,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),\n\t\textractHomeserverOrigin: sinon.stub().returns('localDomain'),\n\t\tjoinRoom: sinon.stub(),\n\t\tconvertMatrixUrlToHttp: sinon.stub().returns('toHttpUrl'),\n\t\tgetReadStreamForFileFromUrl: sinon.stub(),\n\t\tgetRoomHistoricalJoinEvents: sinon.stub(),\n\t\tgetRoomData: sinon.stub(),\n\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM3$%AM0$15",
      "label": "%AC$%dflt$%AM4$%AM3$%AM0$15",
      "start_line": 166,
      "end_line": 166,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM3$%AM0$16",
      "label": "%AC$%dflt$%AM4$%AM3$%AM0$16",
      "start_line": 167,
      "end_line": 167,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM5$%AM3$%AM0$17",
      "label": "%AC$%dflt$%AM5$%AM3$%AM0$17",
      "start_line": 173,
      "end_line": 173,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ wasInternallyProgramaticallyCreated: true }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM6$%AM3$%AM0$18",
      "label": "%AC$%dflt$%AM6$%AM3$%AM0$18",
      "start_line": 179,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ t: 'c' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM6$%AM3$%AM0$19",
      "label": "%AC$%dflt$%AM6$%AM3$%AM0$19",
      "start_line": 180,
      "end_line": 180,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ wasInternallyProgramaticallyCreated: true }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM3$%AM0$20",
      "label": "%AC$%dflt$%AM7$%AM3$%AM0$20",
      "start_line": 188,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ wasInternallyProgramaticallyCreated: true }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM3$%AM0$21",
      "label": "%AC$%dflt$%AM8$%AM3$%AM0$21",
      "start_line": 195,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ t: 'd' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM3$%AM0$22",
      "label": "%AC$%dflt$%AM8$%AM3$%AM0$22",
      "start_line": 196,
      "end_line": 196,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\twasInternallyProgramaticallyCreated: true,\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM9$%AM0$23",
      "label": "%AC$%dflt$%AM9$%AM0$23",
      "start_line": 207,
      "end_line": 207,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM10$%AM9$%AM0$24",
      "label": "%AC$%dflt$%AM10$%AM9$%AM0$24",
      "start_line": 216,
      "end_line": 216,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM11$%AM9$%AM0$25",
      "label": "%AC$%dflt$%AM11$%AM9$%AM0$25",
      "start_line": 222,
      "end_line": 222,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.REMOTE }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM12$%AM9$%AM0$26",
      "label": "%AC$%dflt$%AM12$%AM9$%AM0$26",
      "start_line": 228,
      "end_line": 228,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM13$%AM9$%AM0$27",
      "label": "%AC$%dflt$%AM13$%AM9$%AM0$27",
      "start_line": 239,
      "end_line": 239,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM14$%AM9$%AM0$28",
      "label": "%AC$%dflt$%AM14$%AM9$%AM0$28",
      "start_line": 243,
      "end_line": 243,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'inviterUsernameOnly',\n\t\t\t\tusername: 'inviterUsernameOnly',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM14$%AM9$%AM0$29",
      "label": "%AC$%dflt$%AM14$%AM9$%AM0$29",
      "start_line": 252,
      "end_line": 252,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\tnormalizedInviterId: 'normalizedInviterId',\n\t\t\t\tinviterUsernameOnly: 'inviterUsernameOnly',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM15$%AM9$%AM0$30",
      "label": "%AC$%dflt$%AM15$%AM9$%AM0$30",
      "start_line": 264,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM16$%AM9$%AM0$31",
      "label": "%AC$%dflt$%AM16$%AM9$%AM0$31",
      "start_line": 268,
      "end_line": 268,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM16$%AM9$%AM0$32",
      "label": "%AC$%dflt$%AM16$%AM9$%AM0$32",
      "start_line": 277,
      "end_line": 277,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM17$%AM9$%AM0$33",
      "label": "%AC$%dflt$%AM17$%AM9$%AM0$33",
      "start_line": 289,
      "end_line": 289,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM18$%AM9$%AM0$34",
      "label": "%AC$%dflt$%AM18$%AM9$%AM0$34",
      "start_line": 301,
      "end_line": 301,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM19$%AM9$%AM0$35",
      "label": "%AC$%dflt$%AM19$%AM9$%AM0$35",
      "start_line": 313,
      "end_line": 313,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: undefined,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM20$%AM9$%AM0$36",
      "label": "%AC$%dflt$%AM20$%AM9$%AM0$36",
      "start_line": 325,
      "end_line": 325,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM20$%AM9$%AM0$37",
      "label": "%AC$%dflt$%AM20$%AM9$%AM0$37",
      "start_line": 335,
      "end_line": 335,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM21$%AM9$%AM0$38",
      "label": "%AC$%dflt$%AM21$%AM9$%AM0$38",
      "start_line": 350,
      "end_line": 350,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM21$%AM9$%AM0$39",
      "label": "%AC$%dflt$%AM21$%AM9$%AM0$39",
      "start_line": 360,
      "end_line": 360,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM22$%AM9$%AM0$40",
      "label": "%AC$%dflt$%AM22$%AM9$%AM0$40",
      "start_line": 375,
      "end_line": 375,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM22$%AM9$%AM0$41$%instInit$42",
      "label": "%AC$%AC$%dflt$%AM22$%AM9$%AM0$41$%instInit$42",
      "start_line": 393,
      "end_line": 393,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM22$%AM9$%AM0$41",
      "label": "%AC$%dflt$%AM22$%AM9$%AM0$41",
      "start_line": 385,
      "end_line": 385,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM23$%AM9$%AM0$43",
      "label": "%AC$%dflt$%AM23$%AM9$%AM0$43",
      "start_line": 407,
      "end_line": 407,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM23$%AM9$%AM0$44$%instInit$45",
      "label": "%AC$%AC$%dflt$%AM23$%AM9$%AM0$44$%instInit$45",
      "start_line": 425,
      "end_line": 425,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM23$%AM9$%AM0$44",
      "label": "%AC$%dflt$%AM23$%AM9$%AM0$44",
      "start_line": 417,
      "end_line": 417,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM24$%AM9$%AM0$46",
      "label": "%AC$%dflt$%AM24$%AM9$%AM0$46",
      "start_line": 438,
      "end_line": 438,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM24$%AM9$%AM0$47",
      "label": "%AC$%dflt$%AM24$%AM9$%AM0$47",
      "start_line": 447,
      "end_line": 447,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM26$%AM9$%AM0$48",
      "label": "%AC$%dflt$%AM26$%AM9$%AM0$48",
      "start_line": 463,
      "end_line": 463,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM26$%AM9$%AM0$49",
      "label": "%AC$%dflt$%AM26$%AM9$%AM0$49",
      "start_line": 472,
      "end_line": 472,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM27$%AM9$%AM0$50",
      "label": "%AC$%dflt$%AM27$%AM9$%AM0$50",
      "start_line": 488,
      "end_line": 488,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM27$%AM9$%AM0$51",
      "label": "%AC$%dflt$%AM27$%AM9$%AM0$51",
      "start_line": 498,
      "end_line": 498,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM27$%AM9$%AM0$52",
      "label": "%AC$%dflt$%AM27$%AM9$%AM0$52",
      "start_line": 510,
      "end_line": 510,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomName: 'externalRoomName',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\texternalSenderId: 'externalInviterId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM28$%AM9$%AM0$53",
      "label": "%AC$%dflt$%AM28$%AM9$%AM0$53",
      "start_line": 522,
      "end_line": 522,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM29$%AM9$%AM0$54",
      "label": "%AC$%dflt$%AM29$%AM9$%AM0$54",
      "start_line": 538,
      "end_line": 538,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM30$%AM9$%AM0$55",
      "label": "%AC$%dflt$%AM30$%AM9$%AM0$55",
      "start_line": 554,
      "end_line": 554,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM31$%AM9$%AM0$56",
      "label": "%AC$%dflt$%AM31$%AM9$%AM0$56",
      "start_line": 569,
      "end_line": 569,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ usernames: [user.getUsername() as string] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM31$%AM9$%AM0$57",
      "label": "%AC$%dflt$%AM31$%AM9$%AM0$57",
      "start_line": 574,
      "end_line": 574,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM32$%AM9$%AM0$58",
      "label": "%AC$%dflt$%AM32$%AM9$%AM0$58",
      "start_line": 586,
      "end_line": 586,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ usernames: [] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM32$%AM9$%AM0$59",
      "label": "%AC$%dflt$%AM32$%AM9$%AM0$59",
      "start_line": 587,
      "end_line": 587,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM32$%AM9$%AM0$60",
      "label": "%AC$%dflt$%AM32$%AM9$%AM0$60",
      "start_line": 595,
      "end_line": 595,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM33$%AM9$%AM0$61",
      "label": "%AC$%dflt$%AM33$%AM9$%AM0$61",
      "start_line": 612,
      "end_line": 612,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM34$%AM9$%AM0$62",
      "label": "%AC$%dflt$%AM34$%AM9$%AM0$62",
      "start_line": 630,
      "end_line": 630,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM35$%AM9$%AM0$63",
      "label": "%AC$%dflt$%AM35$%AM9$%AM0$63",
      "start_line": 649,
      "end_line": 649,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM36$%AM9$%AM0$64",
      "label": "%AC$%dflt$%AM36$%AM9$%AM0$64",
      "start_line": 665,
      "end_line": 665,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM37$%AM9$%AM0$65",
      "label": "%AC$%dflt$%AM37$%AM9$%AM0$65",
      "start_line": 680,
      "end_line": 680,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM39$%AM38$%AM9$%AM0$66",
      "label": "%AC$%dflt$%AM39$%AM38$%AM9$%AM0$66",
      "start_line": 700,
      "end_line": 700,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM40$%AM38$%AM9$%AM0$67",
      "label": "%AC$%dflt$%AM40$%AM38$%AM9$%AM0$67",
      "start_line": 716,
      "end_line": 716,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM41$%AM38$%AM9$%AM0$68",
      "label": "%AC$%dflt$%AM41$%AM38$%AM9$%AM0$68",
      "start_line": 732,
      "end_line": 732,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM42$%AM38$%AM9$%AM0$69",
      "label": "%AC$%dflt$%AM42$%AM38$%AM9$%AM0$69",
      "start_line": 750,
      "end_line": 750,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM43$%AM38$%AM9$%AM0$70$%instInit$71",
      "label": "%AC$%AC$%dflt$%AM43$%AM38$%AM9$%AM0$70$%instInit$71",
      "start_line": 767,
      "end_line": 767,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM43$%AM38$%AM9$%AM0$70",
      "label": "%AC$%dflt$%AM43$%AM38$%AM9$%AM0$70",
      "start_line": 767,
      "end_line": 767,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ creator: {} }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM43$%AM38$%AM9$%AM0$72",
      "label": "%AC$%dflt$%AM43$%AM38$%AM9$%AM0$72",
      "start_line": 768,
      "end_line": 768,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM44$%AM38$%AM9$%AM0$73$%instInit$74",
      "label": "%AC$%AC$%dflt$%AM44$%AM38$%AM9$%AM0$73$%instInit$74",
      "start_line": 787,
      "end_line": 787,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: 'creatorId', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM44$%AM38$%AM9$%AM0$73",
      "label": "%AC$%dflt$%AM44$%AM38$%AM9$%AM0$73",
      "start_line": 787,
      "end_line": 787,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ creator: { id: 'creatorId', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM44$%AM38$%AM9$%AM0$75",
      "label": "%AC$%dflt$%AM44$%AM38$%AM9$%AM0$75",
      "start_line": 789,
      "end_line": 789,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM45$%AM38$%AM9$%AM0$76$%instInit$77",
      "label": "%AC$%AC$%dflt$%AM45$%AM38$%AM9$%AM0$76$%instInit$77",
      "start_line": 809,
      "end_line": 809,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM45$%AM38$%AM9$%AM0$76",
      "label": "%AC$%dflt$%AM45$%AM38$%AM9$%AM0$76",
      "start_line": 809,
      "end_line": 809,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM45$%AM38$%AM9$%AM0$78",
      "label": "%AC$%dflt$%AM45$%AM38$%AM9$%AM0$78",
      "start_line": 811,
      "end_line": 811,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM46$%AM38$%AM9$%AM0$79$%instInit$80",
      "label": "%AC$%AC$%dflt$%AM46$%AM38$%AM9$%AM0$79$%instInit$80",
      "start_line": 830,
      "end_line": 830,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM46$%AM38$%AM9$%AM0$79",
      "label": "%AC$%dflt$%AM46$%AM38$%AM9$%AM0$79",
      "start_line": 830,
      "end_line": 830,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM46$%AM38$%AM9$%AM0$81",
      "label": "%AC$%dflt$%AM46$%AM38$%AM9$%AM0$81",
      "start_line": 832,
      "end_line": 832,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM47$%AM38$%AM9$%AM0$82$%instInit$83",
      "label": "%AC$%AC$%dflt$%AM47$%AM38$%AM9$%AM0$82$%instInit$83",
      "start_line": 851,
      "end_line": 851,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM47$%AM38$%AM9$%AM0$82",
      "label": "%AC$%dflt$%AM47$%AM38$%AM9$%AM0$82",
      "start_line": 851,
      "end_line": 851,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM47$%AM38$%AM9$%AM0$84",
      "label": "%AC$%dflt$%AM47$%AM38$%AM9$%AM0$84",
      "start_line": 853,
      "end_line": 853,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM48$%AM38$%AM9$%AM0$85$%instInit$86",
      "label": "%AC$%AC$%dflt$%AM48$%AM38$%AM9$%AM0$85$%instInit$86",
      "start_line": 876,
      "end_line": 876,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM48$%AM38$%AM9$%AM0$85",
      "label": "%AC$%dflt$%AM48$%AM38$%AM9$%AM0$85",
      "start_line": 876,
      "end_line": 876,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM48$%AM38$%AM9$%AM0$87",
      "label": "%AC$%dflt$%AM48$%AM38$%AM9$%AM0$87",
      "start_line": 878,
      "end_line": 878,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM49$%AM38$%AM9$%AM0$88$%instInit$89",
      "label": "%AC$%AC$%dflt$%AM49$%AM38$%AM9$%AM0$88$%instInit$89",
      "start_line": 903,
      "end_line": 903,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$88",
      "label": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$88",
      "start_line": 903,
      "end_line": 903,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$90",
      "label": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$90",
      "start_line": 905,
      "end_line": 905,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$91",
      "label": "%AC$%dflt$%AM49$%AM38$%AM9$%AM0$91",
      "start_line": 916,
      "end_line": 916,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$92",
      "label": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$92",
      "start_line": 935,
      "end_line": 935,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM50$%AM38$%AM9$%AM0$93$%instInit$94",
      "label": "%AC$%AC$%dflt$%AM50$%AM38$%AM9$%AM0$93$%instInit$94",
      "start_line": 938,
      "end_line": 938,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$93",
      "label": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$93",
      "start_line": 936,
      "end_line": 936,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$95",
      "label": "%AC$%dflt$%AM50$%AM38$%AM9$%AM0$95",
      "start_line": 941,
      "end_line": 941,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$96",
      "label": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$96",
      "start_line": 965,
      "end_line": 965,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM51$%AM38$%AM9$%AM0$97$%instInit$98",
      "label": "%AC$%AC$%dflt$%AM51$%AM38$%AM9$%AM0$97$%instInit$98",
      "start_line": 968,
      "end_line": 968,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: '@creatorId:externalserver.com', username: 'creatorUsername' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$97",
      "label": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$97",
      "start_line": 966,
      "end_line": 966,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$99",
      "label": "%AC$%dflt$%AM51$%AM38$%AM9$%AM0$99",
      "start_line": 971,
      "end_line": 971,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM53$%AM52$%AM9$%AM0$100",
      "label": "%AC$%dflt$%AM53$%AM52$%AM9$%AM0$100",
      "start_line": 988,
      "end_line": 988,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM52$%AM9$%AM0$101$%instInit$102",
      "label": "%AC$%AC$%dflt$%AM52$%AM9$%AM0$101$%instInit$102",
      "start_line": 1007,
      "end_line": 1007,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM52$%AM9$%AM0$101",
      "label": "%AC$%dflt$%AM52$%AM9$%AM0$101",
      "start_line": 999,
      "end_line": 999,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tuserProfile: {\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM55$%AM52$%AM9$%AM0$103$%instInit$104",
      "label": "%AC$%AC$%dflt$%AM55$%AM52$%AM9$%AM0$103$%instInit$104",
      "start_line": 1020,
      "end_line": 1020,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM55$%AM52$%AM9$%AM0$103",
      "label": "%AC$%dflt$%AM55$%AM52$%AM9$%AM0$103",
      "start_line": 1020,
      "end_line": 1020,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...eventForUserProfileChanges, userProfile: {} }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM56$%AM52$%AM9$%AM0$105",
      "label": "%AC$%dflt$%AM56$%AM52$%AM9$%AM0$105",
      "start_line": 1027,
      "end_line": 1027,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM57$%AM52$%AM9$%AM0$106$%instInit$107",
      "label": "%AC$%AC$%dflt$%AM57$%AM52$%AM9$%AM0$106$%instInit$107",
      "start_line": 1042,
      "end_line": 1042,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM57$%AM52$%AM9$%AM0$106",
      "label": "%AC$%dflt$%AM57$%AM52$%AM9$%AM0$106",
      "start_line": 1041,
      "end_line": 1041,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM57$%AM52$%AM9$%AM0$108$%instInit$109",
      "label": "%AC$%AC$%dflt$%AM57$%AM52$%AM9$%AM0$108$%instInit$109",
      "start_line": 1047,
      "end_line": 1047,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ avatarUrl: 'avatarUrl' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM57$%AM52$%AM9$%AM0$108",
      "label": "%AC$%dflt$%AM57$%AM52$%AM9$%AM0$108",
      "start_line": 1047,
      "end_line": 1047,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM58$%AM52$%AM9$%AM0$110$%instInit$111",
      "label": "%AC$%AC$%dflt$%AM58$%AM52$%AM9$%AM0$110$%instInit$111",
      "start_line": 1054,
      "end_line": 1054,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM58$%AM52$%AM9$%AM0$110",
      "label": "%AC$%dflt$%AM58$%AM52$%AM9$%AM0$110",
      "start_line": 1053,
      "end_line": 1053,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM59$%AM52$%AM9$%AM0$112",
      "label": "%AC$%dflt$%AM59$%AM52$%AM9$%AM0$112",
      "start_line": 1067,
      "end_line": 1067,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM59$%AM52$%AM9$%AM0$113$%instInit$114",
      "label": "%AC$%AC$%dflt$%AM59$%AM52$%AM9$%AM0$113$%instInit$114",
      "start_line": 1071,
      "end_line": 1071,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ displayName: 'displayName' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM59$%AM52$%AM9$%AM0$113",
      "label": "%AC$%dflt$%AM59$%AM52$%AM9$%AM0$113",
      "start_line": 1071,
      "end_line": 1071,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM60$%AM52$%AM9$%AM0$115",
      "label": "%AC$%dflt$%AM60$%AM52$%AM9$%AM0$115",
      "start_line": 1078,
      "end_line": 1078,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM60$%AM52$%AM9$%AM0$116$%instInit$117",
      "label": "%AC$%AC$%dflt$%AM60$%AM52$%AM9$%AM0$116$%instInit$117",
      "start_line": 1083,
      "end_line": 1083,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ displayName: 'displayName' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM60$%AM52$%AM9$%AM0$116",
      "label": "%AC$%dflt$%AM60$%AM52$%AM9$%AM0$116",
      "start_line": 1083,
      "end_line": 1083,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM61$%AM0$118",
      "label": "%AC$%dflt$%AM61$%AM0$118",
      "start_line": 1091,
      "end_line": 1091,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM62$%AM61$%AM0$119",
      "label": "%AC$%dflt$%AM62$%AM61$%AM0$119",
      "start_line": 1099,
      "end_line": 1099,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM63$%AM61$%AM0$120",
      "label": "%AC$%dflt$%AM63$%AM61$%AM0$120",
      "start_line": 1105,
      "end_line": 1105,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM63$%AM61$%AM0$121",
      "label": "%AC$%dflt$%AM63$%AM61$%AM0$121",
      "start_line": 1107,
      "end_line": 1107,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM64$%AM61$%AM0$122",
      "label": "%AC$%dflt$%AM64$%AM61$%AM0$122",
      "start_line": 1116,
      "end_line": 1116,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: 'fileId', name: 'filename' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM64$%AM61$%AM0$123",
      "label": "%AC$%dflt$%AM64$%AM61$%AM0$123",
      "start_line": 1118,
      "end_line": 1118,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ files, attachments }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM64$%AM61$%AM0$124$%instInit$125",
      "label": "%AC$%AC$%dflt$%AM64$%AM61$%AM0$124$%instInit$125",
      "start_line": 1120,
      "end_line": 1120,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM64$%AM61$%AM0$124",
      "label": "%AC$%dflt$%AM64$%AM61$%AM0$124",
      "start_line": 1119,
      "end_line": 1119,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM66$%AM65$%AM61$%AM0$126",
      "label": "%AC$%dflt$%AM66$%AM65$%AM61$%AM0$126",
      "start_line": 1134,
      "end_line": 1134,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM66$%AM65$%AM61$%AM0$127$%instInit$128",
      "label": "%AC$%AC$%dflt$%AM66$%AM65$%AM61$%AM0$127$%instInit$128",
      "start_line": 1136,
      "end_line": 1136,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM66$%AM65$%AM61$%AM0$127",
      "label": "%AC$%dflt$%AM66$%AM65$%AM61$%AM0$127",
      "start_line": 1135,
      "end_line": 1135,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM67$%AM65$%AM61$%AM0$129$%instInit$130",
      "label": "%AC$%AC$%dflt$%AM67$%AM65$%AM61$%AM0$129$%instInit$130",
      "start_line": 1148,
      "end_line": 1148,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ eventId: 'eventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$129",
      "label": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$129",
      "start_line": 1148,
      "end_line": 1148,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ federation: { eventId: 'eventId' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$131",
      "label": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$131",
      "start_line": 1153,
      "end_line": 1153,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: 'fileId', name: 'filename' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$132",
      "label": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$132",
      "start_line": 1155,
      "end_line": 1155,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ files, attachments }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM67$%AM65$%AM61$%AM0$133$%instInit$134",
      "label": "%AC$%AC$%dflt$%AM67$%AM65$%AM61$%AM0$133$%instInit$134",
      "start_line": 1157,
      "end_line": 1157,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$133",
      "label": "%AC$%dflt$%AM67$%AM65$%AM61$%AM0$133",
      "start_line": 1156,
      "end_line": 1156,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM69$%AM68$%AM0$135",
      "label": "%AC$%dflt$%AM69$%AM68$%AM0$135",
      "start_line": 1184,
      "end_line": 1184,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM70$%AM68$%AM0$136",
      "label": "%AC$%dflt$%AM70$%AM68$%AM0$136",
      "start_line": 1190,
      "end_line": 1190,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM70$%AM68$%AM0$137",
      "label": "%AC$%dflt$%AM70$%AM68$%AM0$137",
      "start_line": 1192,
      "end_line": 1192,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM71$%AM68$%AM0$138",
      "label": "%AC$%dflt$%AM71$%AM68$%AM0$138",
      "start_line": 1198,
      "end_line": 1198,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM71$%AM68$%AM0$139",
      "label": "%AC$%dflt$%AM71$%AM68$%AM0$139",
      "start_line": 1199,
      "end_line": 1199,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM71$%AM68$%AM0$140",
      "label": "%AC$%dflt$%AM71$%AM68$%AM0$140",
      "start_line": 1200,
      "end_line": 1200,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM71$%AM68$%AM0$141",
      "label": "%AC$%dflt$%AM71$%AM68$%AM0$141",
      "start_line": 1201,
      "end_line": 1201,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM72$%AM68$%AM0$142",
      "label": "%AC$%dflt$%AM72$%AM68$%AM0$142",
      "start_line": 1207,
      "end_line": 1207,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM72$%AM68$%AM0$143",
      "label": "%AC$%dflt$%AM72$%AM68$%AM0$143",
      "start_line": 1208,
      "end_line": 1208,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM72$%AM68$%AM0$144",
      "label": "%AC$%dflt$%AM72$%AM68$%AM0$144",
      "start_line": 1210,
      "end_line": 1210,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM72$%AM68$%AM0$145",
      "label": "%AC$%dflt$%AM72$%AM68$%AM0$145",
      "start_line": 1216,
      "end_line": 1216,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM72$%AM68$%AM0$146",
      "label": "%AC$%dflt$%AM72$%AM68$%AM0$146",
      "start_line": 1216,
      "end_line": 1216,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$147",
      "label": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$147",
      "start_line": 1222,
      "end_line": 1222,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$148",
      "label": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$148",
      "start_line": 1223,
      "end_line": 1223,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$149",
      "label": "%AC$%dflt$%AM74$%AM73$%AM68$%AM0$149",
      "start_line": 1225,
      "end_line": 1225,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$150",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$150",
      "start_line": 1233,
      "end_line": 1233,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$151",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$151",
      "start_line": 1234,
      "end_line": 1234,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$152",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$152",
      "start_line": 1236,
      "end_line": 1236,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$153",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$153",
      "start_line": 1237,
      "end_line": 1237,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$154",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$154",
      "start_line": 1245,
      "end_line": 1245,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$155",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$155",
      "start_line": 1245,
      "end_line": 1245,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$156",
      "label": "%AC$%dflt$%AM75$%AM73$%AM68$%AM0$156",
      "start_line": 1245,
      "end_line": 1245,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM76$%AM0$157",
      "label": "%AC$%dflt$%AM76$%AM0$157",
      "start_line": 1252,
      "end_line": 1252,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM77$%AM76$%AM0$158",
      "label": "%AC$%dflt$%AM77$%AM76$%AM0$158",
      "start_line": 1260,
      "end_line": 1260,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM78$%AM76$%AM0$159",
      "label": "%AC$%dflt$%AM78$%AM76$%AM0$159",
      "start_line": 1268,
      "end_line": 1268,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM79$%AM76$%AM0$160",
      "label": "%AC$%dflt$%AM79$%AM76$%AM0$160",
      "start_line": 1275,
      "end_line": 1275,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomType: RoomType.PRIVATE_GROUP,\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM80$%AM0$161",
      "label": "%AC$%dflt$%AM80$%AM0$161",
      "start_line": 1283,
      "end_line": 1283,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM81$%AM80$%AM0$162",
      "label": "%AC$%dflt$%AM81$%AM80$%AM0$162",
      "start_line": 1291,
      "end_line": 1291,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM82$%AM80$%AM0$163",
      "label": "%AC$%dflt$%AM82$%AM80$%AM0$163",
      "start_line": 1300,
      "end_line": 1300,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM83$%AM80$%AM0$164",
      "label": "%AC$%dflt$%AM83$%AM80$%AM0$164",
      "start_line": 1310,
      "end_line": 1310,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: '!externalRoomId:localDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM84$%AM80$%AM0$165",
      "label": "%AC$%dflt$%AM84$%AM80$%AM0$165",
      "start_line": 1320,
      "end_line": 1320,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: '!externalRoomId:externalDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM85$%AM80$%AM0$166",
      "label": "%AC$%dflt$%AM85$%AM80$%AM0$166",
      "start_line": 1330,
      "end_line": 1330,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM86$%AM80$%AM0$167",
      "label": "%AC$%dflt$%AM86$%AM80$%AM0$167",
      "start_line": 1338,
      "end_line": 1338,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName2',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM87$%AM0$168",
      "label": "%AC$%dflt$%AM87$%AM0$168",
      "start_line": 1346,
      "end_line": 1346,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM88$%AM87$%AM0$169",
      "label": "%AC$%dflt$%AM88$%AM87$%AM0$169",
      "start_line": 1354,
      "end_line": 1354,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM89$%AM87$%AM0$170",
      "label": "%AC$%dflt$%AM89$%AM87$%AM0$170",
      "start_line": 1362,
      "end_line": 1362,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM90$%AM87$%AM0$171",
      "label": "%AC$%dflt$%AM90$%AM87$%AM0$171",
      "start_line": 1370,
      "end_line": 1370,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM91$%AM0$172",
      "label": "%AC$%dflt$%AM91$%AM0$172",
      "start_line": 1378,
      "end_line": 1378,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM92$%AM91$%AM0$173",
      "label": "%AC$%dflt$%AM92$%AM91$%AM0$173",
      "start_line": 1386,
      "end_line": 1386,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM93$%AM91$%AM0$174",
      "label": "%AC$%dflt$%AM93$%AM91$%AM0$174",
      "start_line": 1395,
      "end_line": 1395,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM94$%AM91$%AM0$175",
      "label": "%AC$%dflt$%AM94$%AM91$%AM0$175",
      "start_line": 1405,
      "end_line": 1405,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM95$%AM91$%AM0$176",
      "label": "%AC$%dflt$%AM95$%AM91$%AM0$176",
      "start_line": 1414,
      "end_line": 1414,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'msg' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM95$%AM91$%AM0$177",
      "label": "%AC$%dflt$%AM95$%AM91$%AM0$177",
      "start_line": 1416,
      "end_line": 1416,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM95$%AM91$%AM0$178",
      "label": "%AC$%dflt$%AM95$%AM91$%AM0$178",
      "start_line": 1419,
      "end_line": 1419,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'msg' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180$%instInit$181$%instInit$182",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180$%instInit$181$%instInit$182",
      "start_line": 1430,
      "end_line": 1430,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180$%instInit$181",
      "label": "%AC$%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180$%instInit$181",
      "start_line": 1429,
      "end_line": 1429,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180",
      "label": "%AC$%AC$%dflt$%AM96$%AM91$%AM0$179$%instInit$180",
      "start_line": 1428,
      "end_line": 1428,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM96$%AM91$%AM0$179",
      "label": "%AC$%dflt$%AM96$%AM91$%AM0$179",
      "start_line": 1426,
      "end_line": 1426,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM96$%AM91$%AM0$183",
      "label": "%AC$%dflt$%AM96$%AM91$%AM0$183",
      "start_line": 1435,
      "end_line": 1435,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185$%instInit$186$%instInit$187",
      "label": "%AC$%AC$%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185$%instInit$186$%instInit$187",
      "start_line": 1446,
      "end_line": 1446,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185$%instInit$186",
      "label": "%AC$%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185$%instInit$186",
      "start_line": 1445,
      "end_line": 1445,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185",
      "label": "%AC$%AC$%dflt$%AM97$%AM91$%AM0$184$%instInit$185",
      "start_line": 1444,
      "end_line": 1444,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM97$%AM91$%AM0$184",
      "label": "%AC$%dflt$%AM97$%AM91$%AM0$184",
      "start_line": 1442,
      "end_line": 1442,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM97$%AM91$%AM0$188",
      "label": "%AC$%dflt$%AM97$%AM91$%AM0$188",
      "start_line": 1457,
      "end_line": 1457,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM98$%AM0$189",
      "label": "%AC$%dflt$%AM98$%AM0$189",
      "start_line": 1465,
      "end_line": 1465,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM99$%AM98$%AM0$190",
      "label": "%AC$%dflt$%AM99$%AM98$%AM0$190",
      "start_line": 1473,
      "end_line": 1473,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM100$%AM98$%AM0$191",
      "label": "%AC$%dflt$%AM100$%AM98$%AM0$191",
      "start_line": 1481,
      "end_line": 1481,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM101$%AM98$%AM0$192",
      "label": "%AC$%dflt$%AM101$%AM98$%AM0$192",
      "start_line": 1490,
      "end_line": 1490,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM102$%AM98$%AM0$193",
      "label": "%AC$%dflt$%AM102$%AM98$%AM0$193",
      "start_line": 1498,
      "end_line": 1498,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'newRawMessage' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM102$%AM98$%AM0$194",
      "label": "%AC$%dflt$%AM102$%AM98$%AM0$194",
      "start_line": 1499,
      "end_line": 1499,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM103$%AM98$%AM0$195",
      "label": "%AC$%dflt$%AM103$%AM98$%AM0$195",
      "start_line": 1508,
      "end_line": 1508,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'differentOne' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM103$%AM98$%AM0$196",
      "label": "%AC$%dflt$%AM103$%AM98$%AM0$196",
      "start_line": 1509,
      "end_line": 1509,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM103$%AM98$%AM0$197",
      "label": "%AC$%dflt$%AM103$%AM98$%AM0$197",
      "start_line": 1516,
      "end_line": 1516,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'differentOne' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM105$%AM104$%AM98$%AM0$198$%instInit$199",
      "label": "%AC$%AC$%dflt$%AM105$%AM104$%AM98$%AM0$198$%instInit$199",
      "start_line": 1523,
      "end_line": 1523,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ message_link: 'link' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM105$%AM104$%AM98$%AM0$198",
      "label": "%AC$%dflt$%AM105$%AM104$%AM98$%AM0$198",
      "start_line": 1523,
      "end_line": 1523,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ msg: 'differentOne', attachments: [{ message_link: 'link' }] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM105$%AM104$%AM98$%AM0$200",
      "label": "%AC$%dflt$%AM105$%AM104$%AM98$%AM0$200",
      "start_line": 1525,
      "end_line": 1525,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM106$%AM104$%AM98$%AM0$201$%instInit$202",
      "label": "%AC$%AC$%dflt$%AM106$%AM104$%AM98$%AM0$201$%instInit$202",
      "start_line": 1540,
      "end_line": 1540,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ message_link: 'link' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM106$%AM104$%AM98$%AM0$201",
      "label": "%AC$%dflt$%AM106$%AM104$%AM98$%AM0$201",
      "start_line": 1538,
      "end_line": 1538,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM106$%AM104$%AM98$%AM0$203",
      "label": "%AC$%dflt$%AM106$%AM104$%AM98$%AM0$203",
      "start_line": 1544,
      "end_line": 1544,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM107$%AM104$%AM98$%AM0$204$%instInit$205",
      "label": "%AC$%AC$%dflt$%AM107$%AM104$%AM98$%AM0$204$%instInit$205",
      "start_line": 1557,
      "end_line": 1557,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ message_link: 'link' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM107$%AM104$%AM98$%AM0$204",
      "label": "%AC$%dflt$%AM107$%AM104$%AM98$%AM0$204",
      "start_line": 1555,
      "end_line": 1555,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM107$%AM104$%AM98$%AM0$206",
      "label": "%AC$%dflt$%AM107$%AM104$%AM98$%AM0$206",
      "start_line": 1564,
      "end_line": 1564,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM108$%AM0$207",
      "label": "%AC$%dflt$%AM108$%AM0$207",
      "start_line": 1578,
      "end_line": 1578,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM109$%AM108$%AM0$208",
      "label": "%AC$%dflt$%AM109$%AM108$%AM0$208",
      "start_line": 1586,
      "end_line": 1586,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM110$%AM108$%AM0$209",
      "label": "%AC$%dflt$%AM110$%AM108$%AM0$209",
      "start_line": 1596,
      "end_line": 1596,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM111$%AM108$%AM0$210",
      "label": "%AC$%dflt$%AM111$%AM108$%AM0$210",
      "start_line": 1607,
      "end_line": 1607,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM112$%AM108$%AM0$211$%instInit$212$%instInit$213",
      "label": "%AC$%AC$%AC$%dflt$%AM112$%AM108$%AM0$211$%instInit$212$%instInit$213",
      "start_line": 1623,
      "end_line": 1623,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM112$%AM108$%AM0$211$%instInit$212",
      "label": "%AC$%AC$%dflt$%AM112$%AM108$%AM0$211$%instInit$212",
      "start_line": 1621,
      "end_line": 1621,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM112$%AM108$%AM0$211",
      "label": "%AC$%dflt$%AM112$%AM108$%AM0$211",
      "start_line": 1618,
      "end_line": 1618,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM112$%AM108$%AM0$214",
      "label": "%AC$%dflt$%AM112$%AM108$%AM0$214",
      "start_line": 1631,
      "end_line": 1631,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: ['owner'],\n\t\t\t\t\trolesToRemove: [],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM113$%AM108$%AM0$215$%instInit$216$%instInit$217",
      "label": "%AC$%AC$%AC$%dflt$%AM113$%AM108$%AM0$215$%instInit$216$%instInit$217",
      "start_line": 1650,
      "end_line": 1650,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM113$%AM108$%AM0$215$%instInit$216",
      "label": "%AC$%AC$%dflt$%AM113$%AM108$%AM0$215$%instInit$216",
      "start_line": 1648,
      "end_line": 1648,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM113$%AM108$%AM0$215",
      "label": "%AC$%dflt$%AM113$%AM108$%AM0$215",
      "start_line": 1645,
      "end_line": 1645,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM113$%AM108$%AM0$218",
      "label": "%AC$%dflt$%AM113$%AM108$%AM0$218",
      "start_line": 1658,
      "end_line": 1658,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: [],\n\t\t\t\t\trolesToRemove: ['owner'],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM115$%AM114$%AM0$219",
      "label": "%AC$%dflt$%AM115$%AM114$%AM0$219",
      "start_line": 1671,
      "end_line": 1671,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM116$%AM114$%AM0$220$%instInit$221",
      "label": "%AC$%AC$%dflt$%AM116$%AM114$%AM0$220$%instInit$221",
      "start_line": 1681,
      "end_line": 1681,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM116$%AM114$%AM0$220",
      "label": "%AC$%dflt$%AM116$%AM114$%AM0$220",
      "start_line": 1679,
      "end_line": 1679,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM117$%AM114$%AM0$222",
      "label": "%AC$%dflt$%AM117$%AM114$%AM0$222",
      "start_line": 1687,
      "end_line": 1687,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM117$%AM114$%AM0$223$%instInit$224",
      "label": "%AC$%AC$%dflt$%AM117$%AM114$%AM0$223$%instInit$224",
      "start_line": 1691,
      "end_line": 1691,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM117$%AM114$%AM0$223",
      "label": "%AC$%dflt$%AM117$%AM114$%AM0$223",
      "start_line": 1689,
      "end_line": 1689,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM118$%AM114$%AM0$225",
      "label": "%AC$%dflt$%AM118$%AM114$%AM0$225",
      "start_line": 1697,
      "end_line": 1697,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM118$%AM114$%AM0$226",
      "label": "%AC$%dflt$%AM118$%AM114$%AM0$226",
      "start_line": 1698,
      "end_line": 1698,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM118$%AM114$%AM0$227$%instInit$228",
      "label": "%AC$%AC$%dflt$%AM118$%AM114$%AM0$227$%instInit$228",
      "start_line": 1702,
      "end_line": 1702,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM118$%AM114$%AM0$227",
      "label": "%AC$%dflt$%AM118$%AM114$%AM0$227",
      "start_line": 1700,
      "end_line": 1700,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM119$%AM114$%AM0$229",
      "label": "%AC$%dflt$%AM119$%AM114$%AM0$229",
      "start_line": 1708,
      "end_line": 1708,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM119$%AM114$%AM0$230",
      "label": "%AC$%dflt$%AM119$%AM114$%AM0$230",
      "start_line": 1709,
      "end_line": 1709,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM119$%AM114$%AM0$231",
      "label": "%AC$%dflt$%AM119$%AM114$%AM0$231",
      "start_line": 1710,
      "end_line": 1710,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM119$%AM114$%AM0$232$%instInit$233",
      "label": "%AC$%AC$%dflt$%AM119$%AM114$%AM0$232$%instInit$233",
      "start_line": 1713,
      "end_line": 1713,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM119$%AM114$%AM0$232",
      "label": "%AC$%dflt$%AM119$%AM114$%AM0$232",
      "start_line": 1711,
      "end_line": 1711,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$234",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$234",
      "start_line": 1719,
      "end_line": 1719,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$235",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$235",
      "start_line": 1720,
      "end_line": 1720,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$236",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$236",
      "start_line": 1721,
      "end_line": 1721,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM120$%AM114$%AM0$237$%instInit$238",
      "label": "%AC$%AC$%dflt$%AM120$%AM114$%AM0$237$%instInit$238",
      "start_line": 1728,
      "end_line": 1728,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$237",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$237",
      "start_line": 1723,
      "end_line": 1723,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$239",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$239",
      "start_line": 1732,
      "end_line": 1732,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM120$%AM114$%AM0$240",
      "label": "%AC$%dflt$%AM120$%AM114$%AM0$240",
      "start_line": 1733,
      "end_line": 1733,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$241",
      "label": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$241",
      "start_line": 1745,
      "end_line": 1745,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$242",
      "label": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$242",
      "start_line": 1748,
      "end_line": 1748,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$243",
      "label": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$243",
      "start_line": 1749,
      "end_line": 1749,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM122$%AM121$%AM114$%AM0$244$%instInit$245",
      "label": "%AC$%AC$%dflt$%AM122$%AM121$%AM114$%AM0$244$%instInit$245",
      "start_line": 1754,
      "end_line": 1754,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$244",
      "label": "%AC$%dflt$%AM122$%AM121$%AM114$%AM0$244",
      "start_line": 1751,
      "end_line": 1751,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$246",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$246",
      "start_line": 1760,
      "end_line": 1760,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$247",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$247",
      "start_line": 1761,
      "end_line": 1761,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$248",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$248",
      "start_line": 1762,
      "end_line": 1762,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$249",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$249",
      "start_line": 1764,
      "end_line": 1764,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM123$%AM121$%AM114$%AM0$250$%instInit$251",
      "label": "%AC$%AC$%dflt$%AM123$%AM121$%AM114$%AM0$250$%instInit$251",
      "start_line": 1771,
      "end_line": 1771,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$250",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$250",
      "start_line": 1765,
      "end_line": 1765,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$252",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$252",
      "start_line": 1775,
      "end_line": 1775,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$253",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$253",
      "start_line": 1776,
      "end_line": 1776,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$254",
      "label": "%AC$%dflt$%AM123$%AM121$%AM114$%AM0$254",
      "start_line": 1779,
      "end_line": 1779,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM124$%AM0$255",
      "label": "%AC$%dflt$%AM124$%AM0$255",
      "start_line": 1790,
      "end_line": 1790,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM125$%AM124$%AM0$256",
      "label": "%AC$%dflt$%AM125$%AM124$%AM0$256",
      "start_line": 1797,
      "end_line": 1797,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM126$%AM124$%AM0$257$%instInit$258",
      "label": "%AC$%AC$%dflt$%AM126$%AM124$%AM0$257$%instInit$258",
      "start_line": 1807,
      "end_line": 1807,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM126$%AM124$%AM0$257",
      "label": "%AC$%dflt$%AM126$%AM124$%AM0$257",
      "start_line": 1805,
      "end_line": 1805,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM127$%AM124$%AM0$259",
      "label": "%AC$%dflt$%AM127$%AM124$%AM0$259",
      "start_line": 1813,
      "end_line": 1813,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM127$%AM124$%AM0$260$%instInit$261",
      "label": "%AC$%AC$%dflt$%AM127$%AM124$%AM0$260$%instInit$261",
      "start_line": 1817,
      "end_line": 1817,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM127$%AM124$%AM0$260",
      "label": "%AC$%dflt$%AM127$%AM124$%AM0$260",
      "start_line": 1815,
      "end_line": 1815,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM128$%AM124$%AM0$262",
      "label": "%AC$%dflt$%AM128$%AM124$%AM0$262",
      "start_line": 1823,
      "end_line": 1823,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM128$%AM124$%AM0$263",
      "label": "%AC$%dflt$%AM128$%AM124$%AM0$263",
      "start_line": 1825,
      "end_line": 1825,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM128$%AM124$%AM0$264$%instInit$265",
      "label": "%AC$%AC$%dflt$%AM128$%AM124$%AM0$264$%instInit$265",
      "start_line": 1828,
      "end_line": 1828,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM128$%AM124$%AM0$264",
      "label": "%AC$%dflt$%AM128$%AM124$%AM0$264",
      "start_line": 1826,
      "end_line": 1826,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM129$%AM124$%AM0$266",
      "label": "%AC$%dflt$%AM129$%AM124$%AM0$266",
      "start_line": 1837,
      "end_line": 1837,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: 'fileId', name: 'filename' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM129$%AM124$%AM0$267",
      "label": "%AC$%dflt$%AM129$%AM124$%AM0$267",
      "start_line": 1839,
      "end_line": 1839,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ files, attachments }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM129$%AM124$%AM0$268",
      "label": "%AC$%dflt$%AM129$%AM124$%AM0$268",
      "start_line": 1840,
      "end_line": 1840,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM129$%AM124$%AM0$269$%instInit$270",
      "label": "%AC$%AC$%dflt$%AM129$%AM124$%AM0$269$%instInit$270",
      "start_line": 1843,
      "end_line": 1843,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM129$%AM124$%AM0$269$%instInit$271",
      "label": "%AC$%AC$%dflt$%AM129$%AM124$%AM0$269$%instInit$271",
      "start_line": 1845,
      "end_line": 1845,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM129$%AM124$%AM0$269",
      "label": "%AC$%dflt$%AM129$%AM124$%AM0$269",
      "start_line": 1842,
      "end_line": 1842,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$272",
      "label": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$272",
      "start_line": 1861,
      "end_line": 1861,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$273",
      "label": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$273",
      "start_line": 1862,
      "end_line": 1862,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274$%instInit$275",
      "label": "%AC$%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274$%instInit$275",
      "start_line": 1866,
      "end_line": 1866,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274$%instInit$276",
      "label": "%AC$%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274$%instInit$276",
      "start_line": 1869,
      "end_line": 1869,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274",
      "label": "%AC$%dflt$%AM131$%AM130$%AM124$%AM0$274",
      "start_line": 1865,
      "end_line": 1865,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$277$%instInit$278",
      "label": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$277$%instInit$278",
      "start_line": 1880,
      "end_line": 1880,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ eventId: 'eventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$277",
      "label": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$277",
      "start_line": 1880,
      "end_line": 1880,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ federation: { eventId: 'eventId' } }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$279",
      "label": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$279",
      "start_line": 1883,
      "end_line": 1883,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _id: 'messageThreadId' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$280",
      "label": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$280",
      "start_line": 1886,
      "end_line": 1886,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ id: 'fileId', name: 'filename' }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$281",
      "label": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$281",
      "start_line": 1888,
      "end_line": 1888,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ files, attachments }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282$%instInit$283",
      "label": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282$%instInit$283",
      "start_line": 1890,
      "end_line": 1890,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ rootEventId: 'rootEventId' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282$%instInit$284",
      "label": "%AC$%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282$%instInit$284",
      "start_line": 1893,
      "end_line": 1893,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282",
      "label": "%AC$%dflt$%AM132$%AM130$%AM124$%AM0$282",
      "start_line": 1889,
      "end_line": 1889,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport { expect } from 'chai';\nimport proxyquire from 'proxyquire';\nimport sinon from 'sinon';\nimport { EVENT_ORIGIN } from '../../../../../../../server/services/federation/domain/IFederationBridge';\nconst { FederationRoomServiceReceiver } = proxyquire\n\t.noCallThru()\n\t.load('../../../../../../../server/services/federation/application/room/receiver/RoomServiceReceiver', {\n\t\tmongodb: {\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t},\n\t});\nconst { FederatedUser } = proxyquire.noCallThru().load('../../../../../../../server/services/federation/domain/FederatedUser', {\n\tmongodb: {\n\t\t'ObjectId': class ObjectId {\n\t\t\ttoHexString(): string {\n\t\t\t\treturn 'hexString';\n\t\t\t}\n\t\t},\n\t\t'@global': true,\n\t},\n});\nconst { DirectMessageFederatedRoom, FederatedRoom } = proxyquire\n\t.noCallThru()\n\t.load('../../../../../../../server/services/federation/domain/FederatedRoom', {\n\t\tmongodb: {\n\t\t\t'ObjectId': class ObjectId {\n\t\t\t\ttoHexString(): string {\n\t\t\t\t\treturn 'hexString';\n\t\t\t\t}\n\t\t\t},\n\t\t\t'@global': true,\n\t\t},\n\t});\ndescribe('Federation - Application - FederationRoomServiceReceiver', () => {\n\tlet service: typeof FederationRoomServiceReceiver;\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByExternalId: sinon.stub(),\n\t\tcreateFederatedRoom: sinon.stub(),\n\t\tcreateFederatedRoomForDirectMessage: sinon.stub(),\n\t\tremoveDirectMessageRoom: sinon.stub(),\n\t\tremoveUserFromRoom: sinon.stub(),\n\t\taddUserToRoom: sinon.stub(),\n\t\tisUserAlreadyJoined: sinon.stub(),\n\t\tgetInternalRoomById: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t\tupdateRoomType: sinon.stub(),\n\t\tupdateRoomName: sinon.stub(),\n\t\tupdateRoomTopic: sinon.stub(),\n\t\tapplyRoomRolesToUser: sinon.stub(),\n\t\tupdateDisplayRoomName: sinon.stub(),\n\t\taddUsersToRoomWhenJoinExternalPublicRoom: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tupdateFederationAvatar: sinon.stub(),\n\t\tsetAvatar: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t\tupdateRealName: sinon.stub(),\n\t\tgetFederatedUsersByExternalIds: sinon.stub(),\n\t};\n\tconst messageAdapter = {\n\t\tsendMessage: sinon.stub(),\n\t\tsendFileMessage: sinon.stub(),\n\t\tdeleteMessage: sinon.stub(),\n\t\tgetMessageByFederationId: sinon.stub(),\n\t\teditMessage: sinon.stub(),\n\t\tfindOneByFederationIdOnReactions: sinon.stub(),\n\t\tunreactToMessage: sinon.stub(),\n\t\tsendQuoteMessage: sinon.stub(),\n\t\tsendQuoteFileMessage: sinon.stub(),\n\t\teditQuotedMessage: sinon.stub(),\n\t\tgetMessageToEditWhenReplyAndQuote: sinon.stub(),\n\t\tsendThreadQuoteMessage: sinon.stub(),\n\t\tsendThreadMessage: sinon.stub(),\n\t\tsendThreadFileMessage: sinon.stub(),\n\t\tsendThreadQuoteFileMessage: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t};\n\tconst notificationsAdapter = {\n\t\tsubscribeToUserTypingEventsOnFederatedRoomId: sinon.stub(),\n\t\tbroadcastUserTypingOnRoom: sinon.stub(),\n\t};\n\tconst fileAdapter = {\n\t\tuploadFile: sinon.stub(),\n\t};\n\tconst queueInstance = {\n\t\taddToQueue: sinon.stub(),\n\t};\n\tconst bridge = {\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),\n\t\textractHomeserverOrigin: sinon.stub().returns('localDomain'),\n\t\tjoinRoom: sinon.stub(),\n\t\tconvertMatrixUrlToHttp: sinon.stub().returns('toHttpUrl'),\n\t\tgetReadStreamForFileFromUrl: sinon.stub(),\n\t\tgetRoomHistoricalJoinEvents: sinon.stub(),\n\t\tgetRoomData: sinon.stub(),\n\t};\n\tbeforeEach(() => {\n\t\tservice = new FederationRoomServiceReceiver(\n\t\t\troomAdapter as any,\n\t\t\tuserAdapter as any,\n\t\t\tmessageAdapter as any,\n\t\t\tfileAdapter as any,\n\t\t\tsettingsAdapter as any,\n\t\t\tnotificationsAdapter as any,\n\t\t\tqueueInstance as any,\n\t\t\tbridge as any,\n\t\t);\n\t});\n\tafterEach(() => {\n\t\troomAdapter.getFederatedRoomByExternalId.reset();\n\t\troomAdapter.createFederatedRoom.reset();\n\t\troomAdapter.createFederatedRoomForDirectMessage.reset();\n\t\troomAdapter.removeDirectMessageRoom.reset();\n\t\troomAdapter.updateRoomType.reset();\n\t\troomAdapter.updateRoomName.reset();\n\t\troomAdapter.updateFederatedRoomByInternalRoomId.reset();\n\t\troomAdapter.updateRoomTopic.reset();\n\t\troomAdapter.removeUserFromRoom.reset();\n\t\troomAdapter.isUserAlreadyJoined.reset();\n\t\troomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.reset();\n\t\troomAdapter.getInternalRoomById.reset();\n\t\troomAdapter.addUserToRoom.reset();\n\t\troomAdapter.applyRoomRolesToUser.reset();\n\t\troomAdapter.updateDisplayRoomName.reset();\n\t\tuserAdapter.getFederatedUserByExternalId.reset();\n\t\tuserAdapter.createFederatedUser.reset();\n\t\tuserAdapter.updateFederationAvatar.reset();\n\t\tuserAdapter.setAvatar.reset();\n\t\tuserAdapter.getInternalUserByUsername.reset();\n\t\tuserAdapter.updateRealName.reset();\n\t\tuserAdapter.getFederatedUsersByExternalIds.reset();\n\t\tmessageAdapter.sendMessage.reset();\n\t\tmessageAdapter.sendFileMessage.reset();\n\t\tmessageAdapter.deleteMessage.reset();\n\t\tmessageAdapter.getMessageByFederationId.reset();\n\t\tmessageAdapter.editMessage.reset();\n\t\tmessageAdapter.unreactToMessage.reset();\n\t\tmessageAdapter.findOneByFederationIdOnReactions.reset();\n\t\tmessageAdapter.sendQuoteFileMessage.reset();\n\t\tmessageAdapter.sendQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteMessage.reset();\n\t\tmessageAdapter.sendThreadMessage.reset();\n\t\tmessageAdapter.sendThreadFileMessage.reset();\n\t\tmessageAdapter.sendThreadQuoteFileMessage.reset();\n\t\tbridge.extractHomeserverOrigin.reset();\n\t\tbridge.joinRoom.reset();\n\t\tbridge.getUserProfileInformation.reset();\n\t\tbridge.getReadStreamForFileFromUrl.reset();\n\t\tbridge.getRoomData.reset();\n\t\tbridge.getRoomHistoricalJoinEvents.reset();\n\t\tfileAdapter.uploadFile.reset();\n\t\tqueueInstance.addToQueue.reset();\n\t});\n\tdescribe('#onCreateRoom()', () => {\n\t\tit('should NOT create users nor room if the room already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tawait service.onCreateRoom({} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create users nor room if the room was created internally and programatically even if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it is not a DM message and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'c' });\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room if it was created internally and programatically but it does not exists and dont create the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves(undefined);\n\t\t\tawait service.onCreateRoom({ wasInternallyProgramaticallyCreated: true } as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room if it was created internally and programatically but it is a DM message but it should NOT create a new DM Room(this is necessary due to a race condition on matrix events)', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\troomAdapter.getInternalRoomById.resolves({ t: 'd' });\n\t\t\tawait service.onCreateRoom({\n\t\t\t\twasInternallyProgramaticallyCreated: true,\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateFederatedRoomByInternalRoomId.calledWith('internalRoomId', 'externalRoomId')).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomMembership()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to LOCAL', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method if the room already exists AND event origin is equal to REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.REMOTE } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT process the method logic if the event was generated on the proxy home server, it is NOT a join event (user joining himself), but the room does not exists yet', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT create the inviter if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the inviter if it does not exists', async () => {\n\t\t\tconst inviter = FederatedUser.createInstance('externalInviterId', {\n\t\t\t\tname: 'inviterUsernameOnly',\n\t\t\t\tusername: 'inviterUsernameOnly',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onFirstCall().resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t\tnormalizedInviterId: 'normalizedInviterId',\n\t\t\t\tinviterUsernameOnly: 'inviterUsernameOnly',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\t\tit('should NOT create the invitee if it already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({ externalRoomId: 'externalRoomId', eventOrigin: EVENT_ORIGIN.LOCAL } as any);\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\t\tit('should create the invitee if it does not exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onSecondCall().resolves(undefined);\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\t\tit('should throw an error if the invitee user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should throw an error if the inviter user does not exists at all', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait expect(\n\t\t\t\tservice.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any),\n\t\t\t).to.be.rejectedWith('Invitee or inviter user not found');\n\t\t});\n\t\tit('should NOT create the room if it does not exists yet AND the event origin is REMOTE but there is no room type on the event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: undefined,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state)', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message and it is handling regular events (m.room.member)(not using the property extracted from the invite_room_state), but not automatically join the invitee if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledOnceWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should create a room for DM if the room type is equal a direct message handling the property extracted from the invite_room_state, but not automatically join the user if he/she is not from the proxy homeserver', async () => {\n\t\t\tconst inviter = user;\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(inviter);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tallInviteesExternalIdsWhenDM: [\n\t\t\t\t\t{\n\t\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t\t\tinviteeUsernameOnly: 'inviteeUsernameOnly',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', inviter, [inviter, invitee]);\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves(['event1', 'event2']);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\t['event1', 'event2'].forEach((event) => expect(queueInstance.addToQueue.calledWith(event)).to.be.true);\n\t\t});\n\t\tit('should create a room (not DM) if the room type is NOT equal a direct message AND NOT to add the historical room events to the processing queue when they exists', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t} as any);\n\t\t\tconst createdRoom = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', invitee, RoomType.CHANNEL);\n\t\t\texpect(roomAdapter.createFederatedRoom.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t\texpect(queueInstance.addToQueue.called).to.be.false;\n\t\t});\n\t\tit('should call the update name function if the name is inside the received input', async () => {\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(invitee);\n\t\t\tbridge.getRoomHistoricalJoinEvents.resolves([]);\n\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\texternalRoomName: 'externalRoomName',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\texternalInviterId: 'externalInviterId',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tspy.calledWith({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomName: 'externalRoomName',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\texternalSenderId: 'externalInviterId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should NOT create the room if it already exists yet AND the event origin is REMOTE', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should remove the user from room if its a LEAVE event and the user is in the room already', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove the user from room if its a LEAVE event and the user is NOT in the room anymore', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: true,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT remove and recreate the DM room if the user is already part of the room (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference(\n\t\t\t\t'externalRoomId',\n\t\t\t\t{ usernames: [user.getUsername() as string] } as any,\n\t\t\t\t[user, user],\n\t\t\t);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t});\n\t\tit('should remove and recreate the DM room if the user is part of the room yet (in case of being a multiple DM, Matrix send events for each user at a time, which requires us to remove and recreate the DM room)', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createWithInternalReference('externalRoomId', { usernames: [] } as any, [user, user]);\n\t\t\tconst invitee = FederatedUser.createInstance('externalInviteeId', {\n\t\t\t\tname: 'normalizedInviteeId',\n\t\t\t\tusername: 'normalizedInviteeId',\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(invitee);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.DIRECT_MESSAGE,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\tconst createdRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user, invitee]);\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.calledWith(dmRoom)).to.be.true;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.calledWith(createdRoom)).to.be.true;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should NOT add the user to the room if its NOT a LEAVE event but the user is already in the room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event providing the inviter when the user is NOT joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t});\n\t\tit('should join the room using the bridge if its NOT a leave event AND the invitee is from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.calledWith('externalRoomId', 'externalInviteeId')).to.be.true;\n\t\t});\n\t\tit('should NOT join the room using the bridge if its NOT a leave event AND the invitee is NOT from the proxy home server', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user, user)).to.be.true;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t});\n\t\tit('should add the user into the room if its NOT a LEAVE event NOT providing the inviter when the user is joining by himself', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.REMOTE,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.removeUserFromRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.removeDirectMessageRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.createFederatedRoomForDirectMessage.called).to.be.false;\n\t\t\texpect(bridge.joinRoom.called).to.be.false;\n\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t});\n\t\tdescribe('Handling users auto-joining', () => {\n\t\t\tit('should subscribe to the typings events if the room already exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT add the user to the room if the user is already a room member', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(true);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should add the user to the room if the user is NOT a room member yet', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if it was not possible to retrieve the information from the room from the bridge', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT create the room if it there is already a room creation process already running', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\troomAdapter.isUserAlreadyJoined.resolves(false);\n\t\t\t\tbridge.getRoomData.resolves({ creator: {} });\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the creator user only if it does not exists yet and use the provided username if its from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: 'creatorId', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\t\texpect(spy.calledWith('creatorId', 'creatorUsername', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should create the creator user if it does not exists yet and use the external id as username if its not from the same homeserver', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserInternallyOnly');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\texpect(spy.calledWith('@creatorId:externalserver.com', 'creatorId:externalserver.com', existsOnlyOnProxyServer)).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT create the room if the creator does not exists nor was created successfully previously', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tbridge.getRoomData.resolves({ creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(roomAdapter.createFederatedRoom.called).to.be.false;\n\t\t\t});\n\t\t\tit('should create the room using the external room name if its original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'roomName'),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create the room using nothing if its not original from the same homeserver', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\troomAdapter.createFederatedRoom.calledWith(\n\t\t\t\t\t\tFederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, undefined),\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should dispatch a room name event if its not from the same homeserver and it was possible to retrieve the name from the bridge query', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'onChangeRoomName');\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves();\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves();\n\t\t\t\tbridge.getRoomData.resolves({ name: 'roomName', creator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' } });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tspy.calledWith({\n\t\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\t\tnormalizedRoomName: 'roomName',\n\t\t\t\t\t\texternalEventId: '',\n\t\t\t\t\t\texternalSenderId: user.getExternalId(),\n\t\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\t}),\n\t\t\t\t).to.be.true;\n\t\t\t});\n\t\t\tit('should create federated users for each member of the room excluding the one joining and the creator, and add them to the room ', async () => {\n\t\t\t\tconst stub = sinon.stub(service, 'createFederatedUserAndReturnIt');\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\tstub.resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(stub.callCount).to.be.equal(3);\n\t\t\t\texpect(stub.getCall(1).calledWith('user1')).to.be.true;\n\t\t\t\texpect(stub.getCall(2).calledWith('user2')).to.be.true;\n\t\t\t\texpect(roomAdapter.addUsersToRoomWhenJoinExternalPublicRoom.calledWith([user, user])).to.be.true;\n\t\t\t});\n\t\t\tit('should add the user to the room and subscribe to typings events if everything was done correctly', async () => {\n\t\t\t\tsinon.stub(service, 'createFederatedUserAndReturnIt').resolves(user);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(0).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(1).resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onCall(2).resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(0).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(1).resolves(user);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(2).resolves(undefined);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.onCall(3).resolves(user);\n\t\t\t\troomAdapter.createFederatedRoom.resolves({});\n\t\t\t\tbridge.getRoomData.resolves({\n\t\t\t\t\tjoinedMembers: ['user1', '@creatorId:externalserver.com', user.getExternalId(), 'user2'],\n\t\t\t\t\tcreator: { id: '@creatorId:externalserver.com', username: 'creatorUsername' },\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\texternalInviterId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(notificationsAdapter.subscribeToUserTypingEventsOnFederatedRoomId.called).to.be.true;\n\t\t\t\texpect(roomAdapter.addUserToRoom.calledWith(room, user)).to.be.true;\n\t\t\t});\n\t\t});\n\t\tdescribe('User profile changed event', () => {\n\t\t\tit('should NOT call the function to update the user avatar if the event does not include an avatarUrl property', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tawait service.onChangeRoomMembership({\n\t\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\t\tleave: false,\n\t\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\t} as any);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tconst eventForUserProfileChanges = {\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\tnormalizedRoomId: 'normalizedRoomId',\n\t\t\t\teventOrigin: EVENT_ORIGIN.LOCAL,\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t\texternalInviteeId: 'externalInviteeId',\n\t\t\t\tleave: false,\n\t\t\t\tnormalizedInviteeId: 'normalizedInviteeId',\n\t\t\t\tuserProfile: {\n\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\tdisplayName: 'displayName',\n\t\t\t\t},\n\t\t\t} as any;\n\t\t\tit('should NOT call the function to update the avatar internally if the user does not exists', async () => {\n\t\t\t\tconst spy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(spy.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar nor the display name if both does not exists', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: {} });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url nor the display name if the user is from the local home server', async () => {\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createInstance('externalInviterId', {\n\t\t\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT update the avatar url if the url received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tfederation: {\n\t\t\t\t\t\t\tavatarUrl: 'avatarUrl',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { avatarUrl: 'avatarUrl' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst userAvatar = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tfederation: {\n\t\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t\t},\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\t\tawait service.onChangeRoomMembership(eventForUserProfileChanges);\n\t\t\t\texpect(userAdapter.setAvatar.calledWith(userAvatar, 'toHttpUrl')).to.be.true;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.calledWith(userAvatar.getInternalId(), 'avatarUrl')).to.be.true;\n\t\t\t});\n\t\t\tit('should NOT update the display name if the name received in the event is equal to the one already used', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\t\tFederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t\tname: 'displayName',\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.called).to.be.false;\n\t\t\t});\n\t\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\t\tconst user = FederatedUser.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\t_id: 'userId',\n\t\t\t\t\tname: 'currentName',\n\t\t\t\t});\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tawait service.onChangeRoomMembership({ ...eventForUserProfileChanges, userProfile: { displayName: 'displayName' } });\n\t\t\t\texpect(userAdapter.setAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateFederationAvatar.called).to.be.false;\n\t\t\t\texpect(userAdapter.updateRealName.calledWith(user.getInternalReference(), 'displayName')).to.be.true;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalFileMessageReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendFileMessage.calledWith(user, room, files, attachments)).to.be.true;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalFileMessageReceived({\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalMessageReceived()', () => {\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendMessage.calledWith({}, {}, 'rawMessage', 'externalFormattedText', 'externalEventId', 'localDomain')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves({} as any);\n\t\t\t\tawait service.onExternalMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendQuoteMessage.calledWith({}, {}, 'externalFormattedText', 'rawMessage', 'externalEventId', {}, 'localDomain'),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onChangeJoinRules()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room type if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room type if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.CHANNEL,\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomType.called).to.be.false;\n\t\t});\n\t\tit('should change the room type if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tawait service.onChangeJoinRules({\n\t\t\t\troomType: RoomType.PRIVATE_GROUP,\n\t\t\t} as any);\n\t\t\troom.changeRoomType(RoomType.PRIVATE_GROUP);\n\t\t\texpect(roomAdapter.updateRoomType.calledWith(room)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomName()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room name if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room name if the room is an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:localDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room name if the room is NOT an internal room', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\texternalRoomId: '!externalRoomId:externalDomain',\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\troom.changeRoomName('!externalRoomId:externalDomain');\n\t\t\texpect(roomAdapter.updateRoomName.calledWith(room)).to.be.true;\n\t\t});\n\t\tit('should NOT change the room fname if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateDisplayRoomName.called).to.be.false;\n\t\t});\n\t\tit('should change the room fname if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomName({\n\t\t\t\tnormalizedRoomName: 'normalizedRoomName2',\n\t\t\t} as any);\n\t\t\troom.changeDisplayRoomName('normalizedRoomName2');\n\t\t\texpect(roomAdapter.updateDisplayRoomName.calledWith(room, user)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onChangeRoomTopic()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT change the room topic if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should NOT change the room topic if it exists and is a direct message', async () => {\n\t\t\tconst dmRoom = DirectMessageFederatedRoom.createInstance('externalRoomId', user, [user, user]);\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(dmRoom);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.updateRoomTopic.called).to.be.false;\n\t\t});\n\t\tit('should change the room topic if it exists and is NOT a direct message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tawait service.onChangeRoomTopic({\n\t\t\t\troomTopic: 'roomTopic',\n\t\t\t} as any);\n\t\t\troom.changeRoomTopic('roomTopic');\n\t\t\texpect(roomAdapter.updateRoomTopic.calledWith(room, user)).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onRedactEvent()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT delete the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT delete the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should delete the message if its a raw text redact handler', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'msg' });\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(undefined);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.calledWith({ msg: 'msg' }, user)).to.be.true;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT unreact if the message was not reacted before by the user', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves({\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {},\n\t\t\t\t\t\tusernames: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.called).to.be.false;\n\t\t});\n\t\tit('should unreact if the message was reacted before by the user', async () => {\n\t\t\tconst message = {\n\t\t\t\tmsg: 'msg',\n\t\t\t\treactions: {\n\t\t\t\t\treaction: {\n\t\t\t\t\t\tfederationReactionEventIds: {\n\t\t\t\t\t\t\tredactsEvent: user.getUsername(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusernames: [user.getUsername()],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tmessageAdapter.findOneByFederationIdOnReactions.resolves(message);\n\t\t\tawait service.onRedactEvent({\n\t\t\t\tredactsEvent: 'redactsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.deleteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.unreactToMessage.calledWith(user, message, 'reaction', 'redactsEvent')).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onExternalMessageEditedReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the message if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the message does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the message if the content of the message is equal of the oldest one', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'newRawMessage' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t});\n\t\tit('should update the message', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne' });\n\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.editMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', { msg: 'differentOne' }, 'localDomain'),\n\t\t\t).to.be.true;\n\t\t});\n\t\tdescribe('Editing quoted messages', () => {\n\t\t\tit('should NOT edit the quoted message if the event was generated locally (the message edited was on local server only)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({ msg: 'differentOne', attachments: [{ message_link: 'link' }] });\n\t\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:localDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should NOT edit the quoted message if the event was remotely generated but the message content is the same as the current one (the message is already up to date)', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves({\n\t\t\t\t\tmsg: 'internalFormattedMessageToBeEdited',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t});\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should edit the quoted message if the event was remotely the message content is outdated', async () => {\n\t\t\t\tconst message = {\n\t\t\t\t\tmsg: 'differentOne',\n\t\t\t\t\tattachments: [{ message_link: 'link' }],\n\t\t\t\t};\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(message);\n\t\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\t\tmessageAdapter.getMessageToEditWhenReplyAndQuote.resolves('internalFormattedMessageToBeEdited');\n\t\t\t\tawait service.onExternalMessageEditedReceived({\n\t\t\t\t\teditsEvent: 'editsEvent',\n\t\t\t\t\tnewMessageText: 'newMessageText',\n\t\t\t\t\tnewRawMessage: 'newRawMessage',\n\t\t\t\t\tnewExternalFormattedText: 'newExternalFormattedText',\n\t\t\t\t\texternalSenderId: 'externalSenderId:externalDomain',\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.editMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.editQuotedMessage.calledWith(user, 'newRawMessage', 'newExternalFormattedText', message, 'localDomain')).to.be\n\t\t\t\t\t.true;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onChangeRoomPowerLevels()', () => {\n\t\tconst user = FederatedUser.createInstance('externalUserId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT update the room roles if the room does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if the user does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should NOT update the room roles if there is no target users', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\trolesChangesToApply: [],\n\t\t\t} as any);\n\t\t\texpect(roomAdapter.applyRoomRolesToUser.called).to.be.false;\n\t\t});\n\t\tit('should update the room roles adding one role to be added', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: ['owner'],\n\t\t\t\t\trolesToRemove: [],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t\tit('should update the room roles adding one role to be removed', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUsersByExternalIds.resolves([user]);\n\t\t\tawait service.onChangeRoomPowerLevels({\n\t\t\t\texternalRoomId: 'externalRoomId',\n\t\t\t\texternalSenderId: 'externalSenderId',\n\t\t\t\troleChangesToApply: {\n\t\t\t\t\texternalUserId: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'remove',\n\t\t\t\t\t\t\trole: 'owner',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\troomAdapter.applyRoomRolesToUser.calledWith({\n\t\t\t\t\tfederatedRoom: room,\n\t\t\t\t\ttargetFederatedUser: user,\n\t\t\t\t\tfromUser: user,\n\t\t\t\t\trolesToAdd: [],\n\t\t\t\t\trolesToRemove: ['owner'],\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t}),\n\t\t\t).to.be.true;\n\t\t});\n\t});\n\tdescribe('#onExternalThreadedMessageReceived()', () => {\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the message was already be sent through federation and is just a reply back event', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({} as any);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room, the sender already exists and the message does not exists, because it was sent originally from Matrix', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\tmessageText: 'text',\n\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(\n\t\t\t\tmessageAdapter.sendThreadMessage.calledWith(\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'rawMessage',\n\t\t\t\t\t'externalEventId',\n\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t'localDomain',\n\t\t\t\t),\n\t\t\t).to.be.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onSecondCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.onThirdCall().resolves(undefined);\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves({} as any);\n\t\t\t\tawait service.onExternalThreadedMessageReceived({\n\t\t\t\t\tmessageText: 'text',\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\trawMessage: 'rawMessage',\n\t\t\t\t\texternalFormattedText: 'externalFormattedText',\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteMessage.calledWith(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'rawMessage',\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t\t'externalFormattedText',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('#onExternalThreadedFileMessageReceived()', () => {\n\t\tconst user = FederatedUser.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: false,\n\t\t});\n\t\tconst room = FederatedRoom.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tit('should NOT send a message if the thread root event id does not exist', async () => {\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the internal thread parent message does not exist', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the room does not exists', async () => {\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should NOT send a message if the sender does not exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves({} as any);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(undefined);\n\t\t\tmessageAdapter.getMessageByFederationId.resolves({});\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\trawMessage: 'text',\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t});\n\t\tit('should send a message if the room and the sender already exists', async () => {\n\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.getReadStreamForFileFromUrl.resolves();\n\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\tmessageBody: {\n\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\turl: 'url',\n\t\t\t\t},\n\t\t\t} as any);\n\t\t\texpect(messageAdapter.sendThreadFileMessage.calledWith(user, room, files, attachments, 'externalEventId', 'messageThreadId')).to.be\n\t\t\t\t.true;\n\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t});\n\t\tdescribe('Quoting messages', () => {\n\t\t\tit('should NOT send a quote message if its necessary to quote but the message to quote does not exists', async () => {\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.resolves(undefined);\n\t\t\t\tfileAdapter.uploadFile.resolves({} as any);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(undefined);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(messageAdapter.sendThreadQuoteFileMessage.called).to.be.false;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t\tit('should send a quote message if its necessary to quote and the message to quote exists', async () => {\n\t\t\t\tconst messageToReplyTo = { federation: { eventId: 'eventId' } } as any;\n\t\t\t\troomAdapter.getFederatedRoomByExternalId.resolves(room);\n\t\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onFirstCall().resolves({ _id: 'messageThreadId' });\n\t\t\t\tmessageAdapter.getMessageByFederationId.onSecondCall().resolves(undefined);\n\t\t\t\tmessageAdapter.getMessageByFederationId.onThirdCall().resolves(messageToReplyTo);\n\t\t\t\tconst files = [{ id: 'fileId', name: 'filename' }];\n\t\t\t\tconst attachments = ['attachment', 'attachment2'];\n\t\t\t\tfileAdapter.uploadFile.resolves({ files, attachments } as any);\n\t\t\t\tawait service.onExternalThreadedFileMessageReceived({\n\t\t\t\t\tthread: { rootEventId: 'rootEventId' },\n\t\t\t\t\texternalEventId: 'externalEventId',\n\t\t\t\t\treplyToEventId: 'replyToEventId',\n\t\t\t\t\tmessageBody: {\n\t\t\t\t\t\tfilename: 'filename',\n\t\t\t\t\t\tsize: 12,\n\t\t\t\t\t\tmimetype: 'mimetype',\n\t\t\t\t\t\turl: 'url',\n\t\t\t\t\t},\n\t\t\t\t} as any);\n\t\t\t\texpect(\n\t\t\t\t\tmessageAdapter.sendThreadQuoteFileMessage.calledWith(\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tfiles,\n\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t'externalEventId',\n\t\t\t\t\t\tmessageToReplyTo,\n\t\t\t\t\t\t'localDomain',\n\t\t\t\t\t\t'messageThreadId',\n\t\t\t\t\t),\n\t\t\t\t).to.be.true;\n\t\t\t\texpect(messageAdapter.sendThreadFileMessage.called).to.be.false;\n\t\t\t});\n\t\t});\n\t});\n});"
}