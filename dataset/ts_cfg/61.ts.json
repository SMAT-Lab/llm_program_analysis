{
  "type": "file",
  "name": "61.ts",
  "label": "61.ts",
  "start_line": -1,
  "end_line": 71,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 44,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/61.ts: %dflt\nTAG = 'UserFileObserver'\n%0 = new @ts_files/61.ts: UserFileObserver\ninstanceinvoke %0.<@ts_files/61.ts: UserFileObserver.constructor()>()\nuserFileObserver = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "UserFileObserver",
      "label": "UserFileObserver",
      "start_line": 1,
      "end_line": 71,
      "functions": [
        {
          "type": "function",
          "name": "registerObserver",
          "label": "registerObserver",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "callback = parameter0: UserFileObserverCallback|null\nthis = this: @ts_files/61.ts: UserFileObserver\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerObserver')\nif callback == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'registerObserver with empty callback')\nreturn",
                  "start_line": 1,
                  "end_line": 44,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\n%1 = instanceinvoke %0.<@%unk/%unk: .indexOf()>(callback)\nif %1 < 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\ninstanceinvoke %2.<@%unk/%unk: .push()>(callback)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\n%4 = %3.<@%unk/%unk: .length>\nif %4 === 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerObserver register media')",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%5 = photoAccessHelper.<@%unk/%unk: .DefaultChangeUri>\n%6 = %5.<@%unk/%unk: .DEFAULT_PHOTO_URI>\n%7 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\ninstanceinvoke %7.<@%unk/%unk: .registerChange()>(%6, true, %AM0$registerObserver)\n%8 = photoAccessHelper.<@%unk/%unk: .DefaultChangeUri>\n%9 = %8.<@%unk/%unk: .DEFAULT_ALBUM_URI>\n%10 = instanceinvoke userFileModel.<@%unk/%unk: .getUserFileMgr()>()\ninstanceinvoke %10.<@%unk/%unk: .registerChange()>(%9, true, %AM1$registerObserver)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 37,
                                      "end_line": 44,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerObserver already exist')\nreturn",
                      "start_line": 1,
                      "end_line": 44,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%11 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%12 = 'registerObserver faild, err: ' + %11\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %12)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "sendNotify",
          "label": "sendNotify",
          "start_line": 1,
          "end_line": 64,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mediaType = parameter0: string\nthis = this: @ts_files/61.ts: UserFileObserver\n%0 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\n%1 = %0.<@%unk/%unk: .length>\n%2 = 'registerObserver sendNotify size: ' + %1\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\n%4 = instanceinvoke %3.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = instanceinvoke %4.<@%unk/%unk: .next()>()\n%6 = %5.<@ES2015/BuiltinClass: IteratorResult.done>\nif %6 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = %5.<@ES2015/BuiltinClass: IteratorResult.value>\ncallback = <any>%7\ninstanceinvoke callback.<@%unk/%unk: .onChange()>(mediaType)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 37,
                      "end_line": 44,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "unregisterObserver",
          "label": "unregisterObserver",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "callback = parameter0: UserFileObserverCallback|null\nthis = this: @ts_files/61.ts: UserFileObserver\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'unregisterObserver')\n%0 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\npos = instanceinvoke %0.<@%unk/%unk: .indexOf()>(callback)\nif pos >= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/61.ts: UserFileObserver.callbacks>\ninstanceinvoke %1.<@%unk/%unk: .splice()>(pos, 1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 37,
                      "end_line": 44,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$registerObserver",
          "label": "%AM0$registerObserver",
          "start_line": 1,
          "end_line": 50,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/61.ts: UserFileObserver\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerObserver on image')\n%0 = MediaConstants.<@%unk/%unk: .MEDIA_TYPE_IMAGE>\ninstanceinvoke this.<@ts_files/61.ts: UserFileObserver.sendNotify(string)>(%0)\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        }"
        },
        {
          "type": "function",
          "name": "%AM1$registerObserver",
          "label": "%AM1$registerObserver",
          "start_line": 1,
          "end_line": 54,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/61.ts: UserFileObserver\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerObserver on album')\n%0 = MediaConstants.<@%unk/%unk: .MEDIA_TYPE_ALBUM>\ninstanceinvoke this.<@ts_files/61.ts: UserFileObserver.sendNotify(string)>(%0)\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }\n\n  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from './UserFileModel';\nimport { UserFileObserverCallback } from './UserFileObserverCallback';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nconst TAG = 'UserFileObserver';\n\nclass UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }\n\n  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }\n}\n\nexport let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);\n"
}