{
  "type": "file",
  "name": "47.ts",
  "label": "47.ts",
  "start_line": -1,
  "end_line": 33,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 33,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/47.ts: %dflt\nTAG = 'UiUtil'\nreturn",
              "start_line": 1,
              "end_line": 33,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "UiUtil",
      "label": "UiUtil",
      "start_line": 1,
      "end_line": 23,
      "functions": [
        {
          "type": "function",
          "name": "getAlbumGridCount",
          "label": "getAlbumGridCount",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "horizontal = parameter0: boolean\nthis = this: @ts_files/47.ts: UiUtil\n%0 = instanceinvoke screenManager.<@%unk/%unk: .getWinWidth()>()\n%1 = 'get screen width is : ' + %0\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\n%2 = instanceinvoke screenManager.<@%unk/%unk: .getWinHeight()>()\n%3 = 'get screen height is : ' + %2\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %3)\nif horizontal != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "sideBarWidth = Constants.<@%unk/%unk: .TAB_BAR_WIDTH>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = instanceinvoke screenManager.<@%unk/%unk: .getWinWidth()>()\ncontentWidth = %5 - sideBarWidth\n%6 = Constants.<@%unk/%unk: .ALBUM_SET_COVER_SIZE>\n%7 = Constants.<@%unk/%unk: .GRID_MAX_SIZE_RATIO>\nmaxCardWidth = %6 * %7\n%8 = Constants.<@%unk/%unk: .ALBUM_SET_MARGIN>\n%9 = %8 * 2\n%10 = contentWidth - %9\n%11 = Constants.<@%unk/%unk: .ALBUM_SET_GUTTER>\n%12 = %10 + %11\n%13 = Constants.<@%unk/%unk: .ALBUM_SET_GUTTER>\n%14 = maxCardWidth + %13\n%15 = %12 / %14\ngridColumnsCount = instanceinvoke Math.<@%unk/%unk: .ceil()>(%15)\n%16 = 'the grid count in a line is : ' + gridColumnsCount\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %16)\nreturn gridColumnsCount",
                      "start_line": 1,
                      "end_line": 33,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "sideBarWidth = 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getAlbumGridCount(horizontal: boolean): number {\n    Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\n    Log.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\n    let sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\n    let contentWidth = screenManager.getWinWidth() - sideBarWidth;\n\n    let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\n    let gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n    / (maxCardWidth + Constants.ALBUM_SET_GUTTER));\n    Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\n    return gridColumnsCount;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class UiUtil {\n  public static getAlbumGridCount(horizontal: boolean): number {\n    Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\n    Log.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\n    let sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\n    let contentWidth = screenManager.getWinWidth() - sideBarWidth;\n\n    let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\n    let gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n    / (maxCardWidth + Constants.ALBUM_SET_GUTTER));\n    Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\n    return gridColumnsCount;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport { screenManager } from '../common/ScreenManager'\nimport { Constants } from '../constants/Constants'\n\nconst TAG = 'UiUtil';\n\nexport class UiUtil {\n  public static getAlbumGridCount(horizontal: boolean): number {\n    Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\n    Log.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\n    let sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\n    let contentWidth = screenManager.getWinWidth() - sideBarWidth;\n\n    let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\n    let gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n    / (maxCardWidth + Constants.ALBUM_SET_GUTTER));\n    Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\n    return gridColumnsCount;\n  }\n}\n"
}