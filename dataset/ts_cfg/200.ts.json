{
  "type": "file",
  "name": "200.ts",
  "label": "200.ts",
  "start_line": -1,
  "end_line": 79,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 79,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/200.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "BillingPortalWorkspaceService",
      "label": "BillingPortalWorkspaceService",
      "start_line": 1,
      "end_line": 79,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/200.ts: BillingPortalWorkspaceService.%instInit()>()\nstripeService = parameter0: StripeService\nenvironmentService = parameter1: EnvironmentService\nbillingSubscriptionRepository = parameter2: Repository<BillingSubscription>\nuserWorkspaceRepository = parameter3: Repository<UserWorkspace>\nbillingSubscriptionService = parameter4: BillingSubscriptionService\nthis = this: @ts_files/200.ts: BillingPortalWorkspaceService\nreturn",
              "start_line": 1,
              "end_line": 79,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(\n    private readonly stripeService: StripeService,\n    private readonly environmentService: EnvironmentService,\n    @InjectRepository(BillingSubscription, 'core')\n    private readonly billingSubscriptionRepository: Repository<BillingSubscription>,\n    @InjectRepository(UserWorkspace, 'core')\n    private readonly userWorkspaceRepository: Repository<UserWorkspace>,\n    private readonly billingSubscriptionService: BillingSubscriptionService,\n  ) {}"
        },
        {
          "type": "function",
          "name": "computeCheckoutSessionURL",
          "label": "computeCheckoutSessionURL",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "user = parameter0: User\nworkspace = parameter1: Workspace\npriceId = parameter2: string\nsuccessUrlPath = parameter3: string\nthis = this: @ts_files/200.ts: BillingPortalWorkspaceService\n%0 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.environmentService>\nfrontBaseUrl = instanceinvoke %0.<@%unk/%unk: .get()>('FRONT_BASE_URL')\nif successUrlPath != ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "successUrl = frontBaseUrl + successUrlPath",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = new @ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$0\ninstanceinvoke %2.<@ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$0.constructor()>()\n%3 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.userWorkspaceRepository>\n%4 = instanceinvoke %3.<@%unk/%unk: .countBy()>(%2)\nquantity = await %4\n%5 = new @ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$1\ninstanceinvoke %5.<@ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$1.constructor()>()\n%6 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.billingSubscriptionRepository>\n%7 = instanceinvoke %6.<@%unk/%unk: .findOneBy()>(%5)\n%8 = await %7\nstripeCustomerId = %8.<@%unk/%unk: .stripeCustomerId>\n%9 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.stripeService>\n%10 = instanceinvoke %9.<@%unk/%unk: .createCheckoutSession()>(user, priceId, quantity, successUrl, frontBaseUrl, stripeCustomerId)\nsession = await %10\n%11 = session.<@%unk/%unk: .url>\nstaticinvoke <@%unk/%unk: .assert()>(%11, 'Error: missing checkout.session.url')\n%12 = session.<@%unk/%unk: .url>\nreturn %12",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "successUrl = frontBaseUrl",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async computeCheckoutSessionURL(\n    user: User,\n    workspace: Workspace,\n    priceId: string,\n    successUrlPath?: string,\n  ): Promise<string> {\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const successUrl = successUrlPath\n      ? frontBaseUrl + successUrlPath\n      : frontBaseUrl;\n    const quantity = await this.userWorkspaceRepository.countBy({\n      workspaceId: workspace.id,\n    });\n    const stripeCustomerId = (\n      await this.billingSubscriptionRepository.findOneBy({\n        workspaceId: user.defaultWorkspaceId,\n      })\n    )?.stripeCustomerId;\n    const session = await this.stripeService.createCheckoutSession(\n      user,\n      priceId,\n      quantity,\n      successUrl,\n      frontBaseUrl,\n      stripeCustomerId,\n    );\n    assert(session.url, 'Error: missing checkout.session.url');\n    return session.url;\n  }"
        },
        {
          "type": "function",
          "name": "computeBillingPortalSessionURLOrThrow",
          "label": "computeBillingPortalSessionURLOrThrow",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "workspaceId = parameter0: string\nreturnUrlPath = parameter1: string\nthis = this: @ts_files/200.ts: BillingPortalWorkspaceService\n%0 = new @ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeBillingPortalSessionURLOrThrow$2\ninstanceinvoke %0.<@ts_files/200.ts: %AC$BillingPortalWorkspaceService$computeBillingPortalSessionURLOrThrow$2.constructor()>()\n%1 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.billingSubscriptionService>\n%2 = instanceinvoke %1.<@%unk/%unk: .getCurrentBillingSubscriptionOrThrow()>(%0)\ncurrentSubscription = await %2\n%3 = !currentSubscription\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = new @%unk/%unk: Error\ninstanceinvoke %4.<@%unk/%unk: Error.constructor()>('Error: missing subscription')\nthrow %4",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "stripeCustomerId = currentSubscription.<@%unk/%unk: .stripeCustomerId>\n%5 = !stripeCustomerId\nif %5 != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%6 = new @%unk/%unk: Error\ninstanceinvoke %6.<@%unk/%unk: Error.constructor()>('Error: missing stripeCustomerId')\nthrow %6",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%7 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.environmentService>\nfrontBaseUrl = instanceinvoke %7.<@%unk/%unk: .get()>('FRONT_BASE_URL')\nif returnUrlPath != ''",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "returnUrl = frontBaseUrl + returnUrlPath",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%9 = this.<@ts_files/200.ts: BillingPortalWorkspaceService.stripeService>\n%10 = instanceinvoke %9.<@%unk/%unk: .createBillingPortalSession()>(stripeCustomerId, returnUrl)\nsession = await %10\n%11 = session.<@%unk/%unk: .url>\nstaticinvoke <@%unk/%unk: .assert()>(%11, 'Error: missing billingPortal.session.url')\n%12 = session.<@%unk/%unk: .url>\nreturn %12",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "returnUrl = frontBaseUrl",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async computeBillingPortalSessionURLOrThrow(\n    workspaceId: string,\n    returnUrlPath?: string,\n  ) {\n    const currentSubscription =\n      await this.billingSubscriptionService.getCurrentBillingSubscriptionOrThrow(\n        {\n          workspaceId,\n        },\n      );\n    if (!currentSubscription) {\n      throw new Error('Error: missing subscription');\n    }\n    const stripeCustomerId = currentSubscription.stripeCustomerId;\n    if (!stripeCustomerId) {\n      throw new Error('Error: missing stripeCustomerId');\n    }\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const returnUrl = returnUrlPath\n      ? frontBaseUrl + returnUrlPath\n      : frontBaseUrl;\n    const session = await this.stripeService.createBillingPortalSession(\n      stripeCustomerId,\n      returnUrl,\n    );\n    assert(session.url, 'Error: missing billingPortal.session.url');\n    return session.url;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Injectable()\nexport class BillingPortalWorkspaceService {\n  protected readonly logger = new Logger(BillingPortalWorkspaceService.name);\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly environmentService: EnvironmentService,\n    @InjectRepository(BillingSubscription, 'core')\n    private readonly billingSubscriptionRepository: Repository<BillingSubscription>,\n    @InjectRepository(UserWorkspace, 'core')\n    private readonly userWorkspaceRepository: Repository<UserWorkspace>,\n    private readonly billingSubscriptionService: BillingSubscriptionService,\n  ) {}\n  async computeCheckoutSessionURL(\n    user: User,\n    workspace: Workspace,\n    priceId: string,\n    successUrlPath?: string,\n  ): Promise<string> {\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const successUrl = successUrlPath\n      ? frontBaseUrl + successUrlPath\n      : frontBaseUrl;\n    const quantity = await this.userWorkspaceRepository.countBy({\n      workspaceId: workspace.id,\n    });\n    const stripeCustomerId = (\n      await this.billingSubscriptionRepository.findOneBy({\n        workspaceId: user.defaultWorkspaceId,\n      })\n    )?.stripeCustomerId;\n    const session = await this.stripeService.createCheckoutSession(\n      user,\n      priceId,\n      quantity,\n      successUrl,\n      frontBaseUrl,\n      stripeCustomerId,\n    );\n    assert(session.url, 'Error: missing checkout.session.url');\n    return session.url;\n  }\n  async computeBillingPortalSessionURLOrThrow(\n    workspaceId: string,\n    returnUrlPath?: string,\n  ) {\n    const currentSubscription =\n      await this.billingSubscriptionService.getCurrentBillingSubscriptionOrThrow(\n        {\n          workspaceId,\n        },\n      );\n    if (!currentSubscription) {\n      throw new Error('Error: missing subscription');\n    }\n    const stripeCustomerId = currentSubscription.stripeCustomerId;\n    if (!stripeCustomerId) {\n      throw new Error('Error: missing stripeCustomerId');\n    }\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const returnUrl = returnUrlPath\n      ? frontBaseUrl + returnUrlPath\n      : frontBaseUrl;\n    const session = await this.stripeService.createBillingPortalSession(\n      stripeCustomerId,\n      returnUrl,\n    );\n    assert(session.url, 'Error: missing billingPortal.session.url');\n    return session.url;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$0",
      "label": "%AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$0",
      "start_line": 34,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      workspaceId: workspace.id,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$1",
      "label": "%AC$BillingPortalWorkspaceService$computeCheckoutSessionURL$1",
      "start_line": 38,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        workspaceId: user.defaultWorkspaceId,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$BillingPortalWorkspaceService$computeBillingPortalSessionURLOrThrow$2",
      "label": "%AC$BillingPortalWorkspaceService$computeBillingPortalSessionURLOrThrow$2",
      "start_line": 59,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          workspaceId,\n        }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { BillingSubscription } from 'src/engine/core-modules/billing/entities/billing-subscription.entity';\nimport { BillingSubscriptionService } from 'src/engine/core-modules/billing/services/billing-subscription.service';\nimport { StripeService } from 'src/engine/core-modules/billing/stripe/stripe.service';\nimport { EnvironmentService } from 'src/engine/core-modules/environment/environment.service';\nimport { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\nimport { User } from 'src/engine/core-modules/user/user.entity';\nimport { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\nimport { assert } from 'src/utils/assert';\n@Injectable()\nexport class BillingPortalWorkspaceService {\n  protected readonly logger = new Logger(BillingPortalWorkspaceService.name);\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly environmentService: EnvironmentService,\n    @InjectRepository(BillingSubscription, 'core')\n    private readonly billingSubscriptionRepository: Repository<BillingSubscription>,\n    @InjectRepository(UserWorkspace, 'core')\n    private readonly userWorkspaceRepository: Repository<UserWorkspace>,\n    private readonly billingSubscriptionService: BillingSubscriptionService,\n  ) {}\n  async computeCheckoutSessionURL(\n    user: User,\n    workspace: Workspace,\n    priceId: string,\n    successUrlPath?: string,\n  ): Promise<string> {\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const successUrl = successUrlPath\n      ? frontBaseUrl + successUrlPath\n      : frontBaseUrl;\n    const quantity = await this.userWorkspaceRepository.countBy({\n      workspaceId: workspace.id,\n    });\n    const stripeCustomerId = (\n      await this.billingSubscriptionRepository.findOneBy({\n        workspaceId: user.defaultWorkspaceId,\n      })\n    )?.stripeCustomerId;\n    const session = await this.stripeService.createCheckoutSession(\n      user,\n      priceId,\n      quantity,\n      successUrl,\n      frontBaseUrl,\n      stripeCustomerId,\n    );\n    assert(session.url, 'Error: missing checkout.session.url');\n    return session.url;\n  }\n  async computeBillingPortalSessionURLOrThrow(\n    workspaceId: string,\n    returnUrlPath?: string,\n  ) {\n    const currentSubscription =\n      await this.billingSubscriptionService.getCurrentBillingSubscriptionOrThrow(\n        {\n          workspaceId,\n        },\n      );\n    if (!currentSubscription) {\n      throw new Error('Error: missing subscription');\n    }\n    const stripeCustomerId = currentSubscription.stripeCustomerId;\n    if (!stripeCustomerId) {\n      throw new Error('Error: missing stripeCustomerId');\n    }\n    const frontBaseUrl = this.environmentService.get('FRONT_BASE_URL');\n    const returnUrl = returnUrlPath\n      ? frontBaseUrl + returnUrlPath\n      : frontBaseUrl;\n    const session = await this.stripeService.createBillingPortalSession(\n      stripeCustomerId,\n      returnUrl,\n    );\n    assert(session.url, 'Error: missing billingPortal.session.url');\n    return session.url;\n  }\n}"
}