{
  "type": "file",
  "name": "40.ts",
  "label": "40.ts",
  "start_line": -1,
  "end_line": 26,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/40.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "CommonObserverCallback",
      "label": "CommonObserverCallback",
      "start_line": 1,
      "end_line": 26,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/40.ts: CommonObserverCallback.%instInit()>()\nsource = parameter0: UserFileDataChangeCallback\nthis = this: @ts_files/40.ts: CommonObserverCallback\nthis.<@ts_files/40.ts: CommonObserverCallback.source> = source\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(source: UserFileDataChangeCallback) {\n    this.source = source;\n  }"
        },
        {
          "type": "function",
          "name": "onChange",
          "label": "onChange",
          "start_line": 1,
          "end_line": 26,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mediaType = parameter0: string\nthis = this: @ts_files/40.ts: CommonObserverCallback\n%0 = this.<@ts_files/40.ts: CommonObserverCallback.source>\ninstanceinvoke %0.<@%unk/%unk: .onUserFileDataChange()>(mediaType)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onChange(mediaType: string): void {\n    this.source.onUserFileDataChange(mediaType);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class CommonObserverCallback implements UserFileObserverCallback {\n  private source: UserFileDataChangeCallback;\n\n  constructor(source: UserFileDataChangeCallback) {\n    this.source = source;\n  }\n\n  onChange(mediaType: string): void {\n    this.source.onUserFileDataChange(mediaType);\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserFileObserverCallback } from '../base/UserFileObserverCallback';\nimport { UserFileDataChangeCallback } from '../base/UserFileDataChangeCallback';\n\nexport class CommonObserverCallback implements UserFileObserverCallback {\n  private source: UserFileDataChangeCallback;\n\n  constructor(source: UserFileDataChangeCallback) {\n    this.source = source;\n  }\n\n  onChange(mediaType: string): void {\n    this.source.onUserFileDataChange(mediaType);\n  }\n}"
}