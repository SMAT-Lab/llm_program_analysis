{
  "type": "file",
  "name": "46.ts",
  "label": "46.ts",
  "start_line": -1,
  "end_line": 35,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 27,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/46.ts: %dflt\nTAG = 'SelectManager'\n%0 = new @ts_files/46.ts: SelectManager\ninstanceinvoke %0.<@ts_files/46.ts: SelectManager.constructor()>()\nselectManager = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)\nreturn",
              "start_line": 1,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "SelectManager",
      "label": "SelectManager",
      "start_line": 1,
      "end_line": 35,
      "functions": [
        {
          "type": "function",
          "name": "isSelect",
          "label": "isSelect",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\ndefaultValue = parameter1: boolean\nthis = this: @ts_files/46.ts: SelectManager\n%0 = this.<@ts_files/46.ts: SelectManager.status>\n%1 = instanceinvoke %0.<@%unk/%unk: .has()>(key)\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/46.ts: SelectManager.status>\n%3 = instanceinvoke %2.<@%unk/%unk: .get()>(key)\nreturn %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return defaultValue",
                  "start_line": 27,
                  "end_line": 27,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isSelect(key: string, defaultValue: boolean): boolean {\n    if (this.status.has(key)) {\n      return this.status.get(key);\n    } else {\n      return defaultValue;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setSelect",
          "label": "setSelect",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\nvalue = parameter1: boolean\nthis = this: @ts_files/46.ts: SelectManager\n%0 = this.<@ts_files/46.ts: SelectManager.status>\ninstanceinvoke %0.<@%unk/%unk: .set()>(key, value)\nreturn",
              "start_line": 1,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelect(key: string, value: boolean): void {\n    this.status.set(key, value);\n  }"
        },
        {
          "type": "function",
          "name": "deleteSelect",
          "label": "deleteSelect",
          "start_line": 1,
          "end_line": 35,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "key = parameter0: string\nthis = this: @ts_files/46.ts: SelectManager\n%0 = this.<@ts_files/46.ts: SelectManager.status>\ninstanceinvoke %0.<@%unk/%unk: .delete()>(key)\nreturn",
              "start_line": 1,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "deleteSelect(key: string): void {\n    this.status.delete(key);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class SelectManager {\n  private status: Map<string, boolean> = new Map<string, boolean>();\n\n  isSelect(key: string, defaultValue: boolean): boolean {\n    if (this.status.has(key)) {\n      return this.status.get(key);\n    } else {\n      return defaultValue;\n    }\n  }\n\n  setSelect(key: string, value: boolean): void {\n    this.status.set(key, value);\n  }\n\n  deleteSelect(key: string): void {\n    this.status.delete(key);\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'SelectManager';\n\nclass SelectManager {\n  private status: Map<string, boolean> = new Map<string, boolean>();\n\n  isSelect(key: string, defaultValue: boolean): boolean {\n    if (this.status.has(key)) {\n      return this.status.get(key);\n    } else {\n      return defaultValue;\n    }\n  }\n\n  setSelect(key: string, value: boolean): void {\n    this.status.set(key, value);\n  }\n\n  deleteSelect(key: string): void {\n    this.status.delete(key);\n  }\n}\n\nexport let selectManager: SelectManager = stashOrGetObject<SelectManager>(new SelectManager(), TAG);\n"
}