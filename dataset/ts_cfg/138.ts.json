{
  "type": "file",
  "name": "138.ts",
  "label": "138.ts",
  "start_line": -1,
  "end_line": 156,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 156,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: %dflt\nMIN_WIDTH_OF_CONTENT_IN_PX = 300\nMAX_WIDTH_OF_CONTENT_IN_PX = 800\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ResizingData",
      "label": "ResizingData",
      "start_line": 7,
      "end_line": 7,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface ResizingData {\n  isProgress: boolean;\n  initialContentContainerWidthInPercentage: number;\n  initialDividerPosition: number;\n  initialEditorContainerWidthInPercentage: number;\n}"
    },
    {
      "type": "class",
      "name": "MouseEventAndEditor",
      "label": "MouseEventAndEditor",
      "start_line": 13,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface MouseEventAndEditor {\n  event: MouseEvent;\n  editor: ElementRef<HTMLDivElement>;\n}"
    },
    {
      "type": "class",
      "name": "%AC$SplitResizerHandler$%instInit$0",
      "label": "%AC$SplitResizerHandler$%instInit$0",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    initialContentContainerWidthInPercentage: 0,\n    initialDividerPosition: 0,\n    initialEditorContainerWidthInPercentage: 0,\n    isProgress: false,\n  }"
    },
    {
      "type": "class",
      "name": "SplitResizerHandler",
      "label": "SplitResizerHandler",
      "start_line": 1,
      "end_line": 156,
      "functions": [
        {
          "type": "function",
          "name": "init",
          "label": "init",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "container = parameter0: ElementRef<UnknownKeyword>\ncontent = parameter1: ElementRef<HTMLDivElement>\nresizer = parameter2: ElementRef<HTMLDivElement>\neditor = parameter3: ElementRef<HTMLDivElement>\nthis = this: @ts_files/138.ts: SplitResizerHandler\nthis.<@ts_files/138.ts: SplitResizerHandler.container> = container\nthis.<@ts_files/138.ts: SplitResizerHandler.content> = content\nthis.<@ts_files/138.ts: SplitResizerHandler.resizer> = resizer\nthis.<@ts_files/138.ts: SplitResizerHandler.editor> = editor\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.listenToResizeStart()>()\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.listenToResize()>()\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.listenToResizeEnd()>()\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.resizeContainersUsingKeyArrows()>()\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "init(\n    container: ElementRef<unknown>,\n    content: ElementRef<HTMLDivElement>,\n    resizer: ElementRef<HTMLDivElement>,\n    editor?: ElementRef<HTMLDivElement>,\n  ): void {\n    this.container = container;\n    this.content = content;\n    this.resizer = resizer;\n    this.editor = editor;\n    this.listenToResizeStart();\n    this.listenToResize();\n    this.listenToResizeEnd();\n    this.resizeContainersUsingKeyArrows();\n  }"
        },
        {
          "type": "function",
          "name": "listenToResizeStart",
          "label": "listenToResizeStart",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = staticinvoke <@%unk/%unk: .map()>(%AM2$listenToResizeStart)\n%1 = staticinvoke <@%unk/%unk: .filter()>(%AM3$listenToResizeStart)\n%2 = this.<@ts_files/138.ts: SplitResizerHandler.destroyRef>\n%3 = staticinvoke <@%unk/%unk: .takeUntilDestroyed()>(%2)\n%4 = this.<@ts_files/138.ts: SplitResizerHandler.resizer>\n%5 = %4.<@%unk/%unk: .nativeElement>\n%6 = staticinvoke <@%unk/%unk: .fromEvent()>(%5, 'mousedown')\n%7 = instanceinvoke %6.<@%unk/%unk: .pipe()>(%0, %1, %3)\ninstanceinvoke %7.<@%unk/%unk: .subscribe()>(%AM0$listenToResizeStart)\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private listenToResizeStart(): void {\n    fromEvent<MouseEvent>(this.resizer.nativeElement, 'mousedown')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        const contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n        this.resizeData.update((data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        });\n      });\n  }"
        },
        {
          "type": "function",
          "name": "listenToResize",
          "label": "listenToResize",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = staticinvoke <@%unk/%unk: .map()>(%AM5$listenToResize)\n%1 = staticinvoke <@%unk/%unk: .filter()>(%AM6$listenToResize)\n%2 = this.<@ts_files/138.ts: SplitResizerHandler.destroyRef>\n%3 = staticinvoke <@%unk/%unk: .takeUntilDestroyed()>(%2)\n%4 = this.<@ts_files/138.ts: SplitResizerHandler.document>\n%5 = staticinvoke <@%unk/%unk: .fromEvent()>(%4, 'mousemove')\n%6 = instanceinvoke %5.<@%unk/%unk: .pipe()>(%0, %1, %3)\ninstanceinvoke %6.<@%unk/%unk: .subscribe()>(%AM4$listenToResize)\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private listenToResize(): void {\n    fromEvent<MouseEvent>(this.document, 'mousemove')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        if (this.resizeData().isProgress) {\n          const newDividerPosition = event.pageX;\n          const containerWidth = this.getParentContainerWidth();\n          const shift =\n            ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) *\n            100;\n          const newContentWidthInPercentage =\n            this.resizeData().initialContentContainerWidthInPercentage + shift;\n          const newEditorWidthInPercentage =\n            this.resizeData().initialEditorContainerWidthInPercentage - shift;\n          this.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);\n        }\n      });\n  }"
        },
        {
          "type": "function",
          "name": "listenToResizeEnd",
          "label": "listenToResizeEnd",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = this.<@ts_files/138.ts: SplitResizerHandler.destroyRef>\n%1 = staticinvoke <@%unk/%unk: .takeUntilDestroyed()>(%0)\n%2 = this.<@ts_files/138.ts: SplitResizerHandler.document>\n%3 = staticinvoke <@%unk/%unk: .fromEvent()>(%2, 'mouseup')\n%4 = instanceinvoke %3.<@%unk/%unk: .pipe()>(%1)\ninstanceinvoke %4.<@%unk/%unk: .subscribe()>(%AM7$listenToResizeEnd)\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private listenToResizeEnd(): void {\n    fromEvent(this.document, 'mouseup')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        if (this.resizeData().isProgress) {\n          this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n          this.resizeData.update((data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          });\n        }\n      });\n  }"
        },
        {
          "type": "function",
          "name": "resizeContainersUsingKeyArrows",
          "label": "resizeContainersUsingKeyArrows",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = staticinvoke <@%unk/%unk: .filter()>(%AM10$resizeContainersUsingKeyArrows)\n%1 = this.<@ts_files/138.ts: SplitResizerHandler.destroyRef>\n%2 = staticinvoke <@%unk/%unk: .takeUntilDestroyed()>(%1)\n%3 = staticinvoke <@%unk/%unk: .finalize()>(%AM11$resizeContainersUsingKeyArrows)\n%4 = this.<@ts_files/138.ts: SplitResizerHandler.resizer>\n%5 = this.<@ts_files/138.ts: SplitResizerHandler.focusMonitor>\n%6 = instanceinvoke %5.<@%unk/%unk: .monitor()>(%4)\n%7 = this.<@ts_files/138.ts: SplitResizerHandler.document>\n%8 = staticinvoke <@%unk/%unk: .fromEvent()>(%7, 'keydown')\n%9 = newarray (unknown)[2]\n%9[0] = %6\n%9[1] = %8\n%10 = staticinvoke <@%unk/%unk: .combineLatest()>(%9)\n%11 = instanceinvoke %10.<@%unk/%unk: .pipe()>(%0, %2, %3)\ninstanceinvoke %11.<@%unk/%unk: .subscribe()>(%AM9$resizeContainersUsingKeyArrows)\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private resizeContainersUsingKeyArrows(): void {\n    combineLatest([\n      this.focusMonitor.monitor(this.resizer),\n      fromEvent<KeyboardEvent>(this.document, 'keydown'),\n    ])\n      .pipe(\n        filter(\n          ([origin, keyEvent]) =>\n            !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight'),\n        ),\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.focusMonitor.stopMonitoring(this.resizer)),\n      )\n      .subscribe(([_, keyEvent]) => {\n        const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\n        const contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);\n      });\n  }"
        },
        {
          "type": "function",
          "name": "setWidthOfTheContainers",
          "label": "setWidthOfTheContainers",
          "start_line": 1,
          "end_line": 134,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newContentWidthInPercentage = parameter0: number\nnewEditorWidthInPercentage = parameter1: number\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = this.<@ts_files/138.ts: SplitResizerHandler.container>\n%1 = %0.<@%unk/%unk: .nativeElement>\ncontainerWidth = %1.<@%unk/%unk: .offsetWidth>\n%2 = containerWidth * newContentWidthInPercentage\nnewContentWidthInPx = %2 / 100\n%3 = newContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX\n%4 = newContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX\n%5 = %3 && %4\n%6 = this.<@ts_files/138.ts: SplitResizerHandler.editor>\n%7 = %5 && %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%11 = newContentWidthInPercentage + '%'\n%8 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%9 = %8.<@%unk/%unk: .nativeElement>\n%10 = %9.<@%unk/%unk: .style>\n%10.<@%unk/%unk: .width> = %11\n%15 = newEditorWidthInPercentage + '%'\n%12 = this.<@ts_files/138.ts: SplitResizerHandler.editor>\n%13 = %12.<@%unk/%unk: .nativeElement>\n%14 = %13.<@%unk/%unk: .style>\n%14.<@%unk/%unk: .width> = %15",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 68,
                      "end_line": 156,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private setWidthOfTheContainers(\n    newContentWidthInPercentage: number,\n    newEditorWidthInPercentage: number,\n  ) {\n    const containerWidth = this.container.nativeElement.offsetWidth;\n    const newContentWidthInPx = (containerWidth * newContentWidthInPercentage) / 100;\n    if (\n      newContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX &&\n      newContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX &&\n      this.editor\n    ) {\n      this.content.nativeElement.style.width = `${newContentWidthInPercentage}%`;\n      this.editor.nativeElement.style.width = `${newEditorWidthInPercentage}%`;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getCurrentContainerWidth",
          "label": "getCurrentContainerWidth",
          "start_line": 1,
          "end_line": 149,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "element = parameter0: HTMLDivElement\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = element.<@%unk/%unk: .style>\n%1 = %0.<@%unk/%unk: .width>\n%2 = instanceinvoke %1.<@%unk/%unk: .replace()>('%', '')\nsavedWidth = staticinvoke <@%unk/%unk: .Number()>(%2)\nif savedWidth > 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = savedWidth",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return %3",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = element.<@%unk/%unk: .offsetWidth>\n%5 = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getParentContainerWidth()>()\n%6 = %4 / %5\n%3 = %6 * 100",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getCurrentContainerWidth(element: HTMLDivElement): number {\n    const savedWidth = Number(element.style.width.replace('%', ''));\n    return savedWidth > 0\n      ? savedWidth\n      : (element.offsetWidth / this.getParentContainerWidth()) * 100;\n  }"
        },
        {
          "type": "function",
          "name": "getParentContainerWidth",
          "label": "getParentContainerWidth",
          "start_line": 1,
          "end_line": 155,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = this.<@ts_files/138.ts: SplitResizerHandler.resizer>\n%1 = %0.<@%unk/%unk: .nativeElement>\n%2 = %1.<@%unk/%unk: .offsetWidth>\n%3 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%4 = %3.<@%unk/%unk: .nativeElement>\n%5 = %4.<@%unk/%unk: .offsetWidth>\n%6 = %2 + %5\n%7 = this.<@ts_files/138.ts: SplitResizerHandler.editor>\n%8 = %7.<@%unk/%unk: .nativeElement>\n%9 = %8.<@%unk/%unk: .offsetWidth>\n%10 = %6 + %9\nreturn %10",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getParentContainerWidth(): number {\n    return (\n      this.resizer.nativeElement.offsetWidth +\n      this.content.nativeElement.offsetWidth +\n      this.editor!.nativeElement.offsetWidth\n    );\n  }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0$listenToResizeStart",
          "label": "%AM1$%AM0$listenToResizeStart",
          "start_line": 1,
          "end_line": 63,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = event.<@%unk/%unk: .pageX>\ndata.<@%unk/%unk: .initialDividerPosition> = %0\ndata.<@%unk/%unk: .isProgress> = true\ndata.<@%unk/%unk: .initialContentContainerWidthInPercentage> = contentWidthInPercentage\ndata.<@%unk/%unk: .initialEditorContainerWidthInPercentage> = editorWidthInPercentage\n%1 = new @ts_files/138.ts: %AC$SplitResizerHandler$%AM1$%AM0$listenToResizeStart$1\ninstanceinvoke %1.<@ts_files/138.ts: %AC$SplitResizerHandler$%AM1$%AM0$listenToResizeStart$1.constructor()>()\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        }"
        },
        {
          "type": "function",
          "name": "%AM0$listenToResizeStart",
          "label": "%AM0$listenToResizeStart",
          "start_line": 1,
          "end_line": 156,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%1 = %0.<@%unk/%unk: .nativeElement>\ncontentWidthInPercentage = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getCurrentContainerWidth(HTMLDivElement)>(%1)\n%2 = this.<@ts_files/138.ts: SplitResizerHandler.editor>\n%3 = %2.<@%unk/%unk: .nativeElement>\neditorWidthInPercentage = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getCurrentContainerWidth(HTMLDivElement)>(%3)\n%7 = MIN_WIDTH_OF_CONTENT_IN_PX + 'px'\n%4 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%5 = %4.<@%unk/%unk: .nativeElement>\n%6 = %5.<@%unk/%unk: .style>\n%6.<@%unk/%unk: .minWidth> = %7\n%8 = this.<@ts_files/138.ts: SplitResizerHandler.resizeData>\ninstanceinvoke %8.<@%unk/%unk: .update()>(%AM1$%AM0$listenToResizeStart)\nreturn",
              "start_line": 1,
              "end_line": 156,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({event}) => {\n        const contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n        this.resizeData.update((data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        });\n      }"
        },
        {
          "type": "function",
          "name": "%AM2$listenToResizeStart",
          "label": "%AM2$listenToResizeStart",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = new @ts_files/138.ts: %AC$SplitResizerHandler$%AM2$listenToResizeStart$2\ninstanceinvoke %0.<@ts_files/138.ts: %AC$SplitResizerHandler$%AM2$listenToResizeStart$2.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(event) => ({editor: this.editor, event})"
        },
        {
          "type": "function",
          "name": "%AM3$listenToResizeStart",
          "label": "%AM3$listenToResizeStart",
          "start_line": 1,
          "end_line": 54,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "eventAndEditor = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = eventAndEditor.<@%unk/%unk: .editor>\n%1 = %0.<@%unk/%unk: .nativeElement>\n%2 = !%1\n%3 = !%2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement"
        },
        {
          "type": "function",
          "name": "%AM4$listenToResize",
          "label": "%AM4$listenToResize",
          "start_line": 1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = instanceinvoke this.<@%unk/%unk: .resizeData()>()\n%1 = %0.<@%unk/%unk: .isProgress>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "newDividerPosition = event.<@%unk/%unk: .pageX>\ncontainerWidth = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getParentContainerWidth()>()\n%2 = instanceinvoke this.<@%unk/%unk: .resizeData()>()\n%3 = %2.<@%unk/%unk: .initialDividerPosition>\n%4 = newDividerPosition - %3\n%5 = %4 / containerWidth\nshift = %5 * 100\n%6 = instanceinvoke this.<@%unk/%unk: .resizeData()>()\n%7 = %6.<@%unk/%unk: .initialContentContainerWidthInPercentage>\nnewContentWidthInPercentage = %7 + shift\n%8 = instanceinvoke this.<@%unk/%unk: .resizeData()>()\n%9 = %8.<@%unk/%unk: .initialEditorContainerWidthInPercentage>\nnewEditorWidthInPercentage = %9 - shift\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.setWidthOfTheContainers(number, number)>(newContentWidthInPercentage, newEditorWidthInPercentage)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 68,
                      "end_line": 156,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({event}) => {\n        if (this.resizeData().isProgress) {\n          const newDividerPosition = event.pageX;\n          const containerWidth = this.getParentContainerWidth();\n          const shift =\n            ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) *\n            100;\n          const newContentWidthInPercentage =\n            this.resizeData().initialContentContainerWidthInPercentage + shift;\n          const newEditorWidthInPercentage =\n            this.resizeData().initialEditorContainerWidthInPercentage - shift;\n          this.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);\n        }\n      }"
        },
        {
          "type": "function",
          "name": "%AM5$listenToResize",
          "label": "%AM5$listenToResize",
          "start_line": 1,
          "end_line": 75,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = new @ts_files/138.ts: %AC$SplitResizerHandler$%AM5$listenToResize$3\ninstanceinvoke %0.<@ts_files/138.ts: %AC$SplitResizerHandler$%AM5$listenToResize$3.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(event) => ({editor: this.editor, event})"
        },
        {
          "type": "function",
          "name": "%AM6$listenToResize",
          "label": "%AM6$listenToResize",
          "start_line": 1,
          "end_line": 77,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "eventAndEditor = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = eventAndEditor.<@%unk/%unk: .editor>\n%1 = %0.<@%unk/%unk: .nativeElement>\n%2 = !%1\n%3 = !%2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement"
        },
        {
          "type": "function",
          "name": "%AM8$%AM7$listenToResizeEnd",
          "label": "%AM8$%AM7$listenToResizeEnd",
          "start_line": 1,
          "end_line": 103,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\ndata.<@%unk/%unk: .isProgress> = false\ndata.<@%unk/%unk: .initialDividerPosition> = 0\ndata.<@%unk/%unk: .initialContentContainerWidthInPercentage> = 0\ndata.<@%unk/%unk: .initialEditorContainerWidthInPercentage> = 0\n%0 = new @ts_files/138.ts: %AC$SplitResizerHandler$%AM8$%AM7$listenToResizeEnd$4\ninstanceinvoke %0.<@ts_files/138.ts: %AC$SplitResizerHandler$%AM8$%AM7$listenToResizeEnd$4.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          }"
        },
        {
          "type": "function",
          "name": "%AM7$listenToResizeEnd",
          "label": "%AM7$listenToResizeEnd",
          "start_line": 1,
          "end_line": 100,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = instanceinvoke this.<@%unk/%unk: .resizeData()>()\n%1 = %0.<@%unk/%unk: .isProgress>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = MIN_WIDTH_OF_CONTENT_IN_PX + 'px'\n%2 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%3 = %2.<@%unk/%unk: .nativeElement>\n%4 = %3.<@%unk/%unk: .style>\n%4.<@%unk/%unk: .minWidth> = %5\n%6 = this.<@ts_files/138.ts: SplitResizerHandler.resizeData>\ninstanceinvoke %6.<@%unk/%unk: .update()>(%AM8$%AM7$listenToResizeEnd)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 68,
                      "end_line": 156,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n        if (this.resizeData().isProgress) {\n          this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n          this.resizeData.update((data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          });\n        }\n      }"
        },
        {
          "type": "function",
          "name": "%AM9$resizeContainersUsingKeyArrows",
          "label": "%AM9$resizeContainersUsingKeyArrows",
          "start_line": 1,
          "end_line": 127,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ArrayBindingPattern = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = keyEvent.<@%unk/%unk: .key>\nif %0 === 'ArrowLeft'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "shift = -1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/138.ts: SplitResizerHandler.content>\n%3 = %2.<@%unk/%unk: .nativeElement>\ncontentWidth = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getCurrentContainerWidth(HTMLDivElement)>(%3)\n%4 = this.<@ts_files/138.ts: SplitResizerHandler.editor>\n%5 = %4.<@%unk/%unk: .nativeElement>\neditorWidth = instanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.getCurrentContainerWidth(HTMLDivElement)>(%5)\n%6 = contentWidth + shift\n%7 = editorWidth - shift\ninstanceinvoke this.<@ts_files/138.ts: SplitResizerHandler.setWidthOfTheContainers(number, number)>(%6, %7)\nreturn",
                      "start_line": 1,
                      "end_line": 156,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "shift = 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "([_, keyEvent]) => {\n        const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\n        const contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);\n      }"
        },
        {
          "type": "function",
          "name": "%AM10$resizeContainersUsingKeyArrows",
          "label": "%AM10$resizeContainersUsingKeyArrows",
          "start_line": 1,
          "end_line": 121,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ArrayBindingPattern = parameter0: unknown\nthis = this: @ts_files/138.ts: SplitResizerHandler\n%0 = !origin\n%1 = !%0\n%2 = keyEvent.<@%unk/%unk: .key>\n%3 = %2 === 'ArrowLeft'\n%4 = keyEvent.<@%unk/%unk: .key>\n%5 = %4 === 'ArrowRight'\n%6 = %3 || %5\n%7 = %1 && %6\nreturn %7",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "([origin, keyEvent]) =>\n            !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight')"
        },
        {
          "type": "function",
          "name": "%AM11$resizeContainersUsingKeyArrows",
          "label": "%AM11$resizeContainersUsingKeyArrows",
          "start_line": 1,
          "end_line": 125,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/138.ts: SplitResizerHandler\n%0 = this.<@ts_files/138.ts: SplitResizerHandler.resizer>\n%1 = this.<@ts_files/138.ts: SplitResizerHandler.focusMonitor>\n%2 = instanceinvoke %1.<@%unk/%unk: .stopMonitoring()>(%0)\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => this.focusMonitor.stopMonitoring(this.resizer)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Injectable()\nexport class SplitResizerHandler {\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly document = inject(DOCUMENT);\n  private readonly focusMonitor = inject(FocusMonitor);\n  private container!: ElementRef<any>;\n  private content!: ElementRef<HTMLDivElement>;\n  private editor: ElementRef<HTMLDivElement> | undefined;\n  private resizer!: ElementRef<HTMLDivElement>;\n  private readonly resizeData = signal<ResizingData>({\n    initialContentContainerWidthInPercentage: 0,\n    initialDividerPosition: 0,\n    initialEditorContainerWidthInPercentage: 0,\n    isProgress: false,\n  });\n  init(\n    container: ElementRef<unknown>,\n    content: ElementRef<HTMLDivElement>,\n    resizer: ElementRef<HTMLDivElement>,\n    editor?: ElementRef<HTMLDivElement>,\n  ): void {\n    this.container = container;\n    this.content = content;\n    this.resizer = resizer;\n    this.editor = editor;\n    this.listenToResizeStart();\n    this.listenToResize();\n    this.listenToResizeEnd();\n    this.resizeContainersUsingKeyArrows();\n  }\n  private listenToResizeStart(): void {\n    fromEvent<MouseEvent>(this.resizer.nativeElement, 'mousedown')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        const contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n        this.resizeData.update((data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        });\n      });\n  }\n  private listenToResize(): void {\n    fromEvent<MouseEvent>(this.document, 'mousemove')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        if (this.resizeData().isProgress) {\n          const newDividerPosition = event.pageX;\n          const containerWidth = this.getParentContainerWidth();\n          const shift =\n            ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) *\n            100;\n          const newContentWidthInPercentage =\n            this.resizeData().initialContentContainerWidthInPercentage + shift;\n          const newEditorWidthInPercentage =\n            this.resizeData().initialEditorContainerWidthInPercentage - shift;\n          this.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);\n        }\n      });\n  }\n  private listenToResizeEnd(): void {\n    fromEvent(this.document, 'mouseup')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        if (this.resizeData().isProgress) {\n          this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n          this.resizeData.update((data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          });\n        }\n      });\n  }\n  // When resizer bar is focused, resize containers when user presses key arrows.\n  private resizeContainersUsingKeyArrows(): void {\n    combineLatest([\n      this.focusMonitor.monitor(this.resizer),\n      fromEvent<KeyboardEvent>(this.document, 'keydown'),\n    ])\n      .pipe(\n        filter(\n          ([origin, keyEvent]) =>\n            !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight'),\n        ),\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.focusMonitor.stopMonitoring(this.resizer)),\n      )\n      .subscribe(([_, keyEvent]) => {\n        const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\n        const contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);\n      });\n  }\n  private setWidthOfTheContainers(\n    newContentWidthInPercentage: number,\n    newEditorWidthInPercentage: number,\n  ) {\n    const containerWidth = this.container.nativeElement.offsetWidth;\n    const newContentWidthInPx = (containerWidth * newContentWidthInPercentage) / 100;\n    if (\n      newContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX &&\n      newContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX &&\n      this.editor\n    ) {\n      this.content.nativeElement.style.width = `${newContentWidthInPercentage}%`;\n      this.editor.nativeElement.style.width = `${newEditorWidthInPercentage}%`;\n    }\n  }\n  private getCurrentContainerWidth(element: HTMLDivElement): number {\n    const savedWidth = Number(element.style.width.replace('%', ''));\n    return savedWidth > 0\n      ? savedWidth\n      : (element.offsetWidth / this.getParentContainerWidth()) * 100;\n  }\n  private getParentContainerWidth(): number {\n    return (\n      this.resizer.nativeElement.offsetWidth +\n      this.content.nativeElement.offsetWidth +\n      this.editor!.nativeElement.offsetWidth\n    );\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$SplitResizerHandler$%AM1$%AM0$listenToResizeStart$1",
      "label": "%AC$SplitResizerHandler$%AM1$%AM0$listenToResizeStart$1",
      "start_line": 68,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{...data}"
    },
    {
      "type": "class",
      "name": "%AC$SplitResizerHandler$%AM2$listenToResizeStart$2",
      "label": "%AC$SplitResizerHandler$%AM2$listenToResizeStart$2",
      "start_line": 52,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{editor: this.editor, event}"
    },
    {
      "type": "class",
      "name": "%AC$SplitResizerHandler$%AM5$listenToResize$3",
      "label": "%AC$SplitResizerHandler$%AM5$listenToResize$3",
      "start_line": 75,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{editor: this.editor, event}"
    },
    {
      "type": "class",
      "name": "%AC$SplitResizerHandler$%AM8$%AM7$listenToResizeEnd$4",
      "label": "%AC$SplitResizerHandler$%AM8$%AM7$listenToResizeEnd$4",
      "start_line": 108,
      "end_line": 108,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{...data}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import {FocusMonitor} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\nimport {DestroyRef, ElementRef, Injectable, inject, signal} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {fromEvent, combineLatest} from 'rxjs';\nimport {map, filter, finalize} from 'rxjs/operators';\ninterface ResizingData {\n  isProgress: boolean;\n  initialContentContainerWidthInPercentage: number;\n  initialDividerPosition: number;\n  initialEditorContainerWidthInPercentage: number;\n}\ninterface MouseEventAndEditor {\n  event: MouseEvent;\n  editor: ElementRef<HTMLDivElement>;\n}\nconst MIN_WIDTH_OF_CONTENT_IN_PX = 300;\nconst MAX_WIDTH_OF_CONTENT_IN_PX = 800;\n@Injectable()\nexport class SplitResizerHandler {\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly document = inject(DOCUMENT);\n  private readonly focusMonitor = inject(FocusMonitor);\n  private container!: ElementRef<any>;\n  private content!: ElementRef<HTMLDivElement>;\n  private editor: ElementRef<HTMLDivElement> | undefined;\n  private resizer!: ElementRef<HTMLDivElement>;\n  private readonly resizeData = signal<ResizingData>({\n    initialContentContainerWidthInPercentage: 0,\n    initialDividerPosition: 0,\n    initialEditorContainerWidthInPercentage: 0,\n    isProgress: false,\n  });\n  init(\n    container: ElementRef<unknown>,\n    content: ElementRef<HTMLDivElement>,\n    resizer: ElementRef<HTMLDivElement>,\n    editor?: ElementRef<HTMLDivElement>,\n  ): void {\n    this.container = container;\n    this.content = content;\n    this.resizer = resizer;\n    this.editor = editor;\n    this.listenToResizeStart();\n    this.listenToResize();\n    this.listenToResizeEnd();\n    this.resizeContainersUsingKeyArrows();\n  }\n  private listenToResizeStart(): void {\n    fromEvent<MouseEvent>(this.resizer.nativeElement, 'mousedown')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        const contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n        this.resizeData.update((data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        });\n      });\n  }\n  private listenToResize(): void {\n    fromEvent<MouseEvent>(this.document, 'mousemove')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        if (this.resizeData().isProgress) {\n          const newDividerPosition = event.pageX;\n          const containerWidth = this.getParentContainerWidth();\n          const shift =\n            ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) *\n            100;\n          const newContentWidthInPercentage =\n            this.resizeData().initialContentContainerWidthInPercentage + shift;\n          const newEditorWidthInPercentage =\n            this.resizeData().initialEditorContainerWidthInPercentage - shift;\n          this.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);\n        }\n      });\n  }\n  private listenToResizeEnd(): void {\n    fromEvent(this.document, 'mouseup')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        if (this.resizeData().isProgress) {\n          this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n          this.resizeData.update((data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          });\n        }\n      });\n  }\n  // When resizer bar is focused, resize containers when user presses key arrows.\n  private resizeContainersUsingKeyArrows(): void {\n    combineLatest([\n      this.focusMonitor.monitor(this.resizer),\n      fromEvent<KeyboardEvent>(this.document, 'keydown'),\n    ])\n      .pipe(\n        filter(\n          ([origin, keyEvent]) =>\n            !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight'),\n        ),\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.focusMonitor.stopMonitoring(this.resizer)),\n      )\n      .subscribe(([_, keyEvent]) => {\n        const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\n        const contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);\n      });\n  }\n  private setWidthOfTheContainers(\n    newContentWidthInPercentage: number,\n    newEditorWidthInPercentage: number,\n  ) {\n    const containerWidth = this.container.nativeElement.offsetWidth;\n    const newContentWidthInPx = (containerWidth * newContentWidthInPercentage) / 100;\n    if (\n      newContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX &&\n      newContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX &&\n      this.editor\n    ) {\n      this.content.nativeElement.style.width = `${newContentWidthInPercentage}%`;\n      this.editor.nativeElement.style.width = `${newEditorWidthInPercentage}%`;\n    }\n  }\n  private getCurrentContainerWidth(element: HTMLDivElement): number {\n    const savedWidth = Number(element.style.width.replace('%', ''));\n    return savedWidth > 0\n      ? savedWidth\n      : (element.offsetWidth / this.getParentContainerWidth()) * 100;\n  }\n  private getParentContainerWidth(): number {\n    return (\n      this.resizer.nativeElement.offsetWidth +\n      this.content.nativeElement.offsetWidth +\n      this.editor!.nativeElement.offsetWidth\n    );\n  }\n}"
}