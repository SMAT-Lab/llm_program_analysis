{
  "type": "file",
  "name": "104.ts",
  "label": "104.ts",
  "start_line": -1,
  "end_line": 83,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 67,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 67,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/104.ts: %dflt\nTAG = 'MainAbility'\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "MainAbility",
      "label": "MainAbility",
      "start_line": 1,
      "end_line": 83,
      "functions": [
        {
          "type": "function",
          "name": "onCreate",
          "label": "onCreate",
          "start_line": 1,
          "end_line": 67,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "want = parameter0: unknown\nlaunchParam = parameter1: unknown\nthis = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onCreate')\n%0 = this.<@ts_files/104.ts: MainAbility.context>\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('context', %0)\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCreate(want, launchParam) {\n    Logger.info(TAG, 'onCreate');\n    AppStorage.setOrCreate('context', this.context);\n  }"
        },
        {
          "type": "function",
          "name": "onDestroy",
          "label": "onDestroy",
          "start_line": 1,
          "end_line": 67,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onDestroy')\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onDestroy() {\n    Logger.info(TAG, 'onDestroy')\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageCreate",
          "label": "onWindowStageCreate",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "windowStage = parameter0: unknown\nthis = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onWindowStageCreate')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "windowClass = null\n%0 = this.<@ts_files/104.ts: MainAbility.context>\ninstanceinvoke window.<@%unk/%unk: .getLastWindow()>(%0, %AM0$onWindowStageCreate)",
                  "start_line": 37,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke windowStage.<@%unk/%unk: .loadContent()>('pages/Index', %AM3$onWindowStageCreate)\nreturn",
                      "start_line": 1,
                      "end_line": 67,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "exception = caughtexception: unknown\n%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(exception)\n%2 = 'Failed to obtain the top window. Cause: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .error()>(%2)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'onWindowStageCreate')\n    try {\n      let windowClass = null;\n      window.getLastWindow(this.context, (err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      })\n    } catch (exception) {\n      Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));\n    }\n    windowStage.loadContent('pages/Index', (err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    })\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageDestroy",
          "label": "onWindowStageDestroy",
          "start_line": 1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onWindowStageDestroy')\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'onWindowStageDestroy')\n  }"
        },
        {
          "type": "function",
          "name": "onForeground",
          "label": "onForeground",
          "start_line": 1,
          "end_line": 78,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onForeground')\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onForeground() {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')\n  }"
        },
        {
          "type": "function",
          "name": "onBackground",
          "label": "onBackground",
          "start_line": 1,
          "end_line": 83,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/104.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'onBackground')\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onBackground() {\n    // Ability has back to background\n    Logger.info(TAG, 'onBackground')\n  }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0$onWindowStageCreate",
          "label": "%AM1$%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "err = parameter0: unknown\nthis = this: @ts_files/104.ts: MainAbility\n%0 = err.<@%unk/%unk: .code>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%2 = 'Failed to set the system bar properties. Cause: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .error()>(%2)\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Logger.<@%unk/%unk: .info()>('Succeeded in setting the system bar properties.')\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0$onWindowStageCreate",
          "label": "%AM2$%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 67,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: number\nthis = this: @ts_files/104.ts: MainAbility\ninstanceinvoke AppStorage.<@%unk/%unk: .setOrCreate()>('keyboardHeight', data)\nreturn",
              "start_line": 1,
              "end_line": 67,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        }"
        },
        {
          "type": "function",
          "name": "%AM0$onWindowStageCreate",
          "label": "%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 38,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [windowClass]\nerr = parameter1: unknown\ndata = parameter2: unknown\nwindowClass = %closures0.windowClass\nthis = this: @ts_files/104.ts: MainAbility\n%0 = err.<@%unk/%unk: .code>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%2 = 'Failed to obtain the top window. Cause: ' + %1\ninstanceinvoke Logger.<@%unk/%unk: .error()>(%2)\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%4 = 'Succeeded in obtaining the top window. Data: ' + %3\ninstanceinvoke Logger.<@%unk/%unk: .info()>(%4)\nwindowClass = data\n%5 = new @ts_files/104.ts: %AC$MainAbility$%AM0$onWindowStageCreate$0\ninstanceinvoke %5.<@ts_files/104.ts: %AC$MainAbility$%AM0$onWindowStageCreate$0.constructor()>()\nsystemBarProperties = %5\ninstanceinvoke windowClass.<@%unk/%unk: .setWindowSystemBarProperties()>(systemBarProperties, %AM1$%AM0$onWindowStageCreate)\ninstanceinvoke windowClass.<@%unk/%unk: .on()>('keyboardHeightChange', %AM2$%AM0$onWindowStageCreate)\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      }"
        },
        {
          "type": "function",
          "name": "%AM3$onWindowStageCreate",
          "label": "%AM3$onWindowStageCreate",
          "start_line": 1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures1 = parameter0: [windowStage]\nerr = parameter1: unknown\ndata = parameter2: unknown\nwindowStage = %closures1.windowStage\nthis = this: @ts_files/104.ts: MainAbility\n%0 = instanceinvoke windowStage.<@%unk/%unk: .getMainWindowSync()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getUIContext()>()\na = instanceinvoke %1.<@%unk/%unk: .getKeyboardAvoidMode()>()\n%2 = KeyboardAvoidMode.<@%unk/%unk: .OFFSET>\n%3 = instanceinvoke windowStage.<@%unk/%unk: .getMainWindowSync()>()\n%4 = instanceinvoke %3.<@%unk/%unk: .getUIContext()>()\ninstanceinvoke %4.<@%unk/%unk: .setKeyboardAvoidMode()>(%2)\nif err != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(err)\n%6 = 'Failed to load the content. Cause: ' + %5\ninstanceinvoke Logger.<@%unk/%unk: .error()>(TAG, %6)\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%8 = 'Succeeded in loading the content. Data: ' + %7\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, %8)\nreturn",
                  "start_line": 1,
                  "end_line": 67,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class MainAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    Logger.info(TAG, 'onCreate');\n    AppStorage.setOrCreate('context', this.context);\n  }\n\n  onDestroy() {\n    Logger.info(TAG, 'onDestroy')\n  }\n\n  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'onWindowStageCreate')\n    try {\n      let windowClass = null;\n      window.getLastWindow(this.context, (err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      })\n    } catch (exception) {\n      Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));\n    }\n    windowStage.loadContent('pages/Index', (err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    })\n  }\n\n  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'onWindowStageDestroy')\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')\n  }\n\n  onBackground() {\n    // Ability has back to background\n    Logger.info(TAG, 'onBackground')\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$MainAbility$%AM0$onWindowStageCreate$0",
      "label": "%AC$MainAbility$%AM0$onWindowStageCreate$0",
      "start_line": 45,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          statusBarColor: \"#f1f3f5\"\n        }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../util/Logger'\nimport window from '@ohos.window';\nimport { KeyboardAvoidMode } from '@ohos.arkui.UIContext';\n\nconst TAG: string = 'MainAbility'\n\nexport default class MainAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    Logger.info(TAG, 'onCreate');\n    AppStorage.setOrCreate('context', this.context);\n  }\n\n  onDestroy() {\n    Logger.info(TAG, 'onDestroy')\n  }\n\n  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'onWindowStageCreate')\n    try {\n      let windowClass = null;\n      window.getLastWindow(this.context, (err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      })\n    } catch (exception) {\n      Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));\n    }\n    windowStage.loadContent('pages/Index', (err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    })\n  }\n\n  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'onWindowStageDestroy')\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')\n  }\n\n  onBackground() {\n    // Ability has back to background\n    Logger.info(TAG, 'onBackground')\n  }\n}"
}