{
  "type": "file",
  "name": "171.ts",
  "label": "171.ts",
  "start_line": -1,
  "end_line": 40,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 33,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\nstaticinvoke <@%unk/%unk: .describe()>('MatTimepickerToggleHarness', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 12,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\n%0 = new @ts_files/171.ts: %AC$%dflt$%AM1$%AM0$0\ninstanceinvoke %0.<@ts_files/171.ts: %AC$%dflt$%AM1$%AM0$0.constructor()>()\ninstanceinvoke TestBed.<@%unk/%unk: .configureTestingModule()>(%0)\nadapter = instanceinvoke TestBed.<@%unk/%unk: .inject()>(DateAdapter)\ninstanceinvoke adapter.<@%unk/%unk: .setLocale()>('en-US')\nfixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TimepickerHarnessTest)\ninstanceinvoke fixture.<@%unk/%unk: .detectChanges()>()\nloader = instanceinvoke TestbedHarnessEnvironment.<@%unk/%unk: .documentRootLoader()>(fixture)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\n%0 = instanceinvoke loader.<@%unk/%unk: .getAllHarnesses()>(MatTimepickerToggleHarness)\nharnesses = await %0\n%1 = harnesses.<@%unk/%unk: .length>\n%2 = staticinvoke <@%unk/%unk: .expect()>(%1)\ninstanceinvoke %2.<@%unk/%unk: .toBe()>(2)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\n%0 = new @ts_files/171.ts: %AC$%dflt$%AM3$%AM0$1\ninstanceinvoke %0.<@ts_files/171.ts: %AC$%dflt$%AM3$%AM0$1.constructor()>()\n%1 = instanceinvoke MatTimepickerToggleHarness.<@%unk/%unk: .with()>(%0)\n%2 = instanceinvoke loader.<@%unk/%unk: .getHarness()>(%1)\ntoggle = await %2\n%3 = instanceinvoke toggle.<@%unk/%unk: .isTimepickerOpen()>()\n%4 = staticinvoke <@%unk/%unk: .expect()>(await %3)\ninstanceinvoke %4.<@%unk/%unk: .toBe()>(false)\n%5 = instanceinvoke toggle.<@%unk/%unk: .openTimepicker()>()\n%6 = await %5\n%7 = instanceinvoke toggle.<@%unk/%unk: .isTimepickerOpen()>()\n%8 = staticinvoke <@%unk/%unk: .expect()>(await %7)\ninstanceinvoke %8.<@%unk/%unk: .toBe()>(true)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM0",
          "label": "%AM4$%AM0",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\n%0 = new @ts_files/171.ts: %AC$%dflt$%AM4$%AM0$2\ninstanceinvoke %0.<@ts_files/171.ts: %AC$%dflt$%AM4$%AM0$2.constructor()>()\n%1 = instanceinvoke MatTimepickerToggleHarness.<@%unk/%unk: .with()>(%0)\n%2 = instanceinvoke loader.<@%unk/%unk: .getHarness()>(%1)\ntoggle = await %2\n%3 = instanceinvoke toggle.<@%unk/%unk: .isDisabled()>()\n%4 = staticinvoke <@%unk/%unk: .expect()>(await %3)\ninstanceinvoke %4.<@%unk/%unk: .toBe()>(false)\n%5 = fixture.<@%unk/%unk: .componentInstance>\n%6 = %5.<@%unk/%unk: .disabled>\ninstanceinvoke %6.<@%unk/%unk: .set()>(true)\n%7 = instanceinvoke toggle.<@%unk/%unk: .isDisabled()>()\n%8 = staticinvoke <@%unk/%unk: .expect()>(await %7)\ninstanceinvoke %8.<@%unk/%unk: .toBe()>(true)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 9,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/171.ts: %dflt\nfixture = undefined\nloader = undefined\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should be able to load timepicker toggle harnesses', %AM2$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should get the open state of a timepicker toggle', %AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should get the disabled state of a toggle', %AM4$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "TimepickerHarnessTest",
      "label": "TimepickerHarnessTest",
      "start_line": 40,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})\nclass TimepickerHarnessTest {\n  disabled = signal(false);\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM1$%AM0$0",
      "label": "%AC$%dflt$%AM1$%AM0$0",
      "start_line": 13,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$%AM0$1",
      "label": "%AC$%dflt$%AM3$%AM0$1",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{selector: '#one'}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM0$2",
      "label": "%AC$%dflt$%AM4$%AM0$2",
      "start_line": 34,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{selector: '#one'}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import {Component, signal} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {HarnessLoader} from '@angular/cdk/testing';\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';\nimport {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness';\ndescribe('MatTimepickerToggleHarness', () => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n});\n@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})\nclass TimepickerHarnessTest {\n  disabled = signal(false);\n}"
}