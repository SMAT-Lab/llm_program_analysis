{
  "type": "file",
  "name": "130.ts",
  "label": "130.ts",
  "start_line": -1,
  "end_line": 52,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 52,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/130.ts: %dflt\nwithAndroidGradlePluginVersion = %AM0\nreturn",
              "start_line": 1,
              "end_line": 52,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "createAgpRegExp",
          "label": "createAgpRegExp",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/130.ts: %dflt\nreturn /^(\\s*classpath[(\\s][\"']com\\.android\\.tools\\.build:gradle:)(\\d+\\.\\d+\\.\\d+)([\"'][)\\s]\\s*)$/gm",
              "start_line": 1,
              "end_line": 7,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function createAgpRegExp() {\n  return /^(\\s*classpath[(\\s][\"']com\\.android\\.tools\\.build:gradle:)(\\d+\\.\\d+\\.\\d+)([\"'][)\\s]\\s*)$/gm;\n}"
        },
        {
          "type": "function",
          "name": "shouldUpdateAgpVersionAsync",
          "label": "shouldUpdateAgpVersionAsync",
          "start_line": 1,
          "end_line": 9,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "projectRoot = parameter0: string\ntargetVersion = parameter1: string\nthis = this: @ts_files/130.ts: %dflt\ngradlePath = instanceinvoke path.<@%unk/%unk: .join()>(projectRoot, 'android', 'build.gradle')\n%0 = fs.<@%unk/%unk: .promises>\n%1 = instanceinvoke %0.<@%unk/%unk: .readFile()>(gradlePath, 'utf-8')\ncontent = await %1\n%2 = staticinvoke <@ts_files/130.ts: %dflt.createAgpRegExp()>()\nmatchResult = instanceinvoke %2.<@%unk/%unk: .exec()>(content)\n%3 = !matchResult\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke console.<@%unk/%unk: .warn()>('Unrecognized `android/build.gradle` content, will skip the process to update AGP version.')\nreturn false",
                  "start_line": 1,
                  "end_line": 24,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "version = matchResult.<@%unk/%unk: .2>\n%4 = !version\nif %4 != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke console.<@%unk/%unk: .warn()>('Unrecognized `android/build.gradle` content, will skip the process to update AGP version.')\nreturn false",
                      "start_line": 1,
                      "end_line": 24,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%5 = staticinvoke <@ts_files/130.ts: %dflt.toSemVer(string)>(version)\n%6 = staticinvoke <@ts_files/130.ts: %dflt.toSemVer(string)>(targetVersion)\n%7 = instanceinvoke semver.<@%unk/%unk: .lt()>(%5, %6)\nreturn %7",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function shouldUpdateAgpVersionAsync(projectRoot: string, targetVersion: string) {\n  const gradlePath = path.join(projectRoot, 'android', 'build.gradle');\n  const content = await fs.promises.readFile(gradlePath, 'utf-8');\n  const matchResult = createAgpRegExp().exec(content);\n  if (!matchResult) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  const version = matchResult[2];\n  if (!version) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  return semver.lt(toSemVer(version), toSemVer(targetVersion));\n}"
        },
        {
          "type": "function",
          "name": "toSemVer",
          "label": "toSemVer",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "version = parameter0: string\nthis = this: @ts_files/130.ts: %dflt\n%0 = instanceinvoke semver.<@%unk/%unk: .coerce()>(version)\n%1 = new @%unk/%unk: semver.SemVer\ninstanceinvoke %1.<@%unk/%unk: semver.SemVer.constructor()>('0.0.0')\n%2 = %0 ?? %1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function toSemVer(version: string): semver.SemVer {\n  return semver.coerce(version) ?? new semver.SemVer('0.0.0');\n}"
        },
        {
          "type": "function",
          "name": "%AM2$%AM1$%AM0",
          "label": "%AM2$%AM1$%AM0",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "match = parameter0: unknown\nprefix = parameter1: unknown\nversionPart = parameter2: unknown\nsuffix = parameter3: unknown\nthis = this: @ts_files/130.ts: %dflt\n%0 = prop.<@%unk/%unk: .androidAgpVersion>\n%1 = prefix + %0\n%2 = %1 + suffix\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(match, prefix, versionPart, suffix) => {\n            return `${prefix}${prop.androidAgpVersion}${suffix}`;\n          }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "config = parameter0: unknown\nthis = this: @ts_files/130.ts: %dflt\n%0 = config.<@%unk/%unk: .modResults>\n%1 = %0.<@%unk/%unk: .language>\nif %1 !== 'groovy'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Error\ninstanceinvoke %2.<@%unk/%unk: Error.constructor()>('Cannot setup kotlin because the build.gradle is not groovy')\nthrow %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = config.<@%unk/%unk: .modResults>\n%4 = %3.<@%unk/%unk: .contents>\n%5 = staticinvoke <@ts_files/130.ts: %dflt.createAgpRegExp()>()\nmatchResult = instanceinvoke %5.<@%unk/%unk: .exec()>(%4)\nif matchResult != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "version = matchResult.<@%unk/%unk: .2>\n%6 = staticinvoke <@ts_files/130.ts: %dflt.toSemVer(string)>(version)\n%7 = prop.<@%unk/%unk: .androidAgpVersion>\n%8 = staticinvoke <@ts_files/130.ts: %dflt.toSemVer(string)>(%7)\n%9 = instanceinvoke semver.<@%unk/%unk: .lt()>(%6, %8)\n%10 = version && %9\nif %10 != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%12 = staticinvoke <@ts_files/130.ts: %dflt.createAgpRegExp()>()\n%13 = config.<@%unk/%unk: .modResults>\n%14 = %13.<@%unk/%unk: .contents>\n%15 = instanceinvoke %14.<@%unk/%unk: .replace()>(%12, %AM2$%AM1$%AM0)\n%11 = config.<@%unk/%unk: .modResults>\n%11.<@%unk/%unk: .contents> = %15",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return config",
                                  "start_line": 48,
                                  "end_line": 48,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(config) => {\n    if (config.modResults.language !== 'groovy') {\n      throw new Error('Cannot setup kotlin because the build.gradle is not groovy');\n    }\n    const matchResult = createAgpRegExp().exec(config.modResults.contents);\n    if (matchResult) {\n      const version = matchResult[2];\n      if (version && semver.lt(toSemVer(version), toSemVer(prop.androidAgpVersion))) {\n        config.modResults.contents = config.modResults.contents.replace(\n          createAgpRegExp(),\n          (match, prefix, versionPart, suffix) => {\n            return `${prefix}${prop.androidAgpVersion}${suffix}`;\n          }\n        );\n      }\n    }\n    return config;\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "config = parameter0: unknown\nprop = parameter1: unknown\nthis = this: @ts_files/130.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .withProjectBuildGradle()>(config, %AM1$%AM0)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(\n  config,\n  prop\n) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language !== 'groovy') {\n      throw new Error('Cannot setup kotlin because the build.gradle is not groovy');\n    }\n    const matchResult = createAgpRegExp().exec(config.modResults.contents);\n    if (matchResult) {\n      const version = matchResult[2];\n      if (version && semver.lt(toSemVer(version), toSemVer(prop.androidAgpVersion))) {\n        config.modResults.contents = config.modResults.contents.replace(\n          createAgpRegExp(),\n          (match, prefix, versionPart, suffix) => {\n            return `${prefix}${prop.androidAgpVersion}${suffix}`;\n          }\n        );\n      }\n    }\n    return config;\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 28,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ androidAgpVersion: string }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { ConfigPlugin, withProjectBuildGradle } from '@expo/config-plugins';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n// Because regexp //g is stateful, to use it multiple times, we should create a new one.\nfunction createAgpRegExp() {\n  return /^(\\s*classpath[(\\s][\"']com\\.android\\.tools\\.build:gradle:)(\\d+\\.\\d+\\.\\d+)([\"'][)\\s]\\s*)$/gm;\n}\nexport async function shouldUpdateAgpVersionAsync(projectRoot: string, targetVersion: string) {\n  const gradlePath = path.join(projectRoot, 'android', 'build.gradle');\n  const content = await fs.promises.readFile(gradlePath, 'utf-8');\n  const matchResult = createAgpRegExp().exec(content);\n  if (!matchResult) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  const version = matchResult[2];\n  if (!version) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  return semver.lt(toSemVer(version), toSemVer(targetVersion));\n}\nexport const withAndroidGradlePluginVersion: ConfigPlugin<{ androidAgpVersion: string }> = (\n  config,\n  prop\n) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language !== 'groovy') {\n      throw new Error('Cannot setup kotlin because the build.gradle is not groovy');\n    }\n    const matchResult = createAgpRegExp().exec(config.modResults.contents);\n    if (matchResult) {\n      const version = matchResult[2];\n      if (version && semver.lt(toSemVer(version), toSemVer(prop.androidAgpVersion))) {\n        config.modResults.contents = config.modResults.contents.replace(\n          createAgpRegExp(),\n          (match, prefix, versionPart, suffix) => {\n            return `${prefix}${prop.androidAgpVersion}${suffix}`;\n          }\n        );\n      }\n    }\n    return config;\n  });\n};\nfunction toSemVer(version: string): semver.SemVer {\n  return semver.coerce(version) ?? new semver.SemVer('0.0.0');\n}"
}