{
  "type": "file",
  "name": "149.ts",
  "label": "149.ts",
  "start_line": -1,
  "end_line": 60,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 60,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/149.ts: %dflt\n%0 = -1.5372\n%1 = -0.4986\n%2 = newarray (number)[3]\n%2[0] = 3.2406\n%2[1] = %0\n%2[2] = %1\n%3 = -0.9689\n%4 = newarray (number)[3]\n%4[0] = %3\n%4[1] = 1.8758\n%4[2] = 0.0415\n%5 = -0.204\n%6 = newarray (number)[3]\n%6[0] = 0.0557\n%6[1] = %5\n%6[2] = 1.057\n%7 = newarray (number[]|number[]|number[])[3]\n%7[0] = %2\n%7[1] = %4\n%7[2] = %6\nsrgbForwardMatrix = %7\nsrgbForwardTransform = %AM0\n%8 = newarray (number)[3]\n%8[0] = 0.4124\n%8[1] = 0.3576\n%8[2] = 0.1805\n%9 = newarray (number)[3]\n%9[0] = 0.2126\n%9[1] = 0.7152\n%9[2] = 0.0722\n%10 = newarray (number)[3]\n%10[0] = 0.0193\n%10[1] = 0.1192\n%10[2] = 0.9505\n%11 = newarray (number[]|number[]|number[])[3]\n%11[0] = %8\n%11[1] = %9\n%11[2] = %10\nsrgbReverseMatrix = %11\nsrgbReverseTransform = %AM1\nreturn",
              "start_line": 1,
              "end_line": 60,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "fromXYZ",
          "label": "fromXYZ",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "xyz = parameter0: XYZ\nthis = this: @ts_files/149.ts: %dflt\nrgb = staticinvoke <@%unk/%unk: .Array()>(3)\ntransform = srgbForwardTransform\nmatrix = srgbForwardMatrix\ni = 0",
              "start_line": 1,
              "end_line": 57,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < 3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = matrix[i]\n%1 = %0.<@%unk/%unk: .0>\n%2 = xyz.<@%unk/%unk: .0>\n%3 = %1 * %2\n%4 = matrix[i]\n%5 = %4.<@%unk/%unk: .1>\n%6 = xyz.<@%unk/%unk: .1>\n%7 = %5 * %6\n%8 = %3 + %7\n%9 = matrix[i]\n%10 = %9.<@%unk/%unk: .2>\n%11 = xyz.<@%unk/%unk: .2>\n%12 = %10 * %11\n%13 = %8 + %12\n%14 = staticinvoke <@%unk/%unk: .transform()>(%13)\n%15 = staticinvoke <@%unk/%unk: .clamp()>(%14)\n%16 = %15 * 255\n%17 = instanceinvoke Math.<@%unk/%unk: .round()>(%16)\nrgb.<@%unk/%unk: .i> = %17\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%18 = new @ts_files/149.ts: %AC$%dflt$fromXYZ$0\ninstanceinvoke %18.<@ts_files/149.ts: %AC$%dflt$fromXYZ$0.constructor()>()\nreturn %18",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function fromXYZ (xyz: XYZ): RGB {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }\n}"
        },
        {
          "type": "function",
          "name": "toXYZ",
          "label": "toXYZ",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: RGB\nthis = this: @ts_files/149.ts: %dflt\n%0 = newarray (number)[3]\n%0[0] = 0\n%0[1] = 0\n%0[2] = 0\nxyz = %0\ntransform = srgbReverseTransform\nmatrix = srgbReverseMatrix\n%1 = r / 255\nr = staticinvoke <@%unk/%unk: .transform()>(%1)\n%2 = g / 255\ng = staticinvoke <@%unk/%unk: .transform()>(%2)\n%3 = b / 255\nb = staticinvoke <@%unk/%unk: .transform()>(%3)\ni = 0",
              "start_line": 1,
              "end_line": 57,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < 3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = matrix[i]\n%5 = %4.<@%unk/%unk: .0>\n%6 = %5 * r\n%7 = matrix[i]\n%8 = %7.<@%unk/%unk: .1>\n%9 = %8 * g\n%10 = %6 + %9\n%11 = matrix[i]\n%12 = %11.<@%unk/%unk: .2>\n%13 = %12 * b\n%14 = %10 + %13\nxyz['i'] = %14\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return xyz",
                      "start_line": 60,
                      "end_line": 60,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function toXYZ ({ r, g, b }: RGB): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  r = transform(r / 255)\n  g = transform(g / 255)\n  b = transform(b / 255)\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n  return xyz\n}"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 12,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "C = parameter0: number\nthis = this: @ts_files/149.ts: %dflt\nif C <= 0.0031308\nConditionalOperatorIfTrue0\n%0 = C * 12.92\nConditionalOperatorIfFalse0\n%1 = 1 / 2.4\n%2 = C ** %1\n%3 = 1.055 * %2\n%0 = %3 - 0.055\nConditionalOperatorEnd0\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)"
        },
        {
          "type": "function",
          "name": "%AM1",
          "label": "%AM1",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "C = parameter0: number\nthis = this: @ts_files/149.ts: %dflt\nif C <= 0.04045\nConditionalOperatorIfTrue0\n%0 = C / 12.92\nConditionalOperatorIfFalse0\n%1 = C + 0.055\n%2 = %1 / 1.055\n%0 = %2 ** 2.4\nConditionalOperatorEnd0\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$fromXYZ$0",
      "label": "%AC$%dflt$fromXYZ$0",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// Utilities\nimport { clamp } from '@/util/helpers'\n// Types\nimport type { RGB, XYZ } from '../colorUtils'\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\nexport function fromXYZ (xyz: XYZ): RGB {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }\n}\nexport function toXYZ ({ r, g, b }: RGB): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  r = transform(r / 255)\n  g = transform(g / 255)\n  b = transform(b / 255)\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n  return xyz\n}"
}