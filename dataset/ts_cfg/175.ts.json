{
  "type": "file",
  "name": "175.ts",
  "label": "175.ts",
  "start_line": -1,
  "end_line": 49,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 49,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "addEventListener",
          "label": "addEventListener",
          "start_line": 1,
          "end_line": 3,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "type = parameter0: string\nhandler = parameter1: URLListener\nthis = this: @ts_files/175.ts: %dflt\n%0 = new @ts_files/175.ts: %AC$%dflt$addEventListener$0\ninstanceinvoke %0.<@ts_files/175.ts: %AC$%dflt$addEventListener$0.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function addEventListener(type: 'url', handler: URLListener) {\n  return { remove() {} };\n}"
        },
        {
          "type": "function",
          "name": "parseInitialURLAsync",
          "label": "parseInitialURLAsync",
          "start_line": 1,
          "end_line": 6,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\n%0 = new @ts_files/175.ts: %AC$%dflt$parseInitialURLAsync$1\ninstanceinvoke %0.<@ts_files/175.ts: %AC$%dflt$parseInitialURLAsync$1.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function parseInitialURLAsync(): Promise<ParsedURL> {\n  return {\n    scheme: null,\n    hostname: null,\n    path: null,\n    queryParams: null,\n  };\n}"
        },
        {
          "type": "function",
          "name": "sendIntent",
          "label": "sendIntent",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "action = parameter0: string\nextras = parameter1: SendIntentExtras[]\nthis = this: @ts_files/175.ts: %dflt\n%0 = new @%unk/%unk: UnavailabilityError\ninstanceinvoke %0.<@%unk/%unk: UnavailabilityError.constructor()>('Linking', 'sendIntent')\nthrow %0\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}"
        },
        {
          "type": "function",
          "name": "openSettings",
          "label": "openSettings",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\n%0 = new @%unk/%unk: UnavailabilityError\ninstanceinvoke %0.<@%unk/%unk: UnavailabilityError.constructor()>('Linking', 'openSettings')\nthrow %0\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function openSettings(): Promise<void> {\n  throw new UnavailabilityError('Linking', 'openSettings');\n}"
        },
        {
          "type": "function",
          "name": "getInitialURL",
          "label": "getInitialURL",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn ''",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function getInitialURL(): Promise<string | null> {\n  return '';\n}"
        },
        {
          "type": "function",
          "name": "getLinkingURL",
          "label": "getLinkingURL",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn ''",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function getLinkingURL() {\n  return '';\n}"
        },
        {
          "type": "function",
          "name": "openURL",
          "label": "openURL",
          "start_line": 1,
          "end_line": 30,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "url = parameter0: string\nthis = this: @ts_files/175.ts: %dflt\nreturn true",
              "start_line": 1,
              "end_line": 30,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function openURL(url: string): Promise<true> {\n  return true;\n}"
        },
        {
          "type": "function",
          "name": "canOpenURL",
          "label": "canOpenURL",
          "start_line": 1,
          "end_line": 30,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn true",
              "start_line": 1,
              "end_line": 30,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function canOpenURL() {\n  return true;\n}"
        },
        {
          "type": "function",
          "name": "useURL",
          "label": "useURL",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn null",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function useURL(): string | null {\n  return null;\n}"
        },
        {
          "type": "function",
          "name": "useLinkingURL",
          "label": "useLinkingURL",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn null",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function useLinkingURL() {\n  return null;\n}"
        },
        {
          "type": "function",
          "name": "collectManifestSchemes",
          "label": "collectManifestSchemes",
          "start_line": 1,
          "end_line": 39,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\n%0 = newarray (any)[0]\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function collectManifestSchemes() {\n  return [];\n}"
        },
        {
          "type": "function",
          "name": "hasConstantsManifest",
          "label": "hasConstantsManifest",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn false",
              "start_line": 1,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function hasConstantsManifest() {\n  return false;\n}"
        },
        {
          "type": "function",
          "name": "hasCustomScheme",
          "label": "hasCustomScheme",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn false",
              "start_line": 1,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function hasCustomScheme() {\n  return false;\n}"
        },
        {
          "type": "function",
          "name": "resolveScheme",
          "label": "resolveScheme",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn ''",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function resolveScheme() {\n  return '';\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$addEventListener$0",
      "label": "%AC$%dflt$addEventListener$0",
      "start_line": 1,
      "end_line": 49,
      "functions": [
        {
          "type": "function",
          "name": "remove",
          "label": "remove",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/175.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 49,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "remove() {}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ remove() {} }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$parseInitialURLAsync$1",
      "label": "%AC$%dflt$parseInitialURLAsync$1",
      "start_line": 7,
      "end_line": 7,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    scheme: null,\n    hostname: null,\n    path: null,\n    queryParams: null,\n  }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { UnavailabilityError } from 'expo-modules-core';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nexport function addEventListener(type: 'url', handler: URLListener) {\n  return { remove() {} };\n}\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  return {\n    scheme: null,\n    hostname: null,\n    path: null,\n    queryParams: null,\n  };\n}\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\nexport async function openSettings(): Promise<void> {\n  throw new UnavailabilityError('Linking', 'openSettings');\n}\nexport async function getInitialURL(): Promise<string | null> {\n  return '';\n}\nexport function getLinkingURL() {\n  return '';\n}\nexport async function openURL(url: string): Promise<true> {\n  return true;\n}\nexport async function canOpenURL() {\n  return true;\n}\nexport function useURL(): string | null {\n  return null;\n}\nexport function useLinkingURL() {\n  return null;\n}\nexport * from './Linking.types';\nexport function collectManifestSchemes() {\n  return [];\n}\nexport function hasConstantsManifest() {\n  return false;\n}\nexport function hasCustomScheme() {\n  return false;\n}\nexport function resolveScheme() {\n  return '';\n}\nexport { parse, createURL } from './createURL';"
}