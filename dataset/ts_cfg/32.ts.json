{
  "type": "file",
  "name": "32.ts",
  "label": "32.ts",
  "start_line": -1,
  "end_line": 445,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 427,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: %dflt\nTAG = 'ScreenManager'\nAPP_KEY_SCREEN_MANAGER = 'app_key_screen_manager'\nSCREEN_ORIENTATION_HORIZONTAL = 'isHorizontal'\nSCREEN_SIDEBAR = 'isSidebar'\nCOLUMN_MARGIN = 12\nCOLUMN_GUTTER = 12\n%0 = new @ts_files/32.ts: ScreenManager\ninstanceinvoke %0.<@ts_files/32.ts: ScreenManager.constructor()>()\nscreenManager = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ColumnSize",
      "label": "ColumnSize",
      "start_line": 25,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}"
    },
    {
      "type": "class",
      "name": "ScreenWidth",
      "label": "ScreenWidth",
      "start_line": 33,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "enum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}"
    },
    {
      "type": "class",
      "name": "WindowMode",
      "label": "WindowMode",
      "start_line": 38,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "enum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}"
    },
    {
      "type": "class",
      "name": "Size",
      "label": "Size",
      "start_line": 46,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface Size {\n  width: number;\n  height: number;\n}"
    },
    {
      "type": "class",
      "name": "StatusNaviHeight",
      "label": "StatusNaviHeight",
      "start_line": 51,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface StatusNaviHeight {\n  status: number;\n  navi: number;\n}"
    },
    {
      "type": "class",
      "name": "GetWindowMode",
      "label": "GetWindowMode",
      "start_line": 0,
      "end_line": 56,
      "functions": [
        {
          "type": "function",
          "name": "getWindowMode",
          "label": "getWindowMode",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "getWindowMode(): Promise<WindowMode>;"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}"
    },
    {
      "type": "class",
      "name": "ScreenManager",
      "label": "ScreenManager",
      "start_line": 1,
      "end_line": 445,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.%instInit()>()\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'constructor')\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n    Log.info(TAG, 'constructor');\n  }"
        },
        {
          "type": "function",
          "name": "initializationSize",
          "label": "initializationSize",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "win = parameter0: unknown\nthis = this: @ts_files/32.ts: ScreenManager\nthis.<@ts_files/32.ts: ScreenManager.mainWindow> = win\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.setMainWindow(window.Window)>(win)\n%0 = instanceinvoke this.<@ts_files/32.ts: ScreenManager.checkWindowMode()>()\n%1 = await %0\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.getWindowProperties(window.Window)>(win)\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }"
        },
        {
          "type": "function",
          "name": "on",
          "label": "on",
          "start_line": 1,
          "end_line": 111,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nfn = parameter1: unknown\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke Array.<@%unk/%unk: .isArray()>(event)\nif %0 != 0\ni = 0\nl = event.<@%unk/%unk: .length>",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < l",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = event.<@%unk/%unk: .i>\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.on(unknown, unknown)>(%1, fn)\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/32.ts: ScreenManager.events>\n%3 = instanceinvoke %2.<@%unk/%unk: .get()>(event)\n%4 = %3 === null\n%5 = this.<@ts_files/32.ts: ScreenManager.events>\n%6 = instanceinvoke %5.<@%unk/%unk: .get()>(event)\n%7 = %6 === undefined\n%8 = %4 || %7\nif %8 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = newarray (any)[0]\n%10 = this.<@ts_files/32.ts: ScreenManager.events>\ninstanceinvoke %10.<@%unk/%unk: .set()>(event, %9)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = this.<@ts_files/32.ts: ScreenManager.events>\n%12 = instanceinvoke %11.<@%unk/%unk: .get()>(event)\ninstanceinvoke %12.<@%unk/%unk: .push()>(fn)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "off",
          "label": "off",
          "start_line": 1,
          "end_line": 130,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nfn = parameter1: unknown\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = event == null\n%1 = event == undefined\n%2 = %0 || %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke Array.<@%unk/%unk: .isArray()>(event)\nif %3 != 0\ni = 0\nl = event.<@%unk/%unk: .length>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if i < l",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = event.<@%unk/%unk: .i>\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.off(unknown, unknown)>(%4, fn)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%5 = this.<@ts_files/32.ts: ScreenManager.events>\ncbs = instanceinvoke %5.<@%unk/%unk: .get()>(event)\n%6 = new @%unk/%unk: Boolean\ninstanceinvoke %6.<@%unk/%unk: Boolean.constructor()>(cbs)\n%7 = instanceinvoke %6.<@%unk/%unk: .valueOf()>()\n%8 = !%7\nif %8 != 0",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 132,
                              "end_line": 427,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%9 = fn == null\n%10 = fn == undefined\n%11 = %9 || %10\nif %11 != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return",
                                  "start_line": 132,
                                  "end_line": 427,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "cb = undefined\ni = cbs.<@%unk/%unk: .length>",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "i = i - 1\nif i > 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "cb = cbs[i]\n%12 = cb === fn\n%13 = cb.<@%unk/%unk: .fn>\n%14 = %13 === fn\n%15 = %12 || %14\nif %15 != false",
                                          "start_line": 149,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "instanceinvoke cbs.<@%unk/%unk: .splice()>(i, 1)",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "return",
                                                  "start_line": 132,
                                                  "end_line": 427,
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "emit",
          "label": "emit",
          "start_line": 1,
          "end_line": 157,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "event = parameter0: unknown\nargument = parameter1: Object[]\nthis = this: @ts_files/32.ts: ScreenManager\n_self = this\n%0 = new @%unk/%unk: Boolean\n%1 = this.<@ts_files/32.ts: ScreenManager.events>\n%2 = instanceinvoke %1.<@%unk/%unk: .get()>(event)\ninstanceinvoke %0.<@%unk/%unk: Boolean.constructor()>(%2)\n%3 = instanceinvoke %0.<@%unk/%unk: .valueOf()>()\n%4 = !%3\nif %4 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = newarray (any)[0]\ncbs = %5\ni = 0",
                  "start_line": 1,
                  "end_line": 169,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%6 = this.<@ts_files/32.ts: ScreenManager.events>\n%7 = instanceinvoke %6.<@%unk/%unk: .get()>(event)\n%8 = %7.<@%unk/%unk: .length>\nif i < %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = this.<@ts_files/32.ts: ScreenManager.events>\n%10 = instanceinvoke %9.<@%unk/%unk: .get()>(event)\n%11 = %10.<@%unk/%unk: .i>\ninstanceinvoke cbs.<@%unk/%unk: .push()>(%11)\ni = i + 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%12 = cbs.<@%unk/%unk: .length>\nif %12 > 0\ni = 0\nl = cbs.<@%unk/%unk: .length>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "if i < l",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "ref = cbs[i]\nif ref != null",
                                  "start_line": 170,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "instanceinvoke ref.<@%unk/%unk: .apply()>(_self, argument)",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "i = i + 1",
                                                  "start_line": 1,
                                                  "end_line": 1,
                                                  "successors": [
                                                    {
                                                      "type": "blockRef",
                                                      "label": "(RepeatedBlock)"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return",
                                  "start_line": 132,
                                  "end_line": 427,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "e = caughtexception: unknown\n%13 = new @%unk/%unk: Error\ninstanceinvoke %13.<@%unk/%unk: Error.constructor()>(e)",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "isLeftBlankInitialized",
          "label": "isLeftBlankInitialized",
          "start_line": 1,
          "end_line": 182,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%1 = %0[0]\n%2 = %1 !== 0\n%3 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%4 = %3[1]\n%5 = %4 !== 0\n%6 = %2 || %5\n%7 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%8 = %7[2]\n%9 = %8 !== 0\n%10 = %6 || %9\n%11 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%12 = %11[3]\n%13 = %12 !== 0\n%14 = %10 || %13\nreturn %14",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }"
        },
        {
          "type": "function",
          "name": "getWinWidth",
          "label": "getWinWidth",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.winWidth>\n%1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }"
        },
        {
          "type": "function",
          "name": "setWinWidth",
          "label": "setWinWidth",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "width = parameter0: number\nthis = this: @ts_files/32.ts: ScreenManager\nthis.<@ts_files/32.ts: ScreenManager.winWidth> = width\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setWinWidth(width: number): void {\n    this.winWidth = width;\n  }"
        },
        {
          "type": "function",
          "name": "getWinHeight",
          "label": "getWinHeight",
          "start_line": 1,
          "end_line": 196,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.winHeight>\n%1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }"
        },
        {
          "type": "function",
          "name": "getStatusBarHeight",
          "label": "getStatusBarHeight",
          "start_line": 1,
          "end_line": 200,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.statusBarHeight>\n%1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }"
        },
        {
          "type": "function",
          "name": "getNaviBarHeight",
          "label": "getNaviBarHeight",
          "start_line": 1,
          "end_line": 204,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.naviBarHeight>\n%1 = staticinvoke <@%unk/%unk: .px2vp()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }"
        },
        {
          "type": "function",
          "name": "initWindowMode",
          "label": "initWindowMode",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.windowMode>\n%1 = 'start to initialize photos application window mode: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }"
        },
        {
          "type": "function",
          "name": "isSplitMode",
          "label": "isSplitMode",
          "start_line": 1,
          "end_line": 212,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = @ts_files/32.ts: WindowMode.[static]PRIMARY\n%1 = this.<@ts_files/32.ts: ScreenManager.windowMode>\n%2 = %0 === %1\n%3 = @ts_files/32.ts: WindowMode.[static]SECONDARY\n%4 = this.<@ts_files/32.ts: ScreenManager.windowMode>\n%5 = %3 === %4\n%6 = %2 || %5\nreturn %6",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }"
        },
        {
          "type": "function",
          "name": "checkWindowMode",
          "label": "checkWindowMode",
          "start_line": 1,
          "end_line": 216,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\nbefore = this.<@ts_files/32.ts: ScreenManager.windowMode>\n%0 = this.<@ts_files/32.ts: ScreenManager.globalThis>\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('photosWindowStage')\nphotosWindowStage = <@ts_files/32.ts: GetWindowMode>%1\n%2 = instanceinvoke photosWindowStage.<@ts_files/32.ts: GetWindowMode.getWindowMode()>()\nmode = await %2\n%3 = 'photos application before/current window mode: ' + before\n%4 = %3 + '/'\n%5 = %4 + mode\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %5)\nif before === mode",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "this.<@ts_files/32.ts: ScreenManager.windowMode> = mode\n%6 = @ts_files/32.ts: WindowMode.[static]FULL_SCREEN\n%7 = this.<@ts_files/32.ts: ScreenManager.windowMode>\nif %6 == %7",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/32.ts: ScreenManager.setFullScreen()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 132,
                          "end_line": 427,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/32.ts: ScreenManager.setSplitScreen()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setMainWindow",
          "label": "setMainWindow",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "win = parameter0: window.Window\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setMainWindow')\ninstanceinvoke win.<@%unk/%unk: .on()>('windowSizeChange', %AM0$setMainWindow)\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }"
        },
        {
          "type": "function",
          "name": "getWindowProperties",
          "label": "getWindowProperties",
          "start_line": 1,
          "end_line": 243,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "win = parameter0: window.Window\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getWindowProperties')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "properties = instanceinvoke win.<@%unk/%unk: .getWindowProperties()>()\n%0 = properties.<@%unk/%unk: .windowRect>\n%1 = %0.<@ts_files/32.ts: ScreenManager.width>\n%2 = %1 !== 0\n%3 = properties.<@%unk/%unk: .windowRect>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %4 !== 0\n%6 = %2 && %5\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = properties.<@%unk/%unk: .windowRect>\n%8 = %7.<@%unk/%unk: .width>\nthis.<@ts_files/32.ts: ScreenManager.winWidth> = %8\n%9 = properties.<@%unk/%unk: .windowRect>\n%10 = %9.<@%unk/%unk: .height>\nthis.<@ts_files/32.ts: ScreenManager.winHeight> = %10",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = this.<@ts_files/32.ts: ScreenManager.winWidth>\n%12 = 'this.winWidth = ' + %11\n%13 = %12 + ' this.winHeight = '\n%14 = this.<@ts_files/32.ts: ScreenManager.winHeight>\n%15 = %13 + %14\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %15)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 132,
                              "end_line": 427,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "exception = caughtexception: unknown\n%16 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(exception)\n%17 = 'Failed to obtain the window properties. Cause: ' + %16\ninstanceinvoke console.<@%unk/%unk: .error()>(%17)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setFullScreen",
          "label": "setFullScreen",
          "start_line": 1,
          "end_line": 257,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = Constants.<@%unk/%unk: .MAIN_WINDOW>\ntopWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getTopWindow start')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke topWindow.<@%unk/%unk: .setWindowLayoutFullScreen()>(true)\n%2 = await %1\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setFullScreen true Succeeded')\n%3 = instanceinvoke this.<@ts_files/32.ts: ScreenManager.hideStatusBar(window.Window)>(topWindow)\n%4 = await %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%5 = 'setFullScreen err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setSplitScreen",
          "label": "setSplitScreen",
          "start_line": 1,
          "end_line": 269,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "this.<@ts_files/32.ts: ScreenManager.statusBarHeight> = 0\nthis.<@ts_files/32.ts: ScreenManager.naviBarHeight> = 0\n%0 = newarray (number)[4]\n%0[0] = 0\n%0[1] = 0\n%0[2] = 0\n%0[3] = 0\nthis.<@ts_files/32.ts: ScreenManager.leftBlank> = %0\n%1 = BroadcastConstants.<@%unk/%unk: .LEFT_BLANK>\n%2 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(%1, %2)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%3 = 'setSplitScreen err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %3)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "hideStatusBar",
          "label": "hideStatusBar",
          "start_line": 1,
          "end_line": 280,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "topWindow = parameter0: window.Window\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'hideStatusBar start')\n%0 = newarray (string)[1]\n%0[0] = 'navigation'\nnames = %0\n%1 = 'getTopWindow names: ' + names\n%2 = %1 + ' end'\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %2)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarEnable()>(names)\n%4 = await %3\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'hideStatusBar Succeeded')\n%5 = instanceinvoke topWindow.<@%unk/%unk: .getWindowAvoidArea()>(0)\ndata = await %5\n%6 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%7 = 'Succeeded in obtaining the area. Data: ' + %6\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %7)\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)>(data)\n%8 = staticinvoke <@%unk/%unk: .$r()>('app.color.default_background_color')\n%9 = staticinvoke <@%unk/%unk: .getResourceString()>(%8)\nbarColor = await %9\n%10 = staticinvoke <@%unk/%unk: .$r()>('app.color.default_bar_content_color')\n%11 = staticinvoke <@%unk/%unk: .getResourceString()>(%10)\nbarContentColor = await %11\n%12 = !barColor\nif %12 != ''",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "barColor = '#FFF1F3F5'",
                      "start_line": 294,
                      "end_line": 294,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = !barContentColor\nif %13 != ''",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "barContentColor = '#FF000000'",
                              "start_line": 297,
                              "end_line": 297,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%14 = new @ts_files/32.ts: %AC$ScreenManager$hideStatusBar$0\ninstanceinvoke %14.<@ts_files/32.ts: %AC$ScreenManager$hideStatusBar$0.constructor()>()\nsystemBarProperties = %14\n%15 = instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarProperties()>(systemBarProperties)\n%16 = await %15\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setStatusBarColor done')",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 132,
                                      "end_line": 427,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%17 = 'hideStatusBar err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %17)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setNavigationBarColor",
          "label": "setNavigationBarColor",
          "start_line": 1,
          "end_line": 310,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "barColor = parameter0: string\nbarContentColor = parameter1: string\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setNavigationBarColor start')\n%0 = Constants.<@%unk/%unk: .MAIN_WINDOW>\ntopWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @ts_files/32.ts: %AC$ScreenManager$setNavigationBarColor$1\ninstanceinvoke %1.<@ts_files/32.ts: %AC$ScreenManager$setNavigationBarColor$1.constructor()>()\nsystemBarProperties = %1\ninstanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarProperties()>(systemBarProperties, %AM1$setNavigationBarColor)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%2 = 'setNavigationBarColor err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %2)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setSystemUi",
          "label": "setSystemUi",
          "start_line": 1,
          "end_line": 327,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isShowBar = parameter0: boolean\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setSystemUi start')\n%0 = Constants.<@%unk/%unk: .MAIN_WINDOW>\ntopWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(%0)\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'getTopWindow start')\n%1 = newarray (string)[1]\n%1[0] = 'navigation'\nnames = %1\n%2 = !isShowBar\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = newarray (any)[0]\nnames = %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = 'getTopWindow names: ' + names\n%5 = %4 + ' end'\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %5)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke topWindow.<@%unk/%unk: .setWindowSystemBarEnable()>(names, %AM2$setSystemUi)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 132,
                              "end_line": 427,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%6 = 'setSystemUi err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onLeftBlankChanged",
          "label": "onLeftBlankChanged",
          "start_line": 1,
          "end_line": 350,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "area = parameter0: window.AvoidArea\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = area == null\n%1 = area == undefined\n%2 = %0 || %1\n%3 = area.<@%unk/%unk: .bottomRect>\n%4 = %3.<@%unk/%unk: .height>\n%5 = %4 === 0\n%6 = %2 || %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = new @ts_files/32.ts: %AC$ScreenManager$onLeftBlankChanged$2\ninstanceinvoke %7.<@ts_files/32.ts: %AC$ScreenManager$onLeftBlankChanged$2.constructor()>()\nleftBlankBefore = %7\nthis.<@ts_files/32.ts: ScreenManager.statusBarHeight> = 0\n%8 = area.<@%unk/%unk: .bottomRect>\n%9 = %8.<@%unk/%unk: .height>\nthis.<@ts_files/32.ts: ScreenManager.naviBarHeight> = %9\n%10 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%11 = %10[0]\n%12 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%13 = %12[1]\n%14 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%15 = %14[2]\n%16 = area.<@%unk/%unk: .bottomRect>\n%17 = %16.<@%unk/%unk: .height>\n%18 = newarray (unknown)[4]\n%18[0] = %11\n%18[1] = %13\n%18[2] = %15\n%18[3] = %17\nthis.<@ts_files/32.ts: ScreenManager.leftBlank> = %18\n%19 = leftBlankBefore.<@ts_files/32.ts: StatusNaviHeight.status>\n%20 = this.<@ts_files/32.ts: ScreenManager.statusBarHeight>\n%21 = %19 !== %20\n%22 = leftBlankBefore.<@ts_files/32.ts: StatusNaviHeight.navi>\n%23 = this.<@ts_files/32.ts: ScreenManager.naviBarHeight>\n%24 = %22 !== %23\n%25 = %21 || %24\nif %25 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%26 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(leftBlankBefore)\n%27 = 'leftBlank changed: ' + %26\n%28 = %27 + '-'\n%29 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\n%30 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(%29)\n%31 = %28 + %30\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %31)\n%32 = BroadcastConstants.<@%unk/%unk: .LEFT_BLANK>\n%33 = this.<@ts_files/32.ts: ScreenManager.leftBlank>\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(%32, %33)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 132,
                          "end_line": 427,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onWinSizeChanged",
          "label": "onWinSizeChanged",
          "start_line": 1,
          "end_line": 367,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "size = parameter0: unknown\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(size)\n%1 = 'onWinSizeChanged ' + %0\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\n%2 = size == null\n%3 = size == undefined\n%4 = %2 || %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = new @ts_files/32.ts: %AC$ScreenManager$onWinSizeChanged$3\ninstanceinvoke %5.<@ts_files/32.ts: %AC$ScreenManager$onWinSizeChanged$3.constructor()>()\nsizeBefore = %5\n%6 = size.<@%unk/%unk: .width>\nthis.<@ts_files/32.ts: ScreenManager.winWidth> = %6\n%7 = size.<@%unk/%unk: .height>\nthis.<@ts_files/32.ts: ScreenManager.winHeight> = %7\n%8 = sizeBefore.<@ts_files/32.ts: Size.width>\n%9 = this.<@ts_files/32.ts: ScreenManager.winWidth>\n%10 = %8 !== %9\n%11 = sizeBefore.<@ts_files/32.ts: Size.height>\n%12 = this.<@ts_files/32.ts: ScreenManager.winHeight>\n%13 = %11 !== %12\n%14 = %10 || %13\nif %14 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%15 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(sizeBefore)\n%16 = 'winSize changed: ' + %15\n%17 = %16 + ' -> '\n%18 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(size)\n%19 = %17 + %18\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %19)\n%20 = screenManager.<@ts_files/32.ts: ScreenManager.ON_WIN_SIZE_CHANGED>\n%21 = newarray (unknown)[1]\n%21[0] = size\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.emit(unknown, Object[])>(%20, %21)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 132,
                          "end_line": 427,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "onRotationAngleChanged",
          "label": "onRotationAngleChanged",
          "start_line": 1,
          "end_line": 386,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "angle = parameter0: unknown\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = angle == null\n%1 = angle == undefined\n%2 = %0 || %1\nif %2 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 132,
                  "end_line": 427,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if angle === 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/32.ts: ScreenManager.horizontal> = false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = this.<@ts_files/32.ts: ScreenManager.horizontal>\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_ORIENTATION_HORIZONTAL, %3)\nreturn",
                          "start_line": 1,
                          "end_line": 427,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/32.ts: ScreenManager.horizontal> = true",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }"
        },
        {
          "type": "function",
          "name": "isHorizontal",
          "label": "isHorizontal",
          "start_line": 1,
          "end_line": 399,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_ORIENTATION_HORIZONTAL)\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/32.ts: ScreenManager.horizontal>\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_ORIENTATION_HORIZONTAL, %1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_ORIENTATION_HORIZONTAL)\nreturn %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }"
        },
        {
          "type": "function",
          "name": "isSidebar",
          "label": "isSidebar",
          "start_line": 1,
          "end_line": 406,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_SIDEBAR)\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/32.ts: ScreenManager.sidebar>\ninstanceinvoke AppStorage.<@%unk/%unk: .SetOrCreate()>(SCREEN_SIDEBAR, %1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = instanceinvoke AppStorage.<@%unk/%unk: .Get()>(SCREEN_SIDEBAR)\nreturn %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }"
        },
        {
          "type": "function",
          "name": "getColumnsWidth",
          "label": "getColumnsWidth",
          "start_line": 1,
          "end_line": 413,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "count = parameter0: number\nthis = this: @ts_files/32.ts: ScreenManager\ncolumns = instanceinvoke this.<@ts_files/32.ts: ScreenManager.getScreenColumns()>()\n%0 = 'getColumnsWidth count is ' + count\n%1 = %0 + ' columns: '\n%2 = %1 + columns\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %2)\n%3 = this.<@ts_files/32.ts: ScreenManager.winWidth>\n%4 = staticinvoke <@%unk/%unk: .px2vp()>(%3)\n%5 = %4 - COLUMN_MARGIN\ncolumnWidth = %5 / columns\n%6 = columnWidth * count\n%7 = %6 - COLUMN_GUTTER\nreturn %7",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }"
        },
        {
          "type": "function",
          "name": "getScreenColumns",
          "label": "getScreenColumns",
          "start_line": 1,
          "end_line": 420,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = this.<@ts_files/32.ts: ScreenManager.winWidth>\nwidth = staticinvoke <@%unk/%unk: .px2vp()>(%0)\n%1 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_MEDIUM\nif width < %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = @ts_files/32.ts: ColumnSize.[static]COLUMN_FOUR\nreturn %2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_MEDIUM\n%4 = width >= %3\n%5 = @ts_files/32.ts: ScreenWidth.[static]WIDTH_LARGE\n%6 = width < %5\n%7 = %4 && %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = @ts_files/32.ts: ColumnSize.[static]COLUMN_EIGHT\nreturn %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = @ts_files/32.ts: ColumnSize.[static]COLUMN_TWELVE\nreturn %9",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setKeepScreenOn",
          "label": "setKeepScreenOn",
          "start_line": 1,
          "end_line": 431,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOn start')\ntopWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>('mainWindow')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke topWindow.<@%unk/%unk: .setWindowKeepScreenOn()>(true, %AM3$setKeepScreenOn)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%0 = 'setKeepScreenOn err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "setKeepScreenOff",
          "label": "setKeepScreenOff",
          "start_line": 1,
          "end_line": 441,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOff start')\ntopWindow = instanceinvoke AppStorage.<@%unk/%unk: .Get()>('mainWindow')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke topWindow.<@%unk/%unk: .setWindowKeepScreenOn()>(false, %AM4$setKeepScreenOff)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%0 = 'setKeepScreenOff err: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %0)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$setMainWindow",
          "label": "%AM0$setMainWindow",
          "start_line": 1,
          "end_line": 427,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: window.Size\nthis = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'windowSizeChange ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.checkWindowMode()>()\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.onWinSizeChanged(unknown)>(data)\nreturn",
              "start_line": 1,
              "end_line": 427,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        }"
        },
        {
          "type": "function",
          "name": "%AM1$setNavigationBarColor",
          "label": "%AM1$setNavigationBarColor",
          "start_line": 1,
          "end_line": 320,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setStatusBarColor done')\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void  => Log.info(TAG, 'setStatusBarColor done')"
        },
        {
          "type": "function",
          "name": "%AM2$setSystemUi",
          "label": "%AM2$setSystemUi",
          "start_line": 1,
          "end_line": 338,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [isShowBar, topWindow]\nisShowBar = %closures0.isShowBar\ntopWindow = %closures0.topWindow\nthis = this: @ts_files/32.ts: ScreenManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'setFullScreen Succeeded')\nif isShowBar != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke topWindow.<@%unk/%unk: .getWindowAvoidArea()>(0)\ndata = await %0\ninstanceinvoke this.<@ts_files/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)>(data)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 132,
                      "end_line": 427,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            }"
        },
        {
          "type": "function",
          "name": "%AM3$setKeepScreenOn",
          "label": "%AM3$setKeepScreenOn",
          "start_line": 1,
          "end_line": 435,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOn Succeeded')\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => Log.info(TAG, 'setKeepScreenOn Succeeded')"
        },
        {
          "type": "function",
          "name": "%AM4$setKeepScreenOff",
          "label": "%AM4$setKeepScreenOff",
          "start_line": 1,
          "end_line": 445,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/32.ts: ScreenManager\n%0 = instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'setKeepScreenOff Succeeded')\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => Log.info(TAG, 'setKeepScreenOff Succeeded')"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n  }\n\n  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }\n\n  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }\n\n  // Unit：vp\n  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }\n\n  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }\n\n  // Unit：vp\n  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }\n\n  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }\n\n  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }\n\n  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }\n\n  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }\n\n  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }\n\n  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }\n\n  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }\n\n  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }\n\n  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }\n\n  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }\n\n  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }\n\n  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }\n\n  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }\n\n  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }\n\n  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }\n\n  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }\n\n  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }\n\n  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }\n\n  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }\n\n  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }\n\n  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$ScreenManager$hideStatusBar$0",
      "label": "%AC$ScreenManager$hideStatusBar$0",
      "start_line": 299,
      "end_line": 299,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }"
    },
    {
      "type": "class",
      "name": "%AC$ScreenManager$setNavigationBarColor$1",
      "label": "%AC$ScreenManager$setNavigationBarColor$1",
      "start_line": 314,
      "end_line": 314,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }"
    },
    {
      "type": "class",
      "name": "%AC$ScreenManager$onLeftBlankChanged$2",
      "label": "%AC$ScreenManager$onLeftBlankChanged$2",
      "start_line": 354,
      "end_line": 354,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    }"
    },
    {
      "type": "class",
      "name": "%AC$ScreenManager$onWinSizeChanged$3",
      "label": "%AC$ScreenManager$onWinSizeChanged$3",
      "start_line": 372,
      "end_line": 372,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      width: this.winWidth,\n      height: this.winHeight\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deviceInfo from '@ohos.deviceInfo';\nimport window from '@ohos.window';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { Constants } from '../constants/Constants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from './GlobalContext';\n\nexport enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}\n\nenum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}\n\nenum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\ninterface StatusNaviHeight {\n  status: number;\n  navi: number;\n}\n\ninterface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}\n\nconst TAG = 'ScreenManager';\n\nconst APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';\n\nconst SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';\nconst SCREEN_SIDEBAR: string = 'isSidebar';\n\nconst COLUMN_MARGIN: number = 12;\nconst COLUMN_GUTTER: number = 12;\n\ntype CallbackType = Function;\n\nclass ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n  }\n\n  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }\n\n  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }\n\n  // Unit：vp\n  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }\n\n  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }\n\n  // Unit：vp\n  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }\n\n  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }\n\n  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }\n\n  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }\n\n  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }\n\n  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }\n\n  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }\n\n  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }\n\n  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }\n\n  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }\n\n  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }\n\n  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }\n\n  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }\n\n  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }\n\n  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }\n\n  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }\n\n  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }\n\n  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }\n\n  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }\n\n  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }\n\n  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }\n\n  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }\n}\n\nexport let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);\n"
}