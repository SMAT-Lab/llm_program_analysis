{
  "type": "file",
  "name": "156.ts",
  "label": "156.ts",
  "start_line": -1,
  "end_line": 34,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 34,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/156.ts: %dflt\nstaticinvoke <@%unk/%unk: .RegisterClass()>('FGThrottleBlock', FlowGraphThrottleBlock)\nreturn",
              "start_line": 1,
              "end_line": 34,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "FlowGraphThrottleBlock",
      "label": "FlowGraphThrottleBlock",
      "start_line": 1,
      "end_line": 34,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 34,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/156.ts: FlowGraphThrottleBlock.%instInit()>()\nconfig = parameter0: IFlowGraphBlockConfiguration\nthis = this: @ts_files/156.ts: FlowGraphThrottleBlock\nstaticinvoke <@%unk/%unk: .super()>(config)\n%0 = instanceinvoke this.<@%unk/%unk: ._registerSignalInput()>('reset')\nthis.<@ts_files/156.ts: FlowGraphThrottleBlock.reset> = %0\n%1 = instanceinvoke this.<@%unk/%unk: .registerDataInput()>('duration', RichTypeNumber)\nthis.<@ts_files/156.ts: FlowGraphThrottleBlock.duration> = %1\n%2 = instanceinvoke this.<@%unk/%unk: .registerDataOutput()>('timeRemaining', RichTypeNumber)\nthis.<@ts_files/156.ts: FlowGraphThrottleBlock.timeRemaining> = %2\nreturn",
              "start_line": 1,
              "end_line": 34,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.timeRemaining = this.registerDataOutput(\"timeRemaining\", RichTypeNumber);\n    }"
        },
        {
          "type": "function",
          "name": "_execute",
          "label": "_execute",
          "start_line": 1,
          "end_line": 18,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "context = parameter0: FlowGraphContext\ncallingSignal = parameter1: FlowGraphSignalConnection\nthis = this: @ts_files/156.ts: FlowGraphThrottleBlock\nlastExecutedTime = instanceinvoke context.<@%unk/%unk: ._getExecutionVariable()>(this, 'lastExecutedTime')\n%0 = this.<@ts_files/156.ts: FlowGraphThrottleBlock.duration>\ndurationValue = instanceinvoke %0.<@%unk/%unk: .getValue()>(context)\ncurrentTime = instanceinvoke Date.<@%unk/%unk: .now()>()\n%1 = this.<@ts_files/156.ts: FlowGraphThrottleBlock.reset>\n%2 = callingSignal === %1\n%3 = lastExecutedTime === undefined\n%4 = %2 || %3\n%5 = currentTime - lastExecutedTime\n%6 = %5 > durationValue\n%7 = %4 || %6\nif %7 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%8 = this.<@ts_files/156.ts: FlowGraphThrottleBlock.timeRemaining>\ninstanceinvoke %8.<@%unk/%unk: .setValue()>(0, context)\n%9 = this.<@ts_files/156.ts: FlowGraphThrottleBlock.out>\ninstanceinvoke %9.<@%unk/%unk: ._activateSignal()>(context)\ninstanceinvoke context.<@%unk/%unk: ._setExecutionVariable()>(this, 'lastExecutedTime', currentTime)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 34,
                      "end_line": 34,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%10 = currentTime - lastExecutedTime\nremaining = durationValue - %10\n%11 = this.<@ts_files/156.ts: FlowGraphThrottleBlock.timeRemaining>\ninstanceinvoke %11.<@%unk/%unk: .setValue()>(remaining, context)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n        const lastExecutedTime = context._getExecutionVariable(this, \"lastExecutedTime\");\n        const durationValue = this.duration.getValue(context);\n        const currentTime = Date.now();\n        if (callingSignal === this.reset || lastExecutedTime === undefined || currentTime - lastExecutedTime > durationValue) {\n            //activate the output flow\n            this.timeRemaining.setValue(0, context);\n            this.out._activateSignal(context);\n            context._setExecutionVariable(this, \"lastExecutedTime\", currentTime);\n        } else {\n            //activate the output flow after the remaining time\n            const remaining = durationValue - (currentTime - lastExecutedTime);\n            this.timeRemaining.setValue(remaining, context);\n        }\n    }"
        },
        {
          "type": "function",
          "name": "getClassName",
          "label": "getClassName",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/156.ts: FlowGraphThrottleBlock\nreturn 'FGThrottleBlock'",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getClassName(): string {\n        return \"FGThrottleBlock\";\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\n    public readonly duration: FlowGraphDataConnection<number>;\n    public readonly reset: FlowGraphSignalConnection;\n    public readonly timeRemaining: FlowGraphDataConnection<number>;\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.timeRemaining = this.registerDataOutput(\"timeRemaining\", RichTypeNumber);\n    }\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n        const lastExecutedTime = context._getExecutionVariable(this, \"lastExecutedTime\");\n        const durationValue = this.duration.getValue(context);\n        const currentTime = Date.now();\n        if (callingSignal === this.reset || lastExecutedTime === undefined || currentTime - lastExecutedTime > durationValue) {\n            //activate the output flow\n            this.timeRemaining.setValue(0, context);\n            this.out._activateSignal(context);\n            context._setExecutionVariable(this, \"lastExecutedTime\", currentTime);\n        } else {\n            //activate the output flow after the remaining time\n            const remaining = durationValue - (currentTime - lastExecutedTime);\n            this.timeRemaining.setValue(remaining, context);\n        }\n    }\n    public override getClassName(): string {\n        return \"FGThrottleBlock\";\n    }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { FlowGraphContext } from \"../../../flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\nexport class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\n    public readonly duration: FlowGraphDataConnection<number>;\n    public readonly reset: FlowGraphSignalConnection;\n    public readonly timeRemaining: FlowGraphDataConnection<number>;\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.timeRemaining = this.registerDataOutput(\"timeRemaining\", RichTypeNumber);\n    }\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n        const lastExecutedTime = context._getExecutionVariable(this, \"lastExecutedTime\");\n        const durationValue = this.duration.getValue(context);\n        const currentTime = Date.now();\n        if (callingSignal === this.reset || lastExecutedTime === undefined || currentTime - lastExecutedTime > durationValue) {\n            //activate the output flow\n            this.timeRemaining.setValue(0, context);\n            this.out._activateSignal(context);\n            context._setExecutionVariable(this, \"lastExecutedTime\", currentTime);\n        } else {\n            //activate the output flow after the remaining time\n            const remaining = durationValue - (currentTime - lastExecutedTime);\n            this.timeRemaining.setValue(remaining, context);\n        }\n    }\n    public override getClassName(): string {\n        return \"FGThrottleBlock\";\n    }\n}\nRegisterClass(\"FGThrottleBlock\", FlowGraphThrottleBlock);"
}