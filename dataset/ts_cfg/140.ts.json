{
  "type": "file",
  "name": "140.ts",
  "label": "140.ts",
  "start_line": -1,
  "end_line": 45,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 45,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/140.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "removeKnownKeys",
          "label": "removeKnownKeys",
          "start_line": 1,
          "end_line": 11,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "keys = parameter0: string[]\nthis = this: @ts_files/140.ts: %dflt\n%0 = staticinvoke <@%unk/%unk: .without()>(keys, 'time', 'level', 'caller', 'message', 'stack_trace')\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function removeKnownKeys(keys: string[]) {\n  return without(keys, 'time', 'level', 'caller', 'message', 'stack_trace');\n}"
        },
        {
          "type": "function",
          "name": "formatJSONLine",
          "label": "formatJSONLine",
          "start_line": 1,
          "end_line": 14,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "timestamp = instanceinvoke rawText.<@%unk/%unk: .substring()>(0, TIMESTAMP_LENGTH)\n%5 = new @ts_files/140.ts: %AC$%dflt$formatJSONLine$0\ninstanceinvoke %5.<@ts_files/140.ts: %AC$%dflt$formatJSONLine$0.constructor()>()\ninstanceinvoke spans.<@%unk/%unk: .push()>(%5)\n%6 = timestamp + ' '\nline = line + %6",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "line = line + staticinvoke <@%unk/%unk: .formatTime()>(time, spans, line)\nline = line + staticinvoke <@%unk/%unk: .formatLevel()>(level, spans, line)\nline = line + staticinvoke <@%unk/%unk: .formatCaller()>(caller, spans, line)\n%7 = keys.<@%unk/%unk: .length>\n%8 = !%7\n%9 = !%8\nline = line + staticinvoke <@%unk/%unk: .formatMessage()>(message, spans, line, %9)\ninstanceinvoke keys.<@%unk/%unk: .forEach()>(%AM0$formatJSONLine)\n%10 = new @ts_files/140.ts: %AC$%dflt$formatJSONLine$1\ninstanceinvoke %10.<@ts_files/140.ts: %AC$%dflt$formatJSONLine$1.constructor()>()\ninstanceinvoke lines.<@%unk/%unk: .push()>(%10)\nstaticinvoke <@%unk/%unk: .formatStackTrace()>(stackTrace, lines)\nreturn lines",
                  "start_line": 1,
                  "end_line": 45,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "rawText = parameter0: string\nwithTimestamps = parameter1: boolean\nthis = this: @ts_files/140.ts: %dflt\n%0 = newarray (any)[0]\nspans = %0\n%1 = newarray (any)[0]\nlines = %1\nline = ''\nif withTimestamps != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "text = instanceinvoke rawText.<@%unk/%unk: .substring()>(TIMESTAMP_LENGTH)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "json = instanceinvoke JSON.<@%unk/%unk: .parse()>(text)\n%3 = json\ntime = %3.<@%unk/%unk: .time>\nlevel = %3.<@%unk/%unk: .level>\ncaller = %3.<@%unk/%unk: .caller>\nmessage = %3.<@%unk/%unk: .message>\nstackTrace = %3.<@%unk/%unk: .stack_trace>\n%4 = instanceinvoke Object.<@%unk/%unk: .keys()>(json)\nkeys = staticinvoke <@ts_files/140.ts: %dflt.removeKnownKeys(string[])>(%4)\nif withTimestamps != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "text = rawText",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function formatJSONLine(\n  rawText: string,\n  withTimestamps?: boolean\n): FormattedLine[] {\n  const spans: Span[] = [];\n  const lines: FormattedLine[] = [];\n  let line = '';\n  const text = withTimestamps ? rawText.substring(TIMESTAMP_LENGTH) : rawText;\n  const json: JSONLogs = JSON.parse(text);\n  const { time, level, caller, message, stack_trace: stackTrace } = json;\n  const keys = removeKnownKeys(Object.keys(json));\n  if (withTimestamps) {\n    const timestamp = rawText.substring(0, TIMESTAMP_LENGTH);\n    spans.push({ text: timestamp });\n    line += `${timestamp} `;\n  }\n  line += formatTime(time, spans, line);\n  line += formatLevel(level, spans, line);\n  line += formatCaller(caller, spans, line);\n  line += formatMessage(message, spans, line, !!keys.length);\n  keys.forEach((key, idx) => {\n    line += formatKeyValuePair(\n      key,\n      json[key],\n      spans,\n      line,\n      idx === keys.length - 1\n    );\n  });\n  lines.push({ line, spans });\n  formatStackTrace(stackTrace, lines);\n  return lines;\n}"
        },
        {
          "type": "function",
          "name": "%AM0$formatJSONLine",
          "label": "%AM0$formatJSONLine",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [line, json, spans, keys]\nkey = parameter1: unknown\nidx = parameter2: unknown\nline = %closures0.line\njson = %closures0.json\nspans = %closures0.spans\nkeys = %closures0.keys\nthis = this: @ts_files/140.ts: %dflt\n%0 = json.<@%unk/%unk: .key>\n%1 = keys.<@%unk/%unk: .length>\n%2 = %1 - 1\n%3 = idx === %2\nline = line + staticinvoke <@%unk/%unk: .formatKeyValuePair()>(key, %0, spans, line, %3)\nreturn",
              "start_line": 1,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(key, idx) => {\n    line += formatKeyValuePair(\n      key,\n      json[key],\n      spans,\n      line,\n      idx === keys.length - 1\n    );\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$formatJSONLine$0",
      "label": "%AC$%dflt$formatJSONLine$0",
      "start_line": 27,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ text: timestamp }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$formatJSONLine$1",
      "label": "%AC$%dflt$formatJSONLine$1",
      "start_line": 43,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ line, spans }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { without } from 'lodash';\nimport { FormattedLine, Span, JSONLogs, TIMESTAMP_LENGTH } from './types';\nimport {\n  formatCaller,\n  formatKeyValuePair,\n  formatLevel,\n  formatMessage,\n  formatStackTrace,\n  formatTime,\n} from './formatters';\nfunction removeKnownKeys(keys: string[]) {\n  return without(keys, 'time', 'level', 'caller', 'message', 'stack_trace');\n}\nexport function formatJSONLine(\n  rawText: string,\n  withTimestamps?: boolean\n): FormattedLine[] {\n  const spans: Span[] = [];\n  const lines: FormattedLine[] = [];\n  let line = '';\n  const text = withTimestamps ? rawText.substring(TIMESTAMP_LENGTH) : rawText;\n  const json: JSONLogs = JSON.parse(text);\n  const { time, level, caller, message, stack_trace: stackTrace } = json;\n  const keys = removeKnownKeys(Object.keys(json));\n  if (withTimestamps) {\n    const timestamp = rawText.substring(0, TIMESTAMP_LENGTH);\n    spans.push({ text: timestamp });\n    line += `${timestamp} `;\n  }\n  line += formatTime(time, spans, line);\n  line += formatLevel(level, spans, line);\n  line += formatCaller(caller, spans, line);\n  line += formatMessage(message, spans, line, !!keys.length);\n  keys.forEach((key, idx) => {\n    line += formatKeyValuePair(\n      key,\n      json[key],\n      spans,\n      line,\n      idx === keys.length - 1\n    );\n  });\n  lines.push({ line, spans });\n  formatStackTrace(stackTrace, lines);\n  return lines;\n}"
}