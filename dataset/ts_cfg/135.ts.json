{
  "type": "file",
  "name": "135.ts",
  "label": "135.ts",
  "start_line": -1,
  "end_line": 42,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 42,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\nPAGE_UNDER_TEST = 'kVi2Gex7z/test-variable-output'\nDASHBOARD_NAME = 'Test variable output'\nstaticinvoke <@%unk/%unk: .describe()>('Variables - Custom', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "fillInCustomVariable",
          "label": "fillInCustomVariable",
          "start_line": 1,
          "end_line": 4,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nlabel = parameter1: string\nvalue = parameter2: string\nthis = this: @ts_files/135.ts: %dflt\n%0 = e2e.<@%unk/%unk: .pages>\n%1 = %0.<@%unk/%unk: .Dashboard>\n%2 = %1.<@%unk/%unk: .Settings>\n%3 = %2.<@%unk/%unk: .Variables>\n%4 = %3.<@%unk/%unk: .Edit>\n%5 = %4.<@%unk/%unk: .General>\n%6 = instanceinvoke %5.<@%unk/%unk: .generalTypeSelectV2()>()\ninstanceinvoke %6.<@%unk/%unk: .within()>(%AM5$fillInCustomVariable)\n%7 = e2e.<@%unk/%unk: .pages>\n%8 = %7.<@%unk/%unk: .Dashboard>\n%9 = %8.<@%unk/%unk: .Settings>\n%10 = %9.<@%unk/%unk: .Variables>\n%11 = %10.<@%unk/%unk: .Edit>\n%12 = %11.<@%unk/%unk: .General>\n%13 = instanceinvoke %12.<@%unk/%unk: .generalNameInputV2()>()\n%14 = instanceinvoke %13.<@%unk/%unk: .clear()>()\n%15 = instanceinvoke %14.<@%unk/%unk: .type()>(name)\ninstanceinvoke %15.<@%unk/%unk: .blur()>()\n%16 = e2e.<@%unk/%unk: .pages>\n%17 = %16.<@%unk/%unk: .Dashboard>\n%18 = %17.<@%unk/%unk: .Settings>\n%19 = %18.<@%unk/%unk: .Variables>\n%20 = %19.<@%unk/%unk: .Edit>\n%21 = %20.<@%unk/%unk: .General>\n%22 = instanceinvoke %21.<@%unk/%unk: .generalLabelInputV2()>()\n%23 = instanceinvoke %22.<@%unk/%unk: .type()>(label)\ninstanceinvoke %23.<@%unk/%unk: .blur()>()\n%24 = e2e.<@%unk/%unk: .pages>\n%25 = %24.<@%unk/%unk: .Dashboard>\n%26 = %25.<@%unk/%unk: .Settings>\n%27 = %26.<@%unk/%unk: .Variables>\n%28 = %27.<@%unk/%unk: .Edit>\n%29 = %28.<@%unk/%unk: .CustomVariable>\n%30 = instanceinvoke %29.<@%unk/%unk: .customValueInput()>()\n%31 = instanceinvoke %30.<@%unk/%unk: .type()>(value)\ninstanceinvoke %31.<@%unk/%unk: .blur()>()\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function fillInCustomVariable(name: string, label: string, value: string) {\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n    cy.get('input').type('Custom{enter}');\n  });\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalNameInputV2().clear().type(name).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalLabelInputV2().type(label).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.CustomVariable.customValueInput().type(value).blur();\n}"
        },
        {
          "type": "function",
          "name": "assertPreviewValues",
          "label": "assertPreviewValues",
          "start_line": 1,
          "end_line": 12,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "expectedValues = parameter0: string[]\nthis = this: @ts_files/135.ts: %dflt\n%0 = instanceinvoke expectedValues.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke %0.<@%unk/%unk: .next()>()\n%2 = %1.<@ES2015/BuiltinClass: IteratorResult.done>\nif %2 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = %1.<@ES2015/BuiltinClass: IteratorResult.value>\nexpected = <string>%3\nindex = instanceinvoke expectedValues.<@%unk/%unk: .indexOf()>(expected)\n%4 = e2e.<@%unk/%unk: .pages>\n%5 = %4.<@%unk/%unk: .Dashboard>\n%6 = %5.<@%unk/%unk: .Settings>\n%7 = %6.<@%unk/%unk: .Variables>\n%8 = %7.<@%unk/%unk: .Edit>\n%9 = %8.<@%unk/%unk: .General>\n%10 = instanceinvoke %9.<@%unk/%unk: .previewOfValuesOption()>()\n%11 = instanceinvoke %10.<@%unk/%unk: .eq()>(index)\ninstanceinvoke %11.<@%unk/%unk: .should()>('have.text', expected)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function assertPreviewValues(expectedValues: string[]) {\n  for (const expected of expectedValues) {\n    const index = expectedValues.indexOf(expected);\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.previewOfValuesOption().eq(index).should('have.text', expected);\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 19,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\n%0 = instanceinvoke Cypress.<@%unk/%unk: .env()>('USERNAME')\n%1 = instanceinvoke Cypress.<@%unk/%unk: .env()>('PASSWORD')\n%2 = e2e.<@%unk/%unk: .flows>\ninstanceinvoke %2.<@%unk/%unk: .login()>(%0, %1)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    e2e.flows.login(Cypress.env('USERNAME'), Cypress.env('PASSWORD'));\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\n%0 = new @ts_files/135.ts: %AC$%dflt$%AM2$%AM0$0\ninstanceinvoke %0.<@ts_files/135.ts: %AC$%dflt$%AM2$%AM0$0.constructor()>()\n%1 = e2e.<@%unk/%unk: .flows>\ninstanceinvoke %1.<@%unk/%unk: .openDashboard()>(%0)\n%2 = instanceinvoke cy.<@%unk/%unk: .contains()>(DASHBOARD_NAME)\ninstanceinvoke %2.<@%unk/%unk: .should()>('be.visible')\n%3 = e2e.<@%unk/%unk: .components>\n%4 = %3.<@%unk/%unk: .CallToActionCard>\n%5 = instanceinvoke %4.<@%unk/%unk: .buttonV2()>('Add variable')\ninstanceinvoke %5.<@%unk/%unk: .click()>()\nstaticinvoke <@ts_files/135.ts: %dflt.fillInCustomVariable(string, string, string)>('VariableUnderTest', 'Variable under test', 'one,two,three')\n%6 = newarray (string)[3]\n%6[0] = 'one'\n%6[1] = 'two'\n%6[2] = 'three'\nstaticinvoke <@ts_files/135.ts: %dflt.assertPreviewValues(string[])>(%6)\n%7 = e2e.<@%unk/%unk: .pages>\n%8 = %7.<@%unk/%unk: .Dashboard>\n%9 = %8.<@%unk/%unk: .Settings>\n%10 = %9.<@%unk/%unk: .Variables>\n%11 = %10.<@%unk/%unk: .Edit>\n%12 = %11.<@%unk/%unk: .General>\n%13 = instanceinvoke %12.<@%unk/%unk: .submitButton()>()\ninstanceinvoke %13.<@%unk/%unk: .click()>()\n%14 = e2e.<@%unk/%unk: .pages>\n%15 = %14.<@%unk/%unk: .Dashboard>\n%16 = %15.<@%unk/%unk: .Settings>\n%17 = %16.<@%unk/%unk: .Actions>\n%18 = instanceinvoke %17.<@%unk/%unk: .close()>()\ninstanceinvoke %18.<@%unk/%unk: .click()>()\n%19 = e2e.<@%unk/%unk: .pages>\n%20 = %19.<@%unk/%unk: .Dashboard>\n%21 = %20.<@%unk/%unk: .SubMenu>\n%22 = instanceinvoke %21.<@%unk/%unk: .submenuItemValueDropDownValueLinkTexts()>('one')\ninstanceinvoke %22.<@%unk/%unk: .click()>()\n%23 = e2e.<@%unk/%unk: .pages>\n%24 = %23.<@%unk/%unk: .Dashboard>\n%25 = %24.<@%unk/%unk: .SubMenu>\n%26 = instanceinvoke %25.<@%unk/%unk: .submenuItemValueDropDownOptionTexts()>('two')\ninstanceinvoke %26.<@%unk/%unk: .click()>()\n%27 = instanceinvoke cy.<@%unk/%unk: .get()>('.markdown-html')\ninstanceinvoke %27.<@%unk/%unk: .should()>('include.text', 'VariableUnderTest: two')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'one,two,three');\n    assertPreviewValues(['one', 'two', 'three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('one').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: two');\n  }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM3$%AM0",
          "label": "%AM4$%AM3$%AM0",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\n%0 = instanceinvoke cy.<@%unk/%unk: .get()>('input')\ninstanceinvoke %0.<@%unk/%unk: .type()>('Custom{enter}')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      cy.get('input').type('Custom{enter}');\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\n%0 = new @ts_files/135.ts: %AC$%dflt$%AM3$%AM0$1\ninstanceinvoke %0.<@ts_files/135.ts: %AC$%dflt$%AM3$%AM0$1.constructor()>()\n%1 = e2e.<@%unk/%unk: .flows>\ninstanceinvoke %1.<@%unk/%unk: .openDashboard()>(%0)\n%2 = instanceinvoke cy.<@%unk/%unk: .contains()>(DASHBOARD_NAME)\ninstanceinvoke %2.<@%unk/%unk: .should()>('be.visible')\n%3 = e2e.<@%unk/%unk: .components>\n%4 = %3.<@%unk/%unk: .CallToActionCard>\n%5 = instanceinvoke %4.<@%unk/%unk: .buttonV2()>('Add variable')\ninstanceinvoke %5.<@%unk/%unk: .click()>()\n%6 = e2e.<@%unk/%unk: .pages>\n%7 = %6.<@%unk/%unk: .Dashboard>\n%8 = %7.<@%unk/%unk: .Settings>\n%9 = %8.<@%unk/%unk: .Variables>\n%10 = %9.<@%unk/%unk: .Edit>\n%11 = %10.<@%unk/%unk: .General>\n%12 = instanceinvoke %11.<@%unk/%unk: .generalTypeSelectV2()>()\ninstanceinvoke %12.<@%unk/%unk: .within()>(%AM4$%AM3$%AM0)\nstaticinvoke <@ts_files/135.ts: %dflt.fillInCustomVariable(string, string, string)>('VariableUnderTest', 'Variable under test', 'One : 1,Two : 2, Three : 3')\n%13 = newarray (string)[3]\n%13[0] = 'One'\n%13[1] = 'Two'\n%13[2] = 'Three'\nstaticinvoke <@ts_files/135.ts: %dflt.assertPreviewValues(string[])>(%13)\n%14 = e2e.<@%unk/%unk: .pages>\n%15 = %14.<@%unk/%unk: .Dashboard>\n%16 = %15.<@%unk/%unk: .Settings>\n%17 = %16.<@%unk/%unk: .Variables>\n%18 = %17.<@%unk/%unk: .Edit>\n%19 = %18.<@%unk/%unk: .General>\n%20 = instanceinvoke %19.<@%unk/%unk: .submitButton()>()\ninstanceinvoke %20.<@%unk/%unk: .click()>()\n%21 = e2e.<@%unk/%unk: .pages>\n%22 = %21.<@%unk/%unk: .Dashboard>\n%23 = %22.<@%unk/%unk: .Settings>\n%24 = %23.<@%unk/%unk: .Actions>\n%25 = instanceinvoke %24.<@%unk/%unk: .close()>()\ninstanceinvoke %25.<@%unk/%unk: .click()>()\n%26 = e2e.<@%unk/%unk: .pages>\n%27 = %26.<@%unk/%unk: .Dashboard>\n%28 = %27.<@%unk/%unk: .SubMenu>\n%29 = instanceinvoke %28.<@%unk/%unk: .submenuItemValueDropDownValueLinkTexts()>('One')\ninstanceinvoke %29.<@%unk/%unk: .click()>()\n%30 = e2e.<@%unk/%unk: .pages>\n%31 = %30.<@%unk/%unk: .Dashboard>\n%32 = %31.<@%unk/%unk: .SubMenu>\n%33 = instanceinvoke %32.<@%unk/%unk: .submenuItemValueDropDownOptionTexts()>('Two')\ninstanceinvoke %33.<@%unk/%unk: .click()>()\n%34 = instanceinvoke cy.<@%unk/%unk: .get()>('.markdown-html')\ninstanceinvoke %34.<@%unk/%unk: .should()>('include.text', 'VariableUnderTest: 2')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n      cy.get('input').type('Custom{enter}');\n    });\n    // Set its name, label, and content\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'One : 1,Two : 2, Three : 3');\n    assertPreviewValues(['One', 'Two', 'Three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('One').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('Two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: 2');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 18,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('can add a custom template variable', %AM2$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('can add a custom template variable with labels', %AM3$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  beforeEach(() => {\n    e2e.flows.login(Cypress.env('USERNAME'), Cypress.env('PASSWORD'));\n  });\n  it('can add a custom template variable', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'one,two,three');\n    assertPreviewValues(['one', 'two', 'three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('one').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: two');\n  });\n  it('can add a custom template variable with labels', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n      cy.get('input').type('Custom{enter}');\n    });\n    // Set its name, label, and content\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'One : 1,Two : 2, Three : 3');\n    assertPreviewValues(['One', 'Two', 'Three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('One').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('Two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: 2');\n  });\n}"
        },
        {
          "type": "function",
          "name": "%AM5$fillInCustomVariable",
          "label": "%AM5$fillInCustomVariable",
          "start_line": 1,
          "end_line": 5,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/135.ts: %dflt\n%0 = instanceinvoke cy.<@%unk/%unk: .get()>('input')\ninstanceinvoke %0.<@%unk/%unk: .type()>('Custom{enter}')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    cy.get('input').type('Custom{enter}');\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%AM0$0",
      "label": "%AC$%dflt$%AM2$%AM0$0",
      "start_line": 23,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$%AM0$1",
      "label": "%AC$%dflt$%AM3$%AM0$1",
      "start_line": 38,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { e2e } from '../utils';\nconst PAGE_UNDER_TEST = 'kVi2Gex7z/test-variable-output';\nconst DASHBOARD_NAME = 'Test variable output';\nfunction fillInCustomVariable(name: string, label: string, value: string) {\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n    cy.get('input').type('Custom{enter}');\n  });\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalNameInputV2().clear().type(name).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalLabelInputV2().type(label).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.CustomVariable.customValueInput().type(value).blur();\n}\nfunction assertPreviewValues(expectedValues: string[]) {\n  for (const expected of expectedValues) {\n    const index = expectedValues.indexOf(expected);\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.previewOfValuesOption().eq(index).should('have.text', expected);\n  }\n}\ndescribe('Variables - Custom', () => {\n  beforeEach(() => {\n    e2e.flows.login(Cypress.env('USERNAME'), Cypress.env('PASSWORD'));\n  });\n  it('can add a custom template variable', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'one,two,three');\n    assertPreviewValues(['one', 'two', 'three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('one').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: two');\n  });\n  it('can add a custom template variable with labels', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n      cy.get('input').type('Custom{enter}');\n    });\n    // Set its name, label, and content\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'One : 1,Two : 2, Three : 3');\n    assertPreviewValues(['One', 'Two', 'Three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('One').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('Two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: 2');\n  });\n});"
}