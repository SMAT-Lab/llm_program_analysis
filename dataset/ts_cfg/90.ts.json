{
  "type": "file",
  "name": "90.ts",
  "label": "90.ts",
  "start_line": -1,
  "end_line": 62,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 62,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 62,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/90.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "DateTimeUtil",
      "label": "DateTimeUtil",
      "start_line": 1,
      "end_line": 61,
      "functions": [
        {
          "type": "function",
          "name": "getTime",
          "label": "getTime",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/90.ts: DateTimeUtil\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>()\nDATETIME = %0\n%1 = instanceinvoke DATETIME.<@%unk/%unk: .getHours()>()\n%2 = instanceinvoke DATETIME.<@%unk/%unk: .getMinutes()>()\n%3 = instanceinvoke DATETIME.<@%unk/%unk: .getSeconds()>()\n%4 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.concatTime(number, number, number)>(%1, %2, %3)\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getTime() {\n    const DATETIME = new Date()\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds())\n  }"
        },
        {
          "type": "function",
          "name": "getDate",
          "label": "getDate",
          "start_line": 1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/90.ts: DateTimeUtil\n%0 = new @%unk/%unk: Date\ninstanceinvoke %0.<@%unk/%unk: Date.constructor()>()\nDATETIME = %0\n%1 = instanceinvoke DATETIME.<@%unk/%unk: .getFullYear()>()\n%2 = instanceinvoke DATETIME.<@%unk/%unk: .getMonth()>()\n%3 = %2 + 1\n%4 = instanceinvoke DATETIME.<@%unk/%unk: .getDate()>()\n%5 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.concatDate(number, number, number)>(%1, %3, %4)\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getDate() {\n    const DATETIME = new Date()\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate())\n  }"
        },
        {
          "type": "function",
          "name": "fill",
          "label": "fill",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: number\nthis = this: @ts_files/90.ts: DateTimeUtil\nif value > 9",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = ''",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = %0 + value\nreturn %1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = '0'",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "fill(value: number) {\n    return (value > 9 ? '' : '0') + value\n  }"
        },
        {
          "type": "function",
          "name": "concatDate",
          "label": "concatDate",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "year = parameter0: number\nmonth = parameter1: number\ndate = parameter2: number\nthis = this: @ts_files/90.ts: DateTimeUtil\n%0 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.fill(number)>(month)\n%1 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.fill(number)>(date)\n%2 = year + %0\n%3 = %2 + %1\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "concatDate(year: number, month: number, date: number) {\n    return `${year}${this.fill(month)}${this.fill(date)}`\n  }"
        },
        {
          "type": "function",
          "name": "concatTime",
          "label": "concatTime",
          "start_line": 1,
          "end_line": 61,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "hours = parameter0: number\nminutes = parameter1: number\nseconds = parameter2: number\nthis = this: @ts_files/90.ts: DateTimeUtil\n%0 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.fill(number)>(hours)\n%1 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.fill(number)>(minutes)\n%2 = instanceinvoke this.<@ts_files/90.ts: DateTimeUtil.fill(number)>(seconds)\n%3 = %0 + %1\n%4 = %3 + %2\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "concatTime(hours: number, minutes: number, seconds: number) {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class DateTimeUtil {\n\n  /**\n   * 时分秒\n   */\n  getTime() {\n    const DATETIME = new Date()\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds())\n  }\n\n  /**\n   * 年月日\n   */\n  getDate() {\n    const DATETIME = new Date()\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate())\n  }\n\n  /**\n   * 日期不足两位补充0\n   * @param value-数据值\n   */\n  fill(value: number) {\n    return (value > 9 ? '' : '0') + value\n  }\n\n  /**\n   * 年月日格式修饰\n   * @param year\n   * @param month\n   * @param date\n   */\n  concatDate(year: number, month: number, date: number) {\n    return `${year}${this.fill(month)}${this.fill(date)}`\n  }\n\n  /**\n   * 时分秒格式修饰\n   * @param hours\n   * @param minutes\n   * @param seconds\n   */\n  concatTime(hours: number, minutes: number, seconds: number) {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file 日期工具\n */\nexport default class DateTimeUtil {\n\n  /**\n   * 时分秒\n   */\n  getTime() {\n    const DATETIME = new Date()\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds())\n  }\n\n  /**\n   * 年月日\n   */\n  getDate() {\n    const DATETIME = new Date()\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate())\n  }\n\n  /**\n   * 日期不足两位补充0\n   * @param value-数据值\n   */\n  fill(value: number) {\n    return (value > 9 ? '' : '0') + value\n  }\n\n  /**\n   * 年月日格式修饰\n   * @param year\n   * @param month\n   * @param date\n   */\n  concatDate(year: number, month: number, date: number) {\n    return `${year}${this.fill(month)}${this.fill(date)}`\n  }\n\n  /**\n   * 时分秒格式修饰\n   * @param hours\n   * @param minutes\n   * @param seconds\n   */\n  concatTime(hours: number, minutes: number, seconds: number) {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`\n  }\n}"
}