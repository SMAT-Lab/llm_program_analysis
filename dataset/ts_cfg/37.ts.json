{
  "type": "file",
  "name": "37.ts",
  "label": "37.ts",
  "start_line": -1,
  "end_line": 98,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 43,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/37.ts: %dflt\nTAG = 'ItemDataSource'\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "LazyItem",
      "label": "LazyItem",
      "start_line": 1,
      "end_line": 46,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/37.ts: LazyItem.%instInit()>()\nitem = parameter0: T\nindex = parameter1: number\nonItemUpdate = parameter2: Function\nthis = this: @ts_files/37.ts: LazyItem\nthis.<@ts_files/37.ts: LazyItem.item> = item\nthis.<@ts_files/37.ts: LazyItem.onItemUpdate> = onItemUpdate\nthis.<@ts_files/37.ts: LazyItem.index> = index\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }"
        },
        {
          "type": "function",
          "name": "update",
          "label": "update",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "item = parameter0: T\nthis = this: @ts_files/37.ts: LazyItem\n%0 = this.<@ts_files/37.ts: LazyItem.onItemUpdate>\n%1 = %0 != null\n%2 = this.<@ts_files/37.ts: LazyItem.index>\n%3 = -1\n%4 = %2 !== %3\n%5 = %1 && %4\nif %5 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%6 = this.<@ts_files/37.ts: LazyItem.index>\ninstanceinvoke this.<@%unk/%unk: .onItemUpdate()>(%6, item)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 39,
                      "end_line": 43,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "update(item: T): void {\n    if (this.onItemUpdate != null && this.index !== -1) {\n      this.onItemUpdate(this.index, item);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getHashCode",
          "label": "getHashCode",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/37.ts: LazyItem\n%0 = this.<@ts_files/37.ts: LazyItem.index>\n%1 = %0 + ''\n%2 = this.<@ts_files/37.ts: LazyItem.item>\n%3 = instanceinvoke %2.<@%unk/%unk: .getHashCode()>()\n%4 = %1 + %3\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getHashCode(): string {\n    // @ts-ignore\n    return this.index + '' + this.item.getHashCode();\n  }"
        },
        {
          "type": "function",
          "name": "get",
          "label": "get",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/37.ts: LazyItem\n%0 = this.<@ts_files/37.ts: LazyItem.item>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "get(): T {\n    return this.item;\n  }"
        },
        {
          "type": "function",
          "name": "set",
          "label": "set",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "item = parameter0: T\nthis = this: @ts_files/37.ts: LazyItem\nthis.<@ts_files/37.ts: LazyItem.item> = item\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "set(item: T): void {\n    this.item = item;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class LazyItem<T> {\n  item: T;\n  onItemUpdate: Function;\n  index: number = -1;\n\n  constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }\n\n  update(item: T): void {\n    if (this.onItemUpdate != null && this.index !== -1) {\n      this.onItemUpdate(this.index, item);\n    }\n  }\n\n  getHashCode(): string {\n    // @ts-ignore\n    return this.index + '' + this.item.getHashCode();\n  }\n\n  get(): T {\n    return this.item;\n  }\n\n  set(item: T): void {\n    this.item = item;\n  }\n}"
    },
    {
      "type": "class",
      "name": "ItemDataSource",
      "label": "ItemDataSource",
      "start_line": 0,
      "end_line": 98,
      "functions": [
        {
          "type": "function",
          "name": "totalCount",
          "label": "totalCount",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract totalCount(): number;"
        },
        {
          "type": "function",
          "name": "getData",
          "label": "getData",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract getData(index: number): Object;"
        },
        {
          "type": "function",
          "name": "isSelect",
          "label": "isSelect",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract isSelect(): boolean;"
        },
        {
          "type": "function",
          "name": "getSelectedCount",
          "label": "getSelectedCount",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract getSelectedCount(): number;"
        },
        {
          "type": "function",
          "name": "getSelectedItems",
          "label": "getSelectedItems",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract getSelectedItems(): Object[];"
        },
        {
          "type": "function",
          "name": "getSelectedUris",
          "label": "getSelectedUris",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract getSelectedUris(): string[];"
        },
        {
          "type": "function",
          "name": "dataRemove",
          "label": "dataRemove",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "abstract dataRemove(): void;"
        },
        {
          "type": "function",
          "name": "registerDataChangeListener",
          "label": "registerDataChangeListener",
          "start_line": 1,
          "end_line": 68,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "listener = parameter0: DataChangeListener\nthis = this: @ts_files/37.ts: ItemDataSource\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'registerDataChangeListener')\n%0 = this.<@ts_files/37.ts: ItemDataSource.listeners>\n%1 = instanceinvoke %0.<@%unk/%unk: .indexOf()>(listener)\nif %1 < 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/37.ts: ItemDataSource.listeners>\ninstanceinvoke %2.<@%unk/%unk: .push()>(listener)\n%3 = this.<@ts_files/37.ts: ItemDataSource.listeners>\n%4 = %3.<@%unk/%unk: .length>\n%5 = 'registerDataChangeListener, add listener, length: ' + %4\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %5)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 39,
                      "end_line": 43,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "registerDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'registerDataChangeListener');\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener);\n      Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "unregisterDataChangeListener",
          "label": "unregisterDataChangeListener",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "listener = parameter0: DataChangeListener\nthis = this: @ts_files/37.ts: ItemDataSource\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'unregisterDataChangeListener')\n%0 = this.<@ts_files/37.ts: ItemDataSource.listeners>\npos = instanceinvoke %0.<@%unk/%unk: .indexOf()>(listener)\nif pos >= 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/37.ts: ItemDataSource.listeners>\ninstanceinvoke %1.<@%unk/%unk: .splice()>(pos, 1)\n%2 = this.<@ts_files/37.ts: ItemDataSource.listeners>\n%3 = %2.<@%unk/%unk: .length>\n%4 = 'registerDataChangeListener, remove listener, length: ' + %3\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 39,
                      "end_line": 43,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1);\n      Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "notifyDataChange",
          "label": "notifyDataChange",
          "start_line": 1,
          "end_line": 85,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/37.ts: ItemDataSource\n%0 = this.<@ts_files/37.ts: ItemDataSource.listeners>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM0$notifyDataChange)\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "notifyDataChange(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    })\n  }"
        },
        {
          "type": "function",
          "name": "notifyDataReload",
          "label": "notifyDataReload",
          "start_line": 1,
          "end_line": 91,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/37.ts: ItemDataSource\n%0 = this.<@ts_files/37.ts: ItemDataSource.listeners>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM1$notifyDataReload)\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "notifyDataReload(): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    })\n  }"
        },
        {
          "type": "function",
          "name": "notifyDataDelete",
          "label": "notifyDataDelete",
          "start_line": 1,
          "end_line": 97,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/37.ts: ItemDataSource\n%0 = this.<@ts_files/37.ts: ItemDataSource.listeners>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM2$notifyDataDelete)\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "notifyDataDelete(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    })\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$notifyDataChange",
          "label": "%AM0$notifyDataChange",
          "start_line": 1,
          "end_line": 86,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [index]\nlistener = parameter1: any\nindex = %closures0.index\nthis = this: @ts_files/37.ts: ItemDataSource\ninstanceinvoke listener.<@%unk/%unk: .onDataChange()>(index)\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$notifyDataReload",
          "label": "%AM1$notifyDataReload",
          "start_line": 1,
          "end_line": 92,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "listener = parameter0: any\nthis = this: @ts_files/37.ts: ItemDataSource\ninstanceinvoke listener.<@%unk/%unk: .onDataReloaded()>()\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    }"
        },
        {
          "type": "function",
          "name": "%AM2$notifyDataDelete",
          "label": "%AM2$notifyDataDelete",
          "start_line": 1,
          "end_line": 98,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [index]\nlistener = parameter1: any\nindex = %closures0.index\nthis = this: @ts_files/37.ts: ItemDataSource\ninstanceinvoke listener.<@%unk/%unk: .onDataDelete()>(index)\nreturn",
              "start_line": 1,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export abstract class ItemDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n\n  abstract totalCount(): number;\n\n  abstract getData(index: number): Object;\n\n  abstract isSelect(): boolean;\n\n  abstract getSelectedCount(): number;\n\n  abstract getSelectedItems(): Object[];\n\n  abstract getSelectedUris(): string[];\n\n  abstract dataRemove(): void;\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'registerDataChangeListener');\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener);\n      Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);\n    }\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1);\n      Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);\n    }\n  }\n\n  notifyDataChange(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    })\n  }\n\n  notifyDataReload(): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    })\n  }\n\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    })\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\n\nconst TAG = 'ItemDataSource'\n\nexport class LazyItem<T> {\n  item: T;\n  onItemUpdate: Function;\n  index: number = -1;\n\n  constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }\n\n  update(item: T): void {\n    if (this.onItemUpdate != null && this.index !== -1) {\n      this.onItemUpdate(this.index, item);\n    }\n  }\n\n  getHashCode(): string {\n    // @ts-ignore\n    return this.index + '' + this.item.getHashCode();\n  }\n\n  get(): T {\n    return this.item;\n  }\n\n  set(item: T): void {\n    this.item = item;\n  }\n}\n\nexport abstract class ItemDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n\n  abstract totalCount(): number;\n\n  abstract getData(index: number): Object;\n\n  abstract isSelect(): boolean;\n\n  abstract getSelectedCount(): number;\n\n  abstract getSelectedItems(): Object[];\n\n  abstract getSelectedUris(): string[];\n\n  abstract dataRemove(): void;\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'registerDataChangeListener');\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener);\n      Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);\n    }\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1);\n      Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);\n    }\n  }\n\n  notifyDataChange(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    })\n  }\n\n  notifyDataReload(): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    })\n  }\n\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    })\n  }\n}\n"
}