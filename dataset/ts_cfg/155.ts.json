{
  "type": "file",
  "name": "155.ts",
  "label": "155.ts",
  "start_line": -1,
  "end_line": 24,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 24,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/155.ts: %dflt\n%0 = <any>Observable.<@ts_files/155.ts: Observable.prototype>\n%0.<@%unk/%unk: .map> = %AM0\nx = undefined\ny = instanceinvoke x.<@%unk/%unk: .map()>(%AM1)\n%1 = Observable.<@ts_files/155.ts: Observable.someValue>\nz1 = instanceinvoke %1.<@%unk/%unk: .toFixed()>()\n%2 = Observable.<@ts_files/155.ts: Observable.someAnotherValue>\nz2 = instanceinvoke %2.<@%unk/%unk: .toLowerCase()>()\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 4,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/155.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function() { }"
        },
        {
          "type": "function",
          "name": "%AM1",
          "label": "%AM1",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "x = parameter0: unknown\nthis = this: @ts_files/155.ts: %dflt\n%0 = x + 1\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "x => x + 1"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "Observable",
      "label": "Observable",
      "start_line": 0,
      "end_line": 14,
      "functions": [
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(e:T) => boolean"
        },
        {
          "type": "function",
          "name": "filter",
          "label": "filter",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "filter(pred: (e:T) => boolean): Observable<T>;"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export declare class Observable<T> {\n    filter(pred: (e:T) => boolean): Observable<T>;\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// @module: commonjs\n// @filename: map.ts\nimport { Observable } from \"./observable\"\n(<any>Observable.prototype).map = function() { }\ndeclare module \"./observable\" {\n    interface Observable<T> {\n        map<U>(proj: (e:T) => U): Observable<U>\n    }\n    namespace Observable {\n        let someAnotherValue: string;\n    }\n}\n// @filename: observable.ts\nexport declare class Observable<T> {\n    filter(pred: (e:T) => boolean): Observable<T>;\n}\nexport namespace Observable {\n    export let someValue: number;\n}\n// @filename: main.ts\nimport { Observable } from \"./observable\"\nimport \"./map\";\nlet x: Observable<number>;\nlet y = x.map(x => x + 1);\nlet z1 = Observable.someValue.toFixed();\nlet z2 = Observable.someAnotherValue.toLowerCase();"
}