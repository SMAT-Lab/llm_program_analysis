{
  "type": "file",
  "name": "99.ts",
  "label": "99.ts",
  "start_line": -1,
  "end_line": 84,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 82,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/99.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "BaseSettingsController",
      "label": "BaseSettingsController",
      "start_line": 0,
      "end_line": 82,
      "functions": [
        {
          "type": "function",
          "name": "bindComponent",
          "label": "bindComponent",
          "start_line": 1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "component = parameter0: any\nthis = this: @ts_files/99.ts: BaseSettingsController\nthis.<@ts_files/99.ts: BaseSettingsController.getComponent> = %AM1$bindComponent\n%0 = instanceinvoke this.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = instanceinvoke %0.<@%unk/%unk: .next()>()\n%2 = %1.<@ES2015/BuiltinClass: IteratorResult.done>\nif %2 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%3 = %1.<@ES2015/BuiltinClass: IteratorResult.value>\nkey = <any>%3\nif undefined != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = component.<@%unk/%unk: .key>\nthis.<@ts_files/99.ts: BaseSettingsController.key> = %4",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return this",
                      "start_line": 38,
                      "end_line": 71,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;\n\n    // set default property values by component\n    for (let key in this) {\n      if (key in component) {\n        this[key] = component[key];\n      }\n    }\n\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "bindProperties",
          "label": "bindProperties",
          "start_line": 1,
          "end_line": 47,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "componentProperties = parameter0: string[]\ncontrollerProperties = parameter1: string[]\nthis = this: @ts_files/99.ts: BaseSettingsController\ni = 0",
              "start_line": 1,
              "end_line": 47,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = componentProperties.<@%unk/%unk: .length>\nif i < %0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return this",
                      "start_line": 38,
                      "end_line": 71,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = componentProperties[i]\nif controllerProperties != 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%2 = controllerProperties[i]",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke this.<@ts_files/99.ts: BaseSettingsController.defineBoundProperty(string, string)>(%1, %2)\ni = i + 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%2 = componentProperties[i]",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {\n    for (let i = 0; i < componentProperties.length; i++) {\n      this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);\n    }\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "initData",
          "label": "initData",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/99.ts: BaseSettingsController\nreturn this",
              "start_line": 1,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "initData(): ISettingsController {\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "subscribe",
          "label": "subscribe",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/99.ts: BaseSettingsController\nreturn this",
              "start_line": 1,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "subscribe(): ISettingsController {\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "unsubscribe",
          "label": "unsubscribe",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/99.ts: BaseSettingsController\nreturn this",
              "start_line": 1,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "unsubscribe(): ISettingsController {\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "defineBoundProperty",
          "label": "defineBoundProperty",
          "start_line": 1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "componentProperty = parameter0: string\ncontrollerProperty = parameter1: string\nthis = this: @ts_files/99.ts: BaseSettingsController\n__v = this.<@ts_files/99.ts: BaseSettingsController.controllerProperty>\n%0 = new @ts_files/99.ts: %AC$BaseSettingsController$defineBoundProperty$0\ninstanceinvoke %0.<@ts_files/99.ts: %AC$BaseSettingsController$defineBoundProperty$0.constructor()>()\ninstanceinvoke Object.<@%unk/%unk: .defineProperty()>(this, controllerProperty, %0)\nreturn",
              "start_line": 1,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\n    let __v = this[controllerProperty];\n\n    Object.defineProperty(this, controllerProperty, {\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    });\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "() => any"
        },
        {
          "type": "function",
          "name": "%AM1$bindComponent",
          "label": "%AM1$bindComponent",
          "start_line": 1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [component]\ncomponent = %closures0.component\nthis = this: @ts_files/99.ts: BaseSettingsController\nreturn component",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => component"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default abstract class BaseSettingsController implements ISettingsController {\n  protected getComponent: () => any;\n\n  /**\n   * Bind component.\n   */\n  bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;\n\n    // set default property values by component\n    for (let key in this) {\n      if (key in component) {\n        this[key] = component[key];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Bind component's properties, note that only basic types can be transported.\n   * Type like Resource may meet unexpected error.\n   * If you want to transport resource string or color, ets. AppStorage is suggested @StorageLink.\n   */\n  bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {\n    for (let i = 0; i < componentProperties.length; i++) {\n      this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Initialize data.\n   */\n  initData(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Subscribe listeners.\n   */\n  subscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Unsubscribe listeners.\n   */\n  unsubscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Define bound properties.\n   */\n  private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\n    let __v = this[controllerProperty];\n\n    Object.defineProperty(this, controllerProperty, {\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    });\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$BaseSettingsController$defineBoundProperty$0",
      "label": "%AC$BaseSettingsController$defineBoundProperty$0",
      "start_line": 1,
      "end_line": 84,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/99.ts: BaseSettingsController\nreturn __v",
              "start_line": 1,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function () {\n        return __v;\n      }"
        },
        {
          "type": "function",
          "name": "%AM1$%instInit",
          "label": "%AM1$%instInit",
          "start_line": 1,
          "end_line": 84,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: unknown\nthis = this: @ts_files/99.ts: BaseSettingsController\n__v = value\n%0 = instanceinvoke this.<@%unk/%unk: .getComponent()>()\n%0.<@%unk/%unk: .componentProperty> = value\nreturn",
              "start_line": 1,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ISettingsController from './ISettingsController'\n\n/**\n * BaseSettingsController Of Wifi test\n */\n\nexport default abstract class BaseSettingsController implements ISettingsController {\n  protected getComponent: () => any;\n\n  /**\n   * Bind component.\n   */\n  bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;\n\n    // set default property values by component\n    for (let key in this) {\n      if (key in component) {\n        this[key] = component[key];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Bind component's properties, note that only basic types can be transported.\n   * Type like Resource may meet unexpected error.\n   * If you want to transport resource string or color, ets. AppStorage is suggested @StorageLink.\n   */\n  bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {\n    for (let i = 0; i < componentProperties.length; i++) {\n      this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Initialize data.\n   */\n  initData(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Subscribe listeners.\n   */\n  subscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Unsubscribe listeners.\n   */\n  unsubscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Define bound properties.\n   */\n  private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\n    let __v = this[controllerProperty];\n\n    Object.defineProperty(this, controllerProperty, {\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    });\n  }\n}"
}