{
  "type": "file",
  "name": "71.ts",
  "label": "71.ts",
  "start_line": -1,
  "end_line": 44,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 44,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/71.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 44,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "getThumbnail",
          "label": "getThumbnail",
          "start_line": 1,
          "end_line": 20,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mediaItem = parameter0: UserFileDataItem\nisCurrent = parameter1: boolean\nthis = this: @ts_files/71.ts: %dflt\n%0 = instanceinvoke mediaItem.<@%unk/%unk: .load()>(true)\n%1 = await %0\nimgWidth = mediaItem.<@%unk/%unk: .width>\nimgHeight = mediaItem.<@%unk/%unk: .height>\nscale = staticinvoke <@ts_files/71.ts: %dflt.generateSampleSize(number, number, boolean)>(imgWidth, imgHeight, isCurrent)\n%2 = mediaItem.<@%unk/%unk: .width>\n%3 = %2 / scale\n%4 = instanceinvoke Math.<@%unk/%unk: .ceil()>(%3)\nmediaItem.<@%unk/%unk: .imgWidth> = %4\n%5 = mediaItem.<@%unk/%unk: .height>\n%6 = %5 / scale\n%7 = instanceinvoke Math.<@%unk/%unk: .ceil()>(%6)\nmediaItem.<@%unk/%unk: .imgHeight> = %7\n%8 = imgWidth / scale\nimgWidth = instanceinvoke Math.<@%unk/%unk: .ceil()>(%8)\n%9 = imgHeight / scale\nimgHeight = instanceinvoke Math.<@%unk/%unk: .ceil()>(%9)\n%10 = instanceinvoke mediaItem.<@%unk/%unk: .getThumbnail()>(imgWidth, imgHeight)\nreturn await %10",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean): Promise<PixelMap> {\n  await mediaItem.load(true);\n  let imgWidth = mediaItem.width;\n  let imgHeight = mediaItem.height;\n  let scale = generateSampleSize(imgWidth, imgHeight, isCurrent);\n  mediaItem.imgWidth = Math.ceil(mediaItem.width / scale);\n  mediaItem.imgHeight = Math.ceil(mediaItem.height / scale);\n  imgWidth = Math.ceil(imgWidth / scale);\n  imgHeight = Math.ceil(imgHeight / scale);\n  return await mediaItem.getThumbnail(imgWidth, imgHeight);\n}"
        },
        {
          "type": "function",
          "name": "generateSampleSize",
          "label": "generateSampleSize",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%4 = 2 * width\nmaxNumOfPixels = %4 * height",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "minSide = instanceinvoke Math.<@%unk/%unk: .min()>(width, height)\n%5 = staticinvoke <@%unk/%unk: .computeSampleSize()>(imageWidth, imageHeight, minSide, maxNumOfPixels)\nreturn %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": []
                }
              ]
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "maxNumOfPixels = width * height",
              "start_line": 41,
              "end_line": 41,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "imageWidth = parameter0: number\nimageHeight = parameter1: number\nisCurrent = parameter2: boolean\nthis = this: @ts_files/71.ts: %dflt\n%0 = instanceinvoke screenManager.<@%unk/%unk: .getWinWidth()>()\nwidth = staticinvoke <@%unk/%unk: .vp2px()>(%0)\n%1 = instanceinvoke screenManager.<@%unk/%unk: .getWinHeight()>()\nheight = staticinvoke <@%unk/%unk: .vp2px()>(%1)\nif width === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "width = screenManager.<@%unk/%unk: .DEFAULT_WIDTH>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if height === 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "height = screenManager.<@%unk/%unk: .DEFAULT_HEIGHT>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "maxNumOfPixels = undefined\nif isCurrent != false",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "height = height",
                          "start_line": 36,
                          "end_line": 36,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "width = width",
                  "start_line": 35,
                  "end_line": 35,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function generateSampleSize(imageWidth: number, imageHeight: number, isCurrent: boolean): number {\n  let width = vp2px(screenManager.getWinWidth());\n  let height = vp2px(screenManager.getWinHeight());\n  width = width === 0 ? screenManager.DEFAULT_WIDTH : width;\n  height = height === 0 ? screenManager.DEFAULT_HEIGHT : height;\n  let maxNumOfPixels;\n  if (isCurrent) {\n    maxNumOfPixels = 2 * width * height;\n  } else {\n    maxNumOfPixels = width * height;\n  }\n  let minSide = Math.min(width, height);\n  return computeSampleSize(imageWidth, imageHeight, minSide, maxNumOfPixels);\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { screenManager } from '../common/ScreenManager';\nimport { computeSampleSize } from '../utils/ImageUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nexport async function getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean): Promise<PixelMap> {\n  await mediaItem.load(true);\n  let imgWidth = mediaItem.width;\n  let imgHeight = mediaItem.height;\n  let scale = generateSampleSize(imgWidth, imgHeight, isCurrent);\n  mediaItem.imgWidth = Math.ceil(mediaItem.width / scale);\n  mediaItem.imgHeight = Math.ceil(mediaItem.height / scale);\n  imgWidth = Math.ceil(imgWidth / scale);\n  imgHeight = Math.ceil(imgHeight / scale);\n  return await mediaItem.getThumbnail(imgWidth, imgHeight);\n}\n\nfunction generateSampleSize(imageWidth: number, imageHeight: number, isCurrent: boolean): number {\n  let width = vp2px(screenManager.getWinWidth());\n  let height = vp2px(screenManager.getWinHeight());\n  width = width === 0 ? screenManager.DEFAULT_WIDTH : width;\n  height = height === 0 ? screenManager.DEFAULT_HEIGHT : height;\n  let maxNumOfPixels;\n  if (isCurrent) {\n    maxNumOfPixels = 2 * width * height;\n  } else {\n    maxNumOfPixels = width * height;\n  }\n  let minSide = Math.min(width, height);\n  return computeSampleSize(imageWidth, imageHeight, minSide, maxNumOfPixels);\n}"
}