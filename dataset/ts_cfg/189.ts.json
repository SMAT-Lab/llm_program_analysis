{
  "type": "file",
  "name": "189.ts",
  "label": "189.ts",
  "start_line": -1,
  "end_line": 28,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 28,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/189.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 28,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "createJobFromFile",
          "label": "createJobFromFile",
          "start_line": 1,
          "end_line": 17,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "payload = parameter0: FileUploadPayload\nthis = this: @ts_files/189.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = new @ts_files/189.ts: %AC$%dflt$createJobFromFile$1\ninstanceinvoke %1.<@ts_files/189.ts: %AC$%dflt$createJobFromFile$1.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .buildUrl()>(%1)\n%3 = staticinvoke <@%unk/%unk: .json2formData()>(payload)\n%4 = new @ts_files/189.ts: %AC$%dflt$createJobFromFile$2\ninstanceinvoke %4.<@ts_files/189.ts: %AC$%dflt$createJobFromFile$2.constructor()>()\n%5 = instanceinvoke axios.<@%unk/%unk: .post()>(%2, %3, %4)\n%0 = await %5\ndata = %0.<@%unk/%unk: .data>\nreturn data",
                  "start_line": 1,
                  "end_line": 28,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "e = caughtexception: unknown\n%6 = <Error>e\nthrow staticinvoke <@%unk/%unk: .parseAxiosError()>(%6)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 28,
                  "end_line": 28,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function createJobFromFile(payload: FileUploadPayload) {\n  try {\n    const { data } = await axios.post<EdgeJob>(\n      buildUrl({ action: 'create/file' }),\n      json2formData(payload),\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n    return data;\n  } catch (e) {\n    throw parseAxiosError(e as Error);\n  }\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 9,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  Name: string;\n  CronExpression: string;\n  Recurring: boolean;\n  EdgeGroups: Array<EdgeGroup['Id']>;\n  Endpoints: Array<EnvironmentId>;\n  File: File;\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$createJobFromFile$1",
      "label": "%AC$%dflt$createJobFromFile$1",
      "start_line": 20,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ action: 'create/file' }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$createJobFromFile$2$%instInit$3",
      "label": "%AC$%AC$%dflt$createJobFromFile$2$%instInit$3",
      "start_line": 23,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n          'Content-Type': 'multipart/form-data',\n        }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$createJobFromFile$2",
      "label": "%AC$%dflt$createJobFromFile$2",
      "start_line": 22,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import axios, {\n  json2formData,\n  parseAxiosError,\n} from '@/portainer/services/axios';\nimport { EdgeGroup } from '@/react/edge/edge-groups/types';\nimport { EnvironmentId } from '@/react/portainer/environments/types';\nimport { EdgeJob } from '../../types';\nimport { buildUrl } from '../build-url';\nexport type FileUploadPayload = {\n  Name: string;\n  CronExpression: string;\n  Recurring: boolean;\n  EdgeGroups: Array<EdgeGroup['Id']>;\n  Endpoints: Array<EnvironmentId>;\n  File: File;\n};\nexport async function createJobFromFile(payload: FileUploadPayload) {\n  try {\n    const { data } = await axios.post<EdgeJob>(\n      buildUrl({ action: 'create/file' }),\n      json2formData(payload),\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n    return data;\n  } catch (e) {\n    throw parseAxiosError(e as Error);\n  }\n}"
}