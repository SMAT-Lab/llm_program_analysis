{
  "type": "file",
  "name": "21.ts",
  "label": "21.ts",
  "start_line": -1,
  "end_line": 127,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 120,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: %dflt\nTAG = 'RenameMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "RenameMenuOperation",
      "label": "RenameMenuOperation",
      "start_line": 1,
      "end_line": 127,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/21.ts: RenameMenuOperation\nthis.<@ts_files/21.ts: RenameMenuOperation.menuContext> = menuContext\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\n%0 = this.<@ts_files/21.ts: RenameMenuOperation.menuContext>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'menuContext is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 120,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/21.ts: RenameMenuOperation.menuContext>\n%2 = %1.<@%unk/%unk: .items>\nmediaItem = %2.<@%unk/%unk: .0>\nif mediaItem == null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'mediaItem is null, return')\nreturn",
                      "start_line": 1,
                      "end_line": 120,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/21.ts: RenameMenuOperation.confirmCallback> = %AM0$doAction\nthis.<@ts_files/21.ts: RenameMenuOperation.cancelCallback> = %AM1$doAction\nfileName = ''\n%3 = mediaItem.<@%unk/%unk: .title>\nif %3 != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "fileName = mediaItem.<@%unk/%unk: .title>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%7 = BroadcastConstants.<@%unk/%unk: .SHOW_RENAME_PHOTO_DIALOG>\n%8 = this.<@ts_files/21.ts: RenameMenuOperation.confirmCallback>\n%9 = this.<@ts_files/21.ts: RenameMenuOperation.cancelCallback>\n%10 = newarray (string|unknown)[3]\n%10[0] = fileName\n%10[1] = %8\n%10[2] = %9\n%11 = this.<@ts_files/21.ts: RenameMenuOperation.menuContext>\n%12 = %11.<@%unk/%unk: .broadCast>\ninstanceinvoke %12.<@%unk/%unk: .emit()>(%7, %10)\nreturn",
                              "start_line": 1,
                              "end_line": 120,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%4 = mediaItem.<@%unk/%unk: .displayName>\nif %4 != null",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = mediaItem.<@%unk/%unk: .displayName>\nindex = instanceinvoke %5.<@%unk/%unk: .lastIndexOf()>('.')\n%6 = mediaItem.<@%unk/%unk: .displayName>\nfileName = instanceinvoke %6.<@%unk/%unk: .substr()>(0, index)",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }"
        },
        {
          "type": "function",
          "name": "onCompleted",
          "label": "onCompleted",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Rename data succeed!')\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }"
        },
        {
          "type": "function",
          "name": "onError",
          "label": "onError",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, 'Rename data failed!')\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallback",
          "label": "confirmCallback",
          "start_line": 1,
          "end_line": 69,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "title = parameter0: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.confirmCallbackBindImpl(string)>(title)\nreturn await %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallbackBindImpl",
          "label": "confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "title = parameter0: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\n%0 = 'Rename confirm new name: ' + title\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/21.ts: RenameMenuOperation.menuContext>\n%2 = %1.<@%unk/%unk: .items>\n%3 = %2.<@%unk/%unk: .0>\nmediaItem = <UserFileDataItem>%3\nif mediaItem == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'mediaItem is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 120,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%4 = instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.hasSameNameAsset(UserFileDataItem, string)>(mediaItem, title)\nhasSameName = await %4\nif hasSameName != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'show find same file dialog')\n%5 = staticinvoke <@%unk/%unk: .$r()>('app.string.name_already_use')\n%6 = staticinvoke <@%unk/%unk: .getResourceString()>(%5)\ninstanceinvoke %6.<@%unk/%unk: .then()>(%AM2$confirmCallbackBindImpl)\nreturn",
                      "start_line": 1,
                      "end_line": 120,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%7 = instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.rename(UserFileDataItem, string)>(mediaItem, title)\nresult = await %7\n%8 = 'Rename confirm result: ' + result\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %8)\n%9 = Constants.<@%unk/%unk: .RENAME>\n%10 = newarray (unknown)[1]\n%10[0] = result\n%11 = this.<@ts_files/21.ts: RenameMenuOperation.menuContext>\n%12 = %11.<@%unk/%unk: .broadCast>\ninstanceinvoke %12.<@%unk/%unk: .emit()>(%9, %10)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 38,
                              "end_line": 120,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%13 = 'Rename error: ' + err\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %13)\n%14 = staticinvoke <@%unk/%unk: .$r()>('app.string.rename_failed')\n%15 = staticinvoke <@%unk/%unk: .getResourceString()>(%14)\ninstanceinvoke %15.<@%unk/%unk: .then()>(%AM3$confirmCallbackBindImpl)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }"
        },
        {
          "type": "function",
          "name": "rename",
          "label": "rename",
          "start_line": 1,
          "end_line": 102,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "item = parameter0: UserFileDataItem\nname = parameter1: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'renameSinglePhoto start')\n%0 = instanceinvoke item.<@%unk/%unk: .setName()>(name)\n%1 = await %0\n%2 = item.<@%unk/%unk: .title>\n%3 = item.<@%unk/%unk: .displayName>\n%4 = newarray (unknown)[2]\n%4[0] = %2\n%4[1] = %3\n%5 = <unknown[]>%4\nreturn %5",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }"
        },
        {
          "type": "function",
          "name": "hasSameNameAsset",
          "label": "hasSameNameAsset",
          "start_line": 1,
          "end_line": 108,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "item = parameter0: UserFileDataItem\nname = parameter1: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'hasSameNameAsset start')\n%0 = instanceinvoke item.<@%unk/%unk: .loadFileAsset()>()\nfileAsset = await %0\ndisplayName = fileAsset.<@%unk/%unk: .displayName>\nindex = instanceinvoke displayName.<@%unk/%unk: .lastIndexOf()>('.')\n%1 = instanceinvoke displayName.<@%unk/%unk: .slice()>(index)\ndisplayName = name + %1\n%2 = fileAsset.<@%unk/%unk: .uri>\n%3 = instanceinvoke userFileModel.<@%unk/%unk: .getMediaItemCountsByDisplayName()>(%2)\ncounts = await %3\nif counts === 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'hasSameNameAsset is false')\nreturn false",
                  "start_line": 1,
                  "end_line": 117,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'hasSameNameAsset true')\nreturn true",
                  "start_line": 1,
                  "end_line": 120,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallback",
          "label": "cancelCallback",
          "start_line": 1,
          "end_line": 123,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.cancelCallbackBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallbackBindImpl",
          "label": "cancelCallbackBindImpl",
          "start_line": 1,
          "end_line": 127,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Rename cancel')\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$doAction",
          "label": "%AM0$doAction",
          "start_line": 1,
          "end_line": 47,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "title = parameter0: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.confirmCallbackBindImpl(string)>(title)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(title: string): Promise<void> => this.confirmCallbackBindImpl(title)"
        },
        {
          "type": "function",
          "name": "%AM1$doAction",
          "label": "%AM1$doAction",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/21.ts: RenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/21.ts: RenameMenuOperation.cancelCallbackBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.cancelCallbackBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM2$confirmCallbackBindImpl",
          "label": "%AM2$confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "message = parameter0: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\nstaticinvoke <@%unk/%unk: .showToast()>(message)\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(message: string): void => {\n        showToast(message);\n      }"
        },
        {
          "type": "function",
          "name": "%AM3$confirmCallbackBindImpl",
          "label": "%AM3$confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 120,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "message = parameter0: string\nthis = this: @ts_files/21.ts: RenameMenuOperation\nstaticinvoke <@%unk/%unk: .showToast()>(message)\nreturn",
              "start_line": 1,
              "end_line": 120,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(message: string): void => {\n        showToast(message);\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }\n\n  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }\n\n  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }\n\n  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }\n\n  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Constants } from '../constants/BrowserConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'RenameMenuOperation';\n\nexport class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }\n\n  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }\n\n  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }\n\n  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }\n\n  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }\n}\n"
}