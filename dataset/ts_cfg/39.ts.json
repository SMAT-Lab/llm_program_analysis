{
  "type": "file",
  "name": "39.ts",
  "label": "39.ts",
  "start_line": -1,
  "end_line": 187,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 187,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: %dflt\nTAG = 'GroupItemDataSource'\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "GroupItemDataSource",
      "label": "GroupItemDataSource",
      "start_line": 1,
      "end_line": 187,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\ninstanceinvoke this.<@ts_files/39.ts: GroupItemDataSource.%instInit()>()\nstaticinvoke <@%unk/%unk: .super()>()\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n    super();\n  }"
        },
        {
          "type": "function",
          "name": "setSelectType",
          "label": "setSelectType",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "selectType = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %0.<@%unk/%unk: .setSelectType()>(selectType)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelectType(selectType: number): void {\n    this.groupDataImpl.setSelectType(selectType);\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumId",
          "label": "setAlbumId",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'setAlbumId: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %1.<@%unk/%unk: .setAlbumId()>(id)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.groupDataImpl.setAlbumId(id);\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumType",
          "label": "setAlbumType",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'setAlbumType: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %1.<@%unk/%unk: .setAlbumType()>(id)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumType(id: number): void {\n    Log.info(TAG, 'setAlbumType: ' + id);\n    this.groupDataImpl.setAlbumType(id);\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumSubtype",
          "label": "setAlbumSubtype",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'setAlbumSubtype: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %1.<@%unk/%unk: .setAlbumSubtype()>(id)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumSubtype(id: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + id);\n    this.groupDataImpl.setAlbumSubtype(id);\n  }"
        },
        {
          "type": "function",
          "name": "setAlbumName",
          "label": "setAlbumName",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'setAlbumName: ' + name\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %1.<@%unk/%unk: .setAlbumName()>(name)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.groupDataImpl.setAlbumName(name);\n  }"
        },
        {
          "type": "function",
          "name": "setDeviceId",
          "label": "setDeviceId",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "id = parameter0: string\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'setDeviceId: ' + id\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\ninstanceinvoke %1.<@%unk/%unk: .setDeviceId()>(id)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.groupDataImpl.setDeviceId(id);\n  }"
        },
        {
          "type": "function",
          "name": "totalCount",
          "label": "totalCount",
          "start_line": 1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%1 = %0.<@%unk/%unk: .length>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "totalCount(): number {\n    return this.groupDataItem.length;\n  }"
        },
        {
          "type": "function",
          "name": "getIndexByItem",
          "label": "getIndexByItem",
          "start_line": 1,
          "end_line": 100,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "item = parameter0: UserFileDataItem\nthis = this: @ts_files/39.ts: GroupItemDataSource\nindex = -1\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\nlength = %0.<@%unk/%unk: .length>\ni = 0",
              "start_line": 1,
              "end_line": 100,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < length",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%2 = %1[i]\n%3 = %2.<@%unk/%unk: .uri>\n%4 = item.<@%unk/%unk: .uri>\nif %3 === %4\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "index = i",
                          "start_line": 69,
                          "end_line": 93,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return index",
                              "start_line": 73,
                              "end_line": 73,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getIndexByItem(item: UserFileDataItem): number {\n    let index = -1;\n    let length = this.groupDataItem.length;\n    for (let i = 0;i < length; i++) {\n      if (this.groupDataItem[i].uri === item.uri) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }"
        },
        {
          "type": "function",
          "name": "getData",
          "label": "getData",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = index < 0\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%2 = %1.<@%unk/%unk: .length>\n%3 = index >= %2\n%4 = %0 || %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = index + '/'\n%6 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%7 = %6.<@%unk/%unk: .length>\n%8 = %5 + %7\ninstanceinvoke Log.<@%unk/%unk: .warn()>(TAG, %8)\nreturn undefined",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%10 = %9[index]\n%11 = %10 != null\n%12 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%13 = %12[index]\n%14 = %13 != undefined\n%15 = %11 && %14\nif %15 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%16 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%17 = %16[index]\n%17.<@%unk/%unk: .index> = index",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%18 = new @%unk/%unk: LazyItem<UserFileDataItem>\n%19 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%20 = %19[index]\ninstanceinvoke %18.<@%unk/%unk: LazyItem.constructor()>(%20, index, %AM0$getData)\nreturn %18",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getData(index: number): LazyItem<UserFileDataItem> {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }"
        },
        {
          "type": "function",
          "name": "getDataByIndex",
          "label": "getDataByIndex",
          "start_line": 1,
          "end_line": 87,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = index < 0\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%2 = %1.<@%unk/%unk: .length>\n%3 = index >= %2\n%4 = %0 || %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = index + '/'\n%6 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%7 = %6.<@%unk/%unk: .length>\n%8 = %5 + %7\ninstanceinvoke Log.<@%unk/%unk: .warn()>(TAG, %8)\nreturn undefined",
                  "start_line": 1,
                  "end_line": 90,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%9 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%10 = %9[index]\n%11 = %10 != null\n%12 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%13 = %12[index]\n%14 = %13 != undefined\n%15 = %11 && %14\nif %15 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%16 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%17 = %16[index]\n%17.<@%unk/%unk: .index> = index",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%18 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%19 = %18[index]\nreturn %19",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getDataByIndex(index: number): UserFileDataItem {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return this.groupDataItem[index];\n  }"
        },
        {
          "type": "function",
          "name": "isSelect",
          "label": "isSelect",
          "start_line": 1,
          "end_line": 100,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\nisSelect = true\ni = 0",
              "start_line": 1,
              "end_line": 100,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%1 = %0.<@%unk/%unk: .length>\nif i < %1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%3 = %2[i]\n%4 = %3.<@%unk/%unk: .isSelect>\n%5 = !%4\nif %5 != 0\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "isSelect = false",
                          "start_line": 102,
                          "end_line": 102,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return isSelect",
                              "start_line": 106,
                              "end_line": 106,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.groupDataItem.length; i++) {\n      if (!this.groupDataItem[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedCount",
          "label": "getSelectedCount",
          "start_line": 1,
          "end_line": 116,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\ncount = 0\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM1$getSelectedCount)\nreturn count",
              "start_line": 1,
              "end_line": 116,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedCount(): number {\n    let count = 0;\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    })\n    return count;\n  }"
        },
        {
          "type": "function",
          "name": "getItems",
          "label": "getItems",
          "start_line": 1,
          "end_line": 134,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\n%0 = newarray (any)[0]\nitems = %0\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %1.<@%unk/%unk: .forEach()>(%AM2$getItems)\nreturn items",
              "start_line": 1,
              "end_line": 134,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getItems(): UserFileDataItem[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      items.push(item);\n    })\n    return items;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedItems",
          "label": "getSelectedItems",
          "start_line": 1,
          "end_line": 134,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\n%0 = newarray (any)[0]\nitems = %0\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %1.<@%unk/%unk: .forEach()>(%AM3$getSelectedItems)\nreturn items",
              "start_line": 1,
              "end_line": 134,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedItems(): Object[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectedUris",
          "label": "getSelectedUris",
          "start_line": 1,
          "end_line": 144,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\n%0 = newarray (any)[0]\nuris = %0\n%1 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %1.<@%unk/%unk: .forEach()>(%AM4$getSelectedUris)\nreturn uris",
              "start_line": 1,
              "end_line": 144,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }"
        },
        {
          "type": "function",
          "name": "setSelect",
          "label": "setSelect",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isSelect = parameter0: boolean\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %0.<@%unk/%unk: .forEach()>(%AM5$setSelect)\ninstanceinvoke this.<@%unk/%unk: .notifyDataReload()>()\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "setSelect(isSelect: boolean): void {\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    })\n    this.notifyDataReload();\n  }"
        },
        {
          "type": "function",
          "name": "reloadGroupItemData",
          "label": "reloadGroupItemData",
          "start_line": 1,
          "end_line": 154,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isGrid = parameter0: boolean\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataImpl>\n%1 = instanceinvoke %0.<@%unk/%unk: .reloadGroupItemData()>(isGrid)\nthis.<@ts_files/39.ts: GroupItemDataSource.groupDataItem> = await %1\n%2 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%3 = %2.<@%unk/%unk: .length>\n%4 = %3 === 0\nreturn %4",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async reloadGroupItemData(isGrid: boolean): Promise<boolean> {\n    this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);\n    return this.groupDataItem.length === 0;\n  }"
        },
        {
          "type": "function",
          "name": "onDataUpdate",
          "label": "onDataUpdate",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\ninstanceinvoke this.<@ts_files/39.ts: GroupItemDataSource.onDataUpdateBindImpl(number)>(index)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }"
        },
        {
          "type": "function",
          "name": "onDataUpdateBindImpl",
          "label": "onDataUpdateBindImpl",
          "start_line": 1,
          "end_line": 163,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = 'onDataUpdate ' + index\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %0)\n%1 = -1\nif index !== %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@%unk/%unk: .notifyDataChange()>(index)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onDataUpdateBindImpl(index: number): void {\n    Log.debug(TAG, 'onDataUpdate ' + index);\n    if (index !== -1) {\n      this.notifyDataChange(index);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "dataReload",
          "label": "dataReload",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isGrid = parameter0: boolean\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = instanceinvoke this.<@ts_files/39.ts: GroupItemDataSource.reloadGroupItemData(boolean)>(isGrid)\ninstanceinvoke %0.<@%unk/%unk: .then()>(%AM6$dataReload)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "dataReload(isGrid: boolean): void {\n    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }"
        },
        {
          "type": "function",
          "name": "dataRemove",
          "label": "dataRemove",
          "start_line": 1,
          "end_line": 176,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%1 = %0.<@%unk/%unk: .length>\ni = %1 - 1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i >= 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%3 = %2[i]\n%4 = %3 != undefined\n%5 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%6 = %5[i]\n%7 = instanceinvoke %6.<@%unk/%unk: .isDeleted()>()\n%8 = %4 && %7\nif %8 != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %9.<@%unk/%unk: .splice()>(i, 1)\ninstanceinvoke super.<@%unk/%unk: .notifyDataDelete()>(i)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "i = i - 1",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "dataRemove(): void {\n    for (let i = this.groupDataItem.length - 1;i >= 0; i--) {\n      if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {\n        this.groupDataItem.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }"
        },
        {
          "type": "function",
          "name": "dataDelete",
          "label": "dataDelete",
          "start_line": 1,
          "end_line": 185,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "uri = parameter0: string\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\nmediaDataItemIndex = instanceinvoke %0.<@%unk/%unk: .findIndex()>(%AM7$dataDelete)\n%1 = -1\n%2 = mediaDataItemIndex !== %1\n%3 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\n%4 = %3[mediaDataItemIndex]\n%5 = instanceinvoke %4.<@%unk/%unk: .isDeleted()>()\n%6 = %2 && %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = this.<@ts_files/39.ts: GroupItemDataSource.groupDataItem>\ninstanceinvoke %7.<@%unk/%unk: .splice()>(mediaDataItemIndex, 1)\ninstanceinvoke super.<@%unk/%unk: .notifyDataDelete()>(mediaDataItemIndex)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "dataDelete(uri: string): void {\n    const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    })\n    if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {\n      this.groupDataItem.splice(mediaDataItemIndex, 1);\n      super.notifyDataDelete(mediaDataItemIndex);\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$getData",
          "label": "%AM0$getData",
          "start_line": 1,
          "end_line": 84,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "index = parameter0: number\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = instanceinvoke this.<@ts_files/39.ts: GroupItemDataSource.onDataUpdateBindImpl(number)>(index)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(index: number): void => this.onDataUpdateBindImpl(index)"
        },
        {
          "type": "function",
          "name": "%AM1$getSelectedCount",
          "label": "%AM1$getSelectedCount",
          "start_line": 1,
          "end_line": 111,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [count]\nitem = parameter1: any\ncount = %closures0.count\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = item.<@%unk/%unk: .isSelect>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "count = count + 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM2$getItems",
          "label": "%AM2$getItems",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [items]\nitem = parameter1: any\nitems = %closures0.items\nthis = this: @ts_files/39.ts: GroupItemDataSource\ninstanceinvoke items.<@%unk/%unk: .push()>(item)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): void => {\n      items.push(item);\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$getSelectedItems",
          "label": "%AM3$getSelectedItems",
          "start_line": 1,
          "end_line": 129,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [items]\nitem = parameter1: any\nitems = %closures0.items\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = item.<@%unk/%unk: .isSelect>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke items.<@%unk/%unk: .push()>(item)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM4$getSelectedUris",
          "label": "%AM4$getSelectedUris",
          "start_line": 1,
          "end_line": 139,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [uris]\nitem = parameter1: any\nuris = %closures0.uris\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = item.<@%unk/%unk: .isSelect>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = item.<@%unk/%unk: .uri>\ninstanceinvoke uris.<@%unk/%unk: .push()>(%1)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 61,
                      "end_line": 187,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM5$setSelect",
          "label": "%AM5$setSelect",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [isSelect]\nitem = parameter1: any\nisSelect = %closures0.isSelect\nthis = this: @ts_files/39.ts: GroupItemDataSource\ninstanceinvoke item.<@%unk/%unk: .setSelect()>(isSelect)\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    }"
        },
        {
          "type": "function",
          "name": "%AM6$dataReload",
          "label": "%AM6$dataReload",
          "start_line": 1,
          "end_line": 187,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isEmpty = parameter0: boolean\nthis = this: @ts_files/39.ts: GroupItemDataSource\ninstanceinvoke this.<@%unk/%unk: .notifyDataReload()>()\nreturn",
              "start_line": 1,
              "end_line": 187,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(isEmpty: boolean): void => {\n      this.notifyDataReload();\n    }"
        },
        {
          "type": "function",
          "name": "%AM7$dataDelete",
          "label": "%AM7$dataDelete",
          "start_line": 1,
          "end_line": 186,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [uri]\nitem = parameter1: UserFileDataItem\nuri = %closures0.uri\nthis = this: @ts_files/39.ts: GroupItemDataSource\n%0 = item.<@%unk/%unk: .uri>\n%1 = %0 === uri\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class GroupItemDataSource extends ItemDataSource {\n  groupDataItem: UserFileDataItem[] = [];\n  private groupDataImpl: GroupDataImpl = new GroupDataImpl();\n\n  constructor() {\n    super();\n  }\n\n  setSelectType(selectType: number): void {\n    this.groupDataImpl.setSelectType(selectType);\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.groupDataImpl.setAlbumId(id);\n  }\n\n  setAlbumType(id: number): void {\n    Log.info(TAG, 'setAlbumType: ' + id);\n    this.groupDataImpl.setAlbumType(id);\n  }\n\n  setAlbumSubtype(id: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + id);\n    this.groupDataImpl.setAlbumSubtype(id);\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.groupDataImpl.setAlbumName(name);\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.groupDataImpl.setDeviceId(id);\n  }\n\n  totalCount(): number {\n    return this.groupDataItem.length;\n  }\n\n  getIndexByItem(item: UserFileDataItem): number {\n    let index = -1;\n    let length = this.groupDataItem.length;\n    for (let i = 0;i < length; i++) {\n      if (this.groupDataItem[i].uri === item.uri) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  getData(index: number): LazyItem<UserFileDataItem> {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): UserFileDataItem {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return this.groupDataItem[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.groupDataItem.length; i++) {\n      if (!this.groupDataItem[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    })\n    return count;\n  }\n\n  getItems(): UserFileDataItem[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      items.push(item);\n    })\n    return items;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    })\n    this.notifyDataReload();\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<boolean> {\n    this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);\n    return this.groupDataItem.length === 0;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.debug(TAG, 'onDataUpdate ' + index);\n    if (index !== -1) {\n      this.notifyDataChange(index);\n    }\n  }\n\n  dataReload(isGrid: boolean): void {\n    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.groupDataItem.length - 1;i >= 0; i--) {\n      if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {\n        this.groupDataItem.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  dataDelete(uri: string): void {\n    const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    })\n    if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {\n      this.groupDataItem.splice(mediaDataItemIndex, 1);\n      super.notifyDataDelete(mediaDataItemIndex);\n    }\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { GroupDataImpl } from './GroupDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'GroupItemDataSource';\n\nexport class GroupItemDataSource extends ItemDataSource {\n  groupDataItem: UserFileDataItem[] = [];\n  private groupDataImpl: GroupDataImpl = new GroupDataImpl();\n\n  constructor() {\n    super();\n  }\n\n  setSelectType(selectType: number): void {\n    this.groupDataImpl.setSelectType(selectType);\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.groupDataImpl.setAlbumId(id);\n  }\n\n  setAlbumType(id: number): void {\n    Log.info(TAG, 'setAlbumType: ' + id);\n    this.groupDataImpl.setAlbumType(id);\n  }\n\n  setAlbumSubtype(id: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + id);\n    this.groupDataImpl.setAlbumSubtype(id);\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.groupDataImpl.setAlbumName(name);\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.groupDataImpl.setDeviceId(id);\n  }\n\n  totalCount(): number {\n    return this.groupDataItem.length;\n  }\n\n  getIndexByItem(item: UserFileDataItem): number {\n    let index = -1;\n    let length = this.groupDataItem.length;\n    for (let i = 0;i < length; i++) {\n      if (this.groupDataItem[i].uri === item.uri) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  getData(index: number): LazyItem<UserFileDataItem> {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): UserFileDataItem {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return this.groupDataItem[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.groupDataItem.length; i++) {\n      if (!this.groupDataItem[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    })\n    return count;\n  }\n\n  getItems(): UserFileDataItem[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      items.push(item);\n    })\n    return items;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    })\n    this.notifyDataReload();\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<boolean> {\n    this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);\n    return this.groupDataItem.length === 0;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.debug(TAG, 'onDataUpdate ' + index);\n    if (index !== -1) {\n      this.notifyDataChange(index);\n    }\n  }\n\n  dataReload(isGrid: boolean): void {\n    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.groupDataItem.length - 1;i >= 0; i--) {\n      if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {\n        this.groupDataItem.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  dataDelete(uri: string): void {\n    const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    })\n    if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {\n      this.groupDataItem.splice(mediaDataItemIndex, 1);\n      super.notifyDataDelete(mediaDataItemIndex);\n    }\n  }\n}\n"
}