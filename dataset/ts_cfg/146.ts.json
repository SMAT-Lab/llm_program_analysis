{
  "type": "file",
  "name": "146.ts",
  "label": "146.ts",
  "start_line": -1,
  "end_line": 42,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 37,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %dflt\nstaticinvoke <@%unk/%unk: .describe()>('Circular custom providers', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/146.ts: %AC$%dflt$%AM1$%AM0$0\ninstanceinvoke %0.<@ts_files/146.ts: %AC$%dflt$%AM1$%AM0$0.constructor()>()\nbuilder = instanceinvoke Test.<@%unk/%unk: .createTestingModule()>(%0)\n%1 = instanceinvoke builder.<@%unk/%unk: .compile()>()\n%2 = await %1\n%3 = staticinvoke <@%unk/%unk: .expect()>(true)\n%4 = %3.<@%unk/%unk: .to>\n%5 = %4.<@%unk/%unk: .be>\ninstanceinvoke %5.<@%unk/%unk: .eql()>(false)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%6 = err.<@%unk/%unk: .message>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@%unk/%unk: .to>\n%9 = %8.<@%unk/%unk: .be>\ninstanceinvoke %9.<@%unk/%unk: .eql()>('A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @ts_files/146.ts: %AC$%dflt$%AM2$%AM0$1\ninstanceinvoke %0.<@ts_files/146.ts: %AC$%dflt$%AM2$%AM0$1.constructor()>()\nbuilder = instanceinvoke Test.<@%unk/%unk: .createTestingModule()>(%0)\n%1 = instanceinvoke builder.<@%unk/%unk: .compile()>()\n%2 = await %1\n%3 = staticinvoke <@%unk/%unk: .expect()>(true)\n%4 = %3.<@%unk/%unk: .to>\n%5 = %4.<@%unk/%unk: .be>\ninstanceinvoke %5.<@%unk/%unk: .eql()>(false)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "err = caughtexception: unknown\n%6 = err.<@%unk/%unk: .message>\n%7 = staticinvoke <@%unk/%unk: .expect()>(%6)\n%8 = %7.<@%unk/%unk: .to>\n%9 = %8.<@%unk/%unk: .be>\ninstanceinvoke %9.<@%unk/%unk: .eql()>('A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.')",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %dflt\nstaticinvoke <@%unk/%unk: .it()>('should throw an exception (useClass + regular provider)', %AM1$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an exception (2 factories)', %AM2$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "B",
      "label": "B",
      "start_line": 4,
      "end_line": 4,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "class B {}"
    },
    {
      "type": "class",
      "name": "A",
      "label": "A",
      "start_line": 1,
      "end_line": 7,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 7,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/146.ts: A.%instInit()>()\nb = parameter0: @ts_files/146.ts: B\nthis = this: @ts_files/146.ts: A\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(b: B) {}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Injectable()\nclass A {\n  constructor(b: B) {}\n}"
    },
    {
      "type": "class",
      "name": "BImpl",
      "label": "BImpl",
      "start_line": 1,
      "end_line": 11,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 11,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/146.ts: BImpl.%instInit()>()\na = parameter0: @ts_files/146.ts: A\nthis = this: @ts_files/146.ts: BImpl\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(a: A) {}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Injectable()\nclass BImpl {\n  constructor(a: A) {}\n}"
    },
    {
      "type": "class",
      "name": "AppController",
      "label": "AppController",
      "start_line": 1,
      "end_line": 15,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 15,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/146.ts: AppController.%instInit()>()\na = parameter0: @ts_files/146.ts: A\nthis = this: @ts_files/146.ts: AppController\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(a: A) {}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Controller()\nclass AppController {\n  constructor(a: A) {}\n}"
    },
    {
      "type": "class",
      "name": "AppModule",
      "label": "AppModule",
      "start_line": 17,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM1$%AM0$0",
      "label": "%AC$%dflt$%AM1$%AM0$0",
      "start_line": 26,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        imports: [AppModule],\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3",
      "label": "%AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3",
      "start_line": 41,
      "end_line": 41,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2",
      "label": "%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2",
      "start_line": 1,
      "end_line": 41,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2\n%0 = new @ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3\ninstanceinvoke %0.<@ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => ({})"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5",
      "label": "%AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5",
      "start_line": 42,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4",
      "label": "%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4",
      "start_line": 1,
      "end_line": 42,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4\n%0 = new @ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5\ninstanceinvoke %0.<@ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => ({})"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%AM0$1",
      "label": "%AC$%dflt$%AM2$%AM0$1",
      "start_line": 39,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { Test } from '@nestjs/testing';\nimport { expect } from 'chai';\nimport { Controller, Injectable, Module } from '@nestjs/common';\nclass B {}\n@Injectable()\nclass A {\n  constructor(b: B) {}\n}\n@Injectable()\nclass BImpl {\n  constructor(a: A) {}\n}\n@Controller()\nclass AppController {\n  constructor(a: A) {}\n}\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n});"
}