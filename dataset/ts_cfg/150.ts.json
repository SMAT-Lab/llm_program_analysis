{
  "type": "file",
  "name": "150.ts",
  "label": "150.ts",
  "start_line": -1,
  "end_line": 58,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 57,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %dflt\n%0 = new @ts_files/150.ts: %AC$%dflt$%dflt$0\ninstanceinvoke %0.<@ts_files/150.ts: %AC$%dflt$%dflt$0.constructor()>()\nSubscript = instanceinvoke Mark.<@%unk/%unk: .create()>(%0)\nreturn",
              "start_line": 1,
              "end_line": 57,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "SubscriptExtensionOptions",
      "label": "SubscriptExtensionOptions",
      "start_line": 3,
      "end_line": 3,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "export interface SubscriptExtensionOptions {\n  HTMLAttributes: Object,\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%AC$%dflt$%dflt$0$addOptions$1$%instInit$2",
      "label": "%AC$%AC$%AC$%dflt$%dflt$0$addOptions$1$%instInit$2",
      "start_line": 19,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$addOptions$1",
      "label": "%AC$%AC$%dflt$%dflt$0$addOptions$1",
      "start_line": 18,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      HTMLAttributes: {},\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$parseHTML$3",
      "label": "%AC$%AC$%dflt$%dflt$0$parseHTML$3",
      "start_line": 24,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        tag: 'sub',\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$parseHTML$4",
      "label": "%AC$%AC$%dflt$%dflt$0$parseHTML$4",
      "start_line": 1,
      "end_line": 29,
      "functions": [
        {
          "type": "function",
          "name": "getAttrs",
          "label": "getAttrs",
          "start_line": 1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: unknown\nthis = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$4\nif value !== 'sub'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return false",
                  "start_line": 32,
                  "end_line": 32,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return null",
                  "start_line": 35,
                  "end_line": 35,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        style: 'vertical-align',\n        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$addCommands$5",
      "label": "%AC$%AC$%dflt$%dflt$0$addCommands$5",
      "start_line": 1,
      "end_line": 51,
      "functions": [
        {
          "type": "function",
          "name": "%AM1$%AM0$%instInit",
          "label": "%AM1$%AM0$%instInit",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\n%0 = this.<@%unk/%unk: .name>\n%1 = instanceinvoke commands.<@%unk/%unk: .setMark()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ commands }) => {\n        return commands.setMark(this.name)\n      }"
        },
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\nreturn %AM1$%AM0$%instInit",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => ({ commands }) => {\n        return commands.setMark(this.name)\n      }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM2$%instInit",
          "label": "%AM3$%AM2$%instInit",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\n%0 = this.<@%unk/%unk: .name>\n%1 = instanceinvoke commands.<@%unk/%unk: .toggleMark()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ commands }) => {\n        return commands.toggleMark(this.name)\n      }"
        },
        {
          "type": "function",
          "name": "%AM2$%instInit",
          "label": "%AM2$%instInit",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\nreturn %AM3$%AM2$%instInit",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM4$%instInit",
          "label": "%AM5$%AM4$%instInit",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\n%0 = this.<@%unk/%unk: .name>\n%1 = instanceinvoke commands.<@%unk/%unk: .unsetMark()>(%0)\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "({ commands }) => {\n        return commands.unsetMark(this.name)\n      }"
        },
        {
          "type": "function",
          "name": "%AM4$%instInit",
          "label": "%AM4$%instInit",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\nreturn %AM5$%AM4$%instInit",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      setSubscript: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleSubscript: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetSubscript: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$%dflt$0$addKeyboardShortcuts$6",
      "label": "%AC$%AC$%dflt$%dflt$0$addKeyboardShortcuts$6",
      "start_line": 1,
      "end_line": 58,
      "functions": [
        {
          "type": "function",
          "name": "%AM0$%instInit",
          "label": "%AM0$%instInit",
          "start_line": 1,
          "end_line": 58,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addKeyboardShortcuts$6\n%0 = this.<@%unk/%unk: .editor>\n%1 = %0.<@ts_files/150.ts: %AC$%dflt$%dflt$0.commands>\n%2 = instanceinvoke %1.<@%unk/%unk: .toggleSubscript()>()\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => this.editor.commands.toggleSubscript()"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%dflt$0",
      "label": "%AC$%dflt$%dflt$0",
      "start_line": 1,
      "end_line": 56,
      "functions": [
        {
          "type": "function",
          "name": "addOptions",
          "label": "addOptions",
          "start_line": 1,
          "end_line": 17,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %dflt\n%0 = new @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addOptions$1\ninstanceinvoke %0.<@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addOptions$1.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  }"
        },
        {
          "type": "function",
          "name": "parseHTML",
          "label": "parseHTML",
          "start_line": 1,
          "end_line": 22,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %dflt\n%0 = new @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$3\ninstanceinvoke %0.<@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$3.constructor()>()\n%1 = new @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$4\ninstanceinvoke %1.<@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$4.constructor()>()\n%2 = <@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$4>%1\n%3 = newarray (@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$parseHTML$3|StyleParseRule)[2]\n%3[0] = %0\n%3[1] = %2\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "parseHTML() {\n    return [\n      {\n        tag: 'sub',\n      },\n      {\n        style: 'vertical-align',\n        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },\n      } as StyleParseRule,\n    ]\n  }"
        },
        {
          "type": "function",
          "name": "renderHTML",
          "label": "renderHTML",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: unknown\nthis = this: @ts_files/150.ts: %dflt\n%0 = this.<@%unk/%unk: .options>\n%1 = %0.<@ts_files/150.ts: %AC$%dflt$%dflt$0.HTMLAttributes>\n%2 = staticinvoke <@%unk/%unk: .mergeAttributes()>(%1, HTMLAttributes)\n%3 = newarray (string|unknown|number)[3]\n%3[0] = 'sub'\n%3[1] = %2\n%3[2] = 0\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "renderHTML({ HTMLAttributes }) {\n    return ['sub', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  }"
        },
        {
          "type": "function",
          "name": "addCommands",
          "label": "addCommands",
          "start_line": 1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %dflt\n%0 = new @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5\ninstanceinvoke %0.<@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addCommands$5.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "addCommands() {\n    return {\n      setSubscript: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleSubscript: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetSubscript: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  }"
        },
        {
          "type": "function",
          "name": "addKeyboardShortcuts",
          "label": "addKeyboardShortcuts",
          "start_line": 1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/150.ts: %dflt\n%0 = new @ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addKeyboardShortcuts$6\ninstanceinvoke %0.<@ts_files/150.ts: %AC$%AC$%dflt$%dflt$0$addKeyboardShortcuts$6.constructor()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "addKeyboardShortcuts() {\n    return {\n      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n  name: 'subscript',\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n  parseHTML() {\n    return [\n      {\n        tag: 'sub',\n      },\n      {\n        style: 'vertical-align',\n        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },\n      } as StyleParseRule,\n    ]\n  },\n  renderHTML({ HTMLAttributes }) {\n    return ['sub', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n  addCommands() {\n    return {\n      setSubscript: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleSubscript: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetSubscript: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }\n  },\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { Mark, mergeAttributes } from '@tiptap/core'\nimport type { StyleParseRule } from '@tiptap/pm/model'\nexport interface SubscriptExtensionOptions {\n  HTMLAttributes: Object,\n}\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    subscript: {\n      setSubscript: () => ReturnType,\n      toggleSubscript: () => ReturnType,\n      unsetSubscript: () => ReturnType,\n    }\n  }\n}\nexport const Subscript = Mark.create<SubscriptExtensionOptions>({\n  name: 'subscript',\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n  parseHTML() {\n    return [\n      {\n        tag: 'sub',\n      },\n      {\n        style: 'vertical-align',\n        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },\n      } as StyleParseRule,\n    ]\n  },\n  renderHTML({ HTMLAttributes }) {\n    return ['sub', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n  addCommands() {\n    return {\n      setSubscript: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleSubscript: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetSubscript: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }\n  },\n})"
}