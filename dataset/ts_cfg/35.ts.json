{
  "type": "file",
  "name": "35.ts",
  "label": "35.ts",
  "start_line": -1,
  "end_line": 71,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/35.ts: %dflt\nTAG = 'MultimodalInputManager'\n%0 = new @ts_files/35.ts: MultimodalInputManager\ninstanceinvoke %0.<@ts_files/35.ts: MultimodalInputManager.constructor()>()\nmMultimodalInputManager = %0\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$MultimodalInputManager$%instInit$0",
      "label": "%AC$MultimodalInputManager$%instInit$0",
      "start_line": 25,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  }"
    },
    {
      "type": "class",
      "name": "%AC$MultimodalInputManager$%instInit$1",
      "label": "%AC$MultimodalInputManager$%instInit$1",
      "start_line": 33,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  }"
    },
    {
      "type": "class",
      "name": "%AC$MultimodalInputManager$%instInit$2",
      "label": "%AC$MultimodalInputManager$%instInit$2",
      "start_line": 39,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  }"
    },
    {
      "type": "class",
      "name": "MultimodalInputManager",
      "label": "MultimodalInputManager",
      "start_line": 1,
      "end_line": 71,
      "functions": [
        {
          "type": "function",
          "name": "registerListener",
          "label": "registerListener",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "callback = parameter0: unknown\nthis = this: @ts_files/35.ts: MultimodalInputManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'registerListener start')\n%0 = this.<@ts_files/35.ts: MultimodalInputManager.leftKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .on()>('key', %0, %AM0$registerListener)\n%1 = this.<@ts_files/35.ts: MultimodalInputManager.rightKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .on()>('key', %1, %AM1$registerListener)\n%2 = this.<@ts_files/35.ts: MultimodalInputManager.escKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .on()>('key', %2, %AM2$registerListener)\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'registerListener end')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async registerListener(callback): Promise<void> {\n    Log.debug(TAG, 'registerListener start');\n    inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    });\n    inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    });\n    inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    });\n    Log.debug(TAG, 'registerListener end');\n  }"
        },
        {
          "type": "function",
          "name": "unregisterListener",
          "label": "unregisterListener",
          "start_line": 1,
          "end_line": 63,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/35.ts: MultimodalInputManager\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'unregisterListener start')\n%0 = this.<@ts_files/35.ts: MultimodalInputManager.leftKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .off()>('key', %0, %AM3$unregisterListener)\n%1 = this.<@ts_files/35.ts: MultimodalInputManager.rightKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .off()>('key', %1, %AM4$unregisterListener)\n%2 = this.<@ts_files/35.ts: MultimodalInputManager.escKeyOptions>\ninstanceinvoke inputConsumer.<@%unk/%unk: .off()>('key', %2, %AM5$unregisterListener)\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'unregisterListener end')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async unregisterListener(): Promise<void> {\n    Log.debug(TAG, 'unregisterListener start');\n    inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    });\n    Log.debug(TAG, 'unregisterListener end');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$registerListener",
          "label": "%AM0$registerListener",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [callback]\ndata = parameter1: inputConsumer.KeyOptions\ncallback = %closures0.callback\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'notificationRegister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nstaticinvoke <@%unk/%unk: .callback()>(0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$registerListener",
          "label": "%AM1$registerListener",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures1 = parameter0: [callback]\ndata = parameter1: inputConsumer.KeyOptions\ncallback = %closures1.callback\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'controlRegister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nstaticinvoke <@%unk/%unk: .callback()>(1)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    }"
        },
        {
          "type": "function",
          "name": "%AM2$registerListener",
          "label": "%AM2$registerListener",
          "start_line": 1,
          "end_line": 56,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures2 = parameter0: [callback]\ndata = parameter1: inputConsumer.KeyOptions\ncallback = %closures2.callback\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'escRegister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nstaticinvoke <@%unk/%unk: .callback()>(2)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$unregisterListener",
          "label": "%AM3$unregisterListener",
          "start_line": 1,
          "end_line": 65,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: inputConsumer.KeyOptions\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'notificationUnregister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    }"
        },
        {
          "type": "function",
          "name": "%AM4$unregisterListener",
          "label": "%AM4$unregisterListener",
          "start_line": 1,
          "end_line": 68,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: inputConsumer.KeyOptions\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'controlUnregister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    }"
        },
        {
          "type": "function",
          "name": "%AM5$unregisterListener",
          "label": "%AM5$unregisterListener",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "data = parameter0: inputConsumer.KeyOptions\nthis = this: @ts_files/35.ts: MultimodalInputManager\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(data)\n%1 = 'escUnregister data: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class MultimodalInputManager {\n\n  //win + N\n  leftKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  //win + I\n  rightKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n  escKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  async registerListener(callback): Promise<void> {\n    Log.debug(TAG, 'registerListener start');\n    inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    });\n    inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    });\n    inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    });\n    Log.debug(TAG, 'registerListener end');\n  }\n\n  async unregisterListener(): Promise<void> {\n    Log.debug(TAG, 'unregisterListener start');\n    inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    });\n    Log.debug(TAG, 'unregisterListener end');\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport inputConsumer from '@ohos.multimodalInput.inputConsumer';\nimport { Log } from '../utils/Log';\n\n\nconst TAG = 'MultimodalInputManager';\n\nexport class MultimodalInputManager {\n\n  //win + N\n  leftKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  //win + I\n  rightKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n  escKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  async registerListener(callback): Promise<void> {\n    Log.debug(TAG, 'registerListener start');\n    inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    });\n    inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    });\n    inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    });\n    Log.debug(TAG, 'registerListener end');\n  }\n\n  async unregisterListener(): Promise<void> {\n    Log.debug(TAG, 'unregisterListener start');\n    inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    });\n    Log.debug(TAG, 'unregisterListener end');\n  }\n}\n\nexport let mMultimodalInputManager = new MultimodalInputManager();\n"
}