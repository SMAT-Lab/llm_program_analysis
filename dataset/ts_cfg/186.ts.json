{
  "type": "file",
  "name": "186.ts",
  "label": "186.ts",
  "start_line": -1,
  "end_line": 25,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/186.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "Utm",
      "label": "Utm",
      "start_line": 0,
      "end_line": 4,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(\n        zone: number,\n        hemisphere: Hemisphere,\n        easting: number,\n        northing: number,\n        datum?: Datum,\n        convergence?: number,\n        scale?: number,\n    );"
        },
        {
          "type": "function",
          "name": "toLatLon",
          "label": "toLatLon",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "toLatLon(): LatLon_Utm;"
        },
        {
          "type": "function",
          "name": "toString",
          "label": "toString",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "toString(digits?: number): string;"
        },
        {
          "type": "function",
          "name": "parse",
          "label": "parse",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "static parse(utmCoord: string, datum?: Datum): Utm;"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "declare class Utm {\n    zone: number;\n    hemisphere: Hemisphere;\n    easting: number;\n    northing: number;\n    datum: Datum;\n    convergence: number | null;\n    scale: number | null;\n    constructor(\n        zone: number,\n        hemisphere: Hemisphere,\n        easting: number,\n        northing: number,\n        datum?: Datum,\n        convergence?: number,\n        scale?: number,\n    );\n    static parse(utmCoord: string, datum?: Datum): Utm;\n    toLatLon(): LatLon_Utm;\n    toString(digits?: number): string;\n}"
    },
    {
      "type": "class",
      "name": "LatLon_Utm",
      "label": "LatLon_Utm",
      "start_line": 0,
      "end_line": 25,
      "functions": [
        {
          "type": "function",
          "name": "toUtm",
          "label": "toUtm",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "toUtm(zoneOverride?: number): Utm;"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "declare class LatLon_Utm extends LatLonEllipsoidal {\n    toUtm(zoneOverride?: number): Utm;\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { Datum } from \".\";\nimport LatLonEllipsoidal, { Dms } from \"./latlon-ellipsoidal-datum\";\ntype Hemisphere = \"N\" | \"S\";\ndeclare class Utm {\n    zone: number;\n    hemisphere: Hemisphere;\n    easting: number;\n    northing: number;\n    datum: Datum;\n    convergence: number | null;\n    scale: number | null;\n    constructor(\n        zone: number,\n        hemisphere: Hemisphere,\n        easting: number,\n        northing: number,\n        datum?: Datum,\n        convergence?: number,\n        scale?: number,\n    );\n    static parse(utmCoord: string, datum?: Datum): Utm;\n    toLatLon(): LatLon_Utm;\n    toString(digits?: number): string;\n}\ndeclare class LatLon_Utm extends LatLonEllipsoidal {\n    toUtm(zoneOverride?: number): Utm;\n}\nexport { Dms, LatLon_Utm as LatLon, Utm as default };"
}