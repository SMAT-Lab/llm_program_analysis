{
  "type": "file",
  "name": "206.ts",
  "label": "206.ts",
  "start_line": -1,
  "end_line": 111,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 53,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "FrameGraphObjectRendererTask",
      "label": "FrameGraphObjectRendererTask",
      "start_line": 0,
      "end_line": 111,
      "functions": [
        {
          "type": "function",
          "name": "Get-camera",
          "label": "Get-camera",
          "start_line": 1,
          "end_line": 11,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._camera>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get camera() {\n        return this._camera;\n    }"
        },
        {
          "type": "function",
          "name": "Set-camera",
          "label": "Set-camera",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "camera = parameter0: Camera\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._camera> = camera\n%1 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.camera>\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%0.<@%unk/%unk: .activeCamera> = %1\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public set camera(camera: Camera) {\n        this._camera = camera;\n        this._renderer.activeCamera = this.camera;\n    }"
        },
        {
          "type": "function",
          "name": "Get-objectRenderer",
          "label": "Get-objectRenderer",
          "start_line": 1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get objectRenderer() {\n        return this._renderer;\n    }"
        },
        {
          "type": "function",
          "name": "Get-name",
          "label": "Get-name",
          "start_line": 1,
          "end_line": 30,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._name>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override get name() {\n        return this._name;\n    }"
        },
        {
          "type": "function",
          "name": "Set-name",
          "label": "Set-name",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: string\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._name> = value\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%1.<@%unk/%unk: .name> = value",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 12,
                      "end_line": 53,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override set name(value: string) {\n        this._name = value;\n        if (this._renderer) {\n            this._renderer.name = value;\n        }\n    }"
        },
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/206.ts: FrameGraphObjectRendererTask.%instInit()>()\nname = parameter0: string\nframeGraph = parameter1: FrameGraph\nscene = parameter2: Scene\noptions = parameter3: ObjectRendererOptions\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\nstaticinvoke <@%unk/%unk: .super()>(name, frameGraph)\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._scene> = scene\n%0 = new @%unk/%unk: ObjectRenderer\ninstanceinvoke %0.<@%unk/%unk: ObjectRenderer.constructor()>(name, scene, options)\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer> = %0\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask.name> = name\n%1 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%2 = %1.<@%unk/%unk: .onBeforeRenderingManagerRenderObservable>\ninstanceinvoke %2.<@%unk/%unk: .add()>(%AM1$constructor)\n%3 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%4 = %3.<@%unk/%unk: .textureManager>\n%5 = instanceinvoke %4.<@%unk/%unk: .createDanglingHandle()>()\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask.outputTexture> = %5\n%6 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%7 = %6.<@%unk/%unk: .textureManager>\n%8 = instanceinvoke %7.<@%unk/%unk: .createDanglingHandle()>()\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask.outputDepthTexture> = %8\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: ObjectRendererOptions) {\n        super(name, frameGraph);\n        this._scene = scene;\n        this._renderer = new ObjectRenderer(name, scene, options);\n        this.name = name;\n        this._renderer.onBeforeRenderingManagerRenderObservable.add(() => {\n            if (!this._renderer.options.doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n        });\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\n        this.outputDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\n    }"
        },
        {
          "type": "function",
          "name": "isReady",
          "label": "isReady",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureWidth>\n%1 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureHeight>\n%2 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%3 = instanceinvoke %2.<@%unk/%unk: .isReadyForRendering()>(%0, %1)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override isReady() {\n        return this._renderer.isReadyForRendering(this._textureWidth, this._textureHeight);\n    }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "(context: FrameGraphRenderContext) => void"
        },
        {
          "type": "function",
          "name": "record",
          "label": "record",
          "start_line": 1,
          "end_line": 55,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "skipCreationOfDisabledPasses = parameter0: unknown\nadditionalExecute = parameter1: @ts_files/206.ts: FrameGraphObjectRendererTask.%AM0(FrameGraphRenderContext)\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\n%1 = %0 === undefined\n%2 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.objectList>\n%3 = %2 === undefined\n%4 = %1 || %3\nif %4 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = new @%unk/%unk: Error\n%6 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%7 = 'FrameGraphObjectRendererTask ' + %6\n%8 = %7 + ': destinationTexture and objectList are required'\ninstanceinvoke %5.<@%unk/%unk: Error.constructor()>(%8)\nthrow %5",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%9 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\n%10 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%11 = %10.<@%unk/%unk: .textureManager>\noutputTextureDescription = instanceinvoke %11.<@%unk/%unk: .getTextureDescription()>(%9)\ndepthEnabled = false\n%12 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\nif %12 !== undefined",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%13 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\n%14 = %13 === backbufferDepthStencilTextureHandle\n%15 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\n%16 = %15 !== backbufferColorTextureHandle\n%17 = %14 && %16\nif %17 != false",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%18 = new @%unk/%unk: Error\n%19 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%20 = 'FrameGraphObjectRendererTask ' + %19\n%21 = %20 + ': the back buffer color texture is the only color texture allowed when the depth is the back buffer depth/stencil'\ninstanceinvoke %18.<@%unk/%unk: Error.constructor()>(%21)\nthrow %18",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%22 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\n%23 = %22 !== backbufferDepthStencilTextureHandle\n%24 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\n%25 = %24 === backbufferColorTextureHandle\n%26 = %23 && %25\nif %26 != false",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%27 = new @%unk/%unk: Error\n%28 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%29 = 'FrameGraphObjectRendererTask ' + %28\n%30 = %29 + ': the back buffer depth/stencil texture is the only depth texture allowed when the destination is the back buffer color'\ninstanceinvoke %27.<@%unk/%unk: Error.constructor()>(%30)\nthrow %27",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%31 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\n%32 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%33 = %32.<@%unk/%unk: .textureManager>\ndepthTextureDescription = instanceinvoke %33.<@%unk/%unk: .getTextureDescription()>(%31)\n%34 = depthTextureDescription.<@%unk/%unk: .options>\n%35 = %34.<@%unk/%unk: .samples>\n%36 = outputTextureDescription.<@%unk/%unk: .options>\n%37 = %36.<@%unk/%unk: .samples>\nif %35 !== %37",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "%38 = new @%unk/%unk: Error\n%39 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%40 = 'FrameGraphObjectRendererTask ' + %39\n%41 = %40 + ': the depth texture and the output texture must have the same number of samples'\ninstanceinvoke %38.<@%unk/%unk: Error.constructor()>(%41)\nthrow %38",
                                              "start_line": 1,
                                              "end_line": 1,
                                              "successors": [
                                                {
                                                  "type": "block",
                                                  "name": "Block?",
                                                  "label": "depthEnabled = true",
                                                  "start_line": 76,
                                                  "end_line": 76,
                                                  "successors": [
                                                    {
                                                      "type": "block",
                                                      "name": "Block?",
                                                      "label": "%42 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.outputTexture>\n%43 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\n%44 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%45 = %44.<@%unk/%unk: .textureManager>\ninstanceinvoke %45.<@%unk/%unk: .resolveDanglingHandle()>(%42, %43)\n%46 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\nif %46 !== undefined",
                                                      "start_line": 1,
                                                      "end_line": 1,
                                                      "successors": [
                                                        {
                                                          "type": "block",
                                                          "name": "Block?",
                                                          "label": "%47 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.outputDepthTexture>\n%48 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\n%49 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\n%50 = %49.<@%unk/%unk: .textureManager>\ninstanceinvoke %50.<@%unk/%unk: .resolveDanglingHandle()>(%47, %48)",
                                                          "start_line": 1,
                                                          "end_line": 1,
                                                          "successors": [
                                                            {
                                                              "type": "block",
                                                              "name": "Block?",
                                                              "label": "%51 = outputTextureDescription.<@%unk/%unk: .size>\n%52 = %51.<@%unk/%unk: .width>\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureWidth> = %52\n%53 = outputTextureDescription.<@%unk/%unk: .size>\n%54 = %53.<@%unk/%unk: .height>\nthis.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureHeight> = %54\n%55 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%56 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\npass = instanceinvoke %56.<@%unk/%unk: .addRenderPass()>(%55)\n%57 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\ninstanceinvoke pass.<@%unk/%unk: .setRenderTarget()>(%57)\n%58 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\ninstanceinvoke pass.<@%unk/%unk: .setRenderTargetDepth()>(%58)\ninstanceinvoke pass.<@%unk/%unk: .setExecuteFunc()>(%AM2$record)\n%59 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.dependencies>\nif %59 !== undefined\n%60 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.dependencies>\n%61 = instanceinvoke %60.<@%unk/%unk: .iterator()>()",
                                                              "start_line": 1,
                                                              "end_line": 1,
                                                              "successors": [
                                                                {
                                                                  "type": "block",
                                                                  "name": "Block?",
                                                                  "label": "%62 = instanceinvoke %61.<@%unk/%unk: .next()>()\n%63 = %62.<@ES2015/BuiltinClass: IteratorResult.done>\nif %63 == true",
                                                                  "start_line": 1,
                                                                  "end_line": 1,
                                                                  "successors": [
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%64 = %62.<@ES2015/BuiltinClass: IteratorResult.value>\nhandle = <any>%64\ninstanceinvoke pass.<@%unk/%unk: .useTexture()>(handle)",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "blockRef",
                                                                          "label": "(RepeatedBlock)"
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "block",
                                                                      "name": "Block?",
                                                                      "label": "%65 = !skipCreationOfDisabledPasses\nif %65 != 0",
                                                                      "start_line": 1,
                                                                      "end_line": 1,
                                                                      "successors": [
                                                                        {
                                                                          "type": "block",
                                                                          "name": "Block?",
                                                                          "label": "%66 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.name>\n%67 = %66 + '_disabled'\n%68 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._frameGraph>\npassDisabled = instanceinvoke %68.<@%unk/%unk: .addRenderPass()>(%67, true)\n%69 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.destinationTexture>\ninstanceinvoke passDisabled.<@%unk/%unk: .setRenderTarget()>(%69)\n%70 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTexture>\ninstanceinvoke passDisabled.<@%unk/%unk: .setRenderTargetDepth()>(%70)\ninstanceinvoke passDisabled.<@%unk/%unk: .setExecuteFunc()>(%AM3$record)\n%71 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.dependencies>\nif %71 !== undefined\n%72 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.dependencies>\n%73 = instanceinvoke %72.<@%unk/%unk: .iterator()>()",
                                                                          "start_line": 1,
                                                                          "end_line": 1,
                                                                          "successors": [
                                                                            {
                                                                              "type": "block",
                                                                              "name": "Block?",
                                                                              "label": "%74 = instanceinvoke %73.<@%unk/%unk: .next()>()\n%75 = %74.<@ES2015/BuiltinClass: IteratorResult.done>\nif %75 == true",
                                                                              "start_line": 1,
                                                                              "end_line": 1,
                                                                              "successors": [
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "%76 = %74.<@ES2015/BuiltinClass: IteratorResult.value>\nhandle = <any>%76\ninstanceinvoke passDisabled.<@%unk/%unk: .useTexture()>(handle)",
                                                                                  "start_line": 1,
                                                                                  "end_line": 1,
                                                                                  "successors": [
                                                                                    {
                                                                                      "type": "blockRef",
                                                                                      "label": "(RepeatedBlock)"
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "block",
                                                                                  "name": "Block?",
                                                                                  "label": "return",
                                                                                  "start_line": 12,
                                                                                  "end_line": 53,
                                                                                  "successors": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "blockRef",
                                                                              "label": "(RepeatedBlock)"
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "blockRef",
                                                                          "label": "(RepeatedBlock)"
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "blockRef",
                                                                  "label": "(RepeatedBlock)"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "blockRef",
                                                          "label": "(RepeatedBlock)"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public record(skipCreationOfDisabledPasses = false, additionalExecute?: (context: FrameGraphRenderContext) => void) {\n        if (this.destinationTexture === undefined || this.objectList === undefined) {\n            throw new Error(`FrameGraphObjectRendererTask ${this.name}: destinationTexture and objectList are required`);\n        }\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.destinationTexture);\n        let depthEnabled = false;\n        if (this.depthTexture !== undefined) {\n            if (this.depthTexture === backbufferDepthStencilTextureHandle && this.destinationTexture !== backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer color texture is the only color texture allowed when the depth is the back buffer depth/stencil`\n                );\n            }\n            if (this.depthTexture !== backbufferDepthStencilTextureHandle && this.destinationTexture === backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer depth/stencil texture is the only depth texture allowed when the destination is the back buffer color`\n                );\n            }\n            const depthTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.depthTexture);\n            if (depthTextureDescription.options.samples !== outputTextureDescription.options.samples) {\n                throw new Error(`FrameGraphObjectRendererTask ${this.name}: the depth texture and the output texture must have the same number of samples`);\n            }\n            depthEnabled = true;\n        }\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.destinationTexture);\n        if (this.depthTexture !== undefined) {\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthTexture, this.depthTexture);\n        }\n        this._textureWidth = outputTextureDescription.size.width;\n        this._textureHeight = outputTextureDescription.size.height;\n        const pass = this._frameGraph.addRenderPass(this.name);\n        pass.setRenderTarget(this.destinationTexture);\n        pass.setRenderTargetDepth(this.depthTexture);\n        pass.setExecuteFunc((context) => {\n            this._renderer.renderList = this.objectList.meshes;\n            this._renderer.particleSystemList = this.objectList.particleSystems;\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\n            context.render(this._renderer, this._textureWidth, this._textureHeight);\n            additionalExecute?.(context);\n        });\n        if (this.dependencies !== undefined) {\n            for (const handle of this.dependencies) {\n                pass.useTexture(handle);\n            }\n        }\n        if (!skipCreationOfDisabledPasses) {\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\n            passDisabled.setRenderTarget(this.destinationTexture);\n            passDisabled.setRenderTargetDepth(this.depthTexture);\n            passDisabled.setExecuteFunc((_context) => {});\n            if (this.dependencies !== undefined) {\n                for (const handle of this.dependencies) {\n                    passDisabled.useTexture(handle);\n                }\n            }\n        }\n    }"
        },
        {
          "type": "function",
          "name": "dispose",
          "label": "dispose",
          "start_line": 1,
          "end_line": 111,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\ninstanceinvoke %0.<@%unk/%unk: .dispose()>()\ninstanceinvoke super.<@%unk/%unk: .dispose()>()\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override dispose(): void {\n        this._renderer.dispose();\n        super.dispose();\n    }"
        },
        {
          "type": "function",
          "name": "%AM1$constructor",
          "label": "%AM1$constructor",
          "start_line": 1,
          "end_line": 44,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [scene]\nscene = %closures0.scene\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%1 = %0.<@%unk/%unk: .options>\n%2 = %1.<@%unk/%unk: .doNotChangeAspectRatio>\n%3 = !%2\nif %3 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke scene.<@%unk/%unk: .updateTransformMatrix()>(true)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 12,
                      "end_line": 53,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n            if (!this._renderer.options.doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n        }"
        },
        {
          "type": "function",
          "name": "%AM2$record",
          "label": "%AM2$record",
          "start_line": 1,
          "end_line": 87,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [depthEnabled, additionalExecute]\ncontext = parameter1: unknown\ndepthEnabled = %closures0.depthEnabled\nadditionalExecute = %closures0.additionalExecute\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\n%1 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.objectList>\n%2 = %1.<@%unk/%unk: .meshes>\n%0 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%0.<@%unk/%unk: .renderList> = %2\n%4 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.objectList>\n%5 = %4.<@%unk/%unk: .particleSystems>\n%3 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%3.<@%unk/%unk: .particleSystemList> = %5\n%6 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthTest>\n%7 = %6 && depthEnabled\n%8 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask.depthWrite>\n%9 = %8 && depthEnabled\ninstanceinvoke context.<@%unk/%unk: .setDepthStates()>(%7, %9)\n%10 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._renderer>\n%11 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureWidth>\n%12 = this.<@ts_files/206.ts: FrameGraphObjectRendererTask._textureHeight>\ninstanceinvoke context.<@%unk/%unk: .render()>(%10, %11, %12)\nstaticinvoke <@%unk/%unk: .additionalExecute()>(context)\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(context) => {\n            this._renderer.renderList = this.objectList.meshes;\n            this._renderer.particleSystemList = this.objectList.particleSystems;\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\n            context.render(this._renderer, this._textureWidth, this._textureHeight);\n            additionalExecute?.(context);\n        }"
        },
        {
          "type": "function",
          "name": "%AM3$record",
          "label": "%AM3$record",
          "start_line": 1,
          "end_line": 103,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "_context = parameter0: unknown\nthis = this: @ts_files/206.ts: FrameGraphObjectRendererTask\nreturn",
              "start_line": 1,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(_context) => {}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class FrameGraphObjectRendererTask extends FrameGraphTask {\n    public destinationTexture: FrameGraphTextureHandle;\n    public depthTexture?: FrameGraphTextureHandle;\n    public dependencies?: FrameGraphTextureHandle[] = [];\n    private _camera: Camera;\n    public get camera() {\n        return this._camera;\n    }\n    public set camera(camera: Camera) {\n        this._camera = camera;\n        this._renderer.activeCamera = this.camera;\n    }\n    public objectList: FrameGraphObjectList;\n    public depthTest = true;\n    public depthWrite = true;\n    public readonly outputTexture: FrameGraphTextureHandle;\n    public readonly outputDepthTexture: FrameGraphTextureHandle;\n    protected readonly _scene: Scene;\n    protected readonly _renderer: ObjectRenderer;\n    protected _textureWidth: number;\n    protected _textureHeight: number;\n    public get objectRenderer() {\n        return this._renderer;\n    }\n    public override get name() {\n        return this._name;\n    }\n    public override set name(value: string) {\n        this._name = value;\n        if (this._renderer) {\n            this._renderer.name = value;\n        }\n    }\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: ObjectRendererOptions) {\n        super(name, frameGraph);\n        this._scene = scene;\n        this._renderer = new ObjectRenderer(name, scene, options);\n        this.name = name;\n        this._renderer.onBeforeRenderingManagerRenderObservable.add(() => {\n            if (!this._renderer.options.doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n        });\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\n        this.outputDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\n    }\n    public override isReady() {\n        return this._renderer.isReadyForRendering(this._textureWidth, this._textureHeight);\n    }\n    public record(skipCreationOfDisabledPasses = false, additionalExecute?: (context: FrameGraphRenderContext) => void) {\n        if (this.destinationTexture === undefined || this.objectList === undefined) {\n            throw new Error(`FrameGraphObjectRendererTask ${this.name}: destinationTexture and objectList are required`);\n        }\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.destinationTexture);\n        let depthEnabled = false;\n        if (this.depthTexture !== undefined) {\n            if (this.depthTexture === backbufferDepthStencilTextureHandle && this.destinationTexture !== backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer color texture is the only color texture allowed when the depth is the back buffer depth/stencil`\n                );\n            }\n            if (this.depthTexture !== backbufferDepthStencilTextureHandle && this.destinationTexture === backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer depth/stencil texture is the only depth texture allowed when the destination is the back buffer color`\n                );\n            }\n            const depthTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.depthTexture);\n            if (depthTextureDescription.options.samples !== outputTextureDescription.options.samples) {\n                throw new Error(`FrameGraphObjectRendererTask ${this.name}: the depth texture and the output texture must have the same number of samples`);\n            }\n            depthEnabled = true;\n        }\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.destinationTexture);\n        if (this.depthTexture !== undefined) {\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthTexture, this.depthTexture);\n        }\n        this._textureWidth = outputTextureDescription.size.width;\n        this._textureHeight = outputTextureDescription.size.height;\n        const pass = this._frameGraph.addRenderPass(this.name);\n        pass.setRenderTarget(this.destinationTexture);\n        pass.setRenderTargetDepth(this.depthTexture);\n        pass.setExecuteFunc((context) => {\n            this._renderer.renderList = this.objectList.meshes;\n            this._renderer.particleSystemList = this.objectList.particleSystems;\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\n            context.render(this._renderer, this._textureWidth, this._textureHeight);\n            additionalExecute?.(context);\n        });\n        if (this.dependencies !== undefined) {\n            for (const handle of this.dependencies) {\n                pass.useTexture(handle);\n            }\n        }\n        if (!skipCreationOfDisabledPasses) {\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\n            passDisabled.setRenderTarget(this.destinationTexture);\n            passDisabled.setRenderTargetDepth(this.depthTexture);\n            passDisabled.setExecuteFunc((_context) => {});\n            if (this.dependencies !== undefined) {\n                for (const handle of this.dependencies) {\n                    passDisabled.useTexture(handle);\n                }\n            }\n        }\n    }\n    public override dispose(): void {\n        this._renderer.dispose();\n        super.dispose();\n    }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// eslint-disable-next-line import/no-internal-modules\nimport type { FrameGraph, FrameGraphTextureHandle, Scene, Camera, FrameGraphObjectList, FrameGraphRenderContext, ObjectRendererOptions } from \"core/index\";\nimport { backbufferColorTextureHandle, backbufferDepthStencilTextureHandle } from \"../../frameGraphTypes\";\nimport { FrameGraphTask } from \"../../frameGraphTask\";\nimport { ObjectRenderer } from \"../../../Rendering/objectRenderer\";\nexport class FrameGraphObjectRendererTask extends FrameGraphTask {\n    public destinationTexture: FrameGraphTextureHandle;\n    public depthTexture?: FrameGraphTextureHandle;\n    public dependencies?: FrameGraphTextureHandle[] = [];\n    private _camera: Camera;\n    public get camera() {\n        return this._camera;\n    }\n    public set camera(camera: Camera) {\n        this._camera = camera;\n        this._renderer.activeCamera = this.camera;\n    }\n    public objectList: FrameGraphObjectList;\n    public depthTest = true;\n    public depthWrite = true;\n    public readonly outputTexture: FrameGraphTextureHandle;\n    public readonly outputDepthTexture: FrameGraphTextureHandle;\n    protected readonly _scene: Scene;\n    protected readonly _renderer: ObjectRenderer;\n    protected _textureWidth: number;\n    protected _textureHeight: number;\n    public get objectRenderer() {\n        return this._renderer;\n    }\n    public override get name() {\n        return this._name;\n    }\n    public override set name(value: string) {\n        this._name = value;\n        if (this._renderer) {\n            this._renderer.name = value;\n        }\n    }\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: ObjectRendererOptions) {\n        super(name, frameGraph);\n        this._scene = scene;\n        this._renderer = new ObjectRenderer(name, scene, options);\n        this.name = name;\n        this._renderer.onBeforeRenderingManagerRenderObservable.add(() => {\n            if (!this._renderer.options.doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n        });\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\n        this.outputDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\n    }\n    public override isReady() {\n        return this._renderer.isReadyForRendering(this._textureWidth, this._textureHeight);\n    }\n    public record(skipCreationOfDisabledPasses = false, additionalExecute?: (context: FrameGraphRenderContext) => void) {\n        if (this.destinationTexture === undefined || this.objectList === undefined) {\n            throw new Error(`FrameGraphObjectRendererTask ${this.name}: destinationTexture and objectList are required`);\n        }\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.destinationTexture);\n        let depthEnabled = false;\n        if (this.depthTexture !== undefined) {\n            if (this.depthTexture === backbufferDepthStencilTextureHandle && this.destinationTexture !== backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer color texture is the only color texture allowed when the depth is the back buffer depth/stencil`\n                );\n            }\n            if (this.depthTexture !== backbufferDepthStencilTextureHandle && this.destinationTexture === backbufferColorTextureHandle) {\n                throw new Error(\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer depth/stencil texture is the only depth texture allowed when the destination is the back buffer color`\n                );\n            }\n            const depthTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.depthTexture);\n            if (depthTextureDescription.options.samples !== outputTextureDescription.options.samples) {\n                throw new Error(`FrameGraphObjectRendererTask ${this.name}: the depth texture and the output texture must have the same number of samples`);\n            }\n            depthEnabled = true;\n        }\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.destinationTexture);\n        if (this.depthTexture !== undefined) {\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthTexture, this.depthTexture);\n        }\n        this._textureWidth = outputTextureDescription.size.width;\n        this._textureHeight = outputTextureDescription.size.height;\n        const pass = this._frameGraph.addRenderPass(this.name);\n        pass.setRenderTarget(this.destinationTexture);\n        pass.setRenderTargetDepth(this.depthTexture);\n        pass.setExecuteFunc((context) => {\n            this._renderer.renderList = this.objectList.meshes;\n            this._renderer.particleSystemList = this.objectList.particleSystems;\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\n            context.render(this._renderer, this._textureWidth, this._textureHeight);\n            additionalExecute?.(context);\n        });\n        if (this.dependencies !== undefined) {\n            for (const handle of this.dependencies) {\n                pass.useTexture(handle);\n            }\n        }\n        if (!skipCreationOfDisabledPasses) {\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\n            passDisabled.setRenderTarget(this.destinationTexture);\n            passDisabled.setRenderTargetDepth(this.depthTexture);\n            passDisabled.setExecuteFunc((_context) => {});\n            if (this.dependencies !== undefined) {\n                for (const handle of this.dependencies) {\n                    passDisabled.useTexture(handle);\n                }\n            }\n        }\n    }\n    public override dispose(): void {\n        this._renderer.dispose();\n        super.dispose();\n    }\n}"
}