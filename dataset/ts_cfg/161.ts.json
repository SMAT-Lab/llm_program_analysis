{
  "type": "file",
  "name": "161.ts",
  "label": "161.ts",
  "start_line": -1,
  "end_line": 63,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 63,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 63,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/161.ts: %dflt\nuseRow = %AM0\nreturn",
              "start_line": 1,
              "end_line": 63,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "getCalcRows",
          "label": "getCalcRows",
          "start_line": 1,
          "end_line": 5,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "rowItems = parameter0: InternalDescriptionsItemType[]\nmergedColumn = parameter1: number\nthis = this: @ts_files/161.ts: %dflt\n%0 = newarray (any)[0]\nrows = %0\n%1 = newarray (any)[0]\ntmpRow = %1\nexceed = false\ncount = 0\n%2 = instanceinvoke rowItems.<@%unk/%unk: .filter()>(%AM3$getCalcRows)\ninstanceinvoke %2.<@%unk/%unk: .forEach()>(%AM2$getCalcRows)\n%3 = tmpRow.<@%unk/%unk: .length>\nif %3 > 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke rows.<@%unk/%unk: .push()>(tmpRow)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "rows = instanceinvoke rows.<@%unk/%unk: .map()>(%AM4$getCalcRows)\n%4 = newarray (InternalDescriptionsItemType[][]|boolean)[2]\n%4[0] = rows\n%4[1] = exceed\nreturn %4",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function getCalcRows(\n  rowItems: InternalDescriptionsItemType[],\n  mergedColumn: number,\n): [rows: InternalDescriptionsItemType[][], exceed: boolean] {\n  let rows: InternalDescriptionsItemType[][] = [];\n  let tmpRow: InternalDescriptionsItemType[] = [];\n  let exceed = false;\n  let count = 0;\n  rowItems\n    .filter((n) => n)\n    .forEach((rowItem) => {\n      const { filled, ...restItem } = rowItem;\n      if (filled) {\n        tmpRow.push(restItem);\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n        return;\n      }\n      const restSpan = mergedColumn - count;\n      count += rowItem.span || 1;\n      if (count >= mergedColumn) {\n        if (count > mergedColumn) {\n          exceed = true;\n          tmpRow.push({ ...restItem, span: restSpan });\n        } else {\n          tmpRow.push(restItem);\n        }\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n      } else {\n        tmpRow.push(restItem);\n      }\n    });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map((rows) => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - count + 1;\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 58,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/161.ts: %dflt\n%0 = staticinvoke <@ts_files/161.ts: %dflt.getCalcRows(InternalDescriptionsItemType[], number)>(items, mergedColumn)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => getCalcRows(items, mergedColumn)"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mergedColumn = parameter0: number\nitems = parameter1: InternalDescriptionsItemType[]\nthis = this: @ts_files/161.ts: %dflt\n%1 = newarray (InternalDescriptionsItemType[]|number)[2]\n%1[0] = items\n%1[1] = mergedColumn\n%0 = staticinvoke <@%unk/%unk: .useMemo()>(%AM1$%AM0, %1)\nrows = %0[0]\nexceed = %0[1]\n%2 = process.<@%unk/%unk: .env>\n%3 = %2.<@%unk/%unk: .NODE_ENV>\nif %3 !== 'production'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "warning = staticinvoke <@%unk/%unk: .devUseWarning()>('Descriptions')\n%4 = !exceed\nstaticinvoke <@%unk/%unk: .warning()>(%4, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return rows",
                      "start_line": 51,
                      "end_line": 63,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(mergedColumn: number, items: InternalDescriptionsItemType[]) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.');\n  }\n  return rows;\n}"
        },
        {
          "type": "function",
          "name": "%AM2$getCalcRows",
          "label": "%AM2$getCalcRows",
          "start_line": 1,
          "end_line": 15,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures0 = parameter0: [tmpRow, rows, count, mergedColumn, exceed]\nrowItem = parameter1: unknown\ntmpRow = %closures0.tmpRow\nrows = %closures0.rows\ncount = %closures0.count\nmergedColumn = %closures0.mergedColumn\nexceed = %closures0.exceed\nthis = this: @ts_files/161.ts: %dflt\n%0 = rowItem\nfilled = %0.<@%unk/%unk: .filled>\nrestItem = %0.<@%unk/%unk: .restItem>\nif filled != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke tmpRow.<@%unk/%unk: .push()>(restItem)\ninstanceinvoke rows.<@%unk/%unk: .push()>(tmpRow)\n%1 = newarray (any)[0]\ntmpRow = %1\ncount = 0\nreturn",
                  "start_line": 1,
                  "end_line": 63,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "restSpan = mergedColumn - count\n%2 = rowItem.<@%unk/%unk: .span>\ncount = count + %2 || 1\nif count >= mergedColumn",
                  "start_line": 25,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "if count > mergedColumn",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "exceed = true\n%3 = new @ts_files/161.ts: %AC$%dflt$%AM2$getCalcRows$0\ninstanceinvoke %3.<@ts_files/161.ts: %AC$%dflt$%AM2$getCalcRows$0.constructor()>()\ninstanceinvoke tmpRow.<@%unk/%unk: .push()>(%3)",
                          "start_line": 29,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke rows.<@%unk/%unk: .push()>(tmpRow)\n%4 = newarray (any)[0]\ntmpRow = %4\ncount = 0",
                              "start_line": 1,
                              "end_line": 37,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "return",
                                  "start_line": 23,
                                  "end_line": 63,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "instanceinvoke tmpRow.<@%unk/%unk: .push()>(restItem)",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke tmpRow.<@%unk/%unk: .push()>(restItem)",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(rowItem) => {\n      const { filled, ...restItem } = rowItem;\n      if (filled) {\n        tmpRow.push(restItem);\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n        return;\n      }\n      const restSpan = mergedColumn - count;\n      count += rowItem.span || 1;\n      if (count >= mergedColumn) {\n        if (count > mergedColumn) {\n          exceed = true;\n          tmpRow.push({ ...restItem, span: restSpan });\n        } else {\n          tmpRow.push(restItem);\n        }\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n      } else {\n        tmpRow.push(restItem);\n      }\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$getCalcRows",
          "label": "%AM3$getCalcRows",
          "start_line": 1,
          "end_line": 14,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "n = parameter0: unknown\nthis = this: @ts_files/161.ts: %dflt\nreturn n",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(n) => n"
        },
        {
          "type": "function",
          "name": "%AM5$%AM4$getCalcRows",
          "label": "%AM5$%AM4$getCalcRows",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "acc = parameter0: unknown\nitem = parameter1: unknown\nthis = this: @ts_files/161.ts: %dflt\n%0 = item.<@%unk/%unk: .span>\n%1 = %0 || 1\n%2 = acc + %1\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(acc, item) => acc + (item.span || 1)"
        },
        {
          "type": "function",
          "name": "%AM4$getCalcRows",
          "label": "%AM4$getCalcRows",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "%closures1 = parameter0: [mergedColumn]\nrows = parameter1: unknown\nmergedColumn = %closures1.mergedColumn\nthis = this: @ts_files/161.ts: %dflt\ncount = instanceinvoke rows.<@%unk/%unk: .reduce()>(%AM5$%AM4$getCalcRows, 0)\nif count < mergedColumn",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = rows.<@%unk/%unk: .length>\n%1 = %0 - 1\nlast = rows.<@%unk/%unk: .%1>\n%2 = mergedColumn - count\n%3 = %2 + 1\nlast.<@%unk/%unk: .span> = %3\nreturn rows",
                  "start_line": 1,
                  "end_line": 63,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return rows",
                  "start_line": 51,
                  "end_line": 63,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(rows) => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - count + 1;\n      return rows;\n    }\n    return rows;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$getCalcRows$0",
      "label": "%AC$%dflt$%AM2$getCalcRows$0",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ ...restItem, span: restSpan }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { useMemo } from 'react';\nimport type { InternalDescriptionsItemType } from '..';\nimport { devUseWarning } from '../../_util/warning';\n// Calculate the sum of span in a row\nfunction getCalcRows(\n  rowItems: InternalDescriptionsItemType[],\n  mergedColumn: number,\n): [rows: InternalDescriptionsItemType[][], exceed: boolean] {\n  let rows: InternalDescriptionsItemType[][] = [];\n  let tmpRow: InternalDescriptionsItemType[] = [];\n  let exceed = false;\n  let count = 0;\n  rowItems\n    .filter((n) => n)\n    .forEach((rowItem) => {\n      const { filled, ...restItem } = rowItem;\n      if (filled) {\n        tmpRow.push(restItem);\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n        return;\n      }\n      const restSpan = mergedColumn - count;\n      count += rowItem.span || 1;\n      if (count >= mergedColumn) {\n        if (count > mergedColumn) {\n          exceed = true;\n          tmpRow.push({ ...restItem, span: restSpan });\n        } else {\n          tmpRow.push(restItem);\n        }\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n      } else {\n        tmpRow.push(restItem);\n      }\n    });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map((rows) => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - count + 1;\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn: number, items: InternalDescriptionsItemType[]) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.');\n  }\n  return rows;\n};\nexport default useRow;"
}