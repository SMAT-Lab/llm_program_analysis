{
  "type": "file",
  "name": "48.ts",
  "label": "48.ts",
  "start_line": -1,
  "end_line": 38,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 38,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/48.ts: %dflt\nTAG = 'AbilityUtils'\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "startAbility",
          "label": "startAbility",
          "start_line": 1,
          "end_line": 23,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "want = parameter0: Want\nthis = this: @ts_files/48.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke GlobalContext.<@%unk/%unk: .getContext()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('appContext')\nappContext = <common.UIAbilityContext>%1\n%2 = instanceinvoke appContext.<@%unk/%unk: .startAbility()>(want)\n%3 = await %2\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, 'raul startAbility complete')",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%4 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(error)\n%5 = 'raul startAbility failed, error: ' + %4\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %5)",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function startAbility(want: Want): Promise<void> {\n  try {\n    let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n    await appContext.startAbility(want);\n    Log.debug(TAG, 'raul startAbility complete');\n  } catch (error) {\n    Log.error(TAG, 'raul startAbility failed, error: ' + JSON.stringify(error));\n  }\n}"
        },
        {
          "type": "function",
          "name": "terminateSelf",
          "label": "terminateSelf",
          "start_line": 1,
          "end_line": 33,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/48.ts: %dflt\n%0 = instanceinvoke GlobalContext.<@%unk/%unk: .getContext()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('appContext')\nappContext = <common.UIAbilityContext>%1\n%2 = instanceinvoke appContext.<@%unk/%unk: .terminateSelf()>()\n%3 = await %2\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function terminateSelf(): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelf();\n}"
        },
        {
          "type": "function",
          "name": "terminateSelfWithResult",
          "label": "terminateSelfWithResult",
          "start_line": 1,
          "end_line": 38,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "parameter = parameter0: unknown\nthis = this: @ts_files/48.ts: %dflt\n%0 = instanceinvoke GlobalContext.<@%unk/%unk: .getContext()>()\n%1 = instanceinvoke %0.<@%unk/%unk: .getObject()>('appContext')\nappContext = <common.UIAbilityContext>%1\n%2 = instanceinvoke appContext.<@%unk/%unk: .terminateSelfWithResult()>(parameter)\n%3 = await %2\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function terminateSelfWithResult(parameter): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelfWithResult(parameter);\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Want from '@ohos.application.Want';\nimport common from '@ohos.app.ability.common';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'AbilityUtils';\n\nexport async function startAbility(want: Want): Promise<void> {\n  try {\n    let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n    await appContext.startAbility(want);\n    Log.debug(TAG, 'raul startAbility complete');\n  } catch (error) {\n    Log.error(TAG, 'raul startAbility failed, error: ' + JSON.stringify(error));\n  }\n}\n\nexport async function terminateSelf(): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelf();\n}\n\nexport async function terminateSelfWithResult(parameter): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelfWithResult(parameter);\n}\n"
}