digraph "139.ts" {
subgraph "cluster_@ts_files/139.ts: %dflt.[static]%dflt()" {
  label="@ts_files/139.ts: %dflt.[static]%dflt()";
  Node33770 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      initialTooltipMessage = 'initial tooltip message'
      staticinvoke <@%unk/%unk: .describe()>('MatTooltip', %AM0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)" {
  label="@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)";
  Node61570 [label="id:0
      tooltip = parameter0: MatTooltip
      shouldExist = parameter1: boolean
      this = this: @ts_files/139.ts: %dflt
      %0 = tooltip.<@%unk/%unk: ._tooltipInstance>
      %1 = !%0
      %2 = !%1
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(shouldExist)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)" {
  label="@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)";
  Node69720 [label="id:0
      overlayContainer = parameter0: HTMLElement
      isVisible = parameter1: boolean
      this = this: @ts_files/139.ts: %dflt
      tooltip = instanceinvoke overlayContainer.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      event = staticinvoke <@%unk/%unk: .createFakeEvent()>('animationend')
      %0 = new @ts_files/139.ts: %AC$%dflt$finishCurrentTooltipAnimation$33
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$finishCurrentTooltipAnimation$33.constructor()>()
      instanceinvoke Object.<@%unk/%unk: .defineProperty()>(event, 'animationName', %0)
      staticinvoke <@%unk/%unk: .dispatchEvent()>(tooltip, event)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM2$%AM1$%AM0(OverlayContainer, FocusMonitor, Platform)" {
  label="@ts_files/139.ts: %dflt.%AM2$%AM1$%AM0(OverlayContainer, FocusMonitor, Platform)";
  Node67520 [label="id:0
      oc = parameter0: OverlayContainer
      fm = parameter1: FocusMonitor
      pl = parameter2: Platform
      this = this: @ts_files/139.ts: %dflt
      overlayContainerElement = instanceinvoke oc.<@%unk/%unk: .getContainerElement()>()
      focusMonitor = fm
      platform = pl
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM1$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM1$%AM0()";
  Node25730 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM1$%AM0$1
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM1$%AM0$1.constructor()>()
      instanceinvoke TestBed.<@%unk/%unk: .configureTestingModule()>(%0)
      %1 = newarray (unknown)[3]
      %1[0] = OverlayContainer
      %1[1] = FocusMonitor
      %1[2] = Platform
      %2 = staticinvoke <@%unk/%unk: .inject()>(%1, %AM2$%AM1$%AM0)
      staticinvoke <@%unk/%unk: .%2()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM4$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM4$%AM3$%AM0()";
  Node28420 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %0 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %1 = fixture.<@%unk/%unk: .debugElement>
      buttonDebugElement = instanceinvoke %1.<@%unk/%unk: .query()>(%0)
      buttonElement = buttonDebugElement.<@%unk/%unk: .nativeElement>
      %2 = buttonDebugElement.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %2.<@%unk/%unk: .get()>(MatTooltip)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM5$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM5$%AM3$%AM0()";
  Node28430 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %2 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%2
      %3 = staticinvoke <@%unk/%unk: .expect()>(tooltipElement instanceof HTMLElement)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(true)
      %4 = tooltipElement.<@%unk/%unk: .classList>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-show')
      %6 = overlayContainerElement.<@%unk/%unk: .textContent>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(tooltipDelay)
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toBe()>(true)
      staticinvoke <@%unk/%unk: .tick()>(tooltipDelay)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %10 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>(false)
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM6$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM6$%AM3$%AM0()";
  Node28440 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %2 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      instanceinvoke %2.<@%unk/%unk: .detach()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toBe()>(false)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>(true)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM7$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM7$%AM3$%AM0()";
  Node28450 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(tooltipDelay)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(false)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = overlayContainerElement.<@%unk/%unk: .textContent>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toContain()>('')
      staticinvoke <@%unk/%unk: .tick()>(tooltipDelay)
      %4 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(true)
      %6 = overlayContainerElement.<@%unk/%unk: .textContent>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM8$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM8$%AM3$%AM0()";
  Node28460 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM8$%AM3$%AM0$4
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM8$%AM3$%AM0$4.constructor()>()
      %1 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %1.<@%unk/%unk: .configureTestingModule()>(%0)
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %3 = fixture.<@%unk/%unk: .debugElement>
      %4 = instanceinvoke %3.<@%unk/%unk: .query()>(%2)
      %5 = %4.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %5.<@%unk/%unk: .get()>(MatTooltip)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(false)
      staticinvoke <@%unk/%unk: .tick()>(1337)
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toBe()>(true)
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %10 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>(true)
      staticinvoke <@%unk/%unk: .tick()>(7331)
      %12 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %13 = staticinvoke <@%unk/%unk: .expect()>(%12)
      instanceinvoke %13.<@%unk/%unk: .toBe()>(false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM9$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM9$%AM3$%AM0()";
  Node28470 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM9$%AM3$%AM0$7
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM9$%AM3$%AM0$7.constructor()>()
      %1 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %1.<@%unk/%unk: .configureTestingModule()>(%0)
      newFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipDemoWithoutPositionBinding)
      instanceinvoke newFixture.<@%unk/%unk: .detectChanges()>()
      %2 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %3 = newFixture.<@%unk/%unk: .debugElement>
      %4 = instanceinvoke %3.<@%unk/%unk: .query()>(%2)
      %5 = %4.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %5.<@%unk/%unk: .get()>(MatTooltip)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke newFixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %6 = tooltipDirective.<@%unk/%unk: .position>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>('right')
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %9 = %8.<@%unk/%unk: .main>
      %10 = %9.<@%unk/%unk: .overlayX>
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>('start')
      %12 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %13 = %12.<@%unk/%unk: .fallback>
      %14 = %13.<@%unk/%unk: .overlayX>
      %15 = staticinvoke <@%unk/%unk: .expect()>(%14)
      instanceinvoke %15.<@%unk/%unk: .toBe()>('end')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM10$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM10$%AM3$%AM0()";
  Node28870 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM10$%AM3$%AM0$10
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM10$%AM3$%AM0$10.constructor()>()
      %1 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %1.<@%unk/%unk: .configureTestingModule()>(%0)
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipDemoWithoutTooltipClassBinding)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = fixture.<@%unk/%unk: .componentInstance>
      tooltipDirective = %2.<@%unk/%unk: .tooltip>
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      overlayRef = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %3 = overlayRef.<@%unk/%unk: .overlayElement>
      %4 = instanceinvoke %3.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%4
      %5 = tooltipDirective.<@%unk/%unk: .tooltipClass>
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>('my-default-tooltip-class')
      %7 = tooltipElement.<@%unk/%unk: .classList>
      %8 = staticinvoke <@%unk/%unk: .expect()>(%7)
      instanceinvoke %8.<@%unk/%unk: .toContain()>('my-default-tooltip-class')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM11$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM11$%AM3$%AM0()";
  Node28880 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM11$%AM3$%AM0$13
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM11$%AM3$%AM0$13.constructor()>()
      %1 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %1.<@%unk/%unk: .configureTestingModule()>(%0)
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipDemoWithTooltipClassBinding)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = fixture.<@%unk/%unk: .componentInstance>
      tooltipDirective = %2.<@%unk/%unk: .tooltip>
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      overlayRef = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %3 = overlayRef.<@%unk/%unk: .overlayElement>
      %4 = instanceinvoke %3.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%4
      %5 = tooltipDirective.<@%unk/%unk: .tooltipClass>
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      %7 = %6.<@%unk/%unk: .not>
      instanceinvoke %7.<@%unk/%unk: .toBe()>('my-default-tooltip-class')
      %8 = tooltipElement.<@%unk/%unk: .classList>
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      %10 = %9.<@%unk/%unk: .not>
      instanceinvoke %10.<@%unk/%unk: .toContain()>('my-default-tooltip-class')
      %11 = tooltipElement.<@%unk/%unk: .classList>
      %12 = staticinvoke <@%unk/%unk: .expect()>(%11)
      instanceinvoke %12.<@%unk/%unk: .toContain()>('fixed-tooltip-class')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM12$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM12$%AM3$%AM0()";
  Node28890 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28891 [label="id:1
      return"];
  Node28892 [label="id:2
      %3 = new @ts_files/139.ts: %AC$%dflt$%AM12$%AM3$%AM0$16
      instanceinvoke %3.<@ts_files/139.ts: %AC$%dflt$%AM12$%AM3$%AM0$16.constructor()>()
      %4 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %4.<@%unk/%unk: .configureTestingModule()>(%3)
      wideFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(WideTooltipDemo)
      instanceinvoke wideFixture.<@%unk/%unk: .detectChanges()>()
      %5 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %6 = wideFixture.<@%unk/%unk: .debugElement>
      %7 = instanceinvoke %6.<@%unk/%unk: .query()>(%5)
      %8 = %7.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %8.<@%unk/%unk: .get()>(MatTooltip)
      %9 = wideFixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %9.<@%unk/%unk: .querySelector()>('button')
      triggerRect = instanceinvoke button.<@%unk/%unk: .getBoundingClientRect()>()
      %10 = triggerRect.<@%unk/%unk: .right>
      %11 = %10 - 100
      %12 = triggerRect.<@%unk/%unk: .top>
      %13 = %12 + 100
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(button, 'mouseenter', %11, %13)
      instanceinvoke wideFixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %14 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %15 = staticinvoke <@%unk/%unk: .expect()>(%14)
      instanceinvoke %15.<@%unk/%unk: .toBe()>(true)
      %16 = triggerRect.<@%unk/%unk: .right>
      %17 = %16 - 250
      %18 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %19 = %18.<@%unk/%unk: .overlayElement>
      %20 = %19.<@%unk/%unk: .offsetLeft>
      %21 = staticinvoke <@%unk/%unk: .expect()>(%20)
      instanceinvoke %21.<@%unk/%unk: .toBeLessThan()>(%17)
      %22 = triggerRect.<@%unk/%unk: .bottom>
      %23 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %24 = %23.<@%unk/%unk: .overlayElement>
      %25 = %24.<@%unk/%unk: .offsetTop>
      %26 = staticinvoke <@%unk/%unk: .expect()>(%25)
      instanceinvoke %26.<@%unk/%unk: .toBeGreaterThanOrEqual()>(%22)
      return"];
  Node28890 -> Node28891;
  Node28890 -> Node28892;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM14$%AM13$%AM3$%AM0(unknown)" {
  label="@ts_files/139.ts: %dflt.%AM14$%AM13$%AM3$%AM0(unknown)";
  Node39900 [label="id:0
      resolve = parameter0: unknown
      this = this: @ts_files/139.ts: %dflt
      %0 = staticinvoke <@%unk/%unk: .setTimeout()>(resolve)
      return %0"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM13$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM13$%AM3$%AM0()";
  Node28900 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28901 [label="id:1
      return"];
  Node28902 [label="id:2
      %3 = new @ts_files/139.ts: %AC$%dflt$%AM13$%AM3$%AM0$17
      instanceinvoke %3.<@ts_files/139.ts: %AC$%dflt$%AM13$%AM3$%AM0$17.constructor()>()
      %4 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %4.<@%unk/%unk: .configureTestingModule()>(%3)
      wideFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(WideTooltipDemo)
      instanceinvoke wideFixture.<@%unk/%unk: .detectChanges()>()
      %5 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %6 = wideFixture.<@%unk/%unk: .debugElement>
      %7 = instanceinvoke %6.<@%unk/%unk: .query()>(%5)
      %8 = %7.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %8.<@%unk/%unk: .get()>(MatTooltip)
      %9 = wideFixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %9.<@%unk/%unk: .querySelector()>('button')
      triggerRect = instanceinvoke button.<@%unk/%unk: .getBoundingClientRect()>()
      %10 = triggerRect.<@%unk/%unk: .right>
      %11 = %10 - 100
      %12 = triggerRect.<@%unk/%unk: .top>
      %13 = %12 + 100
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(button, 'mouseenter', %11, %13)
      instanceinvoke wideFixture.<@%unk/%unk: .detectChanges()>()
      %14 = new @%unk/%unk: Promise<void>
      instanceinvoke %14.<@%unk/%unk: Promise.constructor()>(%AM14$%AM13$%AM3$%AM0)
      %15 = await %14
      %16 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %17 = staticinvoke <@%unk/%unk: .expect()>(%16)
      instanceinvoke %17.<@%unk/%unk: .toBe()>(true)
      %18 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %19 = %18.<@%unk/%unk: .overlayElement>
      actualOffsetLeft = %19.<@%unk/%unk: .offsetLeft>
      %20 = triggerRect.<@%unk/%unk: .right>
      %21 = %20 - 100
      expectedOffsetLeft = %21 - 20
      %22 = expectedOffsetLeft + 1
      %23 = staticinvoke <@%unk/%unk: .expect()>(actualOffsetLeft)
      instanceinvoke %23.<@%unk/%unk: .toBeLessThanOrEqual()>(%22)
      %24 = expectedOffsetLeft - 1
      %25 = staticinvoke <@%unk/%unk: .expect()>(actualOffsetLeft)
      instanceinvoke %25.<@%unk/%unk: .toBeGreaterThanOrEqual()>(%24)
      %26 = triggerRect.<@%unk/%unk: .top>
      %27 = %26 + 100
      %28 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %29 = %28.<@%unk/%unk: .overlayElement>
      %30 = %29.<@%unk/%unk: .offsetTop>
      %31 = staticinvoke <@%unk/%unk: .expect()>(%30)
      instanceinvoke %31.<@%unk/%unk: .toBe()>(%27)
      return"];
  Node28900 -> Node28901;
  Node28900 -> Node28902;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM15$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM15$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM15$%AM3$%AM0$20
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM15$%AM3$%AM0$20.constructor()>()
      %1 = instanceinvoke TestBed.<@%unk/%unk: .resetTestingModule()>()
      instanceinvoke %1.<@%unk/%unk: .configureTestingModule()>(%0)
      newFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipDemoWithoutPositionBinding)
      instanceinvoke newFixture.<@%unk/%unk: .detectChanges()>()
      %2 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %3 = newFixture.<@%unk/%unk: .debugElement>
      %4 = instanceinvoke %3.<@%unk/%unk: .query()>(%2)
      %5 = %4.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %5.<@%unk/%unk: .get()>(MatTooltip)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke newFixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %6 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %7 = %6.<@%unk/%unk: .overlayElement>
      %8 = %7.<@%unk/%unk: .classList>
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-non-interactive')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM16$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM16$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      overlayRef = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %0 = !overlayRef
      %1 = !%0
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBeTruthy()>()
      %3 = overlayRef.<@%unk/%unk: .overlayElement>
      %4 = %3.<@%unk/%unk: .classList>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      %6 = instanceinvoke %5.<@%unk/%unk: .withContext()>('Expected the overlay panel element to have the tooltip panel class set.')
      instanceinvoke %6.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM17$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM17$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .disabled> = true
      %0 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %0.<@%unk/%unk: .markForCheck()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %1 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBe()>(false)
      tooltipDirective.<@%unk/%unk: .disabled> = false
      %3 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %3.<@%unk/%unk: .markForCheck()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %4 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(true)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM18$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM18$%AM3$%AM0()";
  Node28950 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .hideDelay> = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      tooltipDirective.<@%unk/%unk: .disabled> = true
      staticinvoke <@%unk/%unk: .tick()>(0)
      %2 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM19$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM19$%AM3$%AM0()";
  Node28960 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      %2 = fixture.<@%unk/%unk: .componentInstance>
      %2.<@%unk/%unk: .message> = ''
      %3 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %3.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %4 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM21$%AM20$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM21$%AM20$%AM3$%AM0()";
  Node32020 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM20$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM20$%AM3$%AM0()";
  Node28880 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(tooltipDelay)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(false)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = overlayContainerElement.<@%unk/%unk: .textContent>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toContain()>('')
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>()
      %4 = instanceinvoke fixture.<@%unk/%unk: .whenStable()>()
      instanceinvoke %4.<@%unk/%unk: .then()>(%AM21$%AM20$%AM3$%AM0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM22$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM22$%AM3$%AM0()";
  Node28900 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDirective.<@%unk/%unk: .message> = undefined
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDirective.<@%unk/%unk: .message> = null
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDirective.<@%unk/%unk: .message> = ''
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      tooltipDirective.<@%unk/%unk: .message> = '   '
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM23$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM23$%AM3$%AM0()";
  Node28910 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(tooltipDelay)
      %2 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(true)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(tooltipDelay)
      %4 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(true)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM24$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM24$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'below'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, true)
      %0 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %1 = staticinvoke <@%unk/%unk: .spyOn()>(%0, 'updatePosition')
      %2 = %1.<@%unk/%unk: .and>
      instanceinvoke %2.<@%unk/%unk: .callThrough()>()
      tooltipDirective.<@%unk/%unk: .position> = 'above'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, true)
      %3 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %4 = %3.<@%unk/%unk: .updatePosition>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toHaveBeenCalled()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM25$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM25$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'right'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>()
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, true)
      %0 = <any>tooltipDirective
      %1 = staticinvoke <@%unk/%unk: .spyOn()>(%0, '_updatePosition')
      %2 = %1.<@%unk/%unk: .and>
      spy = instanceinvoke %2.<@%unk/%unk: .callThrough()>()
      %3 = dir.<@%unk/%unk: .change>
      instanceinvoke %3.<@%unk/%unk: .next()>('rtl')
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, true)
      %4 = staticinvoke <@%unk/%unk: .expect()>(spy)
      instanceinvoke %4.<@%unk/%unk: .toHaveBeenCalled()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM27$%AM26$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM27$%AM26$%AM3$%AM0()";
  Node32140 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'right'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM26$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM26$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'left'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %0 = staticinvoke <@%unk/%unk: .expect()>(%AM27$%AM26$%AM3$%AM0)
      %1 = %0.<@%unk/%unk: .not>
      instanceinvoke %1.<@%unk/%unk: .toThrow()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM28$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM28$%AM3$%AM0()";
  Node28960 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = tooltipDirective.<@%unk/%unk: ._tooltipInstance>
      %1 = instanceinvoke %0.<@%unk/%unk: .isVisible()>()
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = overlayContainerElement.<@%unk/%unk: .textContent>
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      newMessage = 'new tooltip message'
      tooltipDirective.<@%unk/%unk: .message> = newMessage
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %5 = overlayContainerElement.<@%unk/%unk: .textContent>
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toContain()>(newMessage)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM29$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM29$%AM3$%AM0()";
  Node28970 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%0
      %1 = tooltipElement.<@%unk/%unk: .classList>
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      %3 = %2.<@%unk/%unk: .not>
      instanceinvoke %3.<@%unk/%unk: .toContain()>('custom-one', 'Expected to not have the class before enabling matTooltipClass')
      %4 = tooltipElement.<@%unk/%unk: .classList>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      %6 = %5.<@%unk/%unk: .not>
      instanceinvoke %6.<@%unk/%unk: .toContain()>('custom-two', 'Expected to not have the class before enabling matTooltipClass')
      %7 = fixture.<@%unk/%unk: .componentInstance>
      %7.<@%unk/%unk: .showTooltipClass> = true
      %8 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %8.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %9 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%9
      %10 = tooltipElement.<@%unk/%unk: .classList>
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      %12 = instanceinvoke %11.<@%unk/%unk: .withContext()>('Expected to have the class after enabling matTooltipClass')
      instanceinvoke %12.<@%unk/%unk: .toContain()>('custom-one')
      %13 = tooltipElement.<@%unk/%unk: .classList>
      %14 = staticinvoke <@%unk/%unk: .expect()>(%13)
      %15 = instanceinvoke %14.<@%unk/%unk: .withContext()>('Expected to have the class after enabling matTooltipClass')
      instanceinvoke %15.<@%unk/%unk: .toContain()>('custom-two')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM30$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM30$%AM3$%AM0()";
  Node28890 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .destroy()>()
      %2 = overlayContainerElement.<@%unk/%unk: .childNodes>
      %3 = %2.<@%unk/%unk: .length>
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toBe()>(0)
      %5 = overlayContainerElement.<@%unk/%unk: .textContent>
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>('')
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM31$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM31$%AM3$%AM0()";
  Node28900 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      dynamicTooltipsDemoFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(DynamicTooltipsDemo)
      dynamicTooltipsComponent = dynamicTooltipsDemoFixture.<@%unk/%unk: .componentInstance>
      %0 = newarray (string)[2]
      %0[0] = 'Tooltip One'
      %0[1] = 'Tooltip Two'
      dynamicTooltipsComponent.<@%unk/%unk: .tooltips> = %0
      instanceinvoke dynamicTooltipsDemoFixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %1 = dynamicTooltipsDemoFixture.<@%unk/%unk: .nativeElement>
      buttons = instanceinvoke %1.<@%unk/%unk: .querySelectorAll()>('button')
      %2 = buttons.<@%unk/%unk: .0>
      firstButtonAria = instanceinvoke %2.<@%unk/%unk: .getAttribute()>('aria-describedby')
      %3 = '#' + firstButtonAria
      %4 = instanceinvoke document.<@%unk/%unk: .querySelector()>(%3)
      %5 = %4.<@%unk/%unk: .textContent>
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>('Tooltip One')
      %7 = buttons.<@%unk/%unk: .1>
      secondButtonAria = instanceinvoke %7.<@%unk/%unk: .getAttribute()>('aria-describedby')
      %8 = '#' + secondButtonAria
      %9 = instanceinvoke document.<@%unk/%unk: .querySelector()>(%8)
      %10 = %9.<@%unk/%unk: .textContent>
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>('Tooltip Two')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM32$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM32$%AM3$%AM0()";
  Node28910 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      ariaLabelFixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(DataBoundAriaLabelTooltip)
      instanceinvoke ariaLabelFixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %0 = ariaLabelFixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      %1 = instanceinvoke button.<@%unk/%unk: .getAttribute()>('aria-describedby')
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBeFalsy()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM33$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM33$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = instanceinvoke buttonElement.<@%unk/%unk: .getAttribute()>('aria-describedby')
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBeTruthy()>()
      %2 = fixture.<@%unk/%unk: .componentInstance>
      %2.<@%unk/%unk: .tooltipDisabled> = true
      %3 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %3.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %4 = instanceinvoke buttonElement.<@%unk/%unk: .hasAttribute()>('aria-describedby')
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(false)
      %6 = fixture.<@%unk/%unk: .componentInstance>
      %6.<@%unk/%unk: .tooltipDisabled> = false
      %7 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %7.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      %8 = instanceinvoke buttonElement.<@%unk/%unk: .getAttribute()>('aria-describedby')
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toBeTruthy()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM34$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM34$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>()
      staticinvoke <@%unk/%unk: .tick()>(tooltipDelay)
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .showButton> = false
      %1 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %1.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM35$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM35$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      spy = instanceinvoke jasmine.<@%unk/%unk: .createSpy()>('complete spy')
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM35$%AM3$%AM0$23
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM35$%AM3$%AM0$23.constructor()>()
      %1 = tooltipDirective.<@%unk/%unk: ._tooltipInstance>
      %2 = instanceinvoke %1.<@%unk/%unk: .afterHidden()>()
      subscription = instanceinvoke %2.<@%unk/%unk: .subscribe()>(%0)
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(0)
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = staticinvoke <@%unk/%unk: .expect()>(spy)
      instanceinvoke %3.<@%unk/%unk: .toHaveBeenCalled()>()
      instanceinvoke subscription.<@%unk/%unk: .unsubscribe()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM36$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM36$%AM3$%AM0()";
  Node28950 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'left'
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      leftOrigin = %0.<@%unk/%unk: .main>
      tooltipDirective.<@%unk/%unk: .position> = 'right'
      %1 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      rightOrigin = %1.<@%unk/%unk: .main>
      tooltipDirective.<@%unk/%unk: .position> = 'before'
      %2 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      %3 = %2.<@%unk/%unk: .main>
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toEqual()>(leftOrigin)
      tooltipDirective.<@%unk/%unk: .position> = 'after'
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      %6 = %5.<@%unk/%unk: .main>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toEqual()>(rightOrigin)
      dir.<@%unk/%unk: .value> = 'rtl'
      tooltipDirective.<@%unk/%unk: .position> = 'before'
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      %9 = %8.<@%unk/%unk: .main>
      %10 = staticinvoke <@%unk/%unk: .expect()>(%9)
      instanceinvoke %10.<@%unk/%unk: .toEqual()>(leftOrigin)
      tooltipDirective.<@%unk/%unk: .position> = 'after'
      %11 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOrigin()>()
      %12 = %11.<@%unk/%unk: .main>
      %13 = staticinvoke <@%unk/%unk: .expect()>(%12)
      instanceinvoke %13.<@%unk/%unk: .toEqual()>(rightOrigin)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM37$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM37$%AM3$%AM0()";
  Node28960 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltipDirective.<@%unk/%unk: .position> = 'left'
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      leftOverlayPosition = %0.<@%unk/%unk: .main>
      tooltipDirective.<@%unk/%unk: .position> = 'right'
      %1 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      rightOverlayPosition = %1.<@%unk/%unk: .main>
      tooltipDirective.<@%unk/%unk: .position> = 'before'
      %2 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %3 = %2.<@%unk/%unk: .main>
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toEqual()>(leftOverlayPosition)
      tooltipDirective.<@%unk/%unk: .position> = 'after'
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %6 = %5.<@%unk/%unk: .main>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toEqual()>(rightOverlayPosition)
      dir.<@%unk/%unk: .value> = 'rtl'
      tooltipDirective.<@%unk/%unk: .position> = 'before'
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %9 = %8.<@%unk/%unk: .main>
      %10 = staticinvoke <@%unk/%unk: .expect()>(%9)
      instanceinvoke %10.<@%unk/%unk: .toEqual()>(leftOverlayPosition)
      tooltipDirective.<@%unk/%unk: .position> = 'after'
      %11 = instanceinvoke tooltipDirective.<@%unk/%unk: ._getOverlayPosition()>()
      %12 = %11.<@%unk/%unk: .main>
      %13 = staticinvoke <@%unk/%unk: .expect()>(%12)
      instanceinvoke %13.<@%unk/%unk: .toEqual()>(rightOverlayPosition)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM39$%AM38$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM39$%AM38$%AM3$%AM0()";
  Node32200 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .position> = 'everywhere'
      %1 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %1.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM38$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM38$%AM3$%AM0()";
  Node28970 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = staticinvoke <@%unk/%unk: .expect()>(%AM39$%AM38$%AM3$%AM0)
      instanceinvoke %0.<@%unk/%unk: .toThrowError()>('Tooltip position \"everywhere\" is invalid.')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM40$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM40$%AM3$%AM0()";
  Node28900 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      dir.<@%unk/%unk: .value> = 'rtl'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      tooltipWrapper = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.cdk-overlay-connected-position-bounding-box')
      %0 = staticinvoke <@%unk/%unk: .expect()>(tooltipWrapper)
      %1 = instanceinvoke %0.<@%unk/%unk: .withContext()>('Expected tooltip to be shown.')
      instanceinvoke %1.<@%unk/%unk: .toBeTruthy()>()
      %2 = instanceinvoke tooltipWrapper.<@%unk/%unk: .getAttribute()>('dir')
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      %4 = instanceinvoke %3.<@%unk/%unk: .withContext()>('Expected tooltip to be in RTL mode.')
      instanceinvoke %4.<@%unk/%unk: .toBe()>('rtl')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM41$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM41$%AM3$%AM0()";
  Node28910 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      dir.<@%unk/%unk: .value> = 'rtl'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      tooltipWrapper = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.cdk-overlay-connected-position-bounding-box')
      %0 = instanceinvoke tooltipWrapper.<@%unk/%unk: .getAttribute()>('dir')
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      %2 = instanceinvoke %1.<@%unk/%unk: .withContext()>('Expected tooltip to be in RTL.')
      instanceinvoke %2.<@%unk/%unk: .toBe()>('rtl')
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(0)
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      dir.<@%unk/%unk: .value> = 'ltr'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      tooltipWrapper = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.cdk-overlay-connected-position-bounding-box')
      %3 = instanceinvoke tooltipWrapper.<@%unk/%unk: .getAttribute()>('dir')
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      %5 = instanceinvoke %4.<@%unk/%unk: .withContext()>('Expected tooltip to be in LTR.')
      instanceinvoke %5.<@%unk/%unk: .toBe()>('ltr')
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM42$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM42$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .message> = 100
      %1 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %1.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = tooltipDirective.<@%unk/%unk: .message>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>('100')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM43$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM43$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      %2 = overlayContainerElement.<@%unk/%unk: .textContent>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      %4 = document.<@%unk/%unk: .body>
      instanceinvoke %4.<@%unk/%unk: .click()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>(false)
      %7 = overlayContainerElement.<@%unk/%unk: .textContent>
      %8 = staticinvoke <@%unk/%unk: .expect()>(%7)
      instanceinvoke %8.<@%unk/%unk: .toBe()>('')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM44$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM44$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      %2 = overlayContainerElement.<@%unk/%unk: .textContent>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      %4 = document.<@%unk/%unk: .body>
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(%4, 'auxclick')
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>(false)
      %7 = overlayContainerElement.<@%unk/%unk: .textContent>
      %8 = staticinvoke <@%unk/%unk: .expect()>(%7)
      instanceinvoke %8.<@%unk/%unk: .toBe()>('')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM45$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM45$%AM3$%AM0()";
  Node28950 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = document.<@%unk/%unk: .body>
      instanceinvoke %0.<@%unk/%unk: .click()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %1 = overlayContainerElement.<@%unk/%unk: .textContent>
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM46$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM46$%AM3$%AM0()";
  Node28960 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      %2 = overlayContainerElement.<@%unk/%unk: .textContent>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toContain()>(initialTooltipMessage)
      %4 = document.<@%unk/%unk: .body>
      staticinvoke <@%unk/%unk: .dispatchKeyboardEvent()>(%4, 'keydown', ESCAPE)
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>(false)
      %7 = overlayContainerElement.<@%unk/%unk: .textContent>
      %8 = staticinvoke <@%unk/%unk: .expect()>(%7)
      instanceinvoke %8.<@%unk/%unk: .toBe()>('')
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM48$%AM47$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM48$%AM47$%AM3$%AM0()";
  Node32200 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = document.<@%unk/%unk: .body>
      staticinvoke <@%unk/%unk: .dispatchKeyboardEvent()>(%0, 'keydown', ESCAPE)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM47$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM47$%AM3$%AM0()";
  Node28970 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = staticinvoke <@%unk/%unk: .expect()>(%AM48$%AM47$%AM3$%AM0)
      %1 = %0.<@%unk/%unk: .not>
      instanceinvoke %1.<@%unk/%unk: .toThrow()>()
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM49$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM49$%AM3$%AM0()";
  Node28990 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = document.<@%unk/%unk: .body>
      event = staticinvoke <@%unk/%unk: .dispatchKeyboardEvent()>(%0, 'keydown', ESCAPE)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .flush()>()
      %1 = event.<@%unk/%unk: .defaultPrevented>
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBe()>(true)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM50$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM50$%AM3$%AM0()";
  Node28910 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = new @ts_files/139.ts: %AC$%dflt$%AM50$%AM3$%AM0$24
      instanceinvoke %0.<@ts_files/139.ts: %AC$%dflt$%AM50$%AM3$%AM0$24.constructor()>()
      event = staticinvoke <@%unk/%unk: .createKeyboardEvent()>('keydown', ESCAPE, undefined, %0)
      %1 = document.<@%unk/%unk: .body>
      staticinvoke <@%unk/%unk: .dispatchEvent()>(%1, event)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .flush()>()
      %2 = event.<@%unk/%unk: .defaultPrevented>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM51$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM51$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@%unk/%unk: .patchElementFocus()>(buttonElement)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke focusMonitor.<@%unk/%unk: .focusVia()>(buttonElement, 'program')
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %0 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBeNull()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM52$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM52$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@%unk/%unk: .patchElementFocus()>(buttonElement)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke focusMonitor.<@%unk/%unk: .focusVia()>(buttonElement, 'mouse')
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %0 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBeNull()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM53$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM53$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@%unk/%unk: .patchElementFocus()>(buttonElement)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke focusMonitor.<@%unk/%unk: .focusVia()>(buttonElement, 'touch')
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %0 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBeNull()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM54$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM54$%AM3$%AM0()";
  Node28950 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      overlayRef = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %2 = staticinvoke <@%unk/%unk: .spyOn()>(overlayRef, 'detach')
      %3 = %2.<@%unk/%unk: .and>
      instanceinvoke %3.<@%unk/%unk: .callThrough()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %4 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %6 = overlayRef.<@%unk/%unk: .detach>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      %8 = %7.<@%unk/%unk: .not>
      instanceinvoke %8.<@%unk/%unk: .toHaveBeenCalled()>()
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%setPositionAndShow$%AM55$%AM3$%AM0(TooltipPosition)" {
  label="@ts_files/139.ts: %dflt.%setPositionAndShow$%AM55$%AM3$%AM0(TooltipPosition)";
  Node64460 [label="id:0
      position = parameter0: TooltipPosition
      this = this: @ts_files/139.ts: %dflt
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      tooltipDirective.<@%unk/%unk: .position> = position
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM55$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM55$%AM3$%AM0()";
  Node28960 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = buttonElement.<@%unk/%unk: .style>
      %0.<@%unk/%unk: .position> = 'fixed'
      %2 = buttonElement.<@%unk/%unk: .style>
      %2.<@%unk/%unk: .left> = '200px'
      %3 = %2.<@%unk/%unk: .left>
      %1 = buttonElement.<@%unk/%unk: .style>
      %1.<@%unk/%unk: .top> = %3
      %4 = fixture.<@%unk/%unk: .componentInstance>
      %4.<@%unk/%unk: .message> = 'hi'
      %5 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %5.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .setPositionAndShow()>('below')
      %6 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %7 = %6.<@%unk/%unk: .overlayElement>
      classList = %7.<@%unk/%unk: .classList>
      %8 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %8.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-below')
      staticinvoke <@%unk/%unk: .setPositionAndShow()>('above')
      %9 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %10 = %9.<@%unk/%unk: .not>
      instanceinvoke %10.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-below')
      %11 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %11.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-above')
      staticinvoke <@%unk/%unk: .setPositionAndShow()>('left')
      %12 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %13 = %12.<@%unk/%unk: .not>
      instanceinvoke %13.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-above')
      %14 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %14.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-left')
      staticinvoke <@%unk/%unk: .setPositionAndShow()>('right')
      %15 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %16 = %15.<@%unk/%unk: .not>
      instanceinvoke %16.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-left')
      %17 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %17.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-right')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM56$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM56$%AM3$%AM0()";
  Node28970 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = buttonElement.<@%unk/%unk: .style>
      %0.<@%unk/%unk: .position> = 'fixed'
      %2 = buttonElement.<@%unk/%unk: .style>
      %2.<@%unk/%unk: .left> = '200px'
      %3 = %2.<@%unk/%unk: .left>
      %1 = buttonElement.<@%unk/%unk: .style>
      %1.<@%unk/%unk: .top> = %3
      %4 = fixture.<@%unk/%unk: .componentInstance>
      %4.<@%unk/%unk: .message> = 'hi'
      %5 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %5.<@%unk/%unk: .markForCheck()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      dir.<@%unk/%unk: .value> = 'ltr'
      tooltipDirective.<@%unk/%unk: .position> = 'after'
      %6 = fixture.<@%unk/%unk: .changeDetectorRef>
      instanceinvoke %6.<@%unk/%unk: .markForCheck()>()
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %7 = tooltipDirective.<@%unk/%unk: ._overlayRef>
      %8 = %7.<@%unk/%unk: .overlayElement>
      classList = %8.<@%unk/%unk: .classList>
      %9 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %10 = %9.<@%unk/%unk: .not>
      instanceinvoke %10.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-after')
      %11 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %12 = %11.<@%unk/%unk: .not>
      instanceinvoke %12.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-before')
      %13 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %14 = %13.<@%unk/%unk: .not>
      instanceinvoke %14.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-left')
      %15 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %15.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-right')
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      dir.<@%unk/%unk: .value> = 'rtl'
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %16 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %17 = %16.<@%unk/%unk: .not>
      instanceinvoke %17.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-after')
      %18 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %19 = %18.<@%unk/%unk: .not>
      instanceinvoke %19.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-before')
      %20 = staticinvoke <@%unk/%unk: .expect()>(classList)
      %21 = %20.<@%unk/%unk: .not>
      instanceinvoke %21.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-right')
      %22 = staticinvoke <@%unk/%unk: .expect()>(classList)
      instanceinvoke %22.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-panel-left')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM57$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM57$%AM3$%AM0()";
  Node28980 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>(1000)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke fixture.<@%unk/%unk: .destroy()>()
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM58$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM58$%AM3$%AM0()";
  Node28990 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(1000)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      instanceinvoke fixture.<@%unk/%unk: .destroy()>()
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM59$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM59$%AM3$%AM0()";
  Node29000 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %1 = 'This is a very long message that should cause the' + 'tooltip message body to overflow onto a new line.'
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .message> = %1
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %2 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%2
      %3 = tooltipElement.<@%unk/%unk: .classList>
      %4 = staticinvoke <@%unk/%unk: .expect()>(%3)
      instanceinvoke %4.<@%unk/%unk: .toContain()>('mdc-tooltip--multiline')
      %5 = tooltipDirective.<@%unk/%unk: ._tooltipInstance>
      %6 = %5.<@%unk/%unk: ._isMultiline>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBeTrue()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM60$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM60$%AM3$%AM0()";
  Node28920 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28921 [label="id:1
      return"];
  Node28922 [label="id:2
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .button>
      %5 = %4.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%5, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      %8 = fixture.<@%unk/%unk: .componentInstance>
      %9 = %8.<@%unk/%unk: .button>
      %10 = %9.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%10, 'mouseleave')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %11 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %12 = staticinvoke <@%unk/%unk: .expect()>(%11)
      instanceinvoke %12.<@%unk/%unk: .toBe()>(false)
      return"];
  Node28920 -> Node28921;
  Node28920 -> Node28922;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM61$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM61$%AM3$%AM0()";
  Node28930 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28931 [label="id:1
      return"];
  Node28932 [label="id:2
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .button>
      %5 = %4.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%5, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      %8 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%8
      event = staticinvoke <@%unk/%unk: .createMouseEvent()>('mouseleave')
      %9 = new @ts_files/139.ts: %AC$%dflt$%AM61$%AM3$%AM0$25
      instanceinvoke %9.<@ts_files/139.ts: %AC$%dflt$%AM61$%AM3$%AM0$25.constructor()>()
      instanceinvoke Object.<@%unk/%unk: .defineProperty()>(event, 'relatedTarget', %9)
      %10 = fixture.<@%unk/%unk: .componentInstance>
      %11 = %10.<@%unk/%unk: .button>
      %12 = %11.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchEvent()>(%12, event)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %13 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %14 = staticinvoke <@%unk/%unk: .expect()>(%13)
      instanceinvoke %14.<@%unk/%unk: .toBe()>(true)
      return"];
  Node28930 -> Node28931;
  Node28930 -> Node28932;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM62$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM62$%AM3$%AM0()";
  Node28940 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28941 [label="id:1
      return"];
  Node28942 [label="id:2
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .button>
      %5 = %4.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%5, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      %8 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%8
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(tooltipElement, 'mouseleave')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %9 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %10 = staticinvoke <@%unk/%unk: .expect()>(%9)
      instanceinvoke %10.<@%unk/%unk: .toBe()>(false)
      return"];
  Node28940 -> Node28941;
  Node28940 -> Node28942;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM63$%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM63$%AM3$%AM0()";
  Node28950 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node28951 [label="id:1
      return"];
  Node28952 [label="id:2
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .button>
      %5 = %4.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%5, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      %8 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%8
      event = staticinvoke <@%unk/%unk: .createMouseEvent()>('mouseleave')
      %9 = new @ts_files/139.ts: %AC$%dflt$%AM63$%AM3$%AM0$26
      instanceinvoke %9.<@ts_files/139.ts: %AC$%dflt$%AM63$%AM3$%AM0$26.constructor()>()
      instanceinvoke Object.<@%unk/%unk: .defineProperty()>(event, 'relatedTarget', %9)
      staticinvoke <@%unk/%unk: .dispatchEvent()>(tooltipElement, event)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %10 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>(true)
      return"];
  Node28950 -> Node28951;
  Node28950 -> Node28952;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM3$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM3$%AM0()";
  Node25750 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = undefined
      buttonDebugElement = undefined
      buttonElement = undefined
      tooltipDirective = undefined
      %0 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM4$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .beforeEach()>(%0)
      %1 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM5$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should show and hide the tooltip', %1)
      %2 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM6$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to re-open a tooltip if it was closed by detaching the overlay', %2)
      %3 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM7$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should show with delay', %3)
      %4 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM8$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to override the default show and hide delays', %4)
      %5 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM9$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to override the default position', %5)
      %6 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM10$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to define a default (global) tooltip class', %6)
      %7 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM11$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to provide tooltip class over the custom default one', %7)
      %8 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM12$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should position on the bottom-left by default', %8)
      staticinvoke <@%unk/%unk: .it()>('should be able to override the default positionAtOrigin', %AM13$%AM3$%AM0)
      %9 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM15$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to disable tooltip interactivity', %9)
      %10 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM16$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should set a css class on the overlay panel element', %10)
      %11 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM17$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not show if disabled', %11)
      %12 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM18$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide if disabled while visible', %12)
      %13 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM19$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide if the message is cleared while the tooltip is open', %13)
      %14 = staticinvoke <@%unk/%unk: .waitForAsync()>(%AM20$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not show if hide is called before delay finishes', %14)
      staticinvoke <@%unk/%unk: .it()>('should not show tooltip if message is not present or empty', %AM22$%AM3$%AM0)
      %15 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM23$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not follow through with hide if show is called after', %15)
      %16 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM24$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to update the tooltip position while open', %16)
      %17 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM25$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should update the tooltip position when the directionality changes', %17)
      %18 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM26$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not throw when updating the position for a closed tooltip', %18)
      %19 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM28$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to modify the tooltip message', %19)
      %20 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM29$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should allow extra classes to be set on the tooltip', %20)
      %21 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM30$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be removed after parent destroyed', %21)
      %22 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM31$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should have an aria-describedby element with the tooltip message', %22)
      %23 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM32$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not add an ARIA description for elements that have the same text as a data-bound aria-label', %23)
      %24 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM33$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should toggle aria-describedby depending on whether the tooltip is disabled', %24)
      %25 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM34$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not try to dispose the tooltip when destroyed and done hiding', %25)
      %26 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM35$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should complete the afterHidden stream when tooltip is destroyed', %26)
      staticinvoke <@%unk/%unk: .it()>('should consistently position before and after overlay origin in ltr and rtl dir', %AM36$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should consistently position before and after overlay position in ltr and rtl dir', %AM37$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should throw when trying to assign an invalid position', %AM38$%AM3$%AM0)
      %27 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM40$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should pass the layout direction to the tooltip', %27)
      %28 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM41$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should keep the overlay direction in sync with the trigger direction', %28)
      %29 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM42$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to set the tooltip message as a number', %29)
      %30 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM43$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide when clicking away', %30)
      %31 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM44$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide when clicking away with an auxilliary button', %31)
      %32 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM45$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not hide immediately if a click fires while animating', %32)
      %33 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM46$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide when pressing escape', %33)
      %34 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM47$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not throw when pressing ESCAPE', %34)
      %35 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM49$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should preventDefault when pressing ESCAPE', %35)
      %36 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM50$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not preventDefault when pressing ESCAPE with a modifier', %36)
      %37 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM51$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not show the tooltip on programmatic focus', %37)
      %38 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM52$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not show the tooltip on mouse focus', %38)
      %39 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM53$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not show the tooltip on touch focus', %39)
      %40 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM54$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not hide the tooltip when calling `show` twice in a row', %40)
      %41 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM55$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should set a class on the overlay panel that reflects the position', %41)
      %42 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM56$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should account for RTL when setting the tooltip position class', %42)
      %43 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM57$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should clear the show timeout on destroy', %43)
      %44 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM58$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should clear the hide timeout on destroy', %44)
      %45 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM59$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should set the multiline class on tooltips with messages that overflow', %45)
      %46 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM60$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide on mouseleave on the trigger', %46)
      %47 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM61$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not hide on mouseleave if the pointer goes from the trigger to the tooltip', %47)
      %48 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM62$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide on mouseleave on the tooltip', %48)
      %49 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM63$%AM3$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not hide on mouseleave if the pointer goes from the tooltip to the trigger', %49)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM65$%AM64$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM65$%AM64$%AM0()";
  Node29520 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %1 = fixture.<@%unk/%unk: .debugElement>
      %2 = instanceinvoke %1.<@%unk/%unk: .query()>(%0)
      %3 = %2.<@%unk/%unk: .injector>
      tooltip = instanceinvoke %3.<@%unk/%unk: .get()>(MatTooltip)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM66$%AM64$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM66$%AM64$%AM0()";
  Node29530 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltip.<@%unk/%unk: .position> = 'left'
      %0 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %1 = %0.<@%unk/%unk: .main>
      %2 = %1.<@%unk/%unk: .originX>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>('start')
      %4 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %5 = %4.<@%unk/%unk: .fallback>
      %6 = %5.<@%unk/%unk: .originX>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>('end')
      tooltip.<@%unk/%unk: .position> = 'right'
      %8 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %9 = %8.<@%unk/%unk: .main>
      %10 = %9.<@%unk/%unk: .originX>
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>('end')
      %12 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %13 = %12.<@%unk/%unk: .fallback>
      %14 = %13.<@%unk/%unk: .originX>
      %15 = staticinvoke <@%unk/%unk: .expect()>(%14)
      instanceinvoke %15.<@%unk/%unk: .toBe()>('start')
      tooltip.<@%unk/%unk: .position> = 'above'
      %16 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %17 = %16.<@%unk/%unk: .main>
      %18 = %17.<@%unk/%unk: .originY>
      %19 = staticinvoke <@%unk/%unk: .expect()>(%18)
      instanceinvoke %19.<@%unk/%unk: .toBe()>('top')
      %20 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %21 = %20.<@%unk/%unk: .fallback>
      %22 = %21.<@%unk/%unk: .originY>
      %23 = staticinvoke <@%unk/%unk: .expect()>(%22)
      instanceinvoke %23.<@%unk/%unk: .toBe()>('bottom')
      tooltip.<@%unk/%unk: .position> = 'below'
      %24 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %25 = %24.<@%unk/%unk: .main>
      %26 = %25.<@%unk/%unk: .originY>
      %27 = staticinvoke <@%unk/%unk: .expect()>(%26)
      instanceinvoke %27.<@%unk/%unk: .toBe()>('bottom')
      %28 = instanceinvoke tooltip.<@%unk/%unk: ._getOrigin()>()
      %29 = %28.<@%unk/%unk: .fallback>
      %30 = %29.<@%unk/%unk: .originY>
      %31 = staticinvoke <@%unk/%unk: .expect()>(%30)
      instanceinvoke %31.<@%unk/%unk: .toBe()>('top')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM67$%AM64$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM67$%AM64$%AM0()";
  Node29540 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      tooltip.<@%unk/%unk: .position> = 'left'
      %0 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %1 = %0.<@%unk/%unk: .main>
      %2 = %1.<@%unk/%unk: .overlayX>
      %3 = staticinvoke <@%unk/%unk: .expect()>(%2)
      instanceinvoke %3.<@%unk/%unk: .toBe()>('end')
      %4 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %5 = %4.<@%unk/%unk: .fallback>
      %6 = %5.<@%unk/%unk: .overlayX>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>('start')
      tooltip.<@%unk/%unk: .position> = 'right'
      %8 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %9 = %8.<@%unk/%unk: .main>
      %10 = %9.<@%unk/%unk: .overlayX>
      %11 = staticinvoke <@%unk/%unk: .expect()>(%10)
      instanceinvoke %11.<@%unk/%unk: .toBe()>('start')
      %12 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %13 = %12.<@%unk/%unk: .fallback>
      %14 = %13.<@%unk/%unk: .overlayX>
      %15 = staticinvoke <@%unk/%unk: .expect()>(%14)
      instanceinvoke %15.<@%unk/%unk: .toBe()>('end')
      tooltip.<@%unk/%unk: .position> = 'above'
      %16 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %17 = %16.<@%unk/%unk: .main>
      %18 = %17.<@%unk/%unk: .overlayY>
      %19 = staticinvoke <@%unk/%unk: .expect()>(%18)
      instanceinvoke %19.<@%unk/%unk: .toBe()>('bottom')
      %20 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %21 = %20.<@%unk/%unk: .fallback>
      %22 = %21.<@%unk/%unk: .overlayY>
      %23 = staticinvoke <@%unk/%unk: .expect()>(%22)
      instanceinvoke %23.<@%unk/%unk: .toBe()>('top')
      tooltip.<@%unk/%unk: .position> = 'below'
      %24 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %25 = %24.<@%unk/%unk: .main>
      %26 = %25.<@%unk/%unk: .overlayY>
      %27 = staticinvoke <@%unk/%unk: .expect()>(%26)
      instanceinvoke %27.<@%unk/%unk: .toBe()>('top')
      %28 = instanceinvoke tooltip.<@%unk/%unk: ._getOverlayPosition()>()
      %29 = %28.<@%unk/%unk: .fallback>
      %30 = %29.<@%unk/%unk: .overlayY>
      %31 = staticinvoke <@%unk/%unk: .expect()>(%30)
      instanceinvoke %31.<@%unk/%unk: .toBe()>('bottom')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM64$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM64$%AM0()";
  Node26300 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = undefined
      tooltip = undefined
      staticinvoke <@%unk/%unk: .beforeEach()>(%AM65$%AM64$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should set a fallback origin position by inverting the main origin position', %AM66$%AM64$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should set a fallback overlay position by inverting the main overlay position', %AM67$%AM64$%AM0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM69$%AM68$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM69$%AM68$%AM0()";
  Node29600 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(ScrollableTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %1 = fixture.<@%unk/%unk: .debugElement>
      buttonDebugElement = instanceinvoke %1.<@%unk/%unk: .query()>(%0)
      %2 = buttonDebugElement.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %2.<@%unk/%unk: .get()>(MatTooltip)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM70$%AM68$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM70$%AM68$%AM0()";
  Node29520 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      %2 = instanceinvoke %1.<@%unk/%unk: .withContext()>('Expected tooltip to be initially visible')
      instanceinvoke %2.<@%unk/%unk: .toBe()>(true)
      %3 = fixture.<@%unk/%unk: .componentInstance>
      instanceinvoke %3.<@%unk/%unk: .scrollDown()>()
      %4 = SCROLL_THROTTLE_MS - 1
      staticinvoke <@%unk/%unk: .tick()>(%4)
      %5 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      %7 = instanceinvoke %6.<@%unk/%unk: .withContext()>('Expected tooltip to be visible when scrolling, before throttle limit')
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      staticinvoke <@%unk/%unk: .tick()>(100)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      %10 = instanceinvoke %9.<@%unk/%unk: .withContext()>('Expected tooltip hidden when scrolled out of view, after throttle limit')
      instanceinvoke %10.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM68$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM68$%AM0()";
  Node26340 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = undefined
      buttonDebugElement = undefined
      tooltipDirective = undefined
      staticinvoke <@%unk/%unk: .beforeEach()>(%AM69$%AM68$%AM0)
      %0 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM70$%AM68$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should hide tooltip if clipped after changing positions', %0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM72$%AM71$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM72$%AM71$%AM0()";
  Node29480 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(OnPushTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = instanceinvoke By.<@%unk/%unk: .css()>('button')
      %1 = fixture.<@%unk/%unk: .debugElement>
      buttonDebugElement = instanceinvoke %1.<@%unk/%unk: .query()>(%0)
      buttonElement = <HTMLButtonElement>buttonDebugElement.<@%unk/%unk: .nativeElement>
      %2 = buttonDebugElement.<@%unk/%unk: .injector>
      tooltipDirective = instanceinvoke %2.<@%unk/%unk: .get()>(MatTooltip)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM73$%AM71$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM73$%AM71$%AM0()";
  Node29490 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      instanceinvoke tooltipDirective.<@%unk/%unk: .show()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %0 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %1 = staticinvoke <@%unk/%unk: .expect()>(%0)
      instanceinvoke %1.<@%unk/%unk: .toBe()>(true)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %2 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%2
      %3 = staticinvoke <@%unk/%unk: .expect()>(tooltipElement instanceof HTMLElement)
      instanceinvoke %3.<@%unk/%unk: .toBe()>(true)
      %4 = tooltipElement.<@%unk/%unk: .classList>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toContain()>('mat-mdc-tooltip-show')
      tooltipDelay = 1000
      instanceinvoke tooltipDirective.<@%unk/%unk: .hide()>(tooltipDelay)
      %6 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBe()>(true)
      staticinvoke <@%unk/%unk: .tick()>(tooltipDelay)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %8 = instanceinvoke tooltipDirective.<@%unk/%unk: ._isTooltipVisible()>()
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toBe()>(false)
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(tooltipDirective, false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM74$%AM71$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM74$%AM71$%AM0()";
  Node29500 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node29501 [label="id:1
      return"];
  Node29502 [label="id:2
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(buttonElement, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(0)
      %3 = instanceinvoke overlayContainerElement.<@%unk/%unk: .querySelector()>('.mat-mdc-tooltip')
      tooltipElement = <HTMLElement>%3
      %4 = tooltipElement.<@%unk/%unk: .textContent>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toContain()>('initial tooltip message')
      return"];
  Node29500 -> Node29501;
  Node29500 -> Node29502;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM71$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM71$%AM0()";
  Node26280 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = undefined
      buttonDebugElement = undefined
      buttonElement = undefined
      tooltipDirective = undefined
      staticinvoke <@%unk/%unk: .beforeEach()>(%AM72$%AM71$%AM0)
      %0 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM73$%AM71$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should show and hide the tooltip', %0)
      %1 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM74$%AM71$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should have rendered the tooltip text on init', %1)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM76$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM76$%AM75$%AM0()";
  Node29560 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      platform.<@%unk/%unk: .ANDROID> = true
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM77$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM77$%AM75$%AM0()";
  Node29570 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchstart')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(250)
      %1 = fixture.<@%unk/%unk: .componentInstance>
      %2 = %1.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%2, false)
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%4, true)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM78$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM78$%AM75$%AM0()";
  Node29580 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .touchGestures> = 'off'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %1 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %1.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchstart')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      %2 = fixture.<@%unk/%unk: .componentInstance>
      %3 = %2.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%3, false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM79$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM79$%AM75$%AM0()";
  Node29590 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      event = staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchstart')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %1 = event.<@%unk/%unk: .defaultPrevented>
      %2 = staticinvoke <@%unk/%unk: .expect()>(%1)
      instanceinvoke %2.<@%unk/%unk: .toBe()>(false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM80$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM80$%AM75$%AM0()";
  Node29510 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchstart')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %1 = fixture.<@%unk/%unk: .componentInstance>
      %2 = %1.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%2, true)
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchend')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(1000)
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%4, true)
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %5 = fixture.<@%unk/%unk: .componentInstance>
      %6 = %5.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%6, false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM81$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM81$%AM75$%AM0()";
  Node29520 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchstart')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %1 = fixture.<@%unk/%unk: .componentInstance>
      %2 = %1.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%2, true)
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'touchcancel')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(1000)
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%4, true)
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %5 = fixture.<@%unk/%unk: .componentInstance>
      %6 = %5.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%6, false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM82$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM82$%AM75$%AM0()";
  Node29530 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .nativeElement>
      %1 = instanceinvoke %0.<@%unk/%unk: .querySelector()>('button')
      styles = %1.<@%unk/%unk: .style>
      %2 = styles.<@%unk/%unk: .touchAction>
      %3 = <any>styles
      %4 = %3.<@%unk/%unk: .webkitUserDrag>
      %5 = %2 || %4
      %6 = staticinvoke <@%unk/%unk: .expect()>(%5)
      instanceinvoke %6.<@%unk/%unk: .toBe()>('none')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM83$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM83$%AM75$%AM0()";
  Node29540 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .touchGestures> = 'off'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %1 = fixture.<@%unk/%unk: .nativeElement>
      %2 = instanceinvoke %1.<@%unk/%unk: .querySelector()>('button')
      styles = %2.<@%unk/%unk: .style>
      %3 = styles.<@%unk/%unk: .touchAction>
      %4 = <any>styles
      %5 = %4.<@%unk/%unk: .webkitUserDrag>
      %6 = %3 || %5
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBeFalsy()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM84$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM84$%AM75$%AM0()";
  Node29550 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipOnTextFields)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %1 = %0.<@%unk/%unk: .input>
      %2 = %1.<@%unk/%unk: .nativeElement>
      inputStyle = %2.<@%unk/%unk: .style>
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .textarea>
      %5 = %4.<@%unk/%unk: .nativeElement>
      textareaStyle = %5.<@%unk/%unk: .style>
      %6 = inputStyle.<@%unk/%unk: .userSelect>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      instanceinvoke %7.<@%unk/%unk: .toBeFalsy()>()
      %8 = inputStyle.<@%unk/%unk: .webkitUserSelect>
      %9 = staticinvoke <@%unk/%unk: .expect()>(%8)
      instanceinvoke %9.<@%unk/%unk: .toBeFalsy()>()
      %10 = <any>inputStyle
      %11 = %10.<@%unk/%unk: .msUserSelect>
      %12 = staticinvoke <@%unk/%unk: .expect()>(%11)
      instanceinvoke %12.<@%unk/%unk: .toBeFalsy()>()
      %13 = <any>inputStyle
      %14 = %13.<@%unk/%unk: .MozUserSelect>
      %15 = staticinvoke <@%unk/%unk: .expect()>(%14)
      instanceinvoke %15.<@%unk/%unk: .toBeFalsy()>()
      %16 = textareaStyle.<@%unk/%unk: .userSelect>
      %17 = staticinvoke <@%unk/%unk: .expect()>(%16)
      instanceinvoke %17.<@%unk/%unk: .toBeFalsy()>()
      %18 = textareaStyle.<@%unk/%unk: .webkitUserSelect>
      %19 = staticinvoke <@%unk/%unk: .expect()>(%18)
      instanceinvoke %19.<@%unk/%unk: .toBeFalsy()>()
      %20 = <any>textareaStyle
      %21 = %20.<@%unk/%unk: .msUserSelect>
      %22 = staticinvoke <@%unk/%unk: .expect()>(%21)
      instanceinvoke %22.<@%unk/%unk: .toBeFalsy()>()
      %23 = <any>textareaStyle
      %24 = %23.<@%unk/%unk: .MozUserSelect>
      %25 = staticinvoke <@%unk/%unk: .expect()>(%24)
      instanceinvoke %25.<@%unk/%unk: .toBeFalsy()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM85$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM85$%AM75$%AM0()";
  Node29560 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipOnTextFields)
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .touchGestures> = 'on'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %1 = fixture.<@%unk/%unk: .componentInstance>
      %2 = %1.<@%unk/%unk: .input>
      %3 = %2.<@%unk/%unk: .nativeElement>
      inputStyle = %3.<@%unk/%unk: .style>
      %4 = inputStyle.<@%unk/%unk: .userSelect>
      %5 = inputStyle.<@%unk/%unk: .webkitUserSelect>
      %6 = %4 || %5
      %7 = <any>inputStyle
      %8 = %7.<@%unk/%unk: .msUserSelect>
      %9 = %6 || %8
      %10 = <any>inputStyle
      %11 = %10.<@%unk/%unk: .MozUserSelect>
      inputUserSelect = %9 || %11
      %12 = fixture.<@%unk/%unk: .componentInstance>
      %13 = %12.<@%unk/%unk: .textarea>
      %14 = %13.<@%unk/%unk: .nativeElement>
      textareaStyle = %14.<@%unk/%unk: .style>
      %15 = textareaStyle.<@%unk/%unk: .userSelect>
      %16 = textareaStyle.<@%unk/%unk: .webkitUserSelect>
      %17 = %15 || %16
      %18 = <any>textareaStyle
      %19 = %18.<@%unk/%unk: .msUserSelect>
      %20 = %17 || %19
      %21 = <any>textareaStyle
      %22 = %21.<@%unk/%unk: .MozUserSelect>
      textareaUserSelect = %20 || %22
      %23 = staticinvoke <@%unk/%unk: .expect()>(inputUserSelect)
      instanceinvoke %23.<@%unk/%unk: .toBe()>('none')
      %24 = staticinvoke <@%unk/%unk: .expect()>(textareaUserSelect)
      instanceinvoke %24.<@%unk/%unk: .toBe()>('none')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM86$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM86$%AM75$%AM0()";
  Node29570 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipOnDraggableElement)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %1 = %0.<@%unk/%unk: .button>
      %2 = %1.<@%unk/%unk: .nativeElement>
      %3 = %2.<@%unk/%unk: .style>
      %4 = %3.<@%unk/%unk: .webkitUserDrag>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBeFalsy()>()
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM87$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM87$%AM75$%AM0()";
  Node29580 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(TooltipOnDraggableElement)
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %0.<@%unk/%unk: .touchGestures> = 'on'
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %1 = fixture.<@%unk/%unk: .componentInstance>
      %2 = %1.<@%unk/%unk: .button>
      %3 = %2.<@%unk/%unk: .nativeElement>
      styles = %3.<@%unk/%unk: .style>
      if undefined != 0"];
  Node29581 [label="id:1
      %4 = styles.<@%unk/%unk: .webkitUserDrag>
      %5 = staticinvoke <@%unk/%unk: .expect()>(%4)
      instanceinvoke %5.<@%unk/%unk: .toBe()>('none')"];
  Node29582 [label="id:2
      return"];
  Node29580 -> Node29581;
  Node29580 -> Node29582;
  Node29581 -> Node29582;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM88$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM88$%AM75$%AM0()";
  Node29590 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      platform.<@%unk/%unk: .IOS> = true
      platform.<@%unk/%unk: .ANDROID> = false
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %1 = %0.<@%unk/%unk: .button>
      %2 = %1.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%2, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%4, false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM89$%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM89$%AM75$%AM0()";
  Node29600 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      platform.<@%unk/%unk: .ANDROID> = true
      platform.<@%unk/%unk: .IOS> = false
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %0 = fixture.<@%unk/%unk: .componentInstance>
      %1 = %0.<@%unk/%unk: .button>
      %2 = %1.<@%unk/%unk: .nativeElement>
      staticinvoke <@%unk/%unk: .dispatchMouseEvent()>(%2, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = fixture.<@%unk/%unk: .componentInstance>
      %4 = %3.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%4, false)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM75$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM75$%AM0()";
  Node26320 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      staticinvoke <@%unk/%unk: .beforeEach()>(%AM76$%AM75$%AM0)
      %0 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM77$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should have a delay when showing on touchstart', %0)
      %1 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM78$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should be able to disable opening on touch', %1)
      staticinvoke <@%unk/%unk: .it()>('should not prevent the default action on touchstart', %AM79$%AM75$%AM0)
      %2 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM80$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should close on touchend with a delay', %2)
      %3 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM81$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should close on touchcancel with a delay', %3)
      staticinvoke <@%unk/%unk: .it()>('should disable native touch interactions', %AM82$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should allow native touch interactions if touch gestures are turned off', %AM83$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should allow text selection on inputs when gestures are set to auto', %AM84$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should disable text selection on inputs when gestures are set to on', %AM85$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should allow native dragging on draggable elements when gestures are set to auto', %AM86$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should disable native dragging on draggable elements when gestures are set to on', %AM87$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not open on `mouseenter` on iOS', %AM88$%AM75$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not open on `mouseenter` on Android', %AM89$%AM75$%AM0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM91$%AM90$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM91$%AM90$%AM0()";
  Node29500 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node29501 [label="id:1
      return"];
  Node29502 [label="id:2
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %3.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %4 = fixture.<@%unk/%unk: .componentInstance>
      %5 = %4.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%5, true)
      wheelEvent = staticinvoke <@%unk/%unk: .createFakeEvent()>('wheel')
      %6 = new @ts_files/139.ts: %AC$%dflt$%AM91$%AM90$%AM0$27
      instanceinvoke %6.<@ts_files/139.ts: %AC$%dflt$%AM91$%AM90$%AM0$27.constructor()>()
      instanceinvoke Object.<@%unk/%unk: .defineProperties()>(wheelEvent, %6)
      staticinvoke <@%unk/%unk: .dispatchEvent()>(button, wheelEvent)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(1500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %7 = fixture.<@%unk/%unk: .componentInstance>
      %8 = %7.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%8, false)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
  Node29500 -> Node29501;
  Node29500 -> Node29502;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM92$%AM90$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM92$%AM90$%AM0()";
  Node29510 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = platform.<@%unk/%unk: .IOS>
      %1 = platform.<@%unk/%unk: .ANDROID>
      %2 = %0 || %1
      if %2 != false"];
  Node29511 [label="id:1
      return"];
  Node29512 [label="id:2
      fixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(BasicTooltipDemo)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      %3 = fixture.<@%unk/%unk: .nativeElement>
      button = instanceinvoke %3.<@%unk/%unk: .querySelector()>('button')
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(button, 'mouseenter')
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, true)
      %4 = fixture.<@%unk/%unk: .componentInstance>
      %5 = %4.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%5, true)
      triggerRect = instanceinvoke button.<@%unk/%unk: .getBoundingClientRect()>()
      wheelEvent = staticinvoke <@%unk/%unk: .createFakeEvent()>('wheel')
      %6 = new @ts_files/139.ts: %AC$%dflt$%AM92$%AM90$%AM0$30
      instanceinvoke %6.<@ts_files/139.ts: %AC$%dflt$%AM92$%AM90$%AM0$30.constructor()>()
      instanceinvoke Object.<@%unk/%unk: .defineProperties()>(wheelEvent, %6)
      staticinvoke <@%unk/%unk: .dispatchEvent()>(button, wheelEvent)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@%unk/%unk: .tick()>(1500)
      instanceinvoke fixture.<@%unk/%unk: .detectChanges()>()
      staticinvoke <@ts_files/139.ts: %dflt.finishCurrentTooltipAnimation(HTMLElement, boolean)>(overlayContainerElement, false)
      %7 = fixture.<@%unk/%unk: .componentInstance>
      %8 = %7.<@%unk/%unk: .tooltip>
      staticinvoke <@ts_files/139.ts: %dflt.assertTooltipInstance(MatTooltip, boolean)>(%8, true)
      staticinvoke <@%unk/%unk: .flush()>()
      return"];
  Node29510 -> Node29511;
  Node29510 -> Node29512;
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM90$%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM90$%AM0()";
  Node26290 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      %0 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM91$%AM90$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should close when a wheel event causes the cursor to leave the trigger', %0)
      %1 = staticinvoke <@%unk/%unk: .fakeAsync()>(%AM92$%AM90$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should not close if the cursor is over the trigger after a wheel event', %1)
      return"];
}
subgraph "cluster_@ts_files/139.ts: %dflt.%AM0()" {
  label="@ts_files/139.ts: %dflt.%AM0()";
  Node23090 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      overlayContainerElement = undefined
      dir = undefined
      platform = undefined
      focusMonitor = undefined
      %0 = staticinvoke <@%unk/%unk: .waitForAsync()>(%AM1$%AM0)
      staticinvoke <@%unk/%unk: .beforeEach()>(%0)
      staticinvoke <@%unk/%unk: .describe()>('basic usage', %AM3$%AM0)
      staticinvoke <@%unk/%unk: .describe()>('fallback positions', %AM64$%AM0)
      staticinvoke <@%unk/%unk: .describe()>('scrollable usage', %AM68$%AM0)
      staticinvoke <@%unk/%unk: .describe()>('with OnPush', %AM71$%AM0)
      staticinvoke <@%unk/%unk: .describe()>('touch gestures', %AM75$%AM0)
      staticinvoke <@%unk/%unk: .describe()>('mouse wheel handling', %AM90$%AM0)
      return"];
}
subgraph "cluster_@ts_files/139.ts: ScrollableTooltipDemo.scrollDown()" {
  label="@ts_files/139.ts: ScrollableTooltipDemo.scrollDown()";
  Node48450 [label="id:0
      this = this: @ts_files/139.ts: ScrollableTooltipDemo
      %0 = this.<@ts_files/139.ts: ScrollableTooltipDemo.scrollingContainer>
      %1 = instanceinvoke %0.<@%unk/%unk: .getElementRef()>()
      scrollingContainerEl = %1.<@%unk/%unk: .nativeElement>
      scrollingContainerEl.<@%unk/%unk: .scrollTop> = 250
      staticinvoke <@%unk/%unk: .dispatchFakeEvent()>(scrollingContainerEl, 'scroll')
      return"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%AC$%dflt$%AM1$%AM0$1$%instInit$2.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%AC$%dflt$%AM1$%AM0$1$%instInit$2.%AM0$%instInit()";
  Node52630 [label="id:0
      this = this: @ts_files/139.ts: %AC$%AC$%dflt$%AM1$%AM0$1$%instInit$2
      %0 = new @ts_files/139.ts: %AC$%AC$%AC$%dflt$%AM1$%AM0$1$%instInit$2$%AM0$%instInit$3
      instanceinvoke %0.<@ts_files/139.ts: %AC$%AC$%AC$%dflt$%AM1$%AM0$1$%instInit$2$%AM0$%instInit$3.constructor()>()
      dir = %0
      return dir"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$28.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$28.%AM0$%instInit()";
  Node57520 [label="id:0
      this = this: @ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$28
      %0 = window.<@%unk/%unk: .innerWidth>
      return %0"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$29.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$29.%AM0$%instInit()";
  Node57530 [label="id:0
      this = this: @ts_files/139.ts: %AC$%AC$%dflt$%AM91$%AM90$%AM0$27$%instInit$29
      %0 = window.<@%unk/%unk: .innerHeight>
      return %0"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$31.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$31.%AM0$%instInit()";
  Node57410 [label="id:0
      this = this: @ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$31
      %0 = triggerRect.<@%unk/%unk: .left>
      %1 = %0 + 1
      return %1"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$32.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$32.%AM0$%instInit()";
  Node57420 [label="id:0
      this = this: @ts_files/139.ts: %AC$%AC$%dflt$%AM92$%AM90$%AM0$30$%instInit$32
      %0 = triggerRect.<@%unk/%unk: .top>
      %1 = %0 + 1
      return %1"];
}
subgraph "cluster_@ts_files/139.ts: %AC$%dflt$finishCurrentTooltipAnimation$33.%AM0$%instInit()" {
  label="@ts_files/139.ts: %AC$%dflt$finishCurrentTooltipAnimation$33.%AM0$%instInit()";
  Node66660 [label="id:0
      this = this: @ts_files/139.ts: %dflt
      if isVisible != 0
      ConditionalOperatorIfTrue0
      %0 = 'show'
      ConditionalOperatorIfFalse0
      %0 = 'hide'
      ConditionalOperatorEnd0
      %1 = 'mat-mdc-tooltip-' + %0
      return %1"];
}
}
