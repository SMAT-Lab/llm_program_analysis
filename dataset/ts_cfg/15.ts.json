{
  "type": "file",
  "name": "15.ts",
  "label": "15.ts",
  "start_line": -1,
  "end_line": 68,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: %dflt\nTAG = 'MainAbility'\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "MainAbility",
      "label": "MainAbility",
      "start_line": 1,
      "end_line": 68,
      "functions": [
        {
          "type": "function",
          "name": "onCreate",
          "label": "onCreate",
          "start_line": 1,
          "end_line": 25,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "want = parameter0: Want\nlaunchParam = parameter1: AbilityConstant.LaunchParam\nthis = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onCreate')\n%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(want)\n%1 = 'want param: ' + %0\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %1)\n%2 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(launchParam)\n%3 = 'launchParam: ' + %2\ninstanceinvoke Logger.<@%unk/%unk: .debug()>(TAG, %3)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n  }"
        },
        {
          "type": "function",
          "name": "onDestroy",
          "label": "onDestroy",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onDestroy')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageCreate",
          "label": "onWindowStageCreate",
          "start_line": 1,
          "end_line": 35,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "windowStage = parameter0: Window.WindowStage\nthis = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onWindowStageCreate')\n%0 = instanceinvoke windowStage.<@%unk/%unk: .getMainWindow()>()\ninstanceinvoke %0.<@%unk/%unk: .then()>(%AM0$onWindowStageCreate)\ninstanceinvoke this.<@ts_files/15.ts: MainAbility.onLoadContent(Window.WindowStage, string)>(windowStage, 'pages/Index')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageCreate(windowStage: Window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.getMainWindow().then((win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    })\n    this.onLoadContent(windowStage, 'pages/Index');\n  }"
        },
        {
          "type": "function",
          "name": "onLoadContent",
          "label": "onLoadContent",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "windowStage = parameter0: Window.WindowStage\npage = parameter1: string\nthis = this: @ts_files/15.ts: MainAbility\ninstanceinvoke windowStage.<@%unk/%unk: .loadContent()>(page, %AM4$onLoadContent)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onLoadContent(windowStage: Window.WindowStage, page: string): void {\n    windowStage.loadContent(page, (): void => {\n    });\n\n  }"
        },
        {
          "type": "function",
          "name": "onWindowStageDestroy",
          "label": "onWindowStageDestroy",
          "start_line": 1,
          "end_line": 58,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onWindowStageDestroy')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'Ability onWindowStageDestroy');\n  }"
        },
        {
          "type": "function",
          "name": "onForeground",
          "label": "onForeground",
          "start_line": 1,
          "end_line": 63,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onForeground')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onForeground(): void {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');\n  }"
        },
        {
          "type": "function",
          "name": "onBackground",
          "label": "onBackground",
          "start_line": 1,
          "end_line": 68,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\ninstanceinvoke Logger.<@%unk/%unk: .info()>(TAG, 'Ability onBackground')\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onBackground(): void {\n    // Ability has back to background\n    Logger.info(TAG, 'Ability onBackground');\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM1$%AM0$onWindowStageCreate",
          "label": "%AM2$%AM1$%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n        }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0$onWindowStageCreate",
          "label": "%AM1$%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 39,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\n%0 = newarray (string)[1]\n%0[0] = 'navigation'\n%1 = instanceinvoke win.<@%unk/%unk: .setWindowSystemBarEnable()>(%0)\ninstanceinvoke %1.<@%unk/%unk: .then()>(%AM2$%AM1$%AM0$onWindowStageCreate)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0$onWindowStageCreate",
          "label": "%AM3$%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n      }"
        },
        {
          "type": "function",
          "name": "%AM0$onWindowStageCreate",
          "label": "%AM0$onWindowStageCreate",
          "start_line": 1,
          "end_line": 38,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "win = parameter0: Window.Window\nthis = this: @ts_files/15.ts: MainAbility\n%0 = instanceinvoke win.<@%unk/%unk: .setWindowLayoutFullScreen()>(true)\ninstanceinvoke %0.<@%unk/%unk: .then()>(%AM1$%AM0$onWindowStageCreate)\n%1 = new @ts_files/15.ts: %AC$MainAbility$%AM0$onWindowStageCreate$0\ninstanceinvoke %1.<@ts_files/15.ts: %AC$MainAbility$%AM0$onWindowStageCreate$0.constructor()>()\n%2 = instanceinvoke win.<@%unk/%unk: .setWindowSystemBarProperties()>(%1)\ninstanceinvoke %2.<@%unk/%unk: .then()>(%AM3$%AM0$onWindowStageCreate)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    }"
        },
        {
          "type": "function",
          "name": "%AM4$onLoadContent",
          "label": "%AM4$onLoadContent",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/15.ts: MainAbility\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => {\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export default class MainAbility extends Ability {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n  }\n\n  onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: Window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.getMainWindow().then((win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    })\n    this.onLoadContent(windowStage, 'pages/Index');\n  }\n\n  onLoadContent(windowStage: Window.WindowStage, page: string): void {\n    windowStage.loadContent(page, (): void => {\n    });\n\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // Ability has back to background\n    Logger.info(TAG, 'Ability onBackground');\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$MainAbility$%AM0$onWindowStageCreate$0",
      "label": "%AC$MainAbility$%AM0$onWindowStageCreate$0",
      "start_line": 43,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ability from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport type Window from '@ohos.window';\nimport Logger from '../model/Logger';\n\nconst TAG: string = 'MainAbility';\n\nexport default class MainAbility extends Ability {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n  }\n\n  onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: Window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.getMainWindow().then((win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    })\n    this.onLoadContent(windowStage, 'pages/Index');\n  }\n\n  onLoadContent(windowStage: Window.WindowStage, page: string): void {\n    windowStage.loadContent(page, (): void => {\n    });\n\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // Ability has back to background\n    Logger.info(TAG, 'Ability onBackground');\n  }\n}\n"
}