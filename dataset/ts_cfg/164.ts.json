{
  "type": "file",
  "name": "164.ts",
  "label": "164.ts",
  "start_line": -1,
  "end_line": 30,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 14,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 14,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/164.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 14,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "FederationServersRaw",
      "label": "FederationServersRaw",
      "start_line": 1,
      "end_line": 24,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 14,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/164.ts: FederationServersRaw.%instInit()>()\ndb = parameter0: Db\ntrash = parameter1: Collection<RocketChatRecordDeleted<IFederationServer>>\nthis = this: @ts_files/164.ts: FederationServersRaw\nstaticinvoke <@%unk/%unk: .super()>(db, 'federation_servers', trash)\nreturn",
              "start_line": 1,
              "end_line": 14,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IFederationServer>>) {\n\t\tsuper(db, 'federation_servers', trash);\n\t}"
        },
        {
          "type": "function",
          "name": "modelIndexes",
          "label": "modelIndexes",
          "start_line": 1,
          "end_line": 10,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/164.ts: FederationServersRaw\n%0 = new @ts_files/164.ts: %AC$FederationServersRaw$modelIndexes$0\ninstanceinvoke %0.<@ts_files/164.ts: %AC$FederationServersRaw$modelIndexes$0.constructor()>()\n%1 = newarray (@ts_files/164.ts: %AC$FederationServersRaw$modelIndexes$0)[1]\n%1[0] = %0\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { domain: 1 } }];\n\t}"
        },
        {
          "type": "function",
          "name": "saveDomain",
          "label": "saveDomain",
          "start_line": 1,
          "end_line": 13,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "domain = parameter0: string\nthis = this: @ts_files/164.ts: FederationServersRaw\n%0 = new @ts_files/164.ts: %AC$FederationServersRaw$saveDomain$2\ninstanceinvoke %0.<@ts_files/164.ts: %AC$FederationServersRaw$saveDomain$2.constructor()>()\n%1 = new @ts_files/164.ts: %AC$FederationServersRaw$saveDomain$3\ninstanceinvoke %1.<@ts_files/164.ts: %AC$FederationServersRaw$saveDomain$3.constructor()>()\n%2 = new @ts_files/164.ts: %AC$FederationServersRaw$saveDomain$5\ninstanceinvoke %2.<@ts_files/164.ts: %AC$FederationServersRaw$saveDomain$5.constructor()>()\n%3 = instanceinvoke this.<@%unk/%unk: .updateOne()>(%0, %1, %2)\nreturn %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "saveDomain(domain: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ domain },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdomain,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}"
        },
        {
          "type": "function",
          "name": "refreshServers",
          "label": "refreshServers",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/164.ts: FederationServersRaw\n%0 = instanceinvoke Users.<@%unk/%unk: .getDistinctFederationDomains()>()\ndomains = await %0\n%1 = instanceinvoke domains.<@%unk/%unk: .iterator()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = instanceinvoke %1.<@%unk/%unk: .next()>()\n%3 = %2.<@ES2015/BuiltinClass: IteratorResult.done>\nif %3 == true",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = %2.<@ES2015/BuiltinClass: IteratorResult.value>\ndomain = <string>%4\n%5 = instanceinvoke this.<@ts_files/164.ts: FederationServersRaw.saveDomain(string)>(domain)\n%6 = await %5",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = new @ts_files/164.ts: %AC$FederationServersRaw$refreshServers$6\ninstanceinvoke %7.<@ts_files/164.ts: %AC$FederationServersRaw$refreshServers$6.constructor()>()\n%8 = instanceinvoke this.<@%unk/%unk: .deleteMany()>(%7)\n%9 = await %8\nreturn",
                      "start_line": 1,
                      "end_line": 14,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async refreshServers(): Promise<void> {\n\t\t// TODO remove model dependency - this logs should be inside a function/service and not in a model\n\t\tconst domains = await Users.getDistinctFederationDomains();\n\t\tfor await (const domain of domains) {\n\t\t\tawait this.saveDomain(domain);\n\t\t}\n\t\tawait this.deleteMany({ domain: { $nin: domains } });\n\t}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class FederationServersRaw extends BaseRaw<IFederationServer> implements IFederationServersModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IFederationServer>>) {\n\t\tsuper(db, 'federation_servers', trash);\n\t}\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { domain: 1 } }];\n\t}\n\tsaveDomain(domain: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ domain },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdomain,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\tasync refreshServers(): Promise<void> {\n\t\t// TODO remove model dependency - this logs should be inside a function/service and not in a model\n\t\tconst domains = await Users.getDistinctFederationDomains();\n\t\tfor await (const domain of domains) {\n\t\t\tawait this.saveDomain(domain);\n\t\t}\n\t\tawait this.deleteMany({ domain: { $nin: domains } });\n\t}\n}"
    },
    {
      "type": "class",
      "name": "%AC$%AC$FederationServersRaw$modelIndexes$0$%instInit$1",
      "label": "%AC$%AC$FederationServersRaw$modelIndexes$0$%instInit$1",
      "start_line": 11,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ domain: 1 }"
    },
    {
      "type": "class",
      "name": "%AC$FederationServersRaw$modelIndexes$0",
      "label": "%AC$FederationServersRaw$modelIndexes$0",
      "start_line": 11,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ key: { domain: 1 } }"
    },
    {
      "type": "class",
      "name": "%AC$FederationServersRaw$saveDomain$2",
      "label": "%AC$FederationServersRaw$saveDomain$2",
      "start_line": 15,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ domain }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$FederationServersRaw$saveDomain$3$%instInit$4",
      "label": "%AC$%AC$FederationServersRaw$saveDomain$3$%instInit$4",
      "start_line": 17,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t\tdomain,\n\t\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$FederationServersRaw$saveDomain$3",
      "label": "%AC$FederationServersRaw$saveDomain$3",
      "start_line": 16,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdomain,\n\t\t\t\t},\n\t\t\t}"
    },
    {
      "type": "class",
      "name": "%AC$FederationServersRaw$saveDomain$5",
      "label": "%AC$FederationServersRaw$saveDomain$5",
      "start_line": 21,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ upsert: true }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$FederationServersRaw$refreshServers$6$%instInit$7",
      "label": "%AC$%AC$FederationServersRaw$refreshServers$6$%instInit$7",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ $nin: domains }"
    },
    {
      "type": "class",
      "name": "%AC$FederationServersRaw$refreshServers$6",
      "label": "%AC$FederationServersRaw$refreshServers$6",
      "start_line": 30,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ domain: { $nin: domains } }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import type { IFederationServer, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IFederationServersModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\nimport { BaseRaw } from './BaseRaw';\nexport class FederationServersRaw extends BaseRaw<IFederationServer> implements IFederationServersModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IFederationServer>>) {\n\t\tsuper(db, 'federation_servers', trash);\n\t}\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { domain: 1 } }];\n\t}\n\tsaveDomain(domain: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ domain },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdomain,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\tasync refreshServers(): Promise<void> {\n\t\t// TODO remove model dependency - this logs should be inside a function/service and not in a model\n\t\tconst domains = await Users.getDistinctFederationDomains();\n\t\tfor await (const domain of domains) {\n\t\t\tawait this.saveDomain(domain);\n\t\t}\n\t\tawait this.deleteMany({ domain: { $nin: domains } });\n\t}\n}"
}