digraph "8.ts" {
subgraph "cluster_@ts_files/8.ts: %dflt.[static]%dflt()" {
  label="@ts_files/8.ts: %dflt.[static]%dflt()";
  Node32760 [label="id:0
      this = this: @ts_files/8.ts: %dflt
      return"];
}
subgraph "cluster_@ts_files/8.ts: DisplayCalculator.[static]calcSurfaceDisplaySize(number, number, number)" {
  label="@ts_files/8.ts: DisplayCalculator.[static]calcSurfaceDisplaySize(number, number, number)";
  Node84620 [label="id:0
      screenWidth = parameter0: number
      screenHeight = parameter1: number
      defaultAspectRatio = parameter2: number
      this = this: @ts_files/8.ts: DisplayCalculator
      %0 = new @ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1
      instanceinvoke %0.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.constructor()>()
      displaySize = %0
      %1 = instanceinvoke AppStorage.<@%unk/%unk: .get()>('deviceType')
      %2 = Constants.<@%unk/%unk: .TABLET>
      %3 = %1 === %2
      %4 = screenWidth > screenHeight
      %5 = %3 || %4
      if %5 != false"];
  Node84621 [label="id:1
      %6 = screenWidth / screenHeight
      if %6 > defaultAspectRatio"];
  Node84622 [label="id:2
      %7 = screenHeight * defaultAspectRatio
      %8 = instanceinvoke Math.<@%unk/%unk: .floor()>(%7)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %8
      %9 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenHeight)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %9"];
  Node84623 [label="id:3
      %10 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenWidth)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %10
      %11 = screenWidth / defaultAspectRatio
      %12 = instanceinvoke Math.<@%unk/%unk: .floor()>(%11)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %12"];
  Node84624 [label="id:4
      %13 = screenWidth / screenHeight
      if %13 > defaultAspectRatio"];
  Node84625 [label="id:5
      %14 = screenHeight / defaultAspectRatio
      %15 = instanceinvoke Math.<@%unk/%unk: .floor()>(%14)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %15
      %16 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenHeight)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %16"];
  Node84626 [label="id:6
      %17 = instanceinvoke Math.<@%unk/%unk: .floor()>(screenWidth)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.width> = %17
      %18 = screenWidth * defaultAspectRatio
      %19 = instanceinvoke Math.<@%unk/%unk: .floor()>(%18)
      displaySize.<@ts_files/8.ts: %AC$DisplayCalculator$calcSurfaceDisplaySize$1.height> = %19"];
  Node84627 [label="id:7
      return displaySize"];
  Node84620 -> Node84621;
  Node84620 -> Node84624;
  Node84621 -> Node84622;
  Node84621 -> Node84623;
  Node84622 -> Node84627;
  Node84623 -> Node84627;
  Node84624 -> Node84625;
  Node84624 -> Node84626;
  Node84625 -> Node84627;
  Node84626 -> Node84627;
}
}
