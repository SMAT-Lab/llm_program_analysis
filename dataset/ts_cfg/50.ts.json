{
  "type": "file",
  "name": "50.ts",
  "label": "50.ts",
  "start_line": -1,
  "end_line": 36,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 36,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/50.ts: %dflt\nTAG = 'ResourceUtils'\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "getResourceString",
          "label": "getResourceString",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "resource = parameter0: Resource\nthis = this: @ts_files/50.ts: %dflt",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(resource)\n%1 = 'getResourceString: ' + %0\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %1)\n%2 = instanceinvoke GlobalContext.<@%unk/%unk: .getContext()>()\ncontext = instanceinvoke %2.<@%unk/%unk: .getObject()>('appContext')\n%3 = instanceinvoke resourceManager.<@%unk/%unk: .getResourceManager()>(context)\nmgr = await %3\n%4 = mgr != null\n%5 = mgr != undefined\n%6 = %4 || %5\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = resource.<@%unk/%unk: .id>\n%8 = instanceinvoke mgr.<@%unk/%unk: .getStringValue()>(%7)\nreturn await %8",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'getResourceManager instance is none')\nreturn null",
                      "start_line": 1,
                      "end_line": 36,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%9 = 'getResourceString error: ' + error\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %9)\nreturn null",
              "start_line": 1,
              "end_line": 36,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 29,
                  "end_line": 36,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export async function getResourceString(resource: Resource): Promise<string> {\n  try {\n    Log.debug(TAG, 'getResourceString: ' + JSON.stringify(resource));\n    let context = GlobalContext.getContext().getObject('appContext');\n    let mgr: resourceManager.ResourceManager = await resourceManager.getResourceManager(context);\n    if (mgr != null || mgr != undefined) {\n      return await mgr.getStringValue(resource.id);\n    } else {\n      Log.warn(TAG, 'getResourceManager instance is none');\n      return null;\n    }\n  } catch (error) {\n    Log.error(TAG, 'getResourceString error: ' + error);\n    return null;\n  }\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport resourceManager from '@ohos.resourceManager';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'ResourceUtils';\n\nexport async function getResourceString(resource: Resource): Promise<string> {\n  try {\n    Log.debug(TAG, 'getResourceString: ' + JSON.stringify(resource));\n    let context = GlobalContext.getContext().getObject('appContext');\n    let mgr: resourceManager.ResourceManager = await resourceManager.getResourceManager(context);\n    if (mgr != null || mgr != undefined) {\n      return await mgr.getStringValue(resource.id);\n    } else {\n      Log.warn(TAG, 'getResourceManager instance is none');\n      return null;\n    }\n  } catch (error) {\n    Log.error(TAG, 'getResourceString error: ' + error);\n    return null;\n  }\n}\n"
}