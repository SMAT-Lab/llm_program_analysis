digraph "146.ts" {
subgraph "cluster_@ts_files/146.ts: %dflt.[static]%dflt()" {
  label="@ts_files/146.ts: %dflt.[static]%dflt()";
  Node33750 [label="id:0
      this = this: @ts_files/146.ts: %dflt
      staticinvoke <@%unk/%unk: .describe()>('Circular custom providers', %AM0)
      return"];
}
subgraph "cluster_@ts_files/146.ts: %dflt.%AM1$%AM0()" {
  label="@ts_files/146.ts: %dflt.%AM1$%AM0()";
  Node25710 [label="id:0
      this = this: @ts_files/146.ts: %dflt"];
  Node25711 [label="id:1
      %0 = new @ts_files/146.ts: %AC$%dflt$%AM1$%AM0$0
      instanceinvoke %0.<@ts_files/146.ts: %AC$%dflt$%AM1$%AM0$0.constructor()>()
      builder = instanceinvoke Test.<@%unk/%unk: .createTestingModule()>(%0)
      %1 = instanceinvoke builder.<@%unk/%unk: .compile()>()
      %2 = await %1
      %3 = staticinvoke <@%unk/%unk: .expect()>(true)
      %4 = %3.<@%unk/%unk: .to>
      %5 = %4.<@%unk/%unk: .be>
      instanceinvoke %5.<@%unk/%unk: .eql()>(false)"];
  Node25712 [label="id:2
      err = caughtexception: unknown
      %6 = err.<@%unk/%unk: .message>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      %8 = %7.<@%unk/%unk: .to>
      %9 = %8.<@%unk/%unk: .be>
      instanceinvoke %9.<@%unk/%unk: .eql()>('A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.')"];
  Node25713 [label="id:3
      return"];
  Node25710 -> Node25711;
  Node25711 -> Node25713;
  Node25711 -> Node25712[style="dotted"];
  Node25712 -> Node25713;
}
subgraph "cluster_@ts_files/146.ts: %dflt.%AM2$%AM0()" {
  label="@ts_files/146.ts: %dflt.%AM2$%AM0()";
  Node25720 [label="id:0
      this = this: @ts_files/146.ts: %dflt"];
  Node25721 [label="id:1
      %0 = new @ts_files/146.ts: %AC$%dflt$%AM2$%AM0$1
      instanceinvoke %0.<@ts_files/146.ts: %AC$%dflt$%AM2$%AM0$1.constructor()>()
      builder = instanceinvoke Test.<@%unk/%unk: .createTestingModule()>(%0)
      %1 = instanceinvoke builder.<@%unk/%unk: .compile()>()
      %2 = await %1
      %3 = staticinvoke <@%unk/%unk: .expect()>(true)
      %4 = %3.<@%unk/%unk: .to>
      %5 = %4.<@%unk/%unk: .be>
      instanceinvoke %5.<@%unk/%unk: .eql()>(false)"];
  Node25722 [label="id:2
      err = caughtexception: unknown
      %6 = err.<@%unk/%unk: .message>
      %7 = staticinvoke <@%unk/%unk: .expect()>(%6)
      %8 = %7.<@%unk/%unk: .to>
      %9 = %8.<@%unk/%unk: .be>
      instanceinvoke %9.<@%unk/%unk: .eql()>('A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.')"];
  Node25723 [label="id:3
      return"];
  Node25720 -> Node25721;
  Node25721 -> Node25723;
  Node25721 -> Node25722[style="dotted"];
  Node25722 -> Node25723;
}
subgraph "cluster_@ts_files/146.ts: %dflt.%AM0()" {
  label="@ts_files/146.ts: %dflt.%AM0()";
  Node23070 [label="id:0
      this = this: @ts_files/146.ts: %dflt
      staticinvoke <@%unk/%unk: .it()>('should throw an exception (useClass + regular provider)', %AM1$%AM0)
      staticinvoke <@%unk/%unk: .it()>('should throw an exception (2 factories)', %AM2$%AM0)
      return"];
}
subgraph "cluster_@ts_files/146.ts: A.constructor(@ts_files/146.ts: B)" {
  label="@ts_files/146.ts: A.constructor(@ts_files/146.ts: B)";
  Node44600 [label="id:0
      instanceinvoke this.<@ts_files/146.ts: A.%instInit()>()
      b = parameter0: @ts_files/146.ts: B
      this = this: @ts_files/146.ts: A
      return"];
}
subgraph "cluster_@ts_files/146.ts: BImpl.constructor(@ts_files/146.ts: A)" {
  label="@ts_files/146.ts: BImpl.constructor(@ts_files/146.ts: A)";
  Node48620 [label="id:0
      instanceinvoke this.<@ts_files/146.ts: BImpl.%instInit()>()
      a = parameter0: @ts_files/146.ts: A
      this = this: @ts_files/146.ts: BImpl
      return"];
}
subgraph "cluster_@ts_files/146.ts: AppController.constructor(@ts_files/146.ts: A)" {
  label="@ts_files/146.ts: AppController.constructor(@ts_files/146.ts: A)";
  Node57430 [label="id:0
      instanceinvoke this.<@ts_files/146.ts: AppController.%instInit()>()
      a = parameter0: @ts_files/146.ts: A
      this = this: @ts_files/146.ts: AppController
      return"];
}
subgraph "cluster_@ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2.%AM0$%instInit()" {
  label="@ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2.%AM0$%instInit()";
  Node52620 [label="id:0
      this = this: @ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2
      %0 = new @ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3
      instanceinvoke %0.<@ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$2$%AM0$%instInit$3.constructor()>()
      return %0"];
}
subgraph "cluster_@ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4.%AM0$%instInit()" {
  label="@ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4.%AM0$%instInit()";
  Node52640 [label="id:0
      this = this: @ts_files/146.ts: %AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4
      %0 = new @ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5
      instanceinvoke %0.<@ts_files/146.ts: %AC$%AC$%AC$%dflt$%AM2$%AM0$1$%instInit$4$%AM0$%instInit$5.constructor()>()
      return %0"];
}
}
