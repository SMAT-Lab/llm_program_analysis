{
  "type": "file",
  "name": "160.ts",
  "label": "160.ts",
  "start_line": -1,
  "end_line": 135,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 135,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: %dflt\nstaticinvoke <@%unk/%unk: .RegisterClass()>('BABYLON.TransformBlock', TransformBlock)\nreturn",
              "start_line": 1,
              "end_line": 135,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "TransformBlock",
      "label": "TransformBlock",
      "start_line": 1,
      "end_line": 135,
      "functions": [
        {
          "type": "function",
          "name": "Get-transformAsDirection",
          "label": "Get-transformAsDirection",
          "start_line": 1,
          "end_line": 16,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%1 = %0 === 0\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "@editableInPropertyPage(\"Transform as direction\", PropertyTypeForEdition.Boolean, undefined, { embedded: true })\n    public get transformAsDirection() {\n        return this.complementW === 0;\n    }"
        },
        {
          "type": "function",
          "name": "Set-transformAsDirection",
          "label": "Set-transformAsDirection",
          "start_line": 1,
          "end_line": 20,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "value = parameter0: boolean\nthis = this: @ts_files/160.ts: TransformBlock\nif value != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/160.ts: TransformBlock.complementW> = %0\nreturn",
                      "start_line": 1,
                      "end_line": 135,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = 1",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public set transformAsDirection(value: boolean) {\n        this.complementW = value ? 0 : 1;\n    }"
        },
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/160.ts: TransformBlock.%instInit()>()\nname = parameter0: string\nthis = this: @ts_files/160.ts: TransformBlock\n%0 = NodeMaterialBlockTargets.<@%unk/%unk: .Neutral>\nstaticinvoke <@%unk/%unk: .super()>(name, %0)\n%1 = NodeMaterialBlockTargets.<@%unk/%unk: .Vertex>\nthis.<@ts_files/160.ts: TransformBlock.target> = %1\n%2 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .AutoDetect>\ninstanceinvoke this.<@%unk/%unk: .registerInput()>('vector', %2)\n%3 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Matrix>\ninstanceinvoke this.<@%unk/%unk: .registerInput()>('transform', %3)\n%4 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector4>\ninstanceinvoke this.<@%unk/%unk: .registerOutput()>('output', %4)\n%5 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector3>\ninstanceinvoke this.<@%unk/%unk: .registerOutput()>('xyz', %5)\n%6 = this.<@ts_files/160.ts: TransformBlock._inputs>\n%7 = %6.<@%unk/%unk: .0>\n%8 = %7.<@%unk/%unk: .onConnectionObservable>\ninstanceinvoke %8.<@%unk/%unk: .add()>(%AM0$constructor)\nreturn",
              "start_line": 1,
              "end_line": 135,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public constructor(name: string) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.target = NodeMaterialBlockTargets.Vertex;\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].onConnectionObservable.add((other) => {\n            if (other.ownerBlock.isInput) {\n                const otherAsInput = other.ownerBlock as InputBlock;\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n                    this.complementW = 0;\n                }\n            }\n        });\n    }"
        },
        {
          "type": "function",
          "name": "getClassName",
          "label": "getClassName",
          "start_line": 1,
          "end_line": 39,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\nreturn 'TransformBlock'",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override getClassName() {\n        return \"TransformBlock\";\n    }"
        },
        {
          "type": "function",
          "name": "Get-vector",
          "label": "Get-vector",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = this.<@ts_files/160.ts: TransformBlock._inputs>\n%1 = %0.<@%unk/%unk: .0>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get vector(): NodeMaterialConnectionPoint {\n        return this._inputs[0];\n    }"
        },
        {
          "type": "function",
          "name": "Get-output",
          "label": "Get-output",
          "start_line": 1,
          "end_line": 45,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = this.<@ts_files/160.ts: TransformBlock._outputs>\n%1 = %0.<@%unk/%unk: .0>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get output(): NodeMaterialConnectionPoint {\n        return this._outputs[0];\n    }"
        },
        {
          "type": "function",
          "name": "Get-xyz",
          "label": "Get-xyz",
          "start_line": 1,
          "end_line": 48,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = this.<@ts_files/160.ts: TransformBlock._outputs>\n%1 = %0.<@%unk/%unk: .1>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get xyz(): NodeMaterialConnectionPoint {\n        return this._outputs[1];\n    }"
        },
        {
          "type": "function",
          "name": "Get-transform",
          "label": "Get-transform",
          "start_line": 1,
          "end_line": 51,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = this.<@ts_files/160.ts: TransformBlock._inputs>\n%1 = %0.<@%unk/%unk: .1>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public get transform(): NodeMaterialConnectionPoint {\n        return this._inputs[1];\n    }"
        },
        {
          "type": "function",
          "name": "_buildBlock",
          "label": "_buildBlock",
          "start_line": 1,
          "end_line": 54,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "state = parameter0: NodeMaterialBuildState\nthis = this: @ts_files/160.ts: TransformBlock\ninstanceinvoke super.<@%unk/%unk: ._buildBlock()>(state)\nvector = this.<@ts_files/160.ts: TransformBlock.vector>\ntransform = this.<@ts_files/160.ts: TransformBlock.transform>\n%0 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector4>\nvec4 = instanceinvoke state.<@%unk/%unk: ._getShaderType()>(%0)\n%1 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector3>\nvec3 = instanceinvoke state.<@%unk/%unk: ._getShaderType()>(%1)\n%2 = vector.<@%unk/%unk: .connectedPoint>\nif %2 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%3 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%4 = %3 === 0\n%5 = this.<@ts_files/160.ts: TransformBlock.transformAsDirection>\n%6 = %4 || %5\nif %6 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = this.<@ts_files/160.ts: TransformBlock.name>\n%8 = '//' + %7\ncomments = %8\ninstanceinvoke state.<@%unk/%unk: ._emitFunctionFromInclude()>('helperFunctions', comments)\n%9 = state.<@%unk/%unk: .sharedData>\n%10 = %9.<@%unk/%unk: .blocksWithDefines>\ninstanceinvoke %10.<@%unk/%unk: .push()>(this)\n%11 = transform.<@%unk/%unk: .associatedVariableName>\n%12 = %11 + '_NUS'\ntransformName = instanceinvoke state.<@%unk/%unk: ._getFreeVariableName()>(%12)\n%13 = state.<@%unk/%unk: .shaderLanguage>\n%14 = ShaderLanguage.<@%unk/%unk: .WGSL>\nif %13 === %14",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%15 = transform.<@%unk/%unk: .associatedVariableName>\n%16 = transform.<@%unk/%unk: .associatedVariableName>\n%17 = transform.<@%unk/%unk: .associatedVariableName>\n%18 = 'var ' + transformName\n%19 = %18 + ': mat3x3f = mat3x3f('\n%20 = %19 + %15\n%21 = %20 + '[0].xyz, '\n%22 = %21 + %16\n%23 = %22 + '[1].xyz, '\n%24 = %23 + %17\n%25 = %24 + '[2].xyz);\\n'\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %25",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "state.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + '#ifdef NONUNIFORMSCALING\n'\n%31 = transformName + ' = transposeMat3(inverseMat3('\n%32 = %31 + transformName\n%33 = %32 + '));\\n'\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %33\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + '#endif\n'\n%34 = vector.<@%unk/%unk: .connectedPoint>\n%35 = %34.<@%unk/%unk: .type>\n%36 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector2>\nif %35 == %36",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%39 = this.<@ts_files/160.ts: TransformBlock.output>\n%40 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%39)\n%41 = vector.<@%unk/%unk: .associatedVariableName>\n%42 = this.<@ts_files/160.ts: TransformBlock.complementZ>\n%43 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%42)\n%44 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%45 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%44)\n%46 = ' = ' + vec4\n%47 = %46 + '('\n%48 = %47 + transformName\n%49 = %48 + ' * '\n%50 = %49 + vec3\n%51 = %50 + '('\n%52 = %51 + %41\n%53 = %52 + ', '\n%54 = %53 + %43\n%55 = %54 + '), '\n%56 = %55 + %45\n%57 = %56 + ');\\n'\n%58 = %40 + %57\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %58",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%132 = this.<@ts_files/160.ts: TransformBlock.xyz>\n%133 = %132.<@%unk/%unk: .hasEndpoints>\nif %133 != 0",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%134 = this.<@ts_files/160.ts: TransformBlock.xyz>\n%135 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%134)\n%136 = this.<@ts_files/160.ts: TransformBlock.output>\n%137 = %136.<@%unk/%unk: .associatedVariableName>\n%138 = ' = ' + %137\n%139 = %138 + '.xyz;\\n'\n%140 = %135 + %139\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %140",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "block",
                                              "name": "Block?",
                                              "label": "return this",
                                              "start_line": 18,
                                              "end_line": 113,
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%37 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector3>\nif %35 == %37",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%59 = this.<@ts_files/160.ts: TransformBlock.output>\n%60 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%59)\n%61 = vector.<@%unk/%unk: .associatedVariableName>\n%62 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%63 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%62)\n%64 = ' = ' + vec4\n%65 = %64 + '('\n%66 = %65 + transformName\n%67 = %66 + ' * '\n%68 = %67 + %61\n%69 = %68 + ', '\n%70 = %69 + %63\n%71 = %70 + ');\\n'\n%72 = %60 + %71\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %72",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%38 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Color3>\nif %35 == %38",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        },
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%73 = this.<@ts_files/160.ts: TransformBlock.output>\n%74 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%73)\n%75 = vector.<@%unk/%unk: .associatedVariableName>\n%76 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%77 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%76)\n%78 = ' = ' + vec4\n%79 = %78 + '('\n%80 = %79 + transformName\n%81 = %80 + ' * '\n%82 = %81 + %75\n%83 = %82 + '.xyz, '\n%84 = %83 + %77\n%85 = %84 + ');\\n'\n%86 = %74 + %85\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %86",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": [
                                            {
                                              "type": "blockRef",
                                              "label": "(RepeatedBlock)"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%26 = transform.<@%unk/%unk: .associatedVariableName>\n%27 = 'mat3 ' + transformName\n%28 = %27 + ' = mat3('\n%29 = %28 + %26\n%30 = %29 + ');\\n'\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %30",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "transformName = transform.<@%unk/%unk: .associatedVariableName>\n%87 = vector.<@%unk/%unk: .connectedPoint>\n%88 = %87.<@%unk/%unk: .type>\n%89 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector2>\nif %88 == %89",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%92 = this.<@ts_files/160.ts: TransformBlock.output>\n%93 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%92)\n%94 = vector.<@%unk/%unk: .associatedVariableName>\n%95 = this.<@ts_files/160.ts: TransformBlock.complementZ>\n%96 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%95)\n%97 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%98 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%97)\n%99 = ' = ' + transformName\n%100 = %99 + ' * '\n%101 = %100 + vec4\n%102 = %101 + '('\n%103 = %102 + %94\n%104 = %103 + ', '\n%105 = %104 + %96\n%106 = %105 + ', '\n%107 = %106 + %98\n%108 = %107 + ');\\n'\n%109 = %93 + %108\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %109",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%90 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Vector3>\nif %88 == %90",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%110 = this.<@ts_files/160.ts: TransformBlock.output>\n%111 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%110)\n%112 = vector.<@%unk/%unk: .associatedVariableName>\n%113 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%114 = instanceinvoke this.<@%unk/%unk: ._writeFloat()>(%113)\n%115 = ' = ' + transformName\n%116 = %115 + ' * '\n%117 = %116 + vec4\n%118 = %117 + '('\n%119 = %118 + %112\n%120 = %119 + ', '\n%121 = %120 + %114\n%122 = %121 + ');\\n'\n%123 = %111 + %122\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %123",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%91 = NodeMaterialBlockConnectionPointTypes.<@%unk/%unk: .Color3>\nif %88 == %91",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "blockRef",
                                  "label": "(RepeatedBlock)"
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%124 = this.<@ts_files/160.ts: TransformBlock.output>\n%125 = instanceinvoke state.<@%unk/%unk: ._declareOutput()>(%124)\n%126 = vector.<@%unk/%unk: .associatedVariableName>\n%127 = ' = ' + transformName\n%128 = %127 + ' * '\n%129 = %128 + %126\n%130 = %129 + ';\\n'\n%131 = %125 + %130\nstate.<@%unk/%unk: .compilationString> = state.<@%unk/%unk: .compilationString> + %131",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected override _buildBlock(state: NodeMaterialBuildState) {\n        super._buildBlock(state);\n        const vector = this.vector;\n        const transform = this.transform;\n        const vec4 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector4);\n        const vec3 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector3);\n        if (vector.connectedPoint) {\n            // None uniform scaling case.\n            if (this.complementW === 0 || this.transformAsDirection) {\n                const comments = `//${this.name}`;\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\n                state.sharedData.blocksWithDefines.push(this);\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\n                if (state.shaderLanguage === ShaderLanguage.WGSL) {\n                    state.compilationString += `var ${transformName}: mat3x3f = mat3x3f(${transform.associatedVariableName}[0].xyz, ${transform.associatedVariableName}[1].xyz, ${transform.associatedVariableName}[2].xyz);\\n`;\n                } else {\n                    state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\n`;\n                }\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\n`;\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\n`;\n                state.compilationString += `#endif\\n`;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${vec4}(${transformName} * ${vec3}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                }\n            } else {\n                const transformName = transform.associatedVariableName;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString += state._declareOutput(this.output) + ` = ${transformName} * ${vector.associatedVariableName};\\n`;\n                        break;\n                }\n            }\n            if (this.xyz.hasEndpoints) {\n                state.compilationString += state._declareOutput(this.xyz) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\n            }\n        }\n        return this;\n    }"
        },
        {
          "type": "function",
          "name": "prepareDefines",
          "label": "prepareDefines",
          "start_line": 1,
          "end_line": 115,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mesh = parameter0: AbstractMesh\nnodeMaterial = parameter1: NodeMaterial\ndefines = parameter2: NodeMaterialDefines\nthis = this: @ts_files/160.ts: TransformBlock\n%0 = mesh.<@%unk/%unk: .nonUniformScaling>\nif %0 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke defines.<@%unk/%unk: .setValue()>('NONUNIFORMSCALING', true)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 18,
                      "end_line": 135,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\n        // Do nothing\n        if (mesh.nonUniformScaling) {\n            defines.setValue(\"NONUNIFORMSCALING\", true);\n        }\n    }"
        },
        {
          "type": "function",
          "name": "serialize",
          "label": "serialize",
          "start_line": 1,
          "end_line": 125,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\nserializationObject = instanceinvoke super.<@%unk/%unk: .serialize()>()\n%0 = this.<@ts_files/160.ts: TransformBlock.complementZ>\nserializationObject.<@%unk/%unk: .complementZ> = %0\n%1 = this.<@ts_files/160.ts: TransformBlock.complementW>\nserializationObject.<@%unk/%unk: .complementW> = %1\nreturn serializationObject",
              "start_line": 1,
              "end_line": 125,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.complementZ = this.complementZ;\n        serializationObject.complementW = this.complementW;\n        return serializationObject;\n    }"
        },
        {
          "type": "function",
          "name": "_deserialize",
          "label": "_deserialize",
          "start_line": 1,
          "end_line": 127,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "serializationObject = parameter0: any\nscene = parameter1: Scene\nrootUrl = parameter2: string\nthis = this: @ts_files/160.ts: TransformBlock\ninstanceinvoke super.<@%unk/%unk: ._deserialize()>(serializationObject, scene, rootUrl)\n%0 = serializationObject.<@%unk/%unk: .complementZ>\nif %0 !== undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = serializationObject.<@%unk/%unk: .complementZ>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/160.ts: TransformBlock.complementZ> = %1\n%2 = serializationObject.<@%unk/%unk: .complementW>\nif %2 !== undefined",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = serializationObject.<@%unk/%unk: .complementW>",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "this.<@ts_files/160.ts: TransformBlock.complementW> = %3\nreturn",
                              "start_line": 1,
                              "end_line": 135,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%3 = 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "blockRef",
                              "label": "(RepeatedBlock)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public override _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n    }"
        },
        {
          "type": "function",
          "name": "_dumpPropertiesCode",
          "label": "_dumpPropertiesCode",
          "start_line": 1,
          "end_line": 135,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/160.ts: TransformBlock\n%0 = instanceinvoke super.<@%unk/%unk: ._dumpPropertiesCode()>()\n%1 = this.<@ts_files/160.ts: TransformBlock._codeVariableName>\n%2 = this.<@ts_files/160.ts: TransformBlock.complementZ>\n%3 = %1 + '.complementZ = '\n%4 = %3 + %2\n%5 = %4 + ';\\n'\ncodeString = %0 + %5\n%6 = this.<@ts_files/160.ts: TransformBlock._codeVariableName>\n%7 = this.<@ts_files/160.ts: TransformBlock.complementW>\n%8 = %6 + '.complementW = '\n%9 = %8 + %7\n%10 = %9 + ';\\n'\ncodeString = codeString + %10\nreturn codeString",
              "start_line": 1,
              "end_line": 135,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "protected override _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\n`;\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\n`;\n        return codeString;\n    }"
        },
        {
          "type": "function",
          "name": "%AM0$constructor",
          "label": "%AM0$constructor",
          "start_line": 1,
          "end_line": 30,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "other = parameter0: unknown\nthis = this: @ts_files/160.ts: TransformBlock\n%0 = other.<@%unk/%unk: .ownerBlock>\n%1 = %0.<@%unk/%unk: .isInput>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = other.<@%unk/%unk: .ownerBlock>\notherAsInput = <InputBlock>%2\n%3 = otherAsInput.<@%unk/%unk: .name>\n%4 = %3 === 'normal'\n%5 = otherAsInput.<@%unk/%unk: .name>\n%6 = %5 === 'tangent'\n%7 = %4 || %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "this.<@ts_files/160.ts: TransformBlock.complementW> = 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "return",
                          "start_line": 18,
                          "end_line": 135,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(other) => {\n            if (other.ownerBlock.isInput) {\n                const otherAsInput = other.ownerBlock as InputBlock;\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n                    this.complementW = 0;\n                }\n            }\n        }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class TransformBlock extends NodeMaterialBlock {\n    public complementW = 1;\n    public complementZ = 0;\n    @editableInPropertyPage(\"Transform as direction\", PropertyTypeForEdition.Boolean, undefined, { embedded: true })\n    public get transformAsDirection() {\n        return this.complementW === 0;\n    }\n    public set transformAsDirection(value: boolean) {\n        this.complementW = value ? 0 : 1;\n    }\n    public constructor(name: string) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.target = NodeMaterialBlockTargets.Vertex;\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].onConnectionObservable.add((other) => {\n            if (other.ownerBlock.isInput) {\n                const otherAsInput = other.ownerBlock as InputBlock;\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n                    this.complementW = 0;\n                }\n            }\n        });\n    }\n    public override getClassName() {\n        return \"TransformBlock\";\n    }\n    public get vector(): NodeMaterialConnectionPoint {\n        return this._inputs[0];\n    }\n    public get output(): NodeMaterialConnectionPoint {\n        return this._outputs[0];\n    }\n    public get xyz(): NodeMaterialConnectionPoint {\n        return this._outputs[1];\n    }\n    public get transform(): NodeMaterialConnectionPoint {\n        return this._inputs[1];\n    }\n    protected override _buildBlock(state: NodeMaterialBuildState) {\n        super._buildBlock(state);\n        const vector = this.vector;\n        const transform = this.transform;\n        const vec4 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector4);\n        const vec3 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector3);\n        if (vector.connectedPoint) {\n            // None uniform scaling case.\n            if (this.complementW === 0 || this.transformAsDirection) {\n                const comments = `//${this.name}`;\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\n                state.sharedData.blocksWithDefines.push(this);\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\n                if (state.shaderLanguage === ShaderLanguage.WGSL) {\n                    state.compilationString += `var ${transformName}: mat3x3f = mat3x3f(${transform.associatedVariableName}[0].xyz, ${transform.associatedVariableName}[1].xyz, ${transform.associatedVariableName}[2].xyz);\\n`;\n                } else {\n                    state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\n`;\n                }\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\n`;\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\n`;\n                state.compilationString += `#endif\\n`;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${vec4}(${transformName} * ${vec3}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                }\n            } else {\n                const transformName = transform.associatedVariableName;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString += state._declareOutput(this.output) + ` = ${transformName} * ${vector.associatedVariableName};\\n`;\n                        break;\n                }\n            }\n            if (this.xyz.hasEndpoints) {\n                state.compilationString += state._declareOutput(this.xyz) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\n            }\n        }\n        return this;\n    }\n    public override prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\n        // Do nothing\n        if (mesh.nonUniformScaling) {\n            defines.setValue(\"NONUNIFORMSCALING\", true);\n        }\n    }\n    public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.complementZ = this.complementZ;\n        serializationObject.complementW = this.complementW;\n        return serializationObject;\n    }\n    public override _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n    }\n    protected override _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\n`;\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\n`;\n        return codeString;\n    }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\nimport { RegisterClass } from \"../../../Misc/typeStore\";\nimport type { Scene } from \"../../../scene\";\nimport type { InputBlock } from \"./Input/inputBlock\";\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\nimport type { NodeMaterial, NodeMaterialDefines } from \"../nodeMaterial\";\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"core/Decorators/nodeDecorator\";\nexport class TransformBlock extends NodeMaterialBlock {\n    public complementW = 1;\n    public complementZ = 0;\n    @editableInPropertyPage(\"Transform as direction\", PropertyTypeForEdition.Boolean, undefined, { embedded: true })\n    public get transformAsDirection() {\n        return this.complementW === 0;\n    }\n    public set transformAsDirection(value: boolean) {\n        this.complementW = value ? 0 : 1;\n    }\n    public constructor(name: string) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.target = NodeMaterialBlockTargets.Vertex;\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].onConnectionObservable.add((other) => {\n            if (other.ownerBlock.isInput) {\n                const otherAsInput = other.ownerBlock as InputBlock;\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n                    this.complementW = 0;\n                }\n            }\n        });\n    }\n    public override getClassName() {\n        return \"TransformBlock\";\n    }\n    public get vector(): NodeMaterialConnectionPoint {\n        return this._inputs[0];\n    }\n    public get output(): NodeMaterialConnectionPoint {\n        return this._outputs[0];\n    }\n    public get xyz(): NodeMaterialConnectionPoint {\n        return this._outputs[1];\n    }\n    public get transform(): NodeMaterialConnectionPoint {\n        return this._inputs[1];\n    }\n    protected override _buildBlock(state: NodeMaterialBuildState) {\n        super._buildBlock(state);\n        const vector = this.vector;\n        const transform = this.transform;\n        const vec4 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector4);\n        const vec3 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector3);\n        if (vector.connectedPoint) {\n            // None uniform scaling case.\n            if (this.complementW === 0 || this.transformAsDirection) {\n                const comments = `//${this.name}`;\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\n                state.sharedData.blocksWithDefines.push(this);\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\n                if (state.shaderLanguage === ShaderLanguage.WGSL) {\n                    state.compilationString += `var ${transformName}: mat3x3f = mat3x3f(${transform.associatedVariableName}[0].xyz, ${transform.associatedVariableName}[1].xyz, ${transform.associatedVariableName}[2].xyz);\\n`;\n                } else {\n                    state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\n`;\n                }\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\n`;\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\n`;\n                state.compilationString += `#endif\\n`;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${vec4}(${transformName} * ${vec3}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${vec4}(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                }\n            } else {\n                const transformName = transform.associatedVariableName;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            state._declareOutput(this.output) +\n                            ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            state._declareOutput(this.output) + ` = ${transformName} * ${vec4}(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\n                        break;\n                    default:\n                        state.compilationString += state._declareOutput(this.output) + ` = ${transformName} * ${vector.associatedVariableName};\\n`;\n                        break;\n                }\n            }\n            if (this.xyz.hasEndpoints) {\n                state.compilationString += state._declareOutput(this.xyz) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\n            }\n        }\n        return this;\n    }\n    public override prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\n        // Do nothing\n        if (mesh.nonUniformScaling) {\n            defines.setValue(\"NONUNIFORMSCALING\", true);\n        }\n    }\n    public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.complementZ = this.complementZ;\n        serializationObject.complementW = this.complementW;\n        return serializationObject;\n    }\n    public override _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n    }\n    protected override _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\n`;\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.TransformBlock\", TransformBlock);"
}