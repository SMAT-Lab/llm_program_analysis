{
  "type": "file",
  "name": "129.ts",
  "label": "129.ts",
  "start_line": -1,
  "end_line": 4,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 1,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/129.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "BadRequestException",
      "label": "BadRequestException",
      "start_line": 1,
      "end_line": 4,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 4,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/129.ts: BadRequestException.%instInit()>()\nobjectOrError = parameter0: string|@ES2015/BuiltinClass: Object|any\ndescriptionOrOptions = parameter1: string|HttpExceptionOptions\nthis = this: @ts_files/129.ts: BadRequestException\n%0 = instanceinvoke HttpException.<@%unk/%unk: .extractDescriptionAndOptionsFrom()>(descriptionOrOptions)\ndescription = %0.<@%unk/%unk: .description>\nhttpExceptionOptions = %0.<@%unk/%unk: .httpExceptionOptions>\n%1 = HttpStatus.<@%unk/%unk: .BAD_REQUEST>\n%2 = instanceinvoke HttpException.<@%unk/%unk: .createBody()>(objectOrError, description, %1)\n%3 = HttpStatus.<@%unk/%unk: .BAD_REQUEST>\nstaticinvoke <@%unk/%unk: .super()>(%2, %3, httpExceptionOptions)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(\n    objectOrError?: string | object | any,\n    descriptionOrOptions: string | HttpExceptionOptions = 'Bad Request',\n  ) {\n    const { description, httpExceptionOptions } =\n      HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_REQUEST,\n      ),\n      HttpStatus.BAD_REQUEST,\n      httpExceptionOptions,\n    );\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class BadRequestException extends HttpException {\n  constructor(\n    objectOrError?: string | object | any,\n    descriptionOrOptions: string | HttpExceptionOptions = 'Bad Request',\n  ) {\n    const { description, httpExceptionOptions } =\n      HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_REQUEST,\n      ),\n      HttpStatus.BAD_REQUEST,\n      httpExceptionOptions,\n    );\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException, HttpExceptionOptions } from './http.exception';\nexport class BadRequestException extends HttpException {\n  constructor(\n    objectOrError?: string | object | any,\n    descriptionOrOptions: string | HttpExceptionOptions = 'Bad Request',\n  ) {\n    const { description, httpExceptionOptions } =\n      HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_REQUEST,\n      ),\n      HttpStatus.BAD_REQUEST,\n      httpExceptionOptions,\n    );\n  }\n}"
}