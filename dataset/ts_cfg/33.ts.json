{
  "type": "file",
  "name": "33.ts",
  "label": "33.ts",
  "start_line": -1,
  "end_line": 174,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 174,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "ActionBarProp",
      "label": "ActionBarProp",
      "start_line": 1,
      "end_line": 174,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\ninstanceinvoke this.<@ts_files/33.ts: ActionBarProp.%instInit()>()\nreturn",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n  }"
        },
        {
          "type": "function",
          "name": "setHasTabBar",
          "label": "setHasTabBar",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "hasTabBar = parameter0: boolean\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.hasTabBar> = hasTabBar\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setHasTabBar(hasTabBar: boolean): ActionBarProp {\n    this.hasTabBar = hasTabBar;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getHasTabBar",
          "label": "getHasTabBar",
          "start_line": 1,
          "end_line": 73,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.hasTabBar>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getHasTabBar(): boolean {\n    return this.hasTabBar;\n  }"
        },
        {
          "type": "function",
          "name": "setLeftAction",
          "label": "setLeftAction",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "leftAction = parameter0: Action\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.leftAction> = leftAction\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setLeftAction(leftAction: Action): ActionBarProp {\n    this.leftAction = leftAction;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getLeftAction",
          "label": "getLeftAction",
          "start_line": 1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.leftAction>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getLeftAction(): Action {\n    return this.leftAction;\n  }"
        },
        {
          "type": "function",
          "name": "setIsHeadTitle",
          "label": "setIsHeadTitle",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "isHeadTitle = parameter0: boolean\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.isHeadTitle> = isHeadTitle\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setIsHeadTitle(isHeadTitle: boolean): ActionBarProp {\n    this.isHeadTitle = isHeadTitle;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getIsHeadTitle",
          "label": "getIsHeadTitle",
          "start_line": 1,
          "end_line": 91,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.isHeadTitle>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getIsHeadTitle(): boolean {\n    return this.isHeadTitle;\n  }"
        },
        {
          "type": "function",
          "name": "setTitle",
          "label": "setTitle",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "title = parameter0: Object\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.title> = title\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setTitle(title: Object): ActionBarProp {\n    this.title = title;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getTitle",
          "label": "getTitle",
          "start_line": 1,
          "end_line": 100,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.title>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getTitle(): Object {\n    return this.title;\n  }"
        },
        {
          "type": "function",
          "name": "setSubTitle",
          "label": "setSubTitle",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "subTitle = parameter0: Object\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.subTitle> = subTitle\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setSubTitle(subTitle: Object): ActionBarProp {\n    this.subTitle = subTitle;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getSubTitle",
          "label": "getSubTitle",
          "start_line": 1,
          "end_line": 109,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.subTitle>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getSubTitle(): Object {\n    return this.subTitle;\n  }"
        },
        {
          "type": "function",
          "name": "setMenuList",
          "label": "setMenuList",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "menuList = parameter0: Action[]\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.menuList> = menuList\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setMenuList(menuList: Action[]): ActionBarProp {\n    this.menuList = menuList;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getMenuList",
          "label": "getMenuList",
          "start_line": 1,
          "end_line": 118,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.menuList>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getMenuList(): Action[] {\n    return this.menuList;\n  }"
        },
        {
          "type": "function",
          "name": "setBackgroundColor",
          "label": "setBackgroundColor",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "backgroundColor = parameter0: Resource\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.backgroundColor> = backgroundColor\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setBackgroundColor(backgroundColor: Resource): ActionBarProp {\n    this.backgroundColor = backgroundColor;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getBackgroundColor",
          "label": "getBackgroundColor",
          "start_line": 1,
          "end_line": 127,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.colorMode>\n%1 = ActionBarColorMode.<@%unk/%unk: .TRANSPARENT>\nif %0 === %1",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = @ts_files/33.ts: ActionBarProp.[static]TRANSPARENT_BACKGROUND_COLOR",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return %2",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = this.<@ts_files/33.ts: ActionBarProp.backgroundColor>",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getBackgroundColor(): Resource {\n    return this.colorMode === ActionBarColorMode.TRANSPARENT\n      ? ActionBarProp.TRANSPARENT_BACKGROUND_COLOR : this.backgroundColor;\n  }"
        },
        {
          "type": "function",
          "name": "setAlpha",
          "label": "setAlpha",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "alpha = parameter0: number\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.alpha> = alpha\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setAlpha(alpha: number): ActionBarProp {\n    this.alpha = alpha;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getAlpha",
          "label": "getAlpha",
          "start_line": 1,
          "end_line": 137,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.alpha>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getAlpha(): number {\n    return this.alpha;\n  }"
        },
        {
          "type": "function",
          "name": "setMode",
          "label": "setMode",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "mode = parameter0: ActionBarMode\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.mode> = mode\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setMode(mode: ActionBarMode): ActionBarProp {\n    this.mode = mode;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getMode",
          "label": "getMode",
          "start_line": 1,
          "end_line": 146,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.mode>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getMode(): ActionBarMode {\n    return this.mode;\n  }"
        },
        {
          "type": "function",
          "name": "setColorMode",
          "label": "setColorMode",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "colorMode = parameter0: ActionBarColorMode\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.colorMode> = colorMode\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setColorMode(colorMode: ActionBarColorMode): ActionBarProp {\n    this.colorMode = colorMode;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getColorMode",
          "label": "getColorMode",
          "start_line": 1,
          "end_line": 155,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.colorMode>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getColorMode(): ActionBarColorMode {\n    return this.colorMode;\n  }"
        },
        {
          "type": "function",
          "name": "setSelectionMode",
          "label": "setSelectionMode",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "selectionMode = parameter0: ActionBarSelectionMode\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.selectionMode> = selectionMode\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setSelectionMode(selectionMode: ActionBarSelectionMode): ActionBarProp {\n    this.selectionMode = selectionMode;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getSelectionMode",
          "label": "getSelectionMode",
          "start_line": 1,
          "end_line": 164,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.selectionMode>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getSelectionMode(): ActionBarSelectionMode {\n    return this.selectionMode;\n  }"
        },
        {
          "type": "function",
          "name": "setMaxSelectCount",
          "label": "setMaxSelectCount",
          "start_line": 1,
          "end_line": 174,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "maxSelectCount = parameter0: number\nthis = this: @ts_files/33.ts: ActionBarProp\nthis.<@ts_files/33.ts: ActionBarProp.maxSelectCount> = maxSelectCount\nreturn this",
              "start_line": 1,
              "end_line": 174,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public setMaxSelectCount(maxSelectCount: number): ActionBarProp {\n    this.maxSelectCount = maxSelectCount;\n    return this;\n  }"
        },
        {
          "type": "function",
          "name": "getMaxSelectCount",
          "label": "getMaxSelectCount",
          "start_line": 1,
          "end_line": 173,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/33.ts: ActionBarProp\n%0 = this.<@ts_files/33.ts: ActionBarProp.maxSelectCount>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getMaxSelectCount(): number {\n    return this.maxSelectCount;\n  }"
        },
        {
          "type": "function",
          "name": "getCountDetailSelectedTitle",
          "label": "getCountDetailSelectedTitle",
          "start_line": 1,
          "end_line": 55,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "count = parameter0: number\nthis = this: @ts_files/33.ts: ActionBarProp\n%0 = staticinvoke <@%unk/%unk: .$r()>('app.plural.count_details_selected', count, count)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getCountDetailSelectedTitle(count: number): Resource {\n    return $r('app.plural.count_details_selected', count, count);\n  }"
        },
        {
          "type": "function",
          "name": "getCountDetailExternalSelectedTitle",
          "label": "getCountDetailExternalSelectedTitle",
          "start_line": 1,
          "end_line": 64,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "count = parameter0: number\nmaxSelectCount = parameter1: number\nthis = this: @ts_files/33.ts: ActionBarProp\n%0 = staticinvoke <@%unk/%unk: .$r()>('app.string.count_details_external_selected', count, maxSelectCount)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public static getCountDetailExternalSelectedTitle(count: number, maxSelectCount: number): Resource {\n    return $r('app.string.count_details_external_selected', count, maxSelectCount);\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class ActionBarProp {\n  public static NORMAL_BACKGROUND_COLOR: Resource = $r('app.color.default_background_color');\n  public static TRANSPARENT_BACKGROUND_COLOR: Resource = $r('app.color.transparent');\n  public static NORMAL_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_text');\n  public static NORMAL_SUBTITLE_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_subtitle_text');\n  public static ICON_COLOR: Resource = $r('sys.color.ohos_id_color_primary');\n  public static TRANSPARENT_TEXT_COLOR: Resource = $r('app.color.title_text_color_on_transparent_bg');\n  public static TRANSPARENT_SUBTITLE_TEXT_COLOR: Resource = $r('app.color.subtitle_text_color_on_transparent_bg');\n  public static HEAD_TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline6');\n  public static HEAD_TITLE_ONE_LINE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline7');\n  public static TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline8');\n  public static TITLE_FONT_WEIGHT = 500;\n  public static SUBTITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_body2');\n  public static MEDIUM_FONT: Resource = $r('app.string.id_text_font_family_medium');\n  public static REGULAR_FONT: Resource = $r('app.string.id_text_font_family_regular');\n  public static SINGLE_UNSELECT_TITLE: Resource = $r('app.string.title_select_photos');\n  public static SINGLE_SELECT_ALBUM_TITLE: Resource = $r('app.string.title_select_album');\n  public static MULTI_UNSELECT_TITLE: Resource = $r('app.string.title_none_selected');\n  public static PHOTO_BROWSER_ACTIONBAR_ALPHA = 0.95;\n  private hasTabBar = false;\n  private leftAction = Action.NONE;\n  private isHeadTitle = false;\n  private title: Object = null;\n  private subTitle: Object = null;\n  private menuList: Action[] = [];\n  private backgroundColor: Resource = ActionBarProp.NORMAL_BACKGROUND_COLOR;\n  private alpha = 1;\n  private selectionMode: ActionBarSelectionMode = ActionBarSelectionMode.MULTI;\n  private colorMode: ActionBarColorMode = ActionBarColorMode.NORMAL;\n  private mode: ActionBarMode = ActionBarMode.STANDARD_MODE;\n  private maxSelectCount = 0;\n\n  constructor() {\n  }\n\n  public static getCountDetailSelectedTitle(count: number): Resource {\n    return $r('app.plural.count_details_selected', count, count);\n  }\n\n  /**\n   * External selection quantity display\n   * @param count The selected quantity, same as the current count above\n   * @param maxSelectCount Maximum number of options\n   */\n  public static getCountDetailExternalSelectedTitle(count: number, maxSelectCount: number): Resource {\n    return $r('app.string.count_details_external_selected', count, maxSelectCount);\n  }\n\n  public setHasTabBar(hasTabBar: boolean): ActionBarProp {\n    this.hasTabBar = hasTabBar;\n    return this;\n  }\n\n  public getHasTabBar(): boolean {\n    return this.hasTabBar;\n  }\n\n  public setLeftAction(leftAction: Action): ActionBarProp {\n    this.leftAction = leftAction;\n    return this;\n  }\n\n  public getLeftAction(): Action {\n    return this.leftAction;\n  }\n\n  public setIsHeadTitle(isHeadTitle: boolean): ActionBarProp {\n    this.isHeadTitle = isHeadTitle;\n    return this;\n  }\n\n  public getIsHeadTitle(): boolean {\n    return this.isHeadTitle;\n  }\n\n  public setTitle(title: Object): ActionBarProp {\n    this.title = title;\n    return this;\n  }\n\n  public getTitle(): Object {\n    return this.title;\n  }\n\n  public setSubTitle(subTitle: Object): ActionBarProp {\n    this.subTitle = subTitle;\n    return this;\n  }\n\n  public getSubTitle(): Object {\n    return this.subTitle;\n  }\n\n  public setMenuList(menuList: Action[]): ActionBarProp {\n    this.menuList = menuList;\n    return this;\n  }\n\n  public getMenuList(): Action[] {\n    return this.menuList;\n  }\n\n  public setBackgroundColor(backgroundColor: Resource): ActionBarProp {\n    this.backgroundColor = backgroundColor;\n    return this;\n  }\n\n  public getBackgroundColor(): Resource {\n    return this.colorMode === ActionBarColorMode.TRANSPARENT\n      ? ActionBarProp.TRANSPARENT_BACKGROUND_COLOR : this.backgroundColor;\n  }\n\n  public setAlpha(alpha: number): ActionBarProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  public setMode(mode: ActionBarMode): ActionBarProp {\n    this.mode = mode;\n    return this;\n  }\n\n  public getMode(): ActionBarMode {\n    return this.mode;\n  }\n\n  public setColorMode(colorMode: ActionBarColorMode): ActionBarProp {\n    this.colorMode = colorMode;\n    return this;\n  }\n\n  public getColorMode(): ActionBarColorMode {\n    return this.colorMode;\n  }\n\n  public setSelectionMode(selectionMode: ActionBarSelectionMode): ActionBarProp {\n    this.selectionMode = selectionMode;\n    return this;\n  }\n\n  public getSelectionMode(): ActionBarSelectionMode {\n    return this.selectionMode;\n  }\n\n  public setMaxSelectCount(maxSelectCount: number): ActionBarProp {\n    this.maxSelectCount = maxSelectCount;\n    return this;\n  }\n\n  public getMaxSelectCount(): number {\n    return this.maxSelectCount;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from '../models/Action'\nimport { ActionBarMode, ActionBarColorMode, ActionBarSelectionMode } from '../models/ActionBarMode'\n\n// ActionBarProp\nexport class ActionBarProp {\n  public static NORMAL_BACKGROUND_COLOR: Resource = $r('app.color.default_background_color');\n  public static TRANSPARENT_BACKGROUND_COLOR: Resource = $r('app.color.transparent');\n  public static NORMAL_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_text');\n  public static NORMAL_SUBTITLE_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_subtitle_text');\n  public static ICON_COLOR: Resource = $r('sys.color.ohos_id_color_primary');\n  public static TRANSPARENT_TEXT_COLOR: Resource = $r('app.color.title_text_color_on_transparent_bg');\n  public static TRANSPARENT_SUBTITLE_TEXT_COLOR: Resource = $r('app.color.subtitle_text_color_on_transparent_bg');\n  public static HEAD_TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline6');\n  public static HEAD_TITLE_ONE_LINE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline7');\n  public static TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline8');\n  public static TITLE_FONT_WEIGHT = 500;\n  public static SUBTITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_body2');\n  public static MEDIUM_FONT: Resource = $r('app.string.id_text_font_family_medium');\n  public static REGULAR_FONT: Resource = $r('app.string.id_text_font_family_regular');\n  public static SINGLE_UNSELECT_TITLE: Resource = $r('app.string.title_select_photos');\n  public static SINGLE_SELECT_ALBUM_TITLE: Resource = $r('app.string.title_select_album');\n  public static MULTI_UNSELECT_TITLE: Resource = $r('app.string.title_none_selected');\n  public static PHOTO_BROWSER_ACTIONBAR_ALPHA = 0.95;\n  private hasTabBar = false;\n  private leftAction = Action.NONE;\n  private isHeadTitle = false;\n  private title: Object = null;\n  private subTitle: Object = null;\n  private menuList: Action[] = [];\n  private backgroundColor: Resource = ActionBarProp.NORMAL_BACKGROUND_COLOR;\n  private alpha = 1;\n  private selectionMode: ActionBarSelectionMode = ActionBarSelectionMode.MULTI;\n  private colorMode: ActionBarColorMode = ActionBarColorMode.NORMAL;\n  private mode: ActionBarMode = ActionBarMode.STANDARD_MODE;\n  private maxSelectCount = 0;\n\n  constructor() {\n  }\n\n  public static getCountDetailSelectedTitle(count: number): Resource {\n    return $r('app.plural.count_details_selected', count, count);\n  }\n\n  /**\n   * External selection quantity display\n   * @param count The selected quantity, same as the current count above\n   * @param maxSelectCount Maximum number of options\n   */\n  public static getCountDetailExternalSelectedTitle(count: number, maxSelectCount: number): Resource {\n    return $r('app.string.count_details_external_selected', count, maxSelectCount);\n  }\n\n  public setHasTabBar(hasTabBar: boolean): ActionBarProp {\n    this.hasTabBar = hasTabBar;\n    return this;\n  }\n\n  public getHasTabBar(): boolean {\n    return this.hasTabBar;\n  }\n\n  public setLeftAction(leftAction: Action): ActionBarProp {\n    this.leftAction = leftAction;\n    return this;\n  }\n\n  public getLeftAction(): Action {\n    return this.leftAction;\n  }\n\n  public setIsHeadTitle(isHeadTitle: boolean): ActionBarProp {\n    this.isHeadTitle = isHeadTitle;\n    return this;\n  }\n\n  public getIsHeadTitle(): boolean {\n    return this.isHeadTitle;\n  }\n\n  public setTitle(title: Object): ActionBarProp {\n    this.title = title;\n    return this;\n  }\n\n  public getTitle(): Object {\n    return this.title;\n  }\n\n  public setSubTitle(subTitle: Object): ActionBarProp {\n    this.subTitle = subTitle;\n    return this;\n  }\n\n  public getSubTitle(): Object {\n    return this.subTitle;\n  }\n\n  public setMenuList(menuList: Action[]): ActionBarProp {\n    this.menuList = menuList;\n    return this;\n  }\n\n  public getMenuList(): Action[] {\n    return this.menuList;\n  }\n\n  public setBackgroundColor(backgroundColor: Resource): ActionBarProp {\n    this.backgroundColor = backgroundColor;\n    return this;\n  }\n\n  public getBackgroundColor(): Resource {\n    return this.colorMode === ActionBarColorMode.TRANSPARENT\n      ? ActionBarProp.TRANSPARENT_BACKGROUND_COLOR : this.backgroundColor;\n  }\n\n  public setAlpha(alpha: number): ActionBarProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  public setMode(mode: ActionBarMode): ActionBarProp {\n    this.mode = mode;\n    return this;\n  }\n\n  public getMode(): ActionBarMode {\n    return this.mode;\n  }\n\n  public setColorMode(colorMode: ActionBarColorMode): ActionBarProp {\n    this.colorMode = colorMode;\n    return this;\n  }\n\n  public getColorMode(): ActionBarColorMode {\n    return this.colorMode;\n  }\n\n  public setSelectionMode(selectionMode: ActionBarSelectionMode): ActionBarProp {\n    this.selectionMode = selectionMode;\n    return this;\n  }\n\n  public getSelectionMode(): ActionBarSelectionMode {\n    return this.selectionMode;\n  }\n\n  public setMaxSelectCount(maxSelectCount: number): ActionBarProp {\n    this.maxSelectCount = maxSelectCount;\n    return this;\n  }\n\n  public getMaxSelectCount(): number {\n    return this.maxSelectCount;\n  }\n}"
}