{
  "type": "file",
  "name": "145.ts",
  "label": "145.ts",
  "start_line": -1,
  "end_line": 109,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 106,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 86,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\ncond = undefined\nreturn",
              "start_line": 1,
              "end_line": 86,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "len",
          "label": "len",
          "start_line": 1,
          "end_line": 5,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "s = parameter0: string\nthis = this: @ts_files/145.ts: %dflt\n%0 = s.<@%unk/%unk: .length>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function len(s: string) {\n    return s.length;\n}"
        },
        {
          "type": "function",
          "name": "f1",
          "label": "f1",
          "start_line": 1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.len(string)>(x)\nx = await %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function f1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await len(x);\n        x;\n    }\n    x;\n}"
        },
        {
          "type": "function",
          "name": "f2",
          "label": "f2",
          "start_line": 1,
          "end_line": 17,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.len(string)>(x)\nx = await %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function f2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await len(x);\n    }\n    x;\n}"
        },
        {
          "type": "function",
          "name": "foo",
          "label": "foo",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "declare function foo(x: number): Promise<string>;"
        },
        {
          "type": "function",
          "name": "g1",
          "label": "g1",
          "start_line": 1,
          "end_line": 28,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.foo(string)>(x)\nx = await %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function g1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await foo(x);\n        x;\n    }\n    x;\n}"
        },
        {
          "type": "function",
          "name": "g2",
          "label": "g2",
          "start_line": 1,
          "end_line": 37,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = ''",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.foo(string)>(x)\nx = await %0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function g2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await foo(x);\n    }\n    x;\n}"
        },
        {
          "type": "function",
          "name": "asNumber",
          "label": "asNumber",
          "start_line": 1,
          "end_line": 46,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "x = parameter0: string|number\nthis = this: @ts_files/145.ts: %dflt\nreturn x",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function asNumber(x: string | number): Promise<number> {\n    return +x;\n}"
        },
        {
          "type": "function",
          "name": "h1",
          "label": "h1",
          "start_line": 1,
          "end_line": 49,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = '0'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "x = x + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function h1() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = +x + 1;\n        x;\n    }\n}"
        },
        {
          "type": "function",
          "name": "h2",
          "label": "h2",
          "start_line": 1,
          "end_line": 57,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = '0'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.asNumber(string|number)>(x)\nx = await %0 + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function h2() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = await asNumber(x) + 1;\n        x;\n    }\n}"
        },
        {
          "type": "function",
          "name": "h3",
          "label": "h3",
          "start_line": 1,
          "end_line": 65,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = '0'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.asNumber(string|number)>(x)\ny = await %0\nx = y + 1",
                      "start_line": 1,
                      "end_line": 80,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function h3() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}"
        },
        {
          "type": "function",
          "name": "h4",
          "label": "h4",
          "start_line": 1,
          "end_line": 74,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nx = undefined\nx = '0'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if cond != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.asNumber(string|number)>(x)\ny = await %0\nx = y + 1",
                      "start_line": 1,
                      "end_line": 80,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function h4() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x;\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}"
        },
        {
          "type": "function",
          "name": "get_things",
          "label": "get_things",
          "start_line": 1,
          "end_line": 85,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "_ = parameter0: number|undefined\nthis = this: @ts_files/145.ts: %dflt\n%0 = newarray (number)[1]\n%0[0] = 0\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function get_things(_: number | undefined) {\n    return [0];\n}"
        },
        {
          "type": "function",
          "name": "foobar",
          "label": "foobar",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nbefore = undefined\ni = 0",
              "start_line": 1,
              "end_line": 90,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if i < 2",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.get_things(number|undefined)>(before)\nresults = await %0\nbefore = results[0]\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function foobar() {\n    let before: number | undefined = undefined;\n    for (let i = 0; i < 2; i++) {\n        const results = await get_things(before);\n        before = results[0];\n    }\n}"
        },
        {
          "type": "function",
          "name": "foox",
          "label": "foox",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "declare function foox(x: string | undefined): Promise<string>"
        },
        {
          "type": "function",
          "name": "myQuery",
          "label": "myQuery",
          "start_line": 0,
          "end_line": 0,
          "blocks": [],
          "functions": [],
          "classes": [],
          "simplified_code": "declare function myQuery(input: { lastId: number | undefined }): Promise<{ entities: number[] }>;"
        },
        {
          "type": "function",
          "name": "myFunc",
          "label": "myFunc",
          "start_line": 1,
          "end_line": 106,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nlastId = undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "if true != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%1 = new @ts_files/145.ts: %AC$%dflt$myFunc$2\ninstanceinvoke %1.<@ts_files/145.ts: %AC$%dflt$myFunc$2.constructor()>()\n%2 = staticinvoke <@ts_files/145.ts: %dflt.myQuery(@ts_files/145.ts: %AC$0)>(%1)\n%0 = await %2\nentities = %0.<@%unk/%unk: .entities>\n%3 = entities.<@%unk/%unk: .length>\n%4 = %3 - 1\nlastId = entities.<@%unk/%unk: .%4>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function myFunc(): Promise<void> {\n  let lastId: number | undefined = undefined;\n  while (true) {\n    const { entities } = await myQuery({\n        lastId,\n    });\n    lastId = entities[entities.length - 1];\n  }\n}"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 97,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/145.ts: %dflt\nbar = undefined",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = staticinvoke <@ts_files/145.ts: %dflt.foox(string|undefined)>(bar)\nbaz = await %0\nbar = baz\nif bar != 0",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 6,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n  let bar: string | undefined = undefined;\n  do {\n    const baz = await foox(bar);\n    bar = baz\n  } while (bar)\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 105,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ lastId: number | undefined }"
    },
    {
      "type": "class",
      "name": "%AC$1",
      "label": "%AC$1",
      "start_line": 105,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ entities: number[] }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$myFunc$2",
      "label": "%AC$%dflt$myFunc$2",
      "start_line": 109,
      "end_line": 109,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        lastId,\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "// @strict: true\n// @noEmit: true\n// @lib: esnext\nlet cond: boolean;\nasync function len(s: string) {\n    return s.length;\n}\nasync function f1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await len(x);\n        x;\n    }\n    x;\n}\nasync function f2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await len(x);\n    }\n    x;\n}\ndeclare function foo(x: string): Promise<number>;\ndeclare function foo(x: number): Promise<string>;\nasync function g1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await foo(x);\n        x;\n    }\n    x;\n}\nasync function g2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await foo(x);\n    }\n    x;\n}\nasync function asNumber(x: string | number): Promise<number> {\n    return +x;\n}\nasync function h1() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = +x + 1;\n        x;\n    }\n}\nasync function h2() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = await asNumber(x) + 1;\n        x;\n    }\n}\nasync function h3() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}\nasync function h4() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x;\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}\n// repro #51115\nasync function get_things(_: number | undefined) {\n    return [0];\n}\nasync function foobar() {\n    let before: number | undefined = undefined;\n    for (let i = 0; i < 2; i++) {\n        const results = await get_things(before);\n        before = results[0];\n    }\n}\n// repro #43047#issuecomment-821453073\ndeclare function foox(x: string | undefined): Promise<string>\nasync () => {\n  let bar: string | undefined = undefined;\n  do {\n    const baz = await foox(bar);\n    bar = baz\n  } while (bar)\n}\n// repro #43047#issuecomment-874221939\ndeclare function myQuery(input: { lastId: number | undefined }): Promise<{ entities: number[] }>;\nasync function myFunc(): Promise<void> {\n  let lastId: number | undefined = undefined;\n  while (true) {\n    const { entities } = await myQuery({\n        lastId,\n    });\n    lastId = entities[entities.length - 1];\n  }\n}"
}