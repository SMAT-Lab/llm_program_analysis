{
  "type": "file",
  "name": "27.ts",
  "label": "27.ts",
  "start_line": -1,
  "end_line": 128,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 101,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 101,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: %dflt\nTAG = 'AlbumSetRenameMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 101,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumSetRenameMenuOperation",
      "label": "AlbumSetRenameMenuOperation",
      "start_line": 1,
      "end_line": 128,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 101,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\nthis.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext> = menuContext\nreturn",
              "start_line": 1,
              "end_line": 101,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 41,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'menuContext is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 101,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\ndataSource = %1.<@%unk/%unk: .dataSource>\ncount = undefined\nitems = undefined\nif dataSource == null",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%2 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\n%3 = %2.<@%unk/%unk: .items>\ncount = %3.<@%unk/%unk: .length>\n%4 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\nitems = %4.<@%unk/%unk: .items>",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "if count !== 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'count is invalid')\nreturn",
                              "start_line": 1,
                              "end_line": 101,
                              "successors": []
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%5 = items[0]\n%6 = <AlbumDataItem>%5\nthis.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item> = %6\nthis.<@ts_files/27.ts: AlbumSetRenameMenuOperation.confirmCallback> = %AM0$doAction\nthis.<@ts_files/27.ts: AlbumSetRenameMenuOperation.cancelCallback> = %AM1$doAction\n%7 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item>\n%8 = %7.<@%unk/%unk: .displayName>\n%9 = 'The name of clicked album is ' + %8\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %9)\n%10 = BroadcastConstants.<@%unk/%unk: .SHOW_RENAME_PHOTO_DIALOG>\n%11 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item>\n%12 = %11.<@%unk/%unk: .displayName>\n%13 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.confirmCallback>\n%14 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.cancelCallback>\n%15 = newarray (unknown)[3]\n%15[0] = %12\n%15[1] = %13\n%15[2] = %14\n%16 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\n%17 = %16.<@%unk/%unk: .broadCast>\ninstanceinvoke %17.<@%unk/%unk: .emit()>(%10, %15)\nreturn",
                              "start_line": 1,
                              "end_line": 101,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "count = instanceinvoke dataSource.<@%unk/%unk: .getSelectedCount()>()\nitems = instanceinvoke dataSource.<@%unk/%unk: .getSelectedItems()>()",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    let count: number;\n    let items: Object[];\n    if (dataSource == null) {\n      count = this.menuContext.items.length;\n      items = this.menuContext.items;\n    } else {\n      count = dataSource.getSelectedCount();\n      items = dataSource.getSelectedItems();\n    }\n    if (count !== 1) {\n      Log.warn(TAG, 'count is invalid');\n      return;\n    }\n\n    this.item = items[0] as AlbumDataItem;\n\n    this.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    Log.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [this.item.displayName, this.confirmCallback, this.cancelCallback]);\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallback",
          "label": "confirmCallback",
          "start_line": 1,
          "end_line": 72,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newName = parameter0: string\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)>(newName)\nreturn await %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallback(newName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(newName);\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallbackBindImpl",
          "label": "confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 76,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newName = parameter0: string\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = 'AlbumSet rename confirm and the new name is: ' + newName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\n%2 = %1.<@%unk/%unk: .onOperationEnd>\nthis.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onOperationEnd> = %2\n%3 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.menuContext>\nonOperationStart = %3.<@%unk/%unk: .onOperationStart>\nif onOperationStart != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "staticinvoke <@%unk/%unk: .onOperationStart()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.rename(unknown)>(newName)\nreturn",
                      "start_line": 1,
                      "end_line": 101,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallbackBindImpl(newName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.rename(newName);\n  }"
        },
        {
          "type": "function",
          "name": "checkAlbumExit",
          "label": "checkAlbumExit",
          "start_line": 1,
          "end_line": 86,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "simpleAlbumDataItem = parameter0: SimpleAlbumDataItem\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = simpleAlbumDataItem.<@%unk/%unk: .displayName>\n%1 = instanceinvoke userFileModel.<@%unk/%unk: .getUserAlbumCountByName()>(%0)\n%2 = await %1 > 0\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }"
        },
        {
          "type": "function",
          "name": "rename",
          "label": "rename",
          "start_line": 1,
          "end_line": 90,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: unknown\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%0 = new @%unk/%unk: SimpleAlbumDataItem\n%1 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item>\n%2 = %1.<@%unk/%unk: .uri>\n%3 = -1\n%4 = -1\ninstanceinvoke %0.<@%unk/%unk: SimpleAlbumDataItem.constructor()>('', name, %2, '', '', %3, %4)\nsimpleAlbumDataItem = %0\n%5 = name != undefined\n%6 = name != null\n%7 = %5 && %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.checkAlbumExit(SimpleAlbumDataItem)>(simpleAlbumDataItem)\nisExit = await %8\nif isExit != false",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = staticinvoke <@%unk/%unk: .$r()>('app.string.name_already_use')\n%10 = staticinvoke <@%unk/%unk: .getResourceString()>(%9)\ninstanceinvoke %10.<@%unk/%unk: .then()>(%AM2$rename)\ninstanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'album is miss')\ninstanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onError()>()\nreturn",
                          "start_line": 1,
                          "end_line": 101,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%11 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item>\n%12 = %11.<@%unk/%unk: .displayName>\n%13 = 'change album_name:' + %12\n%14 = %13 + ' to '\n%15 = %14 + name\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %15)\n%16 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.item>\n%17 = %16.<@%unk/%unk: .displayName>\n%18 = instanceinvoke userFileModel.<@%unk/%unk: .getUserAlbumByName()>(%17)\nalbums = await %18\nalbums.<@%unk/%unk: .albumName> = name\n%19 = instanceinvoke albums.<@%unk/%unk: .commitModify()>()\n%20 = await %19\ninstanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onCompleted()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "return",
                              "start_line": 43,
                              "end_line": 101,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "blockRef",
                      "label": "(RepeatedBlock)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "block",
              "name": "Block?",
              "label": "error = caughtexception: unknown\n%21 = 'AlbumSet rename failed: ' + error\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, %21)\ninstanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onError()>()",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async rename(name): Promise<void> {\n    try {\n      let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);\n      if (name != undefined && name != null) {\n        let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n        if (isExit) {\n          getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n          })\n          Log.warn(TAG, 'album is miss');\n          this.onError();\n          return;\n        }\n      }\n      Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\n      let albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);\n      albums.albumName = name;\n      await albums.commitModify();\n      this.onCompleted();\n    } catch (error) {\n      Log.error(TAG, 'AlbumSet rename failed: ' + error);\n      this.onError();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallback",
          "label": "cancelCallback",
          "start_line": 1,
          "end_line": 115,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\ninstanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.cancelCallbackBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 101,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallbackBindImpl",
          "label": "cancelCallbackBindImpl",
          "start_line": 1,
          "end_line": 119,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'AlbumSet rename cancel')\nreturn",
              "start_line": 1,
              "end_line": 101,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet rename cancel');\n  }"
        },
        {
          "type": "function",
          "name": "onCompleted",
          "label": "onCompleted",
          "start_line": 1,
          "end_line": 123,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'Rename data succeed!')\n%0 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onOperationEnd>\nif %0 != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@%unk/%unk: .onOperationEnd()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 43,
                      "end_line": 101,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }"
        },
        {
          "type": "function",
          "name": "onError",
          "label": "onError",
          "start_line": 1,
          "end_line": 128,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, 'Rename data failed!')\n%0 = this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.onOperationEnd>\nif %0 != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@%unk/%unk: .onOperationEnd()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 43,
                      "end_line": 101,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }"
        },
        {
          "type": "function",
          "name": "%AM0$doAction",
          "label": "%AM0$doAction",
          "start_line": 1,
          "end_line": 63,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "newName = parameter0: string\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)>(newName)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(newName: string): Promise<void> => this.confirmCallbackBindImpl(newName)"
        },
        {
          "type": "function",
          "name": "%AM1$doAction",
          "label": "%AM1$doAction",
          "start_line": 1,
          "end_line": 64,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\n%0 = instanceinvoke this.<@ts_files/27.ts: AlbumSetRenameMenuOperation.cancelCallbackBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.cancelCallbackBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM2$rename",
          "label": "%AM2$rename",
          "start_line": 1,
          "end_line": 101,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "message = parameter0: string\nthis = this: @ts_files/27.ts: AlbumSetRenameMenuOperation\nstaticinvoke <@%unk/%unk: .showToast()>(message)\nreturn",
              "start_line": 1,
              "end_line": 101,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(message: string): void => {\n            showToast(message);\n          }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumSetRenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n  private item: AlbumDataItem;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    let count: number;\n    let items: Object[];\n    if (dataSource == null) {\n      count = this.menuContext.items.length;\n      items = this.menuContext.items;\n    } else {\n      count = dataSource.getSelectedCount();\n      items = dataSource.getSelectedItems();\n    }\n    if (count !== 1) {\n      Log.warn(TAG, 'count is invalid');\n      return;\n    }\n\n    this.item = items[0] as AlbumDataItem;\n\n    this.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    Log.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [this.item.displayName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  private async confirmCallback(newName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(newName);\n  }\n\n  private async confirmCallbackBindImpl(newName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.rename(newName);\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private async rename(name): Promise<void> {\n    try {\n      let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);\n      if (name != undefined && name != null) {\n        let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n        if (isExit) {\n          getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n          })\n          Log.warn(TAG, 'album is miss');\n          this.onError();\n          return;\n        }\n      }\n      Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\n      let albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);\n      albums.albumName = name;\n      await albums.commitModify();\n      this.onCompleted();\n    } catch (error) {\n      Log.error(TAG, 'AlbumSet rename failed: ' + error);\n      this.onError();\n    }\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet rename cancel');\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\n\n\nconst TAG = 'AlbumSetRenameMenuOperation';\n\nexport class AlbumSetRenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n  private item: AlbumDataItem;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    let count: number;\n    let items: Object[];\n    if (dataSource == null) {\n      count = this.menuContext.items.length;\n      items = this.menuContext.items;\n    } else {\n      count = dataSource.getSelectedCount();\n      items = dataSource.getSelectedItems();\n    }\n    if (count !== 1) {\n      Log.warn(TAG, 'count is invalid');\n      return;\n    }\n\n    this.item = items[0] as AlbumDataItem;\n\n    this.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    Log.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [this.item.displayName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  private async confirmCallback(newName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(newName);\n  }\n\n  private async confirmCallbackBindImpl(newName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.rename(newName);\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private async rename(name): Promise<void> {\n    try {\n      let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);\n      if (name != undefined && name != null) {\n        let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n        if (isExit) {\n          getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n          })\n          Log.warn(TAG, 'album is miss');\n          this.onError();\n          return;\n        }\n      }\n      Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\n      let albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);\n      albums.albumName = name;\n      await albums.commitModify();\n      this.onCompleted();\n    } catch (error) {\n      Log.error(TAG, 'AlbumSet rename failed: ' + error);\n      this.onError();\n    }\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet rename cancel');\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n}\n"
}