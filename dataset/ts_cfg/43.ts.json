{
  "type": "file",
  "name": "43.ts",
  "label": "43.ts",
  "start_line": -1,
  "end_line": 32,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 32,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/43.ts: %dflt\nTAG = 'BroadcastManager'\n%0 = new @ts_files/43.ts: BroadcastManager\ninstanceinvoke %0.<@ts_files/43.ts: BroadcastManager.constructor()>()\nbroadcastManager = staticinvoke <@%unk/%unk: .stashOrGetObject()>(%0, TAG)\nreturn",
              "start_line": 1,
              "end_line": 32,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "BroadcastManager",
      "label": "BroadcastManager",
      "start_line": 1,
      "end_line": 32,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/43.ts: BroadcastManager\ninstanceinvoke this.<@ts_files/43.ts: BroadcastManager.%instInit()>()\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'constructor')\n%0 = new @%unk/%unk: Broadcast\ninstanceinvoke %0.<@%unk/%unk: Broadcast.constructor()>()\nthis.<@ts_files/43.ts: BroadcastManager.appBroadcast> = %0\nreturn",
              "start_line": 1,
              "end_line": 32,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor() {\n    Log.info(TAG, 'constructor');\n    this.appBroadcast = new Broadcast();\n  }"
        },
        {
          "type": "function",
          "name": "getBroadcast",
          "label": "getBroadcast",
          "start_line": 1,
          "end_line": 31,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/43.ts: BroadcastManager\n%0 = this.<@ts_files/43.ts: BroadcastManager.appBroadcast>\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "public getBroadcast(): Broadcast {\n    return this.appBroadcast;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class BroadcastManager {\n  // The global Broadcast of the application process. Event registration and destruction should be paired\n  private appBroadcast: Broadcast;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n    this.appBroadcast = new Broadcast();\n  }\n\n  public getBroadcast(): Broadcast {\n    return this.appBroadcast;\n  }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { Broadcast } from './Broadcast';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'BroadcastManager';\n\nexport class BroadcastManager {\n  // The global Broadcast of the application process. Event registration and destruction should be paired\n  private appBroadcast: Broadcast;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n    this.appBroadcast = new Broadcast();\n  }\n\n  public getBroadcast(): Broadcast {\n    return this.appBroadcast;\n  }\n}\n\nexport let broadcastManager: BroadcastManager = stashOrGetObject<BroadcastManager>(new BroadcastManager(), TAG);\n"
}