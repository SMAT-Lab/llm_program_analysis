digraph "182.ts" {
subgraph "cluster_@ts_files/182.ts: %dflt.[static]%dflt()" {
  label="@ts_files/182.ts: %dflt.[static]%dflt()";
  Node33750 [label="id:0
      this = this: @ts_files/182.ts: %dflt
      return"];
}
subgraph "cluster_@ts_files/182.ts: %dflt.deployContract(WalletUnlocked, string, string, string, DeployContractOptions, string, ForcToml)" {
  label="@ts_files/182.ts: %dflt.deployContract(WalletUnlocked, string, string, string, DeployContractOptions, string, ForcToml)";
  Node111140 [label="id:0
      wallet = parameter0: WalletUnlocked
      binaryPath = parameter1: string
      abiPath = parameter2: string
      storageSlotsPath = parameter3: string
      deployConfig = parameter4: DeployContractOptions
      contractPath = parameter5: string
      tomlContents = parameter6: ForcToml
      this = this: @ts_files/182.ts: %dflt
      %0 = 'Deploying contract for ABI: ' + abiPath
      staticinvoke <@%unk/%unk: .debug()>(%0)
      %1 = staticinvoke <@%unk/%unk: .existsSync()>(storageSlotsPath)
      if %1 != 0"];
  Node111141 [label="id:1
      %2 = staticinvoke <@%unk/%unk: .readFileSync()>(storageSlotsPath, 'utf-8')
      storageSlots = instanceinvoke JSON.<@%unk/%unk: .parse()>(%2)
      deployConfig.<@%unk/%unk: .storageSlots> = storageSlots"];
  Node111142 [label="id:2
      targetBytecode = staticinvoke <@%unk/%unk: .readFileSync()>(binaryPath)
      %3 = staticinvoke <@%unk/%unk: .readFileSync()>(abiPath, 'utf-8')
      targetAbi = instanceinvoke JSON.<@%unk/%unk: .parse()>(%3)
      %4 = deployConfig.<@%unk/%unk: .storageSlots>
      %5 = newarray (any)[0]
      targetStorageSlots = %4 ?? %5
      proxyBytecode = Src14OwnedProxyFactory.<@%unk/%unk: .bytecode>
      proxyAbi = Src14OwnedProxy.<@%unk/%unk: .abi>
      %6 = Src14OwnedProxy.<@%unk/%unk: .storageSlots>
      %7 = newarray (any)[0]
      proxyStorageSlots = %6 ?? %7
      %8 = tomlContents.<@%unk/%unk: .proxy>
      isProxyEnabled = %8.<@%unk/%unk: .enabled>
      %9 = tomlContents.<@%unk/%unk: .proxy>
      proxyAddress = %9.<@%unk/%unk: .address>
      %10 = !isProxyEnabled
      if %10 != 0"];
  Node111143 [label="id:3
      %11 = new @%unk/%unk: ContractFactory
      instanceinvoke %11.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)
      contractFactory = %11
      %13 = instanceinvoke contractFactory.<@%unk/%unk: .deploy()>(deployConfig)
      %12 = await %13
      waitForResult = %12.<@%unk/%unk: .waitForResult>
      %15 = staticinvoke <@%unk/%unk: .waitForResult()>()
      %14 = await %15
      contract = %14.<@%unk/%unk: .contract>
      %16 = contract.<@%unk/%unk: .id>
      %17 = instanceinvoke %16.<@%unk/%unk: .toB256()>()
      return %17"];
  Node111144 [label="id:4
      if proxyAddress != 0"];
  Node111145 [label="id:5
      %18 = new @%unk/%unk: ContractFactory
      instanceinvoke %18.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)
      targetContractFactory = %18
      %20 = instanceinvoke targetContractFactory.<@%unk/%unk: .deploy()>(deployConfig)
      %19 = await %20
      waitForTarget = %19.<@%unk/%unk: .waitForResult>
      %22 = staticinvoke <@%unk/%unk: .waitForTarget()>()
      %21 = await %22
      targetContract = %21.<@%unk/%unk: .contract>
      %23 = new @%unk/%unk: Contract
      instanceinvoke %23.<@%unk/%unk: Contract.constructor()>(proxyAddress, proxyAbi, wallet)
      proxyContract = %23
      %25 = new @ts_files/182.ts: %AC$%dflt$deployContract$0
      instanceinvoke %25.<@ts_files/182.ts: %AC$%dflt$deployContract$0.constructor()>()
      %26 = proxyContract.<@%unk/%unk: Contract.functions>
      %27 = instanceinvoke %26.<@%unk/%unk: .set_proxy_target()>(%25)
      %28 = instanceinvoke %27.<@%unk/%unk: .call()>()
      %24 = await %28
      waitForProxyUpdate = %24.<@%unk/%unk: .waitForResult>
      %29 = staticinvoke <@%unk/%unk: .waitForProxyUpdate()>()
      %30 = await %29
      return proxyAddress"];
  Node111146 [label="id:6
      %31 = new @%unk/%unk: ContractFactory
      instanceinvoke %31.<@%unk/%unk: ContractFactory.constructor()>(targetBytecode, targetAbi, wallet)
      targetContractFactory = %31
      %33 = instanceinvoke targetContractFactory.<@%unk/%unk: .deploy()>(deployConfig)
      %32 = await %33
      waitForTarget = %32.<@%unk/%unk: .waitForResult>
      %35 = staticinvoke <@%unk/%unk: .waitForTarget()>()
      %34 = await %35
      targetContract = %34.<@%unk/%unk: .contract>
      %36 = deployConfig
      storageSlots = %36.<@%unk/%unk: .storageSlots>
      stateRoot = %36.<@%unk/%unk: .stateRoot>
      commonDeployConfig = %36.<@%unk/%unk: .commonDeployConfig>
      mergedStorageSlots = instanceinvoke targetStorageSlots.<@%unk/%unk: .concat()>(proxyStorageSlots)
      %37 = new @ts_files/182.ts: %AC$%dflt$deployContract$1
      instanceinvoke %37.<@ts_files/182.ts: %AC$%dflt$deployContract$1.constructor()>()
      proxyDeployConfig = %37
      %38 = new @%unk/%unk: ContractFactory
      instanceinvoke %38.<@%unk/%unk: ContractFactory.constructor()>(proxyBytecode, proxyAbi, wallet)
      proxyFactory = %38
      %40 = instanceinvoke proxyFactory.<@%unk/%unk: .deploy()>(proxyDeployConfig)
      %39 = await %40
      waitForProxy = %39.<@%unk/%unk: .waitForResult>
      %42 = staticinvoke <@%unk/%unk: .waitForProxy()>()
      %41 = await %42
      proxyContract = %41.<@%unk/%unk: .contract>
      %44 = proxyContract.<@%unk/%unk: .functions>
      %45 = instanceinvoke %44.<@%unk/%unk: .initialize_proxy()>()
      %46 = instanceinvoke %45.<@%unk/%unk: .call()>()
      %43 = await %46
      waitForProxyInit = %43.<@%unk/%unk: .waitForResult>
      %47 = staticinvoke <@%unk/%unk: .waitForProxyInit()>()
      %48 = await %47
      %49 = proxyContract.<@%unk/%unk: .id>
      proxyContractId = instanceinvoke %49.<@%unk/%unk: .toB256()>()
      staticinvoke <@%unk/%unk: .setForcTomlProxyAddress()>(contractPath, proxyContractId)
      return proxyContractId"];
  Node111140 -> Node111141;
  Node111140 -> Node111142;
  Node111141 -> Node111142;
  Node111142 -> Node111143;
  Node111142 -> Node111144;
  Node111144 -> Node111145;
  Node111144 -> Node111146;
}
subgraph "cluster_@ts_files/182.ts: %dflt.deployContracts(FuelsConfig)" {
  label="@ts_files/182.ts: %dflt.deployContracts(FuelsConfig)";
  Node47870 [label="id:0
      config = parameter0: FuelsConfig
      this = this: @ts_files/182.ts: %dflt
      %0 = newarray (any)[0]
      contracts = %0
      %1 = config.<@%unk/%unk: .providerUrl>
      %2 = config.<@%unk/%unk: .privateKey>
      %3 = staticinvoke <@%unk/%unk: .createWallet()>(%1, %2)
      wallet = await %3
      %4 = wallet.<@%unk/%unk: .provider>
      %5 = %4.<@%unk/%unk: .url>
      %6 = 'Deploying contracts to: ' + %5
      staticinvoke <@%unk/%unk: .log()>(%6)
      %7 = config.<@%unk/%unk: .contracts>
      contractsLen = %7.<@%unk/%unk: .length>
      i = 0"];
  Node47871 [label="id:1
      if i < contractsLen"];
  Node47872 [label="id:2
      %8 = config.<@%unk/%unk: .contracts>
      contractPath = %8.<@%unk/%unk: .i>
      forcTomlPath = staticinvoke <@%unk/%unk: .getClosestForcTomlDir()>(contractPath)
      binaryPath = staticinvoke <@%unk/%unk: .getBinaryPath()>(contractPath, config)
      abiPath = staticinvoke <@%unk/%unk: .getABIPath()>(contractPath, config)
      storageSlotsPath = staticinvoke <@%unk/%unk: .getStorageSlotsPath()>(contractPath, config)
      projectName = staticinvoke <@%unk/%unk: .getContractName()>(contractPath)
      contractName = staticinvoke <@%unk/%unk: .getContractCamelCase()>(contractPath)
      tomlContents = staticinvoke <@%unk/%unk: .readForcToml()>(forcTomlPath)
      %9 = config.<@%unk/%unk: .deployConfig>
      %10 = new @ts_files/182.ts: %AC$%dflt$deployContracts$7
      instanceinvoke %10.<@ts_files/182.ts: %AC$%dflt$deployContracts$7.constructor()>()
      %11 = staticinvoke <@%unk/%unk: .getDeployConfig()>(%9, %10)
      deployConfig = await %11
      %12 = staticinvoke <@ts_files/182.ts: %dflt.deployContract(WalletUnlocked, string, string, string, DeployContractOptions, string, ForcToml)>(wallet, binaryPath, abiPath, storageSlotsPath, deployConfig, contractPath, tomlContents)
      contractId = await %12
      %13 = 'Contract deployed: ' + projectName
      %14 = %13 + ' - '
      %15 = %14 + contractId
      staticinvoke <@%unk/%unk: .debug()>(%15)
      %16 = new @ts_files/182.ts: %AC$%dflt$deployContracts$8
      instanceinvoke %16.<@ts_files/182.ts: %AC$%dflt$deployContracts$8.constructor()>()
      instanceinvoke contracts.<@%unk/%unk: .push()>(%16)
      i = i + 1"];
  Node47873 [label="id:3
      return contracts"];
  Node47870 -> Node47871;
  Node47871 -> Node47872;
  Node47871 -> Node47873;
  Node47872 -> Node47871;
}
}
