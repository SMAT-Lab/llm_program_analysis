{
  "type": "file",
  "name": "162.ts",
  "label": "162.ts",
  "start_line": -1,
  "end_line": 32,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 32,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 32,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/162.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 32,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "updateAppEditorTsConfigExcludedFiles",
          "label": "updateAppEditorTsConfigExcludedFiles",
          "start_line": 1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "tree = parameter0: Tree\nprojectConfig = parameter1: ProjectConfiguration\nthis = this: @ts_files/162.ts: %dflt\n%0 = projectConfig.<@%unk/%unk: .projectType>\nif %0 !== 'application'",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "return",
                  "start_line": 13,
                  "end_line": 32,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = projectConfig.<@%unk/%unk: .root>\neditorTsConfigPath = staticinvoke <@%unk/%unk: .joinPathFragments()>(%1, 'tsconfig.editor.json')\n%2 = projectConfig.<@%unk/%unk: .root>\nappTsConfigPath = staticinvoke <@%unk/%unk: .joinPathFragments()>(%2, 'tsconfig.app.json')\n%3 = instanceinvoke tree.<@%unk/%unk: .exists()>(editorTsConfigPath)\n%4 = !%3\n%5 = instanceinvoke tree.<@%unk/%unk: .exists()>(appTsConfigPath)\n%6 = !%5\n%7 = %4 || %6\nif %7 != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 13,
                      "end_line": 32,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "appTsConfig = staticinvoke <@%unk/%unk: .readJson()>(tree, appTsConfigPath)\nstaticinvoke <@%unk/%unk: .updateJson()>(tree, editorTsConfigPath, %AM0$updateAppEditorTsConfigExcludedFiles)\nreturn",
                      "start_line": 1,
                      "end_line": 32,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "export function updateAppEditorTsConfigExcludedFiles(\n  tree: Tree,\n  projectConfig: ProjectConfiguration\n) {\n  if (projectConfig.projectType !== 'application') {\n    return;\n  }\n  const editorTsConfigPath = joinPathFragments(\n    projectConfig.root,\n    'tsconfig.editor.json'\n  );\n  const appTsConfigPath = joinPathFragments(\n    projectConfig.root,\n    'tsconfig.app.json'\n  );\n  if (!tree.exists(editorTsConfigPath) || !tree.exists(appTsConfigPath)) {\n    return;\n  }\n  const appTsConfig = readJson(tree, appTsConfigPath);\n  updateJson(tree, editorTsConfigPath, (json) => {\n    const exclude = [...(json.exclude ?? []), ...(appTsConfig.exclude ?? [])];\n    if (exclude.length) {\n      json.exclude = Array.from(new Set(exclude));\n    }\n    return json;\n  });\n}"
        },
        {
          "type": "function",
          "name": "%AM0$updateAppEditorTsConfigExcludedFiles",
          "label": "%AM0$updateAppEditorTsConfigExcludedFiles",
          "start_line": 1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "json = parameter0: unknown\nthis = this: @ts_files/162.ts: %dflt\n%0 = newarray (unknown)[2]\n%0[0] = ...(json.exclude ?? [])\n%0[1] = ...(appTsConfig.exclude ?? [])\nexclude = %0\n%1 = exclude.<@%unk/%unk: .length>\nif %1 != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%2 = new @%unk/%unk: Set\ninstanceinvoke %2.<@%unk/%unk: Set.constructor()>(exclude)\n%3 = instanceinvoke Array.<@%unk/%unk: .from()>(%2)\njson.<@%unk/%unk: .exclude> = %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return json",
                      "start_line": 32,
                      "end_line": 32,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(json) => {\n    const exclude = [...(json.exclude ?? []), ...(appTsConfig.exclude ?? [])];\n    if (exclude.length) {\n      json.exclude = Array.from(new Set(exclude));\n    }\n    return json;\n  }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import {\n  joinPathFragments,\n  readJson,\n  updateJson,\n  type ProjectConfiguration,\n  type Tree,\n} from '@nx/devkit';\nexport function updateAppEditorTsConfigExcludedFiles(\n  tree: Tree,\n  projectConfig: ProjectConfiguration\n) {\n  if (projectConfig.projectType !== 'application') {\n    return;\n  }\n  const editorTsConfigPath = joinPathFragments(\n    projectConfig.root,\n    'tsconfig.editor.json'\n  );\n  const appTsConfigPath = joinPathFragments(\n    projectConfig.root,\n    'tsconfig.app.json'\n  );\n  if (!tree.exists(editorTsConfigPath) || !tree.exists(appTsConfigPath)) {\n    return;\n  }\n  const appTsConfig = readJson(tree, appTsConfigPath);\n  updateJson(tree, editorTsConfigPath, (json) => {\n    const exclude = [...(json.exclude ?? []), ...(appTsConfig.exclude ?? [])];\n    if (exclude.length) {\n      json.exclude = Array.from(new Set(exclude));\n    }\n    return json;\n  });\n}"
}