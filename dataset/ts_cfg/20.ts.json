{
  "type": "file",
  "name": "20.ts",
  "label": "20.ts",
  "start_line": -1,
  "end_line": 165,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 165,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: %dflt\nTAG = 'AlbumSetNewMenuOperation'\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "AlbumSetNewMenuOperation",
      "label": "AlbumSetNewMenuOperation",
      "start_line": 1,
      "end_line": 165,
      "functions": [
        {
          "type": "function",
          "name": "constructor",
          "label": "constructor",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.%instInit()>()\nmenuContext = parameter0: MenuContext\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\nthis.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext> = menuContext\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }"
        },
        {
          "type": "function",
          "name": "doAction",
          "label": "doAction",
          "start_line": 1,
          "end_line": 43,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\nif %0 == null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke Log.<@%unk/%unk: .warn()>(TAG, 'menuContext is null, return')\nreturn",
                  "start_line": 1,
                  "end_line": 165,
                  "successors": []
                },
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = staticinvoke <@%unk/%unk: .$r()>('app.string.album_new_album')\n%2 = staticinvoke <@%unk/%unk: .getResourceString()>(%1)\ninstanceinvoke %2.<@%unk/%unk: .then()>(%AM0$doAction)\nreturn",
                  "start_line": 1,
                  "end_line": 165,
                  "successors": []
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallback",
          "label": "confirmCallback",
          "start_line": 1,
          "end_line": 60,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "displayName = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)>(displayName)\nreturn await %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }"
        },
        {
          "type": "function",
          "name": "confirmCallbackBindImpl",
          "label": "confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 64,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "displayName = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = 'AlbumSet new album confirm and the new name is: ' + displayName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\n%1 = new @%unk/%unk: SimpleAlbumDataItem\n%2 = -1\n%3 = -1\ninstanceinvoke %1.<@%unk/%unk: SimpleAlbumDataItem.constructor()>('', displayName, '', '', '', %2, %3)\nsimpleAlbumDataItem = %1\n%4 = displayName != undefined\n%5 = displayName != null\n%6 = %4 && %5\nif %6 != false",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%7 = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.checkAlbumExit(SimpleAlbumDataItem)>(simpleAlbumDataItem)\nisExit = await %7\nif isExit != false",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%8 = staticinvoke <@%unk/%unk: .$r()>('app.string.name_already_use')\n%9 = staticinvoke <@%unk/%unk: .getResourceString()>(%8)\ninstanceinvoke %9.<@%unk/%unk: .then()>(%AM3$confirmCallbackBindImpl)\nreturn",
                      "start_line": 1,
                      "end_line": 165,
                      "successors": []
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%10 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%11 = %10.<@%unk/%unk: .onOperationEnd>\nthis.<@ts_files/20.ts: AlbumSetNewMenuOperation.onOperationEnd> = %11\n%12 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\nonOperationStart = %12.<@%unk/%unk: .onOperationStart>\nif onOperationStart != null",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "staticinvoke <@%unk/%unk: .onOperationStart()>()",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%13 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%14 = %13.<@%unk/%unk: .jumpSourceToMain>\n%15 = JumpSourceToMain.<@%unk/%unk: .ALBUM>\nif %14 === %15",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "instanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'go back to photo grid')\n%16 = BroadcastConstants.<@%unk/%unk: .MEDIA_OPERATION>\n%17 = newarray (SimpleAlbumDataItem|@ts_files/20.ts: AlbumSetNewMenuOperation.%AM4$confirmCallbackBindImpl())[2]\n%17[0] = simpleAlbumDataItem\n%17[1] = %AM4$confirmCallbackBindImpl\n%18 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%19 = %18.<@%unk/%unk: .broadCast>\ninstanceinvoke %19.<@%unk/%unk: .emit()>(%16, %17)",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "return",
                                      "start_line": 45,
                                      "end_line": 165,
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%20 = new @ts_files/20.ts: %AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$0\ninstanceinvoke %20.<@ts_files/20.ts: %AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$0.constructor()>()\nparams = %20\n%21 = new @ts_files/20.ts: %AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$1\ninstanceinvoke %21.<@ts_files/20.ts: %AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$1.constructor()>()\nrouterOptions = %21\ninstanceinvoke router.<@%unk/%unk: .push()>(routerOptions)\ninstanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.onCompleted()>()",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "blockRef",
                                      "label": "(RepeatedBlock)"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }"
        },
        {
          "type": "function",
          "name": "checkAlbumExit",
          "label": "checkAlbumExit",
          "start_line": 1,
          "end_line": 97,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "simpleAlbumDataItem = parameter0: SimpleAlbumDataItem\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = simpleAlbumDataItem.<@%unk/%unk: .displayName>\n%1 = instanceinvoke userFileModel.<@%unk/%unk: .getUserAlbumCountByName()>(%0)\n%2 = await %1 > 0\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallback",
          "label": "cancelCallback",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\ninstanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.cancelCallbackBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "cancelCallbackBindImpl",
          "label": "cancelCallbackBindImpl",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'AlbumSet new album cancel')\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }"
        },
        {
          "type": "function",
          "name": "onCompleted",
          "label": "onCompleted",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\ninstanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.onCompletedBindImpl()>()\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onCompleted(): void {\n    this.onCompletedBindImpl();\n  }"
        },
        {
          "type": "function",
          "name": "onCompletedBindImpl",
          "label": "onCompletedBindImpl",
          "start_line": 1,
          "end_line": 113,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, 'new album data succeed!')\n%0 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.onOperationEnd>\nif %0 != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@%unk/%unk: .onOperationEnd()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 45,
                      "end_line": 165,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }"
        },
        {
          "type": "function",
          "name": "onError",
          "label": "onError",
          "start_line": 1,
          "end_line": 118,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\ninstanceinvoke Log.<@%unk/%unk: .error()>(TAG, 'new album data failed!')\n%0 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.onOperationEnd>\nif %0 != null",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "instanceinvoke this.<@%unk/%unk: .onOperationEnd()>()",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 45,
                      "end_line": 165,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }"
        },
        {
          "type": "function",
          "name": "checkAndAddNumber",
          "label": "checkAndAddNumber",
          "start_line": 1,
          "end_line": 123,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "albumInfo = parameter0: AlbumDataItem\nprefixName = parameter1: string\nnumbers = parameter2: number[]\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = new @%unk/%unk: RegExp\n%1 = '^' + prefixName\n%2 = %1 + '[1-9][0-9]*$'\ninstanceinvoke %0.<@%unk/%unk: RegExp.constructor()>(%2)\n%3 = albumInfo.<@%unk/%unk: .displayName>\nres = instanceinvoke %3.<@%unk/%unk: .match()>(%0)\n%4 = 'check name res ' + res\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %4)\nif res != 0",
              "start_line": 1,
              "end_line": 1,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%5 = new @%unk/%unk: RegExp\ninstanceinvoke %5.<@%unk/%unk: RegExp.constructor()>('[1-9][0-9]*')\n%6 = res.<@%unk/%unk: .0>\nnumber = instanceinvoke %6.<@%unk/%unk: .match()>(%5)\n%7 = number.<@%unk/%unk: .0>\n%8 = staticinvoke <@%unk/%unk: .parseInt()>(%7)\ninstanceinvoke numbers.<@%unk/%unk: .push()>(%8)",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "return",
                      "start_line": 45,
                      "end_line": 165,
                      "successors": []
                    }
                  ]
                },
                {
                  "type": "blockRef",
                  "label": "(RepeatedBlock)"
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }"
        },
        {
          "type": "function",
          "name": "getNewAlbumDefaultName",
          "label": "getNewAlbumDefaultName",
          "start_line": 1,
          "end_line": 134,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "prefixName = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = newarray (any)[0]\nnumbers = %0\ni = 0",
              "start_line": 1,
              "end_line": 134,
              "successors": [
                {
                  "type": "block",
                  "name": "Block?",
                  "label": "%1 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%2 = %1.<@%unk/%unk: .dataSource>\n%3 = instanceinvoke %2.<@%unk/%unk: .totalCount()>()\nif i < %3",
                  "start_line": 1,
                  "end_line": 1,
                  "successors": [
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%4 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%5 = %4.<@%unk/%unk: .dataSource>\nalbum = <AlbumsDataSource>%5\n%6 = instanceinvoke album.<@%unk/%unk: .getDataByIndex()>(i)\ninstanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.checkAndAddNumber(AlbumDataItem, string, number[])>(%6, prefixName, numbers)\ni = i + 1",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "blockRef",
                          "label": "(RepeatedBlock)"
                        }
                      ]
                    },
                    {
                      "type": "block",
                      "name": "Block?",
                      "label": "%7 = instanceinvoke JSON.<@%unk/%unk: .stringify()>(numbers)\ninstanceinvoke Log.<@%unk/%unk: .debug()>(TAG, %7)\n%8 = numbers.<@%unk/%unk: .length>\nif %8 <= 0",
                      "start_line": 1,
                      "end_line": 1,
                      "successors": [
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%9 = prefixName + '1'\nreturn %9",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": []
                        },
                        {
                          "type": "block",
                          "name": "Block?",
                          "label": "%10 = numbers.<@%unk/%unk: .length>\nif %10 === 1",
                          "start_line": 1,
                          "end_line": 1,
                          "successors": [
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "%11 = numbers[0]\n%12 = %11 - 1\nif %12 > 0",
                              "start_line": 1,
                              "end_line": 1,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%13 = prefixName + '1'\nreturn %13",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%14 = numbers[0]\n%15 = %14 + 1\n%16 = prefixName + %15\nreturn %16",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "type": "block",
                              "name": "Block?",
                              "label": "instanceinvoke numbers.<@%unk/%unk: .sort()>(%AM5$getNewAlbumDefaultName)\n%17 = numbers[0]\n%18 = %17 - 1\nif %18 > 0\ni = 1",
                              "start_line": 1,
                              "end_line": 159,
                              "successors": [
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%19 = prefixName + '1'\nreturn %19",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": []
                                },
                                {
                                  "type": "block",
                                  "name": "Block?",
                                  "label": "%20 = numbers.<@%unk/%unk: .length>\nif i < %20",
                                  "start_line": 1,
                                  "end_line": 1,
                                  "successors": [
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%21 = i - 1\n%22 = numbers[%21]\nres = %22 + 1\n%23 = numbers[i]\nif res < %23\ni = i + 1",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": [
                                        {
                                          "type": "block",
                                          "name": "Block?",
                                          "label": "%24 = prefixName + res\nreturn %24",
                                          "start_line": 1,
                                          "end_line": 1,
                                          "successors": []
                                        },
                                        {
                                          "type": "blockRef",
                                          "label": "(RepeatedBlock)"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "block",
                                      "name": "Block?",
                                      "label": "%25 = numbers.<@%unk/%unk: .length>\n%26 = %25 - 1\n%27 = numbers[%26]\n%28 = %27 + 1\n%29 = prefixName + %28\nreturn %29",
                                      "start_line": 1,
                                      "end_line": 1,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            },
            {
              "type": "blockRef",
              "label": "(RepeatedBlock)"
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0$doAction",
          "label": "%AM1$%AM0$doAction",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "displayName = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)>(displayName)\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName)"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0$doAction",
          "label": "%AM2$%AM0$doAction",
          "start_line": 1,
          "end_line": 53,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.cancelCallbackBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.cancelCallbackBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM0$doAction",
          "label": "%AM0$doAction",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "name = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = 'The display name is ' + name\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %0)\nnewAlbumDisplayName = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.getNewAlbumDefaultName(string)>(name)\n%1 = 'The display name of new album is ' + newAlbumDisplayName\ninstanceinvoke Log.<@%unk/%unk: .info()>(TAG, %1)\nthis.<@ts_files/20.ts: AlbumSetNewMenuOperation.confirmCallback> = %AM1$%AM0$doAction\nthis.<@ts_files/20.ts: AlbumSetNewMenuOperation.cancelCallback> = %AM2$%AM0$doAction\n%2 = BroadcastConstants.<@%unk/%unk: .SHOW_NEW_ALBUM_PHOTO_DIALOG>\n%3 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.confirmCallback>\n%4 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.cancelCallback>\n%5 = newarray (unknown)[3]\n%5[0] = newAlbumDisplayName\n%5[1] = %3\n%5[2] = %4\n%6 = this.<@ts_files/20.ts: AlbumSetNewMenuOperation.menuContext>\n%7 = %6.<@%unk/%unk: .broadCast>\ninstanceinvoke %7.<@%unk/%unk: .emit()>(%2, %5)\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    }"
        },
        {
          "type": "function",
          "name": "%AM3$confirmCallbackBindImpl",
          "label": "%AM3$confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 165,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "message = parameter0: string\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\nstaticinvoke <@%unk/%unk: .showToast()>(message)\nreturn",
              "start_line": 1,
              "end_line": 165,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(message: string): void => {\n            showToast(message);\n        }"
        },
        {
          "type": "function",
          "name": "%AM4$confirmCallbackBindImpl",
          "label": "%AM4$confirmCallbackBindImpl",
          "start_line": 1,
          "end_line": 82,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = instanceinvoke this.<@ts_files/20.ts: AlbumSetNewMenuOperation.onCompletedBindImpl()>()\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(): void => this.onCompletedBindImpl()"
        },
        {
          "type": "function",
          "name": "%AM5$getNewAlbumDefaultName",
          "label": "%AM5$getNewAlbumDefaultName",
          "start_line": 1,
          "end_line": 151,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "a = parameter0: unknown\nb = parameter1: unknown\nthis = this: @ts_files/20.ts: AlbumSetNewMenuOperation\n%0 = a - b\nreturn %0",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function (a, b) {\n      return a - b;\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "export class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }\n\n  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }\n\n  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }\n\n  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }\n\n  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }\n}"
    },
    {
      "type": "class",
      "name": "%AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$0",
      "label": "%AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$0",
      "start_line": 84,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      }"
    },
    {
      "type": "class",
      "name": "%AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$1",
      "label": "%AC$AlbumSetNewMenuOperation$confirmCallbackBindImpl$1",
      "start_line": 88,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        uri: 'pages/AlbumSelect',\n        params: params\n      }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { showToast } from '../utils/UiUtil';\nimport { userFileModel } from '../base/UserFileModel';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { LazyItem } from '../common/ItemDataSource';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumsDataSource } from '../common/AlbumsDataSource';\n\nconst TAG = 'AlbumSetNewMenuOperation';\n\nexport class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }\n\n  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }\n\n  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }\n\n  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }\n\n  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }\n}\n"
}