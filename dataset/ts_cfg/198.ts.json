{
  "type": "file",
  "name": "198.ts",
  "label": "198.ts",
  "start_line": -1,
  "end_line": 126,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 107,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = new @%unk/%unk: IntegrationRepository\ninstanceinvoke %0.<@%unk/%unk: IntegrationRepository.constructor()>()\nintegrationRepository = %0\nmockSubscriberId = '12345'\nstaticinvoke <@%unk/%unk: .describe()>('Session - /inbox/session (POST)', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "setIntegrationConfig",
          "label": "setIntegrationConfig",
          "start_line": 1,
          "end_line": 107,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: @ts_files/198.ts: %AC$0\ncacheService = parameter1: CacheService\nthis = this: @ts_files/198.ts: %dflt\n%0 = instanceinvoke cacheService.<@%unk/%unk: .delByPattern()>('*')\n%1 = await %0\n%2 = new @ts_files/198.ts: %AC$%dflt$setIntegrationConfig$11\ninstanceinvoke %2.<@ts_files/198.ts: %AC$%dflt$setIntegrationConfig$11.constructor()>()\n%3 = new @ts_files/198.ts: %AC$%dflt$setIntegrationConfig$12\ninstanceinvoke %3.<@ts_files/198.ts: %AC$%dflt$setIntegrationConfig$12.constructor()>()\n%4 = instanceinvoke integrationRepository.<@%unk/%unk: .update()>(%2, %3)\n%5 = await %4\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function setIntegrationConfig(\n  {\n    _environmentId,\n    _organizationId,\n    hmac = true,\n    active = true,\n  }: { _environmentId: string; _organizationId: string; active?: boolean; hmac?: boolean },\n  cacheService: CacheService\n) {\n  await cacheService.delByPattern('*');\n  await integrationRepository.update(\n    {\n      _environmentId,\n      _organizationId,\n      providerId: InAppProviderIdEnum.Novu,\n      channel: ChannelTypeEnum.IN_APP,\n      active: true,\n    },\n    {\n      $set: {\n        'credentials.hmac': hmac,\n        active,\n      },\n    }\n  );\n}"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = new @%unk/%unk: CacheInMemoryProviderService\ninstanceinvoke %0.<@%unk/%unk: CacheInMemoryProviderService.constructor()>()\ncacheInMemoryProviderService = %0\n%1 = new @%unk/%unk: CacheService\ninstanceinvoke %1.<@%unk/%unk: CacheService.constructor()>(cacheInMemoryProviderService)\ncacheService = %1\n%2 = instanceinvoke cacheService.<@%unk/%unk: .initialize()>()\n%3 = await %2\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    const cacheInMemoryProviderService = new CacheInMemoryProviderService();\n    cacheService = new CacheService(cacheInMemoryProviderService);\n    await cacheService.initialize();\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = new @%unk/%unk: UserSession\ninstanceinvoke %0.<@%unk/%unk: UserSession.constructor()>()\nsession = %0\n%1 = instanceinvoke session.<@%unk/%unk: .initialize()>()\n%2 = await %1\n%3 = new @ts_files/198.ts: %AC$%dflt$%AM2$%AM0$1\ninstanceinvoke %3.<@ts_files/198.ts: %AC$%dflt$%AM2$%AM0$1.constructor()>()\n%4 = staticinvoke <@ts_files/198.ts: %dflt.setIntegrationConfig(@ts_files/198.ts: %AC$0, CacheService)>(%3, cacheService)\n%5 = await %4\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n    session = new UserSession();\n    await session.initialize();\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n      },\n      cacheService\n    );\n  }"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 27,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "ObjectBindingPattern = parameter0: @ts_files/198.ts: %AC$2\nthis = this: @ts_files/198.ts: %dflt\n%0 = new @ts_files/198.ts: %AC$%dflt$%AM3$%AM0$3\ninstanceinvoke %0.<@ts_files/198.ts: %AC$%dflt$%AM3$%AM0$3.constructor()>()\n%1 = session.<@%unk/%unk: .testAgent>\n%2 = instanceinvoke %1.<@%unk/%unk: .post()>('/v1/inbox/session')\n%3 = instanceinvoke %2.<@%unk/%unk: .send()>(%0)\nreturn await %3",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async ({\n    applicationIdentifier,\n    subscriberId,\n    subscriberHash,\n  }: {\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }) => {\n    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });\n  }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM0",
          "label": "%AM4$%AM0",
          "start_line": 1,
          "end_line": 42,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = new @ts_files/198.ts: %AC$%dflt$%AM4$%AM0$4\ninstanceinvoke %0.<@ts_files/198.ts: %AC$%dflt$%AM4$%AM0$4.constructor()>()\n%1 = staticinvoke <@ts_files/198.ts: %dflt.setIntegrationConfig(@ts_files/198.ts: %AC$0, CacheService)>(%0, cacheService)\n%2 = await %1\n%4 = new @ts_files/198.ts: %AC$%dflt$%AM4$%AM0$5\ninstanceinvoke %4.<@ts_files/198.ts: %AC$%dflt$%AM4$%AM0$5.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .initializeSession()>(%4)\n%3 = await %5\nbody = %3.<@%unk/%unk: .body>\nstatus = %3.<@%unk/%unk: .status>\n%6 = staticinvoke <@%unk/%unk: .expect()>(status)\n%7 = %6.<@%unk/%unk: .to>\ninstanceinvoke %7.<@%unk/%unk: .equal()>(201)\n%8 = body.<@%unk/%unk: .data>\n%9 = %8.<@%unk/%unk: .token>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\n%13 = body.<@%unk/%unk: .data>\n%14 = %13.<@%unk/%unk: .totalUnreadCount>\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\ninstanceinvoke %16.<@%unk/%unk: .equal()>(0)\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        hmac: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM0",
          "label": "%AM5$%AM0",
          "start_line": 1,
          "end_line": 59,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = session.<@%unk/%unk: .environment>\n%1 = %0.<@%unk/%unk: .apiKeys>\n%2 = %1.<@%unk/%unk: .0>\nsecretKey = %2.<@%unk/%unk: .key>\nsubscriberHash = staticinvoke <@%unk/%unk: .createHash()>(secretKey, mockSubscriberId)\n%4 = new @ts_files/198.ts: %AC$%dflt$%AM5$%AM0$6\ninstanceinvoke %4.<@ts_files/198.ts: %AC$%dflt$%AM5$%AM0$6.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .initializeSession()>(%4)\n%3 = await %5\nbody = %3.<@%unk/%unk: .body>\nstatus = %3.<@%unk/%unk: .status>\n%6 = staticinvoke <@%unk/%unk: .expect()>(status)\n%7 = %6.<@%unk/%unk: .to>\ninstanceinvoke %7.<@%unk/%unk: .equal()>(201)\n%8 = body.<@%unk/%unk: .data>\n%9 = %8.<@%unk/%unk: .token>\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\n%11 = %10.<@%unk/%unk: .to>\n%12 = %11.<@%unk/%unk: .be>\n%13 = body.<@%unk/%unk: .data>\n%14 = %13.<@%unk/%unk: .totalUnreadCount>\n%15 = staticinvoke <@%unk/%unk: .expect()>(%14)\n%16 = %15.<@%unk/%unk: .to>\ninstanceinvoke %16.<@%unk/%unk: .equal()>(0)\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function () {\n    const secretKey = session.environment.apiKeys[0].key;\n    const subscriberHash = createHash(secretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  }"
        },
        {
          "type": "function",
          "name": "%AM6$%AM0",
          "label": "%AM6$%AM0",
          "start_line": 1,
          "end_line": 71,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%1 = new @ts_files/198.ts: %AC$%dflt$%AM6$%AM0$7\ninstanceinvoke %1.<@ts_files/198.ts: %AC$%dflt$%AM6$%AM0$7.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .initializeSession()>(%1)\n%0 = await %2\nbody = %0.<@%unk/%unk: .body>\nstatus = %0.<@%unk/%unk: .status>\n%3 = staticinvoke <@%unk/%unk: .expect()>(status)\n%4 = %3.<@%unk/%unk: .to>\ninstanceinvoke %4.<@%unk/%unk: .equal()>(400)\n%5 = body.<@%unk/%unk: .message>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\ninstanceinvoke %7.<@%unk/%unk: .contain()>('Please provide a valid application identifier')\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function () {\n    const { body, status } = await initializeSession({\n      applicationIdentifier: 'some-not-existing-id',\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid application identifier');\n  }"
        },
        {
          "type": "function",
          "name": "%AM7$%AM0",
          "label": "%AM7$%AM0",
          "start_line": 1,
          "end_line": 79,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\n%0 = new @ts_files/198.ts: %AC$%dflt$%AM7$%AM0$8\ninstanceinvoke %0.<@ts_files/198.ts: %AC$%dflt$%AM7$%AM0$8.constructor()>()\n%1 = staticinvoke <@ts_files/198.ts: %dflt.setIntegrationConfig(@ts_files/198.ts: %AC$0, CacheService)>(%0, cacheService)\n%2 = await %1\n%4 = new @ts_files/198.ts: %AC$%dflt$%AM7$%AM0$9\ninstanceinvoke %4.<@ts_files/198.ts: %AC$%dflt$%AM7$%AM0$9.constructor()>()\n%5 = staticinvoke <@%unk/%unk: .initializeSession()>(%4)\n%3 = await %5\nbody = %3.<@%unk/%unk: .body>\nstatus = %3.<@%unk/%unk: .status>\n%6 = staticinvoke <@%unk/%unk: .expect()>(status)\n%7 = %6.<@%unk/%unk: .to>\ninstanceinvoke %7.<@%unk/%unk: .equal()>(404)\n%8 = body.<@%unk/%unk: .message>\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\n%10 = %9.<@%unk/%unk: .to>\ninstanceinvoke %10.<@%unk/%unk: .contain()>('The active in-app integration could not be found')\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(404);\n    expect(body.message).to.contain('The active in-app integration could not be found');\n  }"
        },
        {
          "type": "function",
          "name": "%AM8$%AM0",
          "label": "%AM8$%AM0",
          "start_line": 1,
          "end_line": 95,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\ninvalidSecretKey = 'invalid-secret-key'\nsubscriberHash = staticinvoke <@%unk/%unk: .createHash()>(invalidSecretKey, mockSubscriberId)\n%1 = new @ts_files/198.ts: %AC$%dflt$%AM8$%AM0$10\ninstanceinvoke %1.<@ts_files/198.ts: %AC$%dflt$%AM8$%AM0$10.constructor()>()\n%2 = staticinvoke <@%unk/%unk: .initializeSession()>(%1)\n%0 = await %2\nbody = %0.<@%unk/%unk: .body>\nstatus = %0.<@%unk/%unk: .status>\n%3 = staticinvoke <@%unk/%unk: .expect()>(status)\n%4 = %3.<@%unk/%unk: .to>\ninstanceinvoke %4.<@%unk/%unk: .equal()>(400)\n%5 = body.<@%unk/%unk: .message>\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = %6.<@%unk/%unk: .to>\ninstanceinvoke %7.<@%unk/%unk: .contain()>('Please provide a valid HMAC hash')\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async function () {\n    const invalidSecretKey = 'invalid-secret-key';\n    const subscriberHash = createHash(invalidSecretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: session.subscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid HMAC hash');\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 36,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/198.ts: %dflt\nsession = undefined\ncacheService = undefined\nstaticinvoke <@%unk/%unk: .before()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM2$%AM0)\ninitializeSession = %AM3$%AM0\nstaticinvoke <@%unk/%unk: .it()>('should initialize session', %AM4$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should initialize session with HMAC', %AM5$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an error when invalid applicationIdentifier provided', %AM6$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an error when no active integrations', %AM7$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should throw an error when invalid subscriberHash provided', %AM8$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "async () => {\n  let session: UserSession;\n  let cacheService: CacheService;\n  before(async () => {\n    const cacheInMemoryProviderService = new CacheInMemoryProviderService();\n    cacheService = new CacheService(cacheInMemoryProviderService);\n    await cacheService.initialize();\n  });\n  beforeEach(async () => {\n    session = new UserSession();\n    await session.initialize();\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n      },\n      cacheService\n    );\n  });\n  const initializeSession = async ({\n    applicationIdentifier,\n    subscriberId,\n    subscriberHash,\n  }: {\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }) => {\n    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });\n  };\n  it('should initialize session', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        hmac: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });\n  it('should initialize session with HMAC', async function () {\n    const secretKey = session.environment.apiKeys[0].key;\n    const subscriberHash = createHash(secretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });\n  it('should throw an error when invalid applicationIdentifier provided', async function () {\n    const { body, status } = await initializeSession({\n      applicationIdentifier: 'some-not-existing-id',\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid application identifier');\n  });\n  it('should throw an error when no active integrations', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(404);\n    expect(body.message).to.contain('The active in-app integration could not be found');\n  });\n  it('should throw an error when invalid subscriberHash provided', async function () {\n    const invalidSecretKey = 'invalid-secret-key';\n    const subscriberHash = createHash(invalidSecretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: session.subscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid HMAC hash');\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "%AC$0",
      "label": "%AC$0",
      "start_line": 113,
      "end_line": 113,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{ _environmentId: string; _organizationId: string; active?: boolean; hmac?: boolean }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM2$%AM0$1",
      "label": "%AC$%dflt$%AM2$%AM0$1",
      "start_line": 20,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$2",
      "label": "%AC$2",
      "start_line": 31,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM3$%AM0$3",
      "label": "%AC$%dflt$%AM3$%AM0$3",
      "start_line": 36,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM0$4",
      "label": "%AC$%dflt$%AM4$%AM0$4",
      "start_line": 44,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        hmac: false,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM4$%AM0$5",
      "label": "%AC$%dflt$%AM4$%AM0$5",
      "start_line": 51,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM5$%AM0$6",
      "label": "%AC$%dflt$%AM5$%AM0$6",
      "start_line": 62,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n      subscriberHash,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM6$%AM0$7",
      "label": "%AC$%dflt$%AM6$%AM0$7",
      "start_line": 72,
      "end_line": 72,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier: 'some-not-existing-id',\n      subscriberId: mockSubscriberId,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM0$8",
      "label": "%AC$%dflt$%AM7$%AM0$8",
      "start_line": 81,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM7$%AM0$9",
      "label": "%AC$%dflt$%AM7$%AM0$9",
      "start_line": 88,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM8$%AM0$10",
      "label": "%AC$%dflt$%AM8$%AM0$10",
      "start_line": 98,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: session.subscriberId,\n      subscriberHash,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$setIntegrationConfig$11",
      "label": "%AC$%dflt$setIntegrationConfig$11",
      "start_line": 118,
      "end_line": 118,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      _environmentId,\n      _organizationId,\n      providerId: InAppProviderIdEnum.Novu,\n      channel: ChannelTypeEnum.IN_APP,\n      active: true,\n    }"
    },
    {
      "type": "class",
      "name": "%AC$%AC$%dflt$setIntegrationConfig$12$%instInit$13",
      "label": "%AC$%AC$%dflt$setIntegrationConfig$12$%instInit$13",
      "start_line": 126,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n        'credentials.hmac': hmac,\n        active,\n      }"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$setIntegrationConfig$12",
      "label": "%AC$%dflt$setIntegrationConfig$12",
      "start_line": 125,
      "end_line": 125,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      $set: {\n        'credentials.hmac': hmac,\n        active,\n      },\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { IntegrationRepository } from '@novu/dal';\nimport { ChannelTypeEnum, InAppProviderIdEnum } from '@novu/shared';\nimport { UserSession } from '@novu/testing';\nimport { expect } from 'chai';\nimport { CacheInMemoryProviderService, CacheService, createHash } from '@novu/application-generic';\nconst integrationRepository = new IntegrationRepository();\nconst mockSubscriberId = '12345';\ndescribe('Session - /inbox/session (POST)', async () => {\n  let session: UserSession;\n  let cacheService: CacheService;\n  before(async () => {\n    const cacheInMemoryProviderService = new CacheInMemoryProviderService();\n    cacheService = new CacheService(cacheInMemoryProviderService);\n    await cacheService.initialize();\n  });\n  beforeEach(async () => {\n    session = new UserSession();\n    await session.initialize();\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n      },\n      cacheService\n    );\n  });\n  const initializeSession = async ({\n    applicationIdentifier,\n    subscriberId,\n    subscriberHash,\n  }: {\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }) => {\n    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });\n  };\n  it('should initialize session', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        hmac: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });\n  it('should initialize session with HMAC', async function () {\n    const secretKey = session.environment.apiKeys[0].key;\n    const subscriberHash = createHash(secretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });\n  it('should throw an error when invalid applicationIdentifier provided', async function () {\n    const { body, status } = await initializeSession({\n      applicationIdentifier: 'some-not-existing-id',\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid application identifier');\n  });\n  it('should throw an error when no active integrations', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(404);\n    expect(body.message).to.contain('The active in-app integration could not be found');\n  });\n  it('should throw an error when invalid subscriberHash provided', async function () {\n    const invalidSecretKey = 'invalid-secret-key';\n    const subscriberHash = createHash(invalidSecretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: session.subscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid HMAC hash');\n  });\n});\nasync function setIntegrationConfig(\n  {\n    _environmentId,\n    _organizationId,\n    hmac = true,\n    active = true,\n  }: { _environmentId: string; _organizationId: string; active?: boolean; hmac?: boolean },\n  cacheService: CacheService\n) {\n  await cacheService.delByPattern('*');\n  await integrationRepository.update(\n    {\n      _environmentId,\n      _organizationId,\n      providerId: InAppProviderIdEnum.Novu,\n      channel: ChannelTypeEnum.IN_APP,\n      active: true,\n    },\n    {\n      $set: {\n        'credentials.hmac': hmac,\n        active,\n      },\n    }\n  );\n}"
}