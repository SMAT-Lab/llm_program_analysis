{
  "type": "file",
  "name": "144.ts",
  "label": "144.ts",
  "start_line": -1,
  "end_line": 19,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 17,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 17,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/144.ts: %dflt\nreturn",
              "start_line": 1,
              "end_line": 17,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "IProps",
      "label": "IProps",
      "start_line": 5,
      "end_line": 5,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "interface IProps extends AbstractButtonProps {\n    isOpen: boolean;\n    onKeyDown: Function;\n}"
    },
    {
      "type": "class",
      "name": "OverflowToggleButton",
      "label": "OverflowToggleButton",
      "start_line": 1,
      "end_line": 19,
      "functions": [
        {
          "type": "function",
          "name": "_isToggled",
          "label": "_isToggled",
          "start_line": 1,
          "end_line": 16,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/144.ts: OverflowToggleButton\n%0 = this.<@ts_files/144.ts: OverflowToggleButton.props>\n%1 = %0.<@%unk/%unk: .isOpen>\nreturn %1",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "_isToggled() {\n        return this.props.isOpen;\n    }"
        },
        {
          "type": "function",
          "name": "_onKeyDown",
          "label": "_onKeyDown",
          "start_line": 1,
          "end_line": 19,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/144.ts: OverflowToggleButton\n%0 = this.<@ts_files/144.ts: OverflowToggleButton.props>\ninstanceinvoke %0.<@%unk/%unk: .onKeyDown()>()\nreturn",
              "start_line": 1,
              "end_line": 17,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "_onKeyDown() {\n        this.props.onKeyDown();\n    }"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": "class OverflowToggleButton extends AbstractButton<IProps> {\n    accessibilityLabel = 'toolbar.accessibilityLabel.moreActions';\n    toggledAccessibilityLabel = 'toolbar.accessibilityLabel.closeMoreActions';\n    icon = IconDotsHorizontal;\n    label = 'toolbar.moreActions';\n    toggledLabel = 'toolbar.moreActions';\n    tooltip = 'toolbar.moreActions';\n    _isToggled() {\n        return this.props.isOpen;\n    }\n    _onKeyDown() {\n        this.props.onKeyDown();\n    }\n}"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import { connect } from 'react-redux';\nimport { translate } from '../../../base/i18n/functions';\nimport { IconDotsHorizontal } from '../../../base/icons/svg';\nimport AbstractButton, { IProps as AbstractButtonProps } from '../../../base/toolbox/components/AbstractButton';\ninterface IProps extends AbstractButtonProps {\n    isOpen: boolean;\n    onKeyDown: Function;\n}\nclass OverflowToggleButton extends AbstractButton<IProps> {\n    accessibilityLabel = 'toolbar.accessibilityLabel.moreActions';\n    toggledAccessibilityLabel = 'toolbar.accessibilityLabel.closeMoreActions';\n    icon = IconDotsHorizontal;\n    label = 'toolbar.moreActions';\n    toggledLabel = 'toolbar.moreActions';\n    tooltip = 'toolbar.moreActions';\n    _isToggled() {\n        return this.props.isOpen;\n    }\n    _onKeyDown() {\n        this.props.onKeyDown();\n    }\n}\nexport default connect()(translate(OverflowToggleButton));"
}