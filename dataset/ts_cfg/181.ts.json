{
  "type": "file",
  "name": "181.ts",
  "label": "181.ts",
  "start_line": -1,
  "end_line": 62,
  "classes": [
    {
      "type": "class",
      "name": "%dflt",
      "label": "%dflt",
      "start_line": -1,
      "end_line": 52,
      "functions": [
        {
          "type": "function",
          "name": "%dflt",
          "label": "%dflt",
          "start_line": -1,
          "end_line": 1,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\nstaticinvoke <@%unk/%unk: .describe()>('MenuStack', %AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": ""
        },
        {
          "type": "function",
          "name": "%getElementsForTesting$%AM0",
          "label": "%getElementsForTesting$%AM0",
          "start_line": 1,
          "end_line": 13,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\ninstanceinvoke fixture.<@%unk/%unk: .detectChanges()>()\n%0 = fixture.<@%unk/%unk: .componentInstance>\n%1 = %0.<@%unk/%unk: .triggers>\ntriggers = instanceinvoke %1.<@%unk/%unk: .toArray()>()\n%2 = fixture.<@%unk/%unk: .componentInstance>\n%3 = %2.<@%unk/%unk: .menus>\nmenus = instanceinvoke %3.<@%unk/%unk: .toArray()>()\n%4 = fixture.<@%unk/%unk: .componentInstance>\n%5 = %4.<@%unk/%unk: .menuBar>\nmenuStack = %5.<@%unk/%unk: .menuStack>\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function getElementsForTesting() {\n    fixture.detectChanges();\n    triggers = fixture.componentInstance.triggers.toArray();\n    menus = fixture.componentInstance.menus.toArray();\n    menuStack = fixture.componentInstance.menuBar.menuStack;\n  }"
        },
        {
          "type": "function",
          "name": "%AM1$%AM0",
          "label": "%AM1$%AM0",
          "start_line": 1,
          "end_line": 19,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\n%0 = new @ts_files/181.ts: %AC$%dflt$%AM1$%AM0$0\ninstanceinvoke %0.<@ts_files/181.ts: %AC$%dflt$%AM1$%AM0$0.constructor()>()\ninstanceinvoke TestBed.<@%unk/%unk: .configureTestingModule()>(%0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    TestBed.configureTestingModule({\n      imports: [CdkMenuModule, MultiMenuWithSubmenu],\n    });\n  }"
        },
        {
          "type": "function",
          "name": "%AM2$%AM0",
          "label": "%AM2$%AM0",
          "start_line": 1,
          "end_line": 24,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\nfixture = instanceinvoke TestBed.<@%unk/%unk: .createComponent()>(MultiMenuWithSubmenu)\ninstanceinvoke fixture.<@%unk/%unk: .detectChanges()>()\nstaticinvoke <@%unk/%unk: .getElementsForTesting()>()\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    fixture = TestBed.createComponent(MultiMenuWithSubmenu);\n    fixture.detectChanges();\n    getElementsForTesting();\n  }"
        },
        {
          "type": "function",
          "name": "%openAllMenus$%AM0",
          "label": "%openAllMenus$%AM0",
          "start_line": 1,
          "end_line": 29,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\n%0 = triggers.<@%unk/%unk: .0>\ninstanceinvoke %0.<@%unk/%unk: .open()>()\nstaticinvoke <@%unk/%unk: .getElementsForTesting()>()\n%1 = triggers.<@%unk/%unk: .1>\ninstanceinvoke %1.<@%unk/%unk: .open()>()\nstaticinvoke <@%unk/%unk: .getElementsForTesting()>()\n%2 = triggers.<@%unk/%unk: .2>\ninstanceinvoke %2.<@%unk/%unk: .open()>()\nstaticinvoke <@%unk/%unk: .getElementsForTesting()>()\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "function openAllMenus() {\n    triggers[0].open();\n    getElementsForTesting();\n    triggers[1].open();\n    getElementsForTesting();\n    triggers[2].open();\n    getElementsForTesting();\n  }"
        },
        {
          "type": "function",
          "name": "%AM4$%AM3$%AM0",
          "label": "%AM4$%AM3$%AM0",
          "start_line": 1,
          "end_line": 47,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "v = parameter0: jasmine.CallInfo<jasmine.Func>\nthis = this: @ts_files/181.ts: %dflt\n%0 = v.<@%unk/%unk: .args>\n%1 = %0.<@%unk/%unk: .0>\n%2 = %1.<@%unk/%unk: .item>\nreturn %2",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "(v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item"
        },
        {
          "type": "function",
          "name": "%AM3$%AM0",
          "label": "%AM3$%AM0",
          "start_line": 1,
          "end_line": 40,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\nstaticinvoke <@%unk/%unk: .openAllMenus()>()\n%0 = menus.<@%unk/%unk: .length>\n%1 = staticinvoke <@%unk/%unk: .expect()>(%0)\ninstanceinvoke %1.<@%unk/%unk: .toBe()>(3)\nspy = instanceinvoke jasmine.<@%unk/%unk: .createSpy()>('menu stack closed spy')\n%2 = menuStack.<@%unk/%unk: .closed>\ninstanceinvoke %2.<@%unk/%unk: .subscribe()>(spy)\ninstanceinvoke menuStack.<@%unk/%unk: .closeAll()>()\n%3 = staticinvoke <@%unk/%unk: .expect()>(spy)\ninstanceinvoke %3.<@%unk/%unk: .toHaveBeenCalledTimes()>(3)\n%4 = spy.<@%unk/%unk: .calls>\n%5 = instanceinvoke %4.<@%unk/%unk: .all()>()\ncallArgs = instanceinvoke %5.<@%unk/%unk: .map()>(%AM4$%AM3$%AM0)\n%6 = instanceinvoke menus.<@%unk/%unk: .reverse()>()\n%7 = staticinvoke <@%unk/%unk: .expect()>(callArgs)\ninstanceinvoke %7.<@%unk/%unk: .toEqual()>(%6)\n%8 = instanceinvoke menuStack.<@%unk/%unk: .isEmpty()>()\n%9 = staticinvoke <@%unk/%unk: .expect()>(%8)\ninstanceinvoke %9.<@%unk/%unk: .toBeTrue()>()\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n      openAllMenus();\n      expect(menus.length).toBe(3);\n      const spy = jasmine.createSpy('menu stack closed spy');\n      menuStack.closed.subscribe(spy);\n      menuStack.closeAll();\n      expect(spy).toHaveBeenCalledTimes(3);\n      const callArgs = spy.calls.all().map((v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item);\n      expect(callArgs).toEqual(menus.reverse());\n      expect(menuStack.isEmpty()).toBeTrue();\n    }"
        },
        {
          "type": "function",
          "name": "%AM5$%AM0",
          "label": "%AM5$%AM0",
          "start_line": 1,
          "end_line": 52,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\nstaticinvoke <@%unk/%unk: .openAllMenus()>()\n%0 = menus.<@%unk/%unk: .length>\n%1 = staticinvoke <@%unk/%unk: .expect()>(%0)\ninstanceinvoke %1.<@%unk/%unk: .toBe()>(3)\n%2 = triggers.<@%unk/%unk: .1>\ninstanceinvoke %2.<@%unk/%unk: .toggle()>()\nstaticinvoke <@%unk/%unk: .getElementsForTesting()>()\n%3 = menus.<@%unk/%unk: .length>\n%4 = staticinvoke <@%unk/%unk: .expect()>(%3)\ninstanceinvoke %4.<@%unk/%unk: .toBe()>(1)\n%5 = instanceinvoke menuStack.<@%unk/%unk: .length()>()\n%6 = staticinvoke <@%unk/%unk: .expect()>(%5)\n%7 = instanceinvoke %6.<@%unk/%unk: .withContext()>('menu stack should only have the single menu')\ninstanceinvoke %7.<@%unk/%unk: .toBe()>(1)\n%8 = menus.<@%unk/%unk: .0>\n%9 = instanceinvoke menuStack.<@%unk/%unk: .peek()>()\n%10 = staticinvoke <@%unk/%unk: .expect()>(%9)\ninstanceinvoke %10.<@%unk/%unk: .toEqual()>(%8)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n    openAllMenus();\n    expect(menus.length).toBe(3);\n    triggers[1].toggle();\n    getElementsForTesting();\n    expect(menus.length).toBe(1);\n    expect(menuStack.length()).withContext('menu stack should only have the single menu').toBe(1);\n    expect(menuStack.peek()).toEqual(menus[0]);\n  }"
        },
        {
          "type": "function",
          "name": "%AM0",
          "label": "%AM0",
          "start_line": 1,
          "end_line": 8,
          "blocks": [
            {
              "type": "block",
              "name": "Block?",
              "label": "this = this: @ts_files/181.ts: %dflt\nfixture = undefined\nmenuStack = undefined\ntriggers = undefined\nmenus = undefined\n%0 = staticinvoke <@%unk/%unk: .waitForAsync()>(%AM1$%AM0)\nstaticinvoke <@%unk/%unk: .beforeEach()>(%0)\nstaticinvoke <@%unk/%unk: .beforeEach()>(%AM2$%AM0)\n%1 = 'should fill the menu stack with the latest menu at the end of the stack and oldest at' + ' the start of the stack'\nstaticinvoke <@%unk/%unk: .it()>(%1, %AM3$%AM0)\nstaticinvoke <@%unk/%unk: .it()>('should close triggering menu and all menus below it', %AM5$%AM0)\nreturn",
              "start_line": 1,
              "end_line": 1,
              "successors": []
            }
          ],
          "functions": [],
          "classes": [],
          "simplified_code": "() => {\n  let fixture: ComponentFixture<MultiMenuWithSubmenu>;\n  let menuStack: MenuStack;\n  let triggers: CdkMenuTrigger[];\n  let menus: CdkMenu[];\n  function getElementsForTesting() {\n    fixture.detectChanges();\n    triggers = fixture.componentInstance.triggers.toArray();\n    menus = fixture.componentInstance.menus.toArray();\n    menuStack = fixture.componentInstance.menuBar.menuStack;\n  }\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [CdkMenuModule, MultiMenuWithSubmenu],\n    });\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MultiMenuWithSubmenu);\n    fixture.detectChanges();\n    getElementsForTesting();\n  });\n  function openAllMenus() {\n    triggers[0].open();\n    getElementsForTesting();\n    triggers[1].open();\n    getElementsForTesting();\n    triggers[2].open();\n    getElementsForTesting();\n  }\n  it(\n    'should fill the menu stack with the latest menu at the end of the stack and oldest at' +\n      ' the start of the stack',\n    () => {\n      openAllMenus();\n      expect(menus.length).toBe(3);\n      const spy = jasmine.createSpy('menu stack closed spy');\n      menuStack.closed.subscribe(spy);\n      menuStack.closeAll();\n      expect(spy).toHaveBeenCalledTimes(3);\n      const callArgs = spy.calls.all().map((v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item);\n      expect(callArgs).toEqual(menus.reverse());\n      expect(menuStack.isEmpty()).toBeTrue();\n    },\n  );\n  it('should close triggering menu and all menus below it', () => {\n    openAllMenus();\n    expect(menus.length).toBe(3);\n    triggers[1].toggle();\n    getElementsForTesting();\n    expect(menus.length).toBe(1);\n    expect(menuStack.length()).withContext('menu stack should only have the single menu').toBe(1);\n    expect(menuStack.peek()).toEqual(menus[0]);\n  });\n}"
        }
      ],
      "classes": [],
      "blocks": [],
      "simplified_code": ""
    },
    {
      "type": "class",
      "name": "MultiMenuWithSubmenu",
      "label": "MultiMenuWithSubmenu",
      "start_line": 62,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "@Component({\n  template: `\n    <div>\n      <div cdkMenuBar id=\"menu_bar\">\n        <button cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n      </div>\n      <ng-template #file>\n        <div cdkMenu id=\"file_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"share\">Share</button>\n        </div>\n      </ng-template>\n      <ng-template #share>\n        <div cdkMenu id=\"share_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"chat\">Chat</button>\n        </div>\n      </ng-template>\n      <ng-template #chat>\n        <div cdkMenu id=\"chat_menu\">\n          <button cdkMenuItem>GVC</button>\n        </div>\n      </ng-template>\n    </div>\n  `,\n  standalone: true,\n  imports: [CdkMenuModule],\n})\nclass MultiMenuWithSubmenu {\n  @ViewChild(CdkMenuBar) menuBar: CdkMenuBar;\n  @ViewChildren(CdkMenuTrigger) triggers: QueryList<CdkMenuTrigger>;\n  @ViewChildren(CdkMenu) menus: QueryList<CdkMenu>;\n}"
    },
    {
      "type": "class",
      "name": "%AC$%dflt$%AM1$%AM0$0",
      "label": "%AC$%dflt$%AM1$%AM0$0",
      "start_line": 20,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "blocks": [],
      "simplified_code": "{\n      imports: [CdkMenuModule, MultiMenuWithSubmenu],\n    }"
    }
  ],
  "functions": [],
  "blocks": [],
  "simplified_code": "import {QueryList, ViewChild, ViewChildren, Component} from '@angular/core';\nimport {CdkMenu} from './menu';\nimport {CdkMenuBar} from './menu-bar';\nimport {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';\nimport {CdkMenuTrigger} from './menu-trigger';\nimport {MenuStack} from './menu-stack';\nimport {CdkMenuModule} from './menu-module';\ndescribe('MenuStack', () => {\n  let fixture: ComponentFixture<MultiMenuWithSubmenu>;\n  let menuStack: MenuStack;\n  let triggers: CdkMenuTrigger[];\n  let menus: CdkMenu[];\n  function getElementsForTesting() {\n    fixture.detectChanges();\n    triggers = fixture.componentInstance.triggers.toArray();\n    menus = fixture.componentInstance.menus.toArray();\n    menuStack = fixture.componentInstance.menuBar.menuStack;\n  }\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [CdkMenuModule, MultiMenuWithSubmenu],\n    });\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MultiMenuWithSubmenu);\n    fixture.detectChanges();\n    getElementsForTesting();\n  });\n  function openAllMenus() {\n    triggers[0].open();\n    getElementsForTesting();\n    triggers[1].open();\n    getElementsForTesting();\n    triggers[2].open();\n    getElementsForTesting();\n  }\n  it(\n    'should fill the menu stack with the latest menu at the end of the stack and oldest at' +\n      ' the start of the stack',\n    () => {\n      openAllMenus();\n      expect(menus.length).toBe(3);\n      const spy = jasmine.createSpy('menu stack closed spy');\n      menuStack.closed.subscribe(spy);\n      menuStack.closeAll();\n      expect(spy).toHaveBeenCalledTimes(3);\n      const callArgs = spy.calls.all().map((v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item);\n      expect(callArgs).toEqual(menus.reverse());\n      expect(menuStack.isEmpty()).toBeTrue();\n    },\n  );\n  it('should close triggering menu and all menus below it', () => {\n    openAllMenus();\n    expect(menus.length).toBe(3);\n    triggers[1].toggle();\n    getElementsForTesting();\n    expect(menus.length).toBe(1);\n    expect(menuStack.length()).withContext('menu stack should only have the single menu').toBe(1);\n    expect(menuStack.peek()).toEqual(menus[0]);\n  });\n});\n@Component({\n  template: `\n    <div>\n      <div cdkMenuBar id=\"menu_bar\">\n        <button cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n      </div>\n      <ng-template #file>\n        <div cdkMenu id=\"file_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"share\">Share</button>\n        </div>\n      </ng-template>\n      <ng-template #share>\n        <div cdkMenu id=\"share_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"chat\">Chat</button>\n        </div>\n      </ng-template>\n      <ng-template #chat>\n        <div cdkMenu id=\"chat_menu\">\n          <button cdkMenuItem>GVC</button>\n        </div>\n      </ng-template>\n    </div>\n  `,\n  standalone: true,\n  imports: [CdkMenuModule],\n})\nclass MultiMenuWithSubmenu {\n  @ViewChild(CdkMenuBar) menuBar: CdkMenuBar;\n  @ViewChildren(CdkMenuTrigger) triggers: QueryList<CdkMenuTrigger>;\n  @ViewChildren(CdkMenu) menus: QueryList<CdkMenu>;\n}"
}