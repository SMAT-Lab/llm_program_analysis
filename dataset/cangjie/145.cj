package parser
public class GIFFrame <: ToString {
    //This float doesn't have a leading digit/Display frame width, height, top margin, left margin
    public var dims: Dims = Dims()
    //The color array pointed to by the pixel data of the current frame. Group of 3 lengths.
    public var colorTable: Array<UInt8> = Array<UInt8>()
    //The duration of the interval from the current frame to the next frame
    public var delay: Int64 = 0
    public var disposalType: Int32 = 0
    //The patch information after color conversion is used for drawing
    public var patch: Array<UInt8> = Array<UInt8>()
    //PixelMap image generated by patch (not used before UI encapsulation)
    //public var drawPixelMap: ?PixelMap = None
    public var drawPixelMap: ?Any = None
    //Color table lookup index for each pixel in the current frame
    public var pixels: Array<UInt8> = Array<UInt8>()
    //Optional color index representing transparency
    public var transparentIndex: Int32 = -1
    public func toString(): String {
        return "GIFFrame = [(colorTable.size = ${colorTable.size}),  (delay = ${delay}), \n" +
                        "(dims = ${dims.toString()}), \n" +
                        "(disposalType = ${disposalType}), (pixels.size = ${pixels.size}), (transparentIndex = ${transparentIndex}), \n" +
                        "(patch.size = ${patch.size},  (pixels.size = ${pixels.size}]\n"
    }
}
public class Dims <: ToString {
    //The width of GIF frames.
    public var width: Int32 = 0
    //The height of GIF frames.
    public var height: Int32 = 0
    //Top margin of GIF frames
    public var top: Int32 = 0
    //Left margin of GIF frame.
    public var left: Int32 = 0
    public init(){}
    public init(width!: Int32, height!: Int32, top!: Int32, left!: Int32) {
        this.width = width
        this.height = height
        this.top = top
        this.left = left
    }
    public func toString(): String {
        return "Dims = {(top = ${top}), (left = ${left}), (width = ${width}), (height = ${height})}"
    }
}