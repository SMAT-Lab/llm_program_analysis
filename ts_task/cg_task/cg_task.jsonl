{"source_code": "import UIAbility from '@ohos.app.ability.UIAbility';\nimport hilog from '@ohos.hilog';\nimport window from '@ohos.window';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n  }\n\n  onDestroy() {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    // Main window is created, set main page for this ability\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground() {\n    // Ability has back to background\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}\n", "llm_cg": {"EntryAbility.onCreate(want, launchParam)": [], "EntryAbility.onDestroy()": [], "EntryAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(pages/Index, (err, data))"], "EntryAbility.onWindowStageDestroy()": [], "EntryAbility.onForeground()": [], "EntryAbility.onBackground()": []}, "static_cg": {"@test/0.ts: EntryAbility.onWindowStageCreate(window.WindowStage)": ["@test/0.ts: EntryAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (C) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// 构造单例对象\nexport class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string,Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string):Object {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n\n}", "llm_cg": {"GlobalContext.getContext()": ["GlobalContext.%AM0$GlobalContext()"], "GlobalContext.getObject(value: string)": [], "GlobalContext.setObject(key: string, objectClass: Object)": []}, "static_cg": {"@test/1.ts: GlobalContext.[static]getContext()": ["@test/1.ts: GlobalContext.constructor()"]}}
{"source_code": "/*\n * Copyright (c) 2022 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport hilog from '@ohos.hilog';\nimport window from '@ohos.window';\nimport { GlobalContext } from './GlobalContext'\n\nexport default class EntryAbility extends UIAbility {\n\n    onCreate(want, launchParam) {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n    }\n\n    onDestroy() {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n    }\n\n    onWindowStageCreate(windowStage: window.WindowStage) {\n        // Main window is created, set main page for this ability\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n        GlobalContext.getContext().setObject(\"context\", this.context);\n        GlobalContext.getContext().setObject(\"filesPath\", this.context.filesDir);\n        windowStage.loadContent('pages/Index', (err, data) => {\n            if (err.code) {\n                hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n                return;\n            }\n            hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n        });\n    }\n\n    onWindowStageDestroy() {\n        // Main window is destroyed, release UI related resources\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n    }\n\n}\n", "llm_cg": {"EntryAbility.onCreate(want, launchParam)": [], "EntryAbility.onDestroy()": [], "EntryAbility.onWindowStageCreate(window.WindowStage)": ["GlobalContext.getContext()", "GlobalContext.getContext().setObject(\"context\", this.context)", "GlobalContext.getContext().setObject(\"filesPath\", this.context.filesDir)", "windowStage.loadContent('pages/Index', (err, data) => {})"], "EntryAbility.onWindowStageDestroy()": []}, "static_cg": {"@test/2.ts: EntryAbility.onWindowStageCreate(window.WindowStage)": ["@test/2.ts: EntryAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (C) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport common from '@ohos.app.ability.common'\nimport Pop3Command, { Pop3LoginBean } from '@ohos/node-pop3'\n\nexport default class GlobalObj {\n  private CONTEXT_STR: string = 'getContext';\n  private CLIENT_STR: string = 'getClient';\n  private static instance: GlobalObj;\n  private _objects = new Map<string, Object | null>();\n\n  private constructor() {\n\n  }\n\n  public static getInstance(): GlobalObj {\n    if (!GlobalObj.instance) {\n      GlobalObj.instance = new GlobalObj()\n    }\n    return GlobalObj.instance;\n  }\n\n  getContext(): common.UIAbilityContext | null {\n    return this._objects?.get(this.CONTEXT_STR) ? this._objects?.get(this.CONTEXT_STR) as common.UIAbilityContext : null\n  }\n\n  setContext(objectClass: common.UIAbilityContext): void {\n    this._objects?.set(this.CONTEXT_STR, objectClass)\n  }\n\n  getClient(): Pop3Command | null {\n    return this._objects?.get(this.CLIENT_STR) ? this._objects?.get(this.CLIENT_STR) as Pop3Command : null\n  }\n\n  setClient(objectClass: Pop3Command | null): void {\n    this._objects?.set(this.CLIENT_STR, objectClass)\n  }\n}", "llm_cg": {"GlobalObj.getInstance()": ["GlobalObj.%AM0$GlobalObj()"], "GlobalObj.getContext()": [], "GlobalObj.setContext(common.UIAbilityContext)": [], "GlobalObj.getClient()": [], "GlobalObj.setClient(Pop3Command | null)": []}, "static_cg": {"@test/3.ts: GlobalObj.[static]getInstance()": ["@test/3.ts: GlobalObj.constructor()"]}}
{"source_code": "/*\n * Copyright (C) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class MsgBean {\n  private index: number;\n  private size: number;\n  private subject: string;\n  private from: string;\n  private to: string;\n  private cc: string;\n  private bcc: string;\n  private content: string;\n  private attachment: Array<object>;\n\n  constructor() {\n  }\n\n  public setIndex(index: number) {\n    this.index = index;\n  }\n\n  public setSize(size: number) {\n    this.size = size;\n  }\n\n  public setSubject(subject: string) {\n    this.subject = subject;\n  }\n\n  public setFrom(from: string) {\n    this.from = from;\n  }\n\n  public setTo(to: string) {\n    this.to = to;\n  }\n\n  public setCc(cc: string) {\n    this.cc = cc;\n  }\n\n  public setBcc(bcc: string) {\n    this.bcc = bcc;\n  }\n\n  public setContent(content: string) {\n    this.content = content;\n  }\n\n  public setAttachment(attachment: Array<object>) {\n    this.attachment = attachment;\n  }\n\n  public getIndex(): number {\n    return this.index;\n  }\n\n  public getSize(): number {\n    return this.size;\n  }\n\n  public getSubject(): string {\n    return this.subject;\n  }\n\n  public getFrom(): string {\n    return this.from;\n  }\n\n  public getTo(): string {\n    return this.to;\n  }\n\n  public getCc(): string {\n    return this.cc;\n  }\n\n  public getBcc(): string {\n    return this.bcc;\n  }\n\n  public getContent(): string {\n    return this.content;\n  }\n\n  public getAttachment(): Array<object> {\n    return this.attachment;\n  }\n}", "llm_cg": {"MsgBean.setIndex(index: number)": [], "MsgBean.setSize(size: number)": [], "MsgBean.setSubject(subject: string)": [], "MsgBean.setFrom(from: string)": [], "MsgBean.setTo(to: string)": [], "MsgBean.setCc(cc: string)": [], "MsgBean.setBcc(bcc: string)": [], "MsgBean.setContent(content: string)": [], "MsgBean.setAttachment(attachment: Array<object>)": [], "MsgBean.getIndex()": [], "MsgBean.getSize()": [], "MsgBean.getSubject()": [], "MsgBean.getFrom()": [], "MsgBean.getTo()": [], "MsgBean.getCc()": [], "MsgBean.getBcc()": [], "MsgBean.getContent()": [], "MsgBean.getAttachment()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CameraConfig {\n  mirrorBol: boolean, // 镜像使能\n  videoStabilizationMode: number, // 视频防抖\n  exposureMode: number, // 曝光模式\n  focusMode: number, // 对焦模式\n  photoQuality: number, // 拍照质量\n  locationBol: boolean, // 显示地理位置\n  photoFormat: number, // 照片格式\n  photoOrientation: number, // 照片方向\n  photoResolution: number, // 照片分辨率\n  videoResolution: number, // 照片分辨率\n  videoFrame: number, // 录像帧率\n  referenceLineBol: boolean, // 分割线\n  hdrPhotoBol: boolean, // HDR 拍摄\n  hdrVideoBol: boolean, // HDR 录制\n}", "llm_cg": {"CameraConfig": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Constants {\n  // aspect ratio: width/height\n  static readonly MIN_ASPECT_RATIO = 4 / 3;\n  static readonly MAX_ASPECT_RATIO = 16 / 9;\n\n  static readonly VIDEO_MAX_WIDTH = 2048;\n  static readonly PHOTO_MAX_WIDTH = 2048;\n  static readonly SURFACE_BOTTOM_MARGIN = 50;\n\n  // device type\n  static readonly TABLET = 'tablet';\n  static readonly DEFAULT = 'default';\n  static readonly PHONE = 'phone';\n\n  // video frame\n  static readonly VIDEO_FRAME_60 = 60;\n  static readonly VIDEO_FRAME_30 = 30;\n  static readonly VIDEO_FRAME_15 = 15;\n}\n\n", "llm_cg": {"Constants.MIN_ASPECT_RATIO": [], "Constants.MAX_ASPECT_RATIO": [], "Constants.VIDEO_MAX_WIDTH": [], "Constants.PHOTO_MAX_WIDTH": [], "Constants.SURFACE_BOTTOM_MARGIN": [], "Constants.TABLET": [], "Constants.DEFAULT": [], "Constants.PHONE": [], "Constants.VIDEO_FRAME_60": [], "Constants.VIDEO_FRAME_30": [], "Constants.VIDEO_FRAME_15": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport display from '@ohos.display';\nimport type common from '@ohos.app.ability.common';\nimport type Want from '@ohos.app.ability.Want';\nimport type window from '@ohos.window';\nimport type { PromptAction } from '@ohos.arkui.UIContext';\n\nconst TAG: string = 'GlobalContext';\n\nexport class GlobalContext {\n\n  private constructor() {\n  }\n\n  private static instance: GlobalContext;\n  private _objects = new Map<string, Object>();\n  private mDisplay: display.Display | undefined = undefined;\n  private mCutoutInfo: display.CutoutInfo | undefined = undefined;\n  private cameraAbilityContext: common.UIAbilityContext;\n  private cameraAbilityStageContext: common.AbilityStageContext;\n  private cameraAbilityWant: Want;\n  private cameraNewWant: Want;\n  private windowStage: window.WindowStage;\n  private cameraWinClass: window.Window;\n  private cameraSettingContext: common.UIAbilityContext;\n  private cameraWindowStageEvent: window.WindowStageEventType;\n  private xComponentController: XComponentController;\n  private promptAction: PromptAction;\n\n  public static get(): GlobalContext {\n    if (!Boolean(GlobalContext.instance).valueOf()) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string): Object {\n    return this._objects.get(value);\n  }\n\n  getT<T>(value: string): T {\n    return this._objects.get(value) as T;\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n\n  apply(value: string): void {\n    const func = this._objects.get(value);\n    if (func) {\n      (func as Function)();\n    }\n  }\n\n  // 显示实例，在 phone设备上用 display获得的长宽与 State变量中 windowSize一致。\n  public getDisplayInfo(): display.Display {\n    if (!this.mDisplay) {\n      this.mDisplay = display.getDefaultDisplaySync();\n    }\n    return this.mDisplay;\n  }\n\n  public async getCutoutInfo(): Promise<display.CutoutInfo> {\n    if (!this.mCutoutInfo) {\n      this.mCutoutInfo = await this.getDisplayInfo().getCutoutInfo();\n    }\n    return this.mCutoutInfo;\n  }\n\n  public getCameraAbilityContext(): common.UIAbilityContext {\n    return this.cameraAbilityContext;\n  }\n\n  public setCameraAbilityContext(context: common.UIAbilityContext): void {\n    this.cameraAbilityContext = context;\n  }\n\n  public getCameraAbilityWant(): Want {\n    return this.cameraAbilityWant;\n  }\n\n  public setCameraAbilityWant(want: Want): void {\n    this.cameraAbilityWant = want;\n  }\n\n  public getCameraNewWant(): Want {\n    return this.cameraNewWant;\n  }\n\n  public setCameraNewWant(want: Want): void {\n    this.cameraNewWant = want;\n  }\n\n  public getWindowStage(): window.WindowStage {\n    return this.windowStage;\n  }\n\n  public setWindowStage(stage: window.WindowStage): void {\n    this.windowStage = stage;\n  }\n\n  public getCameraAbilityStageContext(): common.AbilityStageContext {\n    return this.cameraAbilityStageContext;\n  }\n\n  public setCameraAbilityStageContext(context: common.AbilityStageContext): void {\n    this.cameraAbilityStageContext = context;\n  }\n\n  public getCameraWinClass(): window.Window {\n    return this.cameraWinClass;\n  }\n\n  public setCameraWinClass(win: window.Window): void {\n    this.cameraWinClass = win;\n  }\n\n  public getCameraSettingContext(): common.UIAbilityContext {\n    return this.cameraSettingContext;\n  }\n\n  public setCameraSettingContext(context: common.UIAbilityContext): void {\n    this.cameraSettingContext = context;\n  }\n\n  public setPromptAction(promptAction: PromptAction): void {\n    this.promptAction = promptAction;\n  }\n\n  public getPromptAction(): PromptAction {\n    return this.promptAction;\n  }\n\n  public getCameraWindowStageEvent(): window.WindowStageEventType {\n    return this.cameraWindowStageEvent;\n  }\n\n  public setCameraWindowStageEvent(event: window.WindowStageEventType): void {\n    this.cameraWindowStageEvent = event;\n  }\n\n  public getXComponentController(): XComponentController {\n    return this.xComponentController;\n  }\n\n  public setXComponentController(controller): void {\n    this.xComponentController = controller;\n  }\n}", "llm_cg": {"GlobalContext.get()": ["GlobalContext.%AM0$GlobalContext()"], "GlobalContext.getDisplayInfo()": ["display.%AM1$getDefaultDisplaySync()"], "GlobalContext.getCutoutInfo()": ["GlobalContext.%AM2$getDisplayInfo()", "display.Display.%AM3$getCutoutInfo()"], "GlobalContext.apply(value: string)": ["Map.%AM4$get(value: string)", "Function.%AM5$call()"]}, "static_cg": {"@test/7.ts: GlobalContext.getCutoutInfo()": ["@test/7.ts: GlobalContext.getDisplayInfo()"], "@test/7.ts: GlobalContext.[static]get()": ["@test/7.ts: GlobalContext.constructor()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Constants } from '../common/Constants';\n\nexport default class DisplayCalculator {\n  public static calcSurfaceDisplaySize(screenWidth: number, screenHeight: number, defaultAspectRatio: number): {\n    width: number,\n    height: number\n  } {\n    const displaySize = {\n      width: 1920, height: 1080\n    };\n    if (AppStorage.get<string>('deviceType') === Constants.TABLET || screenWidth > screenHeight) {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight * defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth / defaultAspectRatio);\n      }\n    } else {\n      if (screenWidth / screenHeight > defaultAspectRatio) {\n        displaySize.width = Math.floor(screenHeight / defaultAspectRatio);\n        displaySize.height = Math.floor(screenHeight);\n      } else {\n        displaySize.width = Math.floor(screenWidth);\n        displaySize.height = Math.floor(screenWidth * defaultAspectRatio);\n      }\n    }\n    return displaySize;\n  }\n}", "llm_cg": {"DisplayCalculator.calcSurfaceDisplaySize(number, number, number)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type window from '@ohos.window';\nimport deviceInfo from '@ohos.deviceInfo';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type Want from '@ohos.app.ability.Want';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport { BusinessError } from '@ohos.base';\nimport Logger from '../model/Logger';\nimport { Constants } from '../common/Constants';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG: string = 'EntryAbility';\n\nexport default class EntryAbility extends UIAbility {\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n    GlobalContext.get().setCameraSettingContext(this.context);\n    GlobalContext.get().getCameraSettingContext();\n  }\n\n  onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.loadContent('pages/Index', (): void => {\n      Logger.info(TAG, 'Succeeded in loading the content.');\n    });\n    this.requestPermissionsFn();\n    AppStorage.setOrCreate<string>('deviceType', deviceInfo.deviceType);\n    windowStage.getMainWindow().then((win: window.Window): void => {\n      GlobalContext.get().setPromptAction(win.getUIContext().getPromptAction());\n      Logger.debug(TAG, 'Succeeded get promptAction.');\n      if (deviceInfo.deviceType === Constants.TABLET) {\n        win.setWindowLayoutFullScreen(true).then((): void => {\n          win.setWindowSystemBarEnable(['navigation']).then((): void => {\n          });\n        });\n        win.setWindowSystemBarProperties({\n          navigationBarColor: '#00000000',\n          navigationBarContentColor: '#B3B3B3'\n        })\n          .then((): void => {\n          });\n      }\n    });\n  }\n\n  /**\n   * 获取权限\n   */\n  requestPermissionsFn(): void {\n    let atManager = abilityAccessCtrl.createAtManager();\n    atManager.requestPermissionsFromUser(this.context, [\n      'ohos.permission.CAMERA',\n      'ohos.permission.MICROPHONE',\n      'ohos.permission.READ_MEDIA',\n      'ohos.permission.WRITE_MEDIA',\n      'ohos.permission.READ_IMAGEVIDEO',\n      'ohos.permission.WRITE_IMAGEVIDEO'\n    ]).then((): void => {\n      AppStorage.setOrCreate<boolean>('isShow', true);\n      Logger.info(TAG, 'request Permissions success!');\n    }).catch((error: BusinessError): void => {\n      Logger.info(TAG, `requestPermissionsFromUser call Failed! error: ${error.code}`);\n    });\n  }\n}\n", "llm_cg": {"EntryAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["Logger.info(string, string)", "Logger.debug(string, string)", "Logger.debug(string, string)", "GlobalContext.get().setCameraSettingContext(unknown)", "GlobalContext.get().getCameraSettingContext()"], "EntryAbility.onDestroy()": ["Logger.info(string, string)"], "EntryAbility.onWindowStageCreate(window.WindowStage)": ["Logger.info(string, string)", "windowStage.loadContent(string, Function)", "EntryAbility.requestPermissionsFn()", "AppStorage.setOrCreate<string>(string, string)", "windowStage.getMainWindow()", "GlobalContext.get().setPromptAction(unknown)", "Logger.debug(string, string)", "window.Window.setWindowLayoutFullScreen(boolean)", "window.Window.setWindowSystemBarEnable(string[])", "window.Window.setWindowSystemBarProperties(unknown)"], "EntryAbility.requestPermissionsFn()": ["abilityAccessCtrl.createAtManager()", "AtManager.requestPermissionsFromUser(unknown, string[])", "AppStorage.setOrCreate<boolean>(string, boolean)", "Logger.info(string, string)", "Logger.info(string, string)"]}, "static_cg": {"@test/9.ts: EntryAbility.onWindowStageCreate(window.WindowStage)": ["@test/9.ts: EntryAbility.%AM0$onWindowStageCreate()", "@test/9.ts: EntryAbility.requestPermissionsFn()", "@test/9.ts: EntryAbility.%AM1$onWindowStageCreate(window.Window)"], "@test/9.ts: EntryAbility.requestPermissionsFn()": ["@test/9.ts: EntryAbility.%AM6$requestPermissionsFn()", "@test/9.ts: EntryAbility.%AM5$requestPermissionsFn(BusinessError)"], "@test/9.ts: EntryAbility.%AM2$%AM1$onWindowStageCreate()": ["@test/9.ts: EntryAbility.%AM3$%AM2$%AM1$onWindowStageCreate()"], "@test/9.ts: EntryAbility.%AM1$onWindowStageCreate(window.Window)": ["@test/9.ts: EntryAbility.%AM2$%AM1$onWindowStageCreate()", "@test/9.ts: EntryAbility.%AM4$%AM1$onWindowStageCreate()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hiLog from '@ohos.hilog';\n\nconst TAG = 'cameraSample';\n\nclass Logger {\n  private domain: number;\n  private prefix: string;\n  private format: string = '%{public}s, %{public}s';\n\n  constructor(prefix: string) {\n    this.prefix = prefix;\n    this.domain = 0xFF00;\n  }\n\n  debug(...args: any[]): void {\n    hiLog.debug(this.domain, this.prefix, this.format, args);\n  }\n\n  info(...args: any[]): void {\n    hiLog.info(this.domain, this.prefix, this.format, args);\n  }\n\n  warn(...args: any[]): void {\n    hiLog.warn(this.domain, this.prefix, this.format, args);\n  }\n\n  error(...args: any[]): void {\n    hiLog.error(this.domain, this.prefix, this.format, args);\n  }\n}\n\nexport default new Logger(TAG);", "llm_cg": {"Logger.debug(...args: any[])": ["hiLog.debug(number, string, string, any[])"], "Logger.info(...args: any[])": ["hiLog.info(number, string, string, any[])"], "Logger.warn(...args: any[])": ["hiLog.warn(number, string, string, any[])"], "Logger.error(...args: any[])": ["hiLog.error(number, string, string, any[])"]}, "static_cg": {"@test/10.ts: %dflt.[static]%dflt()": ["@test/10.ts: Logger.constructor(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Setting {\n  private mirrorBol: boolean; // 镜像使能 -> 关闭\n  private videoStabilizationMode: number; // 视频防抖 -> 关闭\n  private exposureMode: number; // 曝光模式 -> 自动\n  private focusMode: number; // 对焦模式 -> 自动\n  private photoQuality: number; // 拍照质量 -> 中\n  private locationBol: boolean; // 显示地理位置 -> 关闭\n  private photoFormat: number; // 照片格式 -> JPG\n  private photoOrientation: number; // 照片方向 -> 0\n  private photoResolution: number; // 照片分辨率 -> 1920 * 1080\n  private videoResolution: number; // 照片分辨率 -> 1920 * 1080\n  private videoFrame: number; // 录像帧率 -> 15\n  private dividerBol: boolean; // 分割线 -> 关闭\n}\n", "llm_cg": {"Setting": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file 日期工具\n */\nexport default class DateTimeUtil {\n\n  /**\n   * 时分秒\n   */\n  getTime(): string {\n    const DATETIME = new Date();\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds());\n  }\n\n  /**\n   * 年月日\n   */\n  getDate(): string {\n    const DATETIME = new Date();\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate());\n  }\n\n  /**\n   * 日期不足两位补充0\n   * @param value-数据值\n   */\n  fill(value: number): string {\n    let maxNumber = 9;\n    return (value > maxNumber ? '' : '0') + value;\n  }\n  /**\n   * 录制时间定时器\n   * @param millisecond-数据值\n   */\n  getVideoTime(millisecond: number): string {\n    let millisecond2minute = 60000;\n    let millisecond2second = 1000;\n    let minute = Math.floor(millisecond / millisecond2minute);\n    let second = Math.floor((millisecond - minute * millisecond2minute) / millisecond2second);\n    return `${this.fill(minute)} : ${this.fill(second)}`;\n  }\n  /**\n   * 年月日格式修饰\n   * @param year\n   * @param month\n   * @param date\n   */\n  concatDate(year: number, month: number, date: number): string {\n    return `${year}${this.fill(month)}${this.fill(date)}`;\n  }\n\n  /**\n   * 时分秒格式修饰\n   * @param hours\n   * @param minutes\n   * @param seconds\n   */\n  concatTime(hours: number, minutes: number, seconds: number): string {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`;\n  }\n}", "llm_cg": {"DateTimeUtil.getTime()": ["DateTimeUtil.concatTime(unknown, unknown, unknown)"], "DateTimeUtil.getDate()": ["DateTimeUtil.concatDate(unknown, unknown, unknown)"], "DateTimeUtil.getVideoTime(millisecond)": ["DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)"], "DateTimeUtil.concatDate(year, month, date)": ["DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)"], "DateTimeUtil.concatTime(hours, minutes, seconds)": ["DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)"]}, "static_cg": {"@test/13.ts: DateTimeUtil.getTime()": ["@test/13.ts: DateTimeUtil.concatTime(number, number, number)"], "@test/13.ts: DateTimeUtil.getDate()": ["@test/13.ts: DateTimeUtil.concatDate(number, number, number)"], "@test/13.ts: DateTimeUtil.getVideoTime(number)": ["@test/13.ts: DateTimeUtil.fill(number)"], "@test/13.ts: DateTimeUtil.concatDate(number, number, number)": ["@test/13.ts: DateTimeUtil.fill(number)"], "@test/13.ts: DateTimeUtil.concatTime(number, number, number)": ["@test/13.ts: DateTimeUtil.fill(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityStage from '@ohos.app.ability.AbilityStage';\nimport Logger from '../model/Logger';\n\nconst TAG: string = 'MyAbilityStage';\n\nexport default class MyAbilityStage extends AbilityStage {\n  async onCreate(): Promise<void> {\n    Logger.info(TAG, 'AbilityStage onCreate');\n  }\n}", "llm_cg": {"MyAbilityStage.onCreate()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ability from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport type Window from '@ohos.window';\nimport Logger from '../model/Logger';\n\nconst TAG: string = 'MainAbility';\n\nexport default class MainAbility extends Ability {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n  }\n\n  onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: Window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.getMainWindow().then((win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    })\n    this.onLoadContent(windowStage, 'pages/Index');\n  }\n\n  onLoadContent(windowStage: Window.WindowStage, page: string): void {\n    windowStage.loadContent(page, (): void => {\n    });\n\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // Ability has back to background\n    Logger.info(TAG, 'Ability onBackground');\n  }\n}\n", "llm_cg": {"MainAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["Logger.info(string, string)", "Logger.debug(string, string)", "Logger.debug(string, string)"], "MainAbility.onDestroy()": ["Logger.info(string, string)"], "MainAbility.onWindowStageCreate(Window.WindowStage)": ["Logger.info(string, string)", "Window.WindowStage.getMainWindow()", "Window.Window.setWindowLayoutFullScreen(boolean)", "Window.Window.setWindowSystemBarEnable(string[])", "Window.Window.setWindowSystemBarProperties(Window.SystemBarProperties)", "MainAbility.onLoadContent(Window.WindowStage, string)"], "MainAbility.onLoadContent(Window.WindowStage, string)": ["Window.WindowStage.loadContent(string, Function)"], "MainAbility.onWindowStageDestroy()": ["Logger.info(string, string)"], "MainAbility.onForeground()": ["Logger.info(string, string)"], "MainAbility.onBackground()": ["Logger.info(string, string)"]}, "static_cg": {"@test/15.ts: MainAbility.onWindowStageCreate(Window.WindowStage)": ["@test/15.ts: MainAbility.%AM0$onWindowStageCreate(Window.Window)", "@test/15.ts: MainAbility.onLoadContent(Window.WindowStage, string)"], "@test/15.ts: MainAbility.onLoadContent(Window.WindowStage, string)": ["@test/15.ts: MainAbility.%AM4$onLoadContent()"], "@test/15.ts: MainAbility.%AM1$%AM0$onWindowStageCreate()": ["@test/15.ts: MainAbility.%AM2$%AM1$%AM0$onWindowStageCreate()"], "@test/15.ts: MainAbility.%AM0$onWindowStageCreate(Window.Window)": ["@test/15.ts: MainAbility.%AM1$%AM0$onWindowStageCreate()", "@test/15.ts: MainAbility.%AM3$%AM0$onWindowStageCreate()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport window from '@ohos.window';\nimport deviceInfo from '@ohos.deviceInfo';\nimport Ability from '@ohos.app.ability.UIAbility';\nimport wantConstant from '@ohos.ability.wantConstant';\nimport { Log } from '../utils/Log';\nimport { screenManager } from '../common/ScreenManager';\nimport { Constants } from '../constants/Constants';\nimport { broadcastManager } from '../common/BroadcastManager';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { userFileModel } from '../base/UserFileModel';\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { GroupItemDataSource } from '../common/GroupItemDataSource';\nimport atManager from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from '../common/GlobalContext';\nimport Want from '@ohos.app.ability.Want';\n\nlet mCallerUid: number = 0;\nlet mMaxSelectCount: number = 0;\nlet mFilterMediaType: number = MediaConstants.SELECT_TYPE_ALL;\nlet appBroadcast = broadcastManager.getBroadcast();\nlet pagePath: string = 'pages/Index';\n\nexport default class EntryAbility extends UIAbility {\n  private TAG: string = 'EntryAbility';\n  private static readonly RETRY_MAX_TIMES = 100;\n  private static readonly ACTION_URI_SINGLE_SELECT = 'singleselect';\n  private static readonly ACTION_URI_MULTIPLE_SELECT = 'multipleselect';\n  private static readonly ACTION_URI_PHOTO_DETAIL = 'photodetail';\n  private browserDataSource: GroupItemDataSource = new GroupItemDataSource();\n\n  onCreate(want: Want, launchParam): void {\n    Log.info(this.TAG, 'Application onCreate');\n    // Ability is creating, initialize resources for this ability\n    GlobalContext.getContext().setObject('appContext', this.context);\n    userFileModel.onCreate(this.context);\n    mFilterMediaType = MediaConstants.SELECT_TYPE_ALL;\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);\n    Log.info(this.TAG, 'Application onCreate end');\n  }\n\n  onNewWant(want: Want): void {\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);\n  }\n\n  onDestroy(): void {\n    // Ability is creating, release resources for this ability\n    Log.info(this.TAG, 'Application onDestroy');\n    AppStorage.Delete(Constants.ENTRY_FROM_HAP);\n  }\n\n  onWindowStageCreate(windowStage): void {\n    // Main window is created, set main page for this ability\n    Log.info(this.TAG, 'Application onWindowStageCreate');\n    GlobalContext.getContext().setObject('photosWindowStage', windowStage);\n    windowStage.getMainWindow().then((win: window.Window): void => {\n      AppStorage.SetOrCreate<window.Window>(Constants.MAIN_WINDOW, win);\n      screenManager.initializationSize(win).then<void, void>((): void => {\n        windowStage.setUIContent(this.context, pagePath, null);\n      }).catch<void>((): void => {\n        Log.error(this.TAG, 'get device screen info failed.');\n      });\n    });\n  }\n\n  onWindowStageDestroy(): void {\n  }\n\n  onForeground(): void {\n  }\n\n  onBackground(): void {\n  }\n}\n", "llm_cg": {"EntryAbility.onCreate(Want, unknown)": ["GlobalContext.getContext()", "GlobalContext.getContext().setObject(string, unknown)", "userFileModel.onCreate(unknown)", "AppStorage.SetOrCreate<number>(string, number)", "Log.info(string, string)"], "EntryAbility.onNewWant(Want)": ["AppStorage.SetOrCreate<number>(string, number)"], "EntryAbility.onDestroy()": ["Log.info(string, string)", "AppStorage.Delete(string)"], "EntryAbility.onWindowStageCreate(unknown)": ["Log.info(string, string)", "GlobalContext.getContext()", "GlobalContext.getContext().setObject(string, unknown)", "windowStage.getMainWindow()", "AppStorage.SetOrCreate<window.Window>(string, window.Window)", "screenManager.initializationSize(window.Window)", "windowStage.setUIContent(unknown, string, null)", "Log.error(string, string)"]}, "static_cg": {"@test/16.ts: EntryAbility.onWindowStageCreate(unknown)": ["@test/16.ts: EntryAbility.%AM0$onWindowStageCreate(window.Window)"], "@test/16.ts: EntryAbility.%AM0$onWindowStageCreate(window.Window)": ["@test/16.ts: EntryAbility.%AM2$%AM0$onWindowStageCreate()", "@test/16.ts: EntryAbility.%AM1$%AM0$onWindowStageCreate()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface AsyncCallback<T> {\n  callback(t: T): void;\n}", "llm_cg": {"AsyncCallback.callback(T)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumDataImpl } from '../common/AlbumDataImpl';\n\nconst TAG = 'BatchRemoveMenuOperation';\n\nexport class BatchRemoveMenuOperation extends ProcessMenuOperation {\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'remove doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getRemoveMessageResource(dataSource);\n    let removeResource: Resource = $r('app.string.dialog_remove');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, removeResource, this.confirmCallback, this.cancelCallback]);\n  }\n\n  getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return $r('app.string.remove_all_files_tips');\n    } else if (this.count === 1) {\n      return $r('app.string.remove_single_file_tips');\n    } else {\n      return $r('app.string.remove_files_tips', this.count);\n    }\n  }\n\n  getRemoveMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    resource = this.getResourceFromGrid(dataSource);\n    return resource;\n  }\n\n  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove confirm');\n    AppStorage.SetOrCreate<number>('isRemove', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onRemoveStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_remove'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }\n\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      if(this.menuContext.albumId === MediaConstants.ALBUM_ID_USER){\n        Log.error(TAG,'Remove from user album:'+this.menuContext.albumInfo.uri);\n        this.albumDataImpl.removeFileFromAlbum(this.menuContext.albumInfo.uri,item.uri).then<void, void>((): void => {\n          this.currentBatch++;\n          this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n          this.cyclicOperation();\n        })\n      }\n    }\n  }\n\n  cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch remove cancel');\n  }\n}\n", "llm_cg": {"BatchRemoveMenuOperation.doAction()": ["Log.info(string, string)", "Log.warn(string, string)", "ItemDataSource.getSelectedCount()", "BatchRemoveMenuOperation.getRemoveMessageResource(ItemDataSource)", "MenuContext.broadCast.emit(string, [Resource, Resource, Function, Function])"], "BatchRemoveMenuOperation.getResourceFromGrid(ItemDataSource)": ["ItemDataSource.isSelect()", "$r(string)", "$r(string, number)"], "BatchRemoveMenuOperation.getRemoveMessageResource(ItemDataSource)": ["BatchRemoveMenuOperation.getResourceFromGrid(ItemDataSource)"], "BatchRemoveMenuOperation.confirmCallback()": ["BatchRemoveMenuOperation.confirmCallbackBindImpl()"], "BatchRemoveMenuOperation.confirmCallbackBindImpl()": ["Log.info(string, string)", "AppStorage.SetOrCreate(string, number)", "MenuContext.onOperationStart()", "MenuContext.broadCast.emit(string, [Resource, number])", "ItemDataSource.getSelectedItems()", "BatchRemoveMenuOperation.processOperation()"], "BatchRemoveMenuOperation.requestOneBatchOperation()": ["Log.error(string, string)", "AlbumDataImpl.removeFileFromAlbum(string, string)", "MenuContext.broadCast.emit(string, [number, number])", "BatchRemoveMenuOperation.cyclicOperation()"], "BatchRemoveMenuOperation.cancelCallback()": ["BatchRemoveMenuOperation.cancelCallbackBindImpl()"], "BatchRemoveMenuOperation.cancelCallbackBindImpl()": ["Log.info(string, string)"]}, "static_cg": {"@test/18.ts: BatchRemoveMenuOperation.doAction()": ["@test/18.ts: BatchRemoveMenuOperation.getRemoveMessageResource(ItemDataSource)"], "@test/18.ts: BatchRemoveMenuOperation.getRemoveMessageResource(ItemDataSource)": ["@test/18.ts: BatchRemoveMenuOperation.getResourceFromGrid(ItemDataSource)"], "@test/18.ts: BatchRemoveMenuOperation.confirmCallback()": ["@test/18.ts: BatchRemoveMenuOperation.confirmCallbackBindImpl()"], "@test/18.ts: BatchRemoveMenuOperation.requestOneBatchOperation()": ["@test/18.ts: BatchRemoveMenuOperation.%AM2$requestOneBatchOperation()"], "@test/18.ts: BatchRemoveMenuOperation.cancelCallback()": ["@test/18.ts: BatchRemoveMenuOperation.cancelCallbackBindImpl()"], "@test/18.ts: BatchRemoveMenuOperation.%AM0$doAction()": ["@test/18.ts: BatchRemoveMenuOperation.confirmCallbackBindImpl()"], "@test/18.ts: BatchRemoveMenuOperation.%AM1$doAction()": ["@test/18.ts: BatchRemoveMenuOperation.cancelCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface MenuOperation {\n  doAction(): void;\n}", "llm_cg": {"MenuOperation.doAction()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { showToast } from '../utils/UiUtil';\nimport { userFileModel } from '../base/UserFileModel';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { LazyItem } from '../common/ItemDataSource';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumsDataSource } from '../common/AlbumsDataSource';\n\nconst TAG = 'AlbumSetNewMenuOperation';\n\nexport class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }\n\n  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }\n\n  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }\n\n  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }\n\n  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }\n}\n", "llm_cg": {"AlbumSetNewMenuOperation.doAction()": ["AlbumSetNewMenuOperation.%AM0$getNewAlbumDefaultName(string)", "AlbumSetNewMenuOperation.%AM1$confirmCallbackBindImpl(string)", "AlbumSetNewMenuOperation.%AM2$cancelCallbackBindImpl()"], "AlbumSetNewMenuOperation.confirmCallback(string)": ["AlbumSetNewMenuOperation.%AM3$confirmCallbackBindImpl(string)"], "AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)": ["AlbumSetNewMenuOperation.%AM4$checkAlbumExit(SimpleAlbumDataItem)", "AlbumSetNewMenuOperation.%AM5$onCompletedBindImpl()"], "AlbumSetNewMenuOperation.checkAlbumExit(SimpleAlbumDataItem)": ["userFileModel.%AM6$getUserAlbumCountByName(string)"], "AlbumSetNewMenuOperation.cancelCallback()": ["AlbumSetNewMenuOperation.%AM7$cancelCallbackBindImpl()"], "AlbumSetNewMenuOperation.cancelCallbackBindImpl()": [], "AlbumSetNewMenuOperation.onCompleted()": ["AlbumSetNewMenuOperation.%AM8$onCompletedBindImpl()"], "AlbumSetNewMenuOperation.onCompletedBindImpl()": [], "AlbumSetNewMenuOperation.onError()": [], "AlbumSetNewMenuOperation.checkAndAddNumber(AlbumDataItem, string, number[])": [], "AlbumSetNewMenuOperation.getNewAlbumDefaultName(string)": ["AlbumSetNewMenuOperation.%AM9$checkAndAddNumber(AlbumDataItem, string, number[])"]}, "static_cg": {"@test/20.ts: AlbumSetNewMenuOperation.doAction()": ["@test/20.ts: AlbumSetNewMenuOperation.%AM0$doAction(string)"], "@test/20.ts: AlbumSetNewMenuOperation.confirmCallback(string)": ["@test/20.ts: AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)"], "@test/20.ts: AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)": ["@test/20.ts: AlbumSetNewMenuOperation.checkAlbumExit(SimpleAlbumDataItem)", "@test/20.ts: AlbumSetNewMenuOperation.%AM3$confirmCallbackBindImpl(string)", "@test/20.ts: AlbumSetNewMenuOperation.onCompleted()"], "@test/20.ts: AlbumSetNewMenuOperation.cancelCallback()": ["@test/20.ts: AlbumSetNewMenuOperation.cancelCallbackBindImpl()"], "@test/20.ts: AlbumSetNewMenuOperation.onCompleted()": ["@test/20.ts: AlbumSetNewMenuOperation.onCompletedBindImpl()"], "@test/20.ts: AlbumSetNewMenuOperation.getNewAlbumDefaultName(string)": ["@test/20.ts: AlbumSetNewMenuOperation.checkAndAddNumber(AlbumDataItem, string, number[])", "@test/20.ts: AlbumSetNewMenuOperation.%AM5$getNewAlbumDefaultName(unknown, unknown)"], "@test/20.ts: AlbumSetNewMenuOperation.%AM1$%AM0$doAction(string)": ["@test/20.ts: AlbumSetNewMenuOperation.confirmCallbackBindImpl(string)"], "@test/20.ts: AlbumSetNewMenuOperation.%AM2$%AM0$doAction()": ["@test/20.ts: AlbumSetNewMenuOperation.cancelCallbackBindImpl()"], "@test/20.ts: AlbumSetNewMenuOperation.%AM0$doAction(string)": ["@test/20.ts: AlbumSetNewMenuOperation.getNewAlbumDefaultName(string)"], "@test/20.ts: AlbumSetNewMenuOperation.%AM4$confirmCallbackBindImpl()": ["@test/20.ts: AlbumSetNewMenuOperation.onCompletedBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Constants } from '../constants/BrowserConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'RenameMenuOperation';\n\nexport class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }\n\n  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }\n\n  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }\n\n  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }\n\n  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }\n}\n", "llm_cg": {"RenameMenuOperation.doAction()": ["RenameMenuOperation.%AM0$confirmCallbackBindImpl(string)", "RenameMenuOperation.%AM1$cancelCallbackBindImpl()"], "RenameMenuOperation.confirmCallback(string)": ["RenameMenuOperation.%AM0$confirmCallbackBindImpl(string)"], "RenameMenuOperation.confirmCallbackBindImpl(string)": ["RenameMenuOperation.%AM0$hasSameNameAsset(UserFileDataItem, string)", "RenameMenuOperation.%AM1$rename(UserFileDataItem, string)", "RenameMenuOperation.%AM2$getResourceString(unknown)", "RenameMenuOperation.%AM3$showToast(string)"], "RenameMenuOperation.rename(UserFileDataItem, string)": ["UserFileDataItem.%AM0$setName(string)"], "RenameMenuOperation.hasSameNameAsset(UserFileDataItem, string)": ["UserFileDataItem.%AM0$loadFileAsset()", "userFileModel.%AM0$getMediaItemCountsByDisplayName(string)"], "RenameMenuOperation.cancelCallback()": ["RenameMenuOperation.%AM0$cancelCallbackBindImpl()"]}, "static_cg": {"@test/21.ts: RenameMenuOperation.confirmCallback(string)": ["@test/21.ts: RenameMenuOperation.confirmCallbackBindImpl(string)"], "@test/21.ts: RenameMenuOperation.confirmCallbackBindImpl(string)": ["@test/21.ts: RenameMenuOperation.hasSameNameAsset(UserFileDataItem, string)", "@test/21.ts: RenameMenuOperation.%AM2$confirmCallbackBindImpl(string)", "@test/21.ts: RenameMenuOperation.rename(UserFileDataItem, string)", "@test/21.ts: RenameMenuOperation.%AM3$confirmCallbackBindImpl(string)"], "@test/21.ts: RenameMenuOperation.cancelCallback()": ["@test/21.ts: RenameMenuOperation.cancelCallbackBindImpl()"], "@test/21.ts: RenameMenuOperation.%AM0$doAction(string)": ["@test/21.ts: RenameMenuOperation.confirmCallbackBindImpl(string)"], "@test/21.ts: RenameMenuOperation.%AM1$doAction()": ["@test/21.ts: RenameMenuOperation.cancelCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { MenuContext } from './MenuContext';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\n\nconst TAG = 'AlbumSetDeleteMenuOperation';\n\nexport class AlbumSetDeleteMenuOperation extends ProcessMenuOperation {\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n      this.items = this.menuContext.items;\n    } else {\n      this.count = dataSource.getSelectedCount();\n      this.items = dataSource.getSelectedItems();\n    }\n    if (this.count as number <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let deleteResource: Resource = $r('app.string.dialog_delete');\n    this.getDialogTitle().then<void, void>((dialogTitle: Resource): void => {\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [dialogTitle, deleteResource, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async getDialogTitle(): Promise<Resource> {\n    let videoCount = 0;\n    let photoCount = 0;\n    for (let i = 0; i < this.items.length; i++) {\n      let itemVideoCount = await  (this.items[i] as AlbumDataItem).getVideoCount();\n      videoCount += itemVideoCount;\n      photoCount += ((this.items[i] as AlbumDataItem).count - itemVideoCount);\n    }\n\n    if (this.count as number === 1) {\n      if (videoCount > 0 && photoCount > 0) {\n        return $r('app.string.recycle_single_album_tips', photoCount, videoCount);\n      }\n      if (videoCount > 0 && photoCount <= 0) {\n        return $r('app.string.recycle_single_album_with_videos_tips', videoCount);\n      }\n      if (videoCount <= 0 && photoCount > 0) {\n        return $r('app.string.recycle_single_album_with_photos_tips', photoCount);\n      }\n    } else {\n      if (videoCount > 0 && photoCount > 0) {\n        return $r('app.string.recycle_albums_tips', this.count, photoCount, videoCount);\n      }\n      if (videoCount > 0 && photoCount <= 0) {\n        return $r('app.string.recycle_albums_with_videos_tips', this.count, videoCount);\n      }\n      if (videoCount <= 0 && photoCount > 0) {\n        return $r('app.string.recycle_albums_with_photos_tips', this.count, photoCount);\n      }\n    }\n  }\n\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as AlbumDataItem;\n    let promise: Promise<boolean> = item.onDelete();\n    promise.then<void, void>((): void => {\n      this.currentBatch++;\n      this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n      this.cyclicOperation();\n    }).catch<void>((): void => {\n      this.onError();\n    })\n    }\n\n  private confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  private confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet delete confirm');\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n\n    if (onOperationStart != null) onOperationStart();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG, [$r('app.string.action_delete'), this.count]);\n    this.processOperation();\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet delete cancel');\n  }\n}\n", "llm_cg": {"AlbumSetDeleteMenuOperation.doAction()": ["ItemDataSource.getSelectedCount()", "ItemDataSource.getSelectedItems()", "AlbumSetDeleteMenuOperation.getDialogTitle()", "MenuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [dialogTitle, deleteResource, this.confirmCallback, this.cancelCallback])"], "AlbumSetDeleteMenuOperation.getDialogTitle()": ["AlbumDataItem.getVideoCount()"], "AlbumSetDeleteMenuOperation.requestOneBatchOperation()": ["AlbumDataItem.onDelete()", "MenuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch])", "AlbumSetDeleteMenuOperation.cyclicOperation()", "AlbumSetDeleteMenuOperation.onError()"], "AlbumSetDeleteMenuOperation.confirmCallbackBindImpl()": ["MenuContext.onOperationStart()", "MenuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG, [$r('app.string.action_delete'), this.count])", "AlbumSetDeleteMenuOperation.processOperation()"]}, "static_cg": {"@test/22.ts: AlbumSetDeleteMenuOperation.doAction()": ["@test/22.ts: AlbumSetDeleteMenuOperation.getDialogTitle()", "@test/22.ts: AlbumSetDeleteMenuOperation.%AM2$doAction([deleteResource], Resource)"], "@test/22.ts: AlbumSetDeleteMenuOperation.requestOneBatchOperation()": ["@test/22.ts: AlbumSetDeleteMenuOperation.%AM4$requestOneBatchOperation()", "@test/22.ts: AlbumSetDeleteMenuOperation.%AM3$requestOneBatchOperation()"], "@test/22.ts: AlbumSetDeleteMenuOperation.confirmCallback()": ["@test/22.ts: AlbumSetDeleteMenuOperation.confirmCallbackBindImpl()"], "@test/22.ts: AlbumSetDeleteMenuOperation.cancelCallback()": ["@test/22.ts: AlbumSetDeleteMenuOperation.cancelCallbackBindImpl()"], "@test/22.ts: AlbumSetDeleteMenuOperation.%AM0$doAction()": ["@test/22.ts: AlbumSetDeleteMenuOperation.confirmCallbackBindImpl()"], "@test/22.ts: AlbumSetDeleteMenuOperation.%AM1$doAction()": ["@test/22.ts: AlbumSetDeleteMenuOperation.cancelCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext'\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\n\nconst TAG = 'BatchRecoverMenuOperation';\n\nexport class BatchRecoverMenuOperation extends ProcessMenuOperation {\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'delete doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_recover'), this.count]);\n\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }\n\n  // Delete a batch of data\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as TrashUserFileDataItem;\n    item.onRecover().then<void, void>((): void => {\n      this.currentBatch++;\n      this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n      this.cyclicOperation();\n    })\n  }\n}\n", "llm_cg": {"BatchRecoverMenuOperation.doAction()": ["Log.info(unknown, unknown)", "Log.warn(unknown, unknown)", "ItemDataSource.getSelectedCount()", "MenuContext.onOperationStart()", "MenuContext.broadCast.emit(unknown, unknown)", "ItemDataSource.getSelectedItems()", "BatchRecoverMenuOperation.processOperation()"], "BatchRecoverMenuOperation.requestOneBatchOperation()": ["TrashUserFileDataItem.onRecover()", "MenuContext.broadCast.emit(unknown, unknown)", "BatchRecoverMenuOperation.cyclicOperation()"]}, "static_cg": {"@test/23.ts: BatchRecoverMenuOperation.requestOneBatchOperation()": ["@test/23.ts: BatchRecoverMenuOperation.%AM0$requestOneBatchOperation()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { UserFileDataItem } from '../base/UserFileDataItem'\nimport { Broadcast } from '../common/Broadcast'\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nexport class MenuContext {\n  items: UserFileDataItem[] = [];\n  dataSource: ItemDataSource;\n\n  albumInfo: SimpleAlbumDataItem;\n\n  albumObject: photoAccessHelper.Album;\n\n  broadCast: Broadcast;\n  onOperationStart: Function;\n  onOperationCancel: Function;\n  onOperationEnd: Function;\n\n  jumpSourceToMain: number;\n  deviceId: string;\n\n  albumId: string;\n  deletePageFromType: number; // 0. photoBrowser  1. photoGridPage\n\n  withDeletePageFromType(deletePageFromType: number): MenuContext {\n    this.deletePageFromType = deletePageFromType;\n    return this;\n  }\n\n  withItems(items: UserFileDataItem[]): MenuContext {\n    this.items = items;\n    return this;\n  }\n\n  withAlbumId(albumId: string): MenuContext {\n    this.albumId = albumId;\n    return this;\n  }\n\n  withAlbumObject(albumObject: photoAccessHelper.Album): MenuContext {\n    this.albumObject = albumObject;\n    return this;\n  }\n\n  withDataSource(dataSource): MenuContext {\n    this.dataSource = dataSource;\n    return this;\n  }\n\n  withOperationStartCallback(onOperationStart: Function): MenuContext {\n    this.onOperationStart = onOperationStart;\n    return this;\n  }\n\n  withOperationEndCallback(onOperationEnd: Function): MenuContext {\n    this.onOperationEnd = onOperationEnd;\n    return this;\n  }\n\n  withOperationCancelCallback(onOperationCancel: Function): MenuContext {\n    this.onOperationCancel = onOperationCancel;\n    return this;\n  }\n\n  withBroadCast(param: Broadcast): MenuContext {\n    this.broadCast = param;\n    return this;\n  }\n\n  withJumpSourceToMain(jumpSourceToMain: number): MenuContext {\n    this.jumpSourceToMain = jumpSourceToMain;\n    return this;\n  }\n\n  withRemoteDevice(deviceId): MenuContext {\n    this.deviceId = deviceId;\n    return this;\n  }\n\n  withAlbumInfo(albumInfo: SimpleAlbumDataItem): MenuContext {\n    this.albumInfo = albumInfo;\n    return this;\n  }\n}", "llm_cg": {"MenuContext.withDeletePageFromType(deletePageFromType: number)": [], "MenuContext.withItems(items: UserFileDataItem[])": [], "MenuContext.withAlbumId(albumId: string)": [], "MenuContext.withAlbumObject(albumObject: photoAccessHelper.Album)": [], "MenuContext.withDataSource(dataSource)": [], "MenuContext.withOperationStartCallback(onOperationStart: Function)": [], "MenuContext.withOperationEndCallback(onOperationEnd: Function)": [], "MenuContext.withOperationCancelCallback(onOperationCancel: Function)": [], "MenuContext.withBroadCast(param: Broadcast)": [], "MenuContext.withJumpSourceToMain(jumpSourceToMain: number)": [], "MenuContext.withRemoteDevice(deviceId)": [], "MenuContext.withAlbumInfo(albumInfo: SimpleAlbumDataItem)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext';\nimport { BatchDeleteMenuOperation } from './BatchDeleteMenuOperation';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\n\nconst TAG = 'ClearRecycleMenuOperation';\n\nexport class ClearRecycleMenuOperation extends BatchDeleteMenuOperation {\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'delete doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      //@ts-ignore\n      this.count = dataSource.getItems().length;\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [$r('app.string.recycleAlbum_clear_message'), $r('app.string.dialog_clear'), this.confirmCallback, this.cancelCallback]);\n  }\n\n  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Clear Recycle confirm');\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onDeleteStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_delete'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      //@ts-ignore\n      this.items = dataSource.getItems();\n    }\n    this.processOperation();\n  }\n}\n", "llm_cg": {"ClearRecycleMenuOperation.doAction()": ["Log.info(string, string)", "Log.warn(string, string)", "ClearRecycleMenuOperation.confirmCallbackBindImpl()", "ClearRecycleMenuOperation.cancelCallbackBindImpl()", "MenuContext.broadCast.emit(string, Array)"], "ClearRecycleMenuOperation.confirmCallback()": ["ClearRecycleMenuOperation.confirmCallbackBindImpl()"], "ClearRecycleMenuOperation.confirmCallbackBindImpl()": ["Log.info(string, string)", "MenuContext.onOperationStart()", "MenuContext.broadCast.emit(string, Array)", "ItemDataSource.getItems()", "ClearRecycleMenuOperation.processOperation()"]}, "static_cg": {"@test/25.ts: ClearRecycleMenuOperation.confirmCallback()": ["@test/25.ts: ClearRecycleMenuOperation.confirmCallbackBindImpl()"], "@test/25.ts: ClearRecycleMenuOperation.%AM0$doAction()": ["@test/25.ts: ClearRecycleMenuOperation.confirmCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { screenManager } from '../common/ScreenManager';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { RouterConstants } from '../constants/RouterConstants';\n\nconst TAG = 'GotoPhotosMenuOperation';\n\nexport class GotoPhotosMenuOperation implements MenuOperation {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let jumpSourceToMain = this.menuContext.jumpSourceToMain;\n    Log.info(TAG, 'router to pages/index, jumpSource: ' + jumpSourceToMain);\n    let leftPos = screenManager.isSidebar();\n    let pageFrom = RouterConstants.ENTRY_FROM.NORMAL;\n    if (jumpSourceToMain === JumpSourceToMain.CAMERA) {\n      pageFrom = RouterConstants.ENTRY_FROM_CAMERA;\n    }\n    let params: Object = {\n      jumpSource: jumpSourceToMain,\n      pageFrom: pageFrom\n    };\n    let routerOptions: RouterOptions = {\n      uri: 'pages/index',\n      params: params\n    };\n    router.replace(routerOptions);\n  }\n}\n", "llm_cg": {"GotoPhotosMenuOperation.doAction()": ["Log.warn(TAG, string)", "Log.info(TAG, string)", "screenManager.isSidebar()", "router.replace(RouterOptions)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\n\n\nconst TAG = 'AlbumSetRenameMenuOperation';\n\nexport class AlbumSetRenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n  private item: AlbumDataItem;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    let count: number;\n    let items: Object[];\n    if (dataSource == null) {\n      count = this.menuContext.items.length;\n      items = this.menuContext.items;\n    } else {\n      count = dataSource.getSelectedCount();\n      items = dataSource.getSelectedItems();\n    }\n    if (count !== 1) {\n      Log.warn(TAG, 'count is invalid');\n      return;\n    }\n\n    this.item = items[0] as AlbumDataItem;\n\n    this.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    Log.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [this.item.displayName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  private async confirmCallback(newName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(newName);\n  }\n\n  private async confirmCallbackBindImpl(newName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.rename(newName);\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private async rename(name): Promise<void> {\n    try {\n      let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);\n      if (name != undefined && name != null) {\n        let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n        if (isExit) {\n          getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n          })\n          Log.warn(TAG, 'album is miss');\n          this.onError();\n          return;\n        }\n      }\n      Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\n      let albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);\n      albums.albumName = name;\n      await albums.commitModify();\n      this.onCompleted();\n    } catch (error) {\n      Log.error(TAG, 'AlbumSet rename failed: ' + error);\n      this.onError();\n    }\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet rename cancel');\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n}\n", "llm_cg": {"AlbumSetRenameMenuOperation.doAction()": ["Log.warn(string, string)", "ItemDataSource.getSelectedCount()", "ItemDataSource.getSelectedItems()", "Log.warn(string, string)", "Log.info(string, string)", "MenuContext.broadCast.emit(string, Array)"], "AlbumSetRenameMenuOperation.confirmCallback(string)": ["AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)"], "AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)": ["Log.info(string, string)", "MenuContext.onOperationStart()", "AlbumSetRenameMenuOperation.rename(string)"], "AlbumSetRenameMenuOperation.checkAlbumExit(SimpleAlbumDataItem)": ["userFileModel.getUserAlbumCountByName(string)"], "AlbumSetRenameMenuOperation.rename(string)": ["AlbumSetRenameMenuOperation.checkAlbumExit(SimpleAlbumDataItem)", "getResourceString(string)", "showToast(string)", "Log.warn(string, string)", "AlbumSetRenameMenuOperation.onError()", "Log.info(string, string)", "userFileModel.getUserAlbumByName(string)", "photoAccessHelper.Album.commitModify()", "AlbumSetRenameMenuOperation.onCompleted()", "Log.error(string, string)", "AlbumSetRenameMenuOperation.onError()"], "AlbumSetRenameMenuOperation.cancelCallback()": ["AlbumSetRenameMenuOperation.cancelCallbackBindImpl()"], "AlbumSetRenameMenuOperation.cancelCallbackBindImpl()": ["Log.info(string, string)"], "AlbumSetRenameMenuOperation.onCompleted()": ["Log.info(string, string)", "MenuContext.onOperationEnd()"], "AlbumSetRenameMenuOperation.onError()": ["Log.error(string, string)", "MenuContext.onOperationEnd()"]}, "static_cg": {"@test/27.ts: AlbumSetRenameMenuOperation.confirmCallback(string)": ["@test/27.ts: AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)"], "@test/27.ts: AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)": ["@test/27.ts: AlbumSetRenameMenuOperation.rename(unknown)"], "@test/27.ts: AlbumSetRenameMenuOperation.rename(unknown)": ["@test/27.ts: AlbumSetRenameMenuOperation.checkAlbumExit(SimpleAlbumDataItem)", "@test/27.ts: AlbumSetRenameMenuOperation.%AM2$rename(string)", "@test/27.ts: AlbumSetRenameMenuOperation.onError()", "@test/27.ts: AlbumSetRenameMenuOperation.onCompleted()"], "@test/27.ts: AlbumSetRenameMenuOperation.cancelCallback()": ["@test/27.ts: AlbumSetRenameMenuOperation.cancelCallbackBindImpl()"], "@test/27.ts: AlbumSetRenameMenuOperation.%AM0$doAction(string)": ["@test/27.ts: AlbumSetRenameMenuOperation.confirmCallbackBindImpl(string)"], "@test/27.ts: AlbumSetRenameMenuOperation.%AM1$doAction()": ["@test/27.ts: AlbumSetRenameMenuOperation.cancelCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\n\nconst TAG = 'BatchDeleteMenuOperation';\n\nexport class BatchDeleteMenuOperation extends ProcessMenuOperation {\n\n  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }\n\n  doAction(): void {\n    Log.info(TAG, 'delete doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getDeleteMessageResource(dataSource);\n    let deleteResource: Resource = this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.dialog_recycle') : $r('app.string.dialog_delete');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, deleteResource, this.confirmCallback, this.cancelCallback]);\n  }\n\n  getResourceFromBrowser(): Resource {\n    return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');\n  }\n\n  getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_all_files_tips') : $r('app.string.delete_all_files_tips');\n    } else if (this.count === 1) {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');\n    } else {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_files_tips', this.count) : $r('app.string.delete_files_tips', this.count);\n    }\n  }\n\n  getDeleteMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    if (this.menuContext.deletePageFromType === BroadcastConstants.DELETE_FROM_BROWSER) {\n      resource = this.getResourceFromBrowser();\n    } else {\n      resource = this.getResourceFromGrid(dataSource);\n    }\n    return resource;\n  }\n\n  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }\n\n  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch delete confirm');\n    AppStorage.SetOrCreate<number>('isDelete', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onDeleteStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_delete'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }\n\n  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      item.onDelete().then<void, void>((): void => {\n        this.currentBatch++;\n        this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n        this.cyclicOperation();\n      })\n    }\n  }\n\n  cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch delete cancel');\n  }\n}\n", "llm_cg": {"BatchDeleteMenuOperation.doAction()": ["Log.info(unknown, unknown)", "Log.warn(unknown, unknown)", "ItemDataSource.getSelectedCount()", "BatchDeleteMenuOperation.getDeleteMessageResource(ItemDataSource)", "MenuContext.broadCast.emit(unknown, unknown)"], "BatchDeleteMenuOperation.getResourceFromBrowser()": [], "BatchDeleteMenuOperation.getResourceFromGrid(ItemDataSource)": ["ItemDataSource.isSelect()"], "BatchDeleteMenuOperation.getDeleteMessageResource(ItemDataSource)": ["BatchDeleteMenuOperation.getResourceFromBrowser()", "BatchDeleteMenuOperation.getResourceFromGrid(ItemDataSource)"], "BatchDeleteMenuOperation.confirmCallback()": ["BatchDeleteMenuOperation.confirmCallbackBindImpl()"], "BatchDeleteMenuOperation.confirmCallbackBindImpl()": ["Log.info(unknown, unknown)", "AppStorage.SetOrCreate(unknown, unknown)", "MenuContext.onOperationStart()", "MenuContext.broadCast.emit(unknown, unknown)", "ItemDataSource.getSelectedItems()", "BatchDeleteMenuOperation.processOperation()"], "BatchDeleteMenuOperation.requestOneBatchOperation()": ["UserFileDataItem.onDelete()", "MenuContext.broadCast.emit(unknown, unknown)", "BatchDeleteMenuOperation.cyclicOperation()"], "BatchDeleteMenuOperation.cancelCallback()": ["BatchDeleteMenuOperation.cancelCallbackBindImpl()"], "BatchDeleteMenuOperation.cancelCallbackBindImpl()": ["Log.info(unknown, unknown)"]}, "static_cg": {"@test/28.ts: BatchDeleteMenuOperation.doAction()": ["@test/28.ts: BatchDeleteMenuOperation.getDeleteMessageResource(ItemDataSource)"], "@test/28.ts: BatchDeleteMenuOperation.getDeleteMessageResource(ItemDataSource)": ["@test/28.ts: BatchDeleteMenuOperation.getResourceFromBrowser()", "@test/28.ts: BatchDeleteMenuOperation.getResourceFromGrid(ItemDataSource)"], "@test/28.ts: BatchDeleteMenuOperation.confirmCallback()": ["@test/28.ts: BatchDeleteMenuOperation.confirmCallbackBindImpl()"], "@test/28.ts: BatchDeleteMenuOperation.requestOneBatchOperation()": ["@test/28.ts: BatchDeleteMenuOperation.%AM2$requestOneBatchOperation()"], "@test/28.ts: BatchDeleteMenuOperation.cancelCallback()": ["@test/28.ts: BatchDeleteMenuOperation.cancelCallbackBindImpl()"], "@test/28.ts: BatchDeleteMenuOperation.%AM0$doAction()": ["@test/28.ts: BatchDeleteMenuOperation.confirmCallbackBindImpl()"], "@test/28.ts: BatchDeleteMenuOperation.%AM1$doAction()": ["@test/28.ts: BatchDeleteMenuOperation.cancelCallbackBindImpl()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { AsyncCallback } from './AsyncCallback';\nimport { Log } from '../utils/Log';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { userFileModel } from '../base/UserFileModel';\n\nexport enum FindSameOperation {\n  NONE,\n  REPLACE,\n  SKIP\n}\n\nexport interface Assets {\n  sourceAsset: photoAccessHelper.PhotoAsset,\n  targetAsset: photoAccessHelper.PhotoAsset\n}\n\nconst TAG = 'ProcessMenuOperation';\n\nexport class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {\n  // Number of data operated in a batch\n  readonly BATCH_SIZE: number = 1;\n\n  // Maximum progress\n  readonly MAX_PROGRESS: number = 100;\n  items: Object[] = [];\n  menuContext: MenuContext;\n  uris: string[];\n  count: number;\n  onOperationEnd: Function;\n\n  // Total batches operated\n  totalBatches: number;\n\n  // Currently operated batch\n  currentBatch: number = 0;\n  successBatch: number = 0;\n  isCancelled: boolean = false;\n  startTime: number;\n  isPause: boolean = false;\n  isError: boolean = false;\n  findSameOperation: number = FindSameOperation.NONE;\n  requestTime: number;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n    this.requestTime = Date.now();\n  }\n\n  doAction(): void {\n  }\n\n  // Asynchronous callback for getSelection\n  callback(uris: string[]): void {\n    this.callbackBindImpl(uris);\n  }\n\n  protected callbackBindImpl(uris: string[]): void {\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'onCompleted ' + this.isPause);\n    this.successBatch++;\n    if (!this.isPause) {\n      this.cyclicOperation();\n    }\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');\n    this.isError = true;\n    this.cyclicOperation();\n  }\n\n  // Start processing operation\n  processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    // Batch deletion\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');\n    if (this.isCancelled) {\n      this.isCancelled = false;\n    }\n    this.startTime = Date.now();\n\n    this.requestOneBatchOperation();\n  }\n\n  // Batch circular deletion\n  cyclicOperation(): void {\n    Log.info(TAG, 'cyclicOperation');\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n\n    if (this.isCancelled) {\n      this.onProcessDone();\n    }\n\n    if (this.currentBatch >= this.totalBatches || this.isError) {\n      this.onProcessDone();\n    } else {\n      this.requestOneBatchOperation();\n    }\n  }\n\n  // Operate a batch of data\n  requestOneBatchOperation(): void {\n  }\n\n  onProcessDone(): void {\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\n    this.findSameOperation = FindSameOperation.NONE;\n    if (this.startTime != null) {\n      let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n      let costTime = Date.now() - this.startTime;\n      Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n      ' ms, average ' + (costTime / operateCount) + ' ms/item.');\n    }\n    this.isCancelled = false;\n    if (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);\n  }\n\n  // Operate cancel callback\n  onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();\n  }\n\n  protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();\n  }\n\n  // Operate cancel callback\n  onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');\n    this.isPause = true;\n  }\n\n  // Calculate the operation progress according to the batch\n  getExpectProgress(): number {\n    Log.info(TAG, 'getExpectProgress');\n    let progress = Math.min(\n      Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\n    return progress;\n  }\n\n  setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);\n  }\n\n  protected setFindSameOperationBindImpl(newOperation: number): void {\n    Log.info(TAG, 'setFindSameOperation ' + newOperation);\n    this.findSameOperation = newOperation;\n  }\n}\n", "llm_cg": {"ProcessMenuOperation.callback(string[])": ["ProcessMenuOperation.%AM0$callbackBindImpl(string[])"], "ProcessMenuOperation.onCompleted()": ["Log.info(string, string)", "ProcessMenuOperation.cyclicOperation()"], "ProcessMenuOperation.onError()": ["Log.error(string, string)", "ProcessMenuOperation.cyclicOperation()"], "ProcessMenuOperation.processOperation()": ["Log.info(string, string)", "Log.info(string, string)", "Log.info(string, string)", "ProcessMenuOperation.requestOneBatchOperation()"], "ProcessMenuOperation.cyclicOperation()": ["Log.info(string, string)", "MenuContext.broadCast.emit(string, [number, number])", "ProcessMenuOperation.onProcessDone()", "ProcessMenuOperation.requestOneBatchOperation()"], "ProcessMenuOperation.onProcessDone()": ["MenuContext.broadCast.emit(string, [number])", "Log.debug(string, string)"], "ProcessMenuOperation.onOperateCancelled()": ["ProcessMenuOperation.%AM1$onOperateCancelledBindImpl()"], "ProcessMenuOperation.%AM1$onOperateCancelledBindImpl()": ["Log.info(string, string)", "ProcessMenuOperation.onProcessDone()"], "ProcessMenuOperation.onOperatePause()": ["Log.info(string, string)"], "ProcessMenuOperation.getExpectProgress()": ["Log.info(string, string)"], "ProcessMenuOperation.setFindSameOperation(number)": ["ProcessMenuOperation.%AM2$setFindSameOperationBindImpl(number)"], "ProcessMenuOperation.%AM2$setFindSameOperationBindImpl(number)": ["Log.info(string, string)"]}, "static_cg": {"@test/29.ts: ProcessMenuOperation.callback(string[])": ["@test/29.ts: ProcessMenuOperation.callbackBindImpl(string[])"], "@test/29.ts: ProcessMenuOperation.onCompleted()": ["@test/29.ts: ProcessMenuOperation.cyclicOperation()"], "@test/29.ts: ProcessMenuOperation.onError()": ["@test/29.ts: ProcessMenuOperation.cyclicOperation()"], "@test/29.ts: ProcessMenuOperation.processOperation()": ["@test/29.ts: ProcessMenuOperation.requestOneBatchOperation()"], "@test/29.ts: ProcessMenuOperation.cyclicOperation()": ["@test/29.ts: ProcessMenuOperation.getExpectProgress()", "@test/29.ts: ProcessMenuOperation.onProcessDone()", "@test/29.ts: ProcessMenuOperation.requestOneBatchOperation()"], "@test/29.ts: ProcessMenuOperation.onOperateCancelled()": ["@test/29.ts: ProcessMenuOperation.onOperateCancelledBindImpl()"], "@test/29.ts: ProcessMenuOperation.onOperateCancelledBindImpl()": ["@test/29.ts: ProcessMenuOperation.onProcessDone()"], "@test/29.ts: ProcessMenuOperation.setFindSameOperation(number)": ["@test/29.ts: ProcessMenuOperation.setFindSameOperationBindImpl(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface MenuOperationCallback {\n  onCompleted(): void;\n\n  onError(): void;\n}", "llm_cg": {"MenuOperationCallback.onCompleted()": [], "MenuOperationCallback.onError()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { getAlbumDisplayName } from '../base/UserFileDataHelper';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataImpl';\n\nexport class AlbumDataImpl {\n  private blackList: string[] = [];\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private deviceId: string = '';\n\n  setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.deviceId = deviceId;\n  }\n\n  async reloadAlbumItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumItemData');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getAlbumItem(id: string, albumDataItems: AlbumDataItem[]): Promise<void> {\n    Log.info(TAG, 'getAlbumItem: ' + id);\n    if (this.blackList.indexOf(id) >= 0) {\n      Log.debug(TAG, 'no need as in black list');\n      return;\n    }\n    if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {\n      Log.info(TAG, 'no need');\n      return;\n    }\n    let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;\n    let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n    switch (id) {\n      case MediaConstants.ALBUM_ID_FAVOR:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;\n        break;\n      case MediaConstants.ALBUM_ID_CAMERA:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;\n        break;\n      case MediaConstants.ALBUM_ID_RECYCLE:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;\n        break;\n      case MediaConstants.ALBUM_ID_SNAPSHOT:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;\n        break;\n      case MediaConstants.ALBUM_ID_VIDEO:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;\n        break;\n      case MediaConstants.ALBUM_ID_ALL:\n        await this.getAllPhotoAlbum(albumDataItems);\n        return;\n      case MediaConstants.ALBUM_ID_USER:\n        albumType = MediaConstants.ALBUM_TYPE_USER;\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n        break;\n      case MediaConstants.ALBUM_ID_MOVING_PHOTO:\n        await this.getMovingPhotoAbstractAlbum(albumDataItems);\n        return;\n      default:\n        break;\n    }\n    await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);\n  }\n\n  private async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAlbumItemByUserFileMgr');\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);\n        Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);\n        Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);\n        Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);\n        if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {\n          Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);\n          continue;\n        }\n        Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);\n        Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);\n        let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        let fileAsset:photoAccessHelper.PhotoAsset = null;\n        let count = 0;\n        try {\n          let predicates = new dataSharePredicates.DataSharePredicates();\n          let fetchOptions = {\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          };\n          photoFetchResult = await albumAsset.getAssets(fetchOptions);\n          count = photoFetchResult.getCount();\n          Log.info(TAG, 'photoFetchResult count: ' + count);\n          let displayName = 'unknown';\n          if (id === MediaConstants.ALBUM_ID_USER) {\n            displayName = albumAsset.albumName;\n          } else {\n            displayName = await getAlbumDisplayName(id);\n          }\n          let albumType = albumAsset.albumType;\n          let albumSubType = albumAsset.albumSubtype;\n          let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);\n          albumItem.uri = albumAsset.albumUri;\n          if (count > 0) {\n            fileAsset = await photoFetchResult.getFirstObject();\n            Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n            await albumItem.update(fileAsset);\n          }\n          albumDataItems.push(albumItem);\n        } catch (err) {\n          Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = await fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    let fileAsset = await userFileModel.getMediaItemByUri(uri);\n    if (album != null && fileAsset != null) {\n      try {\n        await album.removeAssets([fileAsset]);\n        return true;\n      } catch (err) {\n        Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);\n      }\n    }\n    return false;\n  }\n\n  async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getAllPhotoAlbum count: ' + count);\n      let displayName = '';\n      let id = MediaConstants.ALBUM_ID_ALL;\n      displayName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);\n      let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;\n      let albumName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,\n        MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }\n\n  async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumListItemData start');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getCommonListAlbumItem(albumDataItems);\n    return albumDataItems;\n  }\n\n  private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    let fetchOptions = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);\n    await this.getAlbumDataItem(albumDataItems, albums);\n  }\n\n  private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {\n    for (let i = 0;i < albums.length; i++) {\n      let album: photoAccessHelper.Album = albums[i];\n      if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {\n        continue;\n      }\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      let fetchFileResult = await album.getAssets(fetchOptions);\n      try {\n        let count = fetchFileResult.getCount();\n        if (count === 0) {\n          continue;\n        }\n        let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\n        item.uri = album.albumUri;\n        await item.update(await fetchFileResult.getFirstObject());\n        albumDataItems.push(item);\n      } catch (err) {\n        Log.error(TAG, 'on err: ' + JSON.stringify(err));\n      } finally {\n        fetchFileResult.close();\n      }\n    }\n  }\n}\n", "llm_cg": {"AlbumDataImpl.reloadAlbumItemData()": ["AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])"], "AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])": ["AlbumDataImpl.getAlbumItemByUserFileMgr(string, photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype, AlbumDataItem[])", "AlbumDataImpl.getAllPhotoAlbum(AlbumDataItem[])", "AlbumDataImpl.getMovingPhotoAbstractAlbum(AlbumDataItem[])"], "AlbumDataImpl.getAlbumItemByUserFileMgr(string, photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype, AlbumDataItem[])": ["userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype)", "fetchResult.getCount()", "fetchResult.getObjectByPosition(number)", "albumAsset.getAssets(dataSharePredicates.DataSharePredicates)", "photoFetchResult.getCount()", "getAlbumDisplayName(string)", "AlbumDataItem.update(photoAccessHelper.PhotoAsset)", "photoFetchResult.getFirstObject()", "photoFetchResult.close()"], "AlbumDataImpl.getUserAlbumItemByUri(string)": ["userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype, dataSharePredicates.DataSharePredicates)", "fetchResult.getCount()", "fetchResult.getFirstObject()", "fetchResult.close()"], "AlbumDataImpl.removeFileFromAlbum(string, string)": ["AlbumDataImpl.getUserAlbumItemByUri(string)", "userFileModel.getMediaItemByUri(string)", "album.removeAssets(photoAccessHelper.PhotoAsset[])"], "AlbumDataImpl.getAllPhotoAlbum(AlbumDataItem[])": ["userFileModel.getUserFileMgr().getAssets(dataSharePredicates.DataSharePredicates)", "photoFetchResult.getCount()", "getAlbumDisplayName(string)", "AlbumDataItem.update(photoAccessHelper.PhotoAsset)", "photoFetchResult.getFirstObject()", "photoFetchResult.close()"], "AlbumDataImpl.getMovingPhotoAbstractAlbum(AlbumDataItem[])": ["userFileModel.getUserFileMgr().getAssets(dataSharePredicates.DataSharePredicates)", "photoFetchResult.getCount()", "getAlbumDisplayName(string)", "AlbumDataItem.update(photoAccessHelper.PhotoAsset)", "photoFetchResult.getFirstObject()", "photoFetchResult.close()"], "AlbumDataImpl.reloadAlbumListItemData()": ["AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])", "AlbumDataImpl.getCommonListAlbumItem(AlbumDataItem[])"], "AlbumDataImpl.getCommonListAlbumItem(AlbumDataItem[])": ["userFileModel.getAlbums(dataSharePredicates.DataSharePredicates)", "AlbumDataImpl.getAlbumDataItem(AlbumDataItem[], photoAccessHelper.Album[])"], "AlbumDataImpl.getAlbumDataItem(AlbumDataItem[], photoAccessHelper.Album[])": ["album.getAssets(dataSharePredicates.DataSharePredicates)", "fetchFileResult.getCount()", "AlbumDataItem.update(photoAccessHelper.PhotoAsset)", "fetchFileResult.getFirstObject()", "fetchFileResult.close()"]}, "static_cg": {"@test/31.ts: AlbumDataImpl.reloadAlbumItemData()": ["@test/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])"], "@test/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])": ["@test/31.ts: AlbumDataImpl.getAllPhotoAlbum(AlbumDataItem[])", "@test/31.ts: AlbumDataImpl.getAlbumItemByUserFileMgr(string, photoAccessHelper.AlbumType, photoAccessHelper.AlbumSubtype, AlbumDataItem[])", "@test/31.ts: AlbumDataImpl.getMovingPhotoAbstractAlbum(AlbumDataItem[])"], "@test/31.ts: AlbumDataImpl.removeFileFromAlbum(string, string)": ["@test/31.ts: AlbumDataImpl.getUserAlbumItemByUri(string)"], "@test/31.ts: AlbumDataImpl.reloadAlbumListItemData()": ["@test/31.ts: AlbumDataImpl.getAlbumItem(string, AlbumDataItem[])", "@test/31.ts: AlbumDataImpl.getCommonListAlbumItem(AlbumDataItem[])"], "@test/31.ts: AlbumDataImpl.getCommonListAlbumItem(AlbumDataItem[])": ["@test/31.ts: AlbumDataImpl.getAlbumDataItem(AlbumDataItem[], photoAccessHelper.Album[])"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deviceInfo from '@ohos.deviceInfo';\nimport window from '@ohos.window';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { Constants } from '../constants/Constants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from './GlobalContext';\n\nexport enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}\n\nenum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}\n\nenum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\ninterface StatusNaviHeight {\n  status: number;\n  navi: number;\n}\n\ninterface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}\n\nconst TAG = 'ScreenManager';\n\nconst APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';\n\nconst SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';\nconst SCREEN_SIDEBAR: string = 'isSidebar';\n\nconst COLUMN_MARGIN: number = 12;\nconst COLUMN_GUTTER: number = 12;\n\ntype CallbackType = Function;\n\nclass ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n  }\n\n  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }\n\n  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }\n\n  // Unit：vp\n  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }\n\n  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }\n\n  // Unit：vp\n  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }\n\n  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }\n\n  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }\n\n  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }\n\n  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }\n\n  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }\n\n  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }\n\n  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }\n\n  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }\n\n  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }\n\n  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }\n\n  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }\n\n  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }\n\n  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }\n\n  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }\n\n  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }\n\n  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }\n\n  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }\n\n  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }\n\n  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }\n\n  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }\n\n  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }\n}\n\nexport let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);\n", "llm_cg": {"ScreenManager.initializationSize(window.Window)": ["ScreenManager.setMainWindow(window.Window)", "ScreenManager.checkWindowMode()", "ScreenManager.getWindowProperties(window.Window)"], "ScreenManager.on(string, Function)": [], "ScreenManager.off(string, Function)": [], "ScreenManager.emit(string, Object[])": [], "ScreenManager.isLeftBlankInitialized()": [], "ScreenManager.getWinWidth()": [], "ScreenManager.setWinWidth(number)": [], "ScreenManager.getWinHeight()": [], "ScreenManager.getStatusBarHeight()": [], "ScreenManager.getNaviBarHeight()": [], "ScreenManager.initWindowMode()": [], "ScreenManager.isSplitMode()": [], "ScreenManager.checkWindowMode()": ["ScreenManager.setFullScreen()", "ScreenManager.setSplitScreen()"], "ScreenManager.setMainWindow(window.Window)": ["ScreenManager.checkWindowMode()", "ScreenManager.onWinSizeChanged(window.Size)"], "ScreenManager.getWindowProperties(window.Window)": [], "ScreenManager.setFullScreen()": ["ScreenManager.hideStatusBar(window.Window)"], "ScreenManager.setSplitScreen()": [], "ScreenManager.hideStatusBar(window.Window)": ["ScreenManager.onLeftBlankChanged(window.AvoidArea)"], "ScreenManager.setNavigationBarColor(string, string)": [], "ScreenManager.setSystemUi(boolean)": ["ScreenManager.onLeftBlankChanged(window.AvoidArea)"], "ScreenManager.onLeftBlankChanged(window.AvoidArea)": [], "ScreenManager.onWinSizeChanged(window.Size)": [], "ScreenManager.onRotationAngleChanged(number)": [], "ScreenManager.isHorizontal()": [], "ScreenManager.isSidebar()": [], "ScreenManager.getColumnsWidth(number)": ["ScreenManager.getScreenColumns()"], "ScreenManager.getScreenColumns()": [], "ScreenManager.setKeepScreenOn()": [], "ScreenManager.setKeepScreenOff()": []}, "static_cg": {"@test/32.ts: %dflt.[static]%dflt()": ["@test/32.ts: ScreenManager.constructor()"], "@test/32.ts: ScreenManager.initializationSize(unknown)": ["@test/32.ts: ScreenManager.setMainWindow(window.Window)", "@test/32.ts: ScreenManager.checkWindowMode()", "@test/32.ts: ScreenManager.getWindowProperties(window.Window)"], "@test/32.ts: ScreenManager.on(unknown, unknown)": ["@test/32.ts: ScreenManager.on(unknown, unknown)"], "@test/32.ts: ScreenManager.off(unknown, unknown)": ["@test/32.ts: ScreenManager.off(unknown, unknown)"], "@test/32.ts: ScreenManager.checkWindowMode()": ["@test/32.ts: GetWindowMode.getWindowMode()", "@test/32.ts: ScreenManager.setFullScreen()", "@test/32.ts: ScreenManager.setSplitScreen()"], "@test/32.ts: ScreenManager.setMainWindow(window.Window)": ["@test/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)"], "@test/32.ts: ScreenManager.setFullScreen()": ["@test/32.ts: ScreenManager.hideStatusBar(window.Window)"], "@test/32.ts: ScreenManager.hideStatusBar(window.Window)": ["@test/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)"], "@test/32.ts: ScreenManager.setNavigationBarColor(string, string)": ["@test/32.ts: ScreenManager.%AM1$setNavigationBarColor()"], "@test/32.ts: ScreenManager.setSystemUi(boolean)": ["@test/32.ts: ScreenManager.%AM2$setSystemUi([isShowBar, topWindow])"], "@test/32.ts: ScreenManager.onWinSizeChanged(unknown)": ["@test/32.ts: ScreenManager.emit(unknown, Object[])"], "@test/32.ts: ScreenManager.getColumnsWidth(number)": ["@test/32.ts: ScreenManager.getScreenColumns()"], "@test/32.ts: ScreenManager.setKeepScreenOn()": ["@test/32.ts: ScreenManager.%AM3$setKeepScreenOn()"], "@test/32.ts: ScreenManager.setKeepScreenOff()": ["@test/32.ts: ScreenManager.%AM4$setKeepScreenOff()"], "@test/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)": ["@test/32.ts: ScreenManager.checkWindowMode()", "@test/32.ts: ScreenManager.onWinSizeChanged(unknown)"], "@test/32.ts: ScreenManager.%AM2$setSystemUi([isShowBar, topWindow])": ["@test/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from '../models/Action'\nimport { ActionBarMode, ActionBarColorMode, ActionBarSelectionMode } from '../models/ActionBarMode'\n\n// ActionBarProp\nexport class ActionBarProp {\n  public static NORMAL_BACKGROUND_COLOR: Resource = $r('app.color.default_background_color');\n  public static TRANSPARENT_BACKGROUND_COLOR: Resource = $r('app.color.transparent');\n  public static NORMAL_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_text');\n  public static NORMAL_SUBTITLE_TEXT_COLOR: Resource = $r('sys.color.ohos_id_color_titlebar_subtitle_text');\n  public static ICON_COLOR: Resource = $r('sys.color.ohos_id_color_primary');\n  public static TRANSPARENT_TEXT_COLOR: Resource = $r('app.color.title_text_color_on_transparent_bg');\n  public static TRANSPARENT_SUBTITLE_TEXT_COLOR: Resource = $r('app.color.subtitle_text_color_on_transparent_bg');\n  public static HEAD_TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline6');\n  public static HEAD_TITLE_ONE_LINE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline7');\n  public static TITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_headline8');\n  public static TITLE_FONT_WEIGHT = 500;\n  public static SUBTITLE_TEXT_SIZE: Resource = $r('sys.float.ohos_id_text_size_body2');\n  public static MEDIUM_FONT: Resource = $r('app.string.id_text_font_family_medium');\n  public static REGULAR_FONT: Resource = $r('app.string.id_text_font_family_regular');\n  public static SINGLE_UNSELECT_TITLE: Resource = $r('app.string.title_select_photos');\n  public static SINGLE_SELECT_ALBUM_TITLE: Resource = $r('app.string.title_select_album');\n  public static MULTI_UNSELECT_TITLE: Resource = $r('app.string.title_none_selected');\n  public static PHOTO_BROWSER_ACTIONBAR_ALPHA = 0.95;\n  private hasTabBar = false;\n  private leftAction = Action.NONE;\n  private isHeadTitle = false;\n  private title: Object = null;\n  private subTitle: Object = null;\n  private menuList: Action[] = [];\n  private backgroundColor: Resource = ActionBarProp.NORMAL_BACKGROUND_COLOR;\n  private alpha = 1;\n  private selectionMode: ActionBarSelectionMode = ActionBarSelectionMode.MULTI;\n  private colorMode: ActionBarColorMode = ActionBarColorMode.NORMAL;\n  private mode: ActionBarMode = ActionBarMode.STANDARD_MODE;\n  private maxSelectCount = 0;\n\n  constructor() {\n  }\n\n  public static getCountDetailSelectedTitle(count: number): Resource {\n    return $r('app.plural.count_details_selected', count, count);\n  }\n\n  /**\n   * External selection quantity display\n   * @param count The selected quantity, same as the current count above\n   * @param maxSelectCount Maximum number of options\n   */\n  public static getCountDetailExternalSelectedTitle(count: number, maxSelectCount: number): Resource {\n    return $r('app.string.count_details_external_selected', count, maxSelectCount);\n  }\n\n  public setHasTabBar(hasTabBar: boolean): ActionBarProp {\n    this.hasTabBar = hasTabBar;\n    return this;\n  }\n\n  public getHasTabBar(): boolean {\n    return this.hasTabBar;\n  }\n\n  public setLeftAction(leftAction: Action): ActionBarProp {\n    this.leftAction = leftAction;\n    return this;\n  }\n\n  public getLeftAction(): Action {\n    return this.leftAction;\n  }\n\n  public setIsHeadTitle(isHeadTitle: boolean): ActionBarProp {\n    this.isHeadTitle = isHeadTitle;\n    return this;\n  }\n\n  public getIsHeadTitle(): boolean {\n    return this.isHeadTitle;\n  }\n\n  public setTitle(title: Object): ActionBarProp {\n    this.title = title;\n    return this;\n  }\n\n  public getTitle(): Object {\n    return this.title;\n  }\n\n  public setSubTitle(subTitle: Object): ActionBarProp {\n    this.subTitle = subTitle;\n    return this;\n  }\n\n  public getSubTitle(): Object {\n    return this.subTitle;\n  }\n\n  public setMenuList(menuList: Action[]): ActionBarProp {\n    this.menuList = menuList;\n    return this;\n  }\n\n  public getMenuList(): Action[] {\n    return this.menuList;\n  }\n\n  public setBackgroundColor(backgroundColor: Resource): ActionBarProp {\n    this.backgroundColor = backgroundColor;\n    return this;\n  }\n\n  public getBackgroundColor(): Resource {\n    return this.colorMode === ActionBarColorMode.TRANSPARENT\n      ? ActionBarProp.TRANSPARENT_BACKGROUND_COLOR : this.backgroundColor;\n  }\n\n  public setAlpha(alpha: number): ActionBarProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  public setMode(mode: ActionBarMode): ActionBarProp {\n    this.mode = mode;\n    return this;\n  }\n\n  public getMode(): ActionBarMode {\n    return this.mode;\n  }\n\n  public setColorMode(colorMode: ActionBarColorMode): ActionBarProp {\n    this.colorMode = colorMode;\n    return this;\n  }\n\n  public getColorMode(): ActionBarColorMode {\n    return this.colorMode;\n  }\n\n  public setSelectionMode(selectionMode: ActionBarSelectionMode): ActionBarProp {\n    this.selectionMode = selectionMode;\n    return this;\n  }\n\n  public getSelectionMode(): ActionBarSelectionMode {\n    return this.selectionMode;\n  }\n\n  public setMaxSelectCount(maxSelectCount: number): ActionBarProp {\n    this.maxSelectCount = maxSelectCount;\n    return this;\n  }\n\n  public getMaxSelectCount(): number {\n    return this.maxSelectCount;\n  }\n}", "llm_cg": {"ActionBarProp.getCountDetailSelectedTitle(number)": [], "ActionBarProp.getCountDetailExternalSelectedTitle(number, number)": [], "ActionBarProp.setHasTabBar(boolean)": [], "ActionBarProp.getHasTabBar()": [], "ActionBarProp.setLeftAction(Action)": [], "ActionBarProp.getLeftAction()": [], "ActionBarProp.setIsHeadTitle(boolean)": [], "ActionBarProp.getIsHeadTitle()": [], "ActionBarProp.setTitle(Object)": [], "ActionBarProp.getTitle()": [], "ActionBarProp.setSubTitle(Object)": [], "ActionBarProp.getSubTitle()": [], "ActionBarProp.setMenuList(Action[])": [], "ActionBarProp.getMenuList()": [], "ActionBarProp.setBackgroundColor(Resource)": [], "ActionBarProp.getBackgroundColor()": [], "ActionBarProp.setAlpha(number)": [], "ActionBarProp.getAlpha()": [], "ActionBarProp.setMode(ActionBarMode)": [], "ActionBarProp.getMode()": [], "ActionBarProp.setColorMode(ActionBarColorMode)": [], "ActionBarProp.getColorMode()": [], "ActionBarProp.setSelectionMode(ActionBarSelectionMode)": [], "ActionBarProp.getSelectionMode()": [], "ActionBarProp.setMaxSelectCount(number)": [], "ActionBarProp.getMaxSelectCount()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype CallbackType = Function;\n\nexport class Broadcast {\n  private callBackArray: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n\n  constructor() {\n  }\n\n  public on(event: string, callback: CallbackType): void {\n    if (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {\n      this.callBackArray.set(event, []);\n    }\n    this.callBackArray.get(event).push(callback);\n  }\n\n  public off(event: string | null, callback: CallbackType | null): void {\n    if (event == null) {\n      this.callBackArray.clear();\n    }\n\n    const cbs: CallbackType[] = this.callBackArray.get(event);\n    if (!Boolean<Function[]>(cbs).valueOf()) {\n      return;\n    }\n    if (callback == null) {\n      this.callBackArray.set(event, null);\n    }\n    let cb;\n    let l = cbs.length;\n    for (let i = 0; i < l; i++) {\n      cb = cbs[i];\n      if (cb === callback || cb.fn === callback) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  public emit(event: string, args: Object[]): void {\n    let _self = this;\n    if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.callBackArray.get(event).length; i++) {\n      cbs.push(this.callBackArray.get(event)[i])\n    }\n\n    if (cbs != null) {\n      let l = cbs.length;\n      for (let i = 0; i < l; i++) {\n        try {\n          cbs[i].apply(_self, args);\n        } catch (e) {\n          new Error(e);\n        }\n      }\n    }\n  }\n\n  public release(): void {\n    this.callBackArray.forEach((array: Object[]): void => {\n      array.length = 0;\n    });\n    this.callBackArray.clear();\n  }\n}\n", "llm_cg": {"Broadcast.on(string, CallbackType)": ["Broadcast.%AM0$on(unknown, unknown)"], "Broadcast.off(string | null, CallbackType | null)": ["Broadcast.%AM1$off(unknown, unknown)"], "Broadcast.emit(string, Object[])": ["Broadcast.%AM2$emit(unknown, unknown)"], "Broadcast.release()": ["Broadcast.%AM3$release()"]}, "static_cg": {"@test/34.ts: Broadcast.release()": ["@test/34.ts: Broadcast.%AM0$release(Object[])"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport inputConsumer from '@ohos.multimodalInput.inputConsumer';\nimport { Log } from '../utils/Log';\n\n\nconst TAG = 'MultimodalInputManager';\n\nexport class MultimodalInputManager {\n\n  //win + N\n  leftKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  //win + I\n  rightKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n  escKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  async registerListener(callback): Promise<void> {\n    Log.debug(TAG, 'registerListener start');\n    inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    });\n    inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    });\n    inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    });\n    Log.debug(TAG, 'registerListener end');\n  }\n\n  async unregisterListener(): Promise<void> {\n    Log.debug(TAG, 'unregisterListener start');\n    inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    });\n    Log.debug(TAG, 'unregisterListener end');\n  }\n}\n\nexport let mMultimodalInputManager = new MultimodalInputManager();\n", "llm_cg": {"MultimodalInputManager.registerListener(callback)": ["inputConsumer.on(key, MultimodalInputManager.leftKeyOptions, Function)", "inputConsumer.on(key, MultimodalInputManager.rightKeyOptions, Function)", "inputConsumer.on(key, MultimodalInputManager.escKeyOptions, Function)"], "MultimodalInputManager.unregisterListener()": ["inputConsumer.off(key, MultimodalInputManager.leftKeyOptions, Function)", "inputConsumer.off(key, MultimodalInputManager.rightKeyOptions, Function)", "inputConsumer.off(key, MultimodalInputManager.escKeyOptions, Function)"]}, "static_cg": {"@test/35.ts: MultimodalInputManager.registerListener(unknown)": ["@test/35.ts: MultimodalInputManager.%AM0$registerListener([callback], inputConsumer.KeyOptions)", "@test/35.ts: MultimodalInputManager.%AM1$registerListener([callback], inputConsumer.KeyOptions)", "@test/35.ts: MultimodalInputManager.%AM2$registerListener([callback], inputConsumer.KeyOptions)"], "@test/35.ts: MultimodalInputManager.unregisterListener()": ["@test/35.ts: MultimodalInputManager.%AM3$unregisterListener(inputConsumer.KeyOptions)", "@test/35.ts: MultimodalInputManager.%AM4$unregisterListener(inputConsumer.KeyOptions)", "@test/35.ts: MultimodalInputManager.%AM5$unregisterListener(inputConsumer.KeyOptions)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class GlobalContext {\n  private constructor() {\n  }\n\n  private static instance: GlobalContext;\n  private _objects = new Map<string, Object>();\n\n  public static getContext(): GlobalContext {\n    if (!(new Boolean(GlobalContext.instance)).valueOf()) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string): Object {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n}", "llm_cg": {"GlobalContext.getContext()": ["GlobalContext.%AM0$constructor()"], "GlobalContext.getObject(value: string)": [], "GlobalContext.setObject(key: string, objectClass: Object)": []}, "static_cg": {"@test/36.ts: GlobalContext.[static]getContext()": ["@test/36.ts: GlobalContext.constructor()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\n\nconst TAG = 'ItemDataSource'\n\nexport class LazyItem<T> {\n  item: T;\n  onItemUpdate: Function;\n  index: number = -1;\n\n  constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }\n\n  update(item: T): void {\n    if (this.onItemUpdate != null && this.index !== -1) {\n      this.onItemUpdate(this.index, item);\n    }\n  }\n\n  getHashCode(): string {\n    // @ts-ignore\n    return this.index + '' + this.item.getHashCode();\n  }\n\n  get(): T {\n    return this.item;\n  }\n\n  set(item: T): void {\n    this.item = item;\n  }\n}\n\nexport abstract class ItemDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n\n  abstract totalCount(): number;\n\n  abstract getData(index: number): Object;\n\n  abstract isSelect(): boolean;\n\n  abstract getSelectedCount(): number;\n\n  abstract getSelectedItems(): Object[];\n\n  abstract getSelectedUris(): string[];\n\n  abstract dataRemove(): void;\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'registerDataChangeListener');\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener);\n      Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);\n    }\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1);\n      Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);\n    }\n  }\n\n  notifyDataChange(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    })\n  }\n\n  notifyDataReload(): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    })\n  }\n\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    })\n  }\n}\n", "llm_cg": {"LazyItem.update(T)": ["LazyItem.%AM0$onItemUpdate(number, T)"], "ItemDataSource.registerDataChangeListener(DataChangeListener)": ["Log.info(string, string)", "Log.info(string, string)"], "ItemDataSource.unregisterDataChangeListener(DataChangeListener)": ["Log.info(string, string)", "Log.info(string, string)"], "ItemDataSource.notifyDataChange(number)": ["DataChangeListener.onDataChange(number)"], "ItemDataSource.notifyDataReload()": ["DataChangeListener.onDataReloaded()"], "ItemDataSource.notifyDataDelete(number)": ["DataChangeListener.onDataDelete(number)"]}, "static_cg": {"@test/37.ts: ItemDataSource.notifyDataChange(number)": ["@test/37.ts: ItemDataSource.%AM0$notifyDataChange([index], DataChangeListener)"], "@test/37.ts: ItemDataSource.notifyDataReload()": ["@test/37.ts: ItemDataSource.%AM1$notifyDataReload(DataChangeListener)"], "@test/37.ts: ItemDataSource.notifyDataDelete(number)": ["@test/37.ts: ItemDataSource.%AM2$notifyDataDelete([index], DataChangeListener)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class SimpleAlbumDataItem {\n  readonly id: string;\n  readonly displayName: string;\n  readonly uri: string; //as uri\n  readonly deviceId: string;\n  readonly deviceName: string;\n  readonly albumType: number;\n  readonly albumSubType: number;\n\n  constructor(id: string, displayName: string, uri: string, deviceId: string, deviceName: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.uri = uri;\n    this.deviceId = deviceId;\n    this.deviceName = deviceName;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }\n}", "llm_cg": {"SimpleAlbumDataItem.constructor(id: string, displayName: string, uri: string, deviceId: string, deviceName: string, albumType: number, albumSubType: number)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { GroupDataImpl } from './GroupDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'GroupItemDataSource';\n\nexport class GroupItemDataSource extends ItemDataSource {\n  groupDataItem: UserFileDataItem[] = [];\n  private groupDataImpl: GroupDataImpl = new GroupDataImpl();\n\n  constructor() {\n    super();\n  }\n\n  setSelectType(selectType: number): void {\n    this.groupDataImpl.setSelectType(selectType);\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.groupDataImpl.setAlbumId(id);\n  }\n\n  setAlbumType(id: number): void {\n    Log.info(TAG, 'setAlbumType: ' + id);\n    this.groupDataImpl.setAlbumType(id);\n  }\n\n  setAlbumSubtype(id: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + id);\n    this.groupDataImpl.setAlbumSubtype(id);\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.groupDataImpl.setAlbumName(name);\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.groupDataImpl.setDeviceId(id);\n  }\n\n  totalCount(): number {\n    return this.groupDataItem.length;\n  }\n\n  getIndexByItem(item: UserFileDataItem): number {\n    let index = -1;\n    let length = this.groupDataItem.length;\n    for (let i = 0;i < length; i++) {\n      if (this.groupDataItem[i].uri === item.uri) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  getData(index: number): LazyItem<UserFileDataItem> {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): UserFileDataItem {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return this.groupDataItem[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.groupDataItem.length; i++) {\n      if (!this.groupDataItem[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    })\n    return count;\n  }\n\n  getItems(): UserFileDataItem[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      items.push(item);\n    })\n    return items;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    })\n    this.notifyDataReload();\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<boolean> {\n    this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);\n    return this.groupDataItem.length === 0;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.debug(TAG, 'onDataUpdate ' + index);\n    if (index !== -1) {\n      this.notifyDataChange(index);\n    }\n  }\n\n  dataReload(isGrid: boolean): void {\n    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.groupDataItem.length - 1;i >= 0; i--) {\n      if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {\n        this.groupDataItem.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  dataDelete(uri: string): void {\n    const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    })\n    if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {\n      this.groupDataItem.splice(mediaDataItemIndex, 1);\n      super.notifyDataDelete(mediaDataItemIndex);\n    }\n  }\n}\n", "llm_cg": {"GroupItemDataSource.setSelectType(selectType: number)": ["GroupDataImpl.setSelectType(selectType: number)"], "GroupItemDataSource.setAlbumId(id: string)": ["GroupDataImpl.setAlbumId(id: string)"], "GroupItemDataSource.setAlbumType(id: number)": ["GroupDataImpl.setAlbumType(id: number)"], "GroupItemDataSource.setAlbumSubtype(id: number)": ["GroupDataImpl.setAlbumSubtype(id: number)"], "GroupItemDataSource.setAlbumName(name: string)": ["GroupDataImpl.setAlbumName(name: string)"], "GroupItemDataSource.setDeviceId(id: string)": ["GroupDataImpl.setDeviceId(id: string)"], "GroupItemDataSource.getData(index: number)": ["GroupItemDataSource.onDataUpdateBindImpl(index: number)"], "GroupItemDataSource.reloadGroupItemData(isGrid: boolean)": ["GroupDataImpl.reloadGroupItemData(isGrid: boolean)"], "GroupItemDataSource.onDataUpdate(index: number)": ["GroupItemDataSource.onDataUpdateBindImpl(index: number)"], "GroupItemDataSource.dataReload(isGrid: boolean)": ["GroupItemDataSource.reloadGroupItemData(isGrid: boolean)", "GroupItemDataSource.notifyDataReload()"], "GroupItemDataSource.dataRemove()": ["GroupItemDataSource.notifyDataDelete(index: number)"], "GroupItemDataSource.dataDelete(uri: string)": ["GroupItemDataSource.notifyDataDelete(mediaDataItemIndex: number)"]}, "static_cg": {"@test/39.ts: GroupItemDataSource.getData(number)": ["@test/39.ts: GroupItemDataSource.%AM0$getData(number)"], "@test/39.ts: GroupItemDataSource.getSelectedCount()": ["@test/39.ts: GroupItemDataSource.%AM1$getSelectedCount([count], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.getItems()": ["@test/39.ts: GroupItemDataSource.%AM2$getItems([items], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.getSelectedItems()": ["@test/39.ts: GroupItemDataSource.%AM3$getSelectedItems([items], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.getSelectedUris()": ["@test/39.ts: GroupItemDataSource.%AM4$getSelectedUris([uris], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.setSelect(boolean)": ["@test/39.ts: GroupItemDataSource.%AM5$setSelect([isSelect], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.onDataUpdate(number)": ["@test/39.ts: GroupItemDataSource.onDataUpdateBindImpl(number)"], "@test/39.ts: GroupItemDataSource.dataReload(boolean)": ["@test/39.ts: GroupItemDataSource.reloadGroupItemData(boolean)", "@test/39.ts: GroupItemDataSource.%AM6$dataReload(boolean)"], "@test/39.ts: GroupItemDataSource.dataDelete(string)": ["@test/39.ts: GroupItemDataSource.%AM7$dataDelete([uri], UserFileDataItem)"], "@test/39.ts: GroupItemDataSource.%AM0$getData(number)": ["@test/39.ts: GroupItemDataSource.onDataUpdateBindImpl(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserFileObserverCallback } from '../base/UserFileObserverCallback';\nimport { UserFileDataChangeCallback } from '../base/UserFileDataChangeCallback';\n\nexport class CommonObserverCallback implements UserFileObserverCallback {\n  private source: UserFileDataChangeCallback;\n\n  constructor(source: UserFileDataChangeCallback) {\n    this.source = source;\n  }\n\n  onChange(mediaType: string): void {\n    this.source.onUserFileDataChange(mediaType);\n  }\n}", "llm_cg": {"CommonObserverCallback.onChange(mediaType: string)": ["UserFileDataChangeCallback.onUserFileDataChange(mediaType: string)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { Log } from '../utils/Log';\nimport { Constants } from '../constants/Constants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { screenManager } from './ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { FavorUserFileDataItem } from '../base/FavorUserFileDataItem';\nimport { userFileDataItemCache } from '../base/UserFileDataItemCache';\nimport { trashUserFileDataItemCache } from '../base/TrashUserFileDataItemCache';\nimport { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\n\nconst TAG = 'GroupDataImpl';\n\nexport class GroupDataImpl {\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private albumId: string = '';\n  private deviceId: string = '';\n  private albumType: number = -1;\n  private albumSubType: number = -1;\n  private albumName: string = '';\n\n  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }\n\n  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.albumId = id;\n  }\n\n  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.deviceId = id;\n  }\n\n  setAlbumType(albumType: number): void {\n    Log.info(TAG, 'setAlbumType: ' + albumType);\n    this.albumType = albumType;\n  }\n\n  setAlbumSubtype(albumSubType: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);\n    this.albumSubType = albumSubType;\n  }\n\n  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.albumName = name;\n  }\n\n  async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {\n    if (isGrid) {\n      return this.reloadGridGroupItemData();\n    } else {\n      return this.reloadBrowserGroupItemData();\n    }\n  }\n\n  async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadBrowserGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let favorMediaItem = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          favorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        favorMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(favorMediaItem);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let trashMediaItem = new TrashUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          trashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        trashMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(trashMediaItem);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);\n        }\n        mediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(mediaItem);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadGridGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          Log.info(TAG, 'hasKey');\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new TrashUserFileDataItem('', [], i);\n        if (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }\n\n  private async getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number): Promise<photoAccessHelper.PhotoAsset[]> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\n    let fetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    Log.info(TAG, 'albumName:' + albumName);\n    if (albumType === MediaConstants.ALBUM_TYPE_ALL) {\n      return await userFileModel.getAllMediaItems();\n    } else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {\n      return await userFileModel.getAllMovingPhotoItems();\n    }\n    let emptyPredicates = new dataSharePredicates.DataSharePredicates();\n    emptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let emptyFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    };\n    return await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);\n  }\n\n  private getCount(): number {\n    let contentWidth = screenManager.getWinWidth();\n    let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\n    let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\n    let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\n    let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;\n    return columns * rows;\n  }\n}\n", "llm_cg": {"GroupDataImpl.setAlbumId(id: string)": ["Log.info(TAG, 'setAlbumId: ' + id)"], "GroupDataImpl.setDeviceId(id: string)": ["Log.info(TAG, 'setDeviceId: ' + id)"], "GroupDataImpl.setAlbumType(albumType: number)": ["Log.info(TAG, 'setAlbumType: ' + albumType)"], "GroupDataImpl.setAlbumSubtype(albumSubType: number)": ["Log.info(TAG, 'setAlbumSubtype: ' + albumSubType)"], "GroupDataImpl.setAlbumName(name: string)": ["Log.info(TAG, 'setAlbumName: ' + name)"], "GroupDataImpl.reloadGroupItemData(isGrid: boolean)": ["GroupDataImpl.reloadGridGroupItemData()", "GroupDataImpl.reloadBrowserGroupItemData()"], "GroupDataImpl.reloadBrowserGroupItemData()": ["Log.info(TAG, 'reloadBrowserGroupItemData')", "GroupDataImpl.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType)", "FavorUserFileDataItem.update(mediaFileAssets[i])", "TrashUserFileDataItem.update(mediaFileAssets[i])", "UserFileDataItem.update(mediaFileAssets[i])", "Log.info(TAG, 'reload finish')"], "GroupDataImpl.reloadGridGroupItemData()": ["Log.info(TAG, 'reloadGridGroupItemData')", "GroupDataImpl.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType)", "FavorUserFileDataItem.update(mediaFileAssets[i])", "TrashUserFileDataItem.update(mediaFileAssets[i])", "UserFileDataItem.update(mediaFileAssets[i])", "Log.info(TAG, 'reload finish')"], "GroupDataImpl.getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number)": ["Log.info(TAG, 'albumName:' + albumName)", "userFileModel.getAllMediaItems()", "userFileModel.getAllMovingPhotoItems()", "userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption)"], "GroupDataImpl.getCount()": ["screenManager.getWinWidth()", "screenManager.getWinHeight()", "screenManager.getNaviBarHeight()"]}, "static_cg": {"@test/41.ts: GroupDataImpl.reloadGroupItemData(boolean)": ["@test/41.ts: GroupDataImpl.reloadGridGroupItemData()", "@test/41.ts: GroupDataImpl.reloadBrowserGroupItemData()"], "@test/41.ts: GroupDataImpl.reloadBrowserGroupItemData()": ["@test/41.ts: GroupDataImpl.getMediaItemFileAssets(string, number, number)"], "@test/41.ts: GroupDataImpl.reloadGridGroupItemData()": ["@test/41.ts: GroupDataImpl.getMediaItemFileAssets(string, number, number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataImpl } from './AlbumDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants'\n\nconst TAG = 'AlbumsDataSource'\n\nexport class AlbumsDataSource extends ItemDataSource {\n  private albumDataItems: AlbumDataItem[] = [];\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);\n  }\n\n  setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);\n  }\n\n  totalCount(): number {\n    return this.albumDataItems.length;\n  }\n\n  getData(index: number): LazyItem<AlbumDataItem> {\n    return new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }\n\n  getDataByIndex(index: number): AlbumDataItem {\n    if (index < 0 || index >= this.albumDataItems.length) {\n      Log.warn(TAG, index + '/' + this.albumDataItems.length);\n      return undefined;\n    }\n    this.albumDataItems[index].index = index;\n    return this.albumDataItems[index];\n  }\n\n  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (!this.albumDataItems[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }\n\n  resetLoadState(): void {\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].status === MediaConstants.LOADED) {\n        this.albumDataItems[i].status = MediaConstants.UNDEFINED;\n      }\n    }\n  }\n\n  getAlbumDataItemById(id: string): AlbumDataItem | null {\n    let albumDataItem: AlbumDataItem = null;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].id === id) {\n        albumDataItem = this.albumDataItems[i];\n      }\n    }\n    return albumDataItem;\n  }\n\n  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }\n\n  isDisableRename(): boolean {\n    let isDisableRename = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {\n        isDisableRename = true;\n        break;\n      }\n    }\n    return isDisableRename;\n  }\n\n  isDisableDelete(): boolean {\n    let isDisableDelete = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\n        isDisableDelete = true;\n        break;\n      }\n    }\n    return isDisableDelete;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    })\n  }\n\n  getSelectedCount(): number {\n    let count = 0;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  getSelectedItems(): Object[] {\n    let items: AlbumDataItem[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }\n\n  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }\n\n  private onDataUpdateBindImpl(index: number): void {\n    Log.info(TAG, 'onDataUpdate ' + index);\n    this.notifyDataChange(index);\n  }\n\n  dataReload(): void {\n    this.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }\n\n  dataRemove(): void {\n    for (let i = this.albumDataItems.length - 1;i >= 0; i--) {\n      if (this.albumDataItems[i].isDeleted()) {\n        this.albumDataItems.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }\n\n  async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    return this.albumDataItems.length === 0;\n  }\n\n  async reloadAlbumListItemData(): Promise<boolean> {\n    Log.info(TAG, 'reloadAlbumListItemData');\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    this.notifyDataReload();\n    return this.albumDataItems.length === 0;\n  }\n}\n", "llm_cg": {"AlbumsDataSource.setBlackList(blackList: string[])": ["AlbumDataImpl.setBlackList(blackList: string[])"], "AlbumsDataSource.setSelectType(selectType: number)": ["AlbumDataImpl.setSelectType(selectType: number)"], "AlbumsDataSource.setDeviceId(deviceId: string)": ["AlbumDataImpl.setDeviceId(deviceId: string)"], "AlbumsDataSource.getData(index: number)": ["AlbumsDataSource.getDataByIndex(index: number)", "AlbumsDataSource.%AM0$onDataUpdateBindImpl(index: number)"], "AlbumsDataSource.getDataByIndex(index: number)": [], "AlbumsDataSource.isSelect()": [], "AlbumsDataSource.resetLoadState()": [], "AlbumsDataSource.getAlbumDataItemById(id: string)": [], "AlbumsDataSource.getSelectedUris()": [], "AlbumsDataSource.isDisableRename()": [], "AlbumsDataSource.isDisableDelete()": [], "AlbumsDataSource.setSelect(isSelect: boolean)": ["AlbumDataItem.setSelect(isSelect: boolean)"], "AlbumsDataSource.getSelectedCount()": [], "AlbumsDataSource.getSelectedItems()": [], "AlbumsDataSource.onDataUpdate(index: number)": ["AlbumsDataSource.onDataUpdateBindImpl(index: number)"], "AlbumsDataSource.onDataUpdateBindImpl(index: number)": ["Log.info(TAG: string, message: string)", "AlbumsDataSource.notifyDataChange(index: number)"], "AlbumsDataSource.dataReload()": ["AlbumsDataSource.reloadAlbumItemData()", "AlbumsDataSource.notifyDataReload()"], "AlbumsDataSource.dataRemove()": ["AlbumDataItem.isDeleted()", "AlbumsDataSource.notifyDataDelete(index: number)"], "AlbumsDataSource.reloadAlbumItemData()": ["AlbumDataImpl.reloadAlbumItemData()"], "AlbumsDataSource.reloadAlbumListItemData()": ["Log.info(TAG: string, message: string)", "AlbumDataImpl.reloadAlbumItemData()", "AlbumsDataSource.notifyDataReload()"]}, "static_cg": {"@test/42.ts: AlbumsDataSource.getData(number)": ["@test/42.ts: AlbumsDataSource.getDataByIndex(number)", "@test/42.ts: AlbumsDataSource.%AM0$getData(number)"], "@test/42.ts: AlbumsDataSource.getSelectedUris()": ["@test/42.ts: AlbumsDataSource.%AM1$getSelectedUris([uris], AlbumDataItem)"], "@test/42.ts: AlbumsDataSource.setSelect(boolean)": ["@test/42.ts: AlbumsDataSource.%AM2$setSelect([isSelect], AlbumDataItem)"], "@test/42.ts: AlbumsDataSource.getSelectedItems()": ["@test/42.ts: AlbumsDataSource.%AM3$getSelectedItems([items], AlbumDataItem)"], "@test/42.ts: AlbumsDataSource.onDataUpdate(number)": ["@test/42.ts: AlbumsDataSource.onDataUpdateBindImpl(number)"], "@test/42.ts: AlbumsDataSource.dataReload()": ["@test/42.ts: AlbumsDataSource.reloadAlbumItemData()", "@test/42.ts: AlbumsDataSource.%AM4$dataReload(boolean)"], "@test/42.ts: AlbumsDataSource.%AM0$getData(number)": ["@test/42.ts: AlbumsDataSource.onDataUpdateBindImpl(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { Broadcast } from './Broadcast';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'BroadcastManager';\n\nexport class BroadcastManager {\n  // The global Broadcast of the application process. Event registration and destruction should be paired\n  private appBroadcast: Broadcast;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n    this.appBroadcast = new Broadcast();\n  }\n\n  public getBroadcast(): Broadcast {\n    return this.appBroadcast;\n  }\n}\n\nexport let broadcastManager: BroadcastManager = stashOrGetObject<BroadcastManager>(new BroadcastManager(), TAG);\n", "llm_cg": {"BroadcastManager.constructor()": ["Log.info(string, string)", "Broadcast.constructor()"], "BroadcastManager.getBroadcast()": [], "stashOrGetObject<BroadcastManager>(BroadcastManager, string)": []}, "static_cg": {"@test/43.ts: %dflt.[static]%dflt()": ["@test/43.ts: BroadcastManager.constructor()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Matrix4 from '@ohos.matrix4';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { Log } from '../utils/Log';\nimport { Broadcast } from './Broadcast';\nimport { MathUtils } from '../utils/MathUtils';\nimport { Constants } from '../constants/BrowserConstants';\nimport { screenManager } from './ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\n\nconst TAG = 'EventPipeline'\n\nexport interface Matrix4TransitWithMatrix4x4 extends Matrix4.Matrix4Transit {\n  matrix4x4: number[];\n}\n\nexport interface AnimationOption {\n  duration: number,\n  curve: Curve\n}\n\nexport class EventPipeline {\n\n  // last offset\n  private lastOffset: number[] = [0, 0];\n\n  // offset\n  private offset: number[] = [0, 0];\n\n  // default scale\n  private defaultScale = 1.0;\n\n  // last scale\n  private lastScale = 1.0;\n\n  // scale\n  private scale = 1.0;\n\n  // the zoom center point is a percentage position relative to the control, not an absolute position\n  private center: number[] = [Constants.CENTER_DEFAULT, Constants.CENTER_DEFAULT];\n\n  // leftmost zoom Center，(1 - leftMost)is rightmost zoom Center\n  private leftMost = 0.0;\n\n  // top zoom center，(1 - topMost)is bottom zoom center\n  private topMost = 0.0;\n\n  // double tap scale\n  private doubleTapScale = 1.0;\n\n  // max scale\n  private maxScale = 1.0;\n\n  // has reached the far left\n  private hasReachLeft = true;\n\n  // has reached the far right\n  private hasReachRight = true;\n\n  // has reached the far top\n  private hasReachTop = true;\n\n  // has reached the far bottom\n  private hasReachBottom = true;\n\n  // Broadcast\n  private broadCast: Broadcast;\n\n  // item\n  private item: UserFileDataItem;\n\n  // timeStamp\n  private timeStamp: string;\n\n  // width\n  private width: number;\n\n  // height\n  private height: number;\n\n  // Large display control width\n  private componentWidth: number = vp2px(screenManager.getWinWidth());\n\n  // Large display control height\n  private componentHeight = vp2px(screenManager.getWinHeight());\n\n  // is now in animation\n  private isInAnimation = false;\n\n  // pull down to return flag to prevent multiple triggers\n  private isExiting = false;\n\n  private updateMatrix: Function;\n\n  constructor(broadCastParam: Broadcast, item: UserFileDataItem, timeStamp: string, updateMatrix: Function) {\n    this.broadCast = broadCastParam;\n    this.item = item;\n    this.timeStamp = timeStamp;\n    this.updateMatrix = updateMatrix;\n    this.width = this.item.imgWidth === 0 ? MediaConstants.DEFAULT_SIZE : this.item.imgWidth;\n    this.height = this.item.imgHeight === 0 ? MediaConstants.DEFAULT_SIZE : this.item.imgHeight;\n    this.evaluateScales();\n  }\n\n  onDataChanged(item: UserFileDataItem): void {\n    this.item = item;\n    this.width = this.item.imgWidth === 0 ? MediaConstants.DEFAULT_SIZE : this.item.imgWidth;\n    this.height = this.item.imgHeight === 0 ? MediaConstants.DEFAULT_SIZE : this.item.imgHeight;\n    this.evaluateScales();\n  }\n\n  setDefaultScale(scale): void {\n    this.defaultScale = scale;\n    this.lastScale = scale;\n  }\n\n  onComponentSizeChanged(): void {\n    this.evaluateScales();\n  }\n\n  onTouch(event: TouchEvent): void {\n    Log.debug(TAG, 'onTouch trigger: ' + event.type + ', ' + this.isInAnimation + ', ' + this.isExiting);\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    if (event.type === TouchType.Down || event.type === TouchType.Up) {\n      this.emitDirectionChange();\n    }\n\n    if (event.type === TouchType.Up) {\n      this.lastOffset = this.evaluateOffset();\n      this.lastScale = this.lastScale * this.scale;\n      this.scale = 1;\n      this.offset = [0, 0];\n    }\n  }\n\n  private emitDirectionChange(): void {\n\n    /**\n     * reachLeft reachRight scale>1，only five possible situations（when scale<=1,reachLeft、reachRight is true）：\n     * T T T：Vertical\n     * T T F：Vertical（initial state）\n     * T F T：Vertical | Left\n     * F T T：Vertical | Right\n     * F F T：All\n     */\n    let direction;\n    let scale = this.lastScale * this.scale;\n    let isEnlarged = Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS));\n    if (!this.hasReachLeft && !this.hasReachRight && isEnlarged) {\n      direction = PanDirection.All;\n    } else if (!this.hasReachLeft && this.hasReachRight && isEnlarged) {\n      direction = (PanDirection.Vertical as number) | (PanDirection.Right as number);\n    } else if (this.hasReachLeft && !this.hasReachRight && isEnlarged) {\n      direction = (PanDirection.Vertical as number) | (PanDirection.Left as number);\n    } else {\n      direction = PanDirection.Vertical;\n    }\n\n    Log.info(TAG, 'emitDirectionChange reaches: ' + this.hasReachLeft + ', ' + this.hasReachRight + ', ' + this.hasReachTop + ', ' + this.hasReachBottom +\n    ', scale ' + scale + ', direction: ' + direction);\n    if (this.isExiting) {\n      return;\n    }\n\n    if (direction === (PanDirection.Vertical as number) || direction === ((PanDirection.Vertical as number) | (PanDirection.Left as number)) ||\n    direction === ((PanDirection.Vertical as number) | (PanDirection.Right as number))) {\n      this.broadCast.emit(Constants.SET_DISABLE_SWIPE, [false]);\n    } else {\n      this.broadCast.emit(Constants.SET_DISABLE_SWIPE, [true]);\n    }\n    this.broadCast.emit(Constants.DIRECTION_CHANGE + this.item.uri + this.timeStamp, [direction]);\n  }\n\n  private evaluateOffset(): number[] {\n    Log.info(TAG, 'evaluateOffset lastOffset: ' + this.lastOffset + ', offset: ' + this.offset);\n    let centerX = (this.center[0] - Constants.CENTER_DEFAULT) * this.componentWidth * (this.defaultScale - this.scale) * this.lastScale;\n    let centerY = (this.center[1] - Constants.CENTER_DEFAULT) * this.componentHeight * (this.defaultScale - this.scale) * this.lastScale;\n    let offsetX = this.lastOffset[0] + this.offset[0] + centerX;\n    let offsetY = this.lastOffset[1] + this.offset[1] + centerY;\n    Log.debug(TAG, 'evaluateOffset offsetX: ' + offsetX + ', offsetY: ' + offsetY);\n    return [offsetX, offsetY];\n  }\n\n  private emitTouchEvent(): void {\n    let offset: number[];\n    let scale = this.lastScale * this.scale;\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      let limits = this.evaluateOffsetRange(scale);\n      offset = this.evaluateOffset();\n      // the offset in the X direction is always limited for non shrinking scenes\n      offset[0] = MathUtils.clamp(offset[0], limits[0], limits[1]);\n      if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n        // cannot pull down to return, limit y\n        offset[1] = MathUtils.clamp(offset[1], limits[2], limits[3]);\n      } else {\n        // can pull down to return to the scene, and only limit y to drag upward, limit the lower bound\n        offset[1] = Math.max(limits[2], offset[1]);\n      }\n    } else {\n      // When zooming in, adjust the zoom center to the display center point\n      offset = [0, 0];\n    }\n    let moveX = offset[0];\n    let moveY = offset[1];\n    Log.debug(TAG, 'emitTouchEvent moveX: ' + moveX + ', moveY: ' + moveY);\n    let scaleOption: Matrix4.ScaleOption = {\n      x: scale,\n      y: scale,\n    };\n    let translateOption: Matrix4.TranslateOption = {\n      x: moveX,\n      y: moveY\n    };\n    let matrix = Matrix4.identity()\n      .scale(scaleOption)\n      .translate(translateOption)\n      .copy();\n    Log.debug(TAG, 'emitTouchEvent lastOffset: ' + this.lastOffset + ', offset: ' + this.offset +\n    ',center: ' + this.center + ', scale: ' + this.lastScale + ', ' + this.scale);\n    this.updateMatrix(matrix);\n    this.evaluateBounds();\n  }\n\n  private evaluateScales(): void {\n    if (this.width * this.componentHeight < this.componentWidth * this.height) {\n      // The aspect ratio is less than the display aspect ratio of the control\n      // the height of the control is equal to the height of the picture\n      this.maxScale = this.height / this.componentHeight;\n      // Double click the enlarged scale to ensure that the left and right boundaries are filled\n      this.doubleTapScale = this.componentWidth * this.height / this.width / this.componentHeight;\n      // leftMost = (1 - dspW / compW) / 2 = (1 - compH * imgW / imgH / compW) / 2\n      this.leftMost = (1 - this.componentHeight * this.width / this.height / this.componentWidth) / Constants.NUMBER_2;\n      this.topMost = 0.0;\n    } else if (this.width * this.componentHeight === this.componentWidth * this.height) {\n      // The aspect ratio is equal to the display aspect ratio of the control\n      this.doubleTapScale = Constants.SAME_RATIO_SCALE_FACTOR;\n      this.maxScale = this.doubleTapScale * Constants.MAX_SCALE_EXTRA_FACTOR;\n      this.leftMost = 0;\n      this.topMost = 0;\n    } else {\n      // The aspect ratio is greater than the display aspect ratio of the control\n      // the width of the control is equal to the width of the picture\n      this.maxScale = this.width / this.componentWidth;\n      // Double click the enlarged scale to ensure that the top and bottom fill the boundary\n      this.doubleTapScale = this.componentHeight * this.width / this.height / this.componentWidth;\n      this.leftMost = 0.0;\n      this.topMost = (1 - this.componentWidth * this.height / this.width / this.componentHeight) / Constants.NUMBER_2;\n    }\n\n    this.maxScale = Math.max(this.maxScale, Constants.COMPONENT_SCALE_CEIL);\n    if (this.doubleTapScale > this.maxScale) {\n      this.maxScale = this.doubleTapScale * Constants.MAX_SCALE_EXTRA_FACTOR;\n    }\n    Log.debug(TAG, 'evaluateScales: ' + this.width + '*' + this.height + ' &' +\n    this.componentWidth + '*' + this.componentHeight +\n    ',max: ' + this.maxScale + ', most: [' + this.leftMost + ',' + this.topMost + '], double: ' + this.doubleTapScale);\n  }\n\n  private evaluateCompBounds(): number[] {\n    let scale = this.lastScale * this.scale;\n    let offset = this.evaluateOffset();\n    let result: number[] = [\n      offset[0] - this.componentWidth * (Number(scale.toFixed(Constants.RESERVED_DIGITS)) - Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) / Constants.NUMBER_2,\n      offset[1] - this.componentHeight * (Number(scale.toFixed(Constants.RESERVED_DIGITS)) - Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) / Constants.NUMBER_2\n    ];\n    Log.debug(TAG, 'evaluateCompBounds: ' + result);\n    return result;\n  }\n\n  private evaluateImgDisplaySize(): number[] {\n    let screenScale = 1;\n    let widthScale = this.componentWidth / this.item.imgWidth;\n    let heightScale = this.componentHeight / this.item.imgHeight;\n    screenScale = widthScale > heightScale ? heightScale : widthScale;\n    let scale = this.lastScale * this.scale * screenScale;\n    let imgDisplayWidth = 0;\n    let imgDisplayHeight = 0;\n    imgDisplayWidth = this.width * scale;\n    imgDisplayHeight = this.height * scale;\n    return [imgDisplayWidth, imgDisplayHeight];\n  }\n\n  private evaluateImgDisplayBounds(): number[] {\n    // For the left boundary of the component,\n    // the offset caused by amplification is - compw * (scale-1) / 2,\n    // plus the offset of the gesture to obtain the left boundary of the control.\n    // The same is true for the upper boundary\n    let scale = this.lastScale * this.scale;\n    let leftTop = this.evaluateCompBounds();\n    let imgDisplaySize: number[] = this.evaluateImgDisplaySize();\n    let imgDisplayWidth = imgDisplaySize[0];\n    let imgDisplayHeight = imgDisplaySize[1];\n    let imgLeftBound = 0;\n    let imgTopBound = 0;\n    if (this.width / this.height > this.componentWidth / this.componentHeight) {\n      imgLeftBound = leftTop[0];\n      imgTopBound = leftTop[1] + (this.componentHeight * scale - imgDisplayHeight) / Constants.NUMBER_2;\n    } else {\n      // Control width minus the picture width, divided by 2,\n      // you can get the distance from the left of the picture to the left of the control.\n      // Plus offsetX is the left boundary of the picture currently displayed\n      imgLeftBound = (this.componentWidth * scale - imgDisplayWidth) / Constants.NUMBER_2 + leftTop[0];\n      imgTopBound = leftTop[1];\n    }\n    return [imgLeftBound, imgTopBound];\n  }\n\n  // Calculate picture display boundary\n  private evaluateBounds(): void {\n    let imgDisplaySize: number[] = this.evaluateImgDisplaySize();\n    let imgDisplayWidth = imgDisplaySize[0];\n\n    let imgDisplayBounds = this.evaluateImgDisplayBounds();\n    let imgLeftBound = imgDisplayBounds[0];\n    this.hasReachLeft = imgLeftBound > -1;\n    this.hasReachRight = imgLeftBound + imgDisplayWidth < this.componentWidth + 1;\n  }\n\n  /**\n   * Calculate the upper and lower bounds of offset in X and Y directions under the current scale\n   *\n   * @param scale The display magnification of the current control, usually this.lastScale * this.scale\n   * @returns 0&1 X-direction offset lower & upper bound, 2&3 Y-direction offset lower & upper bound\n   */\n  private evaluateOffsetRange(scale: number): number[] {\n    let result: number[] = [0, 0, 0, 0];\n    let screenScale = 1;\n    let widthScale = this.componentWidth / this.item.imgWidth;\n    let heightScale = this.componentHeight / this.item.imgHeight;\n    screenScale = widthScale > heightScale ? heightScale : widthScale;\n    let left = (screenScale * scale * this.width - this.componentWidth) / Constants.NUMBER_2;\n    let top = (screenScale * scale * this.height - this.componentHeight) / Constants.NUMBER_2;\n    top = Math.max(top, 0);\n    left = Math.max(left, 0);\n    result = [-left, left, -top, top];\n    Log.debug(TAG, 'evaluateOffsetRange scale: ' + scale + ', defaultScale: ' + this.defaultScale + ', result: ' + result);\n    return result;\n  }\n\n  private emitPullDownToBackEvent(): void {\n    Log.debug(TAG, 'emitPullDownToBackEvent');\n    if (this.isExiting) {\n      Log.info(TAG, 'emitPullDownToBack isExiting: ' + this.isExiting);\n      return;\n    }\n    this.broadCast.emit(Constants.PULL_DOWN_END, []);\n    this.isExiting = true;\n  }\n\n  private emitPullDownCancelEvent(): void {\n    Log.debug(TAG, 'emitPullDownCancelEvent');\n    this.broadCast.emit(Constants.PULL_DOWN_CANCEL, []);\n  }\n\n  onMoveStart(offsetX: number, offsetY: number): void {\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    // Reset offset at the beginning of dragging to prevent jumping\n    this.offset = [0, 0];\n    this.evaluateBounds();\n    let scale = this.lastScale * this.scale;\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      // Hide bars with zoom drag\n      this.broadCast.emit(Constants.HIDE_BARS, []);\n    }\n    if (scale.toFixed(Constants.RESERVED_DIGITS) === this.defaultScale.toFixed(Constants.RESERVED_DIGITS) && offsetY > 0) {\n      // Drop down return to hide details first\n      this.broadCast.emit(Constants.PULL_DOWN_START, []);\n    }\n  }\n\n  /**\n   * Each callback returns the displacement relative to the start point of the gesture\n   *\n   * @param offsetX offsetX\n   * @param offsetY offsetY\n   */\n  onMove(offsetX: number, offsetY: number): void {\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    let scale = this.lastScale * this.scale;\n    let limits = this.evaluateOffsetRange(scale);\n    let measureX = this.lastOffset[0] + (this.center[0] - Constants.CENTER_DEFAULT) * this.componentWidth\n    * (this.defaultScale - this.scale) * this.lastScale;\n    let measureY = this.lastOffset[1] + (this.center[1] - Constants.CENTER_DEFAULT) * this.componentHeight\n    * (this.defaultScale - this.scale) * this.lastScale;\n    let moveX = offsetX;\n    let moveY = offsetY;\n    let offX = measureX + moveX;\n    let offY = measureY + moveY;\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      // The offset in the X direction is always limited for non shrinking scenes\n      offX = MathUtils.clamp(offX, limits[0], limits[1]);\n      if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n        // cannot drop down to return to the scene, limit y\n        offY = MathUtils.clamp(offY, limits[Constants.NUMBER_2], limits[Constants.NUMBER_3]);\n      } else {\n        // pull down to return to the scene, and only limit y to drag upward, that is, limit the lower bound\n        offY = Math.max(limits[Constants.NUMBER_2], offY);\n      }\n    }\n    let tmpX = offX - measureX;\n    let tmpY = offY - measureY;\n    this.offset = [tmpX, tmpY];\n    this.emitTouchEvent();\n  }\n\n  onMoveEnd(offsetX, offsetY): void {\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    let scale = this.lastScale * this.scale;\n    Log.debug(TAG, 'onMoveEnd: scale is ' + scale + ' offsetY is ' + offsetY);\n    if (scale.toFixed(Constants.RESERVED_DIGITS) === this.defaultScale.toFixed(Constants.RESERVED_DIGITS) && offsetY > Constants.PULL_DOWN_THRESHOLD) {\n      this.emitPullDownToBackEvent();\n    } else if (scale.toFixed(Constants.RESERVED_DIGITS) === this.defaultScale.toFixed(Constants.RESERVED_DIGITS)) {\n      // The reset animation is triggered when the threshold is not reached\n      let scaleOption: Matrix4.ScaleOption = {\n        x: this.defaultScale,\n        y: this.defaultScale\n      };\n      this.startAnimation(Matrix4.identity().scale(scaleOption).copy() as Matrix4TransitWithMatrix4x4);\n      this.emitPullDownCancelEvent();\n    } else {\n      this.emitDirectionChange();\n    }\n  }\n\n  onScaleStart(scale: number, centerX: number, centerY: number): void {\n    Log.info(TAG, 'onScaleStart: ' + this.isInAnimation + ', ' + this.isExiting);\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    this.scale = 1;\n    this.evaluateBounds();\n    // Adjust action bar status\n    this.broadCast.emit(Constants.HIDE_BARS, []);\n    this.center = this.evaluateCenter(centerX, centerY);\n  }\n\n  /**\n   * Calculates the percentage position of the current zoom center relative to the control\n   *\n   * @param centerX The absolute position of the touch point on the screen\n   * @param centerY The absolute position of the touch point on the screen\n   * @returns The percentage position of the current zoom center relative to the control\n   */\n  private evaluateCenter(centerX: number, centerY: number): number[] {\n    // Calculate the coordinates of the upper left corner of the control relative to\n    // the upper left corner of the current display\n    let scale = this.lastScale * this.scale;\n    let leftTop = this.evaluateCompBounds();\n\n    // Get the touch coordinates relative to the control\n    let cxRelativeToComp = MathUtils.clamp((centerX - leftTop[0])\n    / (this.componentWidth * scale), this.leftMost, 1 - this.leftMost);\n    let cyRelativeToComp = MathUtils.clamp((centerY - leftTop[1])\n    / (this.componentHeight * scale), this.topMost, 1 - this.topMost);\n\n    let imgDisplaySize: number[] = this.evaluateImgDisplaySize();\n    let imgDisplayWidth = imgDisplaySize[0];\n    let imgDisplayHeight = imgDisplaySize[1];\n\n    let imgDisplayBounds = this.evaluateImgDisplayBounds();\n    let imgLeftBound = imgDisplayBounds[0];\n    let imgTopBound = imgDisplayBounds[1];\n\n    // When the touch center point is outside the picture display area, take the midpoint\n    if (this.width / this.height > this.componentWidth / this.componentHeight) {\n      if (centerY < imgTopBound || centerY > imgTopBound + imgDisplayHeight) {\n        cyRelativeToComp = Constants.CENTER_DEFAULT;\n      }\n    } else {\n      if (centerX < imgLeftBound || centerX > imgLeftBound + imgDisplayWidth) {\n        cxRelativeToComp = Constants.CENTER_DEFAULT;\n      }\n    }\n\n    // Calculate the percentage of the center point of the touch\n    let center: number[] = [cxRelativeToComp, cyRelativeToComp];\n    Log.debug(TAG, 'evaluateCenter center: ' + center + ', ' + centerX + ',' + centerY +\n    ',size: ' + imgDisplaySize + ', bounds: ' + imgDisplayBounds + ', leftTop: ' + leftTop +\n    ',compSize: ' + this.componentWidth * scale + ',' + this.componentHeight * scale);\n    return center;\n  }\n\n  onScale(scale: number): void {\n    Log.debug(TAG, 'onScale: ' + this.isInAnimation + ', ' + this.isExiting + ', scale: ' + scale);\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    this.evaluateBounds();\n    this.scale = scale;\n    if (this.lastScale * scale <= Constants.COMPONENT_SCALE_FLOOR) {\n      this.scale = Constants.COMPONENT_SCALE_FLOOR / this.lastScale;\n    }\n    if (this.lastScale * scale >= this.maxScale * Constants.OVER_SCALE_EXTRA_FACTOR) {\n      this.scale = this.maxScale * Constants.OVER_SCALE_EXTRA_FACTOR / this.lastScale;\n    }\n    this.emitTouchEvent();\n  }\n\n  onScaleEnd(): void {\n    Log.info(TAG, 'onScaleEnd: ' + this.isInAnimation + ', ' + this.isExiting);\n    if (this.isInAnimation || this.isExiting) {\n      return;\n    }\n    this.evaluateBounds();\n    let scale = this.lastScale * this.scale;\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) >= Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS)) && scale <= this.maxScale) {\n      Log.info(TAG, 'does not need to do animation: ' + scale);\n      this.emitDirectionChange();\n      return;\n    }\n    let animationEndMatrix: Matrix4.Matrix4Transit = null;\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) <= Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      // Zoom out too small to trigger the restored animation\n      let scaleOption: Matrix4.ScaleOption = {\n        x: this.defaultScale,\n        y: this.defaultScale\n      };\n      animationEndMatrix = Matrix4.identity().scale(scaleOption).copy();\n    } else {\n      // Do the animation of retracting maxScale when zooming in\n      animationEndMatrix = this.evaluateAnimeMatrix(this.maxScale, this.center);\n    }\n    this.startAnimation(animationEndMatrix as Matrix4TransitWithMatrix4x4);\n  }\n\n  private evaluateAnimeMatrix(scale: number, center: number[]): Matrix4.Matrix4Transit {\n    let offset: number[] = [\n      this.lastOffset[0] + this.offset[0] + (center[0] - Constants.CENTER_DEFAULT) * this.componentWidth\n      * (this.defaultScale - scale / this.lastScale) * this.lastScale,\n      this.lastOffset[1] + this.offset[1] + (center[1] - Constants.CENTER_DEFAULT) * this.componentHeight\n      * (this.defaultScale - scale / this.lastScale) * this.lastScale\n    ];\n    if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      let limits = this.evaluateOffsetRange(scale);\n      // The offset in the X direction is always limited for non shrinking scenes\n      offset[0] = MathUtils.clamp(offset[0], limits[0], limits[1]);\n      if (Number(scale.toFixed(Constants.RESERVED_DIGITS)) > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n        // Cannot drop down to return to the scene, limit y\n        offset[1] = MathUtils.clamp(offset[1], limits[Constants.NUMBER_2], limits[Constants.NUMBER_3]);\n      } else {\n        // You can pull down to return to the scene, and only limit y to drag upward,\n        // that is, limit the lower bound\n        offset[1] = Math.max(limits[Constants.NUMBER_2], offset[1]);\n      }\n    } else {\n      // When zooming in, adjust the zoom center to the display center point\n      offset = [0, 0];\n    }\n    let scaleOption: Matrix4.ScaleOption = {\n      x: scale,\n      y: scale,\n    };\n    let translateOption: Matrix4.TranslateOption = {\n      x: offset[0],\n      y: offset[1]\n    };\n    let animationEndMatrix = Matrix4.identity()\n      .copy()\n      .scale(scaleOption)\n      .translate(translateOption)\n      .copy();\n    Log.debug(TAG, 'evaluateAnimeMatrix scale:' + scale + ', center:' + center);\n    return animationEndMatrix;\n  }\n\n  /**\n   * Double click to trigger zoom.\n   * If the current scale is less than or equal to 1, zoom to doubleTapScale;\n   * If the current scale is greater than 1, scale to 1;\n   *\n   * @param centerX the location of double click\n   * @param centerY the location of double click\n   */\n  onDoubleTap(centerX: number, centerY: number): void {\n    if (this.isInAnimation || this.isExiting) {\n      Log.debug(TAG, 'onDoubleTap not avaliable: ' + this.isInAnimation + ', ' + this.isExiting);\n      return;\n    }\n    // Adjust action bar status\n    this.broadCast.emit(Constants.HIDE_BARS, []);\n    let matrix: Matrix4TransitWithMatrix4x4;\n    Log.debug(TAG, 'onDoubleTap lastScale: ' + this.lastScale + ', scale: ' + this.scale + ', defaultScale: ' + this.defaultScale);\n    if (Number(this.lastScale.toFixed(Constants.RESERVED_DIGITS)) * this.scale > Number(this.defaultScale.toFixed(Constants.RESERVED_DIGITS))) {\n      // Scale to original state when scale is greater than 1\n      let scaleOption: Matrix4.ScaleOption = {\n        x: this.defaultScale,\n        y: this.defaultScale\n      };\n      matrix = Matrix4.identity().scale(scaleOption).copy() as Matrix4TransitWithMatrix4x4;\n    } else {\n      // The zoom in status calculates the zoom in center according to the click position\n      let center = this.evaluateCenter(centerX, centerY);\n      // When the picture aspect ratio is less than the control aspect ratio,\n      // centerX is set to 0.5,\n      // whereas centerY is set to 0.5 to ensure that\n      // the short side is close to the side after double clicking and enlarging\n      if (this.width / this.height < this.componentWidth / this.componentHeight) {\n        center = [Constants.CENTER_DEFAULT, center[1]];\n      } else {\n        center = [center[0], Constants.CENTER_DEFAULT];\n      }\n      matrix = this.evaluateAnimeMatrix(this.doubleTapScale * this.defaultScale, center) as Matrix4TransitWithMatrix4x4;\n    }\n    Log.debug(TAG, 'onDoubleTap matrix: ' + matrix.matrix4x4);\n    this.startAnimation(matrix);\n  }\n\n  reset(): void {\n    this.lastOffset = [0, 0];\n    this.offset = [0, 0];\n    this.lastScale = 1.0;\n    this.scale = 1;\n    this.hasReachLeft = true;\n    this.hasReachRight = true;\n    this.hasReachTop = true;\n    this.hasReachBottom = true;\n    this.isInAnimation = false;\n    this.isExiting = false;\n    this.emitDirectionChange();\n  }\n\n  onDisAppear(): void {\n    Log.info(TAG, 'onDisAppear');\n  }\n\n  private startAnimation(animationEndMatrix: Matrix4TransitWithMatrix4x4): void {\n    this.isInAnimation = true;\n    let animationOption: AnimationOption = {\n      duration: Constants.OVER_SCALE_ANIME_DURATION,\n      curve: Curve.Ease\n    };\n    Log.debug(TAG, 'animationEndMatrix: ' + animationEndMatrix.matrix4x4);\n    this.broadCast.emit(Constants.ANIMATION_EVENT + this.item.uri + this.timeStamp, [animationOption, animationEndMatrix]);\n  }\n\n  /**\n   * At the end of the animation,\n   * refresh the current parameter values according to the end transformation matrix to ensure continuity and\n   * prevent jumping during the next gesture operation\n   *\n   * @param animationEndMatrix Transformation matrix at end\n   */\n  onAnimationEnd(animationEndMatrix: Matrix4TransitWithMatrix4x4): void {\n    if (animationEndMatrix != null) {\n      Log.info(TAG, 'onAnimationEnd: ' + animationEndMatrix.matrix4x4);\n      this.lastScale = animationEndMatrix.matrix4x4[0];\n      this.scale = 1;\n      this.lastOffset = [animationEndMatrix.matrix4x4[Constants.NUMBER_12], animationEndMatrix.matrix4x4[Constants.NUMBER_13]];\n      this.offset = [0, 0];\n      this.evaluateBounds();\n      this.isInAnimation = false;\n      this.emitDirectionChange();\n    }\n  }\n}\n", "llm_cg": {"EventPipeline.onWindowStageCreate(window.WindowStage)": [], "EventPipeline.onDataChanged(UserFileDataItem)": ["EventPipeline.evaluateScales()"], "EventPipeline.setDefaultScale(scale)": [], "EventPipeline.onComponentSizeChanged()": ["EventPipeline.evaluateScales()"], "EventPipeline.onTouch(TouchEvent)": ["EventPipeline.emitDirectionChange()", "EventPipeline.evaluateOffset()"], "EventPipeline.emitDirectionChange()": ["Broadcast.emit(Constants.SET_DISABLE_SWIPE, [false])", "Broadcast.emit(Constants.SET_DISABLE_SWIPE, [true])", "Broadcast.emit(Constants.DIRECTION_CHANGE + this.item.uri + this.timeStamp, [direction])"], "EventPipeline.evaluateOffset()": [], "EventPipeline.emitTouchEvent()": ["EventPipeline.evaluateOffsetRange(scale)", "EventPipeline.evaluateOffset()", "MathUtils.clamp(offset[0], limits[0], limits[1])", "MathUtils.clamp(offset[1], limits[2], limits[3])", "Matrix4.identity().scale(scaleOption).translate(translateOption).copy()", "EventPipeline.evaluateBounds()"], "EventPipeline.evaluateScales()": [], "EventPipeline.evaluateCompBounds()": ["EventPipeline.evaluateOffset()"], "EventPipeline.evaluateImgDisplaySize()": [], "EventPipeline.evaluateImgDisplayBounds()": ["EventPipeline.evaluateCompBounds()", "EventPipeline.evaluateImgDisplaySize()"], "EventPipeline.evaluateBounds()": ["EventPipeline.evaluateImgDisplaySize()", "EventPipeline.evaluateImgDisplayBounds()"], "EventPipeline.evaluateOffsetRange(scale)": [], "EventPipeline.emitPullDownToBackEvent()": ["Broadcast.emit(Constants.PULL_DOWN_END, [])"], "EventPipeline.emitPullDownCancelEvent()": ["Broadcast.emit(Constants.PULL_DOWN_CANCEL, [])"], "EventPipeline.onMoveStart(offsetX: number, offsetY: number)": ["EventPipeline.evaluateBounds()", "Broadcast.emit(Constants.HIDE_BARS, [])", "Broadcast.emit(Constants.PULL_DOWN_START, [])"], "EventPipeline.onMove(offsetX: number, offsetY: number)": ["EventPipeline.evaluateOffsetRange(scale)", "MathUtils.clamp(offX, limits[0], limits[1])", "MathUtils.clamp(offY, limits[2], limits[3])", "EventPipeline.emitTouchEvent()"], "EventPipeline.onMoveEnd(offsetX, offsetY)": ["EventPipeline.emitPullDownToBackEvent()", "Matrix4.identity().scale(scaleOption).copy()", "EventPipeline.emitPullDownCancelEvent()", "EventPipeline.emitDirectionChange()"], "EventPipeline.onScaleStart(scale: number, centerX: number, centerY: number)": ["EventPipeline.evaluateBounds()", "Broadcast.emit(Constants.HIDE_BARS, [])", "EventPipeline.evaluateCenter(centerX, centerY)"], "EventPipeline.evaluateCenter(centerX: number, centerY: number)": ["EventPipeline.evaluateCompBounds()", "MathUtils.clamp((centerX - leftTop[0]) / (this.componentWidth * scale), this.leftMost, 1 - this.leftMost)", "MathUtils.clamp((centerY - leftTop[1]) / (this.componentHeight * scale), this.topMost, 1 - this.topMost)", "EventPipeline.evaluateImgDisplaySize()", "EventPipeline.evaluateImgDisplayBounds()"], "EventPipeline.onScale(scale: number)": ["EventPipeline.evaluateBounds()", "EventPipeline.emitTouchEvent()"], "EventPipeline.onScaleEnd()": ["EventPipeline.evaluateBounds()", "Matrix4.identity().scale(scaleOption).copy()", "EventPipeline.evaluateAnimeMatrix(this.maxScale, this.center)", "EventPipeline.startAnimation(animationEndMatrix as Matrix4TransitWithMatrix4x4)"], "EventPipeline.evaluateAnimeMatrix(scale: number, center: number[])": ["MathUtils.clamp(offset[0], limits[0], limits[1])", "MathUtils.clamp(offset[1], limits[2], limits[3])", "Matrix4.identity().copy().scale(scaleOption).translate(translateOption).copy()"], "EventPipeline.onDoubleTap(centerX: number, centerY: number)": ["Broadcast.emit(Constants.HIDE_BARS, [])", "EventPipeline.evaluateCenter(centerX, centerY)", "Matrix4.identity().scale(scaleOption).copy()", "EventPipeline.evaluateAnimeMatrix(this.doubleTapScale * this.defaultScale, center)", "EventPipeline.startAnimation(matrix)"], "EventPipeline.reset()": ["EventPipeline.emitDirectionChange()"], "EventPipeline.onDisAppear()": [], "EventPipeline.startAnimation(animationEndMatrix: Matrix4TransitWithMatrix4x4)": ["Broadcast.emit(Constants.ANIMATION_EVENT + this.item.uri + this.timeStamp, [animationOption, animationEndMatrix])"], "EventPipeline.onAnimationEnd(animationEndMatrix: Matrix4TransitWithMatrix4x4)": ["EventPipeline.evaluateBounds()", "EventPipeline.emitDirectionChange()"]}, "static_cg": {"@test/44.ts: EventPipeline.constructor(Broadcast, UserFileDataItem, string, Function)": ["@test/44.ts: EventPipeline.evaluateScales()"], "@test/44.ts: EventPipeline.onDataChanged(UserFileDataItem)": ["@test/44.ts: EventPipeline.evaluateScales()"], "@test/44.ts: EventPipeline.onComponentSizeChanged()": ["@test/44.ts: EventPipeline.evaluateScales()"], "@test/44.ts: EventPipeline.onTouch(TouchEvent)": ["@test/44.ts: EventPipeline.emitDirectionChange()", "@test/44.ts: EventPipeline.evaluateOffset()"], "@test/44.ts: EventPipeline.emitTouchEvent()": ["@test/44.ts: EventPipeline.evaluateOffsetRange(number)", "@test/44.ts: EventPipeline.evaluateOffset()", "@test/44.ts: EventPipeline.evaluateBounds()"], "@test/44.ts: EventPipeline.evaluateCompBounds()": ["@test/44.ts: EventPipeline.evaluateOffset()"], "@test/44.ts: EventPipeline.evaluateImgDisplayBounds()": ["@test/44.ts: EventPipeline.evaluateCompBounds()", "@test/44.ts: EventPipeline.evaluateImgDisplaySize()"], "@test/44.ts: EventPipeline.evaluateBounds()": ["@test/44.ts: EventPipeline.evaluateImgDisplaySize()", "@test/44.ts: EventPipeline.evaluateImgDisplayBounds()"], "@test/44.ts: EventPipeline.onMoveStart(number, number)": ["@test/44.ts: EventPipeline.evaluateBounds()"], "@test/44.ts: EventPipeline.onMove(number, number)": ["@test/44.ts: EventPipeline.evaluateOffsetRange(number)", "@test/44.ts: EventPipeline.emitTouchEvent()"], "@test/44.ts: EventPipeline.onMoveEnd(unknown, unknown)": ["@test/44.ts: EventPipeline.emitPullDownToBackEvent()", "@test/44.ts: EventPipeline.startAnimation(@test/44.ts: Matrix4TransitWithMatrix4x4)", "@test/44.ts: EventPipeline.emitPullDownCancelEvent()", "@test/44.ts: EventPipeline.emitDirectionChange()"], "@test/44.ts: EventPipeline.onScaleStart(number, number, number)": ["@test/44.ts: EventPipeline.evaluateBounds()", "@test/44.ts: EventPipeline.evaluateCenter(number, number)"], "@test/44.ts: EventPipeline.evaluateCenter(number, number)": ["@test/44.ts: EventPipeline.evaluateCompBounds()", "@test/44.ts: EventPipeline.evaluateImgDisplaySize()", "@test/44.ts: EventPipeline.evaluateImgDisplayBounds()"], "@test/44.ts: EventPipeline.onScale(number)": ["@test/44.ts: EventPipeline.evaluateBounds()", "@test/44.ts: EventPipeline.emitTouchEvent()"], "@test/44.ts: EventPipeline.onScaleEnd()": ["@test/44.ts: EventPipeline.evaluateBounds()", "@test/44.ts: EventPipeline.emitDirectionChange()", "@test/44.ts: EventPipeline.evaluateAnimeMatrix(number, number[])", "@test/44.ts: EventPipeline.startAnimation(@test/44.ts: Matrix4TransitWithMatrix4x4)"], "@test/44.ts: EventPipeline.evaluateAnimeMatrix(number, number[])": ["@test/44.ts: EventPipeline.evaluateOffsetRange(number)"], "@test/44.ts: EventPipeline.onDoubleTap(number, number)": ["@test/44.ts: EventPipeline.evaluateCenter(number, number)", "@test/44.ts: EventPipeline.evaluateAnimeMatrix(number, number[])", "@test/44.ts: EventPipeline.startAnimation(@test/44.ts: Matrix4TransitWithMatrix4x4)"], "@test/44.ts: EventPipeline.reset()": ["@test/44.ts: EventPipeline.emitDirectionChange()"], "@test/44.ts: EventPipeline.onAnimationEnd(@test/44.ts: Matrix4TransitWithMatrix4x4)": ["@test/44.ts: EventPipeline.evaluateBounds()", "@test/44.ts: EventPipeline.emitDirectionChange()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { selectManager } from './SelectManager';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataItem';\n\nlet objectIndex = 0;\n\nexport class AlbumDataItem {\n  index: number;\n  id: string;\n  uri: string;\n  orientation: number;\n  displayName: string;\n  count: number;\n  isDisableRename: boolean;\n  isDisableDelete: boolean;\n  innerId: number;\n  selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  deviceId: string = '';\n  isSelect: boolean = false;\n  status: number = MediaConstants.UNDEFINED;\n  objectIndex: number;\n  albumType: number;\n  albumSubType: number;\n  fileUir: string = undefined;\n  fileAsset: photoAccessHelper.PhotoAsset;\n  thumbnail: PixelMap = undefined;\n\n  constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }\n\n  getHashCode(): string {\n    return this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;\n  }\n\n  async load(): Promise<void> {\n    if (this.status >= MediaConstants.LOADED) {\n      return;\n    }\n    if (this.fileUir !== undefined && this.fileUir !== null) {\n      let fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));\n      await this.update(fileAsset);\n    }\n  }\n\n  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'this.uri ' + this.displayName);\n    Log.info(TAG, 'this.uri ' + this.uri);\n    if (fileAsset != null) {\n      this.fileUir = fileAsset.uri;\n      this.fileAsset = fileAsset;\n      if (this.fileAsset != null) {\n        await this.getThumbnail();\n      }\n      Log.info(TAG, 'this.fileUri ' + this.fileUir);\n    }\n    this.status = MediaConstants.LOADED;\n    this.isSelect = selectManager.isSelect(this.id, this.isSelect);\n  }\n\n  async getThumbnail(): Promise<PixelMap> {\n    if (this.thumbnail == undefined) {\n      let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n      try {\n        this.thumbnail = await this.fileAsset.getThumbnail(size)\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return this.thumbnail;\n  }\n\n  async getVideoCount(): Promise<number> {\n    if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\n      return 0;\n    }\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let albumPredicates = new dataSharePredicates.DataSharePredicates();\n    albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\n    let albumFetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    };\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)\n    predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let fileFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\n    return fileAssets.length;\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.id, this.isSelect);\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      Log.error(TAG, this.displayName);\n      await userFileModel.deleteAlbum(this.displayName);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }\n}\n", "llm_cg": {"AlbumDataItem.load()": ["AlbumDataItem.update(photoAccessHelper.PhotoAsset)"], "AlbumDataItem.update(photoAccessHelper.PhotoAsset)": ["AlbumDataItem.getThumbnail()", "selectManager.isSelect(string, boolean)"], "AlbumDataItem.getThumbnail()": ["photoAccessHelper.PhotoAsset.getThumbnail({ width: number, height: number })"], "AlbumDataItem.getVideoCount()": ["userFileModel.getAllMediaItemsByType(number, number, { fetchColumns: string[], predicates: dataSharePredicates.DataSharePredicates }, { fetchColumns: string[], predicates: dataSharePredicates.DataSharePredicates })"], "AlbumDataItem.setSelect(boolean)": ["selectManager.setSelect(string, boolean)"], "AlbumDataItem.onDelete()": ["userFileModel.deleteAlbum(string)", "selectManager.deleteSelect(string)"]}, "static_cg": {"@test/45.ts: AlbumDataItem.load()": ["@test/45.ts: AlbumDataItem.update(photoAccessHelper.PhotoAsset)"], "@test/45.ts: AlbumDataItem.update(photoAccessHelper.PhotoAsset)": ["@test/45.ts: AlbumDataItem.getThumbnail()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'SelectManager';\n\nclass SelectManager {\n  private status: Map<string, boolean> = new Map<string, boolean>();\n\n  isSelect(key: string, defaultValue: boolean): boolean {\n    if (this.status.has(key)) {\n      return this.status.get(key);\n    } else {\n      return defaultValue;\n    }\n  }\n\n  setSelect(key: string, value: boolean): void {\n    this.status.set(key, value);\n  }\n\n  deleteSelect(key: string): void {\n    this.status.delete(key);\n  }\n}\n\nexport let selectManager: SelectManager = stashOrGetObject<SelectManager>(new SelectManager(), TAG);\n", "llm_cg": {"SelectManager.isSelect(key: string, defaultValue: boolean)": ["SelectManager.status.has(key: string)", "SelectManager.status.get(key: string)"], "SelectManager.setSelect(key: string, value: boolean)": ["SelectManager.status.set(key: string, value: boolean)"], "SelectManager.deleteSelect(key: string)": ["SelectManager.status.delete(key: string)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport { screenManager } from '../common/ScreenManager'\nimport { Constants } from '../constants/Constants'\n\nconst TAG = 'UiUtil';\n\nexport class UiUtil {\n  public static getAlbumGridCount(horizontal: boolean): number {\n    Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\n    Log.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\n    let sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\n    let contentWidth = screenManager.getWinWidth() - sideBarWidth;\n\n    let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\n    let gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n    / (maxCardWidth + Constants.ALBUM_SET_GUTTER));\n    Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\n    return gridColumnsCount;\n  }\n}\n", "llm_cg": {"UiUtil.getAlbumGridCount(boolean)": ["Log.info(string, string)", "screenManager.getWinWidth()", "Log.info(string, string)", "screenManager.getWinHeight()", "screenManager.getWinWidth()"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Want from '@ohos.application.Want';\nimport common from '@ohos.app.ability.common';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'AbilityUtils';\n\nexport async function startAbility(want: Want): Promise<void> {\n  try {\n    let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n    await appContext.startAbility(want);\n    Log.debug(TAG, 'raul startAbility complete');\n  } catch (error) {\n    Log.error(TAG, 'raul startAbility failed, error: ' + JSON.stringify(error));\n  }\n}\n\nexport async function terminateSelf(): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelf();\n}\n\nexport async function terminateSelfWithResult(parameter): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelfWithResult(parameter);\n}\n", "llm_cg": {"AbilityUtils.startAbility(Want)": ["GlobalContext.getContext()", "common.UIAbilityContext.startAbility(Want)", "Log.debug(string, string)"], "AbilityUtils.terminateSelf()": ["GlobalContext.getContext()", "common.UIAbilityContext.terminateSelf()"], "AbilityUtils.terminateSelfWithResult(parameter)": ["GlobalContext.getContext()", "common.UIAbilityContext.terminateSelfWithResult(parameter)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport abstract class MathUtils {\n  static clamp(num: number, min: number, max: number): number {\n    return Math.min(Math.max(num, min), max);\n  }\n}\n", "llm_cg": {"MathUtils.clamp(num: number, min: number, max: number)": ["Math.min(num: number, min: number)", "Math.max(num: number, max: number)"]}, "static_cg": {}}
{"source_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport resourceManager from '@ohos.resourceManager';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'ResourceUtils';\n\nexport async function getResourceString(resource: Resource): Promise<string> {\n  try {\n    Log.debug(TAG, 'getResourceString: ' + JSON.stringify(resource));\n    let context = GlobalContext.getContext().getObject('appContext');\n    let mgr: resourceManager.ResourceManager = await resourceManager.getResourceManager(context);\n    if (mgr != null || mgr != undefined) {\n      return await mgr.getStringValue(resource.id);\n    } else {\n      Log.warn(TAG, 'getResourceManager instance is none');\n      return null;\n    }\n  } catch (error) {\n    Log.error(TAG, 'getResourceString error: ' + error);\n    return null;\n  }\n}\n", "llm_cg": {"getResourceString(resource: Resource)": ["Log.debug(TAG, 'getResourceString: ' + JSON.stringify(resource))", "GlobalContext.getContext().getObject('appContext')", "resourceManager.getResourceManager(context)", "mgr.getStringValue(resource.id)", "Log.warn(TAG, 'getResourceManager instance is none')", "Log.error(TAG, 'getResourceString error: ' + error)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'SingleInstanceHelper';\nlet globalThis = GlobalContext.getContext();\n\nexport function stashOrGetObject<T>(objectClass: object, storageKey: string): T {\n  if (!new Boolean(globalThis.getObject(storageKey)).valueOf()) {\n    globalThis.setObject(storageKey, objectClass);\n    Log.debug(TAG, 'Create key of ' + storageKey);\n  }\n  return globalThis.getObject(storageKey) as T;\n}\n", "llm_cg": {"stashOrGetObject<T>(object, string)": ["GlobalContext.getContext()", "GlobalContext.getObject(string)", "GlobalContext.setObject(string, object)", "Log.debug(string, string)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\n\nconst TAG = 'ImageUtil';\nconst MAX_BIT = 30;\nconst BIT_SIXTEEN = 16;\nconst BIT_EIGHT = 8;\nconst BIT_FOUR = 4;\nconst BIT_TWO = 2;\nconst BIT_ONE = 1;\n\nexport function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}\n\nfunction computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}\n\nfunction nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}\n", "llm_cg": {"computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number)": ["computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number)", "nextPowerOf2(value: number)"], "computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number)": [], "nextPowerOf2(value: number)": []}, "static_cg": {"@test/52.ts: %dflt.computeSampleSize(number, number, number, number)": ["@test/52.ts: %dflt.computeInitialSampleSize(number, number, number, number)", "@test/52.ts: %dflt.nextPowerOf2(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hiSysEvent from '@ohos.hiSysEvent';\nimport { Log } from './Log';\n\nconst TAG = 'hisysEventUtil';\n\nexport function hiSysEventDataQueryTimedOut(interfaceName: string): number {\n  let timeOutId = setTimeout((): void => {\n    let params: Object = {\n      FAULT_ID: 'DATA_QUERY_OVERTIME',\n      MSG: interfaceName + ' Querying 1s data timed out.'\n    };\n    let info: hiSysEvent.SysEventInfo = {\n      domain: 'PHOTOS_APP',\n      name: 'PHOTOS_FAULT',\n      eventType: hiSysEvent.EventType.FAULT,\n      params: params\n    };\n    hiSysEvent.write(info, (err: Error): void => {\n      if (err != null) {\n        Log.error(TAG, 'fail to return hiSysEvent');\n      }\n    });\n  },1000);\n  return timeOutId;\n}\n", "llm_cg": {"hiSysEventDataQueryTimedOut(interfaceName: string)": ["hiSysEvent.write(info: hiSysEvent.SysEventInfo, callback: (err: Error) => void)", "Log.error(TAG: string, message: string)"]}, "static_cg": {"@test/53.ts: %dflt.hiSysEventDataQueryTimedOut(string)": ["@test/53.ts: %dflt.%AM0$hiSysEventDataQueryTimedOut()"], "@test/53.ts: %dflt.%AM0$hiSysEventDataQueryTimedOut()": ["@test/53.ts: %dflt.%AM1$%AM0$hiSysEventDataQueryTimedOut(Error)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport HiLog from '@ohos.hilog';\n\nexport class Log {\n  private static readonly DOMAIN = 0xF811;\n  private static readonly TAG: string = '[Sample_Photos]';\n  public static readonly LEVEL_DEBUG = HiLog.LogLevel.DEBUG;\n  public static readonly LEVEL_INFO = HiLog.LogLevel.INFO;\n  public static readonly LEVEL_WARN = HiLog.LogLevel.WARN;\n  public static readonly LEVEL_ERROR = HiLog.LogLevel.ERROR;\n  public static readonly LEVEL_FATAL = HiLog.LogLevel.FATAL;\n  public static LOG_LEVEL = Log.LEVEL_INFO;\n\n  public static debug(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_DEBUG) {\n      HiLog.debug(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }\n\n  public static info(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_INFO) {\n      HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }\n\n  public static warn(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_WARN) {\n      HiLog.warn(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }\n\n  public static error(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_ERROR) {\n      HiLog.error(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }\n\n  public static fatal(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_FATAL) {\n      HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }\n}", "llm_cg": {"Log.debug(TAG: string, message: string)": ["HiLog.debug(unknown, unknown, unknown)"], "Log.info(TAG: string, message: string)": ["HiLog.info(unknown, unknown, unknown)"], "Log.warn(TAG: string, message: string)": ["HiLog.warn(unknown, unknown, unknown)"], "Log.error(TAG: string, message: string)": ["HiLog.error(unknown, unknown, unknown)"], "Log.fatal(TAG: string, message: string)": ["HiLog.info(unknown, unknown, unknown)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface DialogCallback {\n  confirmCallback: Function | null;\n  cancelCallback: Function | undefined;\n}\n", "llm_cg": {"DialogCallback.confirmCallback": [], "DialogCallback.cancelCallback": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport i18n from '@ohos.i18n';\nimport Intl from '@ohos.intl';\n\nconst TAG = 'DateUtil';\n\nexport class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }\n\n  // Get the date after localization (year-month-day)\n  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }\n\n  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }\n\n  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }\n\n  // Gets the localization date of the photo page grouping data\n  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }\n\n  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }\n\n  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }\n\n  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }\n\n  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }\n\n  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }\n\n  // Format duration\n  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }\n\n  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }\n\n  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }\n\n  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }\n\n  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }\n\n  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }\n\n  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }\n}\n", "llm_cg": {"DateUtil.initLanguageLocalesMap()": [], "DateUtil.getLocalizedDate(number)": ["DateUtil.getLocales()", "Intl.DateTimeFormat.%AM0$DateTimeFormat(string, Object)"], "DateUtil.format(Date, string)": [], "DateUtil.getDateTimeFormat(number)": ["DateUtil.format(Date, string)"], "DateUtil.getGroupDataLocalizedDate(number)": ["DateUtil.getLocalizedDate(number)"], "DateUtil.getLocalizedYear(number)": ["DateUtil.getLocales()", "Intl.DateTimeFormat.%AM1$DateTimeFormat(string, Object)"], "DateUtil.getLocalizedYearAndMonth(number)": ["DateUtil.getLocales()", "Intl.DateTimeFormat.%AM2$DateTimeFormat(string, Object)"], "DateUtil.getLocalizedYearString(number)": ["DateUtil.getLocales()", "Intl.DateTimeFormat.%AM3$DateTimeFormat(string, Object)"], "DateUtil.getLocalizedTime(number)": ["DateUtil.getLocales()", "i18n.is24HourClock()", "Intl.DateTimeFormat.%AM4$DateTimeFormat(string, Object)"], "DateUtil.getLocales()": ["DateUtil.initLanguageLocalesMap()", "i18n.getSystemLanguage()"], "DateUtil.getFormattedDuration(number)": ["DateUtil.checkTime(number)"], "DateUtil.checkTime(number)": [], "DateUtil.isTheSameDay(number, number)": [], "DateUtil.isTheSameYear(number, number)": [], "DateUtil.buildDateTimeOpt(string, string, string, string, string)": [], "DateUtil.formats(string)": [], "DateUtil.nameByDate(Boolean, string)": ["DateUtil.formats(string)"]}, "static_cg": {"@test/56.ts: DateUtil.[static]getLocalizedDate(number)": ["@test/56.ts: DateUtil.[static]getLocales()", "@test/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)"], "@test/56.ts: DateUtil.[static]format(Date, string)": ["@test/56.ts: DateUtil.%AM0$format([format_s], number, string)"], "@test/56.ts: DateUtil.[static]getDateTimeFormat(number)": ["@test/56.ts: DateUtil.[static]format(Date, string)"], "@test/56.ts: DateUtil.[static]getGroupDataLocalizedDate(number)": ["@test/56.ts: DateUtil.[static]getLocalizedDate(number)"], "@test/56.ts: DateUtil.[static]getLocalizedYear(number)": ["@test/56.ts: DateUtil.[static]getLocales()", "@test/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)"], "@test/56.ts: DateUtil.[static]getLocalizedYearAndMonth(number)": ["@test/56.ts: DateUtil.[static]getLocales()", "@test/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)"], "@test/56.ts: DateUtil.[static]getLocalizedYearString(number)": ["@test/56.ts: DateUtil.[static]getLocales()", "@test/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)"], "@test/56.ts: DateUtil.[static]getLocalizedTime(number)": ["@test/56.ts: DateUtil.[static]getLocales()", "@test/56.ts: DateUtil.[static]buildDateTimeOpt(string, string, string, string, string)"], "@test/56.ts: DateUtil.[static]getLocales()": ["@test/56.ts: DateUtil.[static]initLanguageLocalesMap()"], "@test/56.ts: DateUtil.[static]getFormattedDuration(number)": ["@test/56.ts: DateUtil.[static]checkTime(number)"], "@test/56.ts: DateUtil.[static]formats(string)": ["@test/56.ts: DateUtil.%AM1$formats([format], number, string)"], "@test/56.ts: DateUtil.[static]nameByDate(Boolean, string)": ["@test/56.ts: DateUtil.[static]formats(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport prompt, { ShowToastOptions } from '@system.prompt';\nimport { Log } from './Log';\nimport { screenManager } from '../common/ScreenManager';\n\nconst TAG = 'UiUtil';\nconst TOAST_DURATION = 3000;\n\nexport function showToast(message: string): void {\n  let naviBarHeight = screenManager.getNaviBarHeight()\n  Log.debug(TAG, 'showToast: ' + message);\n  let showToastOptions: ShowToastOptions = {\n    message: message,\n    duration: TOAST_DURATION,\n    bottom: (64 + naviBarHeight) + 'vp'\n  };\n  prompt.showToast(showToastOptions);\n}\n", "llm_cg": {"UiUtil.showToast(message: string)": ["screenManager.getNaviBarHeight()", "Log.debug(TAG, 'showToast: ' + message)", "prompt.showToast(showToastOptions)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface UserFileObserverCallback {\n  onChange(mediaType: string): void;\n}", "llm_cg": {"UserFileObserverCallback.onChange(mediaType: string)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ViewType } from '../models/ViewType';\nimport { userFileModel } from './UserFileModel';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { selectManager } from '../common/SelectManager';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { screenManager } from '../common/ScreenManager';\n\nconst TAG = 'UserFileDataItem';\nconst STATUS_UNDEFINED = -1;\nconst STATUS_FALSE = 0;\nconst STATUS_TRUE = 1;\n\nexport interface DateAdded {\n  dateAdded: number;\n  viewType: ViewType;\n}\n\nexport class UserFileDataItem implements DateAdded {\n  viewType: ViewType = ViewType.ITEM;\n  readonly hashIndex: number;\n  index: number;\n  dateAdded: number = 0;\n  dateModified: number;\n  dateTaken: number;\n  status: number = MediaConstants.UNDEFINED;\n  isSelect: boolean = false;\n  uri: string;\n  orientation: number;\n  duration: number;\n  size: number;\n  width: number; // width changed by orientation\n  height: number; // height changed by orientation\n  imgWidth: number; // may be smaller than width, as width is too large\n  imgHeight: number; // may be smaller than height, as height is too large\n  path: string = '';\n  title: string;\n  displayName: string;\n  mediaType: photoAccessHelper.PhotoType;\n  favouriteStatus: number = STATUS_UNDEFINED;\n  canRotate: number = STATUS_UNDEFINED;\n  selections: string = '';\n  selectionArgs: string[] = [];\n  deviceId: string = '';\n  fileAsset: photoAccessHelper.PhotoAsset = undefined;\n  defaultThumbnail: PixelMap = undefined;\n  thumbnailArray: Map<string, PixelMap> = new Map<string, PixelMap>();\n\n  constructor(selections: string, selectionArgs: string[], deviceId: string, index: number) {\n    this.selections = selections;\n    this.selectionArgs = selectionArgs;\n    this.deviceId = deviceId;\n    this.hashIndex = index;\n    this.index = index;\n  }\n\n  getHashCode(): string {\n    // 时间线界面角度，收藏状态变更，都需要刷新界面；大图浏览界面角度变更，需要刷新界面\n    return this.status === MediaConstants.UNDEFINED ?\n      '' + this.hashIndex :\n      this.uri + this.favouriteStatus + ' ' + this.orientation + ' ' + this.isSelect;\n  }\n\n  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    return await userFileModel.getMediaItemByUri(this.uri);\n  }\n\n  isLoad(): boolean {\n    if (this.status > MediaConstants.UNDEFINED) {\n      return true;\n    }\n    return false;\n  }\n\n  async load(isForce: boolean): Promise<void> {\n    Log.info(TAG, 'load ' + this.status);\n    if (this.status > (isForce ? MediaConstants.PART_LOADED : MediaConstants.UNDEFINED)) {\n      return;\n    }\n    let fileAsset = await this.loadFileAsset();\n    if (fileAsset != null) {\n      this.update(fileAsset);\n    }\n    return;\n  }\n\n  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    this.fileAsset = fileAsset;\n    this.uri = fileAsset.uri;\n    this.displayName = fileAsset.displayName;\n    this.mediaType = fileAsset.photoType;\n    this.width = screenManager.getWinWidth();\n    this.height = screenManager.getWinHeight();\n    this.orientation = MediaConstants.ROTATE_NONE;\n    try {\n      this.orientation = fileAsset.get(photoAccessHelper.PhotoKeys.ORIENTATION.toString()) as number;\n      Log.info(TAG, 'orientation ' + this.orientation);\n    } catch (err) {\n      Log.error(TAG, 'get orientation ' + JSON.stringify(err));\n    }\n    try {\n      this.duration = fileAsset.get(photoAccessHelper.PhotoKeys.DURATION.toString()) as number;\n      Log.info(TAG, 'duration ' + this.duration);\n    } catch (err) {\n      Log.error(TAG, 'get duration ' + JSON.stringify(err));\n    }\n    try {\n      if (this.orientation === MediaConstants.ROTATE_ONCE || this.orientation === MediaConstants.ROTATE_THIRD) {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n      } else {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n      }\n      Log.info(TAG, 'width ' + this.width);\n      Log.info(TAG, 'height ' + this.height);\n    } catch (err) {\n      Log.error(TAG, 'get width height ' + JSON.stringify(err));\n    }\n    try {\n      this.title = fileAsset.get(photoAccessHelper.PhotoKeys.TITLE.toString()) as string;\n      Log.info(TAG, 'title ' + this.title);\n    } catch (err) {\n      Log.error(TAG, 'get title ' + JSON.stringify(err));\n    }\n    try {\n      this.dateAdded = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_ADDED.toString()) as number * 1000;\n      this.dateModified = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_MODIFIED.toString()) as number * 1000;\n      this.dateTaken = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_TAKEN.toString()) as number * 1000;\n      Log.info(TAG, 'dateAdded ' + this.dateAdded);\n    } catch (err) {\n      Log.error(TAG, 'get date ' + JSON.stringify(err));\n    }\n    try {\n      this.favouriteStatus = fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean ? STATUS_TRUE : STATUS_FALSE\n      Log.info(TAG, 'favouriteStatus ' + this.favouriteStatus);\n    } catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));\n    }\n    try {\n      this.size = fileAsset.get(photoAccessHelper.PhotoKeys.SIZE.toString()) as number;\n      Log.info(TAG, 'size ' + this.size);\n    } catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));\n    }\n    let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n    if (fileAsset != null && this.defaultThumbnail == undefined) {\n      try {\n        this.defaultThumbnail = await this.fileAsset.getThumbnail(size);\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    this.isSelect = selectManager.isSelect(this.uri, this.isSelect);\n    this.imgWidth = this.width;\n    this.imgHeight = this.height;\n    if (this.width > 0 && this.height > 0) {\n      this.status = MediaConstants.LOADED;\n    } else {\n      this.status = MediaConstants.PART_LOADED;\n    }\n  }\n\n  async getThumbnail(width: number, height: number): Promise<PixelMap> {\n    Log.debug(TAG, 'getThumbnail ' + this.status);\n    if (this.status !== MediaConstants.LOADED && this.status !== MediaConstants.PART_LOADED) {\n      Log.warn(TAG, 'getThumbnail fail as status: ' + this.status);\n      return undefined;\n    }\n    if (width === MediaConstants.DEFAULT_SIZE && height === MediaConstants.DEFAULT_SIZE) {\n      return this.defaultThumbnail;\n    }\n    let newThumbnail: PixelMap = undefined;\n    let size = { width: width, height: height };\n    let cacheThumbnail = this.thumbnailArray.get(width.toString() + height.toString());\n    if (cacheThumbnail != null) {\n      return cacheThumbnail;\n    }\n    if (this.fileAsset != undefined) {\n      try {\n        newThumbnail = await this.fileAsset.getThumbnail(size);\n        this.thumbnailArray.set(width.toString() + height.toString(), newThumbnail);\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return newThumbnail;\n  }\n\n  getAlt(): Resource {\n    if (this.mediaType === photoAccessHelper.PhotoType.VIDEO) {\n      return $r('app.media.alt_video_placeholder');\n    } else {\n      return $r('app.media.alt_placeholder');\n    }\n  }\n\n  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.uri, this.isSelect);\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      await userFileModel.deleteOne(this.uri);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete ' + this.index + ' error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  async addToAlbum(albumUri:string): Promise<boolean> {\n    try {\n      await userFileModel.addPhotoToAlbumByUserFileMgr(albumUri, this.uri);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'addToAlbum ' + this.index + ' error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }\n\n  async isFavor(): Promise<boolean> {\n    if (this.favouriteStatus === STATUS_UNDEFINED) {\n      let fileAsset = await this.loadFileAsset();\n      try {\n        this.favouriteStatus = (fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean) ? STATUS_TRUE : STATUS_FALSE;\n      } catch (err) {\n        Log.error(TAG, 'isFavor error: ' + JSON.stringify(err));\n      }\n    }\n    return this.favouriteStatus === STATUS_TRUE;\n  }\n\n  async setFavor(): Promise<boolean> {\n    let status = !(await this.isFavor());\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await fileAsset.setFavorite(status);\n      this.favouriteStatus = status ? STATUS_TRUE : STATUS_FALSE;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  async setName(name: string): Promise<void> {\n    let fileAsset = await this.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    this.displayName = displayName;\n    this.title = name;\n    try {\n      fileAsset.set(photoAccessHelper.PhotoKeys.TITLE.toString(), name);\n      await fileAsset.commitModify();\n    } catch (err) {\n      Log.error(TAG, 'setName error: ' + JSON.stringify(err));\n    }\n  }\n}\n", "llm_cg": {"UserFileDataItem.constructor(string, string[], string, number)": [], "UserFileDataItem.getHashCode()": [], "UserFileDataItem.loadFileAsset()": ["UserFileModel.getMediaItemByUri(string)"], "UserFileDataItem.isLoad()": [], "UserFileDataItem.load(boolean)": ["UserFileDataItem.loadFileAsset()", "UserFileDataItem.update(photoAccessHelper.PhotoAsset)"], "UserFileDataItem.update(photoAccessHelper.PhotoAsset)": ["ScreenManager.getWinWidth()", "ScreenManager.getWinHeight()", "SelectManager.isSelect(string, boolean)", "photoAccessHelper.PhotoAsset.get(string)", "photoAccessHelper.PhotoAsset.getThumbnail(object)"], "UserFileDataItem.getThumbnail(number, number)": ["photoAccessHelper.PhotoAsset.getThumbnail(object)"], "UserFileDataItem.getAlt()": [], "UserFileDataItem.setSelect(boolean)": ["SelectManager.setSelect(string, boolean)"], "UserFileDataItem.onDelete()": ["UserFileModel.deleteOne(string)", "SelectManager.deleteSelect(string)"], "UserFileDataItem.addToAlbum(string)": ["UserFileModel.addPhotoToAlbumByUserFileMgr(string, string)", "SelectManager.deleteSelect(string)"], "UserFileDataItem.isDeleted()": [], "UserFileDataItem.isFavor()": ["UserFileDataItem.loadFileAsset()", "photoAccessHelper.PhotoAsset.get(string)"], "UserFileDataItem.setFavor()": ["UserFileDataItem.isFavor()", "UserFileDataItem.loadFileAsset()", "photoAccessHelper.PhotoAsset.setFavorite(boolean)"], "UserFileDataItem.setName(string)": ["UserFileDataItem.loadFileAsset()", "photoAccessHelper.PhotoAsset.set(string, string)", "photoAccessHelper.PhotoAsset.commitModify()"]}, "static_cg": {"@test/59.ts: UserFileDataItem.load(boolean)": ["@test/59.ts: UserFileDataItem.loadFileAsset()", "@test/59.ts: UserFileDataItem.update(photoAccessHelper.PhotoAsset)"], "@test/59.ts: UserFileDataItem.isFavor()": ["@test/59.ts: UserFileDataItem.loadFileAsset()"], "@test/59.ts: UserFileDataItem.setFavor()": ["@test/59.ts: UserFileDataItem.isFavor()", "@test/59.ts: UserFileDataItem.loadFileAsset()"], "@test/59.ts: UserFileDataItem.setName(string)": ["@test/59.ts: UserFileDataItem.loadFileAsset()"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserFileDataItem } from './UserFileDataItem';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'UserFileDataItemCache';\n\nclass UserFileDataItemCache {\n    private userFileDataItemMap = new Map<string, UserFileDataItem>();\n\n    hasKey(key: string): boolean {\n        return this.userFileDataItemMap.has(key);\n    }\n\n    deleteKey(key: string): boolean {\n        return this.userFileDataItemMap.delete(key);\n    }\n\n    set(key: string, value: UserFileDataItem): void {\n        this.userFileDataItemMap.set(key, value);\n    }\n\n    get(key: string): UserFileDataItem {\n        return this.userFileDataItemMap.get(key);\n    }\n\n    clearAll(): void {\n        this.userFileDataItemMap.clear();\n    }\n}\n\nexport let userFileDataItemCache: UserFileDataItemCache = stashOrGetObject<UserFileDataItemCache>(new UserFileDataItemCache(), TAG);\n", "llm_cg": {"UserFileDataItemCache.hasKey(key: string)": [], "UserFileDataItemCache.deleteKey(key: string)": [], "UserFileDataItemCache.set(key: string, value: UserFileDataItem)": [], "UserFileDataItemCache.get(key: string)": [], "UserFileDataItemCache.clearAll()": []}, "static_cg": {"@test/60.ts: UserFileDataItemCache.set(string, UserFileDataItem)": ["@test/60.ts: UserFileDataItemCache.set(string, UserFileDataItem)"], "@test/60.ts: UserFileDataItemCache.get(string)": ["@test/60.ts: UserFileDataItemCache.get(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from './UserFileModel';\nimport { UserFileObserverCallback } from './UserFileObserverCallback';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nconst TAG = 'UserFileObserver';\n\nclass UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }\n\n  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }\n}\n\nexport let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);\n", "llm_cg": {"UserFileObserver.registerObserver(UserFileObserverCallback | null)": ["UserFileObserver.%AM0$sendNotify(string)", "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, boolean, Function)", "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, boolean, Function)"], "UserFileObserver.sendNotify(string)": ["UserFileObserverCallback.onChange(string)"], "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, boolean, Function)": ["UserFileObserver.%AM0$sendNotify(string)"], "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, boolean, Function)": ["UserFileObserver.%AM0$sendNotify(string)"]}, "static_cg": {"@test/61.ts: UserFileObserver.registerObserver(UserFileObserverCallback|null)": ["@test/61.ts: UserFileObserver.%AM0$registerObserver()", "@test/61.ts: UserFileObserver.%AM1$registerObserver()"], "@test/61.ts: UserFileObserver.%AM0$registerObserver()": ["@test/61.ts: UserFileObserver.sendNotify(string)"], "@test/61.ts: UserFileObserver.%AM1$registerObserver()": ["@test/61.ts: UserFileObserver.sendNotify(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TrashUserFileDataItem } from './TrashUserFileDataItem';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'TrashUserFileDataItemCache';\n\nclass TrashUserFileDataItemCache {\n  private trashMediaDataItemMap = new Map<string, TrashUserFileDataItem>();\n\n  hasKey(key: string): boolean {\n    return this.trashMediaDataItemMap.has(key);\n  }\n\n  deleteKey(key: string): boolean {\n    return this.trashMediaDataItemMap.delete(key);\n  }\n\n  set(key: string, value: TrashUserFileDataItem): void {\n    this.trashMediaDataItemMap.set(key, value);\n  }\n\n  get(key: string): TrashUserFileDataItem {\n    return this.trashMediaDataItemMap.get(key);\n  }\n\n  clearAll(): void {\n    this.trashMediaDataItemMap.clear();\n  }\n}\n\nexport let trashUserFileDataItemCache: TrashUserFileDataItemCache = stashOrGetObject<TrashUserFileDataItemCache>(new TrashUserFileDataItemCache(), TAG);\n", "llm_cg": {"TrashUserFileDataItemCache.hasKey(key)": [], "TrashUserFileDataItemCache.deleteKey(key)": [], "TrashUserFileDataItemCache.set(key, value)": [], "TrashUserFileDataItemCache.get(key)": [], "TrashUserFileDataItemCache.clearAll()": []}, "static_cg": {"@test/62.ts: TrashUserFileDataItemCache.set(string, TrashUserFileDataItem)": ["@test/62.ts: TrashUserFileDataItemCache.set(string, TrashUserFileDataItem)"], "@test/62.ts: TrashUserFileDataItemCache.get(string)": ["@test/62.ts: TrashUserFileDataItemCache.get(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from './UserFileModel';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from './UserFileDataItem';\n\nexport class FavorUserFileDataItem extends UserFileDataItem {\n  constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n  }\n\n  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    return await userFileModel.getMediaItemByUri(this.uri);\n  }\n\n  async setFavor(): Promise<boolean> {\n    let isSuccess: boolean = await super.setFavor();\n    let isFavor: boolean = await super.isFavor();\n    this.status = isFavor ? this.status : MediaConstants.TRASHED;\n    return isSuccess;\n  }\n}\n", "llm_cg": {"FavorUserFileDataItem.loadFileAsset()": ["userFileModel.getMediaItemByUri(string)"], "FavorUserFileDataItem.setFavor()": ["FavorUserFileDataItem.%AM0$setFavor()", "FavorUserFileDataItem.%AM1$isFavor()"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\n\nconst TAG = 'UserFileDataHelper';\n\nexport class Rotatable {\n  rotatable: boolean;\n  orientation: number;\n}\n\nfunction getPropertyValidOrientation(orientation: number): string {\n  Log.info(TAG, 'getPropertyValidOrientation ' + orientation);\n  if (orientation === MediaConstants.ROTATE_NONE) {\n    return '1';\n  } else if (orientation === MediaConstants.ROTATE_THIRD) {\n    return '8';\n  } else if (orientation === MediaConstants.ROTATE_TWICE) {\n    return '3';\n  } else if (orientation === MediaConstants.ROTATE_ONCE) {\n    return '6';\n  }\n  return '';\n}\n\nexport async function getAlbumDisplayName(name: string): Promise<string> {\n  if (name === MediaConstants.ALBUM_ID_ALL) {\n    return await getResourceString($r('app.string.album_all'));\n  } else if (name === MediaConstants.ALBUM_ID_VIDEO) {\n    return await getResourceString($r('app.string.album_video'));\n  } else if (name === MediaConstants.ALBUM_ID_RECYCLE) {\n    return await getResourceString($r('app.string.album_recycle'));\n  } else if (name === MediaConstants.ALBUM_ID_CAMERA) {\n    return await getResourceString($r('app.string.album_camera'));\n  } else if (name === MediaConstants.ALBUM_ID_FAVOR) {\n    return await getResourceString($r('app.string.album_favor'));\n  } else if (name === MediaConstants.ALBUM_ID_REMOTE) {\n    return await getResourceString($r('app.string.album_remote_device'));\n  } else if (name === MediaConstants.ALBUM_ID_SNAPSHOT) {\n    return await getResourceString($r('app.string.album_screen_shot'));\n  } else if (name === MediaConstants.ALBUM_ID_MOVING_PHOTO) {\n    return await getResourceString($r('app.string.album_moving_photo'));\n  }\n  return null;\n}\n\nexport async function getSystemAlbumDisplayName(): Promise<string[]> {\n  let albumNames = [];\n  albumNames.push(await getResourceString($r('app.string.album_all')));\n  albumNames.push(await getResourceString($r('app.string.album_video')));\n  albumNames.push(await getResourceString($r('app.string.album_recycle')));\n  albumNames.push(await getResourceString($r('app.string.album_camera')));\n  albumNames.push(await getResourceString($r('app.string.album_favor')));\n  albumNames.push(await getResourceString($r('app.string.album_remote_device')));\n  albumNames.push(await getResourceString($r('app.string.album_screen_shot')));\n  albumNames.push(await getResourceString($r('app.string.album_moving_photo')));\n  return albumNames;\n}", "llm_cg": {"getPropertyValidOrientation(orientation: number)": ["Log.info(TAG, 'getPropertyValidOrientation ' + orientation)"], "getAlbumDisplayName(name: string)": ["getResourceString($r('app.string.album_all'))", "getResourceString($r('app.string.album_video'))", "getResourceString($r('app.string.album_recycle'))", "getResourceString($r('app.string.album_camera'))", "getResourceString($r('app.string.album_favor'))", "getResourceString($r('app.string.album_remote_device'))", "getResourceString($r('app.string.album_screen_shot'))", "getResourceString($r('app.string.album_moving_photo'))"], "getSystemAlbumDisplayName()": ["getResourceString($r('app.string.album_all'))", "getResourceString($r('app.string.album_video'))", "getResourceString($r('app.string.album_recycle'))", "getResourceString($r('app.string.album_camera'))", "getResourceString($r('app.string.album_favor'))", "getResourceString($r('app.string.album_remote_device'))", "getResourceString($r('app.string.album_screen_shot'))", "getResourceString($r('app.string.album_moving_photo'))"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from './UserFileDataItem';\nimport { screenManager } from '../common/ScreenManager';\n\nexport class InnerUserFileDataItem extends UserFileDataItem {\n  constructor(uri: string, index: number) {\n    super('', [] as string[], '', index);\n    this.mediaType = photoAccessHelper.PhotoType.IMAGE;\n    this.uri = uri;\n    this.size = 256;\n    this.orientation = 0;\n  }\n\n  async load(isForce: boolean): Promise<void> {\n    if (this.status > (isForce ? MediaConstants.PART_LOADED : MediaConstants.UNDEFINED)) {\n      return;\n    }\n    this.width = vp2px(screenManager.getWinWidth());\n    this.height = vp2px(screenManager.getWinHeight());\n    if (this.width === 0 || this.height === 0) {\n      this.status = MediaConstants.PART_LOADED;\n    } else {\n      this.status = MediaConstants.LOADED;\n    }\n  }\n\n  async isFavor(): Promise<boolean> {\n    return false;\n  }\n}", "llm_cg": {"InnerUserFileDataItem.load(isForce: boolean)": ["screenManager.getWinWidth()", "screenManager.getWinHeight()", "vp2px(unknown)", "vp2px(unknown)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { selectManager } from '../common/SelectManager';\nimport { userFileModel } from './UserFileModel';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from './UserFileDataItem';\n\nconst TAG = 'TrashUserFileDataItem';\n\nexport class TrashUserFileDataItem extends UserFileDataItem {\n  constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n    this.setSelect(false);\n  }\n\n  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    Log.debug(TAG, 'loadFileAsset' + this.uri);\n    return await userFileModel.getMediaItemByUriFromTrash(this.uri);\n  }\n\n  async onRecover(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      if (fileAsset == null) {\n        Log.error(TAG, 'onRecover error: cant find file');\n        return false;\n      }\n      await userFileModel.recover(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n\n  async onDelete(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await userFileModel.permanentDelete(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }\n}\n", "llm_cg": {"TrashUserFileDataItem.loadFileAsset()": ["Log.debug(TAG, 'loadFileAsset' + this.uri)", "userFileModel.getMediaItemByUriFromTrash(this.uri)"], "TrashUserFileDataItem.onRecover()": ["TrashUserFileDataItem.loadFileAsset()", "Log.error(TAG, 'onRecover error: cant find file')", "userFileModel.recover(fileAsset)", "selectManager.deleteSelect(this.uri)", "Log.error(TAG, 'onRecover error: ' + JSON.stringify(err))"], "TrashUserFileDataItem.onDelete()": ["TrashUserFileDataItem.loadFileAsset()", "userFileModel.permanentDelete(fileAsset)", "selectManager.deleteSelect(this.uri)", "Log.error(TAG, 'onDelete error: ' + JSON.stringify(err))"]}, "static_cg": {"@test/66.ts: TrashUserFileDataItem.onRecover()": ["@test/66.ts: TrashUserFileDataItem.loadFileAsset()"], "@test/66.ts: TrashUserFileDataItem.onDelete()": ["@test/66.ts: TrashUserFileDataItem.loadFileAsset()"]}}
{"source_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fileIO from '@ohos.fileio';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { hiSysEventDataQueryTimedOut } from '../utils/hisysEventUtil';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\nimport { MediaConstants } from '../constants/MediaConstants'\nimport { getSystemAlbumDisplayName } from './UserFileDataHelper';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\n\nconst TAG = 'UserFileModel';\n\nexport class UserFileModelItem {\n  fileAsset: photoAccessHelper.PhotoAsset;\n  counts: number;\n}\n\nclass UserFileModel {\n  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;\n\n  constructor() {\n  }\n\n  onCreate(context): void {\n    if (this.userFileMgr == undefined) {\n      this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);\n    }\n  }\n\n  getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;\n  }\n\n  async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);\n    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    await album.addAssets([fileAsset]);\n    return fileAsset;\n  }\n\n  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }\n\n  async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n    let fd: Number = await this.openAsset('R', source);\n    if (fd <= 0) {\n      throw new Error('fd is invalid');\n    }\n\n    let targetFd: Number = await this.openAsset('RW', target);\n    if (targetFd <= 0) {\n      throw new Error('targetFd is invalid');\n    }\n\n    await fileIO.copyFile(fd, targetFd);\n\n    await this.closeAsset(fd, source);\n    await this.closeAsset(targetFd, target);\n\n    Log.debug(TAG, 'copy end');\n  }\n\n  async deleteOne(uri: string): Promise<void> {\n    Log.debug(TAG, 'deleteAsset uri: ' + uri);\n    try {\n      await this.userFileMgr.deleteAssets([uri]);\n    } catch (err) {\n      Log.error(TAG, 'deleteOne with error: ' + err);\n    }\n  }\n\n  async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }\n\n  async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\n    let newAlbum: SimpleAlbumDataItem = undefined;\n    try {\n      let album = await this.userFileMgr.createAlbum(albumName);\n      newAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri,\n        '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);\n    } catch (err) {\n      Log.error(TAG, 'createAlbum failed with error: ' + err);\n    }\n    return newAlbum;\n  }\n\n  async deleteAlbum(albumName: string): Promise<void> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\n        Log.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\n        this.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }).catch((err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        });\n      }\n    } catch (err) {\n      Log.error(TAG, 'deletePhotoAlbumsPromise failed with error: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }\n\n  async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n    Log.info(TAG, 'deleteAll');\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n      Log.debug(TAG, 'deleteAll getPhotoAssets');\n      let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n      let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n      clearTimeout(deleteAllGetAllObject);\n      for (let i = 0;i < fileAssets.length; i++) {\n        await this.deleteOne(fileAssets[i].uri);\n      }\n      Log.debug(TAG, 'deleteAll getFirstObject');\n    } catch (err) {\n      Log.error(TAG, 'deleteAll error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'deleteAll finish');\n  }\n\n  async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let emptyFetchOption = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\n      Log.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());\n      for (let i = 0;i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMediaItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\n      for (let i = 0; i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }\n\n  async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAllMediaItemsByUserFile');\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {\n        Log.info(TAG, 'albumFetchOption ！= null');\n        fetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\n      } else {\n        fetchResult = await this.userFileMgr.getAlbums(type, subType);\n      }\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        try {\n          photoFetchResult = await albumAsset.getAssets(fileFetchOption);\n          for (let i = 0; i < photoFetchResult.getCount(); i++) {\n            let photoAsset = await photoFetchResult.getObjectByPosition(i);\n            fileAssets.push(photoAsset);\n            Log.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n          }\n        } catch (err) {\n          Log.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.info(TAG, 'fileAssets: ' + fileAssets.length);\n    return fileAssets;\n  }\n\n  async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n      try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);\n        for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }\n      } catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      } finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {\n      Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return fileAsset;\n  }\n\n  async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\n    Log.info(TAG, 'getMediaItemCountsByDisplayName');\n    let count = 0;\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\n      count = await fetchFileResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'getMediaItemCountsByDisplayName finish');\n    return count;\n  }\n\n  async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\n    if (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }\n\n  async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n    Log.info(TAG, 'getActivePeers');\n    let peers: photoAccessHelper.PeerInfo[] = [];\n    try {\n      let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n      peers = await this.userFileMgr.getActivePeers();\n      clearTimeout(getActivePeers);\n    } catch (err) {\n      Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getActivePeers finish');\n    return peers;\n  }\n\n  async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }\n\n  async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\n    Log.info(TAG, 'getAlbums');\n    let albums: photoAccessHelper.Album[] = [];\n    try {\n      albums = await this.userFileMgr.getAlbums(fetchOption);\n      Log.info(TAG, 'getAlbums albums ' + albums.getCounts());\n    } catch (err) {\n      Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getAlbums finish');\n    return albums;\n  }\n\n  async openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset): Promise<number> {\n    Log.debug(TAG, 'openAsset start');\n    let fd: number = await fileAsset.open(mode);\n    Log.info(TAG, 'openAsset end. fd: ' + fd);\n    if (fd <= 0) {\n      Log.info(TAG, 'openAsset Fail');\n    }\n    return fd;\n  }\n\n  async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.debug(TAG, 'closeAsset start');\n    await fileAsset.close(fd);\n  }\n\n  async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\n    Log.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);\n    try {\n      let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      this.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      });\n    } catch (err) {\n      Log.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);\n    }\n  }\n}\n\nexport let userFileModel: UserFileModel = stashOrGetObject<UserFileModel>(new UserFileModel(), TAG);\n", "llm_cg": {"UserFileModel.onCreate(context)": ["photoAccessHelper.getPhotoAccessHelper(context)"], "UserFileModel.createOne(displayName: string, albumUri: string)": ["UserFileModel.userFileMgr.createAsset(displayName, albumUri)", "UserFileModel.getUserAlbumItemByUri(albumUri)", "photoAccessHelper.Album.addAssets([fileAsset])"], "UserFileModel.getUserAlbumItemByUri(uri: string)": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.FetchResult.close()"], "UserFileModel.copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset)": ["UserFileModel.openAsset('R', source)", "UserFileModel.openAsset('RW', target)", "fileIO.copyFile(fd, targetFd)", "UserFileModel.closeAsset(fd, source)", "UserFileModel.closeAsset(targetFd, target)"], "UserFileModel.deleteOne(uri: string)": ["UserFileModel.userFileMgr.deleteAssets([uri])"], "UserFileModel.recover(fileAsset: photoAccessHelper.PhotoAsset)": ["UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH)", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.Album.recoverAssets([fileAsset])", "photoAccessHelper.FetchResult.close()"], "UserFileModel.permanentDelete(fileAsset: photoAccessHelper.PhotoAsset)": ["UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH)", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.Album.deleteAssets([fileAsset])", "photoAccessHelper.FetchResult.close()"], "UserFileModel.createAlbum(albumName: string)": ["UserFileModel.userFileMgr.createAlbum(albumName)", "SimpleAlbumDataItem.%AM0$SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri, '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC)"], "UserFileModel.deleteAlbum(albumName: string)": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "UserFileModel.userFileMgr.deleteAlbums([albumAsset])", "photoAccessHelper.FetchResult.close()"], "UserFileModel.deleteAll(fetchOption: photoAccessHelper.FetchOptions)": ["UserFileModel.userFileMgr.getAssets(fetchOption)", "photoAccessHelper.FetchResult.getAllObject()", "UserFileModel.deleteOne(fileAssets[i].uri)", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getAllMediaItems()": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAssets(emptyFetchOption)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getAllMovingPhotoItems()": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAssets(fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption)": ["UserFileModel.userFileMgr.getAlbums(type, subType, albumFetchOption)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "photoAccessHelper.Album.getAssets(fileFetchOption)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getMediaItemByUriFromTrash(uri: string)": ["UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH)", "photoAccessHelper.FetchResult.getFirstObject()", "dataSharePredicates.DataSharePredicates()", "photoAccessHelper.Album.getAssets(emptyFetchOption)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getObjectByPosition(i)", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getMediaItemByUri(uri: string)": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAssets(fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getMediaItemCountsByDisplayName(displayName: string)": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAssets(fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getUserAlbumCountByName(albumName: string)": ["getSystemAlbumDisplayName()", "dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getActivePeers()": ["UserFileModel.userFileMgr.getActivePeers()"], "UserFileModel.getUserAlbumByName(albumName: string)": ["dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions)", "photoAccessHelper.FetchResult.getCount()", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.FetchResult.close()"], "UserFileModel.getAlbums(fetchOption: photoAccessHelper.FetchOptions)": ["UserFileModel.userFileMgr.getAlbums(fetchOption)"], "UserFileModel.openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset)": ["photoAccessHelper.PhotoAsset.open(mode)"], "UserFileModel.closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset)": ["photoAccessHelper.PhotoAsset.close(fd)"], "UserFileModel.addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string)": ["UserFileModel.getUserAlbumItemByUri(albumUri)", "dataSharePredicates.DataSharePredicates()", "UserFileModel.userFileMgr.getAssets(fetchOptions, async (err, fetchResult))", "photoAccessHelper.FetchResult.getFirstObject()", "photoAccessHelper.Album.addAssets([fileAsset])", "photoAccessHelper.FetchResult.close()"]}, "static_cg": {"@test/67.ts: %dflt.[static]%dflt()": ["@test/67.ts: UserFileModel.constructor()"], "@test/67.ts: UserFileModel.createOne(string, string)": ["@test/67.ts: UserFileModel.getUserAlbumItemByUri(string)"], "@test/67.ts: UserFileModel.copyOne(photoAccessHelper.PhotoAsset, photoAccessHelper.PhotoAsset)": ["@test/67.ts: UserFileModel.openAsset(string, photoAccessHelper.PhotoAsset)", "@test/67.ts: UserFileModel.closeAsset(number, photoAccessHelper.PhotoAsset)"], "@test/67.ts: UserFileModel.recover(photoAccessHelper.PhotoAsset)": ["@test/67.ts: UserFileModel.%AM1$recover()", "@test/67.ts: UserFileModel.%AM0$recover(unknown)"], "@test/67.ts: UserFileModel.permanentDelete(photoAccessHelper.PhotoAsset)": ["@test/67.ts: UserFileModel.%AM3$permanentDelete()", "@test/67.ts: UserFileModel.%AM2$permanentDelete(unknown)"], "@test/67.ts: UserFileModel.deleteAlbum(string)": ["@test/67.ts: UserFileModel.%AM5$deleteAlbum()", "@test/67.ts: UserFileModel.%AM4$deleteAlbum(unknown)"], "@test/67.ts: UserFileModel.deleteAll(photoAccessHelper.FetchOptions)": ["@test/67.ts: UserFileModel.deleteOne(string)"], "@test/67.ts: UserFileModel.addPhotoToAlbumByUserFileMgr(string, string)": ["@test/67.ts: UserFileModel.getUserAlbumItemByUri(string)", "@test/67.ts: UserFileModel.%AM6$addPhotoToAlbumByUserFileMgr([album], unknown, unknown)"], "@test/67.ts: UserFileModel.%AM6$addPhotoToAlbumByUserFileMgr([album], unknown, unknown)": ["@test/67.ts: UserFileModel.%AM8$%AM6$addPhotoToAlbumByUserFileMgr()", "@test/67.ts: UserFileModel.%AM7$%AM6$addPhotoToAlbumByUserFileMgr(unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface UserFileDataChangeCallback {\n  onUserFileDataChange(mediaType: string): void;\n}", "llm_cg": {"UserFileDataChangeCallback.onUserFileDataChange(mediaType: string)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum JumpSourceToMain {\n  None,\n  CAMERA,\n  ALBUM\n}", "llm_cg": {"JumpSourceToMain.None": [], "JumpSourceToMain.CAMERA": [], "JumpSourceToMain.ALBUM": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ActionBarMode {\n  STANDARD_MODE,\n  DETAIL_MODE,\n  SELECTION_MODE,\n  TOP_MODE\n}\n\nexport enum ActionBarColorMode {\n  NORMAL,\n  TRANSPARENT,\n}\n\nexport enum ActionBarSelectionMode {\n  SINGLE,\n  MULTI,\n}", "llm_cg": {"ActionBarMode.STANDARD_MODE": [], "ActionBarMode.DETAIL_MODE": [], "ActionBarMode.SELECTION_MODE": [], "ActionBarMode.TOP_MODE": [], "ActionBarColorMode.NORMAL": [], "ActionBarColorMode.TRANSPARENT": [], "ActionBarSelectionMode.SINGLE": [], "ActionBarSelectionMode.MULTI": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { screenManager } from '../common/ScreenManager';\nimport { computeSampleSize } from '../utils/ImageUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nexport async function getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean): Promise<PixelMap> {\n  await mediaItem.load(true);\n  let imgWidth = mediaItem.width;\n  let imgHeight = mediaItem.height;\n  let scale = generateSampleSize(imgWidth, imgHeight, isCurrent);\n  mediaItem.imgWidth = Math.ceil(mediaItem.width / scale);\n  mediaItem.imgHeight = Math.ceil(mediaItem.height / scale);\n  imgWidth = Math.ceil(imgWidth / scale);\n  imgHeight = Math.ceil(imgHeight / scale);\n  return await mediaItem.getThumbnail(imgWidth, imgHeight);\n}\n\nfunction generateSampleSize(imageWidth: number, imageHeight: number, isCurrent: boolean): number {\n  let width = vp2px(screenManager.getWinWidth());\n  let height = vp2px(screenManager.getWinHeight());\n  width = width === 0 ? screenManager.DEFAULT_WIDTH : width;\n  height = height === 0 ? screenManager.DEFAULT_HEIGHT : height;\n  let maxNumOfPixels;\n  if (isCurrent) {\n    maxNumOfPixels = 2 * width * height;\n  } else {\n    maxNumOfPixels = width * height;\n  }\n  let minSide = Math.min(width, height);\n  return computeSampleSize(imageWidth, imageHeight, minSide, maxNumOfPixels);\n}", "llm_cg": {"getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean)": ["UserFileDataItem.load(boolean)", "UserFileDataItem.getThumbnail(number, number)"], "generateSampleSize(imageWidth: number, imageHeight: number, isCurrent: boolean)": ["screenManager.getWinWidth()", "screenManager.getWinHeight()", "computeSampleSize(number, number, number, number)"]}, "static_cg": {"@test/71.ts: %dflt.getThumbnail(UserFileDataItem, boolean)": ["@test/71.ts: %dflt.generateSampleSize(number, number, boolean)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action'\nimport { ActionBarProp } from '../common/ActionBarProp'\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode'\nimport { screenManager } from '../common/ScreenManager'\n\nexport class AlbumBarModel {\n  createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean,\n                  selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): void {\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                                    isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n    let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      menuList.push(Action.NEW)\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n    menuList.push(Action.NEW);\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isAlbumSetSelectedMode) {\n      menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n      menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\n    }\n    return menuList;\n  }\n}\n", "llm_cg": {"AlbumBarModel.createActionBar(boolean, number, boolean, boolean)": ["AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)", "AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)"], "AlbumBarModel.updateActionBar(ActionBarProp, boolean, number, boolean, boolean)": ["AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)", "AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)"], "AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)": ["AlbumBarModel.getMenuList(boolean, number, boolean, boolean)"], "AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)": [], "AlbumBarModel.getMenuList(boolean, number, boolean, boolean)": []}, "static_cg": {"@test/72.ts: AlbumBarModel.createActionBar(boolean, number, boolean, boolean)": ["@test/72.ts: AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)", "@test/72.ts: AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)"], "@test/72.ts: AlbumBarModel.updateActionBar(ActionBarProp, boolean, number, boolean, boolean)": ["@test/72.ts: AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)", "@test/72.ts: AlbumBarModel.updateVerticalActionBar(ActionBarProp, boolean)"], "@test/72.ts: AlbumBarModel.updateHorizontalActionBar(ActionBarProp, boolean, number, boolean, boolean)": ["@test/72.ts: AlbumBarModel.getMenuList(boolean, number, boolean, boolean)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action';\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode';\nimport { ActionBarProp } from '../common/ActionBarProp';\n\nexport class NewAlbumBarModel {\n  createActionBar(isSelectedMode: boolean, selectedCount: number): ActionBarProp {\n    let menuList: Action[] = [];\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    menuList.push((new Boolean(selectedCount)) ? Action.OK : Action.OK_DISABLE)\n    actionBarProp\n      .setLeftAction(Action.CANCEL)\n      .setMode(ActionBarMode.SELECTION_MODE)\n      .setSelectionMode(ActionBarSelectionMode.MULTI)\n      .setMenuList(menuList);\n    return actionBarProp;\n  }\n}\n", "llm_cg": {"NewAlbumBarModel.createActionBar(isSelectedMode: boolean, selectedCount: number)": ["ActionBarProp.setLeftAction(Action.CANCEL)", "ActionBarProp.setMode(ActionBarMode.SELECTION_MODE)", "ActionBarProp.setSelectionMode(ActionBarSelectionMode.MULTI)", "ActionBarProp.setMenuList(menuList)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nenum ActionID {\n  NONE,\n  OK,\n  OK_DISABLE,\n  CANCEL,\n  BACK,\n  INFO,\n  INFO_INVALID,\n  DELETE,\n  DELETE_RECYCLE,\n  CLEAR_RECYCLE,\n  DELETE_INVALID,\n  RECOVER,\n  RECOVER_INVALID,\n  FAVORITE,\n  NOT_FAVORITE,\n  UN_SELECTED,\n  SELECTED,\n  SELECT_ALL,\n  DESELECT_ALL,\n  SETTING,\n  NAVIGATION,\n  MATERIAL_SELECT,\n  GOTO_PHOTOS,\n  SHARE,\n  SHARE_INVALID,\n  EDIT,\n  EDIT_INVALID,\n  MORE,\n  NEW,\n  RENAME,\n  RENAME_INVALID,\n  ADD_NOTES,\n  ROTATE,\n  MOVE,\n  MOVE_INVALID,\n  REMOVE,\n  REMOVE_INVALID,\n  COPY,\n  COPY_INVALID,\n  NAVIGATION_ALBUMS,\n  DOWNLOAD,\n  DOWNLOAD_INVALID,\n  CLEAR_RECYCLE_INVALID\n}\n\nclass ActionOptions {\n  id: number = ActionID.NONE;\n  iconRes: Resource | null = null;\n  textRes: Resource | null = null;\n  isAutoTint: boolean | null = null;\n  fillColor: Resource | null = null;\n  actionType: Resource | null = null;\n}\n\nexport class Action {\n  public static NONE = new Action({\n    id: ActionID.NONE,\n    iconRes: null,\n    textRes: null,\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static OK = new Action({\n    id: ActionID.OK,\n    iconRes: $r('app.media.ic_gallery_public_ok'),\n    textRes: $r('app.string.action_ok'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static OK_DISABLE = new Action({\n    id: ActionID.OK_DISABLE,\n    iconRes: $r('app.media.ic_gallery_public_ok'),\n    textRes: $r('app.string.action_ok'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: null\n  });\n  public static CANCEL = new Action({\n    id: ActionID.CANCEL,\n    iconRes: $r('app.media.ic_gallery_public_cancel'),\n    textRes: $r('app.string.action_cancel'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static BACK = new Action({\n    id: ActionID.BACK,\n    iconRes: $r('app.media.ic_gallery_public_back'),\n    textRes: $r('app.string.action_back'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static INFO = new Action({\n    id: ActionID.INFO,\n    iconRes: $r('app.media.ic_gallery_public_details'),\n    textRes: $r('app.string.action_info'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static INFO_INVALID = new Action({\n    id: ActionID.INFO,\n    iconRes: $r('app.media.ic_gallery_public_details'),\n    textRes: $r('app.string.action_info'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: null\n  });\n  public static DELETE = new Action({\n    id: ActionID.DELETE,\n    iconRes: $r('app.media.ic_gallery_public_delete_line'),\n    textRes: $r('app.string.action_delete'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_delete')\n  });\n  public static DELETE_RECYCLE = new Action({\n    id: ActionID.DELETE_RECYCLE,\n    iconRes: $r('app.media.ic_gallery_public_delete_line'),\n    textRes: $r('app.string.action_delete'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_delete')\n  });\n  public static CLEAR_RECYCLE = new Action({\n    id: ActionID.CLEAR_RECYCLE,\n    iconRes: $r('app.media.ic_gallery_public_delete_line'),\n    textRes: $r('app.string.action_clear_recycle'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_clear_recycle')\n  });\n  public static CLEAR_RECYCLE_INVALID = new Action({\n    id: ActionID.CLEAR_RECYCLE_INVALID,\n    iconRes: $r('app.media.ic_gallery_public_delete_line'),\n    textRes: $r('app.string.action_clear_recycle'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: $r('app.string.action_delete')\n  });\n  public static DELETE_INVALID = new Action({\n    id: ActionID.DELETE_INVALID,\n    iconRes: $r('app.media.ic_gallery_public_delete_line'),\n    textRes: $r('app.string.action_delete'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: $r('app.string.action_delete_invalid')\n  });\n  public static RECOVER = new Action({\n    id: ActionID.RECOVER,\n    iconRes: $r('app.media.ic_gallery_public_undo'),\n    textRes: $r('app.string.action_recover'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_recover')\n  });\n  public static RECOVER_INVALID = new Action({\n    id: ActionID.RECOVER_INVALID,\n    iconRes: $r('app.media.ic_gallery_public_undo'),\n    textRes: $r('app.string.action_recover'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: $r('app.string.action_recover')\n  });\n  public static FAVORITE = new Action({\n    id: ActionID.FAVORITE,\n    iconRes: $r('app.media.ic_gallery_public_Favorite_filled'),\n    textRes: $r('app.string.action_favorite'),\n    isAutoTint: null,\n    fillColor: $r('app.color.color_system_highlight'),\n    actionType: $r('app.string.action_favorite')\n  });\n  public static NOT_FAVORITE = new Action({\n    id: ActionID.NOT_FAVORITE,\n    iconRes: $r('app.media.ic_gallery_public_favorite_line'),\n    textRes: $r('app.string.action_not_favorite'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_not_favorite')\n  });\n  public static UN_SELECTED = new Action({\n    id: ActionID.UN_SELECTED,\n    iconRes: $r('app.media.ic_checkbox_off'),\n    textRes: $r('app.string.action_unselected'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_unselected')\n  });\n  public static SELECTED = new Action({\n    id: ActionID.SELECTED,\n    iconRes: $r('app.media.ic_gallery_public_checkbox_filled'),\n    textRes: $r('app.string.action_selected'),\n    isAutoTint: false,\n    fillColor: null,\n    actionType: $r('app.string.action_selected')\n  });\n  public static SELECT_ALL = new Action({\n    id: ActionID.SELECT_ALL,\n    iconRes: $r('app.media.ic_gallery_public_select_all'),\n    textRes: $r('app.string.action_select_all'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_select_all')\n  });\n  public static DESELECT_ALL = new Action({\n    id: ActionID.DESELECT_ALL,\n    iconRes: $r('app.media.ic_gallery_public_select_all_action'),\n    textRes: $r('app.string.action_deselect_all'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_deselect_all')\n  });\n  public static SETTING = new Action({\n    id: ActionID.SETTING,\n    iconRes: null,\n    textRes: $r('app.string.action_setting'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static NAVIGATION = new Action({\n    id: ActionID.NAVIGATION,\n    iconRes: null,\n    textRes: $r('app.string.action_navigation'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static MATERIAL_SELECT = new Action({\n    id: ActionID.MATERIAL_SELECT,\n    iconRes: $r('app.media.ic_checkbox_off_overlay'),\n    textRes: $r('app.string.action_material_select'),\n    isAutoTint: false,\n    fillColor: null,\n    actionType: $r('app.string.action_selected')\n  });\n  public static GOTO_PHOTOS = new Action({\n    id: ActionID.GOTO_PHOTOS,\n    iconRes: $r('app.media.ic_goto_photos'),\n    textRes: $r('app.string.action_goto_photos'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static MORE = new Action({\n    id: ActionID.MORE,\n    iconRes: $r('app.media.ic_gallery_public_more'),\n    textRes: $r('app.string.action_more'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static NEW = new Action({\n    id: ActionID.NEW,\n    iconRes: $r('app.media.ic_gallery_public_new'),\n    textRes: $r('app.string.action_new'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static RENAME = new Action({\n    id: ActionID.RENAME,\n    iconRes: $r('app.media.ic_gallery_public_rename'),\n    textRes: $r('app.string.action_rename'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: $r('app.string.action_rename')\n  });\n  public static RENAME_INVALID = new Action({\n    id: ActionID.RENAME_INVALID,\n    iconRes: $r('app.media.ic_gallery_public_rename'),\n    textRes: $r('app.string.action_rename'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: $r('app.string.action_deRename')\n  });\n  public static MOVE = new Action({\n    id: ActionID.MOVE,\n    iconRes: null,\n    textRes: $r('app.string.action_move_to_album'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static MOVE_INVALID = new Action({\n    id: ActionID.MOVE_INVALID,\n    iconRes: null,\n    textRes: $r('app.string.action_move_to_album'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: null\n  });\n  public static REMOVE = new Action({\n    id: ActionID.REMOVE,\n    iconRes: null,\n    textRes: $r('app.string.action_remove_from_album'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static REMOVE_INVALID = new Action({\n    id: ActionID.REMOVE_INVALID,\n    iconRes: null,\n    textRes: $r('app.string.action_remove_from_album'),\n    isAutoTint: null,\n    fillColor: $r('app.color.icon_disabled_color'),\n    actionType: null\n  });\n  public static NAVIGATION_ALBUMS = new Action({\n    id: ActionID.NAVIGATION_ALBUMS,\n    iconRes: $r('app.media.ic_navigation_albums_line'),\n    textRes: $r('app.string.rotate_text'),\n    isAutoTint: null,\n    fillColor: null,\n    actionType: null\n  });\n  public static ICON_DEFAULT_COLOR: Resource = $r('app.color.icon_default_color');\n  public static ICON_DEFAULT_COLOR_CONTRARY: Resource = $r('app.color.icon_default_color_contrary');\n  readonly actionID: number;\n  readonly textRes: Resource;\n  readonly iconRes: Resource = $r('app.media.ic_gallery_public_more');\n  readonly isAutoTint: boolean = true;\n  readonly fillColor: Resource = $r('app.color.icon_default_color');\n  readonly actionType: Resource; // It is used to distinguish whether it is the same type of action\n\n  constructor(options: ActionOptions) {\n    this.actionID = options.id;\n    this.textRes = options.textRes;\n    if (options.iconRes != null) {\n      this.iconRes = options.iconRes;\n    }\n    if (options.isAutoTint != null) {\n      this.isAutoTint = options.isAutoTint;\n    }\n    if (options.fillColor != null) {\n      this.fillColor = options.fillColor;\n    }\n    if (options.actionType != null) {\n      this.actionType = options.actionType;\n    }\n  }\n\n  public equals(action: Action): boolean {\n    return (action) ? (action.actionID === this.actionID) : false;\n  }\n}\n", "llm_cg": {"Action.constructor(ActionOptions)": ["Action.%AM0$constructor(unknown, unknown)"], "Action.equals(Action)": []}, "static_cg": {"@test/74.ts: Action.%statInit()": ["@test/74.ts: Action.constructor(@test/74.ts: ActionOptions)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action';\nimport { ActionBarProp } from '../common/ActionBarProp';\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode';\nimport { screenManager } from '../common/ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\n\nexport class PhotoGridBarModel {\n  private albumId: string = '';\n\n  setAlbumId(albumId: string): void {\n    this.albumId = albumId;\n  }\n\n  createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number,\n                  isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n    return actionBarProp;\n  }\n\n  updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                  selectedCount: number, isAllSelected: boolean, isEmpty: boolean): void {\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n  }\n\n  private updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                                    selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    if (isSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n        menuList.push(Action.NEW);\n      }\n    }\n    actionBarProp.setMenuList(menuList);\n    return actionBarProp;\n  }\n\n  private updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n\n    if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n      menuList.push(Action.NEW);\n    }\n\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMenuList(menuList)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    if (isSelectedMode) {\n      menuList = [];\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    }\n\n    return actionBarProp;\n  }\n\n  getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isSelectedMode) {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n        menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n      } else {\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);\n      }\n    } else {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {\n        menuList.push(Action.CLEAR_RECYCLE);\n      }\n    }\n    return menuList;\n  }\n}\n", "llm_cg": {"PhotoGridBarModel.createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)": ["PhotoGridBarModel.updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)", "PhotoGridBarModel.updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean)"], "PhotoGridBarModel.updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)": ["PhotoGridBarModel.updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)", "PhotoGridBarModel.updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean)"], "PhotoGridBarModel.updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)": ["PhotoGridBarModel.getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)"], "PhotoGridBarModel.updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean)": [], "PhotoGridBarModel.getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean)": []}, "static_cg": {"@test/75.ts: PhotoGridBarModel.createActionBar(Object, boolean, number, boolean, boolean)": ["@test/75.ts: PhotoGridBarModel.updateHorizontalActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)", "@test/75.ts: PhotoGridBarModel.updateVerticalActionBar(ActionBarProp, Object, boolean)"], "@test/75.ts: PhotoGridBarModel.updateActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)": ["@test/75.ts: PhotoGridBarModel.updateHorizontalActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)", "@test/75.ts: PhotoGridBarModel.updateVerticalActionBar(ActionBarProp, Object, boolean)"], "@test/75.ts: PhotoGridBarModel.updateHorizontalActionBar(ActionBarProp, Object, boolean, number, boolean, boolean)": ["@test/75.ts: PhotoGridBarModel.getMenuList(boolean, number, boolean, boolean)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class MediaOperationType {\n  static readonly Move = 'Media_move';\n  static readonly Delete = 'Media_delete';\n  static readonly Recover = 'Media_recover';\n}", "llm_cg": {"MediaOperationType.Move": [], "MediaOperationType.Delete": [], "MediaOperationType.Recover": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action'\nimport { ActionBarProp } from '../common/ActionBarProp'\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode'\n\nexport class AlbumSelectBarModel {\n  createActionBar(): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    actionBarProp\n      .setLeftAction(Action.CANCEL)\n      .setMode(ActionBarMode.STANDARD_MODE)\n      .setSelectionMode(ActionBarSelectionMode.SINGLE)\n      .setTitle($r('app.string.title_select_photos'));\n    return actionBarProp;\n  }\n}", "llm_cg": {"AlbumSelectBarModel.createActionBar()": ["ActionBarProp.setLeftAction(Action)", "ActionBarProp.setMode(ActionBarMode)", "ActionBarProp.setSelectionMode(ActionBarSelectionMode)", "ActionBarProp.setTitle(string)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ViewType {\n  GROUP_TITLE,\n  ITEM,\n}", "llm_cg": {}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class QueryConstants {\n  static readonly ALBUM_COPY_FIRST_PAGE_QUERY_LENGTH = 12;\n}", "llm_cg": {"QueryConstants.ALBUM_COPY_FIRST_PAGE_QUERY_LENGTH": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class AnimationConstants {\n  static readonly SHARE_TRANSITION_DURATION = 200;\n  static readonly DELETE_ANIMATE_DURATION: number = 150;\n  // Press animation duration\n  static readonly PRESS_ANIM_DURATION = 100;\n  // Press to scale the value at the end of the animation\n  static readonly PRESS_ANIM_SCALE = 0.9;\n}", "llm_cg": {"AnimationConstants.SHARE_TRANSITION_DURATION": [], "AnimationConstants.DELETE_ANIMATE_DURATION": [], "AnimationConstants.PRESS_ANIM_DURATION": [], "AnimationConstants.PRESS_ANIM_SCALE": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deviceInfo from '@ohos.deviceInfo';\n\nenum EntryForm {\n  NORMAL = 0,\n  CAMERA = 1,\n  SINGLE_SELECT = 2,\n  MULTIPLE_SELECT = 3,\n  RECYCLE = 4,\n  CARD = 6,\n  VIEW_DATA = 7\n}\n\nexport class Constants {\n  // illegal value\n  static readonly INVALID = -1;\n\n  // Index of and other operations, the index returned when it is not found\n  static readonly NOT_FOUND = -1;\n\n  // delay 1s\n  static readonly DELAY_ONE_SECOND = 1000;\n\n  // delay 500ms\n  static readonly DELAY_HALF_SECOND = 500;\n\n  // delay 250ms\n  static readonly DELAY_QUARTER_SECOND = 250;\n\n  // delay 100ms\n  static readonly DELAY_TENTH_SECOND = 100;\n\n  // delay 50ms\n  static readonly DELAY_TWENTIETH_SECOND = 50;\n\n  // Default sliding window size\n  static readonly DEFAULT_SLIDING_WIN_SIZE = 500;\n  static readonly DEFAULT_ROTATE_VALUE = 90;\n  static readonly ROTATE_AROUND = 360;\n  static readonly ANGLE_90 = 90;\n  static readonly ANGLE_270 = 270;\n\n  // Step size. When the last obtained data index deviates from the center of the current sliding window by more\n  // than this step, adjust the start and end of the window and re initiate the data request\n  static readonly STEP = 100;\n  static readonly KEY_VIEW_TYPE = 'type';\n  static readonly KEY_VIEW_DATA = 'data';\n  static readonly ActionBarHeight: number = 56;\n  static readonly APP_KEY_PHOTO_BROWSER = 'app_key_photo_browser';\n  static readonly APP_KEY_MENU_OPERATION_FACTORY = 'app_key_menu_operation_factory';\n  static readonly APP_KEY_MENU_MEDIA_OBSERVER = 'app_key_menu_media_observer';\n  static readonly APP_KEY_WORKER_MANAGER = 'app_key_worker_manager';\n  static readonly APP_KEY_SLIDE_SHOW = 'app_key_slide_show';\n  static readonly THIRD_SELECT_MANAGER = 'third_select_manager';\n  static readonly APP_KEY_STATUS_BAR_COLOR_CONTROLLER = 'app_key_status_bar_color_controller';\n  static readonly APP_KEY_NEW_ALBUM = 'app_key_new_album';\n  static readonly APP_KEY_NEW_ALBUM_TARGET = 'app_key_new_album_target';\n  static readonly APP_KEY_NEW_ALBUM_SELECTED = 'app_key_new_album_selected';\n  static readonly APP_KEY_INSTANCE_MEDIA_LIBRARY_ACCESS = 'app_key_instance_media_library_access';\n  static readonly FROM_DATA_STORE_UTIL = 'form_data_store_util';\n\n  // Broadcast\n  static readonly APP_KEY_EVENT_BUS = 'app_key_event_bus';\n  static readonly SCREEN_MANAGER = 'screen_manager';\n  static readonly PIXEL_MAP_MANAGER = 'pixel_map_manager';\n\n  // Load completion event\n  static readonly ON_LOADING_FINISHED = 'on_loading_finished';\n  static readonly FIRST_PATCH_LOAD_FINISH = 'first_patch_load_finish';\n\n  // Large jump source: timeline\n  static readonly PHOTO_TRANSITION_TIMELINE: string = 'TimelinePage';\n\n  // Large jump source: album\n  static readonly PHOTO_TRANSITION_ALBUM: string = 'PhotoGridPage';\n\n  // Large jump source: camera\n  static readonly PHOTO_TRANSITION_CAMERA: string = 'Camera';\n  static readonly PHOTO_TRANSITION_EDIT: string = 'EditPage';\n\n  // Timeline page index\n  static readonly TIMELINE_PAGE_INDEX: number = 0;\n\n  // Album page index\n  static readonly ALBUM_PAGE_INDEX: number = 1;\n  static readonly IMAGE_GIF = 'gif';\n  static readonly GRID_CACHE_ROW_COUNT: number = 4;\n\n  // Press animation duration\n  static readonly PRESS_ANIM_DURATION = 100;\n\n  // Press to scale the value at the end of the animation\n  static readonly PRESS_ANIM_SCALE = 0.9;\n\n  // Default maximum number of external selection pages\n  static readonly DEFAULT_MAX_THIRD_SELECT_COUNT: number = 50;\n\n  // Column flag\n  static readonly SCREEN_COLUMNS: string = 'screen_columns';\n  static readonly ADD_NOTES_MAX_LENGTH: number = 140;\n  static readonly RENAME_MAX_LENGTH: number = 82;\n  static readonly ENTRY_FROM_NONE = 0;\n  static readonly ENTRY_FROM_CAMERA = 1;\n  static readonly ENTRY_FROM_SINGLE_SELECT = 2;\n  static readonly ENTRY_FROM_MULTIPLE_SELECT = 3;\n  static readonly ENTRY_FROM_RECYCLE = 4;\n  static readonly ENTRY_FROM_NORMAL = 6;\n  static readonly ENTRY_FROM_FORM_ABILITY = 7;\n  static readonly ENTRY_FROM_FORM_FORM_EDITOR = 8;\n  static readonly ENTRY_FROM_VIEW_DATA = 9;\n  static readonly ENTRY_FROM_FORM_ABILITY_NONE = 12;\n  static readonly ENTRY_FROM = EntryForm;\n  static readonly DIALOG_BOTTOM_OFFSET: number = 48;\n\n  // Local tab index\n  static readonly LOCAL_TAB_INDEX: number = 0;\n\n  // Other equipment tab index\n  static readonly OTHER_EQUIPMENT_TAB_INDEX: number = 1;\n\n  //the constant for action of the want\n  static readonly ACTION_DELETE_DATA: string = 'ohos.want.action.deleteDialog';\n\n  // editor used\n  static readonly UPDATE_MENU = 'updateMenu';\n  static readonly UPDATE_DOODLE_STYLE = 'update_doodle_style';\n  static readonly ADJUST_PARAMS_VALUE_CHANGED = 'adjust_params_value_changed';\n  static readonly ADJUST_PARAMS_ID_CHANGED = 'adjust_params_id_changed';\n  static readonly IS_IMMERSIVE = 'is_immersive';\n  static readonly UPDATE_DOODLE_STROKE_STYLE = 'update_doodle_stroke_style';\n  static readonly PHOTO_EDITOR_MANAGER: string = 'photo_editor_manager';\n  static readonly PHOTO_EDITOR_EVENT_MANAGER: string = 'photo_editor_event_manager';\n  static readonly INTI_RULER: string = 'inti_ruler';\n  static readonly RULER_CHANGED: string = 'inti_ruler';\n  static readonly LABEL_STYLE_CHANGED: string = 'label_style_changed';\n  static readonly LABEL_TEXT_STYLE_CHANGED: string = 'label_text_style_changed';\n  static readonly LABEL_TEXT_COLOR_CHANGED: string = 'label_text_color_changed';\n  static readonly LABEL_GET_CLIP_RECT: string = 'label_get_clip_rect';\n  static readonly CROP_RESET_CLICKED: string = 'crop_reset_clicked';\n  static readonly IS_BIG_TEXT_SHOW: string = 'is_big_text_show';\n  static readonly RULER_BAR_INTI: string = 'ruler_bar_inti';\n  static readonly COLOR_SLIDER_CHANGED: string = 'color_slider_changed';\n  static readonly MOSAIC_STYLE_CHANGED: string = 'mosaic_style_changed';\n  static readonly LABEL_DELETE: string = 'label_delete';\n  static readonly UPDATE_LABEL_STYLE: string = 'update_label_style';\n  static readonly IS_LABEL_ACTIVE: string = 'is_label_active';\n  static readonly NOT_MAX_INDEX_CLICK_OF_LABEL: string = 'not_max_index_click_of_label';\n  static readonly IS_LABEL_MODE: string = 'is_label_mode';\n  static readonly RESET_LABEL_STYLE_INFO: string = 'reset_label_style_info';\n  static readonly UPDATE_TOUCH_EVENT: string = 'update_touch_event';\n  static readonly PHOTO_COLLAGE_MANAGER: string = 'photo_collage_manager';\n  static readonly RETURN_TO_MAIN: string = 'return_to_main';\n  static readonly NEGATIVE_FORTY: string = '-40.0°';\n  static readonly NEGATIVE_THIRTY: string = '-30.0°';\n  static readonly NEGATIVE_TWENTY: string = '-20.0°';\n  static readonly NEGATIVE_TEN: string = '-10.0°';\n  static readonly ZERO_STR: string = '0.0°';\n  static readonly POSITIVE_TEN: string = '10.0°';\n  static readonly POSITIVE_TWENTY: string = '20.0°';\n  static readonly POSITIVE_THIRTY: string = '30.0°';\n  static readonly POSITIVE_FORTY: string = '40.0°';\n  static readonly RULER_CONTEXT_FONT_10PX: string = '10px SimSun, Songti SC';\n  static readonly RULER_CONTEXT_FONT_20PX: string = '20px SimSun, Songti SC';\n  static readonly RULER_CONTEXT_FONT_30PX: string = '30px SimSun, Songti SC';\n  static readonly RULER_FILL_STYLE_100: string = '#FFFFFF';\n  static readonly RULER_FILL_STYLE_90: string = '#E5FFFFFF';\n  static readonly RULER_FILL_STYLE_40: string = '#66FFFFFF';\n  static readonly RULER_TEXT_ALIGN: string = 'center';\n\n  /**\n   * @deprecated\n   */\n  static readonly MEDIA_TYPE_IMAGE: string = 'image';\n  /**\n   * @deprecated\n   */\n  static readonly MEDIA_TYPE_VIDEO: string = 'video';\n  /**\n   * @deprecated\n   */\n  static readonly MEDIA_TYPE_ALBUM: string = 'album';\n  /**\n   * @deprecated\n   */\n  static readonly MEDIA_TYPE_DEVICE: string = 'device';\n  /**\n   * @deprecated\n   */\n  static readonly MEDIA_TYPE_REMOTE: string = 'remote';\n  static readonly DEVICE_STATE_ONLINE: string = 'online';\n  static readonly DEVICE_STATE_OFFLINE: string = 'offline';\n  static readonly DEVICE_STATE_CHANGE: string = 'change';\n  static readonly TOP_BAR_SIZE: number = 56;\n  static readonly TOOL_BAR_SIZE: number = 72;\n  static readonly BOTTOM_TOOL_BAR_SIZE: number = 196;\n  static readonly FILTER_BOTTOM_TOOL_BAR_SIZE: number = 232;\n  static readonly DEFAULT_WIDTH: number = 360;\n  static readonly RESET_SIZE: number = 20;\n  static readonly RESET_SIZE_HORIZONTAL: number = 48;\n  static readonly TIMEOUT: number = 50;\n  static readonly PADDING_VERTICAL: number = 140;\n  static readonly PADDING_HORIZONTAL: number = 160;\n  static readonly MID_LINE_WIDTH: number = 1.5;\n  static readonly MID_LINE_HEIGHT: number = 20;\n  static readonly RULER_LINE_WIDTH: number = 1;\n  static readonly NEGATIVE_1: number = -1;\n  static readonly NEGATIVE_2: number = -2;\n  static readonly NUMBER_1: number = 1;\n  static readonly NUMBER_2: number = 2;\n  static readonly NUMBER_3: number = 3;\n  static readonly NUMBER_4: number = 4;\n  static readonly NUMBER_5: number = 5;\n  static readonly NUMBER_5_5: number = 5.5;\n  static readonly NUMBER_6: number = 6;\n  static readonly NUMBER_6_5: number = 6.5;\n  static readonly NUMBER_7: number = 7;\n  static readonly NUMBER_7_5: number = 7.5;\n  static readonly NUMBER_8: number = 8;\n  static readonly NUMBER_8_5: number = 8.5;\n  static readonly NUMBER_9: number = 9;\n  static readonly NUMBER_9_5: number = 9.5;\n  static readonly NUMBER_10: number = 10;\n  static readonly NUMBER_10_5: number = 10.5;\n  static readonly NUMBER_11_5: number = 11.5;\n  static readonly NUMBER_15: number = 15;\n  static readonly EDGE_ANGLE: number = 45;\n  static readonly LITTLE_CANVAS_SIZE: number = 60;\n  static readonly NUMBER_40: number = 40;\n  static readonly NUMBER_30: number = 30;\n  static readonly NUMBER_20: number = 20;\n  static readonly NUMBER_0: number = 0;\n\n  // Grid Constants\n  static readonly TAB_BAR_WIDTH: number = 96;\n  static readonly ACTION_BAR_HEIGHT: number = 56;\n  static readonly GRID_GUTTER: number = 2;\n  static readonly GRID_IMAGE_SIZE: number = 128;\n  static readonly GRID_MAX_SIZE_RATIO: number = 1.2;\n  static readonly TIME_GRID_MAX_SIZE_RATIO: number = 1.5;\n  static readonly GRID_MIN_COUNT: number = 2;\n  static readonly SCROLL_BAR_SIDE_MIN_GAP: number = 12;\n  static readonly SCROLL_MARGIN: number = 24;\n  static readonly SCROLL_BAR_VISIBLE_THRESHOLD: number = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? 7 : 9;\n  static readonly GRID_SCROLL_BAR_VISIBLE_THRESHOLD: number = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? 7 : 13;\n\n  // Album Card Constants\n  static readonly CARD_ASPECT_RATIO: number = 0.75;\n  static readonly ALBUM_SET_NEW_ICON_SIZE: number = 22;\n  static readonly ALBUM_SET_NEW_ICON_MARGIN: number = 8;\n  static readonly ALBUM_SET_MARGIN: number = 24;\n  static readonly ALBUM_SET_GUTTER: number = 12;\n  static readonly ALBUM_SET_COVER_SIZE: number = 220;\n\n  // System Resource Constants\n  static readonly TEXT_SIZE_SUB_TITLE1: number = 18; // ohos_id_text_size_sub_title1\n  static readonly TEXT_SIZE_BODY2: number = 14; // ohos_id_text_size_body2\n  static readonly TEXT_SIZE_SUB_TITLE2: number = 16; // ohos_id_text_size_sub_title2\n\n  // Empty Page\n  static readonly EMPTY_PAGE_OFFSET_RADIO: number = 0.4;\n  static readonly EMPTY_PAGE_DEFAULT_OFFSET: number = 300;\n  static readonly EMPTY_PAGE_MARGIN: number = 12;\n\n  // Dialog\n  static readonly DETAILS_DIALOG_PATH_MAX_LINE: number = 7;\n  static readonly DETAILS_DIALOG_NAME_MAX_LINE: number = 5;\n  static readonly PROGRESS_MAX: number = 100;\n  static readonly BYTE_TO_MB: number = 1024 * 1024;\n  static readonly BIG_SCREEN_WIDTH: number = 600;\n  static readonly BIG_EMPTY_ICON_SIZE: number = 160;\n  static readonly SMALL_EMPTY_ICON_SIZE: number = 120;\n  // Menu\n  static readonly MENU_DIVIDER_STROKE_WIDTH: number = 1;\n\n  // Duration\n  static readonly SHARE_TRANSITION_DURATION: number = 200;\n  static readonly DELETE_ANIMATE_DURATION: number = 150;\n\n  // Percent\n  static readonly PERCENT_HUNDRED: number = 100;\n  static readonly PERCENT_ONE_THIRD: string = (100 / 3) + '%';\n\n  // AppStorage constants\n  static readonly ENTRY_FROM_HAP: string = 'entryFromHap';\n  static readonly FROM_ALBUM_ID: string = 'form_albumId';\n  static readonly FROM_CURRENT_INDEX: string = 'form_currentIndex';\n  static readonly FA_SETTING_FROM_ID: string = 'FASetting_FormId';\n  static readonly VIEW_DATA_URI: string = 'viewDataUri';\n  static readonly VIEW_DATA_POS: string = 'viewDataPos';\n\n  static readonly FORM_ITEM_NAME: string = 'form_itemName';\n  static readonly FORM_ITEM_ALBUM_ID: string = 'form_itemAlbumId';\n  static readonly FORM_ITEM_DISPLAY_NAME: string = 'form_itemDisplayName';\n  static readonly MAIN_WINDOW: string = 'mainWindow';\n  static readonly ACTION_URI_FORM_ABILITY: string = 'formAbility';\n  static readonly ACTION_URI_FORM_ABILITY_NONE: string = 'formAbilityNone';\n  static readonly PROGRESS_LENGTH_DIFF: number = 88;\n  static readonly ALBUM_NAME_MAX_LENGTH = 82;\n  static readonly BACK_FROM_FORM_DETAIL: string = 'back_from_form_detail';\n\n  // ApplictionInfo\n  static readonly BUNDLE_NAME: string = 'com.ohos.photos';\n\n  // get want info with key\n  static readonly KEY_WANT_PARAMETERS_CALLER_BUNDLE_NAME: string = 'ohos.aafwk.param.callerBundleName';\n  static readonly KEY_WANT_PARAMETERS_CALLERUID: string = 'ohos.aafwk.param.callerUid';\n\n  // camera mainAbility\n  static readonly CAMERA_TYPE_CAPTURE: string = 'capture';\n\n  // camera mainAbility\n  static readonly CAMERA_TYPE_VIDEO: string = 'video';\n\n  // camera bundleName\n  static readonly CAMERA_BUNDLE_NAME: string = 'com.ohos.camera';\n\n  // camera mainAbility\n  static readonly CAMERA_MAIN_ABILITY: string = 'com.ohos.camera.MainAbility';\n\n  // maximum number limit of external selection pages\n  static readonly LIMIT_MAX_THIRD_SELECT_COUNT: number = 500;\n\n  static readonly DEFAULT_DIVIDER_COLOR: string = 'rgb(207, 195, 195)';\n  static readonly DEFAULT_DIVIDER_HEIGHT: string = '24vp';\n  static readonly NAME_PATTERN: RegExp = /[\\\\.\\\\\\\\/:*?\"'`<>|\\[\\]{}]/;\n}\n", "llm_cg": {"Constants.%AM0$INVALID": [], "Constants.%AM1$NOT_FOUND": [], "Constants.%AM2$DELAY_ONE_SECOND": [], "Constants.%AM3$DELAY_HALF_SECOND": [], "Constants.%AM4$DELAY_QUARTER_SECOND": [], "Constants.%AM5$DELAY_TENTH_SECOND": [], "Constants.%AM6$DELAY_TWENTIETH_SECOND": [], "Constants.%AM7$DEFAULT_SLIDING_WIN_SIZE": [], "Constants.%AM8$DEFAULT_ROTATE_VALUE": [], "Constants.%AM9$ROTATE_AROUND": [], "Constants.%AM10$ANGLE_90": [], "Constants.%AM11$ANGLE_270": [], "Constants.%AM12$STEP": [], "Constants.%AM13$KEY_VIEW_TYPE": [], "Constants.%AM14$KEY_VIEW_DATA": [], "Constants.%AM15$ActionBarHeight": [], "Constants.%AM16$APP_KEY_PHOTO_BROWSER": [], "Constants.%AM17$APP_KEY_MENU_OPERATION_FACTORY": [], "Constants.%AM18$APP_KEY_MENU_MEDIA_OBSERVER": [], "Constants.%AM19$APP_KEY_WORKER_MANAGER": [], "Constants.%AM20$APP_KEY_SLIDE_SHOW": [], "Constants.%AM21$THIRD_SELECT_MANAGER": [], "Constants.%AM22$APP_KEY_STATUS_BAR_COLOR_CONTROLLER": [], "Constants.%AM23$APP_KEY_NEW_ALBUM": [], "Constants.%AM24$APP_KEY_NEW_ALBUM_TARGET": [], "Constants.%AM25$APP_KEY_NEW_ALBUM_SELECTED": [], "Constants.%AM26$APP_KEY_INSTANCE_MEDIA_LIBRARY_ACCESS": [], "Constants.%AM27$FROM_DATA_STORE_UTIL": [], "Constants.%AM28$APP_KEY_EVENT_BUS": [], "Constants.%AM29$SCREEN_MANAGER": [], "Constants.%AM30$PIXEL_MAP_MANAGER": [], "Constants.%AM31$ON_LOADING_FINISHED": [], "Constants.%AM32$FIRST_PATCH_LOAD_FINISH": [], "Constants.%AM33$PHOTO_TRANSITION_TIMELINE": [], "Constants.%AM34$PHOTO_TRANSITION_ALBUM": [], "Constants.%AM35$PHOTO_TRANSITION_CAMERA": [], "Constants.%AM36$PHOTO_TRANSITION_EDIT": [], "Constants.%AM37$TIMELINE_PAGE_INDEX": [], "Constants.%AM38$ALBUM_PAGE_INDEX": [], "Constants.%AM39$IMAGE_GIF": [], "Constants.%AM40$GRID_CACHE_ROW_COUNT": [], "Constants.%AM41$PRESS_ANIM_DURATION": [], "Constants.%AM42$PRESS_ANIM_SCALE": [], "Constants.%AM43$DEFAULT_MAX_THIRD_SELECT_COUNT": [], "Constants.%AM44$SCREEN_COLUMNS": [], "Constants.%AM45$ADD_NOTES_MAX_LENGTH": [], "Constants.%AM46$RENAME_MAX_LENGTH": [], "Constants.%AM47$ENTRY_FROM_NONE": [], "Constants.%AM48$ENTRY_FROM_CAMERA": [], "Constants.%AM49$ENTRY_FROM_SINGLE_SELECT": [], "Constants.%AM50$ENTRY_FROM_MULTIPLE_SELECT": [], "Constants.%AM51$ENTRY_FROM_RECYCLE": [], "Constants.%AM52$ENTRY_FROM_NORMAL": [], "Constants.%AM53$ENTRY_FROM_FORM_ABILITY": [], "Constants.%AM54$ENTRY_FROM_FORM_FORM_EDITOR": [], "Constants.%AM55$ENTRY_FROM_VIEW_DATA": [], "Constants.%AM56$ENTRY_FROM_FORM_ABILITY_NONE": [], "Constants.%AM57$ENTRY_FROM": [], "Constants.%AM58$DIALOG_BOTTOM_OFFSET": [], "Constants.%AM59$LOCAL_TAB_INDEX": [], "Constants.%AM60$OTHER_EQUIPMENT_TAB_INDEX": [], "Constants.%AM61$ACTION_DELETE_DATA": [], "Constants.%AM62$UPDATE_MENU": [], "Constants.%AM63$UPDATE_DOODLE_STYLE": [], "Constants.%AM64$ADJUST_PARAMS_VALUE_CHANGED": [], "Constants.%AM65$ADJUST_PARAMS_ID_CHANGED": [], "Constants.%AM66$IS_IMMERSIVE": [], "Constants.%AM67$UPDATE_DOODLE_STROKE_STYLE": [], "Constants.%AM68$PHOTO_EDITOR_MANAGER": [], "Constants.%AM69$PHOTO_EDITOR_EVENT_MANAGER": [], "Constants.%AM70$INTI_RULER": [], "Constants.%AM71$RULER_CHANGED": [], "Constants.%AM72$LABEL_STYLE_CHANGED": [], "Constants.%AM73$LABEL_TEXT_STYLE_CHANGED": [], "Constants.%AM74$LABEL_TEXT_COLOR_CHANGED": [], "Constants.%AM75$LABEL_GET_CLIP_RECT": [], "Constants.%AM76$CROP_RESET_CLICKED": [], "Constants.%AM77$IS_BIG_TEXT_SHOW": [], "Constants.%AM78$RULER_BAR_INTI": [], "Constants.%AM79$COLOR_SLIDER_CHANGED": [], "Constants.%AM80$MOSAIC_STYLE_CHANGED": [], "Constants.%AM81$LABEL_DELETE": [], "Constants.%AM82$UPDATE_LABEL_STYLE": [], "Constants.%AM83$IS_LABEL_ACTIVE": [], "Constants.%AM84$NOT_MAX_INDEX_CLICK_OF_LABEL": [], "Constants.%AM85$IS_LABEL_MODE": [], "Constants.%AM86$RESET_LABEL_STYLE_INFO": [], "Constants.%AM87$UPDATE_TOUCH_EVENT": [], "Constants.%AM88$PHOTO_COLLAGE_MANAGER": [], "Constants.%AM89$RETURN_TO_MAIN": [], "Constants.%AM90$NEGATIVE_FORTY": [], "Constants.%AM91$NEGATIVE_THIRTY": [], "Constants.%AM92$NEGATIVE_TWENTY": [], "Constants.%AM93$NEGATIVE_TEN": [], "Constants.%AM94$ZERO_STR": [], "Constants.%AM95$POSITIVE_TEN": [], "Constants.%AM96$POSITIVE_TWENTY": [], "Constants.%AM97$POSITIVE_THIRTY": [], "Constants.%AM98$POSITIVE_FORTY": [], "Constants.%AM99$RULER_CONTEXT_FONT_10PX": [], "Constants.%AM100$RULER_CONTEXT_FONT_20PX": [], "Constants.%AM101$RULER_CONTEXT_FONT_30PX": [], "Constants.%AM102$RULER_FILL_STYLE_100": [], "Constants.%AM103$RULER_FILL_STYLE_90": [], "Constants.%AM104$RULER_FILL_STYLE_40": [], "Constants.%AM105$RULER_TEXT_ALIGN": [], "Constants.%AM106$MEDIA_TYPE_IMAGE": [], "Constants.%AM107$MEDIA_TYPE_VIDEO": [], "Constants.%AM108$MEDIA_TYPE_ALBUM": [], "Constants.%AM109$MEDIA_TYPE_DEVICE": [], "Constants.%AM110$MEDIA_TYPE_REMOTE": [], "Constants.%AM111$DEVICE_STATE_ONLINE": [], "Constants.%AM112$DEVICE_STATE_OFFLINE": [], "Constants.%AM113$DEVICE_STATE_CHANGE": [], "Constants.%AM114$TOP_BAR_SIZE": [], "Constants.%AM115$TOOL_BAR_SIZE": [], "Constants.%AM116$BOTTOM_TOOL_BAR_SIZE": [], "Constants.%AM117$FILTER_BOTTOM_TOOL_BAR_SIZE": [], "Constants.%AM118$DEFAULT_WIDTH": [], "Constants.%AM119$RESET_SIZE": [], "Constants.%AM120$RESET_SIZE_HORIZONTAL": [], "Constants.%AM121$TIMEOUT": [], "Constants.%AM122$PADDING_VERTICAL": [], "Constants.%AM123$PADDING_HORIZONTAL": [], "Constants.%AM124$MID_LINE_WIDTH": [], "Constants.%AM125$MID_LINE_HEIGHT": [], "Constants.%AM126$RULER_LINE_WIDTH": [], "Constants.%AM127$NEGATIVE_1": [], "Constants.%AM128$NEGATIVE_2": [], "Constants.%AM129$NUMBER_1": [], "Constants.%AM130$NUMBER_2": [], "Constants.%AM131$NUMBER_3": [], "Constants.%AM132$NUMBER_4": [], "Constants.%AM133$NUMBER_5": [], "Constants.%AM134$NUMBER_5_5": [], "Constants.%AM135$NUMBER_6": [], "Constants.%AM136$NUMBER_6_5": [], "Constants.%AM137$NUMBER_7": [], "Constants.%AM138$NUMBER_7_5": [], "Constants.%AM139$NUMBER_8": [], "Constants.%AM140$NUMBER_8_5": [], "Constants.%AM141$NUMBER_9": [], "Constants.%AM142$NUMBER_9_5": [], "Constants.%AM143$NUMBER_10": [], "Constants.%AM144$NUMBER_10_5": [], "Constants.%AM145$NUMBER_11_5": [], "Constants.%AM146$NUMBER_15": [], "Constants.%AM147$EDGE_ANGLE": [], "Constants.%AM148$LITTLE_CANVAS_SIZE": [], "Constants.%AM149$NUMBER_40": [], "Constants.%AM150$NUMBER_30": [], "Constants.%AM151$NUMBER_20": [], "Constants.%AM152$NUMBER_0": [], "Constants.%AM153$TAB_BAR_WIDTH": [], "Constants.%AM154$ACTION_BAR_HEIGHT": [], "Constants.%AM155$GRID_GUTTER": [], "Constants.%AM156$GRID_IMAGE_SIZE": [], "Constants.%AM157$GRID_MAX_SIZE_RATIO": [], "Constants.%AM158$TIME_GRID_MAX_SIZE_RATIO": [], "Constants.%AM159$GRID_MIN_COUNT": [], "Constants.%AM160$SCROLL_BAR_SIDE_MIN_GAP": [], "Constants.%AM161$SCROLL_MARGIN": [], "Constants.%AM162$SCROLL_BAR_VISIBLE_THRESHOLD": [], "Constants.%AM163$GRID_SCROLL_BAR_VISIBLE_THRESHOLD": [], "Constants.%AM164$CARD_ASPECT_RATIO": [], "Constants.%AM165$ALBUM_SET_NEW_ICON_SIZE": [], "Constants.%AM166$ALBUM_SET_NEW_ICON_MARGIN": [], "Constants.%AM167$ALBUM_SET_MARGIN": [], "Constants.%AM168$ALBUM_SET_GUTTER": [], "Constants.%AM169$ALBUM_SET_COVER_SIZE": [], "Constants.%AM170$TEXT_SIZE_SUB_TITLE1": [], "Constants.%AM171$TEXT_SIZE_BODY2": [], "Constants.%AM172$TEXT_SIZE_SUB_TITLE2": [], "Constants.%AM173$EMPTY_PAGE_OFFSET_RADIO": [], "Constants.%AM174$EMPTY_PAGE_DEFAULT_OFFSET": [], "Constants.%AM175$EMPTY_PAGE_MARGIN": [], "Constants.%AM176$DETAILS_DIALOG_PATH_MAX_LINE": [], "Constants.%AM177$DETAILS_DIALOG_NAME_MAX_LINE": [], "Constants.%AM178$PROGRESS_MAX": [], "Constants.%AM179$BYTE_TO_MB": [], "Constants.%AM180$BIG_SCREEN_WIDTH": [], "Constants.%AM181$BIG_EMPTY_ICON_SIZE": [], "Constants.%AM182$SMALL_EMPTY_ICON_SIZE": [], "Constants.%AM183$MENU_DIVIDER_STROKE_WIDTH": [], "Constants.%AM184$SHARE_TRANSITION_DURATION": [], "Constants.%AM185$DELETE_ANIMATE_DURATION": [], "Constants.%AM186$PERCENT_HUNDRED": [], "Constants.%AM187$PERCENT_ONE_THIRD": [], "Constants.%AM188$ENTRY_FROM_HAP": [], "Constants.%AM189$FROM_ALBUM_ID": [], "Constants.%AM190$FROM_CURRENT_INDEX": [], "Constants.%AM191$FA_SETTING_FROM_ID": [], "Constants.%AM192$VIEW_DATA_URI": [], "Constants.%AM193$VIEW_DATA_POS": [], "Constants.%AM194$FORM_ITEM_NAME": [], "Constants.%AM195$FORM_ITEM_ALBUM_ID": [], "Constants.%AM196$FORM_ITEM_DISPLAY_NAME": [], "Constants.%AM197$MAIN_WINDOW": [], "Constants.%AM198$ACTION_URI_FORM_ABILITY": [], "Constants.%AM199$ACTION_URI_FORM_ABILITY_NONE": [], "Constants.%AM200$PROGRESS_LENGTH_DIFF": [], "Constants.%AM201$ALBUM_NAME_MAX_LENGTH": [], "Constants.%AM202$BACK_FROM_FORM_DETAIL": [], "Constants.%AM203$BUNDLE_NAME": [], "Constants.%AM204$KEY_WANT_PARAMETERS_CALLER_BUNDLE_NAME": [], "Constants.%AM205$KEY_WANT_PARAMETERS_CALLERUID": [], "Constants.%AM206$CAMERA_TYPE_CAPTURE": [], "Constants.%AM207$CAMERA_TYPE_VIDEO": [], "Constants.%AM208$CAMERA_BUNDLE_NAME": [], "Constants.%AM209$CAMERA_MAIN_ABILITY": [], "Constants.%AM210$LIMIT_MAX_THIRD_SELECT_COUNT": [], "Constants.%AM211$DEFAULT_DIVIDER_COLOR": [], "Constants.%AM212$DEFAULT_DIVIDER_HEIGHT": [], "Constants.%AM213$NAME_PATTERN": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nexport class MediaConstants {\n  // Media item status\n  static readonly UNDEFINED = 0;\n  static readonly PART_LOADED = 1\n  static readonly LOADED = 2;\n  static readonly TRASHED = 3;\n  // Media type\n  static readonly MEDIA_TYPE_IMAGE: string = 'image';\n  static readonly MEDIA_TYPE_VIDEO: string = 'video';\n  static readonly MEDIA_TYPE_ALBUM: string = 'album';\n  static readonly MEDIA_TYPE_DEVICE: string = 'device';\n  static readonly MEDIA_TYPE_REMOTE: string = 'remote';\n\n  static readonly DEVICE_STATE_ONLINE: string = 'online';\n  static readonly DEVICE_STATE_OFFLINE: string = 'offline';\n  static readonly DEVICE_STATE_CHANGE: string = 'change';\n  static readonly ROTATE_NONE = 0;\n  static readonly ROTATE_ONCE = 90;\n  static readonly ROTATE_TWICE = 180;\n  static readonly ROTATE_THIRD = 270;\n  static readonly ROTATE_AROUND = 360;\n  static readonly DEFAULT_SIZE = 256;\n  static readonly DEFAULT_THUMBNAIL_SIZE = 1920;\n  // select type\n  static readonly SELECT_TYPE_ALL = 0;\n  static readonly SELECT_TYPE_VIDEO = 1;\n  static readonly SELECT_TYPE_IMAGE = 2;\n  //album type\n  static readonly ALBUM_TYPE_ALL = -1;\n  static readonly ABSTRACT_ALBUM_TYPE_MOVING_PHOTO = -2;\n  static readonly ALBUM_TYPE_USER = photoAccessHelper.AlbumType.USER;\n  static readonly ALBUM_TYPE_SYSTEM = photoAccessHelper.AlbumType.SYSTEM;\n  // album subtype\n  static readonly ALBUM_SUBTYPE_ALL = photoAccessHelper.AlbumSubtype.ANY\n  static readonly ALBUM_SUBTYPE_CAMERA = photoAccessHelper.AlbumSubtype.CAMERA;\n  static readonly ALBUM_SUBTYPE_VIDEO = photoAccessHelper.AlbumSubtype.VIDEO;\n  static readonly ALBUM_SUBTYPE_RECYCLE = photoAccessHelper.AlbumSubtype.TRASH;\n  static readonly ALBUM_SUBTYPE_FAVOR = photoAccessHelper.AlbumSubtype.FAVORITE;\n  static readonly ALBUM_SUBTYPE_SNAPSHOT = photoAccessHelper.AlbumSubtype.SCREENSHOT;\n  static readonly ALBUM_SUBTYPE_HIDDEN = photoAccessHelper.AlbumSubtype.HIDDEN;\n  static readonly ALBUM_SUBTYPE_USER_GENERIC = photoAccessHelper.AlbumSubtype.USER_GENERIC;\n  static readonly ALBUM_SUBTYPE_REMOTE = -1;\n  // album id\n  static readonly ALBUM_ID_USER = 'default_user';\n  static readonly ALBUM_ID_ALL = 'default_all';\n  static readonly ALBUM_ID_HIDDEN = 'default_hidden';\n  static readonly ALBUM_ID_CAMERA = 'default_camera';\n  static readonly ALBUM_ID_VIDEO = 'default_video';\n  static readonly ALBUM_ID_RECYCLE = 'default_recycle';\n  static readonly ALBUM_ID_FAVOR = 'default_favor';\n  static readonly ALBUM_ID_SNAPSHOT = 'default_snapshot';\n  static readonly ALBUM_ID_REMOTE = 'default_remote';\n  static readonly ALBUM_ID_MOVING_PHOTO = 'default_moving_photo';\n  static readonly ALBUM_DISABLE_COPY_LIST: Set<string> = new Set<string>([\n  MediaConstants.ALBUM_ID_ALL,\n  MediaConstants.ALBUM_ID_VIDEO,\n  MediaConstants.ALBUM_ID_RECYCLE,\n  MediaConstants.ALBUM_ID_FAVOR,\n  MediaConstants.ALBUM_ID_CAMERA,\n  MediaConstants.ALBUM_ID_SNAPSHOT,\n  MediaConstants.ALBUM_ID_MOVING_PHOTO\n  ] as string[]);\n  static readonly ALBUM_DISABLE_DELETE_LIST: Set<string> = new Set<string>([\n  MediaConstants.ALBUM_ID_ALL,\n  MediaConstants.ALBUM_ID_CAMERA,\n  MediaConstants.ALBUM_ID_VIDEO,\n  MediaConstants.ALBUM_ID_RECYCLE,\n  MediaConstants.ALBUM_ID_FAVOR,\n  MediaConstants.ALBUM_ID_SNAPSHOT,\n  MediaConstants.ALBUM_ID_MOVING_PHOTO\n  ] as string[]);\n  static readonly ALBUM_DISABLE_NEW_LIST: Set<string> = new Set<string>([\n  MediaConstants.ALBUM_ID_ALL,\n  MediaConstants.ALBUM_ID_CAMERA,\n  MediaConstants.ALBUM_ID_VIDEO,\n  MediaConstants.ALBUM_ID_RECYCLE,\n  MediaConstants.ALBUM_ID_FAVOR,\n  MediaConstants.ALBUM_ID_SNAPSHOT,\n  MediaConstants.ALBUM_ID_MOVING_PHOTO\n  ] as string[]);\n  static readonly ALBUM_DISABLE_RENAME_LIST: Set<string> = new Set<string>([\n  MediaConstants.ALBUM_ID_ALL,\n  MediaConstants.ALBUM_ID_CAMERA,\n  MediaConstants.ALBUM_ID_VIDEO,\n  MediaConstants.ALBUM_ID_RECYCLE,\n  MediaConstants.ALBUM_ID_FAVOR,\n  MediaConstants.ALBUM_ID_SNAPSHOT,\n  MediaConstants.ALBUM_ID_MOVING_PHOTO\n  ] as string[]);\n  static readonly ALBUM_DEFAULT_SORT_LIST: string[] = [\n  MediaConstants.ALBUM_ID_ALL,\n  MediaConstants.ALBUM_ID_CAMERA,\n  MediaConstants.ALBUM_ID_VIDEO,\n  MediaConstants.ALBUM_ID_SNAPSHOT,\n  MediaConstants.ALBUM_ID_MOVING_PHOTO,\n  MediaConstants.ALBUM_ID_FAVOR\n  ];\n  static readonly CAMERA_ALBUM_PATH = 'Camera'\n  static readonly REMOTE_ALBUM_PATH = 'FromOtherDevices'\n  static readonly SNAPSHOT_ALBUM_PATH = 'Screenshots'\n  static readonly PHOTO_SUBTYPE = photoAccessHelper.PhotoKeys.PHOTO_SUBTYPE.toString();\n  static readonly MOVING_PHOTO = photoAccessHelper.PhotoSubtype.MOVING_PHOTO;\n\n  // 需要过滤的媒体文件类型\n  static readonly FILTER_MEDIA_TYPE_ALL: string = 'FILTER_MEDIA_TYPE_ALL';\n  static readonly FILTER_MEDIA_TYPE_IMAGE: string = 'FILTER_MEDIA_TYPE_IMAGE';\n  static readonly FILTER_MEDIA_TYPE_VIDEO: string = 'FILTER_MEDIA_TYPE_VIDEO';\n  //TODO delete\n  static readonly DIR_CAMERA = 0\n  static readonly DIR_VIDEO = 1\n  static readonly DIR_IMAGE = 2\n  static readonly DIR_AUDIO = 3\n  static readonly DIR_DOCUMENTS = 4\n  static readonly DIR_DOWNLOAD = 5\n  static readonly EMPTY_FETCH_COLUMNS = []\n  static readonly FILE_ASSET_FETCH_COLUMNS = [photoAccessHelper.PhotoKeys.URI,\n  photoAccessHelper.PhotoKeys.PHOTO_TYPE,\n  photoAccessHelper.PhotoKeys.DISPLAY_NAME,\n  photoAccessHelper.PhotoKeys.SIZE,\n  photoAccessHelper.PhotoKeys.DATE_ADDED,\n  photoAccessHelper.PhotoKeys.DATE_MODIFIED,\n  photoAccessHelper.PhotoKeys.DURATION,\n  photoAccessHelper.PhotoKeys.WIDTH,\n  photoAccessHelper.PhotoKeys.HEIGHT,\n  photoAccessHelper.PhotoKeys.DATE_TAKEN,\n  photoAccessHelper.PhotoKeys.ORIENTATION,\n  photoAccessHelper.PhotoKeys.FAVORITE,\n  photoAccessHelper.PhotoKeys.TITLE,\n  photoAccessHelper.PhotoKeys.POSITION,\n  photoAccessHelper.PhotoKeys.DATE_TRASHED,\n  photoAccessHelper.PhotoKeys.HIDDEN]\n  static readonly ALBUM_ASSET_FETCH_COLUMNS = [photoAccessHelper.AlbumKeys.URI, photoAccessHelper.AlbumKeys.ALBUM_NAME]\n}", "llm_cg": {"MediaConstants.<static_initializer>": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nenum EntryForm {\n  NORMAL = 0,\n  CAMERA = 1,\n  SINGLE_SELECT = 2,\n  MULTIPLE_SELECT = 3,\n  RECYCLE = 4,\n  DISTRIBUTED = 5,\n  CARD = 6,\n  VIEW_DATA = 7\n}\n\nexport class RouterConstants {\n  static readonly ENTRY_FROM_NONE = 0;\n  static readonly ENTRY_FROM_CAMERA = 1;\n  static readonly ENTRY_FROM_SINGLE_SELECT = 2;\n  static readonly ENTRY_FROM_MULTIPLE_SELECT = 3;\n  static readonly ENTRY_FROM_RECYCLE = 4;\n  static readonly ENTRY_FROM_DISTRIBUTED = 5;\n  static readonly ENTRY_FROM_NORMAL = 6;\n  static readonly ENTRY_FROM_FORM_ABILITY = 7;\n  static readonly ENTRY_FROM_FORM_FORM_EDITOR = 8;\n  static readonly ENTRY_FROM_VIEW_DATA = 9;\n  static readonly ENTRY_FROM_FORM_ABILITY_NONE = 12;\n  static readonly ENTRY_FROM = EntryForm;\n}", "llm_cg": {"RouterConstants.ENTRY_FROM": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Constants {\n  // Immersive animation duration\n  static readonly IMMERSE_ANIM_DURATION = 300;\n\n  // click event\n  static readonly TOGGLE_BAR = 'single_photo_toggle_bar';\n\n  // hide bars\n  static readonly HIDE_BARS = 'single_photo_hide_bars';\n\n  // pull down to return start\n  static readonly PULL_DOWN_START = 'single_photo_pull_down_start';\n\n  // pull down to return end\n  static readonly PULL_DOWN_END = 'single_photo_pull_down_end';\n\n  // pull down to return cancel\n  static readonly PULL_DOWN_CANCEL = 'single_photo_pull_down_cancel';\n\n  // pull down to return threshold\n  static readonly PULL_DOWN_THRESHOLD = 200;\n\n  // touch event\n  static readonly TOUCH_EVENT = 'single_photo_touch_event';\n\n  // direction change event\n  static readonly DIRECTION_CHANGE = 'single_photo_direction_change';\n\n  // animation event\n  static readonly ANIMATION_EVENT = 'single_photo_animation_event';\n\n  // data quantity change\n  static readonly DATA_SIZE_CHANGED = 'photo_data_size_changed';\n\n  // current data change\n  static readonly DATA_CONTENT_CHANGED = 'photo_data_content_changed';\n\n  // video play\n  static readonly VIDEO_PLAY = 'single_photo_video_play';\n\n  // video pause\n  static readonly VIDEO_PAUSE = 'single_photo_video_pause';\n\n  // popup show\n  static readonly POP_APPEAR = 'single_photo_popup_appear';\n\n  // popup disappear\n  static readonly POP_DISAPPEAR = 'single_photo_popup_disappear';\n\n  // set favor photo\n  static readonly SET_FAVOR = 'single_photo_set_favor';\n\n  // rename photo\n  static readonly RENAME = 'single_photo_rename';\n\n  // rotate photo\n  static readonly ROTATE = 'single_photo_rotate';\n\n  // delete photo\n  static readonly DELETE = 'single_photo_delete';\n\n  // photo show state\n  static readonly PHOTO_SHOW_STATE = 'single_photo_show_state';\n\n  // set swiper can swipe\n  static readonly SET_DISABLE_SWIPE = 'set_disable_swipe';\n\n  // Scale lower limit\n  static readonly COMPONENT_SCALE_FLOOR = 0.5;\n\n  // scale upper limit\n  static readonly COMPONENT_SCALE_CEIL = 2.0;\n\n  // when the double-click scale is larger than maxScale, the maxScale is adjusted to 1.2 times the double-click scale\n  static readonly MAX_SCALE_EXTRA_FACTOR = 1.2;\n\n  // After reaching max scale, you can also scale an additional 0.2x max scale, and rebound after letting go\n  static readonly OVER_SCALE_EXTRA_FACTOR = 1.5;\n\n  // If the aspect ratio of the picture is the same as the display area,\n  // double-click to adjust the zoom factor to 4 / 3\n  static readonly SAME_RATIO_SCALE_FACTOR = 4 / 3;\n\n  // overScale animation duration\n  static readonly OVER_SCALE_ANIME_DURATION = 500;\n  static readonly SHARE_TRANSITION_DURATION = 200;\n  static readonly PAGE_SHOW_ANIMATION_DURATION = 200;\n  static readonly RESERVED_DIGITS = 6;\n  static readonly CENTER_DEFAULT = 0.5;\n  static readonly NUMBER_2 = 2;\n  static readonly NUMBER_3 = 3;\n  static readonly NUMBER_12 = 12;\n  static readonly NUMBER_13 = 13;\n  static readonly DEFAULT_TRANSITION_ID: string = 'default_id';\n}", "llm_cg": {"Constants.IMMERSE_ANIM_DURATION": [], "Constants.TOGGLE_BAR": [], "Constants.HIDE_BARS": [], "Constants.PULL_DOWN_START": [], "Constants.PULL_DOWN_END": [], "Constants.PULL_DOWN_CANCEL": [], "Constants.PULL_DOWN_THRESHOLD": [], "Constants.TOUCH_EVENT": [], "Constants.DIRECTION_CHANGE": [], "Constants.ANIMATION_EVENT": [], "Constants.DATA_SIZE_CHANGED": [], "Constants.DATA_CONTENT_CHANGED": [], "Constants.VIDEO_PLAY": [], "Constants.VIDEO_PAUSE": [], "Constants.POP_APPEAR": [], "Constants.POP_DISAPPEAR": [], "Constants.SET_FAVOR": [], "Constants.RENAME": [], "Constants.ROTATE": [], "Constants.DELETE": [], "Constants.PHOTO_SHOW_STATE": [], "Constants.SET_DISABLE_SWIPE": [], "Constants.COMPONENT_SCALE_FLOOR": [], "Constants.COMPONENT_SCALE_CEIL": [], "Constants.MAX_SCALE_EXTRA_FACTOR": [], "Constants.OVER_SCALE_EXTRA_FACTOR": [], "Constants.SAME_RATIO_SCALE_FACTOR": [], "Constants.OVER_SCALE_ANIME_DURATION": [], "Constants.SHARE_TRANSITION_DURATION": [], "Constants.PAGE_SHOW_ANIMATION_DURATION": [], "Constants.RESERVED_DIGITS": [], "Constants.CENTER_DEFAULT": [], "Constants.NUMBER_2": [], "Constants.NUMBER_3": [], "Constants.NUMBER_12": [], "Constants.NUMBER_13": [], "Constants.DEFAULT_TRANSITION_ID": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class BroadcastConstants {\n  static readonly DELETE_FROM_BROWSER: number = 0;\n  static readonly DELETE_FROM_GRID: number = 1;\n  static readonly SELECT = 'select';\n  static readonly GROUP_SELECT = 'groupSelect';\n  static readonly JUMP_PHOTO_BROWSER = 'JumpPhotoPage';\n  static readonly SHOW_DELETE_DIALOG = 'showDeleteDialog';\n  static readonly UPDATE_PROGRESS = 'updateProgress';\n  static readonly CANCEL_DELETE = 'cancelDelete';\n  static readonly JUMP_THIRD_PHOTO_BROWSER = 'jumpThirdPhotoPage';\n  static readonly BACK_PRESS_EVENT = 'back';\n  static readonly RESET_STATE_EVENT = 'resetState';\n  static readonly ON_TAB_CHANGED = 'onTabChanged';\n  static readonly RESET_ZERO = 'resetZero';\n  static readonly SHOW_DETAIL_DIALOG = 'showDetailDialog';\n  static readonly SHOW_THIRD_DELETE_DIALOG = 'showThirdDeleteDialog';\n  static readonly SHOW_MULTI_SELECT_DIALOG = 'showMultiSelectDialog';\n  static readonly UPDATE_DATA_SOURCE = 'updateDataSource';\n  static readonly SHOW_PROGRESS_DIALOG = 'showProgressDialog';\n  static readonly DELETE_PROGRESS_DIALOG = 'deleteProgressDialog';\n  static readonly CANCEL_OPERATE = 'cancelOperate';\n  static readonly MEDIA_OPERATION = 'mediaOperation';\n  static readonly OPERATE_CONTINUE = 'operateContinue';\n  static readonly OPERATE_PAUSE = 'operatePause';\n  static readonly SHOW_RENAME_PHOTO_DIALOG = 'showRenamePhotoDialog';\n  static readonly SHOW_SAVE_PHOTO_DIALOG = 'showSavePhotoDialog';\n  static readonly SHOW_EDIT_EXIT_PHOTO_DIALOG = 'showEditExitPhotoDialog';\n  static readonly SHOW_ADD_NOTES_PHOTO_DIALOG = 'showAddNotesPhotoDialog';\n  static readonly SHOW_NEW_ALBUM_PHOTO_DIALOG = 'showNewAlbumPhotoDialog';\n  static readonly SHOW_COPY_OR_MOVE_DIALOG = 'showCopyOrMoveDialog';\n  static readonly FIND_SAME_FILE_DIALOG = 'findSameFileDialog';\n  static readonly ON_REMOTE_CHANGED = 'on_remote_changed';\n  static readonly EXIT_SAVE_PROGRESS_CLOSE = 'save_progress_close';\n  static readonly SHOW_EDIT_SAVE_PROGRESS_DIALOG = 'show_exit_save_progress_dialog';\n  static readonly DOWNLOAD_CANCEL_OPERATE = 'download_cancel_operate';\n  static readonly ON_DATA_RELOADED = 'on_data_reloaded';\n  static readonly SAVE_FORM_EDITOR_DATA = 'save_form_editor_data';\n  static readonly INIT_DATE_TEXT = 'init_date_text';\n  static readonly THIRD_ROUTE_PAGE = 'third_route_page';\n  static readonly ON_DATA_RELOADED_WITH_EDIT = 'on_data_reloaded_with_edit';\n  static readonly PHOTO_EDIT_SAVE_COMPLETE: string = 'photo_edit_save_complete';\n  static readonly CHANGE_SWIPER_DURATION = 'change_swiper_duration';\n  // USED for AppStorage\n  static readonly LEFT_BLANK: string = 'leftBlank';\n  static readonly RESET_TAB_SELECTED_STATUE: string = 'reset_tab_selected_statue';\n  static readonly RESET_TAB_SELECTED_TEXT: string = 'reset_tab_selected_text';\n}", "llm_cg": {"BroadcastConstants.DELETE_FROM_BROWSER": [], "BroadcastConstants.DELETE_FROM_GRID": [], "BroadcastConstants.SELECT": [], "BroadcastConstants.GROUP_SELECT": [], "BroadcastConstants.JUMP_PHOTO_BROWSER": [], "BroadcastConstants.SHOW_DELETE_DIALOG": [], "BroadcastConstants.UPDATE_PROGRESS": [], "BroadcastConstants.CANCEL_DELETE": [], "BroadcastConstants.JUMP_THIRD_PHOTO_BROWSER": [], "BroadcastConstants.BACK_PRESS_EVENT": [], "BroadcastConstants.RESET_STATE_EVENT": [], "BroadcastConstants.ON_TAB_CHANGED": [], "BroadcastConstants.RESET_ZERO": [], "BroadcastConstants.SHOW_DETAIL_DIALOG": [], "BroadcastConstants.SHOW_THIRD_DELETE_DIALOG": [], "BroadcastConstants.SHOW_MULTI_SELECT_DIALOG": [], "BroadcastConstants.UPDATE_DATA_SOURCE": [], "BroadcastConstants.SHOW_PROGRESS_DIALOG": [], "BroadcastConstants.DELETE_PROGRESS_DIALOG": [], "BroadcastConstants.CANCEL_OPERATE": [], "BroadcastConstants.MEDIA_OPERATION": [], "BroadcastConstants.OPERATE_CONTINUE": [], "BroadcastConstants.OPERATE_PAUSE": [], "BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG": [], "BroadcastConstants.SHOW_SAVE_PHOTO_DIALOG": [], "BroadcastConstants.SHOW_EDIT_EXIT_PHOTO_DIALOG": [], "BroadcastConstants.SHOW_ADD_NOTES_PHOTO_DIALOG": [], "BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG": [], "BroadcastConstants.SHOW_COPY_OR_MOVE_DIALOG": [], "BroadcastConstants.FIND_SAME_FILE_DIALOG": [], "BroadcastConstants.ON_REMOTE_CHANGED": [], "BroadcastConstants.EXIT_SAVE_PROGRESS_CLOSE": [], "BroadcastConstants.SHOW_EDIT_SAVE_PROGRESS_DIALOG": [], "BroadcastConstants.DOWNLOAD_CANCEL_OPERATE": [], "BroadcastConstants.ON_DATA_RELOADED": [], "BroadcastConstants.SAVE_FORM_EDITOR_DATA": [], "BroadcastConstants.INIT_DATE_TEXT": [], "BroadcastConstants.THIRD_ROUTE_PAGE": [], "BroadcastConstants.ON_DATA_RELOADED_WITH_EDIT": [], "BroadcastConstants.PHOTO_EDIT_SAVE_COMPLETE": [], "BroadcastConstants.CHANGE_SWIPER_DURATION": [], "BroadcastConstants.LEFT_BLANK": [], "BroadcastConstants.RESET_TAB_SELECTED_STATUE": [], "BroadcastConstants.RESET_TAB_SELECTED_TEXT": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (C) 2024 Huawei Device Co., Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nexport class Contents {\n  //服务IP\n  public static serverIp: string = '192.168.1.100'\n  //直连交换机\n  public static exchangeType_direct: string = 'direct'\n  //主题交换机\n  public static exchangeType_topic: string = 'topic'\n  //扇形交换机\n  public static exchangeType_fanout: string = 'fanout'\n\n}", "llm_cg": {"Contents.serverIp": [], "Contents.exchangeType_direct": [], "Contents.exchangeType_topic": [], "Contents.exchangeType_fanout": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (C) 2024 Huawei Device Co., Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport Want from '@ohos.app.ability.Want';\nimport window from '@ohos.window';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n  }\n\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    // Ability has brought to foreground\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // Ability has back to background\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}\n", "llm_cg": {"EntryAbility.onCreate(Want, AbilityConstant.LaunchParam)": [], "EntryAbility.onDestroy()": [], "EntryAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, (err, data) => void)"], "EntryAbility.onWindowStageDestroy()": [], "EntryAbility.onForeground()": [], "EntryAbility.onBackground()": []}, "static_cg": {"@test/87.ts: EntryAbility.onWindowStageCreate(window.WindowStage)": ["@test/87.ts: EntryAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog'\n\n/*\n * logger of wifi test\n */\n\nclass Logger {\n  private domain: number\n  private prefix: string\n  private format: string = \"%{public}s, %{public}s\"\n\n  constructor(prefix: string) {\n    this.prefix = prefix\n    this.domain = 0xFF00\n  }\n\n  debug(...args: string[]) {\n    hilog.debug(this.domain, this.prefix, this.format, args)\n  }\n\n  info(...args: string[]) {\n    hilog.info(this.domain, this.prefix, this.format, args)\n  }\n\n  warn(...args: string[]) {\n    hilog.warn(this.domain, this.prefix, this.format, args)\n  }\n\n  error(...args: string[]) {\n    hilog.error(this.domain, this.prefix, this.format, args)\n  }\n}\n\nexport default new Logger('[Screenshot]')", "llm_cg": {"Logger.debug(...args: string[])": ["Logger.%AM0$debug(unknown, unknown, unknown, unknown)"], "Logger.info(...args: string[])": ["Logger.%AM1$info(unknown, unknown, unknown, unknown)"], "Logger.warn(...args: string[])": ["Logger.%AM2$warn(unknown, unknown, unknown, unknown)"], "Logger.error(...args: string[])": ["Logger.%AM3$error(unknown, unknown, unknown, unknown)"]}, "static_cg": {"@test/88.ts: %dflt.[static]%dflt()": ["@test/88.ts: Logger.constructor(string)"]}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport image from '@ohos.multimedia.image'\nimport fileio from '@ohos.fileio'\nimport fs from '@ohos.file.fs';\nimport prompt from '@ohos.prompt'\nimport photoAccessHelper from '@ohos.file.photoAccessHelper'\nimport DateTimeUtil from './DateTimeUtil'\n\n\n/**\n * mediaUtils of wifi test\n */\n\nconst TAG = \"[MediaUtils]\"\n\nclass MediaUtils {\n  async createAndGetFile(context: any) {\n    let mediaTest = photoAccessHelper.getPhotoAccessHelper(context)\n    let info = {\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }\n    let dateTimeUtil = new DateTimeUtil()\n    let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\n    let displayName = `${info.prefix}${name}${info.suffix}`\n    let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\n    let options: photoAccessHelper.CreateOptions = {\n      title: displayName\n    }\n    return await mediaTest.createAsset(photoType, '.jpg', options)\n  }\n\n  async savePicture(data: image.PixelMap, context: any) {\n    console.log(TAG, `savePicture`)\n    let packOpts: image.PackingOption = {\n      format: \"image/jpeg\", quality: 100\n    }\n    let imagePackerApi = image.createImagePacker()\n    let arrayBuffer = await imagePackerApi.packing(data, packOpts)\n    let fileAsset = await this.createAndGetFile(context)\n    let file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n    imagePackerApi.release()\n    try {\n      await fs.write(file.fd, arrayBuffer);\n    } catch (err) {\n      console.log(`write failed, code is ${err.code}, message is ${err.message}`)\n    }\n    await fs.close(file.fd);\n    console.log(TAG, `write done`)\n    prompt.showToast({\n      message: '图片保存成功', duration: 1000\n    })\n  }\n}\n\nexport default new MediaUtils()", "llm_cg": {"MediaUtils.createAndGetFile(context)": ["photoAccessHelper.getPhotoAccessHelper(context)", "DateTimeUtil.getDate()", "DateTimeUtil.getTime()", "mediaTest.createAsset(photoType, '.jpg', options)"], "MediaUtils.savePicture(data, context)": ["MediaUtils.createAndGetFile(context)", "image.createImagePacker()", "imagePackerApi.packing(data, packOpts)", "fs.open(fileAsset, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE)", "imagePackerApi.release()", "fs.write(file.fd, arrayBuffer)", "fs.close(file.fd)", "prompt.showToast({message: '图片保存成功', duration: 1000})"]}, "static_cg": {"@test/89.ts: MediaUtils.savePicture(image.PixelMap, any)": ["@test/89.ts: MediaUtils.createAndGetFile(any)"]}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file 日期工具\n */\nexport default class DateTimeUtil {\n\n  /**\n   * 时分秒\n   */\n  getTime() {\n    const DATETIME = new Date()\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds())\n  }\n\n  /**\n   * 年月日\n   */\n  getDate() {\n    const DATETIME = new Date()\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate())\n  }\n\n  /**\n   * 日期不足两位补充0\n   * @param value-数据值\n   */\n  fill(value: number) {\n    return (value > 9 ? '' : '0') + value\n  }\n\n  /**\n   * 年月日格式修饰\n   * @param year\n   * @param month\n   * @param date\n   */\n  concatDate(year: number, month: number, date: number) {\n    return `${year}${this.fill(month)}${this.fill(date)}`\n  }\n\n  /**\n   * 时分秒格式修饰\n   * @param hours\n   * @param minutes\n   * @param seconds\n   */\n  concatTime(hours: number, minutes: number, seconds: number) {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`\n  }\n}", "llm_cg": {"DateTimeUtil.getTime()": ["DateTimeUtil.concatTime(unknown, unknown, unknown)"], "DateTimeUtil.getDate()": ["DateTimeUtil.concatDate(unknown, unknown, unknown)"], "DateTimeUtil.concatDate(year: number, month: number, date: number)": ["DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)"], "DateTimeUtil.concatTime(hours: number, minutes: number, seconds: number)": ["DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)", "DateTimeUtil.fill(unknown)"]}, "static_cg": {"@test/90.ts: DateTimeUtil.getTime()": ["@test/90.ts: DateTimeUtil.concatTime(number, number, number)"], "@test/90.ts: DateTimeUtil.getDate()": ["@test/90.ts: DateTimeUtil.concatDate(number, number, number)"], "@test/90.ts: DateTimeUtil.concatDate(number, number, number)": ["@test/90.ts: DateTimeUtil.fill(number)"], "@test/90.ts: DateTimeUtil.concatTime(number, number, number)": ["@test/90.ts: DateTimeUtil.fill(number)"]}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ConfigData {\n  TAG = 'WIFI_Test'\n  WH_100_100 = '100%';\n  WH_3_100 = '3%';\n  WH_5_100 = '5%';\n  WH_6_100 = '6%';\n  WH_10_100 = '10%';\n  WH_15_100 = '15%';\n  WH_20_100 = '20%';\n  WH_25_100 = '25%';\n  WH_28_100 = '28%';\n  WH_30_100 = '30%';\n  WH_33_100 = '33%';\n  WH_35_100 = '35%';\n  WH_40_100 = '40%';\n  WH_45_100 = '45%';\n  WH_50_100 = '50%';\n  WH_55_100 = '55%';\n  WH_58_100 = '58%';\n  WH_60_100 = '60%';\n  WH_65_100 = '65%';\n  WH_67_100 = '67%';\n  WH_70_100 = '70%';\n  WH_75_100 = '75%';\n  WH_80_100 = '80%';\n  WH_83_100 = '83%';\n  WH_87_100 = '87%';\n  WH_88_100 = '88%';\n  WH_90_100 = '90%';\n  WH_93_100 = '93%';\n  WH_95_100 = '95%';\n  value_20 = 20;\n  value_100 = 100;\n  font_20 = 20;\n  MAX_LINES_1 = 1;\n  MAX_LINES_2 = 2;\n  MAX_LINES_3 = 3;\n  DURATION_TIME = 200;\n  FUNCTION_TYPE_HDC = 4;\n  testLog = \"enableWifi test---------\";\n}\n\nlet configData = new ConfigData();\n\nexport default configData as ConfigData;", "llm_cg": {"ConfigData.constructor()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport BaseModel from './BaseModel';\n\nlet LogLevel = {\n  /**\n   * debug\n   */\n  DEBUG: 3,\n\n  /**\n   * info\n   */\n  INFO: 4,\n\n  /**\n   * warn\n   */\n  WARN: 5,\n\n  /**\n   * error\n   */\n  ERROR: 6,\n\n  /**\n   * fatal\n   */\n  FATAL: 7,\n};\n\nconst LOG_LEVEL = LogLevel.INFO\n\n/**\n *  log package tool class\n */\nexport class LogUtil extends BaseModel {\n  debug(msg): void {\n    console.log(msg)\n    if (LogLevel.DEBUG >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  log(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  info(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }\n\n  warn(msg): void {\n    console.log(msg)\n    if (LogLevel.WARN >= LOG_LEVEL) {\n      console.warn(msg);\n    }\n  }\n\n  error(msg): void {\n    if (LogLevel.ERROR >= LOG_LEVEL) {\n      console.error(msg);\n    }\n  }\n}\n\nlet mLogUtil = new LogUtil();\n\nexport default mLogUtil as LogUtil\n;", "llm_cg": {"LogUtil.debug(msg)": ["LogUtil.%AM0$debug(unknown)"], "LogUtil.log(msg)": ["LogUtil.%AM1$log(unknown)"], "LogUtil.info(msg)": ["LogUtil.%AM2$info(unknown)"], "LogUtil.warn(msg)": ["LogUtil.%AM3$warn(unknown)"], "LogUtil.error(msg)": ["LogUtil.%AM4$error(unknown)"]}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class LogDataManager {\n  TAG = 'WIFI_Manager_Test'\n  //wifi\n  testEnableWifiManager_StartLog = \"testEnableWifiManager Start----------\"\n  testEnableWifiManager_EndLog = \"testEnableWifi End----------\"\n  testDisableWifiManager_StartLog = \"testDisableWifi Start----------\"\n  testDisableWifiManager_EndLog = \"testDisableWifi End----------\"\n  testIsWifiActiveManager_StartLog = \"testIsWifiActive Start----------\"\n  testIsWifiActiveManager_EndLog = \"testDisableWifi End----------\"\n  testScanManager_StartLog = -\"testScan Start----------\"\n  testScanManager_EndLog = \"testScan End----------\"\n  testForcibleScanManager_StartLog = \"testForcibleScan Start----------\"\n  testForcibleScanManager_EndLog = \"testForcibleScan End----------\"\n  testGetScanInfoListManager_StartLog = \"testGetScanInfoListManager start---------\"\n  testGetScanInfoListManager_EndLog = \"testGetScanInfoListManager End----------\"\n  testGetScanInfosPromiseManager_StartLog = \"testGetScanInfosPromise Start----------\"\n  testGetScanInfosPromiseManager_EndLog = \"testGetScanInfosPromise End----------\"\n  testGetScanInfosPromiseManager_successfulLog = \"getScanInfos promise successful\"\n  testGetScanInfosManager_infoLog = \"wifi received scan info: \"\n  testGetScanInfosCallbackManager_StartLog = \"testGetScanInfosCallback Start----------\"\n  testGetScanInfosCallbackManager_EndLog = \"testGetScanInfosCallback End----------\"\n  testGetScanInfosCallbackManager_successfulLog = \"getScanInfos callback successful\"\n  testAddDeviceConfigPromiseManager_StartLog = \"testAddDeviceConfigPromise Start----------\"\n  testAddDeviceConfigPromiseManager_EndLog = \"testAddDeviceConfigPromise End----------\"\n  testAddDeviceConfigPromiseManager_successfulLog = \"addDeviceConfig promise successful\"\n  testAddDeviceConfigManagerLog = \"addDeviceConfig: \"\n  testAddDeviceConfigCallbackManager_StartLog = \"testAddDeviceConfigCallback Start----------\"\n  testAddDeviceConfigCallbackManager_EndLog = \"testAddDeviceConfigCallback End----------\"\n  testAddDeviceConfigCallbackManager_successfulLog = \"addDeviceConfig Callback successful\"\n  testAddCandidateConfigPromiseManager_StartLog = \"testAddCandidateConfigPromise Start----------\"\n  testAddCandidateConfigPromiseManager_EndLog = \"testAddCandidateConfigPromise End----------\"\n  testAddCandidateConfigPromiseManager_successfulLog = \"addCandidateConfig promise successful\"\n  testAddCandidateConfigManagerLog = \"addCandidateConfig: \"\n  testAddCandidateConfigCallbackManager_StartLog = \"testAddCandidateConfigCallback Start----------\"\n  testAddCandidateConfigCallbackManager_EndLog = \"testAddCandidateConfigCallback End----------\"\n  testAddCandidateConfigCallbackManager_successfulLog = \"addCandidateConfig Callback successful\"\n  testRemoveCandidateConfigPromiseManager_StartLog = \"testRemoveCandidateConfigPromise Start----------\"\n  testRemoveCandidateConfigPromiseManager_EndLog = \"testRemoveCandidateConfigPromise End----------\"\n  testRemoveCandidateConfigPromiseManager_successfulLog = \"removeCandidateConfig promise successful\"\n  testRemoveCandidateConfigManagerLog = \"removeCandidateConfig: \"\n  testRemoveCandidateConfigCallbackManager_StartLog = \"testRemoveCandidateConfigCallback Start----------\"\n  testRemoveCandidateConfigCallbackManager_EndLog = \"testRemoveCandidateConfigCallback End----------\"\n  testRemoveCandidateConfigCallbackManager_successfulLog = \"removeCandidateConfig Callback successful\"\n  testGetCandidateConfigsManager_StartLog = \"testGetCandidateConfigsManager Start----------\"\n  testGetCandidateConfigsManager_EndLog = \"testGetCandidateConfigsManager End----------\"\n  testConnectToCandidateConfigManager_StartLog = \"testConnectToCandidateConfigManager Start----------\"\n  testConnectToCandidateConfigManager_EndLog = \"testConnectToCandidateConfigManager End----------\"\n  testConnectToNetworkManager_StartLog = \"testConnectToNetwork Start----------\"\n  testConnectToNetworkManager_EndLog = \"testConnectToNetwork End----------\"\n  testConnectToDeviceManager_StartLog = \"testConnectToDevice Start----------\"\n  testConnectToDeviceManager_EndLog = \"testConnectToDevice End----------\"\n  testDisconnectManager_StartLog = \"testDisconnect Start----------\"\n  testDisconnectManager_EndLog = \"testDisconnect End----------\"\n  testGetSignalLevelManager_StartLog = \"testGetSignalLevel Start----------\"\n  testGetSignalLevelManager_EndLog = \"testGetSignalLevel End----------\"\n  testGetLinkedInfoPromiseManager_StartLog = \"testGetLinkedInfoPromise Start----------\"\n  testGetLinkedInfoPromiseManager_EndLog = \"testGetLinkedInfoPromise End----------\"\n  testGetLinkedInfoPromiseManager_successfulLog = \"getLinkedInfoPromise test successful\"\n  testGetLinkedInfoCallbackManager_StartLog = \"testGetLinkedInfoCallback Start----------\"\n  testGetLinkedInfoCallbackManager_EndLog = \"testGetLinkedInfoCallback End----------\"\n  testGetLinkedInfoCallbackManager_successfulLog = \"getLinkedInfoCallback test successful\"\n  testIsConnectedManager_StartLog = \"testIsConnected Start----------\"\n  testIsConnectedManager_EndLog = \"testIsConnected End----------\"\n  testGetSupportedFeaturesManager_StartLog = \"testGetSupportedFeatures Start----------\"\n  testGetSupportedFeaturesManager_EndLog = \"testGetSupportedFeatures End----------\"\n  testIsFeatureSupportedManager_StartLog = \"testIsFeatureSupported Start----------\"\n  testIsFeatureSupportedManager_EndLog = \"testIsFeatureSupported End----------\"\n  testGetDeviceMacAddressManager_StartLog = \"testGetDeviceMacAddress Start----------\"\n  testGetDeviceMacAddressManager_EndLog = \"testGetDeviceMacAddress End----------\"\n  testGetIpInfoManager_StartLog = \"testGetIpInfo Start----------\"\n  testGetIpInfoManager_EndLog = \"testGetIpInfo End----------\"\n  testGetCountryCodeManager_StartLog = \"testGetCountryCode Start----------\"\n  testGetCountryCodeManager_EndLog = \"testGetCountryCode End----------\"\n  testReassociateManager_StartLog = \"testReassociate Start----------\"\n  testReassociateManager_EndLog = \"testReassociate End----------\"\n  testReConnectManager_StartLog = \"testReConnect Start----------\"\n  testReConnectManager_EndLog = \"testReConnect End----------\"\n  testGetDeviceConfigsManager_StartLog = \"testGetDeviceConfigs Start----------\"\n  testGetDeviceConfigsManager_EndLog = \"testGetDeviceConfigs End----------\"\n  testUpdateNetworkManager_StartLog = \"testUpdateNetwork Start----------\"\n  testUpdateNetworkManager_EndLog = \"testUpdateNetwork End----------\"\n  testDisableNetworkManager_StartLog = \"testDisableNetwork Start----------\"\n  testDisableNetworkManager_EndLog = \"testDisableNetwork End----------\"\n  testRemoveAllNetworkManager_StartLog = \"testRemoveAllNetwork Start----------\"\n  testRemoveAllNetworkManager_EndLog = \"testRemoveAllNetwork End----------\"\n  testRemoveDeviceManager_StartLog = \"testRemoveDevice Start----------\"\n  testRemoveDeviceManager_EndLog = \"testRemoveDevice End----------\"\n  testOnWifiStateChangeManager_StartLog = \"testOnWifiStateChange Start----------\"\n  testOnWifiStateChangeManager_EndLog = \"testOnWifiStateChange End----------\"\n  testOnWifiConnectionChangeManager_StartLog = \"testOnWifiConnectionChange Start----------\"\n  testOnWifiConnectionChangeManager_EndLog = \"testOnWifiConnectionChange End----------\"\n  testOnWifiScanStateChangeManager_StartLog = \"testOnWifiConnectionChange Start----------\"\n  testOnWifiScanStateChangeManager_EndLog = \"testOnWifiConnectionChange End----------\"\n  testOnWifiRssiChangeManager_StartLog = \"testOnWifiRssiChange Start----------\"\n  testOnWifiRssiChangeManager_EndLog = \"testOnWifiRssiChange End----------\"\n  testOnStreamChangeManager_StartLog = \"testOnStreamChange Start----------\"\n  testOnStreamChangeManager_EndLog = \"testOnStreamChange End----------\"\n  testOnDeviceConfigChangeManager_StartLog = \"testOnDeviceConfigChangeManager Start----------\"\n  testOnDeviceConfigChangeManager_EndLog = \"testOnDeviceConfigChangeManager End----------\"\n  testEnableSemiWifi_StartLog = \"testEnableSemiWifi Start----------\"\n  testEnableSemiWifi_EndLog = \"testEnableSemiWifi End----------\"\n  testStartScanManager_StartLog = \"testStartScan Start----------\"\n  testStartScanManager_EndLog = \"testStartScan End----------\"\n  //hotspot\n  testEnableHotspotManager_StartLog = \"testEnableHotspot start--------------\"\n  testEnableHotspotManager_EndLog = \"testEnableHotspot End--------------\"\n  testDisableHotspotManager_StartLog = \"testDisableHotspot start--------------\"\n  testDisableHotspotManager_EndLog = \"testDisableHotspot End--------------\"\n  testIsHotspotDualBandSupportedManager_StartLog = \"testIsHotspotDualBandSupported start--------------\"\n  testIsHotspotDualBandSupportedManager_EndLog = \"testIsHotspotDualBandSupported End--------------\"\n  testIsHostActiveManager_StartLog = \"testIsHostActive start--------------\"\n  testIsHostActiveManager_EndLog = \"testIsHostActive End--------------\"\n  testSetHotspotConfigManagerManager_StartLog = \"testSetHotspotConfig start--------------\"\n  testSetHotspotConfigManager_EndLog = \"testSetHotspotConfig End--------------\"\n  testGetHotspotConfigManager_StartLog = \"testGetHotspotConfig start--------------\"\n  testGetHotspotConfigManager_EndLog = \"testGetHotspotConfig End--------------\"\n  testGetStationsManager_StartLog = \"testGetStations start--------------\"\n  testGetStationsManager_EndLog = \"testGetStations End--------------\"\n  testOnHotspotStateChangeManager_StartLog = \"testOnHotspotStateChange start--------------\"\n  testOnHotspotStateChangeManager_EndLog = \"testOnHotspotStateChange End--------------\"\n  testOnHotspotStaJoinManager_StartLog = \"testOnHotspotStaJoin start--------------\"\n  testOnHotspotStaJoinManager_EndLog = \"testOnHotspotStaJoin End--------------\"\n  testOnHotspotStaLeaveManager_StartLog = \"testOnHotspotStaLeave start--------------\"\n  testOnHotspotStaLeaveManager_EndLog = \"testOnHotspotStaLeave End--------------\"\n  //p2p\n  testGetP2pLinkedInfoPromiseManager_StartLog = \"testGetP2pLinkedInfoPromise Start----------\"\n  testGetP2pLinkedInfoPromiseManager_EndLog = \"testGetP2pLinkedInfoPromise End----------\"\n  getP2pLinkedInfoPromiseManager_successfulLog = \"getP2pLinkedInfoPromise successful\"\n  testGetP2pLinkedInfoCallbackManager_StartLog = \"testGetP2pLinkedInfoCallback Start----------\"\n  testGetP2pLinkedInfoCallbackManager_EndLog = \"testGetP2pLinkedInfoCallback End----------\"\n  getP2pLinkedInfoCallbackManager_successfulLog = \"getP2pLinkedInfoCallback successful \"\n  testGetCurrentGroupPromiseManager_StartLog = \"testGetCurrentGroupPromise Start----------\"\n  testGetCurrentGroupPromiseManager_EndLog = \"testGetCurrentGroupPromise End----------\"\n  testGetCurrentGroupPromiseManager_successfulLog = \"getCurrentGroupPromise successful\"\n  testGetCurrentGroupCallbackManager_StartLog = \"testGetCurrentGroupCallback Start----------\"\n  testGetCurrentGroupCallbackManager_EndLog = \"testGetCurrentGroupCallback End----------\"\n  getCurrentGroupCallbackManager_successfulLog = \"getCurrentGroupCallback successful\"\n  testGetP2pPeerDevicesPromiseManager_StartLog = \"testGetP2pPeerDevicesPromise Start----------\"\n  testGetP2pPeerDevicesPromiseManager_EndLog = \"testGetP2pPeerDevicesPromise End----------\"\n  getP2pPeerDevicesPromiseManager_successfulLog = \"getP2pPeerDevicesPromise successful\"\n  testGetP2pPeerDevicesCallbackManager_StartLog = \"testGetP2pPeerDevicesCallback Start----------\"\n  testGetP2pPeerDevicesCallbackManager_EndLog = \"testGetP2pPeerDevicesCallback End----------\"\n  getP2pPeerDevicesCallbackManager_successfulLog = \"getP2pPeerDevicesCallback successful\"\n  testCreateGroupManager_StartLog = \"testCreateGroup Start----------\"\n  testCreateGroupManager_EndLog = \"testCreateGroup End----------\"\n  testRemoveGroupManager_StartLog = \"testRemoveGroup Start----------\"\n  testRemoveGroupManager_EndLog = \"testRemoveGroup End----------\"\n  testP2pConnectManager_StartLog = \"testP2pConnect Start----------\"\n  testP2pConnectManager_EndLog = \"testP2pConnect End----------\"\n  testP2pCancelConnectManager_StartLog = \"testP2pCancelConnect Start----------\"\n  testP2pCancelConnectManager_EndLog = \"testP2pCancelConnect End----------\"\n  testStartDiscoverDevicesManager_StartLog = \"testStartDiscoverDevices Start----------\"\n  testStartDiscoverDevicesManager_EndLog = \"testStartDiscoverDevices End----------\"\n  testStopDiscoverDevicesManager_StartLog = \"testStopDiscoverDevices Start----------\"\n  testStopDiscoverDevicesManager_EndLog = \"testStopDiscoverDevices End----------\"\n  testDeletePersistentGroupManager_StartLog = \"testDeletePersistentGroup Start----------\"\n  testDeletePersistentGroupManager_EndLog = \"testDeletePersistentGroup End----------\"\n  testSetDeviceNameManager_StartLog = \"testSetDeviceName Start----------\"\n  testSetDeviceNameManager_EndLog = \"testSetDeviceName End----------\"\n  testOnP2pStateChangeManager_StartLog = \"testOnP2pStateChange Start----------\"\n  testOnP2pStateChangeManager_EndLog = \"testOnP2pStateChange End----------\"\n  testOnP2pConnectionChangeManager_StartLog = \"testOnP2pConnectionChange Start----------\"\n  testOnP2pConnectionChangeManager_EndLog = \"testOnP2pConnectionChange End----------\"\n  testOnP2pDeviceChangeManager_StartLog = \"testOnP2pDeviceChange Start----------\"\n  testOnP2pDeviceChangeManager_EndLog = \"testOnP2pDeviceChange End----------\"\n  testOnP2pPeerDeviceChangeManager_StartLog = \"testOnP2pPeerDeviceChange Start----------\"\n  testOnP2pPeerDeviceChangeManager_EndLog = \"testOnP2pPeerDeviceChange End----------\"\n  testOnP2pPersistentGroupChangeManager_StartLog = \"testOnP2pPersistentGroupChange Start----------\"\n  testOnP2pPersistentGroupChangeManager_EndLog = \"testOnP2pPersistentGroupChange End----------\"\n  testOnP2pDiscoveryChangeManager_StartLog = \"testOnP2pDiscoveryChange Start----------\"\n  testOnP2pDiscoveryChangeManager_EndLog = \"testOnP2pDiscoveryChange End----------\"\n}\n\nlet logDataManager = new LogDataManager();\n\nexport default logDataManager as LogDataManager;", "llm_cg": {"LogDataManager.testEnableWifiManager_StartLog": [], "LogDataManager.testEnableWifiManager_EndLog": [], "LogDataManager.testDisableWifiManager_StartLog": [], "LogDataManager.testDisableWifiManager_EndLog": [], "LogDataManager.testIsWifiActiveManager_StartLog": [], "LogDataManager.testIsWifiActiveManager_EndLog": [], "LogDataManager.testScanManager_StartLog": [], "LogDataManager.testScanManager_EndLog": [], "LogDataManager.testForcibleScanManager_StartLog": [], "LogDataManager.testForcibleScanManager_EndLog": [], "LogDataManager.testGetScanInfoListManager_StartLog": [], "LogDataManager.testGetScanInfoListManager_EndLog": [], "LogDataManager.testGetScanInfosPromiseManager_StartLog": [], "LogDataManager.testGetScanInfosPromiseManager_EndLog": [], "LogDataManager.testGetScanInfosPromiseManager_successfulLog": [], "LogDataManager.testGetScanInfosManager_infoLog": [], "LogDataManager.testGetScanInfosCallbackManager_StartLog": [], "LogDataManager.testGetScanInfosCallbackManager_EndLog": [], "LogDataManager.testGetScanInfosCallbackManager_successfulLog": [], "LogDataManager.testAddDeviceConfigPromiseManager_StartLog": [], "LogDataManager.testAddDeviceConfigPromiseManager_EndLog": [], "LogDataManager.testAddDeviceConfigPromiseManager_successfulLog": [], "LogDataManager.testAddDeviceConfigManagerLog": [], "LogDataManager.testAddDeviceConfigCallbackManager_StartLog": [], "LogDataManager.testAddDeviceConfigCallbackManager_EndLog": [], "LogDataManager.testAddDeviceConfigCallbackManager_successfulLog": [], "LogDataManager.testAddCandidateConfigPromiseManager_StartLog": [], "LogDataManager.testAddCandidateConfigPromiseManager_EndLog": [], "LogDataManager.testAddCandidateConfigPromiseManager_successfulLog": [], "LogDataManager.testAddCandidateConfigManagerLog": [], "LogDataManager.testAddCandidateConfigCallbackManager_StartLog": [], "LogDataManager.testAddCandidateConfigCallbackManager_EndLog": [], "LogDataManager.testAddCandidateConfigCallbackManager_successfulLog": [], "LogDataManager.testRemoveCandidateConfigPromiseManager_StartLog": [], "LogDataManager.testRemoveCandidateConfigPromiseManager_EndLog": [], "LogDataManager.testRemoveCandidateConfigPromiseManager_successfulLog": [], "LogDataManager.testRemoveCandidateConfigManagerLog": [], "LogDataManager.testRemoveCandidateConfigCallbackManager_StartLog": [], "LogDataManager.testRemoveCandidateConfigCallbackManager_EndLog": [], "LogDataManager.testRemoveCandidateConfigCallbackManager_successfulLog": [], "LogDataManager.testGetCandidateConfigsManager_StartLog": [], "LogDataManager.testGetCandidateConfigsManager_EndLog": [], "LogDataManager.testConnectToCandidateConfigManager_StartLog": [], "LogDataManager.testConnectToCandidateConfigManager_EndLog": [], "LogDataManager.testConnectToNetworkManager_StartLog": [], "LogDataManager.testConnectToNetworkManager_EndLog": [], "LogDataManager.testConnectToDeviceManager_StartLog": [], "LogDataManager.testConnectToDeviceManager_EndLog": [], "LogDataManager.testDisconnectManager_StartLog": [], "LogDataManager.testDisconnectManager_EndLog": [], "LogDataManager.testGetSignalLevelManager_StartLog": [], "LogDataManager.testGetSignalLevelManager_EndLog": [], "LogDataManager.testGetLinkedInfoPromiseManager_StartLog": [], "LogDataManager.testGetLinkedInfoPromiseManager_EndLog": [], "LogDataManager.testGetLinkedInfoPromiseManager_successfulLog": [], "LogDataManager.testGetLinkedInfoCallbackManager_StartLog": [], "LogDataManager.testGetLinkedInfoCallbackManager_EndLog": [], "LogDataManager.testGetLinkedInfoCallbackManager_successfulLog": [], "LogDataManager.testIsConnectedManager_StartLog": [], "LogDataManager.testIsConnectedManager_EndLog": [], "LogDataManager.testGetSupportedFeaturesManager_StartLog": [], "LogDataManager.testGetSupportedFeaturesManager_EndLog": [], "LogDataManager.testIsFeatureSupportedManager_StartLog": [], "LogDataManager.testIsFeatureSupportedManager_EndLog": [], "LogDataManager.testGetDeviceMacAddressManager_StartLog": [], "LogDataManager.testGetDeviceMacAddressManager_EndLog": [], "LogDataManager.testGetIpInfoManager_StartLog": [], "LogDataManager.testGetIpInfoManager_EndLog": [], "LogDataManager.testGetCountryCodeManager_StartLog": [], "LogDataManager.testGetCountryCodeManager_EndLog": [], "LogDataManager.testReassociateManager_StartLog": [], "LogDataManager.testReassociateManager_EndLog": [], "LogDataManager.testReConnectManager_StartLog": [], "LogDataManager.testReConnectManager_EndLog": [], "LogDataManager.testGetDeviceConfigsManager_StartLog": [], "LogDataManager.testGetDeviceConfigsManager_EndLog": [], "LogDataManager.testUpdateNetworkManager_StartLog": [], "LogDataManager.testUpdateNetworkManager_EndLog": [], "LogDataManager.testDisableNetworkManager_StartLog": [], "LogDataManager.testDisableNetworkManager_EndLog": [], "LogDataManager.testRemoveAllNetworkManager_StartLog": [], "LogDataManager.testRemoveAllNetworkManager_EndLog": [], "LogDataManager.testRemoveDeviceManager_StartLog": [], "LogDataManager.testRemoveDeviceManager_EndLog": [], "LogDataManager.testOnWifiStateChangeManager_StartLog": [], "LogDataManager.testOnWifiStateChangeManager_EndLog": [], "LogDataManager.testOnWifiConnectionChangeManager_StartLog": [], "LogDataManager.testOnWifiConnectionChangeManager_EndLog": [], "LogDataManager.testOnWifiScanStateChangeManager_StartLog": [], "LogDataManager.testOnWifiScanStateChangeManager_EndLog": [], "LogDataManager.testOnWifiRssiChangeManager_StartLog": [], "LogDataManager.testOnWifiRssiChangeManager_EndLog": [], "LogDataManager.testOnStreamChangeManager_StartLog": [], "LogDataManager.testOnStreamChangeManager_EndLog": [], "LogDataManager.testOnDeviceConfigChangeManager_StartLog": [], "LogDataManager.testOnDeviceConfigChangeManager_EndLog": [], "LogDataManager.testEnableSemiWifi_StartLog": [], "LogDataManager.testEnableSemiWifi_EndLog": [], "LogDataManager.testStartScanManager_StartLog": [], "LogDataManager.testStartScanManager_EndLog": [], "LogDataManager.testEnableHotspotManager_StartLog": [], "LogDataManager.testEnableHotspotManager_EndLog": [], "LogDataManager.testDisableHotspotManager_StartLog": [], "LogDataManager.testDisableHotspotManager_EndLog": [], "LogDataManager.testIsHotspotDualBandSupportedManager_StartLog": [], "LogDataManager.testIsHotspotDualBandSupportedManager_EndLog": [], "LogDataManager.testIsHostActiveManager_StartLog": [], "LogDataManager.testIsHostActiveManager_EndLog": [], "LogDataManager.testSetHotspotConfigManagerManager_StartLog": [], "LogDataManager.testSetHotspotConfigManager_EndLog": [], "LogDataManager.testGetHotspotConfigManager_StartLog": [], "LogDataManager.testGetHotspotConfigManager_EndLog": [], "LogDataManager.testGetStationsManager_StartLog": [], "LogDataManager.testGetStationsManager_EndLog": [], "LogDataManager.testOnHotspotStateChangeManager_StartLog": [], "LogDataManager.testOnHotspotStateChangeManager_EndLog": [], "LogDataManager.testOnHotspotStaJoinManager_StartLog": [], "LogDataManager.testOnHotspotStaJoinManager_EndLog": [], "LogDataManager.testOnHotspotStaLeaveManager_StartLog": [], "LogDataManager.testOnHotspotStaLeaveManager_EndLog": [], "LogDataManager.testGetP2pLinkedInfoPromiseManager_StartLog": [], "LogDataManager.testGetP2pLinkedInfoPromiseManager_EndLog": [], "LogDataManager.getP2pLinkedInfoPromiseManager_successfulLog": [], "LogDataManager.testGetP2pLinkedInfoCallbackManager_StartLog": [], "LogDataManager.testGetP2pLinkedInfoCallbackManager_EndLog": [], "LogDataManager.getP2pLinkedInfoCallbackManager_successfulLog": [], "LogDataManager.testGetCurrentGroupPromiseManager_StartLog": [], "LogDataManager.testGetCurrentGroupPromiseManager_EndLog": [], "LogDataManager.testGetCurrentGroupPromiseManager_successfulLog": [], "LogDataManager.testGetCurrentGroupCallbackManager_StartLog": [], "LogDataManager.testGetCurrentGroupCallbackManager_EndLog": [], "LogDataManager.getCurrentGroupCallbackManager_successfulLog": [], "LogDataManager.testGetP2pPeerDevicesPromiseManager_StartLog": [], "LogDataManager.testGetP2pPeerDevicesPromiseManager_EndLog": [], "LogDataManager.getP2pPeerDevicesPromiseManager_successfulLog": [], "LogDataManager.testGetP2pPeerDevicesCallbackManager_StartLog": [], "LogDataManager.testGetP2pPeerDevicesCallbackManager_EndLog": [], "LogDataManager.getP2pPeerDevicesCallbackManager_successfulLog": [], "LogDataManager.testCreateGroupManager_StartLog": [], "LogDataManager.testCreateGroupManager_EndLog": [], "LogDataManager.testRemoveGroupManager_StartLog": [], "LogDataManager.testRemoveGroupManager_EndLog": [], "LogDataManager.testP2pConnectManager_StartLog": [], "LogDataManager.testP2pConnectManager_EndLog": [], "LogDataManager.testP2pCancelConnectManager_StartLog": [], "LogDataManager.testP2pCancelConnectManager_EndLog": [], "LogDataManager.testStartDiscoverDevicesManager_StartLog": [], "LogDataManager.testStartDiscoverDevicesManager_EndLog": [], "LogDataManager.testStopDiscoverDevicesManager_StartLog": [], "LogDataManager.testStopDiscoverDevicesManager_EndLog": [], "LogDataManager.testDeletePersistentGroupManager_StartLog": [], "LogDataManager.testDeletePersistentGroupManager_EndLog": [], "LogDataManager.testSetDeviceNameManager_StartLog": [], "LogDataManager.testSetDeviceNameManager_EndLog": [], "LogDataManager.testOnP2pStateChangeManager_StartLog": [], "LogDataManager.testOnP2pStateChangeManager_EndLog": [], "LogDataManager.testOnP2pConnectionChangeManager_StartLog": [], "LogDataManager.testOnP2pConnectionChangeManager_EndLog": [], "LogDataManager.testOnP2pDeviceChangeManager_StartLog": [], "LogDataManager.testOnP2pDeviceChangeManager_EndLog": [], "LogDataManager.testOnP2pPeerDeviceChangeManager_StartLog": [], "LogDataManager.testOnP2pPeerDeviceChangeManager_EndLog": [], "LogDataManager.testOnP2pPersistentGroupChangeManager_StartLog": [], "LogDataManager.testOnP2pPersistentGroupChangeManager_EndLog": [], "LogDataManager.testOnP2pDiscoveryChangeManager_StartLog": [], "LogDataManager.testOnP2pDiscoveryChangeManager_EndLog": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class BaseModel {\n  constructor() {\n  }\n}", "llm_cg": {"BaseModel.constructor()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class MessageDataManager {\n  TAG = 'WIFI_Manager_Test'\n  //wifi\n  testEnableWifi = \"enableWifi test\";\n  testIsActive = \"Wifi已经使能\"\n  testWifiEnableResult = \"Wifi使能执行结果：\"\n  testEnableResult = \"使能结果：\"\n  testWifiEnableMaybe = \"Wifi已打开或打开失败,请确认\"\n  testDisableWifi = \"testDisableWifi\"\n  testIsInactive = \"WIFI还未使能\"\n  testWifiDisableResult = \"Wifi去使能执行结果：\"\n  testDisableResult = \"去使能结果：\"\n  testWifiDisableMaybe = \"Wifi已关闭或关闭失败,请确认\"\n\n  testEnableSemiWifi =\"enableSemiWifi test\";\n\n  testIsWifiActive = \"testIsWifiActive\"\n  testIsActiveResult = \"wifi使能结果为：\"\n  testScan = \"scan test\"\n  testScanResult = \"scan: \"\n  testStartScan = \"startScan test\"\n\n  testForcibleScan = \"ForcibleScan test\"\n  testForcibleScanResult = \"ForcibleScan: \"\n  testGetScanInfoList = \"getScanInfoList test\"\n  testGetScanInfosPromise = \"getScanInfosPromise test\"\n  testGetScanInfo = \"WifiScanInfo: \"\n  testGetScanInfosCallback = \"getScanInfosCallback test\"\n  testAddDeviceConfigPromise = \"addDeviceConfigPromise test\"\n  testAddDeviceConfig = \"addDeviceConfig: \"\n  testAddDeviceConfigCallback = \"addDeviceConfigCallback test\"\n  testAddCandidateConfigPromise = \"addCandidateConfigPromise test\"\n  testAddCandidateConfig = \"addCandidateConfig: \"\n  testAddCandidateConfigCallback = \"addCandidateConfigCallback test\"\n  testRemoveCandidateConfigPromise = \"removeCandidateConfigPromise test\"\n  testRemoveCandidateConfig = \"removeCandidateConfig: \"\n  testRemoveCandidateConfigCallback = \"removeCandidateConfigCallback test\"\n  testGetCandidateConfigs = \"GetCandidateConfigs test\"\n  testConnectToCandidateConfig = \"ConnectToCandidateConfig test\"\n  testConnectToNetwork = \"connectToNetwork test\"\n  testConnectToDevice = \"connectToDevice test\"\n  testDisconnect = \"disconnect test\"\n  testGetSignalLevel = \"getSignalLevel test\"\n  testGetLinkedInfoPromise = \"getLinkedInfoPromise test\"\n  testGetLinkedInfoCallback = \"getLinkedInfoCallback test\"\n  testIsConnected = \"isConnected test\"\n  testGetSupportedFeatures = \"getSupportedFeatures test\"\n  testIsFeatureSupported = \"isFeatureSupported test\"\n  testGetDeviceMacAddress = \"getDeviceMacAddress test\"\n  testGetIpInfo = \"getIpInfo test\"\n  testGetCountryCode = \"getCountryCode test\"\n  testReassociate = \"reAssociate test\"\n  testReConnect = \"reConnect test\"\n  testGetDeviceConfigs = \"getDeviceConfigs test\"\n  testUpdateNetwork = \"updateNetwork test\"\n  testDisableNetwork = \"disableNetWork test\"\n  testRemoveAllNetwork = \"removeAllNetwork test\"\n  testRemoveDevice = \"removeDevice test\"\n  testOnWifiStateChange = \"onWifiStateChange test\"\n  offWifiStateChange = \"on.WifiStateChange监听已关闭\"\n  offWifiStateChangeTest = \"关闭注册WLAN状态改变事件\"\n  onWifiStateChange = \"on.WifiStateChange监听已打开\"\n  onWifiStateChangeTest = \"打开注册WLAN状态变化\"\n  wifiStateChange = \"wifi状态: \"\n  testOnWifiConnectionChange = \"onWifiConnectionChange test\"\n  offWifiConnectionChange = \"on.wifiConnectionChange监听已关闭\"\n  offWifiConnectionChangeTest = \"关闭WLAN连接状态改变事件\"\n  onWifiConnectionChangeTest = \"打开注册WLAN连接状态变化\"\n  testOnWifiScanStateChange = \"onWifiScanStateChange test\"\n  offWifiScanStateChange = \"on.wifiScanStateChange监听已关闭\"\n  offWifiScanStateChangeTest = \"关闭扫描状态改变事件\"\n  onWifiScanStateChangeTest = \"打开注册扫描状态变化\"\n  testOnWifiRssiChange = \"onWifiRssiChange test\"\n  offWifiRssiChange = \"on.wifiRssiChange监听已关闭\"\n  offWifiRssiChangeTest = \"关闭RSSI状态变化事件\"\n  onWifiRssiChangeTest = \"打开注册RSSI状态变化\"\n  testOnStreamChange = \"onStreamChange test\"\n  offStreamChange = \"on.streamChange监听已关闭\"\n  offStreamChangeTest = \"关闭注册流改变事件\"\n  onStreamChangeTest = \"打开注册流变化\"\n  //hotspot\n  testEnableHotspot = \"enableHotspot test\"\n  testDisableHotspot = \"disableHotspot test\"\n  hotspot_enable = \"热点已经使能\"\n  hotspot_disEnable = \"热点还未使能\"\n  testIsHotspotDualBandSupported = \"isHotspotDualBandSupported test\"\n  testIsHotspotActive = \"isHotspotActive test\"\n  testSetHotspotConfig = \"SetHotspotConfig test\"\n  testGetHotspotConfig = \"getHotspotConfig test\"\n  testGetStations = \"GetStations test\"\n  testOnHotspotStateChange = \"onHotspotStateChange test\"\n  offHotspotStateChange = \"on.hotspotStateChange监听已关闭\"\n  offHotspotStateChangeTest = \"关闭注册热点状态改变事件\"\n  onHotspotStateChangeTest = \"打开注册热点状态变化\"\n  testOnHotspotStaJoin = \"onHotspotStaJoin test\"\n  offHotspotStaJoin = \"on.hotspotStaJoin监听已关闭\"\n  offHotspotStaJoinTest = \"关闭注册Wi-Fi 热点 sta加入变化事件\"\n  onHotspotStaJoinTest = \"打开注册Wi-Fi 热点 sta加入变化\"\n  testOnHotspotStaLeave = \"onHotspotStaLeave test\"\n  offHotspotStaLeave = \"on.hotspotStaLeave监听已关闭\"\n  offHotspotStaLeaveTest = \"关闭注册Wi-Fi 热点 sta离开变化事件\"\n  onHotspotStaLeaveTest = \"打开注册Wi-Fi 热点 sta离开变化\"\n  //p2p\n  testGetP2pLinkedInfoPromise = \"getP2pLinkedInfoPromise test\"\n  testGetP2pLinkedInfoCallback = \"getP2pLinkedInfoCallback test\"\n  testGetCurrentGroupPromise = \"getCurrentGroupPromise test\"\n  testGetCurrentGroupCallback = \"getCurrentGroupCallback test\"\n  testGetP2pPeerDevicesPromise = \"getP2pPeerDevicesPromise test\"\n  testGetP2pPeerDevicesCallback = \"getP2pPeerDevicesCallback test\"\n  testCreateGroup = \"createGroup test\"\n  testRemoveGroup = \"removeGroup test\"\n  testP2pConnect = \"P2pConnect test\"\n  testP2pCancelConnect = \"p2pCancelConnect test\"\n  testStartDiscoverDevices = \"startDiscoverDevices test\"\n  testStopDiscoverDevices = \"stopDiscoverDevices test\"\n  testDeletePersistentGroup = \"deletePersistentGroup test\"\n  testSetDeviceName = \"setDeviceName test\"\n  testOnP2pStateChange = \"OnP2pStateChange test\"\n  offP2pStateChange = \"on.p2pStateChange监听已关闭\"\n  onP2pStateChangeTest = \"打开注册P2P开关状态变化\"\n  offP2pStateChangeTest = \"关闭注册P2P开关状态改变事件\"\n  testOnP2pConnectionChange = \"OnP2pConnectionChange test\"\n  offP2pConnectionChange = \"on.P2pConnectionChange监听已关闭\"\n  offP2pConnectionChangeTest = \"关闭P2P连接状态改变事件\"\n  onP2pConnectionChangeTest = \"打开注册p2p连接状态变化\"\n  testOnP2pDeviceChange = \"OnP2pDeviceChange test\"\n  offP2pDeviceChange = \"on.P2pDeviceChange监听已关闭\"\n  offP2pDeviceChangeTest = \"关闭P2P设备状态改变事件\"\n  onP2pDeviceChangeTest = \"打开注册p2p设备连接状态变化\"\n  testOnP2pPeerDeviceChange = \"OnP2pPeerDeviceChange test\"\n  offP2pPeerDeviceChange = \"on.p2pPeerDeviceChange监听已关闭\"\n  offP2pPeerDeviceChangeTest = \"关闭P2P对端设备状态改变事件\"\n  onP2pPeerDeviceChangeTest = \"打开P2P对端设备状态变化\"\n  testOnP2pPersistentGroupChange = \"OnP2pPersistentGroupChange test\"\n  offP2pPersistentGroupChange = \"on.p2pPersistentGroupChange监听已关闭\"\n  offP2pPersistentGroupChangeTest = \"关闭P2P设备状态改变事件\"\n  onP2pPersistentGroupChangeTest = \"打开P2P永久组状态变化\"\n  testOnP2pDiscoveryChange = \"OnP2pDiscoveryChange test\"\n  offP2pDiscoveryChange = \"on.P2pDiscoveryChange监听已关闭\"\n  offP2pDiscoveryChangeTest = \"关闭发现设备状态改变事件\"\n  onP2pDiscoveryChangeTest = \"打开发现设备状态变化\"\n}\n\nlet messageDataManager = new MessageDataManager();\n\nexport default messageDataManager as MessageDataManager;", "llm_cg": {"MessageDataManager.constructor()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class LogData {\n  TAG = 'WIFI_Test'\n  //wifi\n  testEnableWifi_StartLog = \"testEnableWifi Start----------\"\n  testEnableWifi_EndLog = \"testEnableWifi End----------\"\n  testDisableWifi_StartLog = \"testDisableWifi Start----------\"\n  testDisableWifi_EndLog = \"testDisableWifi End----------\"\n  testIsWifiActive_StartLog = \"testIsWifiActive Start----------\"\n  testIsWifiActive_EndLog = \"testDisableWifi End----------\"\n  testScan_StartLog = \"testScan Start----------\"\n  testScan_EndLog = \"testScan End----------\"\n  testForcibleScan_StartLog = \"testForcibleScan Start----------\"\n  testForcibleScan_EndLog = \"testForcibleScan End----------\"\n  testGetScanInfosPromise_StartLog = \"testGetScanInfosPromise Start----------\"\n  testGetScanInfosPromise_EndLog = \"testGetScanInfosPromise End----------\"\n  testGetScanInfosPromise_successfulLog = \"getScanInfos promise successful\"\n  testGetScanInfos_infoLog = \"wifi received scan info: \"\n  testGetScanInfosCallback_StartLog = \"testGetScanInfosCallback Start----------\"\n  testGetScanInfosCallback_EndLog = \"testGetScanInfosCallback End----------\"\n  testGetScanInfosCallback_successfulLog = \"getScanInfos callback successful\"\n  testAddDeviceConfigPromise_StartLog = \"testAddDeviceConfigPromise Start----------\"\n  testAddDeviceConfigPromise_EndLog = \"testAddDeviceConfigPromise End----------\"\n  testAddDeviceConfigPromise_successfulLog = \"addDeviceConfig promise successful\"\n  testAddDeviceConfigLog = \"addDeviceConfig: \"\n  testAddDeviceConfigCallback_StartLog = \"testAddDeviceConfigCallback Start----------\"\n  testAddDeviceConfigCallback_EndLog = \"testAddDeviceConfigCallback End----------\"\n  testAddDeviceConfigCallback_successfulLog = \"addDeviceConfig Callback successful\"\n  testAddUntrustedConfigPromise_StartLog = \"testAddUntrustedConfigPromise Start----------\"\n  testAddUntrustedConfigPromise_EndLog = \"testAddUntrustedConfigPromise End----------\"\n  testAddUntrustedConfigPromise_successfulLog = \"addUntrustedConfig promise successful\"\n  testAddUntrustedConfigLog = \"addUntrustedConfig: \"\n  testAddUntrustedConfigCallback_StartLog = \"testAddUntrustedConfigCallback Start----------\"\n  testAddUntrustedConfigCallback_EndLog = \"testAddUntrustedConfigCallback End----------\"\n  testAddUntrustedConfigCallback_successfulLog = \"addUntrustedConfig Callback successful\"\n  testRemoveUntrustedConfigPromise_StartLog = \"testRemoveUntrustedConfigPromise Start----------\"\n  testRemoveUntrustedConfigPromise_EndLog = \"testRemoveUntrustedConfigPromise End----------\"\n  testRemoveUntrustedConfigPromise_successfulLog = \"removeUntrustedConfig promise successful\"\n  testRemoveUntrustedConfigLog = \"removeUntrustedConfig: \"\n  testRemoveUntrustedConfigCallback_StartLog = \"testRemoveUntrustedConfigCallback Start----------\"\n  testRemoveUntrustedConfigCallback_EndLog = \"testRemoveUntrustedConfigCallback End----------\"\n  testRemoveUntrustedConfigCallback_successfulLog = \"removeUntrustedConfig Callback successful\"\n  testConnectToNetwork_StartLog = \"testConnectToNetwork Start----------\"\n  testConnectToNetwork_EndLog = \"testConnectToNetwork End----------\"\n  testConnectToDevice_StartLog = \"testConnectToDevice Start----------\"\n  testConnectToDevice_EndLog = \"testConnectToDevice End----------\"\n  testDisconnect_StartLog = \"testDisconnect Start----------\"\n  testDisconnect_EndLog = \"testDisconnect End----------\"\n  testGetSignalLevel_StartLog = \"testGetSignalLevel Start----------\"\n  testGetSignalLevel_EndLog = \"testGetSignalLevel End----------\"\n  testGetLinkedInfoPromise_StartLog = \"testGetLinkedInfoPromise Start----------\"\n  testGetLinkedInfoPromise_EndLog = \"testGetLinkedInfoPromise End----------\"\n  testGetLinkedInfoPromise_successfulLog = \"getLinkedInfoPromise test successful\"\n  testGetLinkedInfoCallback_StartLog = \"testGetLinkedInfoCallback Start----------\"\n  testGetLinkedInfoCallback_EndLog = \"testGetLinkedInfoCallback End----------\"\n  testGetLinkedInfoCallback_successfulLog = \"getLinkedInfoCallback test successful\"\n  testIsConnected_StartLog = \"testIsConnected Start----------\"\n  testIsConnected_EndLog = \"testIsConnected End----------\"\n  testGetSupportedFeatures_StartLog = \"testGetSupportedFeatures Start----------\"\n  testGetSupportedFeatures_EndLog = \"testGetSupportedFeatures End----------\"\n  testIsFeatureSupported_StartLog = \"testIsFeatureSupported Start----------\"\n  testIsFeatureSupported_EndLog = \"testIsFeatureSupported End----------\"\n  testGetDeviceMacAddress_StartLog = \"testGetDeviceMacAddress Start----------\"\n  testGetDeviceMacAddress_EndLog = \"testGetDeviceMacAddress End----------\"\n  testGetIpInfo_StartLog = \"testGetIpInfo Start----------\"\n  testGetIpInfo_EndLog = \"testGetIpInfo End----------\"\n  testGetCountryCode_StartLog = \"testGetCountryCode Start----------\"\n  testGetCountryCode_EndLog = \"testGetCountryCode End----------\"\n  testReassociate_StartLog = \"testReassociate Start----------\"\n  testReassociate_EndLog = \"testReassociate End----------\"\n  testReConnect_StartLog = \"testReConnect Start----------\"\n  testReConnect_EndLog = \"testReConnect End----------\"\n  testGetDeviceConfigs_StartLog = \"testGetDeviceConfigs Start----------\"\n  testGetDeviceConfigs_EndLog = \"testGetDeviceConfigs End----------\"\n  testUpdateNetwork_StartLog = \"testUpdateNetwork Start----------\"\n  testUpdateNetwork_EndLog = \"testUpdateNetwork End----------\"\n  testDisableNetwork_StartLog = \"testDisableNetwork Start----------\"\n  testDisableNetwork_EndLog = \"testDisableNetwork End----------\"\n  testRemoveAllNetwork_StartLog = \"testRemoveAllNetwork Start----------\"\n  testRemoveAllNetwork_EndLog = \"testRemoveAllNetwork End----------\"\n  testRemoveDevice_StartLog = \"testRemoveDevice Start----------\"\n  testRemoveDevice_EndLog = \"testRemoveDevice End----------\"\n  testOnWifiStateChange_StartLog = \"testOnWifiStateChange Start----------\"\n  testOnWifiStateChange_EndLog = \"testOnWifiStateChange End----------\"\n  testOnWifiConnectionChange_StartLog = \"testOnWifiConnectionChange Start----------\"\n  testOnWifiConnectionChange_EndLog = \"testOnWifiConnectionChange End----------\"\n  testOnWifiScanStateChange_StartLog = \"testOnWifiConnectionChange Start----------\"\n  testOnWifiScanStateChange_EndLog = \"testOnWifiConnectionChange End----------\"\n  testOnWifiRssiChange_StartLog = \"testOnWifiRssiChange Start----------\"\n  testOnWifiRssiChange_EndLog = \"testOnWifiRssiChange End----------\"\n  testOnStreamChange_StartLog = \"testOnStreamChange Start----------\"\n  testOnStreamChange_EndLog = \"testOnStreamChange End----------\"\n  //hotspot\n  testEnableHotspot_StartLog = \"testEnableHotspot start--------------\"\n  testEnableHotspot_EndLog = \"testEnableHotspot End--------------\"\n  testDisableHotspot_StartLog = \"testDisableHotspot start--------------\"\n  testDisableHotspot_EndLog = \"testDisableHotspot End--------------\"\n  testIsHotspotDualBandSupported_StartLog = \"testIsHotspotDualBandSupported start--------------\"\n  testIsHotspotDualBandSupported_EndLog = \"testIsHotspotDualBandSupported End--------------\"\n  testIsHostActive_StartLog = \"testIsHostActive start--------------\"\n  testIsHostActive_EndLog = \"testIsHostActive End--------------\"\n  testSetHotspotConfig_StartLog = \"testSetHotspotConfig start--------------\"\n  testSetHotspotConfig_EndLog = \"testSetHotspotConfig End--------------\"\n  testGetHotspotConfig_StartLog = \"testGetHotspotConfig start--------------\"\n  testGetHotspotConfig_EndLog = \"testGetHotspotConfig End--------------\"\n  testGetStations_StartLog = \"testGetStations start--------------\"\n  testGetStations_EndLog = \"testGetStations End--------------\"\n  testOnHotspotStateChange_StartLog = \"testOnHotspotStateChange start--------------\"\n  testOnHotspotStateChange_EndLog = \"testOnHotspotStateChange End--------------\"\n  testOnHotspotStaJoin_StartLog = \"testOnHotspotStaJoin start--------------\"\n  testOnHotspotStaJoin_EndLog = \"testOnHotspotStaJoin End--------------\"\n  testOnHotspotStaLeave_StartLog = \"testOnHotspotStaLeave start--------------\"\n  testOnHotspotStaLeave_EndLog = \"testOnHotspotStaLeave End--------------\"\n  //p2p\n  testGetP2pLinkedInfoPromise_StartLog = \"testGetP2pLinkedInfoPromise Start----------\"\n  testGetP2pLinkedInfoPromise_EndLog = \"testGetP2pLinkedInfoPromise End----------\"\n  getP2pLinkedInfoPromise_successfulLog = \"getP2pLinkedInfoPromise successful\"\n  testGetP2pLinkedInfoCallback_StartLog = \"testGetP2pLinkedInfoCallback Start----------\"\n  testGetP2pLinkedInfoCallback_EndLog = \"testGetP2pLinkedInfoCallback End----------\"\n  getP2pLinkedInfoCallback_successfulLog = \"getP2pLinkedInfoCallback successful \"\n  testGetCurrentGroupPromise_StartLog = \"testGetCurrentGroupPromise Start----------\"\n  testGetCurrentGroupPromise_EndLog = \"testGetCurrentGroupPromise End----------\"\n  testGetCurrentGroupPromise_successfulLog = \"getCurrentGroupPromise successful\"\n  testGetCurrentGroupCallback_StartLog = \"testGetCurrentGroupCallback Start----------\"\n  testGetCurrentGroupCallback_EndLog = \"testGetCurrentGroupCallback End----------\"\n  getCurrentGroupCallback_successfulLog = \"getCurrentGroupCallback successful\"\n  testGetP2pPeerDevicesPromise_StartLog = \"testGetP2pPeerDevicesPromise Start----------\"\n  testGetP2pPeerDevicesPromise_EndLog = \"testGetP2pPeerDevicesPromise End----------\"\n  getP2pPeerDevicesPromise_successfulLog = \"getP2pPeerDevicesPromise successful\"\n  testGetP2pPeerDevicesCallback_StartLog = \"testGetP2pPeerDevicesCallback Start----------\"\n  testGetP2pPeerDevicesCallback_EndLog = \"testGetP2pPeerDevicesCallback End----------\"\n  getP2pPeerDevicesCallback_successfulLog = \"getP2pPeerDevicesCallback successful\"\n  testCreateGroup_StartLog = \"testCreateGroup Start----------\"\n  testCreateGroup_EndLog = \"testCreateGroup End----------\"\n  testRemoveGroup_StartLog = \"testRemoveGroup Start----------\"\n  testRemoveGroup_EndLog = \"testRemoveGroup End----------\"\n  testP2pConnect_StartLog = \"testP2pConnect Start----------\"\n  testP2pConnect_EndLog = \"testP2pConnect End----------\"\n  testP2pCancelConnect_StartLog = \"testP2pCancelConnect Start----------\"\n  testP2pCancelConnect_EndLog = \"testP2pCancelConnect End----------\"\n  testStartDiscoverDevices_StartLog = \"testStartDiscoverDevices Start----------\"\n  testStartDiscoverDevices_EndLog = \"testStartDiscoverDevices End----------\"\n  testStopDiscoverDevices_StartLog = \"testStopDiscoverDevices Start----------\"\n  testStopDiscoverDevices_EndLog = \"testStopDiscoverDevices End----------\"\n  testDeletePersistentGroup_StartLog = \"testDeletePersistentGroup Start----------\"\n  testDeletePersistentGroup_EndLog = \"testDeletePersistentGroup End----------\"\n  testSetDeviceName_StartLog = \"testSetDeviceName Start----------\"\n  testSetDeviceName_EndLog = \"testSetDeviceName End----------\"\n  testOnP2pStateChange_StartLog = \"testOnP2pStateChange Start----------\"\n  testOnP2pStateChange_EndLog = \"testOnP2pStateChange End----------\"\n  testOnP2pConnectionChange_StartLog = \"testOnP2pConnectionChange Start----------\"\n  testOnP2pConnectionChange_EndLog = \"testOnP2pConnectionChange End----------\"\n  testOnP2pDeviceChange_StartLog = \"testOnP2pDeviceChange Start----------\"\n  testOnP2pDeviceChange_EndLog = \"testOnP2pDeviceChange End----------\"\n  testOnP2pPeerDeviceChange_StartLog = \"testOnP2pPeerDeviceChange Start----------\"\n  testOnP2pPeerDeviceChange_EndLog = \"testOnP2pPeerDeviceChange End----------\"\n  testOnP2pPersistentGroupChange_StartLog = \"testOnP2pPersistentGroupChange Start----------\"\n  testOnP2pPersistentGroupChange_EndLog = \"testOnP2pPersistentGroupChange End----------\"\n  testOnP2pDiscoveryChange_StartLog = \"testOnP2pDiscoveryChange Start----------\"\n  testOnP2pDiscoveryChange_EndLog = \"testOnP2pDiscoveryChange End----------\"\n}\n\nlet logData = new LogData();\n\nexport default logData as LogData;", "llm_cg": {"LogData.constructor()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class MessageData {\n  TAG = 'WIFI_Test'\n  //wifi\n  testEnableWifi = \"enableWifi test\";\n  testIsActive = \"Wifi已经使能\"\n  testWifiEnableResult = \"Wifi使能执行结果：\"\n  testEnableResult = \"使能结果：\"\n  testWifiEnableMaybe = \"Wifi已打开或打开失败,请确认\"\n  testDisableWifi = \"testDisableWifi\"\n  testIsInactive = \"WIFI还未使能\"\n  testWifiDisableResult = \"Wifi去使能执行结果：\"\n  testDisableResult = \"去使能结果：\"\n  testWifiDisableMaybe = \"Wifi已关闭或关闭失败,请确认\"\n  testIsWifiActive = \"testIsWifiActive\"\n  testIsActiveResult = \"wifi使能结果为：\"\n  testScan = \"scan test\"\n  testScanResult = \"scan: \"\n  testForcibleScan = \"ForcibleScan test\"\n  testForcibleScanResult = \"ForcibleScan: \"\n  testGetScanInfosPromise = \"getScanInfosPromise test\"\n  testGetScanInfo = \"WifiScanInfo: \"\n  testGetScanInfosCallback = \"getScanInfosCallback test\"\n  testAddDeviceConfigPromise = \"addDeviceConfigPromise test\"\n  testAddDeviceConfig = \"addDeviceConfig: \"\n  testAddDeviceConfigCallback = \"addDeviceConfigCallback test\"\n  testAddUntrustedConfigPromise = \"addUntrustedConfigPromise test\"\n  testAddUntrustedConfig = \"addUntrustedConfig: \"\n  testAddUntrustedConfigCallback = \"addUntrustedConfigCallback test\"\n  testRemoveUntrustedConfigPromise = \"removeUntrustedConfigPromise test\"\n  testRemoveUntrustedConfig = \"removeUntrustedConfig: \"\n  testRemoveUntrustedConfigCallback = \"removeUntrustedConfigCallback test\"\n  testConnectToNetwork = \"connectToNetwork test\"\n  testConnectToDevice = \"connectToDevice test\"\n  testDisconnect = \"disconnect test\"\n  testGetSignalLevel = \"getSignalLevel test\"\n  testGetLinkedInfoPromise = \"getLinkedInfoPromise test\"\n  testGetLinkedInfoCallback = \"getLinkedInfoCallback test\"\n  testIsConnected = \"isConnected test\"\n  testGetSupportedFeatures = \"getSupportedFeatures test\"\n  testIsFeatureSupported = \"isFeatureSupported test\"\n  testGetDeviceMacAddress = \"getDeviceMacAddress test\"\n  testGetIpInfo = \"getIpInfo test\"\n  testGetCountryCode = \"getCountryCode test\"\n  testReassociate = \"reAssociate test\"\n  testReConnect = \"reConnect test\"\n  testGetDeviceConfigs = \"getDeviceConfigs test\"\n  testUpdateNetwork = \"updateNetwork test\"\n  testDisableNetwork = \"disableNetWork test\"\n  testRemoveAllNetwork = \"removeAllNetwork test\"\n  testRemoveDevice = \"removeDevice test\"\n  testOnWifiStateChange = \"onWifiStateChange test\"\n  offWifiStateChange = \"on.WifiStateChange监听已关闭\"\n  offWifiStateChangeTest = \"关闭注册WLAN状态改变事件\"\n  onWifiStateChange = \"on.WifiStateChange监听已打开\"\n  onWifiStateChangeTest = \"打开注册WLAN状态变化\"\n  wifiStateChange = \"wifi状态: \"\n  testOnWifiConnectionChange = \"onWifiConnectionChange test\"\n  offWifiConnectionChange = \"on.wifiConnectionChange监听已关闭\"\n  offWifiConnectionChangeTest = \"关闭WLAN连接状态改变事件\"\n  onWifiConnectionChangeTest = \"打开注册WLAN连接状态变化\"\n  testOnWifiScanStateChange = \"onWifiScanStateChange test\"\n  offWifiScanStateChange = \"on.wifiScanStateChange监听已关闭\"\n  offWifiScanStateChangeTest = \"关闭扫描状态改变事件\"\n  onWifiScanStateChangeTest = \"打开注册扫描状态变化\"\n  testOnWifiRssiChange = \"onWifiRssiChange test\"\n  offWifiRssiChange = \"on.wifiRssiChange监听已关闭\"\n  offWifiRssiChangeTest = \"关闭RSSI状态变化事件\"\n  onWifiRssiChangeTest = \"打开注册RSSI状态变化\"\n  testOnStreamChange = \"onStreamChange test\"\n  offStreamChange = \"on.streamChange监听已关闭\"\n  offStreamChangeTest = \"关闭注册流改变事件\"\n  onStreamChangeTest = \"打开注册流变化\"\n  //hotspot\n  testEnableHotspot = \"enableHotspot test\"\n  testDisableHotspot = \"disableHotspot test\"\n  hotspot_enable = \"热点已经使能\"\n  hotspot_disEnable = \"热点还未使能\"\n  testIsHotspotDualBandSupported = \"isHotspotDualBandSupported test\"\n  testIsHotspotActive = \"isHotspotActive test\"\n  testSetHotspotConfig = \"SetHotspotConfig test\"\n  testGetHotspotConfig = \"getHotspotConfig test\"\n  testGetStations = \"GetStations test\"\n  testOnHotspotStateChange = \"onHotspotStateChange test\"\n  offHotspotStateChange = \"on.hotspotStateChange监听已关闭\"\n  offHotspotStateChangeTest = \"关闭注册热点状态改变事件\"\n  onHotspotStateChangeTest = \"打开注册热点状态变化\"\n  testOnHotspotStaJoin = \"onHotspotStaJoin test\"\n  offHotspotStaJoin = \"on.hotspotStaJoin监听已关闭\"\n  offHotspotStaJoinTest = \"关闭注册Wi-Fi 热点 sta加入变化事件\"\n  onHotspotStaJoinTest = \"打开注册Wi-Fi 热点 sta加入变化\"\n  testOnHotspotStaLeave = \"onHotspotStaLeave test\"\n  offHotspotStaLeave = \"on.hotspotStaLeave监听已关闭\"\n  offHotspotStaLeaveTest = \"关闭注册Wi-Fi 热点 sta离开变化事件\"\n  onHotspotStaLeaveTest = \"打开注册Wi-Fi 热点 sta离开变化\"\n  //p2p\n  testGetP2pLinkedInfoPromise = \"getP2pLinkedInfoPromise test\"\n  testGetP2pLinkedInfoCallback = \"getP2pLinkedInfoCallback test\"\n  testGetCurrentGroupPromise = \"getCurrentGroupPromise test\"\n  testGetCurrentGroupCallback = \"getCurrentGroupCallback test\"\n  testGetP2pPeerDevicesPromise = \"getP2pPeerDevicesPromise test\"\n  testGetP2pPeerDevicesCallback = \"getP2pPeerDevicesCallback test\"\n  testCreateGroup = \"createGroup test\"\n  testRemoveGroup = \"removeGroup test\"\n  testP2pConnect = \"P2pConnect test\"\n  testP2pCancelConnect = \"p2pCancelConnect test\"\n  testStartDiscoverDevices = \"startDiscoverDevices test\"\n  testStopDiscoverDevices = \"stopDiscoverDevices test\"\n  testDeletePersistentGroup = \"deletePersistentGroup test\"\n  testSetDeviceName = \"setDeviceName test\"\n  testOnP2pStateChange = \"OnP2pStateChange test\"\n  offP2pStateChange = \"on.p2pStateChange监听已关闭\"\n  onP2pStateChangeTest = \"打开注册P2P开关状态变化\"\n  offP2pStateChangeTest = \"关闭注册P2P开关状态改变事件\"\n  testOnP2pConnectionChange = \"OnP2pConnectionChange test\"\n  offP2pConnectionChange = \"on.P2pConnectionChange监听已关闭\"\n  offP2pConnectionChangeTest = \"关闭P2P连接状态改变事件\"\n  onP2pConnectionChangeTest = \"打开注册p2p连接状态变化\"\n  testOnP2pDeviceChange = \"OnP2pDeviceChange test\"\n  offP2pDeviceChange = \"on.P2pDeviceChange监听已关闭\"\n  offP2pDeviceChangeTest = \"关闭P2P设备状态改变事件\"\n  onP2pDeviceChangeTest = \"打开注册p2p设备连接状态变化\"\n  testOnP2pPeerDeviceChange = \"OnP2pPeerDeviceChange test\"\n  offP2pPeerDeviceChange = \"on.p2pPeerDeviceChange监听已关闭\"\n  offP2pPeerDeviceChangeTest = \"关闭P2P对端设备状态改变事件\"\n  onP2pPeerDeviceChangeTest = \"打开P2P对端设备状态变化\"\n  testOnP2pPersistentGroupChange = \"OnP2pPersistentGroupChange test\"\n  offP2pPersistentGroupChange = \"on.p2pPersistentGroupChange监听已关闭\"\n  offP2pPersistentGroupChangeTest = \"关闭P2P设备状态改变事件\"\n  onP2pPersistentGroupChangeTest = \"打开P2P永久组状态变化\"\n  testOnP2pDiscoveryChange = \"OnP2pDiscoveryChange test\"\n  offP2pDiscoveryChange = \"on.P2pDiscoveryChange监听已关闭\"\n  offP2pDiscoveryChangeTest = \"关闭发现设备状态改变事件\"\n  onP2pDiscoveryChangeTest = \"打开发现设备状态变化\"\n}\n\nlet messageData = new MessageData();\n\nexport default messageData as MessageData;", "llm_cg": {"MessageData.constructor()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *  ISettingsController of wifi test\n */\n\nexport default interface ISettingsController {\n  /**\n   * Bind component.\n   */\n  bindComponent(component: any): ISettingsController;\n\n  /**\n   *  Bind component's properties.\n   */\n  bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController\n\n  /**\n   * Initialize data.\n   */\n  initData(): ISettingsController;\n\n  /**\n   * Subscribe listeners.\n   */\n  subscribe(): ISettingsController;\n\n  /**\n   * Unsubscribe listeners.\n   */\n  unsubscribe(): ISettingsController;\n}", "llm_cg": {"ISettingsController.bindComponent(component: any)": [], "ISettingsController.bindProperties(componentProperties: string[], controllerProperties?: string[])": [], "ISettingsController.initData()": [], "ISettingsController.subscribe()": [], "ISettingsController.unsubscribe()": []}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ISettingsController from './ISettingsController'\n\n/**\n * BaseSettingsController Of Wifi test\n */\n\nexport default abstract class BaseSettingsController implements ISettingsController {\n  protected getComponent: () => any;\n\n  /**\n   * Bind component.\n   */\n  bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;\n\n    // set default property values by component\n    for (let key in this) {\n      if (key in component) {\n        this[key] = component[key];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Bind component's properties, note that only basic types can be transported.\n   * Type like Resource may meet unexpected error.\n   * If you want to transport resource string or color, ets. AppStorage is suggested @StorageLink.\n   */\n  bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {\n    for (let i = 0; i < componentProperties.length; i++) {\n      this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Initialize data.\n   */\n  initData(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Subscribe listeners.\n   */\n  subscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Unsubscribe listeners.\n   */\n  unsubscribe(): ISettingsController {\n    return this;\n  };\n\n  /**\n   * Define bound properties.\n   */\n  private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\n    let __v = this[controllerProperty];\n\n    Object.defineProperty(this, controllerProperty, {\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    });\n  }\n}", "llm_cg": {"BaseSettingsController.bindComponent(component)": ["BaseSettingsController.%AM0$getComponent()"], "BaseSettingsController.bindProperties(componentProperties, controllerProperties)": ["BaseSettingsController.%AM1$defineBoundProperty(componentProperty, controllerProperty)"], "BaseSettingsController.defineBoundProperty(componentProperty, controllerProperty)": ["BaseSettingsController.%AM0$getComponent()"]}, "static_cg": {}}
{"source_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog';\nimport AbilityStage from \"@ohos.app.ability.AbilityStage\"\n\n/**\n * MyAbilityStage Of Wifi test\n */\n\nexport default class MyAbilityStage extends AbilityStage {\n  onCreate() {\n    hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n    hilog.info(0x0000, 'testTag', '%{public}s', 'AbilityStage onCreate');\n  }\n}", "llm_cg": {"MyAbilityStage.onCreate()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2022 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog'\n\nclass Logger {\n  private domain: number\n  private prefix: string\n  private format: string = '%{public}s, %{public}s'\n\n  constructor(prefix: string) {\n    this.prefix = prefix\n    this.domain = 0xFF00\n  }\n\n  debug(...args: string[]) {\n    hilog.debug(this.domain, this.prefix, this.format, args)\n  }\n\n  info(...args: string[]) {\n    hilog.info(this.domain, this.prefix, this.format, args)\n  }\n\n  warn(...args: string[]) {\n    hilog.warn(this.domain, this.prefix, this.format, args)\n  }\n\n  error(...args: string[]) {\n    hilog.error(this.domain, this.prefix, this.format, args)\n  }\n}\n\nexport default new Logger('Sample_ComponentCollection')", "llm_cg": {"Logger.debug(...args: string[])": ["Logger.%AM0$debug(unknown, unknown, unknown, unknown)"], "Logger.info(...args: string[])": ["Logger.%AM1$info(unknown, unknown, unknown, unknown)"], "Logger.warn(...args: string[])": ["Logger.%AM2$warn(unknown, unknown, unknown, unknown)"], "Logger.error(...args: string[])": ["Logger.%AM3$error(unknown, unknown, unknown, unknown)"]}, "static_cg": {"@test/101.ts: %dflt.[static]%dflt()": ["@test/101.ts: Logger.constructor(string)"]}}
{"source_code": "/*\n * Copyright (c) 2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass InputUtil {\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }\n\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n}\n\nexport default new InputUtil()", "llm_cg": {"InputUtil.isEmpty(str?: string)": [], "InputUtil.checkNeedNumberSpace(numText: string)": [], "InputUtil.removeSpace(str: string)": ["InputUtil.isEmpty(str?: string)"]}, "static_cg": {"@test/102.ts: InputUtil.removeSpace(string)": ["@test/102.ts: InputUtil.isEmpty(string)"]}}
{"source_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityStage from '@ohos.app.ability.AbilityStage'\nimport Logger from '../util/Logger'\n\nconst TAG: string = 'MyAbilityStage'\n\nexport default class MyAbilityStage extends AbilityStage {\n  onCreate() {\n    Logger.info(TAG, 'onCreate')\n  }\n}", "llm_cg": {"MyAbilityStage.onCreate()": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../util/Logger'\nimport window from '@ohos.window';\nimport { KeyboardAvoidMode } from '@ohos.arkui.UIContext';\n\nconst TAG: string = 'MainAbility'\n\nexport default class MainAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    Logger.info(TAG, 'onCreate');\n    AppStorage.setOrCreate('context', this.context);\n  }\n\n  onDestroy() {\n    Logger.info(TAG, 'onDestroy')\n  }\n\n  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'onWindowStageCreate')\n    try {\n      let windowClass = null;\n      window.getLastWindow(this.context, (err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      })\n    } catch (exception) {\n      Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));\n    }\n    windowStage.loadContent('pages/Index', (err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    })\n  }\n\n  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'onWindowStageDestroy')\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')\n  }\n\n  onBackground() {\n    // Ability has back to background\n    Logger.info(TAG, 'onBackground')\n  }\n}", "llm_cg": {"MainAbility.onCreate(want, launchParam)": ["Logger.info(TAG, 'onCreate')", "AppStorage.setOrCreate('context', this.context)"], "MainAbility.onDestroy()": ["Logger.info(TAG, 'onDestroy')"], "MainAbility.onWindowStageCreate(windowStage)": ["Logger.info(TAG, 'onWindowStageCreate')", "window.getLastWindow(this.context, (err, data))", "Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err))", "Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data))", "windowClass.setWindowSystemBarProperties(systemBarProperties, (err))", "Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err))", "Logger.info('Succeeded in setting the system bar properties.')", "AppStorage.setOrCreate('keyboardHeight', data)", "Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception))", "windowStage.loadContent('pages/Index', (err, data))", "windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode()", "windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET)", "Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)", "Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)"], "MainAbility.onWindowStageDestroy()": ["Logger.info(TAG, 'onWindowStageDestroy')"], "MainAbility.onForeground()": ["Logger.info(TAG, 'onForeground')"], "MainAbility.onBackground()": ["Logger.info(TAG, 'onBackground')"]}, "static_cg": {"@test/104.ts: MainAbility.onWindowStageCreate(unknown)": ["@test/104.ts: MainAbility.%AM0$onWindowStageCreate([windowClass], unknown, unknown)", "@test/104.ts: MainAbility.%AM3$onWindowStageCreate([windowStage], unknown, unknown)"], "@test/104.ts: MainAbility.%AM0$onWindowStageCreate([windowClass], unknown, unknown)": ["@test/104.ts: MainAbility.%AM1$%AM0$onWindowStageCreate(unknown)", "@test/104.ts: MainAbility.%AM2$%AM0$onWindowStageCreate(number)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport window from '@ohos.window';\nimport type { BusinessError } from '@ohos.base';\nimport type { Configuration } from '@ohos.app.ability.Configuration';\n\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\nexport default class EntryAbility extends UIAbility {\n  windowStage: window.WindowStage | undefined = undefined;\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let uiAbilityContext = this.context;\n    let applicationContext = this.context.getApplicationContext();\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }\n\n  onDestroy(): void {\n    // 系统资源的释放、数据的保存等\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）\n    try {\n      windowStage.on('windowStageEvent', (data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (exception) {\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    };\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    // 设置UI加载\n    // Main window is created, set main page for this ability\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    // 释放UI资源\n    // 例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件\n    try {\n      if (this.windowStage) {\n        this.windowStage.off('windowStageEvent');\n      }\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);\n    };\n  }\n\n  onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源\n    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    // 释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作\n    // 例如状态保存等\n    // Ability has back to background\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');\n  }\n\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n};\n", "llm_cg": {"EntryAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["EntryAbility.context.getApplicationContext()", "EntryAbility.context.config.language"], "EntryAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.on(string, Function)", "window.WindowStage.loadContent(string, Function)"], "EntryAbility.onWindowStageDestroy()": ["window.WindowStage.off(string)"], "EntryAbility.onConfigurationUpdate(Configuration)": []}, "static_cg": {"@test/105.ts: EntryAbility.onWindowStageCreate(window.WindowStage)": ["@test/105.ts: EntryAbility.%AM0$onWindowStageCreate(unknown)", "@test/105.ts: EntryAbility.%AM1$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type window from '@ohos.window';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type { BusinessError } from '@ohos.base';\nimport type { Context } from '@ohos.abilityAccessCtrl';\nimport type { PermissionRequestResult } from '@ohos.abilityAccessCtrl';\nimport type { Permissions } from '@ohos.abilityAccessCtrl';\n\nconst permissions: Array<Permissions> = ['ohos.permission.DISTRIBUTED_DATASYNC'];\n\nconst TAG: string = '[CollaborateAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class CollaborateAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let context: Context = this.context;\n    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\n    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗\n    atManager.requestPermissionsFromUser(context, permissions).then((data: PermissionRequestResult) => {\n      let grantStatus: Array<number> = data.authResults;\n      let length: number = grantStatus.length;\n      for (let i = 0; i < length; i++) {\n        if (grantStatus[i] === 0) {\n          // 用户授权，可以继续访问目标操作\n        } else {\n          // 用户拒绝授权，提示用户必须授权才能访问当前页面的功能，并引导用户到系统设置中打开相应的权限\n          return;\n        }\n      }\n      // 授权成功\n    }).catch((err: BusinessError) => {\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n    });\n  };\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n    windowStage.loadContent('pages/page_collaborateability/Page_CollaborateAbility', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  };\n};\n", "llm_cg": {"CollaborateAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["abilityAccessCtrl.AtManager.requestPermissionsFromUser(Context, Array<Permissions>)"], "CollaborateAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, (err: BusinessError, data: any) => void)"]}, "static_cg": {"@test/106.ts: CollaborateAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["@test/106.ts: CollaborateAbility.%AM1$onCreate(PermissionRequestResult)", "@test/106.ts: CollaborateAbility.%AM0$onCreate(BusinessError)"], "@test/106.ts: CollaborateAbility.onWindowStageCreate(window.WindowStage)": ["@test/106.ts: CollaborateAbility.%AM2$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport type AbilityLifecycleCallback from '@ohos.app.ability.AbilityLifecycleCallback';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type window from '@ohos.window';\n\nconst TAG: string = '[LifecycleAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class LifecycleAbility extends UIAbility {\n  // 定义生命周期ID\n  lifecycleId: number = -1;\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 定义生命周期回调对象\n    let abilityLifecycleCallback: AbilityLifecycleCallback = {\n      // 当UIAbility创建时被调用\n      onAbilityCreate(uiAbility) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onAbilityCreate uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n      },\n      // 当窗口创建时被调用\n      onWindowStageCreate(uiAbility, windowStage: window.WindowStage) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageCreate uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageCreate windowStage: ${JSON.stringify(windowStage)}`);\n      },\n      // 当窗口处于活动状态时被调用\n      onWindowStageActive(uiAbility, windowStage: window.WindowStage) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageActive uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageActive windowStage: ${JSON.stringify(windowStage)}`);\n      },\n      // 当窗口处于非活动状态时被调用\n      onWindowStageInactive(uiAbility, windowStage: window.WindowStage) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageInactive uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageInactive windowStage: ${JSON.stringify(windowStage)}`);\n      },\n      // 当窗口被销毁时被调用\n      onWindowStageDestroy(uiAbility, windowStage: window.WindowStage) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageDestroy uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n        hilog.info(DOMAIN_NUMBER, TAG, `onWindowStageDestroy windowStage: ${JSON.stringify(windowStage)}`);\n      },\n      // 当UIAbility被销毁时被调用\n      onAbilityDestroy(uiAbility) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onAbilityDestroy uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n      },\n      // 当UIAbility从后台转到前台时触发回调\n      onAbilityForeground(uiAbility) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onAbilityForeground uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n      },\n      // 当UIAbility从前台转到后台时触发回调\n      onAbilityBackground(uiAbility) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onAbilityBackground uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n      },\n      // 当UIAbility迁移时被调用\n      onAbilityContinue(uiAbility) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onAbilityContinue uiAbility.launchWant: ${JSON.stringify(uiAbility.launchWant)}`);\n      }\n    };\n    // 获取应用上下文\n    let applicationContext = this.context.getApplicationContext();\n    // 注册应用内生命周期回调\n    this.lifecycleId = applicationContext.on('abilityLifecycle', abilityLifecycleCallback);\n    hilog.info(DOMAIN_NUMBER, TAG, `register callback number: ${this.lifecycleId}`);\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // 设置UI加载\n    windowStage.loadContent('pages/page_funcability/Page_FuncAbilityA', (err, data) => {\n    });\n  }\n\n  onDestroy() : void {\n    // 获取应用上下文\n    let applicationContext = this.context.getApplicationContext();\n    // 取消应用内生命周期回调\n    applicationContext.off('abilityLifecycle', this.lifecycleId);\n  }\n};\n", "llm_cg": {"LifecycleAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["LifecycleAbility.%AM0$onAbilityCreate(UIAbility)", "LifecycleAbility.%AM1$onWindowStageCreate(UIAbility, window.WindowStage)", "LifecycleAbility.%AM2$onWindowStageActive(UIAbility, window.WindowStage)", "LifecycleAbility.%AM3$onWindowStageInactive(UIAbility, window.WindowStage)", "LifecycleAbility.%AM4$onWindowStageDestroy(UIAbility, window.WindowStage)", "LifecycleAbility.%AM5$onAbilityDestroy(UIAbility)", "LifecycleAbility.%AM6$onAbilityForeground(UIAbility)", "LifecycleAbility.%AM7$onAbilityBackground(UIAbility)", "LifecycleAbility.%AM8$onAbilityContinue(UIAbility)"], "LifecycleAbility.onWindowStageCreate(window.WindowStage)": [], "LifecycleAbility.onDestroy()": []}, "static_cg": {"@test/107.ts: LifecycleAbility.onWindowStageCreate(window.WindowStage)": ["@test/107.ts: LifecycleAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtProxy]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  constructor(proxy) {\n    this.proxy = proxy;\n  };\n\n  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n};\n\n", "llm_cg": {"IdlServiceExtProxy.processData(number, ProcessDataCallback)": ["rpc.MessageOption.%AM0$constructor()", "rpc.MessageSequence.%AM1$create()", "rpc.MessageSequence.%AM2$create()", "rpc.MessageSequence.%AM3$writeInt(number)", "IdlServiceExtProxy.proxy.%AM4$sendMessageRequest(number, rpc.MessageSequence, rpc.MessageSequence, rpc.MessageOption)", "rpc.MessageSequence.%AM5$reclaim()", "rpc.MessageSequence.%AM6$reclaim()"], "IdlServiceExtProxy.insertDataToMap(string, number, InsertDataToMapCallback)": ["rpc.MessageOption.%AM7$constructor()", "rpc.MessageSequence.%AM8$create()", "rpc.MessageSequence.%AM9$create()", "rpc.MessageSequence.%AM10$writeString(string)", "rpc.MessageSequence.%AM11$writeInt(number)", "IdlServiceExtProxy.proxy.%AM12$sendMessageRequest(number, rpc.MessageSequence, rpc.MessageSequence, rpc.MessageOption)", "rpc.MessageSequence.%AM13$reclaim()", "rpc.MessageSequence.%AM14$reclaim()"]}, "static_cg": {"@test/108.ts: IdlServiceExtProxy.processData(number, ProcessDataCallback)": ["@test/108.ts: IdlServiceExtProxy.%AM0$processData([callback], unknown)"], "@test/108.ts: IdlServiceExtProxy.insertDataToMap(string, number, InsertDataToMapCallback)": ["@test/108.ts: IdlServiceExtProxy.%AM1$insertDataToMap([callback], unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtStub]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class IdlServiceExtStub extends rpc.RemoteObject implements IIdlServiceExt {\n  constructor(des: string) {\n    super(des);\n  };\n\n  async onRemoteMessageRequest(code: number, data: rpc.MessageSequence, reply: rpc.MessageSequence, option: rpc.MessageOption): Promise<boolean> {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onRemoteMessageRequest called, code = ' + code);\n    switch (code) {\n      case IdlServiceExtStub.COMMAND_PROCESS_DATA: {\n        let dataVar = data.readInt();\n        let promise = new Promise<void>((resolve, reject) => {\n          this.processData(dataVar, (errCode, returnValue) => {\n            reply.writeInt(errCode);\n            if (errCode === 0) {\n              reply.writeInt(returnValue);\n            }\n            resolve();\n          });\n        });\n        await promise;\n        return true;\n      };\n      case IdlServiceExtStub.COMMAND_INSERT_DATA_TO_MAP: {\n        let keyVar = data.readString();\n        let valVar = data.readInt();\n        let promise = new Promise<void>((resolve, reject) => {\n          this.insertDataToMap(keyVar, valVar, (errCode) => {\n            reply.writeInt(errCode);\n            resolve();\n          });\n        });\n        await promise;\n        return true;\n      };\n      default: {\n        hilog.info(DOMAIN_NUMBER, TAG, 'invalid request code' + code);\n        break;\n      }\n    }\n    return false;\n  }\n\n  processData(data: number, callback: ProcessDataCallback): void {\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n  };\n\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n};", "llm_cg": {"IdlServiceExtStub.onRemoteMessageRequest(number, rpc.MessageSequence, rpc.MessageSequence, rpc.MessageOption)": ["IdlServiceExtStub.processData(number, ProcessDataCallback)", "IdlServiceExtStub.insertDataToMap(string, number, InsertDataToMapCallback)"]}, "static_cg": {"@test/109.ts: IdlServiceExtStub.onRemoteMessageRequest(number, rpc.MessageSequence, rpc.MessageSequence, rpc.MessageOption)": ["@test/109.ts: IdlServiceExtStub.%AM0$onRemoteMessageRequest([dataVar], unknown, unknown)", "@test/109.ts: IdlServiceExtStub.%AM2$onRemoteMessageRequest([keyVar, valVar], unknown, unknown)"], "@test/109.ts: IdlServiceExtStub.%AM0$onRemoteMessageRequest([dataVar], unknown, unknown)": ["@test/109.ts: IdlServiceExtStub.%AM1$%AM0$onRemoteMessageRequest(unknown, unknown)", "@test/109.ts: IdlServiceExtStub.processData(number, ProcessDataCallback)"], "@test/109.ts: IdlServiceExtStub.%AM2$onRemoteMessageRequest([keyVar, valVar], unknown, unknown)": ["@test/109.ts: IdlServiceExtStub.%AM3$%AM2$onRemoteMessageRequest(unknown)", "@test/109.ts: IdlServiceExtStub.insertDataToMap(string, number, InsertDataToMapCallback)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';\nimport IdlServiceExtStub from './idl_service_ext_stub';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\nimport type { BusinessError } from '@ohos.base';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type { ProcessDataCallback } from './i_idl_service_ext';\n\nconst ERR_OK = 0;\nconst TAG: string = '[IdlServiceExtImpl]';\nconst DOMAIN_NUMBER: number = 0xFF00;\nconst ERR_DENY = -1;\n\n// 开发者需要在这个类型里对接口进行实现\nexport default class ServiceExtImpl extends IdlServiceExtStub {\n  processData(data: number, callback: ProcessDataCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);\n\n    let callerUid = rpc.IPCSkeleton.getCallingUid();\n    bundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    });\n\n    let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\n    let accessManger = abilityAccessCtrl.createAtManager();\n    // 所校验的具体权限由开发者自行选择，此处ohos.permission.GET_BUNDLE_INFO_PRIVILEGED只作为示例\n    let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\n      hilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');\n      callback(ERR_DENY, data); // 鉴权失败，返回错误\n      return;\n    }\n    hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\n    callback(ERR_OK, data + 1); // 鉴权通过，执行正常业务逻辑\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);\n    callback(ERR_OK);\n  };\n};", "llm_cg": {"ServiceExtImpl.processData(number, ProcessDataCallback)": ["rpc.IPCSkeleton.getCallingUid()", "bundleManager.getBundleNameByUid(number)", "rpc.IPCSkeleton.getCallingTokenId()", "abilityAccessCtrl.createAtManager()", "abilityAccessCtrl.AtManager.verifyAccessTokenSync(number, string)"], "ServiceExtImpl.insertDataToMap(string, number, InsertDataToMapCallback)": []}, "static_cg": {"@test/110.ts: ServiceExtImpl.processData(number, ProcessDataCallback)": ["@test/110.ts: ServiceExtImpl.%AM1$processData(unknown)", "@test/110.ts: ServiceExtImpl.%AM0$processData(BusinessError)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default interface IIdlServiceExt {\n  processData(data: number, callback: ProcessDataCallback): void;\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void;\n}\n\nexport type ProcessDataCallback = (errCode: number, returnValue: number) => void;\n\nexport type InsertDataToMapCallback = (errCode: number) => void;\n", "llm_cg": {"IIdlServiceExt.processData(number, ProcessDataCallback)": [], "IIdlServiceExt.insertDataToMap(string, number, InsertDataToMapCallback)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityStage from '@ohos.app.ability.AbilityStage';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport type Want from '@ohos.app.ability.Want';\nimport type { Configuration } from '@ohos.app.ability.Configuration';\n\nconst TAG: string = '[MyAbilityStage]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\nexport default class MyAbilityStage extends AbilityStage {\n  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onNewWant, want: ${want.abilityName}`);\n    hilog.info(DOMAIN_NUMBER, TAG, `onNewWant, launchParam: ${JSON.stringify(launchParam)}`);\n  }\n  onCreate(): void {\n    // 应用的HAP在首次加载的时，为该Module初始化操作\n    systemLanguage = this.context.config.language; // Module首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n    let abilityStageContext = this.context;\n  }\n  onAcceptWant(want: Want): string {\n    // 仅specified模式下触发\n    hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in starting SpecifiedAbility');\n    // 在被调用方的AbilityStage中，针对启动模式为specified的UIAbility返回一个UIAbility实例对应的一个Key值\n    // 当前示例指的是module1 Module的SpecifiedAbility\n    if (want.abilityName === 'SpecifiedFirstAbility' || want.abilityName === 'SpecifiedSecondAbility') {\n      // 返回的字符串Key标识为自定义拼接的字符串内容\n      if (want.parameters) {\n        return `SpecifiedAbilityInstance_${want.parameters.instanceKey}`;\n      }\n    }\n    return 'MyAbilityStage';\n  }\n  onMemoryLevel(level: AbilityConstant.MemoryLevel): void {\n    // 根据系统可用内存的变化情况，释放不必要的内存\n  }\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdate, language: ${newConfig.language}`);\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n};\n", "llm_cg": {"MyAbilityStage.onNewWant(Want, AbilityConstant.LaunchParam)": [], "MyAbilityStage.onCreate()": [], "MyAbilityStage.onAcceptWant(Want)": [], "MyAbilityStage.onMemoryLevel(AbilityConstant.MemoryLevel)": [], "MyAbilityStage.onConfigurationUpdate(Configuration)": []}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog';\n\nclass Logger {\n  private domain: number;\n  private prefix: string;\n  private format: string = '%{public}s, %{public}s';\n\n  constructor(prefix: string) {\n    this.prefix = prefix;\n    this.domain = 0xFF00;\n  }\n\n  /**\n   * debug\n   * @param args\n   */\n  debug(...args: string[]): void {\n    hilog.debug(this.domain, this.prefix, this.format, args);\n  }\n\n  /**\n   * info\n   * @param args\n   */\n  info(...args: string[]): void {\n    hilog.info(this.domain, this.prefix, this.format, args);\n  }\n\n  /**\n   * warn\n   * @param args\n   */\n  warn(...args: string[]): void {\n    hilog.warn(this.domain, this.prefix, this.format, args);\n  }\n\n  /**\n   * error\n   * @param args\n   */\n  error(...args: string[]): void {\n    hilog.error(this.domain, this.prefix, this.format, args);\n  }\n}\n\nexport default new Logger('[stageuiabilitydevelop]');", "llm_cg": {"Logger.debug(...args: string[])": [], "Logger.info(...args: string[])": [], "Logger.warn(...args: string[])": [], "Logger.error(...args: string[])": []}, "static_cg": {"@test/113.ts: %dflt.[static]%dflt()": ["@test/113.ts: Logger.constructor(string)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\n\nexport default class FuncAbilityB extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // 设置UI加载\n    windowStage.loadContent('pages/page_funcability/Page_FuncAbilityB', (err, data) => {\n    });\n  }\n};\n", "llm_cg": {"FuncAbilityB.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, function)"]}, "static_cg": {"@test/114.ts: FuncAbilityB.onWindowStageCreate(window.WindowStage)": ["@test/114.ts: FuncAbilityB.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\nimport type Want from '@ohos.app.ability.Want';\n\nexport default class FuncAbilityA extends UIAbility {\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 接收调用方UIAbility传过来的参数\n    let funcAbilityWant = want;\n    let info = funcAbilityWant?.parameters?.info;\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // 设置UI加载\n    windowStage.loadContent('pages/page_funcability/Page_FuncAbilityA', (err, data) => {\n    });\n  }\n};\n", "llm_cg": {"FuncAbilityA.onCreate(Want, AbilityConstant.LaunchParam)": [], "FuncAbilityA.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, (err: Error, data: any) => void)"]}, "static_cg": {"@test/115.ts: FuncAbilityA.onWindowStageCreate(window.WindowStage)": ["@test/115.ts: FuncAbilityA.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\n\nexport default class SpecifiedSecondAbility extends UIAbility {\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // 设置UI加载\n    windowStage.loadContent('pages/page_startupability/Page_Specified_Second', (err, data) => {\n    });\n  }\n};", "llm_cg": {"SpecifiedSecondAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, function)"]}, "static_cg": {"@test/116.ts: SpecifiedSecondAbility.onWindowStageCreate(window.WindowStage)": ["@test/116.ts: SpecifiedSecondAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\n\nconst TAG: string = '[MultitonAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class MultitonAbility extends UIAbility {\n  onCreate(): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n    windowStage.loadContent('pages/page_startupability/Page_Multiton', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n};\n", "llm_cg": {"MultitonAbility.onCreate()": [], "MultitonAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, function)"]}, "static_cg": {"@test/117.ts: MultitonAbility.onWindowStageCreate(window.WindowStage)": ["@test/117.ts: MultitonAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\n\nexport default class SpecifiedFirstAbility extends UIAbility {\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // 设置UI加载\n    windowStage.loadContent('pages/page_startupability/Page_Specified_First', (err, data) => {\n    });\n  }\n};", "llm_cg": {"SpecifiedFirstAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, function)"]}, "static_cg": {"@test/118.ts: SpecifiedFirstAbility.onWindowStageCreate(window.WindowStage)": ["@test/118.ts: SpecifiedFirstAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\n\nconst TAG: string = '[SingletonAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class SingletonAbility extends UIAbility {\n  onCreate(): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n    windowStage.loadContent('pages/page_startupability/Page_Singleton', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n};\n", "llm_cg": {"SingletonAbility.onCreate()": [], "SingletonAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, function)"]}, "static_cg": {"@test/119.ts: SingletonAbility.onWindowStageCreate(window.WindowStage)": ["@test/119.ts: SingletonAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport wantConstant from '@ohos.app.ability.wantConstant';\nimport type window from '@ohos.window';\nimport type { Context, PermissionRequestResult, Permissions } from '@ohos.abilityAccessCtrl';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type { BusinessError } from '@ohos.base';\n\nconst permissions: Array<Permissions> = ['ohos.permission.DISTRIBUTED_DATASYNC'];\nconst TAG: string = '[MigrationAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class MigrationAbility extends UIAbility {\n  storage: LocalStorage = new LocalStorage();\n\n  // 对端恢复\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n\n    // 获取分布式数据\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      // 将want保存的数据取出恢复\n      let continueInput = '';\n      if (want.parameters !== undefined) {\n        continueInput = JSON.stringify(want.parameters.data);\n        hilog.info(DOMAIN_NUMBER, TAG, `continue input ${continueInput}`);\n      }\n      // 将数据显示当前页面\n      this.context.restoreWindowStage(this.storage);\n    }\n    // 调用原因为迁移时，设置状态为可迁移，应对冷启动情况\n    this.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n      hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n    });\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityFirst', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n    // Main window is created, set main page for this ability\n    let context: Context = this.context;\n    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\n    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗\n    atManager.requestPermissionsFromUser(context, permissions).then((data: PermissionRequestResult) => {\n      let grantStatus: Array<number> = data.authResults;\n      let length: number = grantStatus.length;\n      for (let i = 0; i < length; i++) {\n        if (grantStatus[i] === 0) {\n          // 用户授权，可以继续访问目标操作\n        } else {\n          // 用户拒绝授权，提示用户必须授权才能访问当前页面的功能，并引导用户到系统设置中打开相应的权限\n          return;\n        }\n      }\n      // 授权成功\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n    });\n  }\n\n  // 源端保存\n  onContinue(wantParam: Record<string, Object>): AbilityConstant.OnContinueResult {\n    let version = wantParam.version;\n    let targetDevice = wantParam.targetDevice;\n    hilog.info(DOMAIN_NUMBER, TAG, `onContinue version = ${version}, targetDevice: ${targetDevice}`); // 准备迁移数据\n\n    // 获取源端版本号\n    let versionSrc: number = -1; // 请填充具体获取版本号的代码\n\n    // 兼容性校验\n    if (version !== versionSrc) {\n      // 在兼容性校验不通过时返回MISMATCH\n      return AbilityConstant.OnContinueResult.MISMATCH;\n    }\n\n    // 将要迁移的数据保存在wantParam的自定义字段（例如data）中\n    const continueInput = '迁移的数据';\n    wantParam['data'] = continueInput;\n\n    //设置不迁移页面栈&迁移后源端不退出\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_PAGE_STACK_KEY] = false;\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_SOURCE_EXIT_KEY] = false;\n\n    return AbilityConstant.OnContinueResult.AGREE;\n  }\n\n  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onNewWant');\n\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      // get user data from want params\n      let continueInput = '';\n      if (want.parameters !== undefined) {\n        continueInput = JSON.stringify(want.parameters.data);\n        hilog.info(DOMAIN_NUMBER, TAG, `continue input ${JSON.stringify(continueInput)}`);\n      }\n      this.context.restoreWindowStage(this.storage);\n    }\n\n    // 调用原因为迁移时，设置状态为可迁移，应对热启动情况\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      this.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n        hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n      });\n    }\n  }\n\n  onWindowStageRestore(windowStage: window.WindowStage): void {\n    // 若不需要自动迁移页面栈信息，则需要在此处设置应用迁移后进入的页面\n    windowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityThird', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n    });\n  }\n};\n", "llm_cg": {"MigrationAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["MigrationAbility.context.restoreWindowStage(LocalStorage)", "MigrationAbility.context.setMissionContinueState(AbilityConstant.ContinueState, Function)"], "MigrationAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(String, Function)", "abilityAccessCtrl.AtManager.requestPermissionsFromUser(Context, Array<Permissions>)"], "MigrationAbility.onContinue(Record<string, Object>)": [], "MigrationAbility.onNewWant(Want, AbilityConstant.LaunchParam)": ["MigrationAbility.context.restoreWindowStage(LocalStorage)", "MigrationAbility.context.setMissionContinueState(AbilityConstant.ContinueState, Function)"], "MigrationAbility.onWindowStageRestore(window.WindowStage)": ["window.WindowStage.loadContent(String, Function)"]}, "static_cg": {"@test/120.ts: MigrationAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["@test/120.ts: MigrationAbility.%AM0$onCreate(unknown)"], "@test/120.ts: MigrationAbility.onWindowStageCreate(window.WindowStage)": ["@test/120.ts: MigrationAbility.%AM1$onWindowStageCreate(unknown, unknown)", "@test/120.ts: MigrationAbility.%AM3$onWindowStageCreate(PermissionRequestResult)", "@test/120.ts: MigrationAbility.%AM2$onWindowStageCreate(BusinessError)"], "@test/120.ts: MigrationAbility.onNewWant(Want, AbilityConstant.LaunchParam)": ["@test/120.ts: MigrationAbility.%AM4$onNewWant(unknown)"], "@test/120.ts: MigrationAbility.onWindowStageRestore(window.WindowStage)": ["@test/120.ts: MigrationAbility.%AM5$onWindowStageRestore(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BusinessError } from '@ohos.base';\nimport hilog from '@ohos.hilog';\nimport ServiceExtensionAbility from '@ohos.app.ability.ServiceExtensionAbility';\nimport ServiceExtImpl from '../IdlServiceExt/idl_service_ext_impl';\nimport type Want from '@ohos.app.ability.Want';\nimport type rpc from '@ohos.rpc';\n\nconst TAG: string = '[ServiceExtAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class ServiceExtAbility extends ServiceExtensionAbility {\n  serviceExtImpl: ServiceExtImpl = new ServiceExtImpl('ExtImpl');\n\n  onCreate(want: Want): void {\n    let serviceExtensionContext = this.context;\n    hilog.info(DOMAIN_NUMBER, TAG, `onCreate, want: ${want.abilityName}`);\n  };\n\n  onRequest(want: Want, startId: number): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onRequest, want: ${want.abilityName}`);\n    if (want.parameters.key === 'ConnectFaPageAbility') {\n      let wantFA: Want = {\n        bundleName: 'com.samples.famodelabilitydevelop',\n        abilityName: 'com.samples.famodelabilitydevelop.MainAbility',\n      };\n      this.context.startAbility(wantFA).then(() => {\n        hilog.info(DOMAIN_NUMBER, TAG, 'Start Ability successfully.');\n      }).catch((error: BusinessError) => {\n        hilog.info(DOMAIN_NUMBER, TAG, `Ability failed: ${JSON.stringify(error)}`);\n      });\n    }\n  };\n\n  onConnect(want: Want): rpc.RemoteObject {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConnect, want: ${want.abilityName}`);\n    // 返回ServiceExtImpl对象，客户端获取后便可以与ServiceExtensionAbility进行通信\n    return this.serviceExtImpl as rpc.RemoteObject;\n  };\n\n  onDisconnect(want: Want): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onDisconnect, want: ${want.abilityName}`);\n  };\n\n  onDestroy(): void {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onDestroy');\n  };\n};", "llm_cg": {"ServiceExtAbility.onCreate(Want)": [], "ServiceExtAbility.onRequest(Want, number)": ["ServiceExtAbility.context.startAbility(Want)"], "ServiceExtAbility.onConnect(Want)": [], "ServiceExtAbility.onDisconnect(Want)": [], "ServiceExtAbility.onDestroy()": []}, "static_cg": {"@test/121.ts: ServiceExtAbility.onRequest(Want, number)": ["@test/121.ts: ServiceExtAbility.%AM1$onRequest()", "@test/121.ts: ServiceExtAbility.%AM0$onRequest(BusinessError)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type window from '@ohos.window';\nimport type Want from '@ohos.app.ability.Want';\nimport type { Context } from '@ohos.abilityAccessCtrl';\n\nconst TAG: string = '[EventAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class EventAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 获取UIAbility实例的上下文\n    let context = this.context;\n    // 获取eventHub\n    let eventhub = this.context.eventHub;\n    // 执行订阅操作\n    eventhub.on('event1', this.eventFunc);\n    eventhub.on('event1', (data: string) => {\n      // 触发事件，完成相应的业务操作\n    });\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Page_EventHub', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n  eventFunc(argOne: Context, argTwo: Context): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '1. ' + `${argOne}, ${argTwo}`);\n    return;\n  }\n};\n", "llm_cg": {"EventAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["EventAbility.eventFunc(Context, Context)"], "EventAbility.onWindowStageCreate(window.WindowStage)": []}, "static_cg": {"@test/122.ts: EventAbility.onCreate(Want, AbilityConstant.LaunchParam)": ["@test/122.ts: EventAbility.eventFunc(Context, Context)", "@test/122.ts: EventAbility.%AM0$onCreate(string)"], "@test/122.ts: EventAbility.onWindowStageCreate(window.WindowStage)": ["@test/122.ts: EventAbility.%AM1$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type window from '@ohos.window';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type { Context } from '@ohos.abilityAccessCtrl';\nimport type { PermissionRequestResult } from '@ohos.abilityAccessCtrl';\nimport type { Permissions } from '@ohos.abilityAccessCtrl';\nimport type { BusinessError } from '@ohos.base';\n\nconst permissions: Array<Permissions> = ['ohos.permission.GET_BUNDLE_INFO_PRIVILEGED'];\nconst TAG: string = '[ContextAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class ContextAbility extends UIAbility {\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    windowStage.loadContent('pages/page_contextability/Page_ContextAbility', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n\n    // Main window is created, set main page for this ability\n    let context: Context = this.context;\n    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\n    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗\n    atManager.requestPermissionsFromUser(context, permissions).then((data: PermissionRequestResult) => {\n      let grantStatus: Array<number> = data.authResults;\n      let length: number = grantStatus.length;\n      for (let i = 0; i < length; i++) {\n        if (grantStatus[i] === 0) {\n          // 用户授权，可以继续访问目标操作\n        } else {\n          // 用户拒绝授权，提示用户必须授权才能访问当前页面的功能，并引导用户到系统设置中打开相应的权限\n          return;\n        }\n      }\n      // 授权成功\n    }).catch((err: BusinessError) => {\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n    });\n  }\n};\n", "llm_cg": {"ContextAbility.onCreate(Want, AbilityConstant.LaunchParam)": [], "ContextAbility.onWindowStageCreate(window.WindowStage)": ["window.WindowStage.loadContent(string, (err: BusinessError, data: any) => void)", "abilityAccessCtrl.AtManager.requestPermissionsFromUser(Context, Array<Permissions>)"]}, "static_cg": {"@test/123.ts: ContextAbility.onWindowStageCreate(window.WindowStage)": ["@test/123.ts: ContextAbility.%AM0$onWindowStageCreate(unknown, unknown)", "@test/123.ts: ContextAbility.%AM2$onWindowStageCreate(PermissionRequestResult)", "@test/123.ts: ContextAbility.%AM1$onWindowStageCreate(BusinessError)"]}}
{"source_code": "import hilog from '@ohos.hilog';\nimport AbilityStage from \"@ohos.application.AbilityStage\"\n\nexport default class MyAbilityStage extends AbilityStage {\n    onCreate() {\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'AbilityStage onCreate');\n    }\n}", "llm_cg": {"MyAbilityStage.onCreate()": ["hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO)", "hilog.info(0x0000, 'testTag', '%{public}s', 'AbilityStage onCreate')"]}, "static_cg": {}}
{"source_code": "import hilog from '@ohos.hilog';\nimport Ability from '@ohos.application.Ability'\nimport Window from '@ohos.window'\n\nexport default class MainAbility extends Ability {\n    onCreate(want, launchParam) {\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n        hilog.info(0x0000, 'testTag', '%{public}s', 'want param:' + JSON.stringify(want) ?? '');\n        hilog.info(0x0000, 'testTag', '%{public}s', 'launchParam:' + JSON.stringify(launchParam) ?? '');\n    }\n\n    onDestroy() {\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n    }\n\n    onWindowStageCreate(windowStage: Window.WindowStage) {\n        // Main window is created, set main page for this ability\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n        windowStage.loadContent('pages/index', (err, data) => {\n            if (err.code) {\n                hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.ERROR);\n                hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n                return;\n            }\n            hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n            hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n        });\n    }\n\n    onWindowStageDestroy() {\n        // Main window is destroyed, release UI related resources\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n    }\n\n    onForeground() {\n        // Ability has brought to foreground\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n    }\n\n    onBackground() {\n        // Ability has back to background\n        hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n    }\n}\n", "llm_cg": {"MainAbility.onCreate(want, launchParam)": [], "MainAbility.onDestroy()": [], "MainAbility.onWindowStageCreate(windowStage: Window.WindowStage)": ["Window.WindowStage.loadContent('pages/index', (err, data))"], "MainAbility.onWindowStageDestroy()": [], "MainAbility.onForeground()": [], "MainAbility.onBackground()": []}, "static_cg": {"@test/125.ts: MainAbility.onWindowStageCreate(Window.WindowStage)": ["@test/125.ts: MainAbility.%AM0$onWindowStageCreate(unknown, unknown)"]}}
{"source_code": "/*\n * Copyright (c) 2022 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport hilog from '@ohos.hilog'\n\nclass Logger {\n  private domain: number\n  private prefix: string\n  private format: string = \"%{public}s, %{public}s\"\n\n  constructor(prefix: string) {\n    this.prefix = prefix\n    this.domain = 0xFF00\n  }\n\n  debug(...args: any[]) {\n    hilog.debug(this.domain, this.prefix, this.format, args)\n  }\n\n  info(...args: any[]) {\n    hilog.info(this.domain, this.prefix, this.format, args)\n  }\n\n  warn(...args: any[]) {\n    hilog.warn(this.domain, this.prefix, this.format, args)\n  }\n\n  error(...args: any[]) {\n    hilog.error(this.domain, this.prefix, this.format, args)\n  }\n}\n\nexport default new Logger('[eTSAdaptiveCapabilities]')", "llm_cg": {"Logger.debug(...args: any[])": [], "Logger.info(...args: any[])": [], "Logger.warn(...args: any[])": [], "Logger.error(...args: any[])": []}, "static_cg": {"@test/126.ts: %dflt.[static]%dflt()": ["@test/126.ts: Logger.constructor(string)"]}}
{"source_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityStage from '@ohos.app.ability.AbilityStage'\nimport Logger from '../model/Logger'\n\nexport default class MyAbilityStage extends AbilityStage {\n  onCreate() {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'MyAbilityStage onCreate')\n  }\n}", "llm_cg": {"MyAbilityStage.onCreate()": ["Logger.info(string, string)"]}, "static_cg": {}}
{"source_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../model/Logger'\nimport window from '@ohos.window'\n\nexport default class MainAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onCreate')\n  }\n\n  onDestroy() {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onDestroy')\n  }\n\n  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageCreate')\n    windowStage.setUIContent(this.context, \"pages/Index\", null)\n    window.getTopWindow(this.context)\n      .then(windowObj => {\n        AppStorage.SetOrCreate('windowObj', windowObj)\n      })\n  }\n\n  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageDestroy')\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onForeground')\n  }\n\n  onBackground() {\n    // Ability has back to background\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onBackground')\n  }\n}\n", "llm_cg": {"MainAbility.onCreate(want, launchParam)": ["Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onCreate')"], "MainAbility.onDestroy()": ["Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onDestroy')"], "MainAbility.onWindowStageCreate(windowStage)": ["Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageCreate')", "windowStage.setUIContent(this.context, \"pages/Index\", null)", "window.getTopWindow(this.context).then(windowObj => { AppStorage.SetOrCreate('windowObj', windowObj) })"], "MainAbility.onWindowStageDestroy()": ["Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageDestroy')"], "MainAbility.onForeground()": ["Logger.info('[Sample_AdaptiveCapabilities]', 'onForeground')"], "MainAbility.onBackground()": ["Logger.info('[Sample_AdaptiveCapabilities]', 'onBackground')"]}, "static_cg": {"@test/128.ts: MainAbility.onWindowStageCreate(unknown)": ["@test/128.ts: MainAbility.%AM0$onWindowStageCreate(unknown)"]}}
