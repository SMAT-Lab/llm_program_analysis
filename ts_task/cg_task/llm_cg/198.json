{
    "%AMX$before(async () =>)": [
        "CacheInMemoryProviderService.%AMX$CacheInMemoryProviderService()",
        "CacheService.%AMX$CacheService(CacheInMemoryProviderService)",
        "CacheService.initialize()"
    ],
    "%AMX$beforeEach(async () =>)": [
        "UserSession.%AMX$UserSession()",
        "UserSession.initialize()",
        "setIntegrationConfig({ _environmentId: string, _organizationId: string; active?: boolean; hmac?: boolean }, CacheService)"
    ],
    "%AMX$it(should initialize session, async function ()": [
        "setIntegrationConfig({ _environmentId: string, _organizationId: string; hmac: boolean }, CacheService)",
        "%AMX$initializeSession({ applicationIdentifier: string, subscriberId: string })"
    ],
    "%AMX$it(should initialize session with HMAC, async function ()": [
        "session.environment.apiKeys[]",
        "createHash(string, string)",
        "%AMX$initializeSession({ applicationIdentifier: string, subscriberId: string; subscriberHash?: string })"
    ],
    "%AMX$it(should throw an error when invalid applicationIdentifier provided, async function ()": [
        "%AMX$initializeSession({ applicationIdentifier: string, subscriberId: string })"
    ],
    "%AMX$it(should throw an error when no active integrations, async function ()": [
        "setIntegrationConfig({ _environmentId: string, _organizationId: string; active: boolean }, CacheService)",
        "%AMX$initializeSession({ applicationIdentifier: string, subscriberId: string })"
    ],
    "%AMX$it(should throw an error when invalid subscriberHash provided, async function ()": [
        "createHash(string, string)",
        "%AMX$initializeSession({ applicationIdentifier: string, subscriberId: string; subscriberHash?: string })"
    ],
    "initializeSession({ applicationIdentifier: string, subscriberId: string, subscriberHash?: string })": [
        "session.testAgent.post('/v1/inbox/session').send({ applicationIdentifier: string, subscriberId: string, subscriberHash?: string })"
    ],
    "setIntegrationConfig({ _environmentId: string, _organizationId: string; active?: boolean; hmac?: boolean }, CacheService)": [
        "CacheService.delByPattern('*')",
        "IntegrationRepository.update({ _environmentId: string, _organizationId: string; providerId: InAppProviderIdEnum, channel: ChannelTypeEnum, active: boolean }, { $set: { 'credentials.hmac': boolean, active: boolean } })"
    ]
}