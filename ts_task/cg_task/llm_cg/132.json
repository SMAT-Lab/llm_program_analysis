{
    "GoogleSheetsMock.forDatasource(datasource: Datasource)": [
        "GoogleSheetsMock.%AM0$<constructor>(config: GoogleSheetsConfig)"
    ],
    "GoogleSheetsMock.cell(cell: string)": [
        "GoogleSheetsMock.%AM0$cellData(cell: string)",
        "GoogleSheetsMock.%AM0$cellValue(from: CellData)"
    ],
    "GoogleSheetsMock.set(cell: string, value: Value)": [
        "GoogleSheetsMock.%AM0$cellData(cell: string)",
        "GoogleSheetsMock.%AM0$createValue(from: Value)"
    ],
    "GoogleSheetsMock.sheet(name: string | number)": [
        "GoogleSheetsMock.%AM0$getSheetById(id: number)",
        "GoogleSheetsMock.%AM0$getSheetByName(name: string)"
    ],
    "GoogleSheetsMock.createSheet(opts: Partial<WorksheetProperties>): Sheet": [
        "GoogleSheetsMock.%AM0$defaultWorksheetProperties(opts: Partial<WorksheetProperties>)",
        "GoogleSheetsMock.%AM0$getSheetByName(name: string)",
        "GoogleSheetsMock.%AM0$handleAddSheet(request: AddSheetRequest)",
        "GoogleSheetsMock.%AM0$getSheetById(id: number)"
    ],
    "GoogleSheetsMock.get(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body): nock.Scope": [
        "GoogleSheetsMock.%AM0$route(method: \"get\" | \"put\" | \"post\", path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)"
    ],
    "GoogleSheetsMock.put(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body): nock.Scope": [
        "GoogleSheetsMock.%AM0$route(method: \"get\" | \"put\" | \"post\", path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)"
    ],
    "GoogleSheetsMock.post(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body): nock.Scope": [
        "GoogleSheetsMock.%AM0$route(method: \"get\" | \"put\" | \"post\", path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)"
    ],
    "GoogleSheetsMock.mockAuth()": [],
    "GoogleSheetsMock.mockAPI()": [
        "GoogleSheetsMock.%AM0$get(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)",
        "GoogleSheetsMock.%AM0$post(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)",
        "GoogleSheetsMock.%AM0$put(path: string | RegExp, handler: (uri: string, request: nock.Body) => nock.Body)"
    ],
    "GoogleSheetsMock.handleValueAppend(request: AppendRequest): AppendResponse": [
        "GoogleSheetsMock.%AM0$parseA1Notation(range: string)",
        "GoogleSheetsMock.%AM0$valuesToRowData(values: Value[])",
        "GoogleSheetsMock.%AM0$createA1(range: Required<GridRange>)"
    ],
    "GoogleSheetsMock.handleBatchGet(params: BatchGetParams): BatchGetResponse": [
        "GoogleSheetsMock.%AM0$getValueRange(range: string)"
    ],
    "GoogleSheetsMock.handleBatchUpdate(batchUpdateRequest: BatchUpdateRequest): BatchUpdateResponse": [
        "GoogleSheetsMock.%AM0$handleAddSheet(request: AddSheetRequest)",
        "GoogleSheetsMock.%AM0$handleDeleteRange(request: DeleteRangeRequest)",
        "GoogleSheetsMock.%AM0$handleDeleteSheet(request: DeleteSheetRequest)"
    ],
    "GoogleSheetsMock.defaultWorksheetProperties(opts: Partial<WorksheetProperties>): WorksheetProperties": [],
    "GoogleSheetsMock.handleAddSheet(request: AddSheetRequest): AddSheetResponse": [
        "GoogleSheetsMock.%AM0$defaultWorksheetProperties(opts: Partial<WorksheetProperties>)",
        "GoogleSheetsMock.%AM0$createEmptyGrid(numRows: number, numCols: number)"
    ],
    "GoogleSheetsMock.handleDeleteRange(request: DeleteRangeRequest)": [
        "GoogleSheetsMock.%AM0$iterateRange(range: GridRange, cb: (cell: CellData) => void)",
        "GoogleSheetsMock.%AM0$createValue(from: Value)"
    ],
    "GoogleSheetsMock.handleDeleteSheet(request: DeleteSheetRequest)": [],
    "GoogleSheetsMock.handleGetSpreadsheet(): Spreadsheet": [],
    "GoogleSheetsMock.handleValueUpdate(valueRange: ValueRange): UpdateValuesResponse": [
        "GoogleSheetsMock.%AM0$iterateValueRange(valueRange: ValueRange, cb: (cell: CellData, value: Value) => void)",
        "GoogleSheetsMock.%AM0$createValue(from: Value)"
    ],
    "GoogleSheetsMock.iterateRange(range: GridRange, cb: (cell: CellData) => void)": [
        "GoogleSheetsMock.%AM0$ensureGridRange(range: GridRange)",
        "GoogleSheetsMock.%AM0$getCellNumericIndexes(sheet: Sheet | number, row: number, column: number)"
    ],
    "GoogleSheetsMock.iterateValueRange(valueRange: ValueRange, cb: (cell: CellData, value: Value) => void)": [
        "GoogleSheetsMock.%AM0$parseA1Notation(range: string)",
        "GoogleSheetsMock.%AM0$getCellNumericIndexes(sheet: Sheet | number, row: number, column: number)"
    ],
    "GoogleSheetsMock.getValueRange(range: string): ValueRange": [
        "GoogleSheetsMock.%AM0$parseA1Notation(range: string)",
        "GoogleSheetsMock.%AM0$getCellNumericIndexes(sheet: Sheet | number, row: number, column: number)",
        "GoogleSheetsMock.%AM0$cellValue(from: CellData)",
        "GoogleSheetsMock.%AM0$trimValueRange(valueRange: ValueRange)"
    ],
    "GoogleSheetsMock.trimValueRange(valueRange: ValueRange): ValueRange": [],
    "GoogleSheetsMock.valuesToRowData(values: Value[]): RowData": [
        "GoogleSheetsMock.%AM0$createCellData(value: Value)"
    ],
    "GoogleSheetsMock.unwrapValue(from: ExtendedValue): Value": [],
    "GoogleSheetsMock.cellValue(from: CellData): Value": [
        "GoogleSheetsMock.%AM0$unwrapValue(from: ExtendedValue)"
    ],
    "GoogleSheetsMock.createValue(from: Value): ExtendedValue": [],
    "GoogleSheetsMock.createCellData(value: Value): CellData": [
        "GoogleSheetsMock.%AM0$createValue(from: Value)"
    ],
    "GoogleSheetsMock.createEmptyGrid(numRows: number, numCols: number): GridData": [
        "GoogleSheetsMock.%AM0$createCellData(value: Value)"
    ],
    "GoogleSheetsMock.cellData(cell: string): CellData | undefined": [
        "GoogleSheetsMock.%AM0$parseA1Notation(range: string)",
        "GoogleSheetsMock.%AM0$getCellNumericIndexes(sheet: Sheet | number, row: number, column: number)"
    ],
    "GoogleSheetsMock.getCellNumericIndexes(sheet: Sheet | number, row: number, column: number): CellData | undefined": [
        "GoogleSheetsMock.%AM0$getSheetById(id: number)"
    ],
    "GoogleSheetsMock.parseA1Notation(range: string): Required<GridRange>": [
        "GoogleSheetsMock.%AM0$getSheetByName(name: string)",
        "GoogleSheetsMock.%AM0$ensureGridRange(range: GridRange)"
    ],
    "GoogleSheetsMock.ensureGridRange(range: GridRange): Required<GridRange>": [
        "GoogleSheetsMock.%AM0$getSheetById(id: number)"
    ],
    "GoogleSheetsMock.createA1(range: Required<GridRange>)": [
        "GoogleSheetsMock.%AM0$getSheetById(id: number)",
        "GoogleSheetsMock.%AM0$numberToLetter(number: number)"
    ],
    "GoogleSheetsMock.parseCell(cell: string): Partial<Range>": [
        "GoogleSheetsMock.%AM0$letterToNumber(letter: string)"
    ],
    "GoogleSheetsMock.letterToNumber(letter: string): number": [],
    "GoogleSheetsMock.numberToLetter(number: number): string": [],
    "GoogleSheetsMock.getSheetByName(name: string): Sheet | undefined": [],
    "GoogleSheetsMock.getSheetById(id: number): Sheet | undefined": []
}