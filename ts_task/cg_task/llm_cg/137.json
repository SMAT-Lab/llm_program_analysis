{
    "bundleExecutor(options.ExecutorContext)": [
        "bundleExecutor.%AM0$join(string, string)",
        "bundleExecutor.%AM0$dirname(string)",
        "bundleExecutor.%AM1$createDirectory(string)",
        "bundleExecutor.%AM0$runCliBuild(string, string, options)",
        "bundleExecutor.%AM0$yield({ success: boolean })"
    ],
    "bundleExecutor.%AM0$runCliBuild(string, string, options)": [
        "bundleExecutor.%AM1$createBundleOptions(options)",
        "bundleExecutor.%AM1$fork(string, string[], { stdio: string, cwd: string, env: process.env })",
        "bundleExecutor.%AM0$process.once('exit', (signal) => childProcess.kill(signal))",
        "bundleExecutor.%AM0$process.once('SIGTERM', () => childProcess.kill(signal); process.exit())",
        "bundleExecutor.%AM0$process.once('SIGINT', () => childProcess.kill(signal); process.exit())",
        "bundleExecutor.%AM0$process.once('SIGQUIT', () => childProcess.kill(signal); process.exit())",
        "bundleExecutor.%AM0$childProcess.on('error', (err) => reject(err))",
        "bundleExecutor.%AM0$childProcess.on('exit', (code) => { if (code === 0) { resolve(childProcess); } else { reject(code); } })"
    ],
    "bundleExecutor.%AM1$createBundleOptions(options)": [
        "bundleExecutor.%AM1$names(string)"
    ]
}