{
    "CameraService.Constructor()": [
        "CameraService.%AM0$mockInterface()",
        "photoAccessHelper.getPhotoAccessHelper(any)",
        "image.createImageReceiver(any, any, any, any)"
    ],
    "CameraService.savePicture(ArrayBuffer, Image)": [
        "photoAccessHelper.PhotoAccessHelper.createAsset(any)",
        "photoAccessHelper.PhotoAsset.open(any)",
        "fs.write(any, any)",
        "photoAccessHelper.PhotoAsset.close(any)",
        "CameraService.%AM1$handleTakePicture(any)"
    ],
    "CameraService.switchProfiles(camera.CameraOutputCapability)": [
        "AppStorage.get(any)",
        "CameraService.%AM5$withinErrorMargin(any, any)",
        "AppStorage.get(any)",
        "CameraService.%AM6$withinErrorMargin(any, any)",
        "AppStorage.get(any)",
        "AppStorage.get(any)",
        "CameraService.%AM5$withinErrorMargin(any, any)",
        "CameraService.%AM5$withinErrorMargin(any, any)",
        "CameraService.%AM5$withinErrorMargin(any, any)",
        "CameraService.%AM1$switchProfiles(camera.CameraOutputCapability)"
    ],
    "CameraService.initProfile(any)": [
        "CameraService.getCameraManagerFn()",
        "CameraService.getSupportedCamerasFn()",
        "CameraService.getModeManagerFn()",
        "CameraService.getSupportedModeFn(any)",
        "camera.CameraManager.getSupportedOutputCapability(any, any)",
        "CameraService.switchProfiles(camera.CameraOutputCapability)"
    ],
    "CameraService.initCamera(any, any)": [
        "CameraService.releaseCamera()",
        "CameraService.getCameraManagerFn()",
        "Logger.debug(any, any)",
        "CameraService.getModeManagerFn()",
        "CameraService.getSupportedCamerasFn()",
        "CameraService.getSupportedModeFn(any)",
        "CameraService.initProfile(any)",
        "CameraService.createPreviewOutputFn(any, any)",
        "CameraService.previewOutputCallBack()",
        "CameraService.createAVRecorder()",
        "CameraService.createVideoOutput()",
        "CameraService.onVideoOutputChange()",
        "CameraService.mReceiver.getReceivingSurfaceId()",
        "CameraService.createPhotoOutputFn(any, any)",
        "CameraService.photoOutPutCallBack()",
        "CameraService.createCameraInputFn(any)",
        "CameraService.cameraInputOpenFn()",
        "CameraService.onCameraStatusChange()",
        "CameraService.onCameraInputChange()",
        "promise.all([CameraService.portraitSessionFlowFn(), CameraService.nightSessionFlowFn(), CameraService.macroPhotoSessionFlowFn(), CameraService.videoSessionFlowFn(), CameraService.photoSessionFlowFn()])"
    ],
    "CameraService.takePicture(any)": [
        "CameraService.isMirrorSupportedFn()",
        "CameraService.onChangeRotation()",
        "CameraService.onChangeLocation()",
        "camera.PhotoOutput.capture(any)"
    ],
    "CameraService.startVideo()": [
        "CameraService.videoOutput.start()",
        "CameraService.videoRecorder.start()"
    ],
    "CameraService.stopVideo()": [
        "CameraService.videoRecorder.stop()",
        "CameraService.videoOutput.stop()",
        "photoAccessHelper.PhotoAsset.close(any)"
    ],
    "CameraService.releaseCamera()": [
        "CameraService.stopVideo()",
        "CameraService.releaseVideoRecorder()",
        "CameraService.previewOutput.stop()",
        "CameraService.previewOutput.release()",
        "CameraService.photoOutPut.release()",
        "CameraService.videoOutput.release()",
        "CameraService.photoSession.release()",
        "CameraService.videoSession.release()",
        "CameraService.portraitSession.release()",
        "CameraService.nightSession.release()",
        "CameraService.cameraInput.close()"
    ],
    "CameraService.photoSessionFlowFn()": [
        "camera.CaptureSession.beginConfig()",
        "camera.PhotoSession.addInput(any)",
        "camera.PhotoSession.addOutput(any)",
        "camera.PhotoSession.commitConfig()",
        "camera.CaptureSession.start()",
        "CameraService.configMoonCaptureBoost()",
        "CameraService.getSupportedColorEffects()",
        "CameraService.isFocusMode(any)"
    ],
    "CameraService.videoSessionFlowFn()": [
        "camera.CaptureSession.beginConfig()",
        "camera.VideoSession.addInput(any)",
        "camera.VideoSession.addOutput(any)",
        "camera.VideoSession.commitConfig()",
        "camera.CaptureSession.start()",
        "CameraService.getSupportedColorEffects()",
        "CameraService.isFocusMode(any)"
    ],
    "CameraService.portraitSessionFlowFn(any)": [
        "camera.CaptureSession.beginConfig()",
        "camera.PortraitPhotoSession.addInput(any)",
        "camera.PortraitPhotoSession.addOutput(any)",
        "camera.PortraitPhotoSession.commitConfig()",
        "camera.CaptureSession.start()",
        "CameraService.configMoonCaptureBoost()",
        "CameraService.getSupportedColorEffects()",
        "CameraService.isFocusMode(any)"
    ],
    "CameraService.nightSessionFlowFn(any)": [
        "camera.CaptureSession.beginConfig()",
        "camera.NightPhotoSession.addInput(any)",
        "camera.NightPhotoSession.addOutput(any)",
        "camera.NightPhotoSession.commitConfig()",
        "camera.CaptureSession.start()",
        "CameraService.configMoonCaptureBoost()",
        "CameraService.getSupportedColorEffects()",
        "CameraService.isFocusMode(any)"
    ],
    "CameraService.photoOutPutCallBack()": [
        "camera.PhotoOutput.on('imageArrival', () => {}])",
        "camera.PhotoOutput.on('photoAvailable', () => {}])",
        "camera.PhotoOutput.on('deferredPhotoProxyAvailable', () => {}])",
        "CameraService.testAbilityFunction()"
    ],
    "CameraService.getCameraManagerFn()": [
        "camera.getCameraManager(any)"
    ],
    "CameraService.getModeManagerFn()": [
        "camera.getCameraManager(any)"
    ],
    "CameraService.getSupportedCamerasFn()": [
        "camera.CameraManager.getSupportedCameras()"
    ],
    "CameraService.getSupportedModeFn(any)": [
        "camera.CameraManager.getSupportedSceneModes(any)"
    ],
    "camera.CaptureSession.beginConfig()": [
        "camera.CaptureSession.beginConfig()"
    ],
    "camera.PhotoSession.addInput(any)": [
        "camera.PhotoSession.addInput(any)"
    ],
    "camera.PhotoSession.addOutput(any)": [
        "camera.PhotoSession.addOutput(any)"
    ],
    "camera.PhotoSession.commitConfig()": [
        "camera.PhotoSession.commitConfig()"
    ],
    "camera.CaptureSession.start()": [
        "camera.CaptureSession.start()"
    ]
}