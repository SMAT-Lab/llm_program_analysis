{
    "deployContract(wallet: WalletUnlocked, binaryPath: string, abiPath: string, storageSlotsPath: string, deployConfig: DeployContractOptions, contractPath: string, tomlContents: ForcToml)": [
        "ContractFactory.deploy(unknown)",
        "DeployContractOptions.deployConfig(unknown)",
        "Contract.waitForResult(unknown)",
        "ContractFactory.deploy(unknown)",
        "Contract.waitForResult(unknown)",
        "Contract.functions.set_proxy_target(unknown)",
        "ContractFactory.deploy(unknown)",
        "Contract.waitForResult(unknown)",
        "Contract.functions.initialize_proxy(unknown)",
        "setForcTomlProxyAddress(contractPath: string, proxyContractId: string)"
    ],
    "deployContracts(config: FuelsConfig)": [
        "createWallet(config.providerUrl: string, config.privateKey: string)",
        "getClosestForcTomlDir(contractPath: string)",
        "getBinaryPath(contractPath: string, config: FuelsConfig)",
        "getABIPath(contractPath: string, config: FuelsConfig)",
        "getStorageSlotsPath(contractPath: string, config: FuelsConfig)",
        "getContractName(contractPath: string)",
        "getContractCamelCase(contractPath: string)",
        "readForcToml(forcTomlPath: string)",
        "getDeployConfig(config.deployConfig: unknown, { contracts: DeployedContract[], contractName: string, contractPath: string })",
        "deployContract(wallet: WalletUnlocked, binaryPath: string, abiPath: string, storageSlotsPath: string, deployConfig: DeployContractOptions, contractPath: string, tomlContents: ForcToml)"
    ]
}