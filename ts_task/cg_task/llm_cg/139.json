{
    "AnonymousClass.%AM0$Injectable(providers)": [
        "AnonymousClass.%AM1$Directionality(unknown)"
    ],
    "AnonymousClass.%AM2$beforeEach(waitForAsync)": [
        "AnonymousClass.%AM3$configureTestingModule(imports,providers)",
        "AnonymousClass.%AM0$inject(OverlayContainer,FocusMonitor,Platform)"
    ],
    "AnonymousClass.%AM4$beforeEach(fakeAsync)": [
        "AnonymousClass.%AM5$createComponent(BasicTooltipDemo)",
        "AnonymousClass.%AM5$detectChanges()",
        "AnonymousClass.%AM6$tick()",
        "AnonymousClass.%AM7$query(By.css('button'))",
        "AnonymousClass.%AM8$inject(MatTooltip)"
    ],
    "AnonymousClass.%AM9$it(fakeAsync)": [
        "AnonymousClass.%AM10$assertTooltipInstance(MatTooltip, shouldExist)",
        "AnonymousClass.%AM11$MatTooltip.show()",
        "AnonymousClass.%AM6$tick()",
        "AnonymousClass.%AM11$_isTooltipVisible()",
        "AnonymousClass.%AM5$detectChanges()",
        "AnonymousClass.%AM12$finishCurrentTooltipAnimation(overlayContainerElement, true)",
        "AnonymousClass.%AM13$querySelector('.mat-mdc-tooltip')",
        "AnonymousClass.%AM11$hide(tooltipDelay)",
        "AnonymousClass.%AM11$_isTooltipVisible()",
        "AnonymousClass.%AM6$tick(tooltipDelay)",
        "AnonymousClass.%AM14$assertTooltipInstance(MatTooltip, shouldExist)",
        "AnonymousClass.%AM6$flush()"
    ],
    "AnonymousClass.%AM15$lifecycleTest(fakeAsync)": [
        "AnonymousClass.%AM20$MatTooltip.show()",
        "AnonymousClass.%AM6$tick()",
        "AnonymousClass.%AM5$detectChanges()",
        "AnonymousClass.%AM19$finishCurrentTooltipAnimation(overlayContainerElement, true)",
        "AnonymousClass.%AM20$MatTooltip._overlayRef.attach()",
        "AnonymousClass.%AM6$tick()",
        "AnonymousClass.%AM5$detectChanges()",
        "AnonymousClass.%AM10$assertTooltipInstance(MatTooltip, shouldExist)",
        "AnonymousClass.%AM20$show()",
        "AnonymousClass.%AM6$tick()",
        "AnonymousClass.%AM19$finishCurrentTooltipAnimation(overlayContainerElement, true)",
        "AnonymousClass.%AM10$assertTooltipInstance(MatTooltip, shouldExist)"
    ],
    "BasicTooltipDemo.%AM16$component(TestBed)": [
        "BasicTooltipDemo.%AM18$TestSetupTestBed()",
        "BasicTooltipDemo.%AM12$TestBed.detectChanges()",
        "BasicTooltipDemo.%AM21$waitForAsync(TestBed)",
        "BasicTooltipDemo.%AM3$configureTestingModule(imports,providers)",
        "BasicTooltipDemo.%AM0$providers(Directionality, OverlayContainer, FocusMonitor, Platform)",
        "BasicTooltipDemo.%AM4$fakeAsync(beforeEach)",
        "BasicTooltipDemo.%AM7$query",
        "BasicTooltipDemo.%AM10$assertTooltipInstance(MatTooltip, true)"
    ],
    "ScrollableTooltipDemo.%AM0$listeners(CdkScrollable)": [
        "ScrollableTooltipDemo.%AM1$scroll()"
    ],
    "static.%AM1$Test(classStatic)": [],
    "dynamic.%AM1$Test(TestMethods)": [
        "dynamic.%AM7$query",
        "dynamic.%AM18$TestMethods.detectChanges(createComponent)"
    ],
    "fake.%AM0$expectations(fakeAsync)": [
        "fake.%AM5$detection(ngx)",
        "fake.%AM7$querySelector(element, .containsClass)",
        "fake.%AM15$lifecycleTest(mockText)"
    ],
    "Method.%AM19$onAnimation(animation)": {
        "show": "Method.%AM20$animate(handler)"
    }
}