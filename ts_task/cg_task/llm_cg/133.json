{
    "FileSystemEngineHostBase.listSchematicNames(FileSystemEngineHostBase.collection, boolean)": [],
    "FileSystemEngineHostBase.registerOptionsTransform(%AMX$t)": [],
    "FileSystemEngineHostBase.registerContextTransform(%AMX$t)": [],
    "FileSystemEngineHostBase.createCollectionDescription(string, FileSystemEngineHostBase.collection)": [
        "FileSystemEngineHostBase.%AM0$_resolveCollectionPath(string, unknown)",
        "readJsonFile(string)",
        "FileSystemEngineHostBase.%AM1$_transformCollectionDescription(string, {} | {path}, unknown)",
        "FileSystemEngineHostBase.%AM2$InvalidCollectionJsonException(string, string)",
        "FileSystemEngineHostBase.%AM3$SchematicNameCollisionException(string)"
    ],
    "FileSystemEngineHostBase.createSchematicDescription(string, FileSystemEngineHostBase.collection)": [
        "FileSystemEngineHostBase.createCollectionDescription(string)",
        "FileSystemEngineHostBase.%AM2$SchematicMissingFactoryException(string)",
        "FileSystemEngineHostBase.%AM3$FactoryCannotBeResolvedException(string)",
        "FileSystemEngineHostBase.%AM1$_resolveReferenceString(string, string, FileSystemEngineHostBase.collection, {})",
        "readJsonFile(string)",
        "FileSystemEngineHostBase.%AM0$_transformSchematicDescription(string, FileSystemEngineHostBase.collection, {} | {path, factory, {JSON}})"
    ],
    "FileSystemEngineHostBase.createSourceFromUrl(Url)": [
        "normalize(string)",
        "resolve(string, string)",
        "FileSystemEngineHostBase.%AM4$HostCreateTree(%AM5$virtualFs.ScopedHost(new NodeJsSyncHost(), string))"
    ],
    "FileSystemEngineHostBase.transformOptions(FileSystemEngineHostBase.schematic, object, FileSystemEngineHostBase.context)": [
        "FileSystemEngineHostBase.%AM0$lastValueFrom(result)",
        "observableFrom(Promise<result>)"
    ],
    "FileSystemEngineHostBase.transformContext(FileSystemEngineHostBase.context)": [],
    "FileSystemEngineHostBase.getSchematicRuleFactory(FileSystemEngineHostBase.schematic, FileSystemEngineHostBase.collection)": [],
    "FileSystemEngineHostBase.registerTaskExecutor(TaskExecutorFactory, unknown)": [
        "observableFrom(Promise<factory.create(unknown))>"
    ],
    "FileSystemEngineHostBase.createTaskExecutor(string)": [],
    "FileSystemEngineHostBase.hasTaskExecutor(string)": []
}