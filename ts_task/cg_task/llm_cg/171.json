{
    "describe('MatTimepickerToggleHarness')(unknown)": [
        "beforeEach(() => { })(unknown)",
        "it('should be able to load timepicker toggle harnesses', async () => { })(unknown)",
        "it('should get the open state of a timepicker toggle', async () => { })(unknown)",
        "it('should get the disabled state of a toggle', async () => { })(unknown)"
    ],
    "beforeEach(() => { })(unknown)": [
        "TestBed.configureTestingModule({ providers: [provideNativeDateAdapter()], imports: [NoopAnimationsModule, TimepickerHarnessTest] })(unknown)",
        "TestBed.inject(DateAdapter)(unknown)",
        "adapter.setLocale('en-US')(unknown)",
        "TestBed.createComponent(TimepickerHarnessTest)(unknown)",
        "fixture.detectChanges()(unknown)",
        "TestbedHarnessEnvironment.documentRootLoader(fixture)(unknown)"
    ],
    "it('should be able to load timepicker toggle harnesses', async () => { })(unknown)": [
        "loader.getAllHarnesses(MatTimepickerToggleHarness)(unknown)",
        "expect(harnesses.length).toBe(2)(unknown)"
    ],
    "it('should get the open state of a timepicker toggle', async () => { })(unknown)": [
        "loader.getHarness(MatTimepickerToggleHarness.with({ selector: '#one' }))(unknown)",
        "toggle.isTimepickerOpen()(unknown)",
        "toggle.openTimepicker()(unknown)",
        "toggle.isTimepickerOpen()(unknown)"
    ],
    "it('should get the disabled state of a toggle', async () => { })(unknown)": [
        "loader.getHarness(MatTimepickerToggleHarness.with({ selector: '#one' }))(unknown)",
        "toggle.isDisabled()(unknown)",
        "fixture.componentInstance.disabled.set(true)(unknown)",
        "toggle.isDisabled()(unknown)"
    ]
}