{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 162,
  "functions": [],
  "classes": [
    {
      "name": "SplitResizerHandler",
      "type": "class",
      "start_line": 20,
      "end_line": 162,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 34,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "  init(\n    container: ElementRef<unknown>,\n    content: ElementRef<HTMLDivElement>,\n    resizer: ElementRef<HTMLDivElement>,\n    editor?: ElementRef<HTMLDivElement>,\n  ): void {\n    this.container = container;\n    this.content = content;\n    this.resizer = resizer;\n    this.editor = editor;\n    this.listenToResizeStart();\n    this.listenToResize();\n    this.listenToResizeEnd();\n    this.resizeContainersUsingKeyArrows();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "init(\n  container: ElementRef<unknown>,\n  content: ElementRef<HTMLDivElement>,\n  resizer: ElementRef<HTMLDivElement>,\n  editor?: ElementRef<HTMLDivElement>\n): void {\n  this.container = container;\n  this.content = content;",
              "successors": [
                {
                  "id": 3,
                  "label": "  this.resizer = resizer;\n  this.editor = editor;\n  this.listenToResizeStart();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  this.listenToResize();\n  this.listenToResizeEnd();",
                      "successors": [
                        {
                          "id": 7,
                          "label": "  this.resizeContainersUsingKeyArrows();\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "listenToResizeStart",
          "type": "function",
          "start_line": 49,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  private listenToResizeStart(): void {\n    fromEvent<MouseEvent>(this.resizer.nativeElement, 'mousedown')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        const contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n        this.resizeData.update((data) => {\n          data.initialDividerPosition = event.pageX;\n          data.isProgress = true;\n          data.initialContentContainerWidthInPercentage = contentWidthInPercentage;\n          data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\n          return {...data};\n        });\n      });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private listenToResizeStart(): void {\nfromEvent<MouseEvent>(this.resizer.nativeElement, 'mousedown')",
              "successors": [
                {
                  "id": 3,
                  "label": ".pipe(\nmap((event) => ({editor: this.editor, event})),",
                  "successors": [
                    {
                      "id": 5,
                      "label": "filter((eventAndEditor): eventAndEditor is MouseEventAndEditor => !!eventAndEditor.editor?.nativeElement,),\ntakeUntilDestroyed(this.destroyRef),",
                      "successors": [
                        {
                          "id": 7,
                          "label": ").subscribe(({event}) => {\nconst contentWidthInPercentage = this.getCurrentContainerWidth(this.content.nativeElement);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "const editorWidthInPercentage = this.getCurrentContainerWidth(this.editor!.nativeElement);\nthis.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "this.resizeData.update((data) => {\ndata.initialDividerPosition = event.pageX;",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "data.isProgress = true;\ndata.initialContentContainerWidthInPercentage = contentWidthInPercentage;",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "data.initialEditorContainerWidthInPercentage = editorWidthInPercentage;\nreturn {...data};",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "})\n}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "listenToResize",
          "type": "function",
          "start_line": 72,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  private listenToResize(): void {\n    fromEvent<MouseEvent>(this.document, 'mousemove')\n      .pipe(\n        map((event) => ({editor: this.editor, event})),\n        filter(\n          (eventAndEditor): eventAndEditor is MouseEventAndEditor =>\n            !!eventAndEditor.editor?.nativeElement,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(({event}) => {\n        if (this.resizeData().isProgress) {\n          const newDividerPosition = event.pageX;\n          const containerWidth = this.getParentContainerWidth();\n          const shift =\n            ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) *\n            100;\n          const newContentWidthInPercentage =\n            this.resizeData().initialContentContainerWidthInPercentage + shift;\n          const newEditorWidthInPercentage =\n            this.resizeData().initialEditorContainerWidthInPercentage - shift;\n          this.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);\n        }\n      });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private listenToResize(): void {\nfromEvent<MouseEvent>(this.document, 'mousemove')",
              "successors": [
                {
                  "id": 3,
                  "label": ".pipe(\nmap((event) => ({ editor: this.editor, event }))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "filter((eventAndEditor): eventAndEditor is MouseEventAndEditor => !!eventAndEditor.editor?.nativeElement,)\ntakeUntilDestroyed(this.destroyRef)",
                      "successors": [
                        {
                          "id": 7,
                          "label": ".subscribe(({event}) => {\nif (this.resizeData().isProgress) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "const newDividerPosition = event.pageX;\nconst containerWidth = this.getParentContainerWidth();",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "const shift = ((newDividerPosition - this.resizeData().initialDividerPosition) / containerWidth) * 100;\nconst newContentWidthInPercentage = this.resizeData().initialContentContainerWidthInPercentage + shift;",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "const newEditorWidthInPercentage = this.resizeData().initialEditorContainerWidthInPercentage - shift;\nthis.setWidthOfTheContainers(newContentWidthInPercentage, newEditorWidthInPercentage);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "listenToResizeEnd",
          "type": "function",
          "start_line": 97,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "  private listenToResizeEnd(): void {\n    fromEvent(this.document, 'mouseup')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        if (this.resizeData().isProgress) {\n          this.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;\n          this.resizeData.update((data) => {\n            data.isProgress = false;\n            data.initialDividerPosition = 0;\n            data.initialContentContainerWidthInPercentage = 0;\n            data.initialEditorContainerWidthInPercentage = 0;\n            return {...data};\n          });\n        }\n      });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private listenToResizeEnd(): void {\nfromEvent(this.document, 'mouseup')\n  .pipe(takeUntilDestroyed(this.destroyRef))\n  .subscribe(() => {",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.resizeData().isProgress) {\nthis.content.nativeElement.style.minWidth = `${MIN_WIDTH_OF_CONTENT_IN_PX}px`;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.resizeData.update((data) => {\ndata.isProgress = false;\ndata.initialDividerPosition = 0;\ndata.initialContentContainerWidthInPercentage = 0;\ndata.initialEditorContainerWidthInPercentage = 0;\nreturn {...data};",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}\n}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "});\n});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "resizeContainersUsingKeyArrows",
          "type": "function",
          "start_line": 114,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "  private resizeContainersUsingKeyArrows(): void {\n    combineLatest([\n      this.focusMonitor.monitor(this.resizer),\n      fromEvent<KeyboardEvent>(this.document, 'keydown'),\n    ])\n      .pipe(\n        filter(\n          ([origin, keyEvent]) =>\n            !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight'),\n        ),\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.focusMonitor.stopMonitoring(this.resizer)),\n      )\n      .subscribe(([_, keyEvent]) => {\n        const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\n        const contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);\n        const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\n        this.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);\n      });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private resizeContainersUsingKeyArrows(): void {\ncombineLatest([this.focusMonitor.monitor(this.resizer), fromEvent<KeyboardEvent>(this.document, 'keydown')])",
              "successors": [
                {
                  "id": 3,
                  "label": ".pipe(filter(([origin, keyEvent]) => !!origin && (keyEvent.key === 'ArrowLeft' || keyEvent.key === 'ArrowRight')), takeUntilDestroyed(this.destroyRef), finalize(() => this.focusMonitor.stopMonitoring(this.resizer)))\n.subscribe(([_, keyEvent]) => {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const shift = keyEvent.key === 'ArrowLeft' ? -1 : 1;\nconst contentWidth = this.getCurrentContainerWidth(this.content.nativeElement);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "const editorWidth = this.getCurrentContainerWidth(this.editor!.nativeElement);\nthis.setWidthOfTheContainers(contentWidth + shift, editorWidth - shift);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "});\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setWidthOfTheContainers",
          "type": "function",
          "start_line": 134,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": "  private setWidthOfTheContainers(\n    newContentWidthInPercentage: number,\n    newEditorWidthInPercentage: number,\n  ) {\n    const containerWidth = this.container.nativeElement.offsetWidth;\n    const newContentWidthInPx = (containerWidth * newContentWidthInPercentage) / 100;\n    if (\n      newContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX &&\n      newContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX &&\n      this.editor\n    ) {\n      this.content.nativeElement.style.width = `${newContentWidthInPercentage}%`;\n      this.editor.nativeElement.style.width = `${newEditorWidthInPercentage}%`;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private setWidthOfTheContainers(\nnewContentWidthInPercentage: number,\nnewEditorWidthInPercentage: number) {",
              "successors": [
                {
                  "id": 2,
                  "label": "const containerWidth = this.container.nativeElement.offsetWidth;\nconst newContentWidthInPx = (containerWidth * newContentWidthInPercentage) / 100;\nif (\nnewContentWidthInPx > MIN_WIDTH_OF_CONTENT_IN_PX &&\nnewContentWidthInPx < MAX_WIDTH_OF_CONTENT_IN_PX &&\nthis.editor\n) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "this.content.nativeElement.style.width = `${newContentWidthInPercentage}%`;\nthis.editor.nativeElement.style.width = `${newEditorWidthInPercentage}%`;\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCurrentContainerWidth",
          "type": "function",
          "start_line": 149,
          "end_line": 154,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getCurrentContainerWidth(element: HTMLDivElement): number {\n    const savedWidth = Number(element.style.width.replace('%', ''));\n    return savedWidth > 0\n      ? savedWidth\n      : (element.offsetWidth / this.getParentContainerWidth()) * 100;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private getCurrentContainerWidth(element: HTMLDivElement): number {\n  const savedWidth = Number(element.style.width.replace('%', ''));",
              "successors": [
                {
                  "id": 3,
                  "label": "  return savedWidth > 0",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    ? savedWidth",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "    : (element.offsetWidth / this.getParentContainerWidth()) * 100;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getParentContainerWidth",
          "type": "function",
          "start_line": 155,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getParentContainerWidth(): number {\n    return (\n      this.resizer.nativeElement.offsetWidth +\n      this.content.nativeElement.offsetWidth +\n      this.editor!.nativeElement.offsetWidth\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private getParentContainerWidth(): number {\n  return (",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.resizer.nativeElement.offsetWidth +\n    this.content.nativeElement.offsetWidth +",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.editor!.nativeElement.offsetWidth\n  );",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class SplitResizerHandler {\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly document = inject(DOCUMENT);\n  private readonly focusMonitor = inject(FocusMonitor);\n  private container!: ElementRef<any>;\n  private content!: ElementRef<HTMLDivElement>;\n  private editor: ElementRef<HTMLDivElement> | undefined;\n  private resizer!: ElementRef<HTMLDivElement>;\n  private readonly resizeData = signal<ResizingData>({\n    initialContentContainerWidthInPercentage: 0,\n    initialDividerPosition: 0,\n    initialEditorContainerWidthInPercentage: 0,\n    isProgress: false,\n  });\n  }\n  }\n  }\n  }\n  // When resizer bar is focused, resize containers when user presses key arrows.\n  }\n  }\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class SplitResizerHandler {\n  private readonly destroyRef = inject(DestroyRef);",
          "successors": [
            {
              "id": 3,
              "label": "  private readonly document = inject(DOCUMENT);\n  private readonly focusMonitor = inject(FocusMonitor);",
              "successors": [
                {
                  "id": 5,
                  "label": "  private container!: ElementRef<any>;\n  private content!: ElementRef<HTMLDivElement>;",
                  "successors": [
                    {
                      "id": 7,
                      "label": "  private editor: ElementRef<HTMLDivElement> | undefined;\n  private resizer!: ElementRef<HTMLDivElement>;",
                      "successors": [
                        {
                          "id": 9,
                          "label": "  private readonly resizeData = signal<ResizingData>({\n    initialContentContainerWidthInPercentage: 0,\n    initialDividerPosition: 0,\n    initialEditorContainerWidthInPercentage: 0,\n    isProgress: false,\n  });\n}",
                          "successors": [
                            {
                              "id": 11,
                              "label": "// When resizer bar is focused, resize containers when user presses key arrows.",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import {FocusMonitor} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\nimport {DestroyRef, ElementRef, Injectable, inject, signal} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {fromEvent, combineLatest} from 'rxjs';\nimport {map, filter, finalize} from 'rxjs/operators';\ninterface ResizingData {\n  isProgress: boolean;\n  initialContentContainerWidthInPercentage: number;\n  initialDividerPosition: number;\n  initialEditorContainerWidthInPercentage: number;\n}\ninterface MouseEventAndEditor {\n  event: MouseEvent;\n  editor: ElementRef<HTMLDivElement>;\n}\nconst MIN_WIDTH_OF_CONTENT_IN_PX = 300;\nconst MAX_WIDTH_OF_CONTENT_IN_PX = 800;\n@Injectable()\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import {FocusMonitor} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';",
      "successors": [
        {
          "id": 3,
          "label": "import {DestroyRef, ElementRef, Injectable, inject, signal} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';",
          "successors": [
            {
              "id": 5,
              "label": "import {fromEvent, combineLatest} from 'rxjs';\nimport {map, filter, finalize} from 'rxjs/operators';",
              "successors": [
                {
                  "id": 7,
                  "label": "interface ResizingData {\n  isProgress: boolean;\n  initialContentContainerWidthInPercentage: number;\n  initialDividerPosition: number;\n  initialEditorContainerWidthInPercentage: number;\n}\ninterface MouseEventAndEditor {\n  event: MouseEvent;\n  editor: ElementRef<HTMLDivElement>;\n}",
                  "successors": [
                    {
                      "id": 9,
                      "label": "const MIN_WIDTH_OF_CONTENT_IN_PX = 300;\nconst MAX_WIDTH_OF_CONTENT_IN_PX = 800;",
                      "successors": [
                        {
                          "id": 11,
                          "label": "@Injectable()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}