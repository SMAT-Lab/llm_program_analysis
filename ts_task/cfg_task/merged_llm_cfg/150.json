{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [],
  "classes": [
    {
      "name": "None",
      "type": "class",
      "start_line": 6,
      "end_line": 14,
      "functions": [
        {
          "name": "setSubscript",
          "type": "function",
          "start_line": 9,
          "end_line": 9,
          "functions": [],
          "classes": [],
          "simplified_code": "      setSubscript: () => ReturnType,",
          "blocks": [
            {
              "id": 1,
              "label": "setSubscript: () => ReturnType",
              "successors": []
            }
          ]
        },
        {
          "name": "toggleSubscript",
          "type": "function",
          "start_line": 10,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "      toggleSubscript: () => ReturnType,",
          "blocks": [
            {
              "id": 1,
              "label": "toggleSubscript: () => ReturnType,",
              "successors": []
            }
          ]
        },
        {
          "name": "unsetSubscript",
          "type": "function",
          "start_line": 11,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "      unsetSubscript: () => ReturnType,",
          "blocks": [
            {
              "id": 1,
              "label": "return getArguments().map(arg => field(arg, __DIFFERENCE_MAIN))",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "declare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    subscript: {\n      setSubscript: () => ReturnType,\n      toggleSubscript: () => ReturnType,\n      unsetSubscript: () => ReturnType,\n    }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "declare module '@tiptap/core' {",
          "successors": [
            {
              "id": 2,
              "label": "  interface Commands<ReturnType> {",
              "successors": [
                {
                  "id": 3,
                  "label": "    subscript: {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "      setSubscript: () => ReturnType,",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "      toggleSubscript: () => ReturnType,",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "      unsetSubscript: () => ReturnType,",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "  }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Subscript",
      "type": "class",
      "start_line": 15,
      "end_line": 61,
      "functions": [
        {
          "name": "addOptions",
          "type": "function",
          "start_line": 17,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },",
          "blocks": [
            {
              "id": 1,
              "label": "addOptions() {\n    return { HTMLAttributes: {}, };",
              "successors": []
            }
          ]
        },
        {
          "name": "parseHTML",
          "type": "function",
          "start_line": 22,
          "end_line": 39,
          "functions": [
            {
              "name": "getAttrs",
              "type": "function",
              "start_line": 29,
              "end_line": 36,
              "functions": [],
              "classes": [],
              "simplified_code": "        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t sub.\n          if (value !== 'sub') {\n            return false\n          }\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },",
              "blocks": [
                {
                  "id": 1,
                  "label": "getAttrs(value) {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "  if (value !== 'sub') {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "    return false",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "  }\n  return null",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  parseHTML() {\n    return [\n      {\n        tag: 'sub',\n      },\n      {\n        style: 'vertical-align',\n        },\n      } as StyleParseRule,\n    ]\n  },",
          "blocks": [
            {
              "id": 1,
              "label": "parseHTML() {\nreturn [",
              "successors": [
                {
                  "id": 3,
                  "label": "{ tag: 'sub', },\n{ style: 'vertical-align', },",
                  "successors": [
                    {
                      "id": 5,
                      "label": "} as StyleParseRule,\n]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "renderHTML",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  renderHTML({ HTMLAttributes }) {\n    return ['sub', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },",
          "blocks": [
            {
              "id": 1,
              "label": "renderHTML({ HTMLAttributes }) {\n    return ['sub', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]",
              "successors": []
            }
          ]
        },
        {
          "name": "addCommands",
          "type": "function",
          "start_line": 43,
          "end_line": 55,
          "functions": [
            {
              "name": "setSubscript",
              "type": "function",
              "start_line": 45,
              "end_line": 47,
              "functions": [],
              "classes": [],
              "simplified_code": "      setSubscript: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },",
              "blocks": [
                {
                  "id": 1,
                  "label": "setSubscript: () => ({ commands }) => {\nreturn commands.setMark(this.name)",
                  "successors": []
                }
              ]
            },
            {
              "name": "toggleSubscript",
              "type": "function",
              "start_line": 48,
              "end_line": 50,
              "functions": [],
              "classes": [],
              "simplified_code": "      toggleSubscript: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },",
              "blocks": [
                {
                  "id": 1,
                  "label": "toggleSubscript: () => ({ commands }) => {\nreturn commands.toggleMark(this.name)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "unsetSubscript",
              "type": "function",
              "start_line": 51,
              "end_line": 53,
              "functions": [],
              "classes": [],
              "simplified_code": "      unsetSubscript: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },",
              "blocks": [
                {
                  "id": 1,
                  "label": "unsetSubscript: () => ({ commands }) => {\nreturn commands.unsetMark(this.name)",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  addCommands() {\n    return {\n      },\n      },\n      },\n    }\n  },",
          "blocks": [
            {
              "id": 1,
              "label": "addCommands() {\nreturn {",
              "successors": [
                {
                  "id": 3,
                  "label": "},\n},",
                  "successors": [
                    {
                      "id": 5,
                      "label": "},\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "addKeyboardShortcuts",
          "type": "function",
          "start_line": 56,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "  addKeyboardShortcuts() {\n    return {\n      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }\n  },",
          "blocks": [
            {
              "id": 1,
              "label": "addKeyboardShortcuts() {\n    return {",
              "successors": [
                {
                  "id": 3,
                  "label": "      'Mod-,': () => this.editor.commands.toggleSubscript(),\n    }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export const Subscript = Mark.create<SubscriptExtensionOptions>({\n  name: 'subscript',\n  },\n  },\n  },\n  },\n  },\n})",
      "blocks": [
        {
          "id": 1,
          "label": "export const Subscript = Mark.create<SubscriptExtensionOptions>({\n}",
          "successors": [
            {
              "id": 3,
              "label": "},\n},",
              "successors": [
                {
                  "id": 5,
                  "label": "},\n},",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import { Mark, mergeAttributes } from '@tiptap/core'\nimport type { StyleParseRule } from '@tiptap/pm/model'\nexport interface SubscriptExtensionOptions {\n  HTMLAttributes: Object,\n}\n}\n})",
  "blocks": [
    {
      "id": 1,
      "label": "import { Mark, mergeAttributes } from '@tiptap/core'\nimport type { StyleParseRule } from '@tiptap/pm/model'",
      "successors": [
        {
          "id": 3,
          "label": "export interface SubscriptExtensionOptions {\nHTMLAttributes: Object,",
          "successors": [
            {
              "id": 5,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}