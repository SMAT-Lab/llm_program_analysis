{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 93,
  "functions": [],
  "classes": [
    {
      "name": "EntryAbility",
      "type": "class",
      "start_line": 43,
      "end_line": 93,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 51,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want: Want, launchParam): void {\n    Log.info(this.TAG, 'Application onCreate');\n    // Ability is creating, initialize resources for this ability\n    GlobalContext.getContext().setObject('appContext', this.context);\n    userFileModel.onCreate(this.context);\n    mFilterMediaType = MediaConstants.SELECT_TYPE_ALL;\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);\n    Log.info(this.TAG, 'Application onCreate end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want: Want, launchParam): void {\n    Log.info(this.TAG, 'Application onCreate');\n    GlobalContext.getContext().setObject('appContext', this.context);\n    userFileModel.onCreate(this.context);\n    mFilterMediaType = MediaConstants.SELECT_TYPE_ALL;\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);\n    Log.info(this.TAG, 'Application onCreate end');",
              "successors": []
            }
          ]
        },
        {
          "name": "onNewWant",
          "type": "function",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "  onNewWant(want: Want): void {\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onNewWant(want: Want): void {\n    AppStorage.SetOrCreate<number>(Constants.ENTRY_FROM_HAP, Constants.ENTRY_FROM_NONE);",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onDestroy",
          "type": "function",
          "start_line": 65,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDestroy(): void {\n    // Ability is creating, release resources for this ability\n    Log.info(this.TAG, 'Application onDestroy');\n    AppStorage.Delete(Constants.ENTRY_FROM_HAP);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDestroy(): void {\n    // Ability is creating, release resources for this ability\n    Log.info(this.TAG, 'Application onDestroy');\n    AppStorage.Delete(Constants.ENTRY_FROM_HAP);",
              "successors": []
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 71,
          "end_line": 83,
          "functions": [
            {
              "name": "then",
              "type": "function",
              "start_line": 75,
              "end_line": 82,
              "functions": [
                {
                  "name": "then",
                  "type": "function",
                  "start_line": 77,
                  "end_line": 81,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      screenManager.initializationSize(win).then<void, void>((): void => {\n        windowStage.setUIContent(this.context, pagePath, null);\n      }).catch<void>((): void => {\n        Log.error(this.TAG, 'get device screen info failed.');\n      });",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "screenManager.initializationSize(win).then<void, void>((): void => {\nwindowStage.setUIContent(this.context, pagePath, null);",
                      "successors": [
                        {
                          "id": 3,
                          "label": "}).catch<void>((): void => {\nLog.error(this.TAG, 'get device screen info failed.');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "catch",
                  "type": "function",
                  "start_line": 79,
                  "end_line": 80,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      }).catch<void>((): void => {\n        Log.error(this.TAG, 'get device screen info failed.');",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "}).catch<void>((): void => {\n    Log.error(this.TAG, 'get device screen info failed.');",
                      "successors": []
                    }
                  ]
                }
              ],
              "classes": [],
              "simplified_code": "    windowStage.getMainWindow().then((win: window.Window): void => {\n      AppStorage.SetOrCreate<window.Window>(Constants.MAIN_WINDOW, win);\n      });\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "windowStage.getMainWindow().then((win: window.Window): void => {\n    AppStorage.SetOrCreate<window.Window>(Constants.MAIN_WINDOW, win);",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage): void {\n    // Main window is created, set main page for this ability\n    Log.info(this.TAG, 'Application onWindowStageCreate');\n    GlobalContext.getContext().setObject('photosWindowStage', windowStage);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage): void {\n    Log.info(this.TAG, 'Application onWindowStageCreate');",
              "successors": [
                {
                  "id": 3,
                  "label": "    GlobalContext.getContext().setObject('photosWindowStage', windowStage);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageDestroy",
          "type": "function",
          "start_line": 85,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageDestroy(): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageDestroy(): void {\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "onForeground",
          "type": "function",
          "start_line": 88,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "  onForeground(): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onForeground(): void {\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "onBackground",
          "type": "function",
          "start_line": 91,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "  onBackground(): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onBackground(): void {",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default class EntryAbility extends UIAbility {\n  private TAG: string = 'EntryAbility';\n  private static readonly RETRY_MAX_TIMES = 100;\n  private static readonly ACTION_URI_SINGLE_SELECT = 'singleselect';\n  private static readonly ACTION_URI_MULTIPLE_SELECT = 'multipleselect';\n  private static readonly ACTION_URI_PHOTO_DETAIL = 'photodetail';\n  private browserDataSource: GroupItemDataSource = new GroupItemDataSource();\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default class EntryAbility extends UIAbility {\nprivate TAG: string = 'EntryAbility';",
          "successors": [
            {
              "id": 3,
              "label": "private static readonly RETRY_MAX_TIMES = 100;\nprivate static readonly ACTION_URI_SINGLE_SELECT = 'singleselect';",
              "successors": [
                {
                  "id": 5,
                  "label": "private static readonly ACTION_URI_MULTIPLE_SELECT = 'multipleselect';\nprivate static readonly ACTION_URI_PHOTO_DETAIL = 'photodetail';",
                  "successors": [
                    {
                      "id": 7,
                      "label": "private browserDataSource: GroupItemDataSource = new GroupItemDataSource();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport window from '@ohos.window';\nimport deviceInfo from '@ohos.deviceInfo';\nimport Ability from '@ohos.app.ability.UIAbility';\nimport wantConstant from '@ohos.ability.wantConstant';\nimport { Log } from '../utils/Log';\nimport { screenManager } from '../common/ScreenManager';\nimport { Constants } from '../constants/Constants';\nimport { broadcastManager } from '../common/BroadcastManager';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { userFileModel } from '../base/UserFileModel';\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { GroupItemDataSource } from '../common/GroupItemDataSource';\nimport atManager from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from '../common/GlobalContext';\nimport Want from '@ohos.app.ability.Want';\n\nlet mCallerUid: number = 0;\nlet mMaxSelectCount: number = 0;\nlet mFilterMediaType: number = MediaConstants.SELECT_TYPE_ALL;\nlet appBroadcast = broadcastManager.getBroadcast();\nlet pagePath: string = 'pages/Index';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import UIAbility from '@ohos.app.ability.UIAbility';\nimport window from '@ohos.window';",
      "successors": [
        {
          "id": 3,
          "label": "import deviceInfo from '@ohos.deviceInfo';\nimport Ability from '@ohos.app.ability.UIAbility';",
          "successors": [
            {
              "id": 5,
              "label": "import wantConstant from '@ohos.ability.wantConstant';\nimport { Log } from '../utils/Log';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { screenManager } from '../common/ScreenManager';\nimport { Constants } from '../constants/Constants';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import { broadcastManager } from '../common/BroadcastManager';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';",
                      "successors": [
                        {
                          "id": 11,
                          "label": "import { userFileModel } from '../base/UserFileModel';\nimport router from '@system.router';",
                          "successors": [
                            {
                              "id": 13,
                              "label": "import { RouterOptions } from '@system.router';\nimport { GroupItemDataSource } from '../common/GroupItemDataSource';",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "import atManager from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "import { MediaConstants } from '../constants/MediaConstants';\nimport { getResourceString } from '../utils/ResourceUtils';",
                                      "successors": [
                                        {
                                          "id": 19,
                                          "label": "import { GlobalContext } from '../common/GlobalContext';\nimport Want from '@ohos.app.ability.Want';",
                                          "successors": [
                                            {
                                              "id": 21,
                                              "label": "let mCallerUid: number = 0;\nlet mMaxSelectCount: number = 0;",
                                              "successors": [
                                                {
                                                  "id": 23,
                                                  "label": "let mFilterMediaType: number = MediaConstants.SELECT_TYPE_ALL;\nlet appBroadcast = broadcastManager.getBroadcast();",
                                                  "successors": [
                                                    {
                                                      "id": 25,
                                                      "label": "let pagePath: string = 'pages/Index';",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}