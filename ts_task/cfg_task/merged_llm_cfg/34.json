{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 83,
  "functions": [],
  "classes": [
    {
      "name": "Broadcast",
      "type": "class",
      "start_line": 18,
      "end_line": 83,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 21,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor() {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "on",
          "type": "function",
          "start_line": 24,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  public on(event: string, callback: CallbackType): void {\n    if (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {\n      this.callBackArray.set(event, []);\n    }\n    this.callBackArray.get(event).push(callback);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public on(event: string, callback: CallbackType): void {\nif (this.callBackArray.get(event) === null || this.callBackArray.get(event) === undefined) {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.callBackArray.set(event, []);\nthis.callBackArray.get(event).push(callback);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\nthis.callBackArray.get(event).push(callback);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "off",
          "type": "function",
          "start_line": 31,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  public off(event: string | null, callback: CallbackType | null): void {\n    if (event == null) {\n      this.callBackArray.clear();\n    }\n\n    const cbs: CallbackType[] = this.callBackArray.get(event);\n    if (!Boolean<Function[]>(cbs).valueOf()) {\n      return;\n    }\n    if (callback == null) {\n      this.callBackArray.set(event, null);\n    }\n    let cb;\n    let l = cbs.length;\n    for (let i = 0; i < l; i++) {\n      cb = cbs[i];\n      if (cb === callback || cb.fn === callback) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public off(event: string | null, callback: CallbackType | null): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (event == null) {\nthis.callBackArray.clear();",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "const cbs: CallbackType[] = this.callBackArray.get(event);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (!Boolean<Function[]>(cbs).valueOf()) {\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "if (callback == null) {\nthis.callBackArray.set(event, null);",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "let cb;\nlet l = cbs.length;",
                      "successors": [
                        {
                          "id": 11,
                          "label": "for (let i = 0; i < l; i++) {",
                          "successors": [
                            {
                              "id": 12,
                              "label": "cb = cbs[i];\nif (cb === callback || cb.fn === callback) {",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "cbs.splice(i, 1);\nbreak;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "emit",
          "type": "function",
          "start_line": 54,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "  public emit(event: string, args: Object[]): void {\n    let _self = this;\n    if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.callBackArray.get(event).length; i++) {\n      cbs.push(this.callBackArray.get(event)[i])\n    }\n\n    if (cbs != null) {\n      let l = cbs.length;\n      for (let i = 0; i < l; i++) {\n        try {\n          cbs[i].apply(_self, args);\n        } catch (e) {\n          new Error(e);\n        }\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public emit(event: string, args: Object[]): void {\n    let _self = this;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!Boolean<Function[]>(this.callBackArray.get(event)).valueOf()) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let cbs: CallbackType[] = [];",
                  "successors": [
                    {
                      "id": 5,
                      "label": "for (let i = 0; i < this.callBackArray.get(event).length; i++) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "cbs.push(this.callBackArray.get(event)[i])",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "if (cbs != null) {\nlet l = cbs.length;",
                      "successors": [
                        {
                          "id": 9,
                          "label": "for (let i = 0; i < l; i++) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "try {\ncbs[i].apply(_self, args);",
                              "successors": []
                            },
                            {
                              "id": 12,
                              "label": "catch (e) {\nnew Error(e);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "release",
          "type": "function",
          "start_line": 77,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "  public release(): void {\n    this.callBackArray.forEach((array: Object[]): void => {\n      array.length = 0;\n    });\n    this.callBackArray.clear();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public release(): void {\nthis.callBackArray.forEach((array: Object[]): void => {",
              "successors": [
                {
                  "id": 3,
                  "label": "array.length = 0;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class Broadcast {\n  private callBackArray: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class Broadcast {\n  private callBackArray: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype CallbackType = Function;\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "type CallbackType = Function;",
      "successors": []
    }
  ]
}