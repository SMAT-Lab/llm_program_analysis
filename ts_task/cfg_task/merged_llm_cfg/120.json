{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 142,
  "functions": [],
  "classes": [
    {
      "name": "MigrationAbility",
      "type": "class",
      "start_line": 30,
      "end_line": 142,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 34,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n\n    // 获取分布式数据\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      // 将want保存的数据取出恢复\n      let continueInput = '';\n      if (want.parameters !== undefined) {\n        continueInput = JSON.stringify(want.parameters.data);\n        hilog.info(DOMAIN_NUMBER, TAG, `continue input ${continueInput}`);\n      }\n      // 将数据显示当前页面\n      this.context.restoreWindowStage(this.storage);\n    }\n    // 调用原因为迁移时，设置状态为可迁移，应对冷启动情况\n    this.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n      hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');",
              "successors": [
                {
                  "id": 2,
                  "label": "if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\nlet continueInput = '';",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (want.parameters !== undefined) {\ncontinueInput = JSON.stringify(want.parameters.data);\n        hilog.info(DOMAIN_NUMBER, TAG, `continue input ${continueInput}`);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}\nthis.context.restoreWindowStage(this.storage);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "}\nthis.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n    hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n  });",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 54,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityFirst', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n    // Main window is created, set main page for this ability\n    let context: Context = this.context;\n    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\n    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗\n    atManager.requestPermissionsFromUser(context, permissions).then((data: PermissionRequestResult) => {\n      let grantStatus: Array<number> = data.authResults;\n      let length: number = grantStatus.length;\n      for (let i = 0; i < length; i++) {\n        if (grantStatus[i] === 0) {\n          // 用户授权，可以继续访问目标操作\n        } else {\n          // 用户拒绝授权，提示用户必须授权才能访问当前页面的功能，并引导用户到系统设置中打开相应的权限\n          return;\n        }\n      }\n      // 授权成功\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage: window.WindowStage): void {\nhilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');",
              "successors": [
                {
                  "id": 3,
                  "label": "windowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityFirst', (err, data) => {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (err.code) {\nhilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "let context: Context = this.context;\nlet atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();",
                  "successors": [
                    {
                      "id": 10,
                      "label": "atManager.requestPermissionsFromUser(context, permissions).then((data: PermissionRequestResult) => {\nlet grantStatus: Array<number> = data.authResults; let length: number = grantStatus.length;",
                      "successors": [
                        {
                          "id": 12,
                          "label": "for (let i = 0; i < length; i++) {",
                          "successors": [
                            {
                              "id": 13,
                              "label": "if (grantStatus[i] === 0) {",
                              "successors": []
                            },
                            {
                              "id": 14,
                              "label": "} else {\nreturn;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "}).catch((err: BusinessError) => {\nhilog.info(DOMAIN_NUMBER, TAG, `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onContinue",
          "type": "function",
          "start_line": 87,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "  onContinue(wantParam: Record<string, Object>): AbilityConstant.OnContinueResult {\n    let version = wantParam.version;\n    let targetDevice = wantParam.targetDevice;\n    hilog.info(DOMAIN_NUMBER, TAG, `onContinue version = ${version}, targetDevice: ${targetDevice}`); // 准备迁移数据\n\n    // 获取源端版本号\n    let versionSrc: number = -1; // 请填充具体获取版本号的代码\n\n    // 兼容性校验\n    if (version !== versionSrc) {\n      // 在兼容性校验不通过时返回MISMATCH\n      return AbilityConstant.OnContinueResult.MISMATCH;\n    }\n\n    // 将要迁移的数据保存在wantParam的自定义字段（例如data）中\n    const continueInput = '迁移的数据';\n    wantParam['data'] = continueInput;\n\n    //设置不迁移页面栈&迁移后源端不退出\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_PAGE_STACK_KEY] = false;\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_SOURCE_EXIT_KEY] = false;\n\n    return AbilityConstant.OnContinueResult.AGREE;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onContinue(wantParam: Record<string, Object>): AbilityConstant.OnContinueResult {\nlet version = wantParam.version;\nlet targetDevice = wantParam.targetDevice;\nhilog.info(DOMAIN_NUMBER, TAG, `onContinue version = ${version}, targetDevice: ${targetDevice}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "let versionSrc: number = -1;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (version !== versionSrc) {\nreturn AbilityConstant.OnContinueResult.MISMATCH;",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "}\nconst continueInput = '迁移的数据';\nwantParam['data'] = continueInput;\nwantParam[wantConstant.Params.SUPPORT_CONTINUE_PAGE_STACK_KEY] = false;\nwantParam[wantConstant.Params.SUPPORT_CONTINUE_SOURCE_EXIT_KEY] = false;\nreturn AbilityConstant.OnContinueResult.AGREE;\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onNewWant",
          "type": "function",
          "start_line": 112,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": "  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onNewWant');\n\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      // get user data from want params\n      let continueInput = '';\n      if (want.parameters !== undefined) {\n        continueInput = JSON.stringify(want.parameters.data);\n        hilog.info(DOMAIN_NUMBER, TAG, `continue input ${JSON.stringify(continueInput)}`);\n      }\n      this.context.restoreWindowStage(this.storage);\n    }\n\n    // 调用原因为迁移时，设置状态为可迁移，应对热启动情况\n    if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n      this.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n        hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n      });\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onNewWant');\nif (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    let continueInput = '';\nif (want.parameters !== undefined) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    continueInput = JSON.stringify(want.parameters.data);\n    hilog.info(DOMAIN_NUMBER, TAG, `continue input ${JSON.stringify(continueInput)}`);\nthis.context.restoreWindowStage(this.storage);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (launchParam.launchReason === AbilityConstant.LaunchReason.CONTINUATION) {\n    this.context.setMissionContinueState(AbilityConstant.ContinueState.ACTIVE, (result) => {\n        hilog.info(DOMAIN_NUMBER, TAG, `setMissionContinueState ACTIVE result: ${JSON.stringify(result)}`);\n    });",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageRestore",
          "type": "function",
          "start_line": 133,
          "end_line": 141,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageRestore(windowStage: window.WindowStage): void {\n    // 若不需要自动迁移页面栈信息，则需要在此处设置应用迁移后进入的页面\n    windowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityThird', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageRestore(windowStage: window.WindowStage): void {\nwindowStage.loadContent('pages/page_migrationability/Page_MigrationAbilityThird', (err, data) => {",
              "successors": [
                {
                  "id": 3,
                  "label": "if (err.code) {\nhilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default class MigrationAbility extends UIAbility {\n  storage: LocalStorage = new LocalStorage();\n\n  // 对端恢复\n  }\n\n  }\n\n  // 源端保存\n  }\n\n  }\n\n  }\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export default class MigrationAbility extends UIAbility {\n    storage: LocalStorage = new LocalStorage();",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport wantConstant from '@ohos.app.ability.wantConstant';\nimport type window from '@ohos.window';\nimport type { Context, PermissionRequestResult, Permissions } from '@ohos.abilityAccessCtrl';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type { BusinessError } from '@ohos.base';\n\nconst permissions: Array<Permissions> = ['ohos.permission.DISTRIBUTED_DATASYNC'];\nconst TAG: string = '[MigrationAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n};",
  "blocks": [
    {
      "id": 1,
      "label": "import AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport wantConstant from '@ohos.app.ability.wantConstant';\nimport type window from '@ohos.window';\nimport type { Context, PermissionRequestResult, Permissions } from '@ohos.abilityAccessCtrl';\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport type { BusinessError } from '@ohos.base';\n\nconst permissions: Array<Permissions> = ['ohos.permission.DISTRIBUTED_DATASYNC'];\nconst TAG: string = '[MigrationAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;",
      "successors": []
    }
  ]
}