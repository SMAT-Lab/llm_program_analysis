{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 808,
  "functions": [
    {
      "name": "describe",
      "type": "function",
      "start_line": 17,
      "end_line": 807,
      "functions": [
        {
          "name": "describe",
          "type": "function",
          "start_line": 18,
          "end_line": 73,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 19,
              "end_line": 72,
              "functions": [],
              "classes": [
                {
                  "name": "IncrementComp",
                  "type": "class",
                  "start_line": 26,
                  "end_line": 28,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class IncrementComp {\n        counter = _counter++;\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class IncrementComp {\n  counter = _counter++;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 36,
                  "end_line": 59,
                  "functions": [
                    {
                      "name": "constructor",
                      "type": "function",
                      "start_line": 44,
                      "end_line": 44,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        constructor(public changeDetector: ChangeDetectorRef) {}",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "constructor(public changeDetector: ChangeDetectorRef) {}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "name": "ngAfterViewInit",
                      "type": "function",
                      "start_line": 45,
                      "end_line": 58,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        ngAfterViewInit() {\n          // insert at the front\n          this.view1 = this.container.createEmbeddedView(this.simple); // \"created0\"\n          // insert at the front again\n          this.view0 = this.container.createEmbeddedView(this.simple, {}, 0); // \"created1\"\n          // insert at the end\n          this.view3 = this.container.createEmbeddedView(this.simple); // \"created2\"\n          // insert in the middle\n          this.view2 = this.container.createEmbeddedView(this.simple, {}, 2); // \"created3\"\n          // We need to run change detection here to avoid\n          // ExpressionChangedAfterItHasBeenCheckedError because of the value updating in\n          // increment-comp\n          this.changeDetector.detectChanges();\n        }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "ngAfterViewInit() {\n  // insert at the front\n  this.view1 = this.container.createEmbeddedView(this.simple); // \"created0\"",
                          "successors": [
                            {
                              "id": 3,
                              "label": "  // insert at the front again\n  this.view0 = this.container.createEmbeddedView(this.simple, {}, 0); // \"created1\"\n  // insert at the end\n  this.view3 = this.container.createEmbeddedView(this.simple); // \"created2\"",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "  // insert in the middle\n  this.view2 = this.container.createEmbeddedView(this.simple, {}, 2); // \"created3\"\n  // We need to run change detection here to avoid\n  // ExpressionChangedAfterItHasBeenCheckedError because of the value updating in\n  // increment-comp\n  this.changeDetector.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      class App {\n        @ViewChild('container', {read: ViewContainerRef, static: true})\n        container: ViewContainerRef = null!;\n        @ViewChild('simple', {read: TemplateRef, static: true}) simple: TemplateRef<any> = null!;\n        view0: EmbeddedViewRef<any> = null!;\n        view1: EmbeddedViewRef<any> = null!;\n        view2: EmbeddedViewRef<any> = null!;\n        view3: EmbeddedViewRef<any> = null!;\n        constructor(public changeDetector: ChangeDetectorRef) {}\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class App {\n@ViewChild('container', {read: ViewContainerRef, static: true})\ncontainer: ViewContainerRef = null!;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "@ViewChild('simple', {read: TemplateRef, static: true}) simple: TemplateRef<any> = null!;\nview0: EmbeddedViewRef<any> = null!;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "view1: EmbeddedViewRef<any> = null!;\nview2: EmbeddedViewRef<any> = null!;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "view3: EmbeddedViewRef<any> = null!;\nconstructor(public changeDetector: ChangeDetectorRef) {}",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "}\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n      let _counter = 0;\n      @Component({\n        selector: 'increment-comp',\n        template: `<span>created{{counter}}</span>`,\n        standalone: false,\n      })\n      }\n      @Component({\n        template: `\n              <ng-template #simple><increment-comp></increment-comp></ng-template>\n              <div #container></div>\n            `,\n        standalone: false,\n      })\n      }\n      TestBed.configureTestingModule({\n        declarations: [App, IncrementComp],\n      });\n      const fixture = TestBed.createComponent(App);\n      fixture.detectChanges();\n      const app = fixture.componentInstance;\n      expect(app.container.indexOf(app.view0)).toBe(0);\n      expect(app.container.indexOf(app.view1)).toBe(1);\n      expect(app.container.indexOf(app.view2)).toBe(2);\n      expect(app.container.indexOf(app.view3)).toBe(3);\n      // The text in each component differs based on *when* it was created.\n      expect(fixture.nativeElement.textContent).toBe('created1created0created3created2');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should insert into an empty container, at the front, in the middle, and at the end', () => {\nlet _counter = 0;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Component({\n  selector: 'increment-comp',\n  template: `<span>created{{counter}}</span>`,\n  standalone: false,\n})\n@Component({\n  template: `\n      <ng-template #simple><increment-comp></increment-comp></ng-template>\n      <div #container></div>\n    `,\n  standalone: false,\n})",
                      "successors": [
                        {
                          "id": 5,
                          "label": "TestBed.configureTestingModule({\n  declarations: [App, IncrementComp],\n});\nconst fixture = TestBed.createComponent(App);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "fixture.detectChanges();\nconst app = fixture.componentInstance;",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "expect(app.container.indexOf(app.view0)).toBe(0);\nexpect(app.container.indexOf(app.view1)).toBe(1);\nexpect(app.container.indexOf(app.view2)).toBe(2);\nexpect(app.container.indexOf(app.view3)).toBe(3);\nexpect(fixture.nativeElement.textContent).toBe('created1created0created3created2');",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('of a simple template', () => {\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('of a simple template', () => {\n});",
              "successors": []
            },
            {
              "id": 2,
              "label": "});",
              "successors": []
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 74,
          "end_line": 112,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 75,
              "end_line": 111,
              "functions": [],
              "classes": [
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 83,
                  "end_line": 100,
                  "functions": [
                    {
                      "name": "ngAfterViewInit",
                      "type": "function",
                      "start_line": 90,
                      "end_line": 99,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        ngAfterViewInit() {\n          // insert at the front\n          this.view1 = this.container.createEmbeddedView(this.empty);\n          // insert at the front again\n          this.view0 = this.container.createEmbeddedView(this.empty, {}, 0);\n          // insert at the end\n          this.view3 = this.container.createEmbeddedView(this.empty);\n          // insert in the middle\n          this.view2 = this.container.createEmbeddedView(this.empty, {}, 2);\n        }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "ngAfterViewInit() {\n    // insert at the front\n    this.view1 = this.container.createEmbeddedView(this.empty);\n",
                          "successors": [
                            {
                              "id": 3,
                              "label": "    // insert at the front again\n    this.view0 = this.container.createEmbeddedView(this.empty, {}, 0);\n\n    // insert at the end\n    this.view3 = this.container.createEmbeddedView(this.empty);\n",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "    // insert in the middle\n    this.view2 = this.container.createEmbeddedView(this.empty, {}, 2);\n\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      class App {\n        @ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;\n        @ViewChild('empty', {read: TemplateRef}) empty: TemplateRef<any> = null!;\n        view0: EmbeddedViewRef<any> = null!;\n        view1: EmbeddedViewRef<any> = null!;\n        view2: EmbeddedViewRef<any> = null!;\n        view3: EmbeddedViewRef<any> = null!;\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class App {\n@ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "@ViewChild('empty', {read: TemplateRef}) empty: TemplateRef<any> = null!;\nview0: EmbeddedViewRef<any> = null!;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "view1: EmbeddedViewRef<any> = null!;\nview2: EmbeddedViewRef<any> = null!;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "view3: EmbeddedViewRef<any> = null!;\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n      @Component({\n        template: `\n              <ng-template #empty></ng-template>\n              <div #container></div>\n            `,\n        standalone: false,\n      })\n      }\n      TestBed.configureTestingModule({\n        declarations: [App],\n      });\n      const fixture = TestBed.createComponent(App);\n      fixture.detectChanges();\n      const app = fixture.componentInstance;\n      expect(app.container.indexOf(app.view0)).toBe(0);\n      expect(app.container.indexOf(app.view1)).toBe(1);\n      expect(app.container.indexOf(app.view2)).toBe(2);\n      expect(app.container.indexOf(app.view3)).toBe(3);\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n@Component({\n        template: `\n              <ng-template #empty></ng-template>\n              <div #container></div>\n            `,\n        standalone: false,\n      })\n      }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "TestBed.configureTestingModule({\n        declarations: [App],\n      });\nconst fixture = TestBed.createComponent(App);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "fixture.detectChanges();\nconst app = fixture.componentInstance;",
                          "successors": [
                            {
                              "id": 7,
                              "label": "expect(app.container.indexOf(app.view0)).toBe(0);\nexpect(app.container.indexOf(app.view1)).toBe(1);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "expect(app.container.indexOf(app.view2)).toBe(2);\nexpect(app.container.indexOf(app.view3)).toBe(3);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('of an empty template', () => {\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('of an empty template', () => {\n    });",
              "successors": [
                {
                  "id": 3,
                  "label": "  });",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 113,
          "end_line": 162,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 114,
              "end_line": 161,
              "functions": [],
              "classes": [
                {
                  "name": "Comp",
                  "type": "class",
                  "start_line": 123,
                  "end_line": 140,
                  "functions": [
                    {
                      "name": "ngAfterViewInit",
                      "type": "function",
                      "start_line": 130,
                      "end_line": 139,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        ngAfterViewInit() {\n          // insert at the front\n          this.view1 = this.container.createEmbeddedView(this.projection);\n          // insert at the front again\n          this.view0 = this.container.createEmbeddedView(this.projection, {}, 0);\n          // insert at the end\n          this.view3 = this.container.createEmbeddedView(this.projection);\n          // insert in the middle\n          this.view2 = this.container.createEmbeddedView(this.projection, {}, 2);\n        }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "ngAfterViewInit()\nthis.view1 = this.container.createEmbeddedView(this.projection);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "this.view0 = this.container.createEmbeddedView(this.projection, {}, 0);\nthis.view3 = this.container.createEmbeddedView(this.projection);",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "this.view2 = this.container.createEmbeddedView(this.projection, {}, 2);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      class Comp {\n        @ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;\n        @ViewChild('projection', {read: TemplateRef}) projection: TemplateRef<any> = null!;\n        view0: EmbeddedViewRef<any> = null!;\n        view1: EmbeddedViewRef<any> = null!;\n        view2: EmbeddedViewRef<any> = null!;\n        view3: EmbeddedViewRef<any> = null!;\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class Comp {\n@ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "@ViewChild('projection', {read: TemplateRef}) projection: TemplateRef<any> = null!;\nview0: EmbeddedViewRef<any> = null!;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "view1: EmbeddedViewRef<any> = null!;\nview2: EmbeddedViewRef<any> = null!;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "view3: EmbeddedViewRef<any> = null!;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 147,
                  "end_line": 147,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class App {}",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class App {}",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n      @Component({\n        selector: 'comp',\n        template: `\n                  <ng-template #projection><ng-content></ng-content></ng-template>\n                  <div #container></div>\n                `,\n        standalone: false,\n      })\n      }\n      @Component({\n        template: `\n          <comp>test</comp>\n        `,\n        standalone: false,\n      })\n      class App {}\n      TestBed.configureTestingModule({\n        declarations: [App, Comp],\n      });\n      const fixture = TestBed.createComponent(App);\n      fixture.detectChanges();\n      const comp = fixture.debugElement.query(By.directive(Comp)).injector.get(Comp);\n      expect(comp.container.indexOf(comp.view0)).toBe(0);\n      expect(comp.container.indexOf(comp.view1)).toBe(1);\n      expect(comp.container.indexOf(comp.view2)).toBe(2);\n      expect(comp.container.indexOf(comp.view3)).toBe(3);\n      // Both ViewEngine and Ivy only honor one of the inserted ng-content components, even though\n      // all are inserted.\n      expect(fixture.nativeElement.textContent).toBe('test');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n@Component({ selector: 'comp', template: `<ng-template #projection><ng-content></ng-content></ng-template> <div #container></div>`, standalone: false, })",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Component({ template: `<comp>test</comp>`, standalone: false, })\nclass App {}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "TestBed.configureTestingModule({ declarations: [App, Comp], });\nconst fixture = TestBed.createComponent(App);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "fixture.detectChanges();\nconst comp = fixture.debugElement.query(By.directive(Comp)).injector.get(Comp);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "expect(comp.container.indexOf(comp.view0)).toBe(0);\nexpect(comp.container.indexOf(comp.view1)).toBe(1);",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "expect(comp.container.indexOf(comp.view2)).toBe(2);\nexpect(comp.container.indexOf(comp.view3)).toBe(3);",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "// Both ViewEngine and Ivy only honor one of the inserted ng-content components, even though all are inserted.\nexpect(fixture.nativeElement.textContent).toBe('test');",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('of an ng-content projection', () => {\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('of an ng-content projection', () => {\n});",
              "successors": []
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 163,
          "end_line": 208,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 164,
              "end_line": 207,
              "functions": [],
              "classes": [
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 172,
                  "end_line": 194,
                  "functions": [
                    {
                      "name": "ngAfterViewInit",
                      "type": "function",
                      "start_line": 180,
                      "end_line": 193,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        ngAfterViewInit() {\n          // insert at the front\n          this.view1 = this.container.createEmbeddedView(this.subContainer, null, 0);\n          // insert at the front again\n          this.view0 = this.container.createEmbeddedView(this.subContainer, null, 0);\n          // insert at the end\n          this.view3 = this.container.createEmbeddedView(this.subContainer, null, 2);\n          // insert in the middle\n          this.view2 = this.container.createEmbeddedView(this.subContainer, null, 2);\n          // We need to run change detection here to avoid\n          // ExpressionChangedAfterItHasBeenCheckedError because of the value getting passed to ngIf\n          // in the template.\n          this.changeDetectorRef.detectChanges();\n        }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "ngAfterViewInit() {\n  // insert at the front\n          this.view1 = this.container.createEmbeddedView(this.subContainer, null, 0);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "  // insert at the front again\n          this.view0 = this.container.createEmbeddedView(this.subContainer, null, 0);\n  // insert at the end\n          this.view3 = this.container.createEmbeddedView(this.subContainer, null, 2);",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "  // insert in the middle\n          this.view2 = this.container.createEmbeddedView(this.subContainer, null, 2);\n  // We need to run change detection here to avoid\n          // ExpressionChangedAfterItHasBeenCheckedError because of the value getting passed to ngIf\n          // in the template.\n          this.changeDetectorRef.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      class App {\n        @ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;\n        @ViewChild('subContainer', {read: TemplateRef}) subContainer: TemplateRef<any> = null!;\n        view0: EmbeddedViewRef<any> = null!;\n        view1: EmbeddedViewRef<any> = null!;\n        view2: EmbeddedViewRef<any> = null!;\n        view3: EmbeddedViewRef<any> = null!;\n        constructor(public changeDetectorRef: ChangeDetectorRef) {}\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class App {\n@ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef = null!;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "@ViewChild('subContainer', {read: TemplateRef}) subContainer: TemplateRef<any> = null!;\nview0: EmbeddedViewRef<any> = null!;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "view1: EmbeddedViewRef<any> = null!;\nview2: EmbeddedViewRef<any> = null!;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "view3: EmbeddedViewRef<any> = null!;\nconstructor(public changeDetectorRef: ChangeDetectorRef) {}",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "}\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n      @Component({\n        template: `\n                  <ng-template #subContainer><div class=\"dynamic\" *ngIf=\"true\">test</div></ng-template>\n                  <div #container></div>\n                `,\n        standalone: false,\n      })\n      }\n      TestBed.configureTestingModule({\n        declarations: [App],\n        imports: [CommonModule],\n      });\n      const fixture = TestBed.createComponent(App);\n      fixture.detectChanges();\n      const app = fixture.componentInstance;\n      expect(app.container.indexOf(app.view0)).toBe(0);\n      expect(app.container.indexOf(app.view1)).toBe(1);\n      expect(app.container.indexOf(app.view2)).toBe(2);\n      expect(app.container.indexOf(app.view3)).toBe(3);\n      expect(fixture.debugElement.queryAll(By.css('div.dynamic')).length).toBe(4);\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should insert into an empty container, at the front, in the middle, and at the end', () => {\n@Component({\n    template: `\n              <ng-template #subContainer><div class=\"dynamic\" *ngIf=\"true\">test</div></ng-template>\n              <div #container></div>\n            `,\n    standalone: false,\n  })",
                  "successors": [
                    {
                      "id": 3,
                      "label": "TestBed.configureTestingModule({\n    declarations: [App],\n    imports: [CommonModule],\n  });\nconst fixture = TestBed.createComponent(App);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "fixture.detectChanges();\nconst app = fixture.componentInstance;",
                          "successors": [
                            {
                              "id": 7,
                              "label": "expect(app.container.indexOf(app.view0)).toBe(0);\nexpect(app.container.indexOf(app.view1)).toBe(1);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "expect(app.container.indexOf(app.view2)).toBe(2);\nexpect(app.container.indexOf(app.view3)).toBe(3);",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "expect(fixture.debugElement.queryAll(By.css('div.dynamic')).length).toBe(4);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('of another container like ngIf', () => {\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('of another container like ngIf', () => {\n});",
              "successors": [
                {
                  "id": 3,
                  "label": "});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 209,
          "end_line": 469,
          "functions": [
            {
              "name": "describe",
              "type": "function",
              "start_line": 222,
              "end_line": 358,
              "functions": [
                {
                  "name": "it",
                  "type": "function",
                  "start_line": 261,
                  "end_line": 336,
                  "functions": [
                    {
                      "name": "createAndInsertViews",
                      "type": "function",
                      "start_line": 246,
                      "end_line": 260,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "      function createAndInsertViews(beforeTpl: string): any {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        return fixture.nativeElement;\n      }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "function createAndInsertViews(beforeTpl: string): any {\nTestBed.overrideTemplate(\n  TestCmpt,\n  `\n  <ng-template #insert>insert</ng-template>\n  <ng-template #before>${beforeTpl}</ng-template>\n  <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n`,\n);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "const fixture = TestBed.createComponent(TestCmpt);\nfixture.detectChanges();",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "fixture.componentInstance.insert();\nfixture.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return fixture.nativeElement;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      it('should insert before a view with the text node as the first root node', () => {\n        expect(createAndInsertViews('|before').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the element as the first root node', () => {\n        expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-container>\n            <ng-container>|before</ng-container>\n          </ng-container>\n        `).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with the empty ng-container as the first root node', () => {\n        expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(\n          'insert|before',\n        );\n      });\n      it('should insert before a view with ICU container inside a ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(\n            `<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`,\n          ).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with a container as the first root node', () => {\n        expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\">|before</ng-template>`).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with an empty container as the first root node', () => {\n        expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\"></ng-template>|before`).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with a ng-container where ViewContainerRef is injected', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-container [ngTemplateOutlet]=\"after\">|before</ng-container>\n          <ng-template #after>|after</ng-template>\n        `).textContent,\n        ).toBe('insert|before|after');\n      });\n      it('should insert before a view with an element where ViewContainerRef is injected', () => {\n        expect(\n          createAndInsertViews(`\n          <div [ngTemplateOutlet]=\"after\">|before</div>\n          <ng-template #after>|after</ng-template>\n        `).textContent,\n        ).toBe('insert|before|after');\n      });\n      it('should insert before a view with an empty projection as the first root node', () => {\n        expect(createAndInsertViews(`<ng-content></ng-content>|before`).textContent).toBe(\n          'insert|before',\n        );\n      });\n      it('should insert before a view with complex node structure', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-template [ngIf]=\"true\">\n            <ng-container>\n              <ng-container>\n                <ng-template [ngIf]=\"true\">|before</ng-template>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n        `).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a ng-container with a ViewContainerRef on it', () => {\n        @Component({\n          selector: 'app-root',\n          template: `\n            <div>start|</div>",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "it('should insert before a view with the text node as the first root node', () => {\n  expect(createAndInsertViews('|before').textContent).toBe('insert|before');",
                      "successors": [
                        {
                          "id": 3,
                          "label": "});\nit('should insert before a view with the element as the first root node', () => {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "  expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n});",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "it('should insert before a view with the ng-container as the first root node', () => {\n  expect(\n          createAndInsertViews(`\n          <ng-container>\n            <ng-container>|before</ng-container>\n          </ng-container>\n        `).textContent,\n        ).toBe('insert|before');",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "});\nit('should insert before a view with the empty ng-container as the first root node', () => {",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "  expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(\n          'insert|before',\n        );\n});",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "it('should insert before a view with ICU container inside a ng-container as the first root node', () => {\n  expect(\n          createAndInsertViews(\n            `<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`,\n          ).textContent,\n        ).toBe('insert|before');",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "});\nit('should insert before a view with a container as the first root node', () => {",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "  expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\">|before</ng-template>`).textContent,\n        ).toBe('insert|before');\n});",
                                                      "successors": [
                                                        {
                                                          "id": 19,
                                                          "label": "it('should insert before a view with an empty container as the first root node', () => {\n  expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\"></ng-template>|before`).textContent,\n        ).toBe('insert|before');",
                                                          "successors": [
                                                            {
                                                              "id": 21,
                                                              "label": "});\nit('should insert before a view with a ng-container where ViewContainerRef is injected', () => {",
                                                              "successors": [
                                                                {
                                                                  "id": 23,
                                                                  "label": "  expect(\n          createAndInsertViews(`\n          <ng-container [ngTemplateOutlet]=\"after\">|before</ng-container>\n          <ng-template #after>|after</ng-template>\n        `).textContent,\n        ).toBe('insert|before|after');\n});",
                                                                  "successors": [
                                                                    {
                                                                      "id": 25,
                                                                      "label": "it('should insert before a view with an element where ViewContainerRef is injected', () => {\n  expect(\n          createAndInsertViews(`\n          <div [ngTemplateOutlet]=\"after\">|before</div>\n          <ng-template #after>|after</ng-template>\n        `).textContent,\n        ).toBe('insert|before|after');",
                                                                      "successors": [
                                                                        {
                                                                          "id": 27,
                                                                          "label": "});\nit('should insert before a view with an empty projection as the first root node', () => {",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "  expect(createAndInsertViews(`<ng-content></ng-content>|before`).textContent).toBe(\n          'insert|before',\n        );\n});",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 31,
                                                                                  "label": "it('should insert before a view with complex node structure', () => {\n  expect(\n          createAndInsertViews(`\n          <ng-template [ngIf]=\"true\">\n            <ng-container>\n              <ng-container>\n                <ng-template [ngIf]=\"true\">|before</ng-template>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n        `).textContent,\n        ).toBe('insert|before');",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 33,
                                                                                      "label": "});\nit('should insert before a ng-container with a ViewContainerRef on it', () => {",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 35,
                                                                                          "label": "@Component({\n  selector: 'app-root',\n  template: `\n    <div>start|</div>",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "it",
                  "type": "function",
                  "start_line": 264,
                  "end_line": 277,
                  "functions": [
                    {
                      "name": "createAndInsertViews",
                      "type": "function",
                      "start_line": 246,
                      "end_line": 260,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "      function createAndInsertViews(beforeTpl: string): any {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        return fixture.nativeElement;\n      }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "function createAndInsertViews(beforeTpl: string): any {\nTestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );",
                          "successors": [
                            {
                              "id": 3,
                              "label": "const fixture = TestBed.createComponent(TestCmpt);\nfixture.detectChanges();",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "fixture.componentInstance.insert();\nfixture.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return fixture.nativeElement;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      it('should insert before a view with the element as the first root node', () => {\n        expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-container>\n            <ng-container>|before</ng-container>\n          </ng-container>\n        `).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with the empty ng-container as the first root node', () => {\n        expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "it('should insert before a view with the element as the first root node', () => {\nexpect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');",
                      "successors": [
                        {
                          "id": 3,
                          "label": "});",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "it",
                  "type": "function",
                  "start_line": 261,
                  "end_line": 291,
                  "functions": [
                    {
                      "name": "createAndInsertViews",
                      "type": "function",
                      "start_line": 246,
                      "end_line": 260,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "      function createAndInsertViews(beforeTpl: string): any {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        return fixture.nativeElement;\n      }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "function createAndInsertViews(beforeTpl: string): any {\n  TestBed.overrideTemplate(TestCmpt, `<ng-template #insert>insert</ng-template><ng-template #before>${beforeTpl}</ng-template><div><ng-template #vi=\"vi\" viewInserting></ng-template></div>`);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "  const fixture = TestBed.createComponent(TestCmpt);\n  fixture.detectChanges();",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "  fixture.componentInstance.insert();\n  fixture.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "  return fixture.nativeElement;\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      it('should insert before a view with the text node as the first root node', () => {\n        expect(createAndInsertViews('|before').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the element as the first root node', () => {\n        expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-container>\n            <ng-container>|before</ng-container>\n          </ng-container>\n        `).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with the empty ng-container as the first root node', () => {\n        expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(\n          'insert|before',\n        );\n      });\n      it('should insert before a view with ICU container inside a ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(\n            `<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`,\n          ).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with a container as the first root node', () => {\n        expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\">|before</ng-template>`).textContent,\n        ).toBe('insert|before');",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "it('should insert before a view with the text node as the first root node', () => {\nexpect(createAndInsertViews('|before').textContent).toBe('insert|before');",
                      "successors": [
                        {
                          "id": 3,
                          "label": "});\nit('should insert before a view with the element as the first root node', () => {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n});",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "it('should insert before a view with the ng-container as the first root node', () => {\nexpect(createAndInsertViews(`",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "<ng-container>\n<ng-container>|before</ng-container>",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "</ng-container>\n`).textContent,",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": ").toBe('insert|before');\n});",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "it('should insert before a view with the empty ng-container as the first root node', () => {\nexpect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe('insert|before');",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "});\nit('should insert before a view with ICU container inside a ng-container as the first root node', () => {",
                                                      "successors": [
                                                        {
                                                          "id": 19,
                                                          "label": "expect(createAndInsertViews(`<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`).textContent).toBe('insert|before');\n});",
                                                          "successors": [
                                                            {
                                                              "id": 21,
                                                              "label": "it('should insert before a view with a container as the first root node', () => {\nexpect(createAndInsertViews(`<ng-template [ngIf]='true'>|before</ng-template>`).textContent).toBe('insert|before');",
                                                              "successors": [
                                                                {
                                                                  "id": 23,
                                                                  "label": "});",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "it",
                  "type": "function",
                  "start_line": 264,
                  "end_line": 291,
                  "functions": [
                    {
                      "name": "createAndInsertViews",
                      "type": "function",
                      "start_line": 246,
                      "end_line": 260,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "      function createAndInsertViews(beforeTpl: string): any {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        return fixture.nativeElement;\n      }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "function createAndInsertViews(beforeTpl: string): any {\nTestBed.overrideTemplate(\n  TestCmpt,\n  `\n  <ng-template #insert>insert</ng-template>\n  <ng-template #before>${beforeTpl}</ng-template>\n  <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n`)",
                          "successors": [
                            {
                              "id": 3,
                              "label": "const fixture = TestBed.createComponent(TestCmpt);\nfixture.detectChanges();",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "fixture.componentInstance.insert();\nfixture.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return fixture.nativeElement;\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      it('should insert before a view with the element as the first root node', () => {\n        expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');\n      });\n      it('should insert before a view with the ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(`\n          <ng-container>\n            <ng-container>|before</ng-container>\n          </ng-container>\n        `).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with the empty ng-container as the first root node', () => {\n        expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(\n          'insert|before',\n        );\n      });\n      it('should insert before a view with ICU container inside a ng-container as the first root node', () => {\n        expect(\n          createAndInsertViews(\n            `<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`,\n          ).textContent,\n        ).toBe('insert|before');\n      });\n      it('should insert before a view with a container as the first root node', () => {\n        expect(\n          createAndInsertViews(`<ng-template [ngIf]=\"true\">|before</ng-template>`).textContent,\n        ).toBe('insert|before');",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "it('should insert before a view with the element as the first root node', () => {\n    expect(createAndInsertViews('<span>|before</span>').textContent).toBe('insert|before');",
                      "successors": [
                        {
                          "id": 3,
                          "label": "});\nit('should insert before a view with the ng-container as the first root node', () => {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    expect(createAndInsertViews(`",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "        <ng-container>\n          <ng-container>|before</ng-container>",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "        </ng-container>",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 9,
                                  "label": "      `).textContent,\n    ).toBe('insert|before');",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "});\nit('should insert before a view with the empty ng-container as the first root node', () => {",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "    expect(createAndInsertViews(`<ng-container></ng-container>|before`).textContent).toBe(\n      'insert|before',",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "    );\n});",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "it('should insert before a view with ICU container inside a ng-container as the first root node', () => {\n    expect(",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "label": "      createAndInsertViews(\n`<ng-container i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {|before}}</ng-container>`",
                                                      "successors": [
                                                        {
                                                          "id": 21,
                                                          "label": "      ).textContent,\n    ).toBe('insert|before');",
                                                          "successors": [
                                                            {
                                                              "id": 23,
                                                              "label": "});\nit('should insert before a view with a container as the first root node', () => {",
                                                              "successors": [
                                                                {
                                                                  "id": 25,
                                                                  "label": "    expect(\n      createAndInsertViews(`<ng-template [ngIf]=\"true\">|before</ng-template>`).textContent,",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "    ).toBe('insert|before');",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "id": 28,
                                                                  "label": "});",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "ViewInsertingDir",
                  "type": "class",
                  "start_line": 210,
                  "end_line": 221,
                  "functions": [
                    {
                      "name": "insert",
                      "type": "function",
                      "start_line": 217,
                      "end_line": 220,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "      insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n        this._vcRef.insert(beforeView, 0);\n        this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n      }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n    this._vcRef.insert(beforeView, 0);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "    this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "    @Directive({\n      selector: '[viewInserting]',\n      exportAs: 'vi',\n      standalone: false,\n    })\n    class ViewInsertingDir {\n      constructor(private _vcRef: ViewContainerRef) {}\n      }\n    }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "@Directive({\n  selector: '[viewInserting]',",
                      "successors": [
                        {
                          "id": 3,
                          "label": "  exportAs: 'vi',\n  standalone: false,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "})\nclass ViewInsertingDir {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "  constructor(private _vcRef: ViewContainerRef) {}\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 228,
                  "end_line": 239,
                  "functions": [
                    {
                      "name": "insert",
                      "type": "function",
                      "start_line": 233,
                      "end_line": 237,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        insert() {\n          const beforeView = this.beforeTpl.createEmbeddedView({});\n          // change-detect the \"before view\" to create all child views\n          beforeView.detectChanges();\n          this.viewInsertingDir.insert(beforeView, this.insertTpl);",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "insert() {\nconst beforeView = this.beforeTpl.createEmbeddedView({});",
                          "successors": [
                            {
                              "id": 3,
                              "label": "beforeView.detectChanges();\nthis.viewInsertingDir.insert(beforeView, this.insertTpl);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      class TestCmpt {\n        @ViewChild('before', {static: true}) beforeTpl!: TemplateRef<{}>;\n        @ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n        @ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;\n        minutes = 10;\n          this.viewInsertingDir.insert(beforeView, this.insertTpl);\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class TestCmpt {\n@ViewChild('before', {static: true}) beforeTpl!: TemplateRef<{}>;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "@ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n@ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "minutes = 10;\nthis.viewInsertingDir.insert(beforeView, this.insertTpl);",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "classes": [],
              "simplified_code": "    describe('before embedded view', () => {\n      @Component({\n        selector: 'test-cmpt',\n        template: '',\n        standalone: false,\n      })\n      }\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          declarations: [TestCmpt, ViewInsertingDir],\n          imports: [CommonModule],\n        });\n      });\n      function createAndInsertViews(beforeTpl: string): any {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before>${beforeTpl}</ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        return fixture.nativeElement;\n      }\n            <div>start|</div>\n            <ng-container [ngTemplateOutlet]=\"insertTpl ? tpl : null\"></ng-container>\n            <ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\n            <div>|end</div>\n            <ng-template #tpl>test</ng-template>\n          `,\n          standalone: false,\n        })\n        class AppComponent {\n          insertTpl = false;\n        }\n        TestBed.configureTestingModule({\n          declarations: [AppComponent],\n          imports: [CommonModule],\n        });\n        const fixture = TestBed.createComponent(AppComponent);\n        fixture.detectChanges();\n        expect(fixture.nativeElement.textContent).toBe('start|test|end');\n        fixture.componentInstance.insertTpl = true;\n        fixture.detectChanges();\n        expect(fixture.nativeElement.textContent).toBe('start|testtest|end');\n      });\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "describe('before embedded view', () => {\n@Component({\n  selector: 'test-cmpt',\n  template: '',\n  standalone: false,\n})",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [TestCmpt, ViewInsertingDir],\n    imports: [CommonModule],\n  });\n});",
                      "successors": [
                        {
                          "id": 5,
                          "label": "function createAndInsertViews(beforeTpl: string): any {\n  TestBed.overrideTemplate(\n    TestCmpt,\n    `\n    <ng-template #insert>insert</ng-template>\n    <ng-template #before>${beforeTpl}</ng-template>\n    <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n  `,\n  );\n  const fixture = TestBed.createComponent(TestCmpt);\n  fixture.detectChanges();\n  fixture.componentInstance.insert();\n  fixture.detectChanges();\n  return fixture.nativeElement;\n}\n<div>start|</div>\n<ng-container [ngTemplateOutlet]=\"insertTpl ? tpl : null\"></ng-container>\n<ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\n<div>|end</div>\n<ng-template #tpl>test</ng-template>",
                          "successors": [
                            {
                              "id": 7,
                              "label": "standalone: false,\n})",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "class AppComponent {\n  insertTpl = false;\n}\nTestBed.configureTestingModule({\n  declarations: [AppComponent],\n  imports: [CommonModule],\n});",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "const fixture = TestBed.createComponent(AppComponent);\nfixture.detectChanges();",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "expect(fixture.nativeElement.textContent).toBe('start|test|end');\nfixture.componentInstance.insertTpl = true;",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toBe('start|testtest|end');",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('before another view', () => {\n    @Directive({\n      selector: '[viewInserting]',\n      exportAs: 'vi',\n      standalone: false,\n    })\n    class ViewInsertingDir {\n      constructor(private _vcRef: ViewContainerRef) {}\n      insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n        this._vcRef.insert(beforeView, 0);\n        this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n      }\n    }\n    });\n    describe('before embedded view with projection', () => {\n      @Component({\n        selector: 'with-content',\n        template: `\n          <ng-template #insert>insert</ng-template>\n          <ng-template #before><ng-content></ng-content></ng-template>\n          <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n        `,\n        standalone: false,\n      })\n      class WithContentCmpt {\n        @ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n        @ViewChild('before', {static: true}) beforeTpl!: TemplateRef<{}>;\n        @ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;\n        insert() {\n          const beforeView = this.beforeTpl.createEmbeddedView({});\n          // change-detect the \"before view\" to create all child views\n          beforeView.detectChanges();\n          this.viewInsertingDir.insert(beforeView, this.insertTpl);\n        }\n      }\n      @Component({\n        selector: 'test-cmpt',\n        template: '',\n        standalone: false,\n      })\n      class TestCmpt {\n        @ViewChild('wc', {static: true}) withContentCmpt!: WithContentCmpt;\n      }\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          declarations: [ViewInsertingDir, WithContentCmpt, TestCmpt],\n          imports: [CommonModule],\n        });\n      });\n      it('should insert before a view with projected text nodes', () => {\n        TestBed.overrideTemplate(TestCmpt, `<with-content #wc>|before</with-content>`);\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.withContentCmpt.insert();\n        fixture.detectChanges();\n        expect(fixture.nativeElement.textContent).toBe('insert|before');\n      });\n      it('should insert before a view with projected container', () => {\n        TestBed.overrideTemplate(\n          TestCmpt,\n          `<with-content #wc><ng-template [ngIf]=\"true\">|before</ng-template></with-content>`,\n        );\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.withContentCmpt.insert();\n        fixture.detectChanges();\n        expect(fixture.nativeElement.textContent).toBe('insert|before');\n      });\n    });\n    describe('before component view', () => {\n      @Directive({\n        selector: '[viewInserting]',\n        exportAs: 'vi',\n        standalone: false,\n      })\n      class ViewInsertingDir {\n        constructor(private _vcRef: ViewContainerRef) {}\n        insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n          this._vcRef.insert(beforeView, 0);\n          this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n        }\n      }\n      @Component({\n        selector: 'dynamic-cmpt',\n        template: '|before',\n        standalone: false,\n      })\n      class DynamicComponent {}\n      it('should insert in front a dynamic component view', () => {\n        @Component({\n          selector: 'test-cmpt',\n          template: `\n                <ng-template #insert>insert</ng-template>\n                <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n              `,\n          standalone: false,\n        })\n        class TestCmpt {\n          @ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n          @ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;\n          constructor(\n            private _vcr: ViewContainerRef,\n            private _injector: Injector,\n          ) {}\n          insert() {\n            // create a dynamic component view to act as an \"insert before\" view\n            const beforeView = this._vcr.createComponent(DynamicComponent, {\n              injector: this._injector,\n            }).hostView;\n            // change-detect the \"before view\" to create all child views\n            beforeView.detectChanges();\n            this.viewInsertingDir.insert(beforeView, this.insertTpl);\n          }\n        }\n        TestBed.configureTestingModule({\n          declarations: [TestCmpt, ViewInsertingDir, DynamicComponent],\n        });\n        const fixture = TestBed.createComponent(TestCmpt);\n        fixture.detectChanges();\n        fixture.componentInstance.insert();\n        fixture.detectChanges();\n        expect(fixture.nativeElement.textContent).toBe('insert|before');\n      });\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('before another view', () => {\n@Directive({ selector: '[viewInserting]', exportAs: 'vi', standalone: false, })\nclass ViewInsertingDir {\n  constructor(private _vcRef: ViewContainerRef) {}\n  insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n    this._vcRef.insert(beforeView, 0);\n    this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n  }\n}",
              "successors": [
                {
                  "id": 3,
                  "label": "describe('before embedded view with projection', () => {\n@Component({ selector: 'with-content', template: `\n  <ng-template #insert>insert</ng-template>\n  <ng-template #before><ng-content></ng-content></ng-template>\n  <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n`, standalone: false, })\nclass WithContentCmpt {\n  @ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n  @ViewChild('before', {static: true}) beforeTpl!: TemplateRef<{}>;\n  @ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;\n  insert() {\n    const beforeView = this.beforeTpl.createEmbeddedView({});\n    // change-detect the \"before view\" to create all child views\n    beforeView.detectChanges();\n    this.viewInsertingDir.insert(beforeView, this.insertTpl);\n  }\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Component({ selector: 'test-cmpt', template: '', standalone: false, })\nclass TestCmpt {\n  @ViewChild('wc', {static: true}) withContentCmpt!: WithContentCmpt;\n}\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [ViewInsertingDir, WithContentCmpt, TestCmpt],\n    imports: [CommonModule],\n  });\n});\n[",
                      "successors": [
                        {
                          "id": 7,
                          "label": "it('should insert before a view with projected text nodes', () => {\n  TestBed.overrideTemplate(TestCmpt, `<with-content #wc>|before</with-content>`);\n  const fixture = TestBed.createComponent(TestCmpt);\n  fixture.detectChanges();\n  fixture.componentInstance.withContentCmpt.insert();\n  fixture.detectChanges();\n  expect(fixture.nativeElement.textContent).toBe('insert|before');\n});\nit('should insert before a view with projected container', () => {\n  TestBed.overrideTemplate(\n    TestCmpt,\n    `<with-content #wc><ng-template [ngIf]=\"true\">|before</ng-template></with-content>`,\n  );\n  const fixture = TestBed.createComponent(TestCmpt);\n  fixture.detectChanges();\n  fixture.componentInstance.withContentCmpt.insert();\n  fixture.detectChanges();\n  expect(fixture.nativeElement.textContent).toBe('insert|before');\n});",
                          "successors": [
                            {
                              "id": 9,
                              "label": "describe('before component view', () => {\n@Directive({ selector: '[viewInserting]', exportAs: 'vi', standalone: false, })\nclass ViewInsertingDir {\n  constructor(private _vcRef: ViewContainerRef) {}\n  insert(beforeView: ViewRef, insertTpl: TemplateRef<{}>) {\n    this._vcRef.insert(beforeView, 0);\n    this._vcRef.createEmbeddedView(insertTpl, {}, 0);\n  }\n}",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "@Component({ selector: 'dynamic-cmpt', template: '|before', standalone: false, })\nclass DynamicComponent {}\nit('should insert in front a dynamic component view', () => {\n  @Component({\n    selector: 'test-cmpt',\n    template: `\n      <ng-template #insert>insert</ng-template>\n      <div><ng-template #vi=\"vi\" viewInserting></ng-template></div>\n    `,\n    standalone: false,\n  })\n  class TestCmpt {\n    @ViewChild('insert', {static: true}) insertTpl!: TemplateRef<{}>;\n    @ViewChild('vi', {static: true}) viewInsertingDir!: ViewInsertingDir;\n    constructor(\n      private _vcr: ViewContainerRef,\n      private _injector: Injector,\n    ) {}\n    insert() {\n      // create a dynamic component view to act as an \"insert before\" view\n      const beforeView = this._vcr.createComponent(DynamicComponent, {\n        injector: this._injector,\n      }).hostView;\n      // change-detect the \"before view\" to create all child views\n      beforeView.detectChanges();\n      this.viewInsertingDir.insert(beforeView, this.insertTpl);\n    }\n  }\n  TestBed.configureTestingModule({\n    declarations: [TestCmpt, ViewInsertingDir, DynamicComponent],\n  });\n  const fixture = TestBed.createComponent(TestCmpt);\n  fixture.detectChanges();\n  fixture.componentInstance.insert();\n  fixture.detectChanges();\n  expect(fixture.nativeElement.textContent).toBe('insert|before');\n});",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 470,
          "end_line": 563,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 472,
              "end_line": 563,
              "functions": [
                {
                  "name": "click",
                  "type": "function",
                  "start_line": 521,
                  "end_line": 523,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        click() {\n          this.vcr.createEmbeddedView(this.template, undefined, 0);\n        }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "click() {\n    this.vcr.createEmbeddedView(this.template, undefined, 0);",
                      "successors": [
                        {
                          "id": 3,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "classes": [
                {
                  "name": "AppComponent",
                  "type": "class",
                  "start_line": 481,
                  "end_line": 524,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        template: `\n            <div>start|</div>\n            <ng-container #container></ng-container>\n            <div>|end</div>\n            <div (click)=\"click()\" >|click</div>\n        `,\n        standalone: false,\n      })\n      class AppComponent {\n        @ViewChild('container', {read: ViewContainerRef, static: true}) vcr!: ViewContainerRef;\n        click() {\n          this.vcr.createComponent(DynamicComponent);\n        }\n      }\n      TestBed.configureTestingModule({\n        declarations: [AppComponent, DynamicComponent],\n      });\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toBe('start||end|click');\n      fixture.componentInstance.click();\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toBe('start|dynamic|end|click');\n    });\n    // https://github.com/angular/angular/issues/33679\n    it('should insert embedded views into ViewContainerRef injected by querying <ng-container>', () => {\n      @Component({\n        selector: 'app-root',\n        template: `\n        <div>container start|</div>\n        <ng-container #container></ng-container>\n        <div>|container end</div>\n        <ng-template #template >test</ng-template>\n        <div (click)=\"click()\" >|click</div>\n        `,\n        standalone: false,\n      })\n      class AppComponent {\n        @ViewChild('container', {read: ViewContainerRef, static: true}) vcr!: ViewContainerRef;\n        @ViewChild('template', {read: TemplateRef, static: true}) template!: TemplateRef<any>;\n        click() {\n          this.vcr.createEmbeddedView(this.template, undefined, 0);\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "template: `\\n            <div>start|</div>\\n            <ng-container #container></ng-container>\\n            <div>|end</div>\\n            <div (click)=\\\"click()\\\" >|click</div>\\n        `,\\n        standalone: false,\\n      })\\n      class AppComponent {\\n        @ViewChild('container', {read: ViewContainerRef, static: true}) vcr!: ViewContainerRef;\nclick() {\\n          this.vcr.createComponent(DynamicComponent);\\n        }\\n      }\\n      TestBed.configureTestingModule({\\n        declarations: [AppComponent, DynamicComponent],",
                      "successors": [
                        {
                          "id": 3,
                          "label": "const fixture = TestBed.createComponent(AppComponent);\\n      fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toBe('start||end|click');",
                          "successors": [
                            {
                              "id": 5,
                              "label": "fixture.componentInstance.click();\\n      fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toBe('start|dynamic|end|click');\\n    });",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should insert component views into ViewContainerRef injected by querying <ng-container>', () => {\n      @Component({\n        selector: 'dynamic-cmpt',\n        template: 'dynamic',\n        standalone: false,\n      })\n      class DynamicComponent {}\n      @Component({\n        selector: 'app-root',\n      }\n      TestBed.configureTestingModule({\n        declarations: [AppComponent],\n      });\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toBe('container start||container end|click');\n      fixture.componentInstance.click();\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toBe('container start|test|container end|click');\n    });\n    it('should properly insert before views in a ViewContainerRef injected on ng-container', () => {\n      @Component({\n        selector: 'app-root',\n        template: `\n          <ng-template #parameterListItem let-parameter=\"parameter\">\n            {{parameter}}\n          </ng-template>\n          <ng-container *ngFor=\"let parameter of items;\"\n            [ngTemplateOutlet]=\"parameterListItem\"\n            [ngTemplateOutletContext]=\"{parameter:parameter}\">\n          </ng-container>\n        `,\n        standalone: false,\n      })\n      class AppComponent {\n        items = [1];\n      }\n      TestBed.configureTestingModule({\n        declarations: [AppComponent],\n        imports: [CommonModule],\n      });\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent.trim()).toContain('1');\n      fixture.componentInstance.items = [2, 1];\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent.trim()).toContain('2  1');\n    });\n  });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should insert component views into ViewContainerRef injected by querying <ng-container>', () => {\n@Component({\n        selector: 'dynamic-cmpt',\n        template: 'dynamic',\n        standalone: false,\n      })",
                  "successors": [
                    {
                      "id": 3,
                      "label": "class DynamicComponent {}\n@Component({\n        selector: 'app-root',\n      })",
                      "successors": [
                        {
                          "id": 5,
                          "label": "TestBed.configureTestingModule({\n        declarations: [AppComponent],\n      });\nconst fixture = TestBed.createComponent(AppComponent);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toBe('container start||container end|click');",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "fixture.componentInstance.click();\nfixture.detectChanges();",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "expect(fixture.nativeElement.textContent).toBe('container start|test|container end|click');\n});",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "it('should properly insert before views in a ViewContainerRef injected on ng-container', () => {\n@Component({\n        selector: 'app-root',\n        template: `\n          <ng-template #parameterListItem let-parameter=\"parameter\">\n            {{parameter}}\n          </ng-template>\n          <ng-container *ngFor=\"let parameter of items;\"\n            [ngTemplateOutlet]=\"parameterListItem\"\n            [ngTemplateOutletContext]=\"{parameter:parameter}\">\n          </ng-container>\n        `,\n        standalone: false,\n      })",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "class AppComponent {\n        items = [1];\n      }\nTestBed.configureTestingModule({\n        declarations: [AppComponent],\n        imports: [CommonModule],\n      });",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "const fixture = TestBed.createComponent(AppComponent);\nfixture.detectChanges();",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "label": "expect(fixture.nativeElement.textContent.trim()).toContain('1');\nfixture.componentInstance.items = [2, 1];",
                                                      "successors": [
                                                        {
                                                          "id": 21,
                                                          "label": "fixture.detectChanges();\nexpect(fixture.nativeElement.textContent.trim()).toContain('2  1');",
                                                          "successors": [
                                                            {
                                                              "id": 23,
                                                              "label": "});",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('non-regression', () => {\n    // https://github.com/angular/angular/issues/31971\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('non-regression', () => {\n// https://github.com/angular/angular/issues/31971",
              "successors": [
                {
                  "id": 3,
                  "label": "});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "describe",
          "type": "function",
          "start_line": 564,
          "end_line": 807,
          "functions": [
            {
              "name": "it",
              "type": "function",
              "start_line": 565,
              "end_line": 589,
              "functions": [],
              "classes": [
                {
                  "name": "FailInConstructorAlways",
                  "type": "class",
                  "start_line": 570,
                  "end_line": 574,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class FailInConstructorAlways {\n        constructor() {\n          throw new Error('Error in a constructor');\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class FailInConstructorAlways {",
                      "successors": [
                        {
                          "id": 2,
                          "label": "  constructor() {",
                          "successors": [
                            {
                              "id": 3,
                              "label": "    throw new Error('Error in a constructor');",
                              "successors": []
                            },
                            {
                              "id": 4,
                              "label": "  }",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 579,
                  "end_line": 579,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class TestCmpt {}",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class TestCmpt {}",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should consistently report errors raised a directive constructor', () => {\n      @Directive({\n        selector: '[failInConstructorAlways]',\n        standalone: false,\n      })\n      }\n      @Component({\n        template: `<div failInConstructorAlways></div>`,\n        standalone: false,\n      })\n      class TestCmpt {}\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, FailInConstructorAlways],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in a constructor');\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in a constructor');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should consistently report errors raised in a directive constructor', () => {\n@Directive({\n  selector: '[failInConstructorAlways]',\n  standalone: false,\n})\n",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Component({\n  template: `<div failInConstructorAlways></div>`,\n  standalone: false,\n})\nclass TestCmpt {}\n\nTestBed.configureTestingModule({\n  declarations: [TestCmpt, FailInConstructorAlways],\n});",
                      "successors": [
                        {
                          "id": 5,
                          "label": "expect(() => {\n  TestBed.createComponent(TestCmpt);\n}).toThrowError('Error in a constructor');\nexpect(() => {\n  TestBed.createComponent(TestCmpt);\n}).toThrowError('Error in a constructor');",
                          "successors": [
                            {
                              "id": 7,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 590,
              "end_line": 617,
              "functions": [],
              "classes": [
                {
                  "name": "FailInConstructorOnce",
                  "type": "class",
                  "start_line": 593,
                  "end_line": 599,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: '[failInConstructorOnce]',\n        standalone: false,\n      })\n      class FailInConstructorOnce {\n        constructor() {\n          if (firstRun) {\n            firstRun = false;",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: '[failInConstructorOnce]',\nstandalone: false,\nclass FailInConstructorOnce {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "constructor() {\nif (firstRun) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "firstRun = false;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should render even if a directive constructor throws in the first create pass', () => {\n      let firstRun = true;\n      @Directive({\n            firstRun = false;\n            throw new Error('Error in a constructor');\n          }\n        }\n      }\n      @Component({\n        template: `<div failInConstructorOnce>OK</div>`,\n        standalone: false,\n      })\n      class TestCmpt {}\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, FailInConstructorOnce],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in a constructor');\n      const fixture = TestBed.createComponent(TestCmpt);\n      expect(fixture.nativeElement.textContent).toContain('OK');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should render even if a directive constructor throws in the first create pass', () => {\nlet firstRun = true;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Directive({\nfirstRun = false;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "throw new Error('Error in a constructor');",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "@Component({\n  template: `<div failInConstructorOnce>OK</div>`,\n  standalone: false,\n})\nclass TestCmpt {}",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "TestBed.configureTestingModule({\n  declarations: [TestCmpt, FailInConstructorOnce],\n});",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "expect(() => {\n  TestBed.createComponent(TestCmpt);\n}).toThrowError('Error in a constructor');",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "const fixture = TestBed.createComponent(TestCmpt);\nexpect(fixture.nativeElement.textContent).toContain('OK');",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 618,
              "end_line": 642,
              "functions": [],
              "classes": [
                {
                  "name": "FailInInputAlways",
                  "type": "class",
                  "start_line": 620,
                  "end_line": 628,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: '[failInInputAlways]',\n        standalone: false,\n      })\n      class FailInInputAlways {\n        @Input()\n        set failInInputAlways(_: string) {\n          throw new Error('Error in an input');\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: '[failInInputAlways]',\nstandalone: false,",
                      "successors": [
                        {
                          "id": 2,
                          "label": "class FailInInputAlways {",
                          "successors": [
                            {
                              "id": 3,
                              "label": "@Input()\nset failInInputAlways(_: string) {\nthrow new Error('Error in an input');",
                              "successors": []
                            },
                            {
                              "id": 5,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 633,
                  "end_line": 633,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class TestCmpt {}",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class TestCmpt {}",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should consistently report errors raised a directive input setter', () => {\n      @Directive({\n      }\n      @Component({\n        template: `<div failInInputAlways=\"static\"></div>`,\n        standalone: false,\n      })\n      class TestCmpt {}\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, FailInInputAlways],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in an input');\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in an input');",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should consistently report errors raised a directive input setter', () => {\n@Directive({ })",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Component({ template: `<div failInInputAlways=\"static\"></div>`, standalone: false, })\nclass TestCmpt {}\nTestBed.configureTestingModule({ declarations: [TestCmpt, FailInInputAlways], });",
                      "successors": [
                        {
                          "id": 5,
                          "label": "expect(() => { TestBed.createComponent(TestCmpt); }).toThrowError('Error in an input');\nexpect(() => { TestBed.createComponent(TestCmpt); }).toThrowError('Error in an input');",
                          "successors": [
                            {
                              "id": 7,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 643,
              "end_line": 669,
              "functions": [],
              "classes": [
                {
                  "name": "SomeDirective",
                  "type": "class",
                  "start_line": 646,
                  "end_line": 648,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: '[someDir]',\n        standalone: false,\n      })",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: '[someDir]',\nstandalone: false,",
                      "successors": []
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 652,
                  "end_line": 654,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        standalone: false,\n      })\n      class TestCmpt {",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "standalone: false,\nclass TestCmpt {",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    });\n    it('should consistently report errors raised a static query setter', () => {\n      @Directive({\n      })\n      class SomeDirective {}\n      @Component({\n        template: `<div someDir></div>`,\n      class TestCmpt {\n        @ViewChild(SomeDirective, {static: true})\n        set directive(_: SomeDirective) {\n          throw new Error('Error in static query setter');\n        }\n      }\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, SomeDirective],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in static query setter');\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in static query setter');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "});\nit('should consistently report errors raised in a static query setter', () => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Directive({\n})\nclass SomeDirective {}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "@Component({\n  template: `<div someDir></div>`,\n})\nclass TestCmpt {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "@ViewChild(SomeDirective, {static: true})\nset directive(_: SomeDirective) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "throw new Error('Error in static query setter');\n}",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "}\nTestBed.configureTestingModule({\n  declarations: [TestCmpt, SomeDirective],\n});",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "expect(() => {\nTestBed.createComponent(TestCmpt);",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "}).toThrowError('Error in static query setter');\nexpect(() => {",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "TestBed.createComponent(TestCmpt);\n}).toThrowError('Error in static query setter');",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "label": "});",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 670,
              "end_line": 703,
              "functions": [],
              "classes": [
                {
                  "name": "SomeDirective",
                  "type": "class",
                  "start_line": 673,
                  "end_line": 675,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: '[someDir]',\n        standalone: false,\n      })",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: '[someDir]',\nstandalone: false,",
                      "successors": []
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 680,
                  "end_line": 694,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      })\n      class TestCmpt {\n        @ViewChild(SomeDirective, {static: true})\n        get directive() {\n          return this._directive;\n        }\n        set directive(directiveInstance: SomeDirective) {\n          if (!hasThrown) {\n            hasThrown = true;\n            throw new Error('Error in static query setter');\n          }\n          this._directive = directiveInstance;\n        }\n        private _directive!: SomeDirective;\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class TestCmpt {\n@ViewChild(SomeDirective, {static: true})",
                      "successors": [
                        {
                          "id": 3,
                          "label": "get directive() {\nreturn this._directive;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}\nset directive(directiveInstance: SomeDirective) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "if (!hasThrown) {\nhasThrown = true;",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "throw new Error('Error in static query setter');",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 10,
                                  "label": "this._directive = directiveInstance;\n}",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "private _directive!: SomeDirective;\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should match a static query, even if its setter throws in the first create pass', () => {\n      let hasThrown = false;\n      @Directive({\n      })\n      class SomeDirective {}\n      @Component({\n        template: `<div someDir></div>`,\n        standalone: false,\n      }\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, SomeDirective],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in static query setter');\n      const fixture = TestBed.createComponent(TestCmpt);\n      expect(fixture.componentInstance.directive).toBeInstanceOf(SomeDirective);\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should match a static query, even if its setter throws in the first create pass', () => {\nlet hasThrown = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Directive({})\nclass SomeDirective {}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "@Component({ template: `<div someDir></div>`, standalone: false, })\nTestBed.configureTestingModule({ declarations: [TestCmpt, SomeDirective], });",
                          "successors": [
                            {
                              "id": 7,
                              "label": "expect(() => { TestBed.createComponent(TestCmpt); }).toThrowError('Error in static query setter');\nconst fixture = TestBed.createComponent(TestCmpt);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "expect(fixture.componentInstance.directive).toBeInstanceOf(SomeDirective);\n});",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 704,
              "end_line": 732,
              "functions": [],
              "classes": [
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 711,
                  "end_line": 717,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class TestCmpt {\n        constructor() {\n          if (!hasThrown) {\n            hasThrown = true;\n            throw new Error('Error in a constructor');\n          }\n        }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class TestCmpt {",
                      "successors": [
                        {
                          "id": 2,
                          "label": "constructor() {",
                          "successors": [
                            {
                              "id": 3,
                              "label": "if (!hasThrown) {\nhasThrown = true;",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "throw new Error('Error in a constructor');",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 720,
                  "end_line": 722,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        template: `<test><test><test></test></test></test>`,\n        standalone: false,\n      })",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "template: `<test><test><test></test></test></test>`,\nstandalone: false,",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should render a recursive component if it throws during the first creation pass', () => {\n      let hasThrown = false;\n      @Component({\n        selector: 'test',\n        template: `<ng-content></ng-content>OK`,\n        standalone: false,\n      })\n        }\n      }\n      @Component({\n      })\n      class App {}\n      TestBed.configureTestingModule({\n        declarations: [App, TestCmpt],\n      });\n      expect(() => {\n        TestBed.createComponent(App);\n      }).toThrowError('Error in a constructor');\n      const fixture = TestBed.createComponent(App);\n      expect(fixture.nativeElement.textContent).toContain('OKOKOK');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should render a recursive component if it throws during the first creation pass', () => {\nlet hasThrown = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Component({\n  selector: 'test',\n  template: `",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "`<ng-content></ng-content>OK`,\n  standalone: false,\n})\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}\n@Component({\n})",
                          "successors": [
                            {
                              "id": 8,
                              "label": "class App {}\nTestBed.configureTestingModule({\n  declarations: [App, TestCmpt],\n});",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "expect(() => {\nTestBed.createComponent(App);",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "}).toThrowError('Error in a constructor');\nconst fixture = TestBed.createComponent(App);",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "expect(fixture.nativeElement.textContent).toContain('OKOKOK');\n});",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 733,
              "end_line": 766,
              "functions": [],
              "classes": [
                {
                  "name": "FailInConstructorOnce",
                  "type": "class",
                  "start_line": 736,
                  "end_line": 746,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: '[failInConstructorOnce]',\n        standalone: false,\n      })\n      class FailInConstructorOnce {\n        constructor() {\n          if (firstRun) {\n            firstRun = false;\n            throw new Error('Error in a constructor');\n          }\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: '[failInConstructorOnce]',\nstandalone: false,\nclass FailInConstructorOnce {\n  constructor() {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "if (firstRun) {\n  firstRun = false;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "  throw new Error('Error in a constructor');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "TestCmpt",
                  "type": "class",
                  "start_line": 748,
                  "end_line": 749,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        template: `<div failInConstructorOnce>{{value}}</div>`,\n        standalone: false,",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "template: `<div failInConstructorOnce>{{value}}</div>`,\nstandalone: false,",
                      "successors": []
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should continue detecting changes if a directive throws in its constructor', () => {\n      let firstRun = true;\n      @Directive({\n      }\n      @Component({\n        standalone: false,\n      })\n      class TestCmpt {\n        value = 0;\n      }\n      TestBed.configureTestingModule({\n        declarations: [TestCmpt, FailInConstructorOnce],\n      });\n      expect(() => {\n        TestBed.createComponent(TestCmpt);\n      }).toThrowError('Error in a constructor');\n      const fixture = TestBed.createComponent(TestCmpt);\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toContain('0');\n      fixture.componentInstance.value = 1;\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toContain('1');\n      fixture.componentInstance.value = 2;",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should continue detecting changes if a directive throws in its constructor', () => {\nlet firstRun = true;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Directive({ })\n@Component({ standalone: false, })",
                      "successors": [
                        {
                          "id": 5,
                          "label": "class TestCmpt { value = 0; }\nTestBed.configureTestingModule({ declarations: [TestCmpt, FailInConstructorOnce], });",
                          "successors": [
                            {
                              "id": 7,
                              "label": "expect(() => { TestBed.createComponent(TestCmpt); }).toThrowError('Error in a constructor');\nconst fixture = TestBed.createComponent(TestCmpt);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toContain('0');",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "fixture.componentInstance.value = 1;\nfixture.detectChanges();",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "expect(fixture.nativeElement.textContent).toContain('1');\nfixture.componentInstance.value = 2;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "it",
              "type": "function",
              "start_line": 770,
              "end_line": 806,
              "functions": [],
              "classes": [
                {
                  "name": "DoesNotExist",
                  "type": "class",
                  "start_line": 772,
                  "end_line": 773,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      @Injectable()\n      class DoesNotExist {}",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "@Injectable()\nclass DoesNotExist {}",
                      "successors": []
                    }
                  ]
                },
                {
                  "name": "Dir",
                  "type": "class",
                  "start_line": 775,
                  "end_line": 779,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "        selector: 'dir',\n        standalone: false,\n      })\n      class Dir {\n        constructor(willCauseError: DoesNotExist) {}",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "selector: 'dir',",
                      "successors": [
                        {
                          "id": 2,
                          "label": "standalone: false,",
                          "successors": []
                        },
                        {
                          "id": 3,
                          "label": "})",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "class Dir {",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "constructor(willCauseError: DoesNotExist) {}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 789,
                  "end_line": 794,
                  "functions": [],
                  "classes": [],
                  "simplified_code": "      class App {\n        @ViewChild('broken') template!: TemplateRef<unknown>;\n        constructor(private _viewContainerRef: ViewContainerRef) {}\n        insertTemplate() {\n          this._viewContainerRef.createEmbeddedView(this.template);\n        }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "class App {\n  @ViewChild('broken') template!: TemplateRef<unknown>;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "  constructor(private _viewContainerRef: ViewContainerRef) {}\n  insertTemplate() {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    this._viewContainerRef.createEmbeddedView(this.template);\n  }",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should consistently report errors raised by createEmbeddedView', () => {\n      // Intentionally hasn't been added to `providers` so that it throws a DI error.\n      class DoesNotExist {}\n      @Directive({\n        constructor(willCauseError: DoesNotExist) {}\n      }\n      @Component({\n        template: `\n          <ng-template #broken>\n            <dir></dir>\n          </ng-template>\n        `,\n        standalone: false,\n      })\n        }\n      }\n      TestBed.configureTestingModule({declarations: [App, Dir]});\n      const fixture = TestBed.createComponent(App);\n      const tryRender = () => {\n        fixture.componentInstance.insertTemplate();\n        fixture.detectChanges();\n      };\n      fixture.detectChanges();\n      // We try to render the same template twice to ensure that we get consistent error messages.\n      expect(tryRender).toThrowError(/No provider for DoesNotExist/);\n      expect(tryRender).toThrowError(/No provider for DoesNotExist/);\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should consistently report errors raised by createEmbeddedView', () => {\n// Intentionally hasn't been added to `providers` so that it throws a DI error.\nclass DoesNotExist {}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Directive({\n  constructor(willCauseError: DoesNotExist) {}\n})\n@Component({\n  template: `\n    <ng-template #broken>\n      <dir></dir>\n    </ng-template>\n  `,\n  standalone: false,\n})",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}\n}\nTestBed.configureTestingModule({declarations: [App, Dir]});",
                          "successors": [
                            {
                              "id": 7,
                              "label": "const fixture = TestBed.createComponent(App);\nconst tryRender = () => {\n  fixture.componentInstance.insertTemplate();\n  fixture.detectChanges();\n};",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "fixture.detectChanges();\n// We try to render the same template twice to ensure that we get consistent error messages.",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "expect(tryRender).toThrowError(/No provider for DoesNotExist/);\nexpect(tryRender).toThrowError(/No provider for DoesNotExist/);",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "});",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('create mode error handling', () => {\n    });\n    });\n      }).toThrowError('Error in an input');\n    });\n    });\n    });\n      fixture.componentInstance.value = 2;\n      fixture.detectChanges();\n      expect(fixture.nativeElement.textContent).toContain('2');\n    });\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('create mode error handling', () => {\n});",
              "successors": [
                {
                  "id": 3,
                  "label": "});",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}).toThrowError('Error in an input');",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "});\n});",
                      "successors": [
                        {
                          "id": 7,
                          "label": "});\nfixture.componentInstance.value = 2;",
                          "successors": [
                            {
                              "id": 9,
                              "label": "fixture.detectChanges();\nexpect(fixture.nativeElement.textContent).toContain('2');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('view insertion', () => {\n  });\n  });\n  });\n  });\n  });\n  });\n  });",
      "blocks": [
        {
          "id": 1,
          "label": "describe('view insertion', () => {\n});",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import {CommonModule} from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Input,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\n  });\n});",
  "blocks": [
    {
      "id": 1,
      "label": "import {CommonModule} from '@angular/common';\nimport {ChangeDetectorRef, Component, Directive, EmbeddedViewRef, Injectable, Injector, Input, TemplateRef, ViewChild, ViewContainerRef, ViewRef} from '@angular/core';",
      "successors": [
        {
          "id": 3,
          "label": "import {TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';",
          "successors": []
        }
      ]
    }
  ]
}