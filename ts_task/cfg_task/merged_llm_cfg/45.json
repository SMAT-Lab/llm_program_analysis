{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 145,
  "functions": [],
  "classes": [
    {
      "name": "AlbumDataItem",
      "type": "class",
      "start_line": 27,
      "end_line": 145,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 48,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(id: string, count: number, displayName: string, selectType: number, deviceId: string, albumType: number, albumSubType: number) {\n    this.id = id;\n    this.displayName = displayName;\n    this.count = count;\n    this.isDisableRename = MediaConstants.ALBUM_DISABLE_RENAME_LIST.has(id);\n    this.isDisableDelete = MediaConstants.ALBUM_DISABLE_DELETE_LIST.has(id);\n    this.selectType = selectType;\n    this.deviceId = deviceId;\n    this.objectIndex = objectIndex++;\n    this.albumType = albumType;\n    this.albumSubType = albumSubType;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "getHashCode",
          "type": "function",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "  getHashCode(): string {\n    return this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getHashCode(): string {\nreturn this.objectIndex + '' + this.id + ' ' + this.orientation + ' ' + this.isSelect;",
              "successors": []
            }
          ]
        },
        {
          "name": "load",
          "type": "function",
          "start_line": 65,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "  async load(): Promise<void> {\n    if (this.status >= MediaConstants.LOADED) {\n      return;\n    }\n    if (this.fileUir !== undefined && this.fileUir !== null) {\n      let fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));\n      await this.update(fileAsset);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async load(): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.status >= MediaConstants.LOADED) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "if (this.fileUir !== undefined && this.fileUir !== null) {\nlet fileAsset = (await userFileModel.getMediaItemByUri(this.fileUir));",
                  "successors": [
                    {
                      "id": 6,
                      "label": "await this.update(fileAsset);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 75,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'this.uri ' + this.displayName);\n    Log.info(TAG, 'this.uri ' + this.uri);\n    if (fileAsset != null) {\n      this.fileUir = fileAsset.uri;\n      this.fileAsset = fileAsset;\n      if (this.fileAsset != null) {\n        await this.getThumbnail();\n      }\n      Log.info(TAG, 'this.fileUri ' + this.fileUir);\n    }\n    this.status = MediaConstants.LOADED;\n    this.isSelect = selectManager.isSelect(this.id, this.isSelect);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'this.uri ' + this.displayName);\nLog.info(TAG, 'this.uri ' + this.uri);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (fileAsset != null) {\nthis.fileUir = fileAsset.uri;\nthis.fileAsset = fileAsset;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (this.fileAsset != null) {\nawait this.getThumbnail();",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "Log.info(TAG, 'this.fileUri ' + this.fileUir);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "this.status = MediaConstants.LOADED;\nthis.isSelect = selectManager.isSelect(this.id, this.isSelect);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getThumbnail",
          "type": "function",
          "start_line": 90,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getThumbnail(): Promise<PixelMap> {\n    if (this.thumbnail == undefined) {\n      let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n      try {\n        this.thumbnail = await this.fileAsset.getThumbnail(size)\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return this.thumbnail;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getThumbnail(): Promise<PixelMap> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.thumbnail == undefined) {\nlet size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };",
                  "successors": [
                    {
                      "id": 4,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "this.thumbnail = await this.fileAsset.getThumbnail(size)\n}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return this.thumbnail;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "} catch (err) {\nLog.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));",
                          "successors": [
                            {
                              "id": 8,
                              "label": "}\nreturn this.thumbnail;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "return this.thumbnail;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getVideoCount",
          "type": "function",
          "start_line": 102,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getVideoCount(): Promise<number> {\n    if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\n      return 0;\n    }\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let albumPredicates = new dataSharePredicates.DataSharePredicates();\n    albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\n    let albumFetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: albumPredicates\n    };\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)\n    predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let fileFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\n    return fileAssets.length;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getVideoCount(): Promise<number> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.selectType === MediaConstants.SELECT_TYPE_IMAGE) {\nreturn 0;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let fileAssets: photoAccessHelper.PhotoAsset[] = [];\nlet albumPredicates = new dataSharePredicates.DataSharePredicates();",
                  "successors": [
                    {
                      "id": 6,
                      "label": "albumPredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, this.displayName)\nlet albumFetchOption = {\n  fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n  predicates: albumPredicates\n};",
                      "successors": [
                        {
                          "id": 8,
                          "label": "let predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.PhotoKeys.PHOTO_TYPE, photoAccessHelper.PhotoType.VIDEO)",
                          "successors": [
                            {
                              "id": 10,
                              "label": "predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\nlet fileFetchOption = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: predicates\n};",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "fileAssets = await userFileModel.getAllMediaItemsByType(this.albumType, this.albumSubType, albumFetchOption, fileFetchOption);\nreturn fileAssets.length;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setSelect",
          "type": "function",
          "start_line": 124,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.id, this.isSelect);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;",
              "successors": [
                {
                  "id": 3,
                  "label": "    selectManager.setSelect(this.id, this.isSelect);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onDelete",
          "type": "function",
          "start_line": 129,
          "end_line": 140,
          "functions": [],
          "classes": [],
          "simplified_code": "  async onDelete(): Promise<boolean> {\n    try {\n      Log.error(TAG, this.displayName);\n      await userFileModel.deleteAlbum(this.displayName);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async onDelete(): Promise<boolean> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.error(TAG, this.displayName);\nawait userFileModel.deleteAlbum(this.displayName);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "selectManager.deleteSelect(this.uri);\nthis.status = MediaConstants.TRASHED;",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return true;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "} catch (err) {\nLog.error(TAG, 'onDelete error: ' + JSON.stringify(err));",
                  "successors": [
                    {
                      "id": 10,
                      "label": "return false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isDeleted",
          "type": "function",
          "start_line": 142,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isDeleted(): boolean {\nreturn this.status === MediaConstants.TRASHED;",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class AlbumDataItem {\n  index: number;\n  id: string;\n  uri: string;\n  orientation: number;\n  displayName: string;\n  count: number;\n  isDisableRename: boolean;\n  isDisableDelete: boolean;\n  innerId: number;\n  selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  deviceId: string = '';\n  isSelect: boolean = false;\n  status: number = MediaConstants.UNDEFINED;\n  objectIndex: number;\n  albumType: number;\n  albumSubType: number;\n  fileUir: string = undefined;\n  fileAsset: photoAccessHelper.PhotoAsset;\n  thumbnail: PixelMap = undefined;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AlbumDataItem {\nindex: number;\nid: string;\nuri: string;\norientation: number;\ndisplayName: string;\ncount: number;\nisDisableRename: boolean;\nisDisableDelete: boolean;\ninnerId: number;\nselectType: number = MediaConstants.SELECT_TYPE_ALL;\ndeviceId: string = '';\nisSelect: boolean = false;\nstatus: number = MediaConstants.UNDEFINED;\nobjectIndex: number;\nalbumType: number;\nalbumSubType: number;\nfileUir: string = undefined;\nfileAsset: photoAccessHelper.PhotoAsset;\nthumbnail: PixelMap = undefined;",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { selectManager } from './SelectManager';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataItem';\n\nlet objectIndex = 0;\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';",
      "successors": [
        {
          "id": 3,
          "label": "import { selectManager } from './SelectManager';\nimport { Log } from '../utils/Log';",
          "successors": [
            {
              "id": 5,
              "label": "import { MediaConstants } from '../constants/MediaConstants';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';",
              "successors": [
                {
                  "id": 7,
                  "label": "const TAG = 'AlbumDataItem';\nlet objectIndex = 0;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}