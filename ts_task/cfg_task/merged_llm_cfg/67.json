{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 540,
  "functions": [],
  "classes": [
    {
      "name": "UserFileModelItem",
      "type": "class",
      "start_line": 29,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "export class UserFileModelItem {\n  fileAsset: photoAccessHelper.PhotoAsset;\n  counts: number;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class UserFileModelItem {",
          "successors": [
            {
              "id": 2,
              "label": "  fileAsset: photoAccessHelper.PhotoAsset;",
              "successors": []
            },
            {
              "id": 3,
              "label": "  counts: number;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "UserFileModel",
      "type": "class",
      "start_line": 34,
      "end_line": 538,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 37,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor() {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {",
              "successors": []
            }
          ]
        },
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 40,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(context): void {\n    if (this.userFileMgr == undefined) {\n      this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(context): void {\nif (this.userFileMgr == undefined) {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.userFileMgr = photoAccessHelper.getPhotoAccessHelper(context);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getUserFileMgr",
          "type": "function",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "  getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getUserFileMgr(): photoAccessHelper.PhotoAccessHelper {\n    return this.userFileMgr;",
              "successors": []
            }
          ]
        },
        {
          "name": "createOne",
          "type": "function",
          "start_line": 50,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "  async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);\n    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    await album.addAssets([fileAsset]);\n    return fileAsset;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);",
              "successors": [
                {
                  "id": 3,
                  "label": "    let fileAsset = await this.userFileMgr.createAsset(displayName, albumUri);\n    let album = await this.getUserAlbumItemByUri(albumUri);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    await album.addAssets([fileAsset]);\n    return fileAsset;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUserAlbumItemByUri",
          "type": "function",
          "start_line": 58,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\nif (fetchResult.getCount() > 0) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "album = fetchResult.getFirstObject();",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "} catch (err) {\nLog.error(TAG, 'get Album fetchResult failed with err: ' + err);",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "} finally {\nif (fetchResult != null) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "fetchResult.close();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "return album;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "copyOne",
          "type": "function",
          "start_line": 84,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": "  async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n    let fd: Number = await this.openAsset('R', source);\n    if (fd <= 0) {\n      throw new Error('fd is invalid');\n    }\n\n    let targetFd: Number = await this.openAsset('RW', target);\n    if (targetFd <= 0) {\n      throw new Error('targetFd is invalid');\n    }\n\n    await fileIO.copyFile(fd, targetFd);\n\n    await this.closeAsset(fd, source);\n    await this.closeAsset(targetFd, target);\n\n    Log.debug(TAG, 'copy end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {\n  Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);\n  let fd: Number = await this.openAsset('R', source);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (fd <= 0) {\n  throw new Error('fd is invalid');",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let targetFd: Number = await this.openAsset('RW', target);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (targetFd <= 0) {\n  throw new Error('targetFd is invalid');",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "await fileIO.copyFile(fd, targetFd);\nawait this.closeAsset(fd, source);\nawait this.closeAsset(targetFd, target);\nLog.debug(TAG, 'copy end');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "deleteOne",
          "type": "function",
          "start_line": 104,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "  async deleteOne(uri: string): Promise<void> {\n    Log.debug(TAG, 'deleteAsset uri: ' + uri);\n    try {\n      await this.userFileMgr.deleteAssets([uri]);\n    } catch (err) {\n      Log.error(TAG, 'deleteOne with error: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async deleteOne(uri: string): Promise<void> {\nLog.debug(TAG, 'deleteAsset uri: ' + uri);",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await this.userFileMgr.deleteAssets([uri]);\n}",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "catch (err) { Log.error(TAG, 'deleteOne with error: ' + err); }\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "recover",
          "type": "function",
          "start_line": 113,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": "  async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.debug(TAG, 'recoverPhotoAssetsDemoPromise:' + fileAsset.displayName);\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      Log.debug(TAG, 'album  get');\n      album.recoverAssets([fileAsset]).then(() => {\n        Log.debug(TAG, 'album recoverPhotoAssets successfully');\n      }).catch((err) => {\n        Log.info(TAG, 'album recoverPhotoAssets failed with error: ' + err);\n      });\n} catch (err) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "Log.error(TAG, 'recoverPhotoAssetsDemoPromise failed with error: ' + err);\n} finally {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "permanentDelete",
          "type": "function",
          "start_line": 134,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": "  async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\n    try {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\n    } catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    let albumFetchResult = null;\ntry {\n      Log.debug(TAG, 'permanentDelete');\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);",
              "successors": [
                {
                  "id": 3,
                  "label": "let album = await albumFetchResult.getFirstObject();\n      album.deleteAssets([fileAsset]).then(() => {\n        Log.debug('album deletePhotoAssets successfully');\n      }).catch((err) => {\n        Log.error(TAG, 'album deletePhotoAssets failed with error: ' + err);\n      });\nfinally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "catch (err) {\n      Log.error(TAG, 'permanentDelete failed with error: ' + err);\n    }\nfinally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "createAlbum",
          "type": "function",
          "start_line": 154,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": "  async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\n    let newAlbum: SimpleAlbumDataItem = undefined;\n    try {\n      let album = await this.userFileMgr.createAlbum(albumName);\n      newAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri,\n        '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);\n    } catch (err) {\n      Log.error(TAG, 'createAlbum failed with error: ' + err);\n    }\n    return newAlbum;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {\nlet newAlbum: SimpleAlbumDataItem = undefined;",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let album = await this.userFileMgr.createAlbum(albumName);\nnewAlbum = new SimpleAlbumDataItem(MediaConstants.ALBUM_ID_USER, albumName, album.albumUri, '', '', MediaConstants.ALBUM_TYPE_USER, MediaConstants.ALBUM_SUBTYPE_USER_GENERIC);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "return newAlbum;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "} catch (err) {\nLog.error(TAG, 'createAlbum failed with error: ' + err);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "return newAlbum;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "deleteAlbum",
          "type": "function",
          "start_line": 166,
          "end_line": 193,
          "functions": [],
          "classes": [],
          "simplified_code": "  async deleteAlbum(albumName: string): Promise<void> {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\n        Log.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\n        this.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n          Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n        }).catch((err) => {\n          Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n        });\n      }\n    } catch (err) {\n      Log.error(TAG, 'deletePhotoAlbumsPromise failed with error: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async deleteAlbum(albumName: string): Promise<void> {\nlet fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\nlet predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\nlet fetchOptions = {\n    fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n    predicates: predicates\n};\nfetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "for (let i = 0; i < fetchResult.getCount(); i++) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let albumAsset = await fetchResult.getObjectByPosition(i);\nLog.info(TAG, 'deleteAlbum albumUri' + albumAsset.albumUri);\nLog.info(TAG, 'deleteAlbum albumName' + albumAsset.albumName);\nthis.userFileMgr.deleteAlbums([albumAsset]).then(() => {\n    Log.info(TAG, 'deletePhotoAlbumsPromise successfully');\n}).catch((err) => {\n    Log.error(TAG, 'deletePhotoAlbumsPromise failed with err: ' + err);\n});",
                          "successors": [
                            {
                              "id": 5,
                              "label": "for (let i = 0; i < fetchResult.getCount(); i++) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "}\n}",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "deleteAll",
          "type": "function",
          "start_line": 195,
          "end_line": 216,
          "functions": [],
          "classes": [],
          "simplified_code": "  async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n    Log.info(TAG, 'deleteAll');\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n      Log.debug(TAG, 'deleteAll getPhotoAssets');\n      let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n      let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n      clearTimeout(deleteAllGetAllObject);\n      for (let i = 0;i < fileAssets.length; i++) {\n        await this.deleteOne(fileAssets[i].uri);\n      }\n      Log.debug(TAG, 'deleteAll getFirstObject');\n    } catch (err) {\n      Log.error(TAG, 'deleteAll error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'deleteAll finish');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {\n  Log.info(TAG, 'deleteAll');\n  let fetchFileResult: photoAccessHelper.FetchResult = null;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n  fetchFileResult = await this.userFileMgr.getAssets(fetchOption);\n  Log.debug(TAG, 'deleteAll getPhotoAssets');\n  let deleteAllGetAllObject = hiSysEventDataQueryTimedOut('deleteAllGetAllObject');\n  let fileAssets: photoAccessHelper.PhotoAsset[] = await fetchFileResult.getAllObject();\n  clearTimeout(deleteAllGetAllObject);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for (let i = 0;i < fileAssets.length; i++) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "  await this.deleteOne(fileAssets[i].uri);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "Log.debug(TAG, 'deleteAll getFirstObject');",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} catch (err) {\nLog.error(TAG, 'deleteAll error:' + JSON.stringify(err));",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "} finally {\nif (fetchFileResult != null) {\n  fetchFileResult.close();\n}",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "Log.debug(TAG, 'deleteAll finish');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getAllMediaItems",
          "type": "function",
          "start_line": 218,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let emptyFetchOption = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\n      Log.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());\n      for (let i = 0;i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMediaItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {\nlet fileAssets: photoAccessHelper.PhotoAsset[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "try {\nlet predicates = new dataSharePredicates.DataSharePredicates();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\nlet emptyFetchOption = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: predicates\n};",
                          "successors": [
                            {
                              "id": 8,
                              "label": "photoFetchResult = await this.userFileMgr.getAssets(emptyFetchOption);\nLog.info(TAG, 'getAllMediaItems count: ' + photoFetchResult.getCount());",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "for (let i = 0;i < photoFetchResult.getCount(); i++) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "} catch (err) {\nLog.error(TAG, 'getAllMediaItems failed with err: ' + err);",
                      "successors": [
                        {
                          "id": 15,
                          "label": "} finally {\nif (photoFetchResult != null) {",
                          "successors": [
                            {
                              "id": 17,
                              "label": "photoFetchResult.close();\n}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 19,
                          "label": "}\nreturn fileAssets;",
                          "successors": [
                            {
                              "id": 21,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAllMovingPhotoItems",
          "type": "function",
          "start_line": 243,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      predicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\n      for (let i = 0; i < photoFetchResult.getCount(); i++) {\n        fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n      }\n    } catch (err) {\n      Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n    return fileAssets;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {\n  let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n  let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\npredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\nlet fetchOptions: photoAccessHelper.FetchOptions = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: predicates\n};\nphotoFetchResult = await this.userFileMgr.getAssets(fetchOptions);\nLog.info(TAG, 'getAllMovingPhotoItems count: ' + photoFetchResult.getCount());\nfor (let i = 0; i < photoFetchResult.getCount(); i++) {\n  fileAssets.push(await photoFetchResult.getObjectByPosition(i));\n}\n}",
                  "successors": [
                    {
                      "id": 7,
                      "label": "finally {\nif (photoFetchResult != null) {\n  photoFetchResult.close();\n}",
                      "successors": [
                        {
                          "id": 9,
                          "label": "}\nreturn fileAssets;\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "} catch (err) {\n  Log.error(TAG, 'getAllMovingPhotoItems failed with err: ' + err);\n}\nfinally {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "if (photoFetchResult != null) {\n  photoFetchResult.close();\n}\n}",
                      "successors": [
                        {
                          "id": 10,
                          "label": "return fileAssets;\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAllMediaItemsByType",
          "type": "function",
          "start_line": 269,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\n    let fileAssets: photoAccessHelper.PhotoAsset[] = [];\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAllMediaItemsByUserFile');\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {\n        Log.info(TAG, 'albumFetchOption ！= null');\n        fetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\n      } else {\n        fetchResult = await this.userFileMgr.getAlbums(type, subType);\n      }\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        try {\n          photoFetchResult = await albumAsset.getAssets(fileFetchOption);\n          for (let i = 0; i < photoFetchResult.getCount(); i++) {\n            let photoAsset = await photoFetchResult.getObjectByPosition(i);\n            fileAssets.push(photoAsset);\n            Log.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n          }\n        } catch (err) {\n          Log.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.info(TAG, 'fileAssets: ' + fileAssets.length);\n    return fileAssets;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {\nlet fileAssets: photoAccessHelper.PhotoAsset[] = [];\nlet fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\nLog.info(TAG, 'getAllMediaItemsByUserFile');\nLog.info(TAG, 'type:' + type);\nLog.info(TAG, 'subType:' + subType);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (type === photoAccessHelper.AlbumType.USER && albumFetchOption != null) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "Log.info(TAG, 'albumFetchOption != null');\nfetchResult = await this.userFileMgr.getAlbums(type, subType, albumFetchOption);\nLog.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());",
                          "successors": [
                            {
                              "id": 9,
                              "label": "for (let i = 0; i < fetchResult.getCount(); i++) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "let albumAsset: photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\nlet photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "try {\nphotoFetchResult = await albumAsset.getAssets(fileFetchOption);",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "for (let i = 0; i < photoFetchResult.getCount(); i++) {",
                                          "successors": [
                                            {
                                              "id": 14,
                                              "label": "let photoAsset = await photoFetchResult.getObjectByPosition(i);\nfileAssets.push(photoAsset);\nLog.info(TAG, 'getPhotoAssets successfully, file displayName: ' + photoAsset.displayName);\n}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 16,
                                      "label": "} catch (err) {\nLog.info(TAG, 'get Album getPhotoAssets failed with err: ' + err);",
                                      "successors": []
                                    },
                                    {
                                      "id": 18,
                                      "label": "} finally {\nif (photoFetchResult != null) {\n  photoFetchResult.close();\n}",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "} else {\nfetchResult = await this.userFileMgr.getAlbums(type, subType);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 21,
                  "label": "} catch (err) {\nLog.error(TAG, 'get Album fetchResult failed with err: ' + err);",
                  "successors": []
                },
                {
                  "id": 23,
                  "label": "} finally {\nif (fetchResult != null) {\n  fetchResult.close();\n}",
                  "successors": [
                    {
                      "id": 25,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getMediaItemByUriFromTrash",
          "type": "function",
          "start_line": 312,
          "end_line": 351,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n      try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);\n        for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }\n      } catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      } finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    } finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }\n    return fileAsset;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUriFromTrash');\n    Log.info(TAG, 'uri:' + uri);\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let fileAsset: photoAccessHelper.PhotoAsset = null;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);\n      let albumAsset = await albumFetchResult.getFirstObject();\n      let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {\n        let predicates = new dataSharePredicates.DataSharePredicates();\n        let emptyFetchOption = {\n          fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n          predicates: predicates\n        };\n        photoFetchResult = await albumAsset.getAssets(emptyFetchOption);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "for (let i = 0; i < photoFetchResult.getCount(); i++) {\n          let photoAsset = await photoFetchResult.getObjectByPosition(i);\n          if (photoAsset.uri === uri) {\n            fileAsset = photoAsset;\n            Log.info(TAG, 'getMediaItemByUriFromTrash success: ' + photoAsset.displayName);\n            break;\n          }\n        }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "catch (err) {\n        Log.info(TAG, 'getMediaItemByUriFromTrash getPhotoAssets failed with err: ' + err);\n      }",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "finally {\n        if (photoFetchResult != null) {\n          photoFetchResult.close();\n        }\n      }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "catch (err) {\n      Log.error(TAG, 'getMediaItemByUriFromTrash failed with error: ' + err);\n    }",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "finally {\n      if (albumFetchResult != null) {\n        albumFetchResult.close();\n      }\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getMediaItemByUri",
          "type": "function",
          "start_line": 353,
          "end_line": 378,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {\n      Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return fileAsset;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {\n    Log.info(TAG, 'getMediaItemByUri');\n    Log.info(TAG, 'uri:' + uri);\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let fileAsset: photoAccessHelper.PhotoAsset = null;\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null\n    try {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'fetchResult start');\n      fetchResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.info(TAG, 'fetchResult count ' + fetchResult.getCount());\n      fileAsset = await fetchResult.getFirstObject();\n      Log.info(TAG, 'fileAsset ' + fileAsset.displayName);\nif (fetchResult != null) {\n        fetchResult.close();\n      }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return fileAsset;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "label": "Log.error(TAG, 'getMediaItemByUri failed, message = ' + err);\nif (fetchResult != null) {\n        fetchResult.close();\n      }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return fileAsset;",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "label": "if (fetchResult != null) {\n        fetchResult.close();\n      }\nreturn fileAsset;",
              "successors": []
            }
          ]
        },
        {
          "name": "getMediaItemCountsByDisplayName",
          "type": "function",
          "start_line": 380,
          "end_line": 403,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\n    Log.info(TAG, 'getMediaItemCountsByDisplayName');\n    let count = 0;\n    let fetchFileResult: photoAccessHelper.FetchResult = null;\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\n    let fetchOptions = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    try {\n      fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\n      Log.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\n      count = await fetchFileResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchFileResult != null) {\n        fetchFileResult.close();\n      }\n    }\n    Log.debug(TAG, 'getMediaItemCountsByDisplayName finish');\n    return count;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getMediaItemCountsByDisplayName(displayName: string): Promise<number> {\nLog.info(TAG, 'getMediaItemCountsByDisplayName');",
              "successors": [
                {
                  "id": 3,
                  "label": "let count = 0;\nlet fetchFileResult: photoAccessHelper.FetchResult = null;\nlet predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, displayName);\nlet fetchOptions = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: predicates\n};\ntry {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "fetchFileResult = await this.userFileMgr.getAssets(fetchOptions);\nLog.debug(TAG, 'getMediaItemCountsByDisplayName getPhotoAssets');\ncount = await fetchFileResult.getCount();\n} catch (err) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "Log.error(TAG, 'getMediaItemCountsByDisplayName error:' + JSON.stringify(err));\n} finally {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (fetchFileResult != null) {\nfetchFileResult.close();",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "}\nLog.debug(TAG, 'getMediaItemCountsByDisplayName finish');\nreturn count;\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUserAlbumCountByName",
          "type": "function",
          "start_line": 405,
          "end_line": 433,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\n    if (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getUserAlbumCountByName(albumName: string): Promise<number> {\n    Log.info(TAG, 'getUserAlbumCountByName');\n    Log.info(TAG, 'album_name：' + albumName);\n    let count = 0;\n    let systemAlbums = await getSystemAlbumDisplayName();\nif (systemAlbums.indexOf(albumName) >= 0) {\n      return 1;\n    }",
              "successors": [
                {
                  "id": 3,
                  "label": "let fetchResult: photoAccessHelper.FetchResult = null;\ntry {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      count = fetchResult.getCount();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "catch (err) {\n      Log.error(TAG, 'getUserAlbumCountByName error:' + JSON.stringify(err));\n    }\nfinally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }",
                      "successors": [
                        {
                          "id": 7,
                          "label": "Log.debug(TAG, 'getUserAlbumCountByName finish');\n    return count;\n  }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getActivePeers",
          "type": "function",
          "start_line": 435,
          "end_line": 447,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n    Log.info(TAG, 'getActivePeers');\n    let peers: photoAccessHelper.PeerInfo[] = [];\n    try {\n      let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n      peers = await this.userFileMgr.getActivePeers();\n      clearTimeout(getActivePeers);\n    } catch (err) {\n      Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getActivePeers finish');\n    return peers;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {\n  Log.info(TAG, 'getActivePeers');\n  let peers: photoAccessHelper.PeerInfo[] = [];\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "  let getActivePeers = hiSysEventDataQueryTimedOut('getActivePeers')\n  peers = await this.userFileMgr.getActivePeers();\n  clearTimeout(getActivePeers);\nLog.debug(TAG, 'getActivePeers finish');\nreturn peers;\n}",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (err) {\n  Log.error(TAG, 'getActivePeers error:' + JSON.stringify(err));\n}\nLog.debug(TAG, 'getActivePeers finish');\nreturn peers;\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getUserAlbumByName",
          "type": "function",
          "start_line": 449,
          "end_line": 475,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'fetchResult' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {\n    Log.info(TAG, 'getUserAlbumByName');\n    Log.info(TAG, 'album_name' + albumName);\n    let fetchResult: photoAccessHelper.FetchResult = null;\n    let album = null;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nlet predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName);\nlet fetchOptions = {\n  fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n  predicates: predicates\n};\nfetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\nLog.info(TAG, 'fetchResult' + fetchResult.getCount());",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (fetchResult.getCount() > 0) {\nalbum = fetchResult.getFirstObject();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} catch (err) {\nLog.error(TAG, 'getUserAlbumByName error:' + JSON.stringify(err));",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "} finally {\nif (fetchResult != null) {",
                  "successors": [
                    {
                      "id": 10,
                      "label": "fetchResult.close();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "Log.debug(TAG, 'getUserAlbumByName finish');\n    return album;\n  }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getAlbums",
          "type": "function",
          "start_line": 477,
          "end_line": 488,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\n    Log.info(TAG, 'getAlbums');\n    let albums: photoAccessHelper.Album[] = [];\n    try {\n      albums = await this.userFileMgr.getAlbums(fetchOption);\n      Log.info(TAG, 'getAlbums albums ' + albums.getCounts());\n    } catch (err) {\n      Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n    }\n    Log.debug(TAG, 'getAlbums finish');\n    return albums;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {\nLog.info(TAG, 'getAlbums');\nlet albums: photoAccessHelper.Album[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "albums = await this.userFileMgr.getAlbums(fetchOption);\nLog.info(TAG, 'getAlbums albums ' + albums.getCounts());\nLog.debug(TAG, 'getAlbums finish');\nreturn albums;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} catch (err) {\n  Log.error(TAG, 'getAlbums error:' + JSON.stringify(err));\n}\nLog.debug(TAG, 'getAlbums finish');\nreturn albums;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "openAsset",
          "type": "function",
          "start_line": 490,
          "end_line": 498,
          "functions": [],
          "classes": [],
          "simplified_code": "  async openAsset(mode: string, fileAsset: photoAccessHelper.PhotoAsset): Promise<number> {\n    Log.debug(TAG, 'openAsset start');\n    let fd: number = await fileAsset.open(mode);\n    Log.info(TAG, 'openAsset end. fd: ' + fd);\n    if (fd <= 0) {\n      Log.info(TAG, 'openAsset Fail');\n    }\n    return fd;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'openAsset start');\nlet fd: number = await fileAsset.open(mode);",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.info(TAG, 'openAsset end. fd: ' + fd);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (fd <= 0) {\n  Log.info(TAG, 'openAsset Fail');",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "return fd;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "closeAsset",
          "type": "function",
          "start_line": 500,
          "end_line": 503,
          "functions": [],
          "classes": [],
          "simplified_code": "  async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    Log.debug(TAG, 'closeAsset start');\n    await fileAsset.close(fd);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\nLog.debug(TAG, 'closeAsset start');",
              "successors": [
                {
                  "id": 3,
                  "label": "await fileAsset.close(fd);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "addPhotoToAlbumByUserFileMgr",
          "type": "function",
          "start_line": 505,
          "end_line": 537,
          "functions": [],
          "classes": [],
          "simplified_code": "  async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\n    Log.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);\n    try {\n      let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      this.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {\n        if (fetchResult != undefined) {\n          Log.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();\n          if (fileAsset != undefined) {\n            Log.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });\n          }\n          fetchResult.close();\n        } else {\n          Log.info(TAG, 'fetchResult fail' + err);\n        }\n      });\n    } catch (err) {\n      Log.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {\nLog.info(TAG, 'addPhotoAssetsDemoPromise');\n    Log.info(TAG, 'albumUri' + albumUri);\n    Log.info(TAG, 'mediaItem.uri' + uri);",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let album = await this.getUserAlbumItemByUri(albumUri);\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\nthis.userFileMgr.getAssets(fetchOptions, async (err, fetchResult) => {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (fetchResult != undefined) {\nLog.info(TAG, 'fetchResult success');\n          let fileAsset = await fetchResult.getFirstObject();",
                          "successors": [
                            {
                              "id": 8,
                              "label": "if (fileAsset != undefined) {\nLog.info(TAG, 'addPhotoToAlbumByUserFileMgr photo displayName : ' + fileAsset.displayName);\n            album.addAssets([fileAsset]).then(() => {\n              Log.info(TAG, 'album addPhotoAssets successfully');\n            }).catch((err) => {\n              Log.info(TAG, 'album addPhotoAssets failed with error: ' + err);\n            });",
                              "successors": []
                            },
                            {
                              "id": 10,
                              "label": "fetchResult.close();",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 11,
                          "label": "else {\nLog.info(TAG, 'fetchResult fail' + err);",
                          "successors": [
                            {
                              "id": 10,
                              "label": "fetchResult.close();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "} catch (err) {\nLog.error(TAG, 'addPhotoAssetsDemoPromise failed with error: ' + err);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class UserFileModel {\n  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class UserFileModel {\n  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fileIO from '@ohos.fileio';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { hiSysEventDataQueryTimedOut } from '../utils/hisysEventUtil';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\nimport { MediaConstants } from '../constants/MediaConstants'\nimport { getSystemAlbumDisplayName } from './UserFileDataHelper';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\n\nconst TAG = 'UserFileModel';\n\n}\n\n}\n\nexport let userFileModel: UserFileModel = stashOrGetObject<UserFileModel>(new UserFileModel(), TAG);",
  "blocks": [
    {
      "id": 1,
      "label": "import fileIO from '@ohos.fileio';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';",
      "successors": [
        {
          "id": 3,
          "label": "import { Log } from '../utils/Log';\nimport { hiSysEventDataQueryTimedOut } from '../utils/hisysEventUtil';",
          "successors": [
            {
              "id": 5,
              "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { MediaConstants } from '../constants/MediaConstants';\nimport { getSystemAlbumDisplayName } from './UserFileDataHelper';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nconst TAG = 'UserFileModel';",
                      "successors": [
                        {
                          "id": 11,
                          "label": "export let userFileModel: UserFileModel = stashOrGetObject<UserFileModel>(new UserFileModel(), TAG);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}