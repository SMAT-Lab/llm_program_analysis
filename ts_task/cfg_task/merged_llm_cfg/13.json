{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 75,
  "functions": [],
  "classes": [
    {
      "name": "DateTimeUtil",
      "type": "class",
      "start_line": 19,
      "end_line": 75,
      "functions": [
        {
          "name": "getTime",
          "type": "function",
          "start_line": 24,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "  getTime(): string {\n    const DATETIME = new Date();\n    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds());\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getTime(): string {\n    const DATETIME = new Date();",
              "successors": [
                {
                  "id": 3,
                  "label": "    return this.concatTime(DATETIME.getHours(), DATETIME.getMinutes(), DATETIME.getSeconds());",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getDate",
          "type": "function",
          "start_line": 32,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "  getDate(): string {\n    const DATETIME = new Date();\n    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate());\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getDate(): string {\n    const DATETIME = new Date();",
              "successors": [
                {
                  "id": 3,
                  "label": "    return this.concatDate(DATETIME.getFullYear(), DATETIME.getMonth() + 1, DATETIME.getDate());",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fill",
          "type": "function",
          "start_line": 41,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  fill(value: number): string {\n    let maxNumber = 9;\n    return (value > maxNumber ? '' : '0') + value;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "fill(value: number): string {\nlet maxNumber = 9;",
              "successors": [
                {
                  "id": 3,
                  "label": "return (value > maxNumber ? '' : '0') + value;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getVideoTime",
          "type": "function",
          "start_line": 49,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  getVideoTime(millisecond: number): string {\n    let millisecond2minute = 60000;\n    let millisecond2second = 1000;\n    let minute = Math.floor(millisecond / millisecond2minute);\n    let second = Math.floor((millisecond - minute * millisecond2minute) / millisecond2second);\n    return `${this.fill(minute)} : ${this.fill(second)}`;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getVideoTime(millisecond: number): string {\n    let millisecond2minute = 60000;",
              "successors": [
                {
                  "id": 3,
                  "label": "    let millisecond2second = 1000;\n    let minute = Math.floor(millisecond / millisecond2minute);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    let second = Math.floor((millisecond - minute * millisecond2minute) / millisecond2second);\n    return `${this.fill(minute)} : ${this.fill(second)}`;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "concatDate",
          "type": "function",
          "start_line": 62,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "  concatDate(year: number, month: number, date: number): string {\n    return `${year}${this.fill(month)}${this.fill(date)}`;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "concatDate(year: number, month: number, date: number): string {\n    return `${year}${this.fill(month)}${this.fill(date)}`;",
              "successors": []
            }
          ]
        },
        {
          "name": "concatTime",
          "type": "function",
          "start_line": 72,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  concatTime(hours: number, minutes: number, seconds: number): string {\n    return `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "concatTime(hours: number, minutes: number, seconds: number): string {\nreturn `${this.fill(hours)}${this.fill(minutes)}${this.fill(seconds)}`;",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export default class DateTimeUtil {\n\n  /**\n   * 时分秒\n   */\n  }\n\n  /**\n   * 年月日\n   */\n  }\n\n  /**\n   * 日期不足两位补充0\n   * @param value-数据值\n   */\n  }\n  /**\n   * 录制时间定时器\n   * @param millisecond-数据值\n   */\n  }\n  /**\n   * 年月日格式修饰\n   * @param year\n   * @param month\n   * @param date\n   */\n  }\n\n  /**\n   * 时分秒格式修饰\n   * @param hours\n   * @param minutes\n   * @param seconds\n   */\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default class DateTimeUtil {\n/**\n * 时分秒\n */\n}",
          "successors": [
            {
              "id": 3,
              "label": "/**\n * 年月日\n */\n}\n/**\n * 日期不足两位补充0\n * @param value-数据值\n */\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "/**\n * 录制时间定时器\n * @param millisecond-数据值\n */\n}\n/**\n * 年月日格式修饰\n * @param year\n * @param month\n * @param date\n */\n}",
                  "successors": [
                    {
                      "id": 7,
                      "label": "/**\n * 时分秒格式修饰\n * @param hours\n * @param minutes\n * @param seconds\n */\n}\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file 日期工具\n */\n}",
  "blocks": [
    {
      "id": 1,
      "label": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.",
      "successors": [
        {
          "id": 3,
          "label": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.",
          "successors": [
            {
              "id": 5,
              "label": " * You may obtain a copy of the License at\n *",
              "successors": [
                {
                  "id": 7,
                  "label": " *     http://www.apache.org/licenses/LICENSE-2.0\n *",
                  "successors": [
                    {
                      "id": 9,
                      "label": " * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,",
                      "successors": [
                        {
                          "id": 11,
                          "label": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and",
                          "successors": [
                            {
                              "id": 13,
                              "label": " * limitations under the License.\n */",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}