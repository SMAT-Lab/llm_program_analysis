{
  "name": "typescript_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 45,
  "functions": [
    {
      "name": "buildShowcaseWorkspace",
      "type": "function",
      "start_line": 8,
      "end_line": 31,
      "functions": [
        {
          "name": "create",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "  const meta = await workspacesService.create(flavour, async docCollection => {\n    docCollection.meta.initialize();\n    docCollection.meta.setName(workspaceName);\n    const blob = await (await fetch(onboardingUrl)).blob();\n    await ZipTransformer.importDocs(docCollection, blob);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "const meta = await workspacesService.create(flavour, async docCollection => {\ndocCollection.meta.initialize();",
              "successors": [
                {
                  "id": 3,
                  "label": "docCollection.meta.setName(workspaceName);\nconst blob = await (await fetch(onboardingUrl)).blob();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "await ZipTransformer.importDocs(docCollection, blob);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export async function buildShowcaseWorkspace(\n  workspacesService: WorkspacesService,\n  flavour: WorkspaceFlavour,\n  workspaceName: string\n) {\n  });\n  const { workspace, dispose } = workspacesService.open({ metadata: meta });\n  await workspace.engine.waitForRootDocReady();\n  const docsService = workspace.scope.get(DocsService);\n  // should jump to \"Write, Draw, Plan all at Once.\" in edgeless by default\n  const defaultDoc = docsService.list.docs$.value.find(p =>\n    p.title$.value.startsWith('Write, Draw, Plan all at Once.')\n  );\n  if (defaultDoc) {\n    defaultDoc.setPrimaryMode('edgeless');\n  }\n  dispose();\n  return { meta, defaultDocId: defaultDoc?.id };\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function buildShowcaseWorkspace(workspacesService: WorkspacesService, flavour: WorkspaceFlavour, workspaceName: string) {\nconst { workspace, dispose } = workspacesService.open({ metadata: meta });",
          "successors": [
            {
              "id": 3,
              "label": "await workspace.engine.waitForRootDocReady();",
              "successors": [
                {
                  "id": 4,
                  "label": "const docsService = workspace.scope.get(DocsService);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const defaultDoc = docsService.list.docs$.value.find(p => p.title$.value.startsWith('Write, Draw, Plan all at Once.'));",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (defaultDoc) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "defaultDoc.setPrimaryMode('edgeless');\ndispose();",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "return { meta, defaultDocId: defaultDoc?.id };",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "dispose();\nreturn { meta, defaultDocId: defaultDoc?.id };",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "dispose();\nreturn { meta, defaultDocId: defaultDoc?.id };",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "dispose();\nreturn { meta, defaultDocId: defaultDoc?.id };",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "dispose();\nreturn { meta, defaultDocId: defaultDoc?.id };",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "dispose();\nreturn { meta, defaultDocId: defaultDoc?.id };",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "createFirstAppData",
      "type": "function",
      "start_line": 33,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function createFirstAppData(workspacesService: WorkspacesService) {\n  if (localStorage.getItem('is-first-open') !== null) {\n    return;\n  }\n  localStorage.setItem('is-first-open', 'false');\n  const { meta, defaultDocId } = await buildShowcaseWorkspace(\n    workspacesService,\n    WorkspaceFlavour.LOCAL,\n    DEFAULT_WORKSPACE_NAME\n  );\n  logger.info('create first workspace', defaultDocId);\n  return { meta, defaultPageId: defaultDocId };\n}",
      "blocks": [
        {
          "id": 1,
          "label": "if (localStorage.getItem('is-first-open') !== null) {",
          "successors": [
            {
              "id": 2,
              "label": "    return;",
              "successors": []
            },
            {
              "id": 3,
              "label": "} else {\n    localStorage.setItem('is-first-open', 'false');",
              "successors": [
                {
                  "id": 5,
                  "label": "    const { meta, defaultDocId } = await buildShowcaseWorkspace(\n        workspacesService,\n        WorkspaceFlavour.LOCAL,\n        DEFAULT_WORKSPACE_NAME\n      );\n    logger.info('create first workspace', defaultDocId);",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    return { meta, defaultPageId: defaultDocId };",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { DebugLogger } from '@affine/debug';\nimport { DEFAULT_WORKSPACE_NAME } from '@affine/env/constant';\nimport { WorkspaceFlavour } from '@affine/env/workspace';\nimport onboardingUrl from '@affine/templates/onboarding.zip';\nimport { ZipTransformer } from '@blocksuite/affine/blocks';\nimport type { WorkspacesService } from '@toeverything/infra';\nimport { DocsService } from '@toeverything/infra';\n}\nconst logger = new DebugLogger('createFirstAppData');\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { DebugLogger } from '@affine/debug';\nimport { DEFAULT_WORKSPACE_NAME } from '@affine/env/constant';",
      "successors": [
        {
          "id": 3,
          "label": "import { WorkspaceFlavour } from '@affine/env/workspace';\nimport onboardingUrl from '@affine/templates/onboarding.zip';",
          "successors": [
            {
              "id": 5,
              "label": "import { ZipTransformer } from '@blocksuite/affine/blocks';\nimport type { WorkspacesService } from '@toeverything/infra';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { DocsService } from '@toeverything/infra';\nconst logger = new DebugLogger('createFirstAppData');",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}