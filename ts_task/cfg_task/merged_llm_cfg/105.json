{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 122,
  "functions": [],
  "classes": [
    {
      "name": "EntryAbility",
      "type": "class",
      "start_line": 29,
      "end_line": 122,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 32,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');\n    // Main window is created, set main page for this ability\n    let uiAbilityContext = this.context;\n    let applicationContext = this.context.getApplicationContext();\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\nhilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onCreate');",
              "successors": [
                {
                  "id": 3,
                  "label": "let uiAbilityContext = this.context;\nlet applicationContext = this.context.getApplicationContext();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "systemLanguage = this.context.config.language;\nhilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDestroy",
          "type": "function",
          "start_line": 41,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDestroy(): void {\n    // 系统资源的释放、数据的保存等\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDestroy(): void {\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onDestroy');",
              "successors": []
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 46,
          "end_line": 83,
          "functions": [
            {
              "name": "windowStage.on('windowStageEvent', (data) => {...})",
              "type": "function",
              "start_line": 50,
              "end_line": 68,
              "functions": [],
              "classes": [],
              "simplified_code": "      windowStage.on('windowStageEvent', (data) => {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // 切到前台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // 获焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // 失焦状态\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // 切到后台\n            hilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });",
              "blocks": [
                {
                  "id": 1,
                  "label": "windowStage.on('windowStageEvent', (data) => {\nlet stageEventType: window.WindowStageEventType = data;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "switch (stageEventType) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case window.WindowStageEventType.SHOWN:\nhilog.info(DOMAIN_NUMBER, TAG, 'windowStage foreground.');",
                          "successors": [
                            {
                              "id": 11,
                              "label": "break;\n",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "case window.WindowStageEventType.ACTIVE:\nhilog.info(DOMAIN_NUMBER, TAG, 'windowStage active.');",
                          "successors": [
                            {
                              "id": 13,
                              "label": "break;\n",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "case window.WindowStageEventType.INACTIVE:\nhilog.info(DOMAIN_NUMBER, TAG, 'windowStage inactive.');",
                          "successors": [
                            {
                              "id": 14,
                              "label": "break;\n",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "case window.WindowStageEventType.HIDDEN:\nhilog.info(DOMAIN_NUMBER, TAG, 'windowStage background.');",
                          "successors": [
                            {
                              "id": 16,
                              "label": "break;\n",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 17,
                          "label": "default:\nbreak;",
                          "successors": [
                            {
                              "id": 12,
                              "label": "",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "windowStage.loadContent('pages/Index', (err, data) => {...})",
              "type": "function",
              "start_line": 76,
              "end_line": 82,
              "functions": [],
              "classes": [],
              "simplified_code": "    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "windowStage.loadContent('pages/Index', (err, data) => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "if (err.code) {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）\n    try {\n      });\n    } catch (exception) {\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    };\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    // 设置UI加载\n    // Main window is created, set main page for this ability\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage: window.WindowStage): void {\nthis.windowStage = windowStage;",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\n} catch (exception) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "hilog.error(DOMAIN_NUMBER, TAG, 'Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\nhilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');",
                      "successors": [
                        {
                          "id": 7,
                          "label": "} // try-catch block ends\n// 设置UI加载\n// Main window is created, set main page for this ability\n});\n} // Function ends",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageDestroy",
          "type": "function",
          "start_line": 85,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    // 释放UI资源\n    // 例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件\n    try {\n      if (this.windowStage) {\n        this.windowStage.off('windowStageEvent');\n      }\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageDestroy(): void {\nhilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageDestroy');",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\nif (this.windowStage) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.windowStage.off('windowStageEvent');\n} catch (err) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "let code = (err as BusinessError).code;\nlet message = (err as BusinessError).message;\nhilog.error(DOMAIN_NUMBER, TAG, `Failed to disable the listener for windowStageEvent. Code is ${code}, message is ${message}`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onForeground",
          "type": "function",
          "start_line": 101,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "  onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源\n    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onForeground(): void {\n    // 申请系统需要的资源，或者重新申请在onBackground()中释放的资源",
              "successors": [
                {
                  "id": 3,
                  "label": "    // Ability has brought to foreground\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onForeground');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onBackground",
          "type": "function",
          "start_line": 107,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "  onBackground(): void {\n    // 释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作\n    // 例如状态保存等\n    // Ability has back to background\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');",
          "blocks": [
            {
              "id": 1,
              "label": "onBackground(): void {\nhilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');",
              "successors": []
            }
          ]
        },
        {
          "name": "onConfigurationUpdate",
          "type": "function",
          "start_line": 114,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onConfigurationUpdate(newConfig: Configuration): void {\nhilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (systemLanguage !== newConfig.language) {\nhilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "systemLanguage = newConfig.language;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export default class EntryAbility extends UIAbility {\n  windowStage: window.WindowStage | undefined = undefined;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');\n  }\n\n  }\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export default class EntryAbility extends UIAbility {",
          "successors": [
            {
              "id": 2,
              "label": "windowStage: window.WindowStage | undefined = undefined;",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            },
            {
              "id": 4,
              "label": "}",
              "successors": []
            },
            {
              "id": 5,
              "label": "}",
              "successors": []
            },
            {
              "id": 6,
              "label": "}",
              "successors": []
            },
            {
              "id": 7,
              "label": "}",
              "successors": []
            },
            {
              "id": 8,
              "label": "hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onBackground');",
              "successors": []
            },
            {
              "id": 9,
              "label": "}",
              "successors": []
            },
            {
              "id": 10,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport hilog from '@ohos.hilog';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport window from '@ohos.window';\nimport type { BusinessError } from '@ohos.base';\nimport type { Configuration } from '@ohos.app.ability.Configuration';\n\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\n};",
  "blocks": [
    {
      "id": 1,
      "label": "import type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nhilog from '@ohos.hilog';\nUIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport window from '@ohos.window';\nimport type { BusinessError } from '@ohos.base';\nimport type { Configuration } from '@ohos.app.ability.Configuration';\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;",
      "successors": [
        {
          "id": 3,
          "label": "let systemLanguage: string | undefined;",
          "successors": []
        }
      ]
    }
  ]
}