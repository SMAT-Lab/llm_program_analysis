{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 132,
  "functions": [],
  "classes": [
    {
      "name": "AlbumSetRenameMenuOperation",
      "type": "class",
      "start_line": 32,
      "end_line": 132,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 37,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {\nthis.menuContext = menuContext;",
              "successors": []
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 41,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    let count: number;\n    let items: Object[];\n    if (dataSource == null) {\n      count = this.menuContext.items.length;\n      items = this.menuContext.items;\n    } else {\n      count = dataSource.getSelectedCount();\n      items = dataSource.getSelectedItems();\n    }\n    if (count !== 1) {\n      Log.warn(TAG, 'count is invalid');\n      return;\n    }\n\n    this.item = items[0] as AlbumDataItem;\n\n    this.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    Log.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [this.item.displayName, this.confirmCallback, this.cancelCallback]);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "doAction(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.menuContext == null) {\nLog.warn(TAG, 'menuContext is null, return');\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let dataSource: ItemDataSource = this.menuContext.dataSource;\nlet count: number;\nlet items: Object[];",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (dataSource == null) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "count = this.menuContext.items.length;\nitems = this.menuContext.items;",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "} else {\ncount = dataSource.getSelectedCount();\nitems = dataSource.getSelectedItems();",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "if (count !== 1) {\nLog.warn(TAG, 'count is invalid');\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "this.item = items[0] as AlbumDataItem;\n\nthis.confirmCallback = (newName: string): Promise<void> => this.confirmCallbackBindImpl(newName);\nthis.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\nLog.info(TAG, 'The name of clicked album is ' + this.item.displayName);\n\nthis.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n  [this.item.displayName, this.confirmCallback, this.cancelCallback]);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "confirmCallback",
          "type": "function",
          "start_line": 72,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallback(newName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(newName);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async confirmCallback(newName: string): Promise<void> {\nreturn await this.confirmCallbackBindImpl(newName);",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallbackBindImpl",
          "type": "function",
          "start_line": 76,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallbackBindImpl(newName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.rename(newName);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'AlbumSet rename confirm and the new name is: ' + newName);\nthis.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart: Function = this.menuContext.onOperationStart;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (onOperationStart != null) onOperationStart();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "onOperationStart();\nthis.rename(newName);",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "this.rename(newName);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "checkAlbumExit",
          "type": "function",
          "start_line": 86,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\nreturn await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;",
              "successors": []
            }
          ]
        },
        {
          "name": "rename",
          "type": "function",
          "start_line": 90,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async rename(name): Promise<void> {\n    try {\n      let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);\n      if (name != undefined && name != null) {\n        let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n        if (isExit) {\n          getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n          })\n          Log.warn(TAG, 'album is miss');\n          this.onError();\n          return;\n        }\n      }\n      Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\n      let albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);\n      albums.albumName = name;\n      await albums.commitModify();\n      this.onCompleted();\n    } catch (error) {\n      Log.error(TAG, 'AlbumSet rename failed: ' + error);\n      this.onError();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async rename(name): Promise<void> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', name, this.item.uri, '', '', -1, -1);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (name != undefined && name != null) {\nlet isExit = await this.checkAlbumExit(simpleAlbumDataItem);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (isExit) {\ngetResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n  showToast(message);\n})",
                          "successors": [
                            {
                              "id": 8,
                              "label": "Log.warn(TAG, 'album is miss');\nthis.onError();",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "return;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "Log.info(TAG, 'change album_name:' + this.item.displayName + ' to ' + name);\nlet albums: photoAccessHelper.Album = await userFileModel.getUserAlbumByName(this.item.displayName);",
                      "successors": [
                        {
                          "id": 13,
                          "label": "albums.albumName = name;\nawait albums.commitModify();",
                          "successors": [
                            {
                              "id": 15,
                              "label": "this.onCompleted();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 16,
                  "label": "} catch (error) {\nLog.error(TAG, 'AlbumSet rename failed: ' + error);",
                  "successors": [
                    {
                      "id": 18,
                      "label": "this.onError();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cancelCallback",
          "type": "function",
          "start_line": 115,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();",
              "successors": []
            }
          ]
        },
        {
          "name": "cancelCallbackBindImpl",
          "type": "function",
          "start_line": 119,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet rename cancel');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallbackBindImpl(): void {\nLog.info(TAG, 'AlbumSet rename cancel');",
              "successors": []
            }
          ]
        },
        {
          "name": "onCompleted",
          "type": "function",
          "start_line": 123,
          "end_line": 126,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'Rename data succeed!');\nif (this.onOperationEnd != null)",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.onOperationEnd();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 128,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": "  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onError(): void {\nLog.error(TAG, 'Rename data failed!');",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.onOperationEnd != null)\nthis.onOperationEnd();",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class AlbumSetRenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n  private item: AlbumDataItem;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\n\n\nconst TAG = 'AlbumSetRenameMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { userFileModel } from '../base/UserFileModel';",
      "successors": [
        {
          "id": 3,
          "label": "import { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';",
          "successors": [
            {
              "id": 5,
              "label": "import { AlbumDataItem } from '../common/AlbumDataItem';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import { MenuContext } from './MenuContext';\nimport { getResourceString } from '../utils/ResourceUtils';",
                      "successors": [
                        {
                          "id": 11,
                          "label": "import { showToast } from '../utils/UiUtil';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';",
                          "successors": [
                            {
                              "id": 13,
                              "label": "import { MediaConstants } from '../constants/MediaConstants';\nconst TAG = 'AlbumSetRenameMenuOperation';",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}