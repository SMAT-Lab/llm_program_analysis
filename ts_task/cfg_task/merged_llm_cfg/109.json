{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 75,
  "functions": [],
  "classes": [
    {
      "name": "IdlServiceExtStub",
      "type": "class",
      "start_line": 25,
      "end_line": 75,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(des: string) {\n    super(des);\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(des: string) {\n    super(des);",
              "successors": []
            }
          ]
        },
        {
          "name": "onRemoteMessageRequest",
          "type": "function",
          "start_line": 30,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "  async onRemoteMessageRequest(code: number, data: rpc.MessageSequence, reply: rpc.MessageSequence, option: rpc.MessageOption): Promise<boolean> {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onRemoteMessageRequest called, code = ' + code);\n    switch (code) {\n      case IdlServiceExtStub.COMMAND_PROCESS_DATA: {\n        let dataVar = data.readInt();\n        let promise = new Promise<void>((resolve, reject) => {\n          this.processData(dataVar, (errCode, returnValue) => {\n            reply.writeInt(errCode);\n            if (errCode === 0) {\n              reply.writeInt(returnValue);\n            }\n            resolve();\n          });\n        });\n        await promise;\n        return true;\n      };\n      case IdlServiceExtStub.COMMAND_INSERT_DATA_TO_MAP: {\n        let keyVar = data.readString();\n        let valVar = data.readInt();\n        let promise = new Promise<void>((resolve, reject) => {\n          this.insertDataToMap(keyVar, valVar, (errCode) => {\n            reply.writeInt(errCode);\n            resolve();\n          });\n        });\n        await promise;\n        return true;\n      };\n      default: {\n        hilog.info(DOMAIN_NUMBER, TAG, 'invalid request code' + code);\n        break;\n      }\n    }\n    return false;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async onRemoteMessageRequest(code: number, data: rpc.MessageSequence, reply: rpc.MessageSequence, option: rpc.MessageOption): Promise<boolean> {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onRemoteMessageRequest called, code = ' + code);\nswitch (code) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case IdlServiceExtStub.COMMAND_PROCESS_DATA: {\n        let dataVar = data.readInt();\nlet promise = new Promise<void>((resolve, reject) => {\n          this.processData(dataVar, (errCode, returnValue) => {\n            reply.writeInt(errCode);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (errCode === 0) {\n              reply.writeInt(returnValue);\n            }",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "resolve();\n          });\n        });\nawait promise;\n        return true;",
                      "successors": [
                        {
                          "id": 8,
                          "label": "case IdlServiceExtStub.COMMAND_INSERT_DATA_TO_MAP: {\n        let keyVar = data.readString();\nlet valVar = data.readInt();",
                          "successors": [
                            {
                              "id": 10,
                              "label": "let promise = new Promise<void>((resolve, reject) => {\n          this.insertDataToMap(keyVar, valVar, (errCode) => {\n            reply.writeInt(errCode);\nresolve();\n          });\n        });",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "await promise;\n        return true;\ndefault: {\n        hilog.info(DOMAIN_NUMBER, TAG, 'invalid request code' + code);\n        break;\n      }",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "return false;\n  }",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "processData",
          "type": "function",
          "start_line": 67,
          "end_line": 68,
          "functions": [],
          "classes": [],
          "simplified_code": "  processData(data: number, callback: ProcessDataCallback): void {\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "processData(data: number, callback: ProcessDataCallback): void {",
              "successors": []
            }
          ]
        },
        {
          "name": "insertDataToMap",
          "type": "function",
          "start_line": 70,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default class IdlServiceExtStub extends rpc.RemoteObject implements IIdlServiceExt {\n  };\n\n  }\n\n  };\n\n  };\n\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export default class IdlServiceExtStub extends rpc.RemoteObject implements IIdlServiceExt {\n};",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtStub]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n};",
  "blocks": [
    {
      "id": 1,
      "label": "import type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\nconst TAG: string = '[IdlServiceExtStub]';\nconst DOMAIN_NUMBER: number = 0xFF00;",
      "successors": []
    }
  ]
}