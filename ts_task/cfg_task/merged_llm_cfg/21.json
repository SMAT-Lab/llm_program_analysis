{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 130,
  "functions": [],
  "classes": [
    {
      "name": "RenameMenuOperation",
      "type": "class",
      "start_line": 29,
      "end_line": 130,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 32,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {\n  this.menuContext = menuContext;\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 36,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.menuContext == null) {\n    Log.warn(TAG, 'menuContext is null, return');\n    return;",
              "successors": []
            }
          ]
        },
        {
          "name": "onCompleted",
          "type": "function",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');",
              "successors": []
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onError(): void {\n    Log.error(TAG, 'Rename data failed!');",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallback",
          "type": "function",
          "start_line": 69,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async confirmCallback(title: string): Promise<void> {\nreturn await this.confirmCallbackBindImpl(title);",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallbackBindImpl",
          "type": "function",
          "start_line": 73,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'Rename confirm new name: ' + title);\nlet mediaItem = (this.menuContext.items[0] as UserFileDataItem);\nif (mediaItem == null) {",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.warn(TAG, 'mediaItem is null, return');\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let hasSameName = await this.hasSameNameAsset(mediaItem, title);\nif (hasSameName) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "Log.info(TAG, 'show find same file dialog');\ngetResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n  showToast(message);\n});\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "let result = await this.rename(mediaItem, title);\nLog.info(TAG, 'Rename confirm result: ' + result);\nthis.menuContext.broadCast.emit(Constants.RENAME, [result]);",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "} catch (err) {\nLog.error(TAG, 'Rename error: ' + err);\ngetResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n  showToast(message);\n});",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "rename",
          "type": "function",
          "start_line": 102,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'renameSinglePhoto start');\nawait item.setName(name);",
              "successors": [
                {
                  "id": 3,
                  "label": "return [item.title, item.displayName] as Object[];",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hasSameNameAsset",
          "type": "function",
          "start_line": 108,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'hasSameNameAsset start');\nlet fileAsset = await item.loadFileAsset();\nlet displayName = fileAsset.displayName;\nlet index = displayName.lastIndexOf('.');\ndisplayName = name + displayName.slice(index);\nlet counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\nif (counts === 0) {",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.info(TAG, 'hasSameNameAsset is false');\nreturn false;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "Log.info(TAG, 'hasSameNameAsset true');\nreturn true;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "cancelCallback",
          "type": "function",
          "start_line": 123,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallback(): void {\n  this.cancelCallbackBindImpl();",
              "successors": []
            }
          ]
        },
        {
          "name": "cancelCallbackBindImpl",
          "type": "function",
          "start_line": 127,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n}",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\nprivate menuContext: MenuContext;",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Constants } from '../constants/BrowserConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'RenameMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Constants } from '../constants/BrowserConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem.';\nconst TAG = 'RenameMenuOperation';",
      "successors": []
    }
  ]
}