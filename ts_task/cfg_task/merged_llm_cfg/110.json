{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 67,
  "functions": [],
  "classes": [
    {
      "name": "ServiceExtImpl",
      "type": "class",
      "start_line": 31,
      "end_line": 67,
      "functions": [
        {
          "name": "processData",
          "type": "function",
          "start_line": 32,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "  processData(data: number, callback: ProcessDataCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);\n\n    let callerUid = rpc.IPCSkeleton.getCallingUid();\n    bundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\n      // 对客户端包名进行识别\n      if (callerBundleName !== 'com.samples.stagemodelabilitydevelop') { // 识别不通过\n        hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\n        return;\n      }\n      // 识别通过，执行正常业务逻辑\n    }).catch((err: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);\n    });\n\n    let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\n    let accessManger = abilityAccessCtrl.createAtManager();\n    // 所校验的具体权限由开发者自行选择，此处ohos.permission.GET_BUNDLE_INFO_PRIVILEGED只作为示例\n    let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\n      hilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');\n      callback(ERR_DENY, data); // 鉴权失败，返回错误\n      return;\n    }\n    hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\n    callback(ERR_OK, data + 1); // 鉴权通过，执行正常业务逻辑\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "processData(data: number, callback: ProcessDataCallback): void {\nhilog.info(DOMAIN_NUMBER, TAG, `processData: ${data}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "let callerUid = rpc.IPCSkeleton.getCallingUid();\nbundleManager.getBundleNameByUid(callerUid).then((callerBundleName) => {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "hilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid: ' + callerBundleName);\nif (callerBundleName !== 'com.samples.stagemodelabilitydevelop') {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "hilog.info(DOMAIN_NUMBER, TAG, 'The caller bundle is not in trustlist, reject');\nreturn;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "}).catch((err: BusinessError) => {\nhilog.info(DOMAIN_NUMBER, TAG, 'getBundleNameByUid failed: ' + err.message);",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "let callerTokenId = rpc.IPCSkeleton.getCallingTokenId();\nlet accessManger = abilityAccessCtrl.createAtManager();",
                      "successors": [
                        {
                          "id": 13,
                          "label": "let grantStatus = accessManger.verifyAccessTokenSync(callerTokenId, 'ohos.permission.GET_BUNDLE_INFO_PRIVILEGED');",
                          "successors": [
                            {
                              "id": 14,
                              "label": "if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) {\nhilog.info(DOMAIN_NUMBER, TAG, 'PERMISSION_DENIED');",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "callback(ERR_DENY, data);\nreturn;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "label": "hilog.info(DOMAIN_NUMBER, TAG, 'verify access token success.');\ncallback(ERR_OK, data + 1);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "insertDataToMap",
          "type": "function",
          "start_line": 62,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    // 开发者自行实现业务逻辑\n    hilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);\n    callback(ERR_OK);\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n// 开发者自行实现业务逻辑\nhilog.info(DOMAIN_NUMBER, TAG, `insertDataToMap, key: ${key}  val: ${val}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "callback(ERR_OK);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export default class ServiceExtImpl extends IdlServiceExtStub {\n  };\n\n  };\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export default class ServiceExtImpl extends IdlServiceExtStub { };",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport abilityAccessCtrl from '@ohos.abilityAccessCtrl';\nimport bundleManager from '@ohos.bundle.bundleManager';\nimport IdlServiceExtStub from './idl_service_ext_stub';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\nimport type { BusinessError } from '@ohos.base';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type { ProcessDataCallback } from './i_idl_service_ext';\n\nconst ERR_OK = 0;\nconst TAG: string = '[IdlServiceExtImpl]';\nconst DOMAIN_NUMBER: number = 0xFF00;\nconst ERR_DENY = -1;\n\n// 开发者需要在这个类型里对接口进行实现\n};",
  "blocks": [
    {
      "id": 1,
      "label": "import abilityAccessCtrl from '@ohos.abilityAccessCtrl';",
      "successors": []
    }
  ]
}