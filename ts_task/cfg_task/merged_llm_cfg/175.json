{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 51,
  "functions": [
    {
      "name": "addEventListener",
      "type": "function",
      "start_line": 3,
      "end_line": 5,
      "functions": [],
      "classes": [],
      "simplified_code": "export function addEventListener(type: 'url', handler: URLListener) {\n  return { remove() {} };\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function addEventListener(type: 'url', handler: URLListener) {\nreturn { remove() {} };",
          "successors": []
        }
      ]
    },
    {
      "name": "parseInitialURLAsync",
      "type": "function",
      "start_line": 6,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function parseInitialURLAsync(): Promise<ParsedURL> {\n  return {\n    scheme: null,\n    hostname: null,\n    path: null,\n    queryParams: null,\n  };\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function parseInitialURLAsync(): Promise<ParsedURL> {",
          "successors": [
            {
              "id": 2,
              "label": "  return {",
              "successors": [
                {
                  "id": 3,
                  "label": "    scheme: null,",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    hostname: null,",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    path: null,",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "    queryParams: null,",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "  };",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sendIntent",
      "type": "function",
      "start_line": 14,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  throw new UnavailabilityError('Linking', 'sendIntent');",
          "successors": []
        }
      ]
    },
    {
      "name": "openSettings",
      "type": "function",
      "start_line": 17,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function openSettings(): Promise<void> {\n  throw new UnavailabilityError('Linking', 'openSettings');\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function openSettings(): Promise<void> {\n  throw new UnavailabilityError('Linking', 'openSettings');",
          "successors": []
        }
      ]
    },
    {
      "name": "getInitialURL",
      "type": "function",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function getInitialURL(): Promise<string | null> {\n  return '';\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function getInitialURL(): Promise<string | null> {\n  return '';",
          "successors": []
        }
      ]
    },
    {
      "name": "getLinkingURL",
      "type": "function",
      "start_line": 23,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": "export function getLinkingURL() {\n  return '';\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function getLinkingURL() {\n  return '';",
          "successors": []
        }
      ]
    },
    {
      "name": "openURL",
      "type": "function",
      "start_line": 26,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function openURL(url: string): Promise<true> {\n  return true;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function openURL(url: string): Promise<true> {\n  return true;",
          "successors": []
        }
      ]
    },
    {
      "name": "canOpenURL",
      "type": "function",
      "start_line": 29,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function canOpenURL() {\n  return true;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function canOpenURL() {\nreturn true;",
          "successors": []
        }
      ]
    },
    {
      "name": "useURL",
      "type": "function",
      "start_line": 32,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "export function useURL(): string | null {\n  return null;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function useURL(): string | null {\n  return null;",
          "successors": []
        }
      ]
    },
    {
      "name": "useLinkingURL",
      "type": "function",
      "start_line": 35,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": "export function useLinkingURL() {\n  return null;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function useLinkingURL() {\n  return null;",
          "successors": []
        }
      ]
    },
    {
      "name": "collectManifestSchemes",
      "type": "function",
      "start_line": 39,
      "end_line": 41,
      "functions": [],
      "classes": [],
      "simplified_code": "export function collectManifestSchemes() {\n  return [];\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function collectManifestSchemes() {\n  return [];",
          "successors": []
        }
      ]
    },
    {
      "name": "hasConstantsManifest",
      "type": "function",
      "start_line": 42,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "export function hasConstantsManifest() {\n  return false;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function hasConstantsManifest() {\n  return false;",
          "successors": []
        }
      ]
    },
    {
      "name": "hasCustomScheme",
      "type": "function",
      "start_line": 45,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "export function hasCustomScheme() {\n  return false;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function hasCustomScheme() {\nreturn false;",
          "successors": []
        }
      ]
    },
    {
      "name": "resolveScheme",
      "type": "function",
      "start_line": 48,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "export function resolveScheme() {\n  return '';\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function resolveScheme() {\n  return '';",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { UnavailabilityError } from 'expo-modules-core';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\nexport * from './Linking.types';\n}\n}\n}\n}\nexport { parse, createURL } from './createURL';",
  "blocks": [
    {
      "id": 1,
      "label": "import { UnavailabilityError } from 'expo-modules-core';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';",
      "successors": [
        {
          "id": 3,
          "label": "}\n}\n}\n}\n}\n}\n}\n}\n}\n}\nexport * from './Linking.types';\n}\n}\n}\n}\nexport { parse, createURL } from './createURL';",
          "successors": []
        }
      ]
    }
  ]
}