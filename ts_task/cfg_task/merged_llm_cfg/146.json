{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 53,
  "functions": [
    {
      "name": "describe",
      "type": "function",
      "start_line": 23,
      "end_line": 53,
      "functions": [
        {
          "name": "it",
          "type": "function",
          "start_line": 24,
          "end_line": 36,
          "functions": [
            {
              "name": "async function",
              "type": "function",
              "start_line": 24,
              "end_line": 36,
              "functions": [],
              "classes": [],
              "simplified_code": "  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should throw an exception (useClass + regular provider)', async () => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "try {\nconst builder = Test.createTestingModule({\n  imports: [AppModule],\n});",
                      "successors": [
                        {
                          "id": 4,
                          "label": "await builder.compile();\nexpect(true).to.be.eql(false);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "} catch (err) {\nexpect(err.message).to.be.eql(\n  'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n);",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  });",
          "blocks": [
            {
              "id": 1,
              "label": "if (a > 2) {",
              "successors": [
                {
                  "id": 2,
                  "label": "  console.log(a);\nconsole.log(\"done\");",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "  console.log(1);\nconsole.log(\"done\");",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 37,
          "end_line": 52,
          "functions": [
            {
              "name": "async function",
              "type": "function",
              "start_line": 37,
              "end_line": 52,
              "functions": [],
              "classes": [],
              "simplified_code": "  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });",
              "blocks": [
                {
                  "id": 1,
                  "label": "it('should throw an exception (2 factories)', async () => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "const builder = Test.createTestingModule({\n  providers: [\n    { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n    { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n  ],\n});\nawait builder.compile();\nexpect(true).to.be.eql(false);\nexpect(err.message).to.be.eql(\n  'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n);",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "} catch (err) {\nexpect(err.message).to.be.eql(\n  'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  });",
          "blocks": [
            {
              "id": 1,
              "label": "if a > 2:",
              "successors": [
                {
                  "id": 2,
                  "label": "    print(a)\nprint(\"done\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    print(1)\nprint(\"done\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('Circular custom providers', () => {\n  });\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('Circular custom providers', () => {\n});",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "B",
      "type": "class",
      "start_line": 4,
      "end_line": 4,
      "functions": [],
      "classes": [],
      "simplified_code": "class B {}",
      "blocks": [
        {
          "id": 1,
          "label": "class B {}",
          "successors": []
        }
      ]
    },
    {
      "name": "A",
      "type": "class",
      "start_line": 6,
      "end_line": 8,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 7,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(b: B) {}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(b: B) {}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class A {\n  constructor(b: B) {}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class A {\nconstructor(b: B) {}",
          "successors": []
        }
      ]
    },
    {
      "name": "BImpl",
      "type": "class",
      "start_line": 10,
      "end_line": 12,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 11,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(a: A) {}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(a: A) {}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class BImpl {\n  constructor(a: A) {}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class BImpl {\n  constructor(a: A) {}",
          "successors": []
        }
      ]
    },
    {
      "name": "AppController",
      "type": "class",
      "start_line": 14,
      "end_line": 16,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 15,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(a: A) {}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(a: A) {}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class AppController {\n  constructor(a: A) {}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class AppController {\n  constructor(a: A) {}",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AppModule",
      "type": "class",
      "start_line": 22,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "export class AppModule {}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AppModule {}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import { Test } from '@nestjs/testing';\nimport { expect } from 'chai';\nimport { Controller, Injectable, Module } from '@nestjs/common';\nclass B {}\n@Injectable()\n}\n@Injectable()\n}\n@Controller()\n}\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\n});",
  "blocks": [
    {
      "id": 1,
      "label": "import { Test } from '@nestjs/testing';\nimport { expect } from 'chai';",
      "successors": [
        {
          "id": 3,
          "label": "import { Controller, Injectable, Module } from '@nestjs/common';\nclass B {}",
          "successors": [
            {
              "id": 5,
              "label": "@Injectable()\n",
              "successors": [
                {
                  "id": 7,
                  "label": "@Injectable()\n",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@Controller()\n",
                      "successors": [
                        {
                          "id": 11,
                          "label": "@Module({ imports: [], controllers: [AppController], providers: [A, { provide: B, useClass: BImpl }] })\nexport class AppModule {}",
                          "successors": [
                            {
                              "id": 13,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}