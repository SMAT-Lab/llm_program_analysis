{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [
    {
      "name": "removeKnownKeys",
      "type": "function",
      "start_line": 11,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "function removeKnownKeys(keys: string[]) {\n  return without(keys, 'time', 'level', 'caller', 'message', 'stack_trace');\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function removeKnownKeys(keys: string[]) {\nreturn without(keys, 'time', 'level', 'caller', 'message', 'stack_trace');",
          "successors": []
        }
      ]
    },
    {
      "name": "formatJSONLine",
      "type": "function",
      "start_line": 14,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "export function formatJSONLine(\n  rawText: string,\n  withTimestamps?: boolean\n): FormattedLine[] {\n  const spans: Span[] = [];\n  const lines: FormattedLine[] = [];\n  let line = '';\n  const text = withTimestamps ? rawText.substring(TIMESTAMP_LENGTH) : rawText;\n  const json: JSONLogs = JSON.parse(text);\n  const { time, level, caller, message, stack_trace: stackTrace } = json;\n  const keys = removeKnownKeys(Object.keys(json));\n  if (withTimestamps) {\n    const timestamp = rawText.substring(0, TIMESTAMP_LENGTH);\n    spans.push({ text: timestamp });\n    line += `${timestamp} `;\n  }\n  line += formatTime(time, spans, line);\n  line += formatLevel(level, spans, line);\n  line += formatCaller(caller, spans, line);\n  line += formatMessage(message, spans, line, !!keys.length);\n  keys.forEach((key, idx) => {\n    line += formatKeyValuePair(\n      key,\n      json[key],\n      spans,\n      line,\n      idx === keys.length - 1\n    );\n  });\n  lines.push({ line, spans });\n  formatStackTrace(stackTrace, lines);\n  return lines;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function formatJSONLine(rawText: string, withTimestamps?: boolean): FormattedLine[] {\nconst spans: Span[] = [];",
          "successors": [
            {
              "id": 3,
              "label": "const lines: FormattedLine[] = [];\nlet line = '';",
              "successors": [
                {
                  "id": 5,
                  "label": "const text = withTimestamps ? rawText.substring(TIMESTAMP_LENGTH) : rawText;\nconst json: JSONLogs = JSON.parse(text);",
                  "successors": [
                    {
                      "id": 7,
                      "label": "const { time, level, caller, message, stack_trace: stackTrace } = json;\nconst keys = removeKnownKeys(Object.keys(json));",
                      "successors": [
                        {
                          "id": 9,
                          "label": "if (withTimestamps) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "const timestamp = rawText.substring(0, TIMESTAMP_LENGTH);\nspans.push({ text: timestamp });",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "line += `${timestamp} `;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "}\nline += formatTime(time, spans, line);",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "line += formatLevel(level, spans, line);\nline += formatCaller(caller, spans, line);",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "line += formatMessage(message, spans, line, !!keys.length);\nkeys.forEach((key, idx) => {",
                                      "successors": [
                                        {
                                          "id": 19,
                                          "label": "line += formatKeyValuePair(key, json[key], spans, line, idx === keys.length - 1);\n});",
                                          "successors": [
                                            {
                                              "id": 21,
                                              "label": "lines.push({ line, spans });\nformatStackTrace(stackTrace, lines);",
                                              "successors": [
                                                {
                                                  "id": 23,
                                                  "label": "return lines;\n}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { without } from 'lodash';\nimport { FormattedLine, Span, JSONLogs, TIMESTAMP_LENGTH } from './types';\nimport {\n  formatCaller,\n  formatKeyValuePair,\n  formatLevel,\n  formatMessage,\n  formatStackTrace,\n  formatTime,\n} from './formatters';\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { without } from 'lodash';\nimport { FormattedLine, Span, JSONLogs, TIMESTAMP_LENGTH } from './types';\nimport {\n  formatCaller,\n  formatKeyValuePair,\n  formatLevel,\n  formatMessage,\n  formatStackTrace,\n  formatTime,\n} from './formatters';",
      "successors": []
    }
  ]
}