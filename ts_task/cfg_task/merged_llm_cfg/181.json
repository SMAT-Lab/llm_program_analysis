{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [],
  "classes": [
    {
      "name": "MenuStack",
      "type": "class",
      "start_line": 8,
      "end_line": 61,
      "functions": [
        {
          "name": "getElementsForTesting",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "  function getElementsForTesting() {\n    fixture.detectChanges();\n    triggers = fixture.componentInstance.triggers.toArray();\n    menus = fixture.componentInstance.menus.toArray();\n    menuStack = fixture.componentInstance.menuBar.menuStack;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "function getElementsForTesting() {\n    fixture.detectChanges();",
              "successors": [
                {
                  "id": 3,
                  "label": "    triggers = fixture.componentInstance.triggers.toArray();\n    menus = fixture.componentInstance.menus.toArray();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    menuStack = fixture.componentInstance.menuBar.menuStack;\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "openAllMenus",
          "type": "function",
          "start_line": 29,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "  function openAllMenus() {\n    triggers[0].open();\n    getElementsForTesting();\n    triggers[1].open();\n    getElementsForTesting();\n    triggers[2].open();\n    getElementsForTesting();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "function openAllMenus() {\n    triggers[0].open();",
              "successors": [
                {
                  "id": 3,
                  "label": "    getElementsForTesting();\n    triggers[1].open();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    getElementsForTesting();\n    triggers[2].open();",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    getElementsForTesting();\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "anonymous_function_1",
          "type": "function",
          "start_line": 19,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [CdkMenuModule, MultiMenuWithSubmenu],\n    });\n  }));",
          "blocks": [
            {
              "id": 1,
              "label": "beforeEach(waitForAsync(() => {",
              "successors": [
                {
                  "id": 2,
                  "label": "  TestBed.configureTestingModule({\n    imports: [CdkMenuModule, MultiMenuWithSubmenu],",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  });",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "}));",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "anonymous_function_2",
          "type": "function",
          "start_line": 24,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "  beforeEach(() => {\n    fixture = TestBed.createComponent(MultiMenuWithSubmenu);\n    fixture.detectChanges();\n    getElementsForTesting();\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "beforeEach(() => {\n    fixture = TestBed.createComponent(MultiMenuWithSubmenu);",
              "successors": [
                {
                  "id": 3,
                  "label": "    fixture.detectChanges();\n    getElementsForTesting();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "anonymous_function_3",
          "type": "function",
          "start_line": 40,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    () => {\n      openAllMenus();\n      expect(menus.length).toBe(3);\n      const spy = jasmine.createSpy('menu stack closed spy');\n      menuStack.closed.subscribe(spy);\n      menuStack.closeAll();\n      expect(spy).toHaveBeenCalledTimes(3);\n      const callArgs = spy.calls.all().map((v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item);\n      expect(callArgs).toEqual(menus.reverse());\n      expect(menuStack.isEmpty()).toBeTrue();\n    },",
          "blocks": [
            {
              "id": 1,
              "label": "openAllMenus();\nexpect(menus.length).toBe(3);\nconst spy = jasmine.createSpy('menu stack closed spy');\nmenuStack.closed.subscribe(spy);\nmenuStack.closeAll();\nexpect(spy).toHaveBeenCalledTimes(3);",
              "successors": [
                {
                  "id": 3,
                  "label": "const callArgs = spy.calls.all().map((v: jasmine.CallInfo<jasmine.Func>) => v.args[0].item);\nexpect(callArgs).toEqual(menus.reverse());\nexpect(menuStack.isEmpty()).toBeTrue();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "anonymous_function_4",
          "type": "function",
          "start_line": 52,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should close triggering menu and all menus below it', () => {\n    openAllMenus();\n    expect(menus.length).toBe(3);\n    triggers[1].toggle();\n    getElementsForTesting();\n    expect(menus.length).toBe(1);\n    expect(menuStack.length()).withContext('menu stack should only have the single menu').toBe(1);\n    expect(menuStack.peek()).toEqual(menus[0]);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should close triggering menu and all menus below it', () => {\nopenAllMenus();\nexpect(menus.length).toBe(3);\ntriggers[1].toggle();\ngetElementsForTesting();\nexpect(menus.length).toBe(1);\nexpect(menuStack.length()).withContext('menu stack should only have the single menu').toBe(1);\nexpect(menuStack.peek()).toEqual(menus[0]);",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('MenuStack', () => {\n  let fixture: ComponentFixture<MultiMenuWithSubmenu>;\n  let menuStack: MenuStack;\n  let triggers: CdkMenuTrigger[];\n  let menus: CdkMenu[];\n  }\n  }));\n  });\n  }\n  it(\n    'should fill the menu stack with the latest menu at the end of the stack and oldest at' +\n      ' the start of the stack',\n    },\n  );\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('MenuStack', () => {\nlet fixture: ComponentFixture<MultiMenuWithSubmenu>;",
          "successors": [
            {
              "id": 3,
              "label": "let menuStack: MenuStack;\nlet triggers: CdkMenuTrigger[];",
              "successors": [
                {
                  "id": 5,
                  "label": "let menus: CdkMenu[];\n}",
                  "successors": [
                    {
                      "id": 7,
                      "label": "});\n});",
                      "successors": [
                        {
                          "id": 9,
                          "label": "}\nit('should fill the menu stack with the latest menu at the end of the stack and oldest at the start of the stack', {}, );",
                          "successors": [
                            {
                              "id": 11,
                              "label": "});\n});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "MultiMenuWithSubmenu",
      "type": "class",
      "start_line": 88,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": "class MultiMenuWithSubmenu {\n  @ViewChild(CdkMenuBar) menuBar: CdkMenuBar;\n  @ViewChildren(CdkMenuTrigger) triggers: QueryList<CdkMenuTrigger>;\n  @ViewChildren(CdkMenu) menus: QueryList<CdkMenu>;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class MultiMenuWithSubmenu {",
          "successors": [
            {
              "id": 2,
              "label": "  @ViewChild(CdkMenuBar) menuBar: CdkMenuBar;",
              "successors": []
            },
            {
              "id": 3,
              "label": "  @ViewChildren(CdkMenuTrigger) triggers: QueryList<CdkMenuTrigger>;",
              "successors": []
            },
            {
              "id": 4,
              "label": "  @ViewChildren(CdkMenu) menus: QueryList<CdkMenu>;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import {QueryList, ViewChild, ViewChildren, Component} from '@angular/core';\nimport {CdkMenu} from './menu';\nimport {CdkMenuBar} from './menu-bar';\nimport {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';\nimport {CdkMenuTrigger} from './menu-trigger';\nimport {MenuStack} from './menu-stack';\nimport {CdkMenuModule} from './menu-module';\n});\n@Component({\n  template: `\n    <div>\n      <div cdkMenuBar id=\"menu_bar\">\n        <button cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n      </div>\n      <ng-template #file>\n        <div cdkMenu id=\"file_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"share\">Share</button>\n        </div>\n      </ng-template>\n      <ng-template #share>\n        <div cdkMenu id=\"share_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"chat\">Chat</button>\n        </div>\n      </ng-template>\n      <ng-template #chat>\n        <div cdkMenu id=\"chat_menu\">\n          <button cdkMenuItem>GVC</button>\n        </div>\n      </ng-template>\n    </div>\n  `,\n  standalone: true,\n  imports: [CdkMenuModule],\n})\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import {QueryList, ViewChild, ViewChildren, Component} from '@angular/core';\nimport {CdkMenu} from './menu';",
      "successors": [
        {
          "id": 3,
          "label": "import {CdkMenuBar} from './menu-bar';\nimport {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';",
          "successors": [
            {
              "id": 5,
              "label": "import {CdkMenuTrigger} from './menu-trigger';\nimport {MenuStack} from './menu-stack';",
              "successors": [
                {
                  "id": 7,
                  "label": "import {CdkMenuModule} from './menu-module';\n",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@Component({\n  template: `\n    <div>\n      <div cdkMenuBar id=\"menu_bar\">\n        <button cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n      </div>\n      <ng-template #file>\n        <div cdkMenu id=\"file_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"share\">Share</button>\n        </div>\n      </ng-template>\n      <ng-template #share>\n        <div cdkMenu id=\"share_menu\">\n          <button cdkMenuItem [cdkMenuTriggerFor]=\"chat\">Chat</button>\n        </div>\n      </ng-template>\n      <ng-template #chat>\n        <div cdkMenu id=\"chat_menu\">\n          <button cdkMenuItem>GVC</button>\n        </div>\n      </ng-template>\n    </div>\n  `,\n  standalone: true,\n  imports: [CdkMenuModule],\n})\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}