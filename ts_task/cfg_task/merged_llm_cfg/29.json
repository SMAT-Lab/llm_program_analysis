{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 176,
  "functions": [],
  "classes": [
    {
      "name": "ProcessMenuOperation",
      "type": "class",
      "start_line": 39,
      "end_line": 176,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n    this.requestTime = Date.now();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.requestTime = Date.now();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 69,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "doAction(): void {\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "callback",
          "type": "function",
          "start_line": 73,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "  callback(uris: string[]): void {\n    this.callbackBindImpl(uris);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "callback(uris: string[]): void {\n    this.callbackBindImpl(uris);",
              "successors": []
            }
          ]
        },
        {
          "name": "callbackBindImpl",
          "type": "function",
          "start_line": 77,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "  protected callbackBindImpl(uris: string[]): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "protected callbackBindImpl(uris: string[]): void {\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "onCompleted",
          "type": "function",
          "start_line": 80,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCompleted(): void {\n    Log.info(TAG, 'onCompleted ' + this.isPause);\n    this.successBatch++;\n    if (!this.isPause) {\n      this.cyclicOperation();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'onCompleted ' + this.isPause);\nthis.successBatch++;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!this.isPause) {\nthis.cyclicOperation();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 88,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "  onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');\n    this.isError = true;\n    this.cyclicOperation();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onError(): void {\n    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.isError = true;\n    this.cyclicOperation();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "processOperation",
          "type": "function",
          "start_line": 95,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "  processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    // Batch deletion\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');\n    if (this.isCancelled) {\n      this.isCancelled = false;\n    }\n    this.startTime = Date.now();\n\n    this.requestOneBatchOperation();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "processOperation(): void {\n    Log.info(TAG, 'processOperation start');\n    let length = this.items.length;\n    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);\n    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);\n    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.isCancelled) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    this.isCancelled = false;\n}\nthis.startTime = Date.now();\nthis.requestOneBatchOperation();",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "}\nthis.startTime = Date.now();\nthis.requestOneBatchOperation();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cyclicOperation",
          "type": "function",
          "start_line": 111,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "  cyclicOperation(): void {\n    Log.info(TAG, 'cyclicOperation');\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n\n    if (this.isCancelled) {\n      this.onProcessDone();\n    }\n\n    if (this.currentBatch >= this.totalBatches || this.isError) {\n      this.onProcessDone();\n    } else {\n      this.requestOneBatchOperation();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "cyclicOperation(): void {\nLog.info(TAG, 'cyclicOperation');",
              "successors": [
                {
                  "id": 3,
                  "label": "this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\nif (this.isCancelled) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.onProcessDone();\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (this.currentBatch >= this.totalBatches || this.isError) {\nthis.onProcessDone();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "} else {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "requestOneBatchOperation",
          "type": "function",
          "start_line": 127,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "  requestOneBatchOperation(): void {\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "requestOneBatchOperation(): void { }",
              "successors": []
            }
          ]
        },
        {
          "name": "onProcessDone",
          "type": "function",
          "start_line": 130,
          "end_line": 141,
          "functions": [],
          "classes": [],
          "simplified_code": "  onProcessDone(): void {\n    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\n    this.findSameOperation = FindSameOperation.NONE;\n    if (this.startTime != null) {\n      let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n      let costTime = Date.now() - this.startTime;\n      Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n      ' ms, average ' + (costTime / operateCount) + ' ms/item.');\n    }\n    this.isCancelled = false;\n    if (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);\nthis.findSameOperation = FindSameOperation.NONE;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.startTime != null) {\n  let operateCount = this.currentBatch >= this.totalBatches ? this.count : this.currentBatch * this.BATCH_SIZE;\n  let costTime = Date.now() - this.startTime;\n  Log.debug(TAG, 'process data operate done, operate ' + operateCount + ' items, cost time ' + costTime +\n  ' ms, average ' + (costTime / operateCount) + ' ms/item.');",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "this.isCancelled = false;\nif (this.onOperationEnd != null) this.onOperationEnd(this.isError, this.successBatch, this.count);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onOperateCancelled",
          "type": "function",
          "start_line": 144,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": "  onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onOperateCancelled(): void {\n    this.onOperateCancelledBindImpl();",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onOperateCancelledBindImpl",
          "type": "function",
          "start_line": 148,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": "  protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "protected onOperateCancelledBindImpl(): void {\n    Log.info(TAG, 'Operate Cancel');\n    this.isCancelled = true;\n    this.onProcessDone();",
              "successors": []
            }
          ]
        },
        {
          "name": "onOperatePause",
          "type": "function",
          "start_line": 155,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "  onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');\n    this.isPause = true;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onOperatePause(): void {\n    Log.info(TAG, 'Operate Pause');",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.isPause = true;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getExpectProgress",
          "type": "function",
          "start_line": 161,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": "  getExpectProgress(): number {\n    Log.info(TAG, 'getExpectProgress');\n    let progress = Math.min(\n      Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\n    return progress;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getExpectProgress(): number {\nLog.info(TAG, 'getExpectProgress');",
              "successors": [
                {
                  "id": 3,
                  "label": "let progress = Math.min(Math.floor(this.MAX_PROGRESS * this.currentBatch * this.BATCH_SIZE / this.count), this.MAX_PROGRESS);\nreturn progress;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setFindSameOperation",
          "type": "function",
          "start_line": 168,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": "  setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setFindSameOperation(newOperation: number): void {\n    this.setFindSameOperationBindImpl(newOperation);",
              "successors": []
            }
          ]
        },
        {
          "name": "setFindSameOperationBindImpl",
          "type": "function",
          "start_line": 172,
          "end_line": 175,
          "functions": [],
          "classes": [],
          "simplified_code": "  protected setFindSameOperationBindImpl(newOperation: number): void {\n    Log.info(TAG, 'setFindSameOperation ' + newOperation);\n    this.findSameOperation = newOperation;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "protected setFindSameOperationBindImpl(newOperation: number): void {\nLog.info(TAG, 'setFindSameOperation ' + newOperation);",
              "successors": [
                {
                  "id": 3,
                  "label": "this.findSameOperation = newOperation;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {\n  // Number of data operated in a batch\n  readonly BATCH_SIZE: number = 1;\n\n  // Maximum progress\n  readonly MAX_PROGRESS: number = 100;\n  items: Object[] = [];\n  menuContext: MenuContext;\n  uris: string[];\n  count: number;\n  onOperationEnd: Function;\n\n  // Total batches operated\n  totalBatches: number;\n\n  // Currently operated batch\n  currentBatch: number = 0;\n  successBatch: number = 0;\n  isCancelled: boolean = false;\n  startTime: number;\n  isPause: boolean = false;\n  isError: boolean = false;\n  findSameOperation: number = FindSameOperation.NONE;\n  requestTime: number;\n\n  }\n\n  }\n\n  // Asynchronous callback for getSelection\n  }\n\n  }\n\n  }\n\n  }\n\n  // Start processing operation\n  }\n\n  // Batch circular deletion\n  }\n\n  // Operate a batch of data\n  }\n\n  }\n\n  // Operate cancel callback\n  }\n\n  }\n\n  // Operate cancel callback\n  }\n\n  // Calculate the operation progress according to the batch\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {",
          "successors": [
            {
              "id": 2,
              "label": "  readonly BATCH_SIZE: number = 1;",
              "successors": []
            },
            {
              "id": 3,
              "label": "  readonly MAX_PROGRESS: number = 100;",
              "successors": []
            },
            {
              "id": 4,
              "label": "  items: Object[] = [];",
              "successors": []
            },
            {
              "id": 5,
              "label": "  menuContext: MenuContext;",
              "successors": []
            },
            {
              "id": 6,
              "label": "  uris: string[];",
              "successors": []
            },
            {
              "id": 7,
              "label": "  count: number;",
              "successors": []
            },
            {
              "id": 8,
              "label": "  onOperationEnd: Function;",
              "successors": []
            },
            {
              "id": 9,
              "label": "  totalBatches: number;",
              "successors": []
            },
            {
              "id": 10,
              "label": "  currentBatch: number = 0;",
              "successors": []
            },
            {
              "id": 11,
              "label": "  successBatch: number = 0;",
              "successors": []
            },
            {
              "id": 12,
              "label": "  isCancelled: boolean = false;",
              "successors": []
            },
            {
              "id": 13,
              "label": "  startTime: number;",
              "successors": []
            },
            {
              "id": 14,
              "label": "  isPause: boolean = false;",
              "successors": []
            },
            {
              "id": 15,
              "label": "  isError: boolean = false;",
              "successors": []
            },
            {
              "id": 16,
              "label": "  findSameOperation: number = FindSameOperation.NONE;",
              "successors": []
            },
            {
              "id": 17,
              "label": "  requestTime: number;",
              "successors": []
            },
            {
              "id": 18,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { AsyncCallback } from './AsyncCallback';\nimport { Log } from '../utils/Log';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { userFileModel } from '../base/UserFileModel';\n\nexport enum FindSameOperation {\n  NONE,\n  REPLACE,\n  SKIP\n}\n\nexport interface Assets {\n  sourceAsset: photoAccessHelper.PhotoAsset,\n  targetAsset: photoAccessHelper.PhotoAsset\n}\n\nconst TAG = 'ProcessMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { AsyncCallback } from './AsyncCallback';",
      "successors": [
        {
          "id": 3,
          "label": "import { Log } from '../utils/Log';\nimport { MenuOperationCallback } from './MenuOperationCallback';",
          "successors": [
            {
              "id": 5,
              "label": "import { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import { userFileModel } from '../base/UserFileModel';\nexport enum FindSameOperation { NONE, REPLACE, SKIP }",
                      "successors": [
                        {
                          "id": 11,
                          "label": "export interface Assets { sourceAsset: photoAccessHelper.PhotoAsset, targetAsset: photoAccessHelper.PhotoAsset }\nconst TAG = 'ProcessMenuOperation';",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}