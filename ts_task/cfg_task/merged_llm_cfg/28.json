{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 130,
  "functions": [],
  "classes": [
    {
      "name": "BatchDeleteMenuOperation",
      "type": "class",
      "start_line": 26,
      "end_line": 130,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {\nsuper(menuContext);",
              "successors": []
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 32,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    Log.info(TAG, 'delete doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let resource: Resource = this.getDeleteMessageResource(dataSource);\n    let deleteResource: Resource = this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.dialog_recycle') : $r('app.string.dialog_delete');\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, deleteResource, this.confirmCallback, this.cancelCallback]);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'delete doAction');\nif (this.menuContext == null) {",
              "successors": [
                {
                  "id": 3,
                  "label": "Log.warn(TAG, 'menuContext is null, return');\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let dataSource: ItemDataSource = this.menuContext.dataSource;\nif (dataSource == null) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "this.count = this.menuContext.items.length;\nif (this.count <= 0) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "this.confirmCallback = (): void => this.confirmCallbackBindImpl();\nthis.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\nlet resource: Resource = this.getDeleteMessageResource(dataSource);\nlet deleteResource: Resource = this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.dialog_recycle') : $r('app.string.dialog_delete');\nthis.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, deleteResource, this.confirmCallback, this.cancelCallback]);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "this.count = dataSource.getSelectedCount();\nif (this.count <= 0) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "this.confirmCallback = (): void => this.confirmCallbackBindImpl();\nthis.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\nlet resource: Resource = this.getDeleteMessageResource(dataSource);\nlet deleteResource: Resource = this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.dialog_recycle') : $r('app.string.dialog_delete');\nthis.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, deleteResource, this.confirmCallback, this.cancelCallback]);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getResourceFromBrowser",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "  getResourceFromBrowser(): Resource {\n    return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getResourceFromBrowser(): Resource {\nreturn this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');",
              "successors": []
            }
          ]
        },
        {
          "name": "getResourceFromGrid",
          "type": "function",
          "start_line": 62,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  getResourceFromGrid(dataSource: ItemDataSource): Resource {\n    if (dataSource != null && dataSource.isSelect()) {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_all_files_tips') : $r('app.string.delete_all_files_tips');\n    } else if (this.count === 1) {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');\n    } else {\n      return this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_files_tips', this.count) : $r('app.string.delete_files_tips', this.count);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getResourceFromGrid(dataSource: ItemDataSource): Resource {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (dataSource != null && dataSource.isSelect()) {\nreturn this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_all_files_tips') : $r('app.string.delete_all_files_tips');",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else if (this.count === 1) {\nreturn this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_single_file_tips') : $r('app.string.delete_single_file_tips');",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "} else {\nreturn this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.recycle_files_tips', this.count) : $r('app.string.delete_files_tips', this.count);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getDeleteMessageResource",
          "type": "function",
          "start_line": 72,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "  getDeleteMessageResource(dataSource: ItemDataSource): Resource {\n    let resource: Resource;\n    if (this.menuContext.deletePageFromType === BroadcastConstants.DELETE_FROM_BROWSER) {\n      resource = this.getResourceFromBrowser();\n    } else {\n      resource = this.getResourceFromGrid(dataSource);\n    }\n    return resource;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let resource: Resource;\nif (this.menuContext.deletePageFromType === BroadcastConstants.DELETE_FROM_BROWSER) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    resource = this.getResourceFromBrowser();\nreturn resource;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\n    resource = this.getResourceFromGrid(dataSource);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return resource;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "confirmCallback",
          "type": "function",
          "start_line": 82,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "  confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "confirmCallback(): void {\n    this.confirmCallbackBindImpl();",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "confirmCallbackBindImpl",
          "type": "function",
          "start_line": 86,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "  protected confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch delete confirm');\n    AppStorage.SetOrCreate<number>('isDelete', 1);\n\n    // 1. Variable initialization\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n\n    // 2. onDeleteStart exit selection mode\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) {\n      onOperationStart();\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_delete'), this.count]);\n\n    // 3. selectManager gets the URI of the data and starts processing deletion in the callback\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'Batch delete confirm');\nAppStorage.SetOrCreate<number>('isDelete', 1);",
              "successors": [
                {
                  "id": 3,
                  "label": "this.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart: Function = this.menuContext.onOperationStart;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (onOperationStart != null) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "  onOperationStart();\nthis.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n  [$r('app.string.action_delete'), this.count]);",
                          "successors": [
                            {
                              "id": 8,
                              "label": "let dataSource: ItemDataSource = this.menuContext.dataSource;",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "if (dataSource == null) {\n  this.items = this.menuContext.items;",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "this.processOperation();",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 11,
                                  "label": "} else {\n  this.items = dataSource.getSelectedItems();",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "this.processOperation();",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n  [$r('app.string.action_delete'), this.count]);\nlet dataSource: ItemDataSource = this.menuContext.dataSource;",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (dataSource == null) {\n  this.items = this.menuContext.items;",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "this.processOperation();",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "} else {\n  this.items = dataSource.getSelectedItems();",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "this.processOperation();",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "requestOneBatchOperation",
          "type": "function",
          "start_line": 112,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;\n    if (item != null) {\n      item.onDelete().then<void, void>((): void => {\n        this.currentBatch++;\n        this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n        this.cyclicOperation();\n      })\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as UserFileDataItem;",
              "successors": [
                {
                  "id": 3,
                  "label": "    if (item != null) {\n      item.onDelete().then<void, void>((): void => {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        this.currentBatch++;\n        this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        this.cyclicOperation();\n      })",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cancelCallback",
          "type": "function",
          "start_line": 123,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "  cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "cancelCallback(): void {\n    this.cancelCallbackBindImpl();",
              "successors": []
            }
          ]
        },
        {
          "name": "cancelCallbackBindImpl",
          "type": "function",
          "start_line": 127,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "  protected cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Batch delete cancel');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "protected cancelCallbackBindImpl(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'Batch delete cancel');",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class BatchDeleteMenuOperation extends ProcessMenuOperation {\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\n\nconst TAG = 'BatchDeleteMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';",
      "successors": [
        {
          "id": 3,
          "label": "import { MenuContext } from './MenuContext';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';",
          "successors": [
            {
              "id": 5,
              "label": "import { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { UserFileDataItem } from '../base/UserFileDataItem';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { MediaConstants } from '../constants/MediaConstants';\nconst TAG = 'BatchDeleteMenuOperation';",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}