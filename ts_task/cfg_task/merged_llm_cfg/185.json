{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 350,
  "functions": [],
  "classes": [
    {
      "name": "NormalMaterialDefines",
      "type": "class",
      "start_line": 36,
      "end_line": 103,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 99,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": "    constructor() {\n        super();\n        this.rebuild();\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {\n    super();",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.rebuild();\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class NormalMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public LIGHTING = false;\n    public IMAGEPROCESSINGPOSTPROCESS = false;\n    public SKIPFINALCOLORCLAMP = false;\n    public LOGARITHMICDEPTH = false;\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class NormalMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public CLIPPLANE5 = false;\n    public CLIPPLANE6 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public LIGHTING = false;\n    public IMAGEPROCESSINGPOSTPROCESS = false;\n    public SKIPFINALCOLORCLAMP = false;\n    public LOGARITHMICDEPTH = false;",
          "successors": []
        }
      ]
    },
    {
      "name": "NormalMaterial",
      "type": "class",
      "start_line": 104,
      "end_line": 349,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 119,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "    constructor(name: string, scene?: Scene) {\n        super(name, scene);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(name: string, scene?: Scene) {\n    super(name, scene);",
              "successors": []
            }
          ]
        },
        {
          "name": "needAlphaBlending",
          "type": "function",
          "start_line": 122,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override needAlphaBlending(): boolean {\n        return this.alpha < 1.0;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override needAlphaBlending(): boolean {\nreturn this.alpha < 1.0;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "needAlphaBlendingForMesh",
          "type": "function",
          "start_line": 125,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\n        return this.needAlphaBlending() || mesh.visibility < 1.0;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\n    return this.needAlphaBlending() || mesh.visibility < 1.0;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "needAlphaTesting",
          "type": "function",
          "start_line": 128,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override needAlphaTesting(): boolean {\n        return false;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override needAlphaTesting(): boolean {\n    return false;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getAlphaTestTexture",
          "type": "function",
          "start_line": 131,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override getAlphaTestTexture(): Nullable<BaseTexture> {\n    return null;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isReadyForSubMesh",
          "type": "function",
          "start_line": 135,
          "end_line": 255,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        const drawWrapper = subMesh._drawWrapper;\n        if (this.isFrozen) {\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new NormalMaterialDefines();\n        }\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n        // Misc.\n        PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n        // Lights\n        defines._needNormals = true;\n        PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n        // Values that need to be evaluated on every frame\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\n        defines.LIGHTING = !this._disableLighting;\n        // Attribs\n        PrepareDefinesForAttributes(mesh, defines, true, true);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            HandleFallbacksForShadows(defines, fallbacks);\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            PrepareAttributesForInstances(attribs, defines);\n            const shaderName = \"normal\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vDiffuseColor\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"logarithmicDepthConstant\",\n            ];\n            const samplers = [\"diffuseSampler\"];\n            const uniformBuffers: string[] = [];\n            addClipPlaneUniforms(uniforms);\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(\n                scene.getEngine().createEffect(\n                    shaderName,\n                    <IEffectCreationOptions>{\n                        attributes: attribs,\n                        uniformsNames: uniforms,\n                        uniformBuffersNames: uniformBuffers,\n                        samplers: samplers,\n                        defines: join,\n                        fallbacks: fallbacks,\n                        onCompiled: this.onCompiled,\n                        onError: this.onError,\n                        indexParameters: { maxSimultaneousLights: 4 },\n                    },\n                    engine\n                ),\n                defines,\n                this._materialContext\n            );\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        drawWrapper._wasPreviouslyReady = true;\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\n        return true;",
          "blocks": [
            {
              "id": 1,
              "label": "public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\nconst drawWrapper = subMesh._drawWrapper;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.isFrozen) {\nif (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return true;\n}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}\nif (!subMesh.materialDefines) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "subMesh.materialDefines = new NormalMaterialDefines();\n}",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "const defines = <NormalMaterialDefines>subMesh.materialDefines;\nconst scene = this.getScene();",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "if (this._isReadyForSubMesh(subMesh)) {\nreturn true;",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "}\nconst engine = scene.getEngine();",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "if (defines._areTexturesDirty) {\ndefines._needUVs = false;",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "if (scene.texturesEnabled) {\nif (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "if (!this._diffuseTexture.isReady()) {\nreturn false;",
                                                      "successors": [
                                                        {
                                                          "id": 23,
                                                          "label": "} else {\ndefines._needUVs = true;",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "defines.DIFFUSE = true;\n}",
                                                              "successors": [
                                                                {
                                                                  "id": 27,
                                                                  "label": "}\nPrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);",
                                                                  "successors": [
                                                                    {
                                                                      "id": 29,
                                                                      "label": "defines._needNormals = true;\nPrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);",
                                                                      "successors": [
                                                                        {
                                                                          "id": 31,
                                                                          "label": "PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\ndefines.LIGHTING = !this._disableLighting;",
                                                                          "successors": [
                                                                            {
                                                                              "id": 33,
                                                                              "label": "PrepareDefinesForAttributes(mesh, defines, true, true);\nif (defines.isDirty) {",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 35,
                                                                                  "label": "defines.markAsProcessed();\nscene.resetCachedMaterial();",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 37,
                                                                                      "label": "const fallbacks = new EffectFallbacks();\nif (defines.FOG) {",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 39,
                                                                                          "label": "fallbacks.addFallback(1, \"FOG\");\nHandleFallbacksForShadows(defines, fallbacks);",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 41,
                                                                                              "label": "if (defines.NUM_BONE_INFLUENCERS > 0) {\nfallbacks.addCPUSkinningFallback(0, mesh);",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 43,
                                                                                                  "label": "defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\nconst attribs = [VertexBuffer.PositionKind];",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 45,
                                                                                                      "label": "if (defines.NORMAL) {\nattribs.push(VertexBuffer.NormalKind);",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 47,
                                                                                                          "label": "if (defines.UV1) {\nattribs.push(VertexBuffer.UVKind);",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 49,
                                                                                                              "label": "if (defines.UV2) {\nattribs.push(VertexBuffer.UV2Kind);",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 51,
                                                                                                                  "label": "PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\nPrepareAttributesForInstances(attribs, defines);",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 53,
                                                                                                                      "label": "const shaderName = \"normal\";\nconst join = defines.toString();",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 55,
                                                                                                                          "label": "const uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vDiffuseInfos\", \"mBones\", \"diffuseMatrix\", \"logarithmicDepthConstant\",];\nconst samplers = [\"diffuseSampler\"];",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 57,
                                                                                                                              "label": "const uniformBuffers: string[] = [];\naddClipPlaneUniforms(uniforms);",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 59,
                                                                                                                                  "label": "PrepareUniformsAndSamplersList(<IEffectCreationOptions>{ uniformsNames: uniforms, uniformBuffersNames: uniformBuffers, samplers: samplers, defines: defines, maxSimultaneousLights: 4, });\nsubMesh.setEffect( scene.getEngine().createEffect( shaderName, <IEffectCreationOptions>{ attributes: attribs, uniformsNames: uniforms, uniformBuffersNames: uniformBuffers, samplers: samplers, defines: join, fallbacks: fallbacks, onCompiled: this.onCompiled, onError: this.onError, indexParameters: { maxSimultaneousLights: 4 }, }, engine ), defines, this._materialContext );",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 61,
                                                                                                                                      "label": "}\nif (!subMesh.effect || !subMesh.effect.isReady()) {",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 63,
                                                                                                                                          "label": "return false;\ndefines._renderId = scene.getRenderId();",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 65,
                                                                                                                                              "label": "drawWrapper._wasPreviouslyReady = true;\ndrawWrapper._wasPreviouslyUsingInstances = !!useInstances;",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 67,
                                                                                                                                                  "label": "return true;",
                                                                                                                                                  "successors": []
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "bindForSubMesh",
          "type": "function",
          "start_line": 257,
          "end_line": 304,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        const scene = this.getScene();\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        // Bones\n        BindBonesParameters(mesh, this._activeEffect);\n        if (this._mustRebind(scene, effect, subMesh)) {\n            // Textures\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n            // Log. depth\n            if (this._useLogarithmicDepth) {\n                BindLogDepth(defines, effect, scene);\n            }\n            scene.bindEyePosition(effect);\n        }\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n        // Lights\n        if (scene.lightsEnabled && !this.disableLighting) {\n            BindLights(scene, mesh, this._activeEffect, defines);\n        }\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n        // Fog\n        BindFogParameters(scene, mesh, this._activeEffect);\n        this._afterBind(mesh, this._activeEffect, subMesh);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\nconst scene = this.getScene();",
              "successors": [
                {
                  "id": 3,
                  "label": "const defines = <NormalMaterialDefines>subMesh.materialDefines;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (!defines) {\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "const effect = subMesh.effect;",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (!effect) {\nreturn;",
                          "successors": []
                        },
                        {
                          "id": 9,
                          "label": "this._activeEffect = effect;\n// Matrices\nthis.bindOnlyWorldMatrix(world);\nthis._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());",
                          "successors": [
                            {
                              "id": 11,
                              "label": "// Bones\nBindBonesParameters(mesh, this._activeEffect);",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (this._mustRebind(scene, effect, subMesh)) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "// Textures\nif (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\nthis._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\nthis._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\nthis._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());",
                                      "successors": []
                                    },
                                    {
                                      "id": 15,
                                      "label": "// Clip plane\nbindClipPlane(effect, this, scene);",
                                      "successors": [
                                        {
                                          "id": 16,
                                          "label": "// Point size\nif (this.pointsCloud) {\nthis._activeEffect.setFloat(\"pointSize\", this.pointSize);",
                                          "successors": []
                                        },
                                        {
                                          "id": 18,
                                          "label": "// Log. depth\nif (this._useLogarithmicDepth) {\nBindLogDepth(defines, effect, scene);",
                                          "successors": []
                                        },
                                        {
                                          "id": 20,
                                          "label": "scene.bindEyePosition(effect);\n}",
                                          "successors": [
                                            {
                                              "id": 22,
                                              "label": "this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);",
                                              "successors": [
                                                {
                                                  "id": 23,
                                                  "label": "// Lights\nif (scene.lightsEnabled && !this.disableLighting) {\nBindLights(scene, mesh, this._activeEffect, defines);",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 25,
                                                  "label": "// View\nif (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\nthis._activeEffect.setMatrix(\"view\", scene.getViewMatrix());",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 27,
                                                  "label": "// Fog\nBindFogParameters(scene, mesh, this._activeEffect);\nthis._afterBind(mesh, this._activeEffect, subMesh);",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 29,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 30,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAnimatables",
          "type": "function",
          "start_line": 305,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override getAnimatables(): IAnimatable[] {\n        const results = [];\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n        return results;",
          "blocks": [
            {
              "id": 1,
              "label": "public override getAnimatables(): IAnimatable[] {\nconst results = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "results.push(this.diffuseTexture);\n}",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return results;\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getActiveTextures",
          "type": "function",
          "start_line": 312,
          "end_line": 318,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override getActiveTextures(): BaseTexture[] {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        return activeTextures;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "const activeTextures = super.getActiveTextures();\nif (this._diffuseTexture) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    activeTextures.push(this._diffuseTexture);\nreturn activeTextures;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return activeTextures;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hasTexture",
          "type": "function",
          "start_line": 319,
          "end_line": 326,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n        return false;",
          "blocks": [
            {
              "id": 1,
              "label": "public override hasTexture(texture: BaseTexture): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (super.hasTexture(texture)) {\n    return true;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (this.diffuseTexture === texture) {\n    return true;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "}\nreturn false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dispose",
          "type": "function",
          "start_line": 328,
          "end_line": 332,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        super.dispose(forceDisposeEffect);",
          "blocks": [
            {
              "id": 1,
              "label": "public override dispose(forceDisposeEffect?: boolean): void {\nif (this.diffuseTexture) {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.diffuseTexture.dispose();\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}\nsuper.dispose(forceDisposeEffect);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "clone",
          "type": "function",
          "start_line": 334,
          "end_line": 336,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override clone(name: string): NormalMaterial {\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override clone(name: string): NormalMaterial {\n    return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);",
              "successors": []
            }
          ]
        },
        {
          "name": "serialize",
          "type": "function",
          "start_line": 337,
          "end_line": 340,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override serialize(): any {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\n        return serializationObject;",
          "blocks": [
            {
              "id": 1,
              "label": "public override serialize(): any {\n    const serializationObject = super.serialize();",
              "successors": [
                {
                  "id": 3,
                  "label": "    serializationObject.customType = \"BABYLON.NormalMaterial\";\n    return serializationObject;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getClassName",
          "type": "function",
          "start_line": 342,
          "end_line": 343,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override getClassName(): string {\n        return \"NormalMaterial\";",
          "blocks": [
            {
              "id": 1,
              "label": "public override getClassName(): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return \"NormalMaterial\";",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Parse",
          "type": "function",
          "start_line": 346,
          "end_line": 348,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static override Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static override Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\n    return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class NormalMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n    }\n    }\n    }\n    }\n    }\n    // Methods\n        return true;\n    }\n    }\n        return results;\n    }\n    }\n        return false;\n    }\n        super.dispose(forceDisposeEffect);\n    }\n    }\n        return serializationObject;\n    }\n        return \"NormalMaterial\";\n    }\n    // Statics\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class NormalMaterial extends PushMaterial {",
          "successors": [
            {
              "id": 2,
              "label": "\t@serializeAsTexture(\"diffuseTexture\")\n\tprivate _diffuseTexture: BaseTexture;",
              "successors": []
            },
            {
              "id": 4,
              "label": "\t@expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n\tpublic diffuseTexture: BaseTexture;",
              "successors": []
            },
            {
              "id": 6,
              "label": "\t@serializeAsColor3()\n\tpublic diffuseColor = new Color3(1, 1, 1);",
              "successors": []
            },
            {
              "id": 8,
              "label": "\t@serialize(\"disableLighting\")\n\tprivate _disableLighting = false;",
              "successors": []
            },
            {
              "id": 10,
              "label": "\t@expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n\tpublic disableLighting: boolean;",
              "successors": []
            },
            {
              "id": 12,
              "label": "\t@serialize(\"maxSimultaneousLights\")\n\tprivate _maxSimultaneousLights = 4;",
              "successors": []
            },
            {
              "id": 14,
              "label": "\t@expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n\tpublic maxSimultaneousLights: number;",
              "successors": [
                {
                  "id": 16,
                  "label": "\t\t}",
                  "successors": []
                }
              ]
            },
            {
              "id": 17,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 18,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 19,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 20,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 21,
              "label": "\t// Methods\n\treturn true;",
              "successors": []
            },
            {
              "id": 23,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 24,
              "label": "\treturn results;",
              "successors": []
            },
            {
              "id": 25,
              "label": "\t}",
              "successors": []
            },
            {
              "id": 26,
              "label": "\treturn false;",
              "successors": []
            },
            {
              "id": 27,
              "label": "\treturn serializationObject;",
              "successors": []
            },
            {
              "id": 28,
              "label": "\treturn \"NormalMaterial\";",
              "successors": []
            },
            {
              "id": 29,
              "label": "\t// Statics",
              "successors": []
            },
            {
              "id": 30,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import type { Nullable } from \"core/types\";\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3 } from \"core/Misc/decorators\";\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\nimport type { Matrix } from \"core/Maths/math.vector\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\nimport { VertexBuffer } from \"core/Buffers/buffer\";\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\nimport type { SubMesh } from \"core/Meshes/subMesh\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport { Scene } from \"core/scene\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport \"./normal.fragment\";\nimport \"./normal.vertex\";\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\nimport {\n    BindBonesParameters,\n    BindFogParameters,\n    BindLights,\n    BindLogDepth,\n    HandleFallbacksForShadows,\n    PrepareAttributesForBones,\n    PrepareAttributesForInstances,\n    PrepareDefinesForAttributes,\n    PrepareDefinesForFrameBoundValues,\n    PrepareDefinesForLights,\n    PrepareDefinesForMisc,\n    PrepareUniformsAndSamplersList,\n} from \"core/Materials/materialHelper.functions\";\n}\n}\nRegisterClass(\"BABYLON.NormalMaterial\", NormalMaterial);",
  "blocks": [
    {
      "id": 1,
      "label": "import type { Nullable } from \"core/types\";\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3 } from \"core/Misc/decorators\";\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\nimport type { Matrix } from \"core/Maths/math.vector\";\nimport { Color3 } from \"core/Maths/math.color\";\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\nimport { VertexBuffer } from \"core/Buffers/buffer\";\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\nimport type { SubMesh } from \"core/Meshes/subMesh\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport { Scene } from \"core/scene\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport \"./normal.fragment\";\nimport \"./normal.vertex\";\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\nimport {\n    BindBonesParameters,\n    BindFogParameters,\n    BindLights,\n    BindLogDepth,\n    HandleFallbacksForShadows,\n    PrepareAttributesForBones,\n    PrepareAttributesForInstances,\n    PrepareDefinesForAttributes,\n    PrepareDefinesForFrameBoundValues,\n    PrepareDefinesForLights,\n    PrepareDefinesForMisc,\n    PrepareUniformsAndSamplersList,\n} from \"core/Materials/materialHelper.functions\";\nRegisterClass(\"BABYLON.NormalMaterial\", NormalMaterial);",
      "successors": []
    }
  ]
}