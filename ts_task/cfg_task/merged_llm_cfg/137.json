{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 64,
  "functions": [
    {
      "name": "bundleExecutor",
      "type": "function",
      "start_line": 9,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "export default async function* bundleExecutor(\n  options: ReactNativeBundleOptions,\n  context: ExecutorContext\n): AsyncGenerator<ReactNativeBundleOutput> {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  options.bundleOutput = join(context.root, options.bundleOutput);\n  createDirectory(dirname(options.bundleOutput));\n  await runCliBuild(context.root, projectRoot, options);\n  yield { success: true };\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default async function* bundleExecutor(\n  options: ReactNativeBundleOptions,\n  context: ExecutorContext\n): AsyncGenerator<ReactNativeBundleOutput> {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;",
          "successors": [
            {
              "id": 3,
              "label": "  options.bundleOutput = join(context.root, options.bundleOutput);\n  createDirectory(dirname(options.bundleOutput));",
              "successors": [
                {
                  "id": 5,
                  "label": "  await runCliBuild(context.root, projectRoot, options);\n  yield { success: true };",
                  "successors": [
                    {
                      "id": 7,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "runCliBuild",
      "type": "function",
      "start_line": 20,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "function runCliBuild(\n  workspaceRoot: string,\n  projectRoot: string,\n  options: ReactNativeBundleOptions\n): Promise<ChildProcess> {\n  return new Promise<ChildProcess>((resolve, reject) => {\n    const cliOptions = createBundleOptions(options);\n    const childProcess = fork(\n      require.resolve('react-native/cli.js'),\n      ['bundle', ...cliOptions],\n      {\n        stdio: 'inherit',\n        cwd: pathResolve(workspaceRoot, projectRoot),\n        env: process.env,\n      }\n    );\n    const processExitListener = (signal?: number | NodeJS.Signals) => () => {\n      childProcess.kill(signal);\n      process.exit();\n    };\n    process.once('exit', (signal) => childProcess.kill(signal));\n    process.once('SIGTERM', processExitListener);\n    process.once('SIGINT', processExitListener);\n    process.once('SIGQUIT', processExitListener);\n    childProcess.on('error', (err) => {\n      reject(err);\n    });\n    childProcess.on('exit', (code) => {\n      if (code === 0) {\n        resolve(childProcess);\n      } else {\n        reject(code);\n      }\n    });\n  });\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function runCliBuild(\n  workspaceRoot: string,\n  projectRoot: string,\n  options: ReactNativeBundleOptions\n): Promise<ChildProcess> {\nreturn new Promise<ChildProcess>((resolve, reject) => {",
          "successors": [
            {
              "id": 3,
              "label": "const cliOptions = createBundleOptions(options);\nconst childProcess = fork(\n  require.resolve('react-native/cli.js'),\n  ['bundle', ...cliOptions],\n  {\n    stdio: 'inherit',\n    cwd: pathResolve(workspaceRoot, projectRoot),\n    env: process.env,\n  }\n);",
              "successors": [
                {
                  "id": 5,
                  "label": "const processExitListener = (signal?: number | NodeJS.Signals) => () => {\n  childProcess.kill(signal);\n  process.exit();\n};\nprocess.once('exit', (signal) => childProcess.kill(signal));",
                  "successors": [
                    {
                      "id": 7,
                      "label": "process.once('SIGTERM', processExitListener);\nprocess.once('SIGINT', processExitListener);",
                      "successors": [
                        {
                          "id": 9,
                          "label": "process.once('SIGQUIT', processExitListener);\nchildProcess.on('error', (err) => {\n  reject(err);\n});",
                          "successors": [
                            {
                              "id": 11,
                              "label": "childProcess.on('exit', (code) => {\nif (code === 0) {",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "resolve(childProcess);\n} else {",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "reject(code);\n}\n});",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "});",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "createBundleOptions",
      "type": "function",
      "start_line": 56,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": "function createBundleOptions(options: ReactNativeBundleOptions) {\n  return Object.keys(options).reduce((acc, _k) => {\n    const v = options[_k];\n    const k = names(_k).fileName;\n    if (v === undefined) return acc;\n    acc.push(`--${k}`, v);\n    return acc;\n  }, []);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function createBundleOptions(options: ReactNativeBundleOptions) {\nreturn Object.keys(options).reduce((acc, _k) => {",
          "successors": [
            {
              "id": 3,
              "label": "const v = options[_k];\nconst k = names(_k).fileName;\nif (v === undefined) return acc;",
              "successors": [
                {
                  "id": 5,
                  "label": "acc.push(`--${k}`, v);\nreturn acc;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { createDirectory } from '@nx/workspace/src/utilities/fileutils';\nimport { names, ExecutorContext } from '@nx/devkit';\nimport { dirname, join, resolve as pathResolve } from 'path';\nimport { ChildProcess, fork } from 'child_process';\nimport { ReactNativeBundleOptions } from './schema';\nexport interface ReactNativeBundleOutput {\n  success: boolean;\n}\n}\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { createDirectory } from '@nx/workspace/src/utilities/fileutils';\nimport { names, ExecutorContext } from '@nx/devkit';",
      "successors": [
        {
          "id": 3,
          "label": "import { dirname, join, resolve as pathResolve } from 'path';\nimport { ChildProcess, fork } from 'child_process';",
          "successors": [
            {
              "id": 5,
              "label": "import { ReactNativeBundleOptions } from './schema';\nexport interface ReactNativeBundleOutput {\n  success: boolean;\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}