{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 56,
  "functions": [
    {
      "name": "fillInCustomVariable",
      "type": "function",
      "start_line": 4,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": "function fillInCustomVariable(name: string, label: string, value: string) {\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n    cy.get('input').type('Custom{enter}');\n  });\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalNameInputV2().clear().type(name).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalLabelInputV2().type(label).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.CustomVariable.customValueInput().type(value).blur();\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function fillInCustomVariable(name: string, label: string, value: string) {\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {",
          "successors": [
            {
              "id": 3,
              "label": "    cy.get('input').type('Custom{enter}');",
              "successors": []
            },
            {
              "id": 4,
              "label": "  });\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalNameInputV2().clear().type(name).blur();",
              "successors": [
                {
                  "id": 6,
                  "label": "  e2e.pages.Dashboard.Settings.Variables.Edit.General.generalLabelInputV2().type(label).blur();\n  e2e.pages.Dashboard.Settings.Variables.Edit.CustomVariable.customValueInput().type(value).blur();",
                  "successors": [
                    {
                      "id": 8,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "assertPreviewValues",
      "type": "function",
      "start_line": 12,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": "function assertPreviewValues(expectedValues: string[]) {\n  for (const expected of expectedValues) {\n    const index = expectedValues.indexOf(expected);\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.previewOfValuesOption().eq(index).should('have.text', expected);\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function assertPreviewValues(expectedValues: string[]) {",
          "successors": [
            {
              "id": 2,
              "label": "for (const expected of expectedValues) {",
              "successors": [
                {
                  "id": 3,
                  "label": "const index = expectedValues.indexOf(expected); e2e.pages.Dashboard.Settings.Variables.Edit.General.previewOfValuesOption().eq(index).should('have.text', expected);\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "describe",
      "type": "class",
      "start_line": 18,
      "end_line": 56,
      "functions": [
        {
          "name": "beforeEach",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "  beforeEach(() => {\n    e2e.flows.login(Cypress.env('USERNAME'), Cypress.env('PASSWORD'));\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "beforeEach(() => {\ne2e.flows.login(Cypress.env('USERNAME'), Cypress.env('PASSWORD'));",
              "successors": [
                {
                  "id": 3,
                  "label": "});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 22,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('can add a custom template variable', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'one,two,three');\n    assertPreviewValues(['one', 'two', 'three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('one').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: two');\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('can add a custom template variable', () => {\ne2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });",
              "successors": [
                {
                  "id": 3,
                  "label": "cy.contains(DASHBOARD_NAME).should('be.visible');\ne2e.components.CallToActionCard.buttonV2('Add variable').click();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "fillInCustomVariable('VariableUnderTest', 'Variable under test', 'one,two,three');\nassertPreviewValues(['one', 'two', 'three']);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\ne2e.pages.Dashboard.Settings.Actions.close().click();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('one').click();\ne2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('two').click();",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "cy.get('.markdown-html').should('include.text', 'VariableUnderTest: two');",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 37,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('can add a custom template variable with labels', () => {\n    e2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });\n    cy.contains(DASHBOARD_NAME).should('be.visible');\n    // Create a new \"Custom\" variable\n    e2e.components.CallToActionCard.buttonV2('Add variable').click();\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\n      cy.get('input').type('Custom{enter}');\n    });\n    // Set its name, label, and content\n    fillInCustomVariable('VariableUnderTest', 'Variable under test', 'One : 1,Two : 2, Three : 3');\n    assertPreviewValues(['One', 'Two', 'Three']);\n    // Navigate back to the homepage and change the selected variable value\n    e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\n    e2e.pages.Dashboard.Settings.Actions.close().click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('One').click();\n    e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('Two').click();\n    // Assert it was rendered\n    cy.get('.markdown-html').should('include.text', 'VariableUnderTest: 2');\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('can add a custom template variable with labels', () => {\ne2e.flows.openDashboard({ uid: `${PAGE_UNDER_TEST}?orgId=1&editview=templating` });",
              "successors": [
                {
                  "id": 8,
                  "label": "cy.contains(DASHBOARD_NAME).should('be.visible');\n// Create a new \"Custom\" variable\n e2e.components.CallToActionCard.buttonV2('Add variable').click();",
                  "successors": [
                    {
                      "id": 10,
                      "label": "e2e.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2().within(() => {\ncy.get('input').type('Custom{enter}');",
                      "successors": [
                        {
                          "id": 13,
                          "label": "// Set its name, label, and content\n  fillInCustomVariable('VariableUnderTest', 'Variable under test', 'One: 1, Two: 2, Three: 3');\nassertPreviewValues(['One', 'Two', 'Three']);",
                          "successors": [
                            {
                              "id": 15,
                              "label": "// Navigate back to the homepage and change the selected variable value\n  e2e.pages.Dashboard.Settings.Variables.Edit.General.submitButton().click();\ne2e.pages.Dashboard.Settings.Actions.close().click();",
                              "successors": [
                                {
                                  "id": 17,
                                  "label": "e2e.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts('One').click();\ne2e.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts('Two').click();",
                                  "successors": [
                                    {
                                      "id": 19,
                                      "label": "// Assert it was rendered\n  cy.get('.markdown-html').should('include.text', 'VariableUnderTest: 2');\n});",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('Variables - Custom', () => {\n  });\n  });\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('Variables - Custom', () => {\n});",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import { e2e } from '../utils';\nconst PAGE_UNDER_TEST = 'kVi2Gex7z/test-variable-output';\nconst DASHBOARD_NAME = 'Test variable output';\n}\n}\n});",
  "blocks": [
    {
      "id": 1,
      "label": "import { e2e } from '../utils';\nconst PAGE_UNDER_TEST = 'kVi2Gex7z/test-variable-output';",
      "successors": [
        {
          "id": 3,
          "label": "const DASHBOARD_NAME = 'Test variable output';",
          "successors": []
        }
      ]
    }
  ]
}