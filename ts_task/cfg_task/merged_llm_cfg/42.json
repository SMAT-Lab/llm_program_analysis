{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 179,
  "functions": [],
  "classes": [
    {
      "name": "AlbumsDataSource",
      "type": "class",
      "start_line": 24,
      "end_line": 179,
      "functions": [
        {
          "name": "setBlackList",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "  setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setBlackList(blackList: string[]): void {\n    this.albumDataImpl.setBlackList(blackList);",
              "successors": []
            }
          ]
        },
        {
          "name": "setSelectType",
          "type": "function",
          "start_line": 32,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelectType(selectType: number): void {\n    this.albumDataImpl.setSelectType(selectType);",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setDeviceId",
          "type": "function",
          "start_line": 36,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "  setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setDeviceId(deviceId: string): void {\n    this.albumDataImpl.setDeviceId(deviceId);",
              "successors": []
            }
          ]
        },
        {
          "name": "totalCount",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  totalCount(): number {\n    return this.albumDataItems.length;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "totalCount(): number {\nreturn this.albumDataItems.length;",
              "successors": []
            }
          ]
        },
        {
          "name": "getData",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "  getData(index: number): LazyItem<AlbumDataItem> {\n    return new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getData(index: number): LazyItem<AlbumDataItem> {\nreturn new LazyItem<AlbumDataItem>(this.getDataByIndex(index), index, (index: number): void => this.onDataUpdateBindImpl(index));",
              "successors": []
            }
          ]
        },
        {
          "name": "getDataByIndex",
          "type": "function",
          "start_line": 48,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  getDataByIndex(index: number): AlbumDataItem {\n    if (index < 0 || index >= this.albumDataItems.length) {\n      Log.warn(TAG, index + '/' + this.albumDataItems.length);\n      return undefined;\n    }\n    this.albumDataItems[index].index = index;\n    return this.albumDataItems[index];\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getDataByIndex(index: number): AlbumDataItem {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (index < 0 || index >= this.albumDataItems.length) {\nLog.warn(TAG, index + '/' + this.albumDataItems.length);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return undefined;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "this.albumDataItems[index].index = index;\nreturn this.albumDataItems[index];",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isSelect",
          "type": "function",
          "start_line": 57,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (!this.albumDataItems[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isSelect = true;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < this.albumDataItems.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (!this.albumDataItems[i].isSelect) {\nisSelect = false;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "break;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return isSelect;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "resetLoadState",
          "type": "function",
          "start_line": 68,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  resetLoadState(): void {\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].status === MediaConstants.LOADED) {\n        this.albumDataItems[i].status = MediaConstants.UNDEFINED;\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "resetLoadState(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumDataItems[i].status === MediaConstants.LOADED) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.albumDataItems[i].status = MediaConstants.UNDEFINED;",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                              "successors": [
                                {
                                  "id": 3,
                                  "label": "if (this.albumDataItems[i].status === MediaConstants.LOADED) {\nthis.albumDataItems[i].status = MediaConstants.UNDEFINED;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "}",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAlbumDataItemById",
          "type": "function",
          "start_line": 76,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "  getAlbumDataItemById(id: string): AlbumDataItem | null {\n    let albumDataItem: AlbumDataItem = null;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].id === id) {\n        albumDataItem = this.albumDataItems[i];\n      }\n    }\n    return albumDataItem;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let albumDataItem: AlbumDataItem = null;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < this.albumDataItems.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumDataItems[i].id === id) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "albumDataItem = this.albumDataItems[i];\n}",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (let i = 0; i < this.albumDataItems.length; i++) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "}",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (let i = 0; i < this.albumDataItems.length; i++) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedUris",
          "type": "function",
          "start_line": 86,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getSelectedUris(): string[] {\nlet uris: string[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "this.albumDataItems.forEach((item: AlbumDataItem): void => {\nif (item.isSelect) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "uris.push(item.uri);\n}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "})\nreturn uris;",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isDisableRename",
          "type": "function",
          "start_line": 96,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDisableRename(): boolean {\n    let isDisableRename = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {\n        isDisableRename = true;\n        break;\n      }\n    }\n    return isDisableRename;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isDisableRename(): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "let isDisableRename = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableRename) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "isDisableRename = true;",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "break;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "return isDisableRename;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isDisableDelete",
          "type": "function",
          "start_line": 107,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDisableDelete(): boolean {\n    let isDisableDelete = false;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\n        isDisableDelete = true;\n        break;\n      }\n    }\n    return isDisableDelete;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isDisableDelete = false;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < this.albumDataItems.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumDataItems[i].isSelect && this.albumDataItems[i].isDisableDelete) {\nisDisableDelete = true;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "break;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return isDisableDelete;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setSelect",
          "type": "function",
          "start_line": 118,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelect(isSelect: boolean): void {\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      item.setSelect(isSelect);\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelect(isSelect: boolean): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.albumDataItems.forEach((item: AlbumDataItem): void => {\nitem.setSelect(isSelect);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedCount",
          "type": "function",
          "start_line": 124,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedCount(): number {\n    let count = 0;\n    for (let i = 0;i < this.albumDataItems.length; i++) {\n      if (this.albumDataItems[i].isSelect) {\n        count++;\n      }\n    }\n    return count;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let count = 0;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumDataItems[i].isSelect) {\ncount++;",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for (let i = 0;i < this.albumDataItems.length; i++) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}\nreturn count;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedItems",
          "type": "function",
          "start_line": 134,
          "end_line": 142,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedItems(): Object[] {\n    let items: AlbumDataItem[] = [];\n    this.albumDataItems.forEach((item: AlbumDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getSelectedItems(): Object[] {\nlet items: AlbumDataItem[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "this.albumDataItems.forEach((item: AlbumDataItem): void => {\nif (item.isSelect) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "items.push(item);\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "})",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onDataUpdate",
          "type": "function",
          "start_line": 144,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);",
              "successors": []
            }
          ]
        },
        {
          "name": "onDataUpdateBindImpl",
          "type": "function",
          "start_line": 148,
          "end_line": 151,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onDataUpdateBindImpl(index: number): void {\n    Log.info(TAG, 'onDataUpdate ' + index);\n    this.notifyDataChange(index);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private onDataUpdateBindImpl(index: number): void {\nLog.info(TAG, 'onDataUpdate ' + index);",
              "successors": [
                {
                  "id": 3,
                  "label": "this.notifyDataChange(index);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dataReload",
          "type": "function",
          "start_line": 153,
          "end_line": 157,
          "functions": [],
          "classes": [],
          "simplified_code": "  dataReload(): void {\n    this.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "dataReload(): void {\nthis.reloadAlbumItemData().then<void, void>((isEmpty: boolean): void => {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.notifyDataReload();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dataRemove",
          "type": "function",
          "start_line": 159,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": "  dataRemove(): void {\n    for (let i = this.albumDataItems.length - 1;i >= 0; i--) {\n      if (this.albumDataItems[i].isDeleted()) {\n        this.albumDataItems.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "for (let i = this.albumDataItems.length - 1;i >= 0; i--) {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.albumDataItems[i].isDeleted()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.albumDataItems.splice(i, 1);\nsuper.notifyDataDelete(i);",
                      "successors": [
                        {
                          "id": 1,
                          "label": "for (let i = this.albumDataItems.length - 1;i >= 0; i--) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 1,
                      "label": "for (let i = this.albumDataItems.length - 1;i >= 0; i--) {",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "reloadAlbumItemData",
          "type": "function",
          "start_line": 168,
          "end_line": 171,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    return this.albumDataItems.length === 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadAlbumItemData(): Promise<boolean> {\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();",
              "successors": [
                {
                  "id": 3,
                  "label": "    return this.albumDataItems.length === 0;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "reloadAlbumListItemData",
          "type": "function",
          "start_line": 173,
          "end_line": 178,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadAlbumListItemData(): Promise<boolean> {\n    Log.info(TAG, 'reloadAlbumListItemData');\n    this.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();\n    this.notifyDataReload();\n    return this.albumDataItems.length === 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'reloadAlbumListItemData');\nthis.albumDataItems = await this.albumDataImpl.reloadAlbumItemData();",
              "successors": [
                {
                  "id": 3,
                  "label": "this.notifyDataReload();\nreturn this.albumDataItems.length === 0;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class AlbumsDataSource extends ItemDataSource {\n  private albumDataItems: AlbumDataItem[] = [];\n  private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AlbumsDataSource extends ItemDataSource {\nprivate albumDataItems: AlbumDataItem[] = [];",
          "successors": [
            {
              "id": 3,
              "label": "private albumDataImpl: AlbumDataImpl = new AlbumDataImpl();",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataImpl } from './AlbumDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants'\n\nconst TAG = 'AlbumsDataSource'\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';\nimport { AlbumDataImpl } from './AlbumDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants'\nconst TAG = 'AlbumsDataSource'",
      "successors": []
    }
  ]
}