{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "BaseSettingsController",
      "type": "class",
      "start_line": 22,
      "end_line": 90,
      "functions": [
        {
          "name": "bindComponent",
          "type": "function",
          "start_line": 28,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "  bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;\n\n    // set default property values by component\n    for (let key in this) {\n      if (key in component) {\n        this[key] = component[key];\n      }\n    }\n\n    return this;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "bindComponent(component: any): ISettingsController {\n    this.getComponent = () => component;",
              "successors": [
                {
                  "id": 3,
                  "label": "    for (let key in this) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "      if (key in component) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        this[key] = component[key];\n      }",
                          "successors": [
                            {
                              "id": 7,
                              "label": "    }\n    return this;",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "  }",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "      }\n    }",
                          "successors": [
                            {
                              "id": 8,
                              "label": "    return this;\n  }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "bindProperties",
          "type": "function",
          "start_line": 46,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "  bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {\n    for (let i = 0; i < componentProperties.length; i++) {\n      this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);\n    }\n    return this;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "bindProperties(componentProperties: string[], controllerProperties?: string[]): ISettingsController {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < componentProperties.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.defineBoundProperty(componentProperties[i], controllerProperties ? controllerProperties[i] : componentProperties[i]);",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for (let i = 0; i < componentProperties.length; i++) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "return this;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "initData",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "  initData(): ISettingsController {\n    return this;\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "initData(): ISettingsController {\n    return this;",
              "successors": []
            }
          ]
        },
        {
          "name": "subscribe",
          "type": "function",
          "start_line": 63,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "  subscribe(): ISettingsController {\n    return this;\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "subscribe(): ISettingsController { return this; };",
              "successors": []
            }
          ]
        },
        {
          "name": "unsubscribe",
          "type": "function",
          "start_line": 70,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": "  unsubscribe(): ISettingsController {\n    return this;\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "unsubscribe(): ISettingsController {\nreturn this;",
              "successors": []
            }
          ]
        },
        {
          "name": "defineBoundProperty",
          "type": "function",
          "start_line": 77,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "  private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\n    let __v = this[controllerProperty];\n\n    Object.defineProperty(this, controllerProperty, {\n      get: function () {\n        return __v;\n      },\n      set: function (value) {\n        __v = value;\n        this.getComponent()[componentProperty] = value;\n      }\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private defineBoundProperty(componentProperty: string, controllerProperty: string): void {\nlet __v = this[controllerProperty];",
              "successors": [
                {
                  "id": 3,
                  "label": "Object.defineProperty(this, controllerProperty, {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "get: function () {\n    return __v;\n},",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "set: function (value) {\n    __v = value;\n    this.getComponent()[componentProperty] = value;\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default abstract class BaseSettingsController implements ISettingsController {\n  protected getComponent: () => any;\n\n  /**\n   * Bind component.\n   */\n  }\n\n  /**\n   * Bind component's properties, note that only basic types can be transported.\n   * Type like Resource may meet unexpected error.\n   * If you want to transport resource string or color, ets. AppStorage is suggested @StorageLink.\n   */\n  }\n\n  /**\n   * Initialize data.\n   */\n  };\n\n  /**\n   * Subscribe listeners.\n   */\n  };\n\n  /**\n   * Unsubscribe listeners.\n   */\n  };\n\n  /**\n   * Define bound properties.\n   */\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default abstract class BaseSettingsController implements ISettingsController {\nprotected getComponent: () => any;",
          "successors": [
            {
              "id": 3,
              "label": "/**\n * Bind component.\n */\n}\n/**\n * Bind component's properties, note that only basic types can be transported.\n * Type like Resource may meet unexpected error.\n * If you want to transport resource string or color, ets. AppStorage is suggested @StorageLink.\n */\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "/**\n * Initialize data.\n */\n};\n/**\n * Subscribe listeners.\n */\n};",
                  "successors": [
                    {
                      "id": 7,
                      "label": "/**\n * Unsubscribe listeners.\n */\n};\n/**\n * Define bound properties.\n */\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ISettingsController from './ISettingsController'\n\n/**\n * BaseSettingsController Of Wifi test\n */\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import ISettingsController from './ISettingsController'",
      "successors": []
    }
  ]
}