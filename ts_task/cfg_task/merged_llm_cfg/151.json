{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 97,
  "functions": [],
  "classes": [
    {
      "name": "PlivoSmsProvider",
      "type": "class",
      "start_line": 13,
      "end_line": 97,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 18,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(\n    private config: {\n      accountSid?: string;\n      authToken?: string;\n      from?: string;\n    },\n  ) {\n    super();\n    this.plivoClient = new PlivoClient(config.accountSid, config.authToken);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(\n    private config: {\n      accountSid?: string;\n      authToken?: string;\n      from?: string;\n    },\n  ) {\nsuper();",
              "successors": [
                {
                  "id": 3,
                  "label": "this.plivoClient = new PlivoClient(config.accountSid, config.authToken);\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "sendMessage",
          "type": "function",
          "start_line": 28,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "  async sendMessage(\n    options: ISmsOptions,\n    bridgeProviderData: WithPassthrough<Record<string, unknown>> = {},\n  ): Promise<ISendMessageSuccessResponse> {\n    const transformedData = this.transform(bridgeProviderData, {\n      src: options.from || this.config.from,\n      dst: options.to,\n      text: options.content,\n    });\n    const plivoResponse = await this.plivoClient.messages.create(\n      transformedData.body.src,\n      transformedData.body.dst,\n      transformedData.body.text as string,\n      transformedData.body.optionalParams as object,\n      transformedData.body.powerpackUUID as string,\n    );\n    return {\n      ids: plivoResponse.messageUuid,\n      date: new Date().toISOString(),\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async sendMessage(\n    options: ISmsOptions,\n    bridgeProviderData: WithPassthrough<Record<string, unknown>> = {},\n  ): Promise<ISendMessageSuccessResponse> {\nconst transformedData = this.transform(bridgeProviderData, {\n      src: options.from || this.config.from,\n      dst: options.to,\n      text: options.content,\n    });",
              "successors": [
                {
                  "id": 3,
                  "label": "const plivoResponse = await this.plivoClient.messages.create(\n      transformedData.body.src,\n      transformedData.body.dst,\n      transformedData.body.text as string,\n      transformedData.body.optionalParams as object,\n      transformedData.body.powerpackUUID as string,\n    );\nreturn {\n      ids: plivoResponse.messageUuid,\n      date: new Date().toISOString(),\n    };",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getMessageId",
          "type": "function",
          "start_line": 49,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "  getMessageId(body: any | any[]): string[] {\n    if (Array.isArray(body)) {\n      return body.map((item) => item.messageUuid);\n    }\n    return [body.messageUuid];\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getMessageId(body: any | any[]): string[] {\nif (Array.isArray(body)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return body.map((item) => item.messageUuid);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nreturn [body.messageUuid];",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "parseEventBody",
          "type": "function",
          "start_line": 55,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "  parseEventBody(\n    body: any | any[],\n    identifier: string,\n  ): ISMSEventBody | undefined {\n    if (Array.isArray(body)) {\n      // eslint-disable-next-line no-param-reassign\n      body = body.find((item) => item.messageUuid === identifier);\n    }\n    if (!body) {\n      return undefined;\n    }\n    const status = this.getStatus(body.status);\n    if (status === undefined) {\n      return undefined;\n    }\n    return {\n      status,\n      date: new Date().toISOString(),\n      externalId: body.messageUuid,\n      attempts: body.attempt ? parseInt(body.attempt, 10) : 1,\n      response: body.response ?? '',\n      row: body,\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "parseEventBody(\n    body: any | any[],\n    identifier: string,\n  ): ISMSEventBody | undefined {\n    if (Array.isArray(body)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "        // eslint-disable-next-line no-param-reassign\n        body = body.find((item) => item.messageUuid === identifier);\n    }\nif (!body) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    return undefined;\n}\nconst status = this.getStatus(body.status);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (status === undefined) {\n    return undefined;\n}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return {\n      status,\n      date: new Date().toISOString(),\n      externalId: body.messageUuid,\n      attempts: body.attempt ? parseInt(body.attempt, 10) : 1,\n      response: body.response ?? '',\n      row: body,\n    };",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getStatus",
          "type": "function",
          "start_line": 79,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getStatus(event: string): SmsEventStatusEnum | undefined {\n    switch (event) {\n      case 'queued':\n        return SmsEventStatusEnum.QUEUED;\n      case 'sent':\n        return SmsEventStatusEnum.SENT;\n      case 'failed':\n        return SmsEventStatusEnum.FAILED;\n      case 'undelivered':\n        return SmsEventStatusEnum.UNDELIVERED;\n      case 'delivered':\n        return SmsEventStatusEnum.DELIVERED;\n      case 'rejected':\n        return SmsEventStatusEnum.REJECTED;\n      default:\n        return undefined;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private getStatus(event: string): SmsEventStatusEnum | undefined {",
              "successors": [
                {
                  "id": 2,
                  "label": "switch (event) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case 'queued':\nreturn SmsEventStatusEnum.QUEUED;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case 'sent':\nreturn SmsEventStatusEnum.SENT;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case 'failed':\nreturn SmsEventStatusEnum.FAILED;",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case 'undelivered':\nreturn SmsEventStatusEnum.UNDELIVERED;",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "case 'delivered':\nreturn SmsEventStatusEnum.DELIVERED;",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "label": "case 'rejected':\nreturn SmsEventStatusEnum.REJECTED;",
                      "successors": []
                    },
                    {
                      "id": 15,
                      "label": "default:\nreturn undefined;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 17,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class PlivoSmsProvider extends BaseProvider implements ISmsProvider {\n  id = SmsProviderIdEnum.Plivo;\n  channelType = ChannelTypeEnum.SMS as ChannelTypeEnum.SMS;\n  protected casing = CasingEnum.CAMEL_CASE;\n  private plivoClient: PlivoClient;\n  }\n  }\n  }\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class PlivoSmsProvider extends BaseProvider implements ISmsProvider {\n  id = SmsProviderIdEnum.Plivo;",
          "successors": [
            {
              "id": 3,
              "label": "  channelType = ChannelTypeEnum.SMS as ChannelTypeEnum.SMS;\n  protected casing = CasingEnum.CAMEL_CASE;",
              "successors": [
                {
                  "id": 5,
                  "label": "  private plivoClient: PlivoClient;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import { SmsProviderIdEnum } from '@novu/shared';\nimport {\n  ChannelTypeEnum,\n  ISendMessageSuccessResponse,\n  ISMSEventBody,\n  ISmsOptions,\n  ISmsProvider,\n  SmsEventStatusEnum,\n} from '@novu/stateless';\nimport { Client as PlivoClient } from 'plivo';\nimport { BaseProvider, CasingEnum } from '../../../base.provider';\nimport { WithPassthrough } from '../../../utils/types';\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { SmsProviderIdEnum } from '@novu/shared';\nimport { ChannelTypeEnum, ISendMessageSuccessResponse, ISMSEventBody, ISmsOptions, ISmsProvider, SmsEventStatusEnum } from '@novu/stateless';",
      "successors": [
        {
          "id": 3,
          "label": "import { Client as PlivoClient } from 'plivo';\nimport { BaseProvider, CasingEnum } from '../../../base.provider';",
          "successors": [
            {
              "id": 5,
              "label": "import { WithPassthrough } from '../../../utils/types';",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}