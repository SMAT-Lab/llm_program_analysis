{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 100,
  "functions": [],
  "classes": [
    {
      "name": "AlbumBarModel",
      "type": "class",
      "start_line": 21,
      "end_line": 100,
      "functions": [
        {
          "name": "createActionBar",
          "type": "function",
          "start_line": 22,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "  createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "createActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\nlet actionBarProp: ActionBarProp = new ActionBarProp();\nlet isHorizontal = screenManager.isHorizontal();",
              "successors": [
                {
                  "id": 3,
                  "label": "if (isHorizontal) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\nreturn actionBarProp;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} else {\n  this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\nreturn actionBarProp;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateActionBar",
          "type": "function",
          "start_line": 35,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  updateActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean,\n                  selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): void {\n    let isHorizontal = screenManager.isHorizontal();\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode,\n        selectedAlbumsCount, isDisableRename, isDisableDelete);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isHorizontal = screenManager.isHorizontal();\nif (isHorizontal) {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.updateHorizontalActionBar(actionBarProp, isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n}",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "this.updateVerticalActionBar(actionBarProp, isAlbumSetSelectedMode);\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "updateHorizontalActionBar",
          "type": "function",
          "start_line": 46,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "  private updateHorizontalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,\n                                    isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n    let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      menuList.push(Action.NEW)\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isSidebar: boolean = screenManager.isSidebar();\nactionBarProp\n  .setHasTabBar(isSidebar)\n  .setTitle($r('app.string.tab_albums'))\n  .setIsHeadTitle(true);\nlet menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);\nif (isAlbumSetSelectedMode) {",
              "successors": [
                {
                  "id": 3,
                  "label": "  actionBarProp\n    .setLeftAction(Action.CANCEL)\n    .setMenuList(menuList)\n    .setMode(ActionBarMode.SELECTION_MODE)\n    .setSelectionMode(ActionBarSelectionMode.MULTI);\nreturn actionBarProp;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "  menuList.push(Action.NEW)\n  actionBarProp\n    .setMenuList(menuList)\n    .setMode(ActionBarMode.STANDARD_MODE);\nreturn actionBarProp;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "updateVerticalActionBar",
          "type": "function",
          "start_line": 69,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "  private updateVerticalActionBar(actionBarProp: ActionBarProp, isAlbumSetSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n    menuList.push(Action.NEW);\n    let isSidebar: boolean = screenManager.isSidebar();\n    actionBarProp\n      .setHasTabBar(isSidebar)\n      .setTitle($r('app.string.tab_albums'))\n      .setIsHeadTitle(true);\n\n    if (isAlbumSetSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      actionBarProp\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.STANDARD_MODE);\n    }\n\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let menuList: Action[] = [];\nmenuList.push(Action.NEW);",
              "successors": [
                {
                  "id": 3,
                  "label": "let isSidebar: boolean = screenManager.isSidebar();\nactionBarProp\n  .setHasTabBar(isSidebar)\n  .setTitle($r('app.string.tab_albums'))\n  .setIsHeadTitle(true);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (isAlbumSetSelectedMode) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "  actionBarProp\n    .setLeftAction(Action.CANCEL)\n    .setMode(ActionBarMode.SELECTION_MODE)\n    .setSelectionMode(ActionBarSelectionMode.MULTI);\nreturn actionBarProp;",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "} else {\n  actionBarProp\n    .setMenuList(menuList)\n    .setMode(ActionBarMode.STANDARD_MODE);",
                          "successors": [
                            {
                              "id": 8,
                              "label": "return actionBarProp;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getMenuList",
          "type": "function",
          "start_line": 92,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "  getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isAlbumSetSelectedMode) {\n      menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n      menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\n    }\n    return menuList;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {\n    let menuList: Action[] = [];\nif (isAlbumSetSelectedMode) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    menuList.push((!isDisableRename && selectedAlbumsCount === 1) ? Action.RENAME : Action.RENAME_INVALID);\n    menuList.push((!isDisableDelete && selectedAlbumsCount > 0) ? Action.DELETE : Action.DELETE_INVALID);\nreturn menuList;\n  }",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "return menuList;\n  }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class AlbumBarModel {\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action'\nimport { ActionBarProp } from '../common/ActionBarProp'\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode'\nimport { screenManager } from '../common/ScreenManager'\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Action } from './Action'\nimport { ActionBarProp } from '../common/ActionBarProp'",
      "successors": [
        {
          "id": 3,
          "label": "import { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode'\nimport { screenManager } from '../common/ScreenManager'",
          "successors": []
        }
      ]
    }
  ]
}