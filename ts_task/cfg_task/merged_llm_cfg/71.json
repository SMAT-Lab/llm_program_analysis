{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 45,
  "functions": [
    {
      "name": "getThumbnail",
      "type": "function",
      "start_line": 20,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean): Promise<PixelMap> {\n  await mediaItem.load(true);\n  let imgWidth = mediaItem.width;\n  let imgHeight = mediaItem.height;\n  let scale = generateSampleSize(imgWidth, imgHeight, isCurrent);\n  mediaItem.imgWidth = Math.ceil(mediaItem.width / scale);\n  mediaItem.imgHeight = Math.ceil(mediaItem.height / scale);\n  imgWidth = Math.ceil(imgWidth / scale);\n  imgHeight = Math.ceil(imgHeight / scale);\n  return await mediaItem.getThumbnail(imgWidth, imgHeight);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function getThumbnail(mediaItem: UserFileDataItem, isCurrent: boolean): Promise<PixelMap> {\nawait mediaItem.load(true);",
          "successors": [
            {
              "id": 3,
              "label": "let imgWidth = mediaItem.width;\nlet imgHeight = mediaItem.height;\nlet scale = generateSampleSize(imgWidth, imgHeight, isCurrent);\nmediaItem.imgWidth = Math.ceil(mediaItem.width / scale);\nmediaItem.imgHeight = Math.ceil(mediaItem.height / scale);",
              "successors": [
                {
                  "id": 5,
                  "label": "imgWidth = Math.ceil(imgWidth / scale);\nimgHeight = Math.ceil(imgHeight / scale);\nreturn await mediaItem.getThumbnail(imgWidth, imgHeight);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "generateSampleSize",
      "type": "function",
      "start_line": 32,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "function generateSampleSize(imageWidth: number, imageHeight: number, isCurrent: boolean): number {\n  let width = vp2px(screenManager.getWinWidth());\n  let height = vp2px(screenManager.getWinHeight());\n  width = width === 0 ? screenManager.DEFAULT_WIDTH : width;\n  height = height === 0 ? screenManager.DEFAULT_HEIGHT : height;\n  let maxNumOfPixels;\n  if (isCurrent) {\n    maxNumOfPixels = 2 * width * height;\n  } else {\n    maxNumOfPixels = width * height;\n  }\n  let minSide = Math.min(width, height);\n  return computeSampleSize(imageWidth, imageHeight, minSide, maxNumOfPixels);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let width = vp2px(screenManager.getWinWidth());\nlet height = vp2px(screenManager.getWinHeight());\nwidth = width === 0 ? screenManager.DEFAULT_WIDTH : width;\nheight = height === 0 ? screenManager.DEFAULT_HEIGHT : height;",
          "successors": [
            {
              "id": 3,
              "label": "let maxNumOfPixels;\nif (isCurrent) {\n    maxNumOfPixels = 2 * width * height;\n} else {",
              "successors": [
                {
                  "id": 5,
                  "label": "    maxNumOfPixels = width * height;\n}\nlet minSide = Math.min(width, height);\nreturn computeSampleSize(imageWidth, imageHeight, minSide, maxNumOfPixels);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { screenManager } from '../common/ScreenManager';\nimport { computeSampleSize } from '../utils/ImageUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { screenManager } from '../common/ScreenManager';\nimport { computeSampleSize } from '../utils/ImageUtil';",
      "successors": [
        {
          "id": 3,
          "label": "import { UserFileDataItem } from '../base/UserFileDataItem';",
          "successors": []
        }
      ]
    }
  ]
}