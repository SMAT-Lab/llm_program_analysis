{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [],
  "classes": [
    {
      "name": "FederationServersRaw",
      "type": "class",
      "start_line": 6,
      "end_line": 32,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 7,
          "end_line": 9,
          "functions": [],
          "classes": [],
          "simplified_code": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IFederationServer>>) {\n\t\tsuper(db, 'federation_servers', trash);\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IFederationServer>>)\n    super(db, 'federation_servers', trash);",
              "successors": []
            }
          ]
        },
        {
          "name": "modelIndexes",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { domain: 1 } }];\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "protected modelIndexes(): IndexDescription[] {\nreturn [{ key: { domain: 1 } }];",
              "successors": []
            }
          ]
        },
        {
          "name": "saveDomain",
          "type": "function",
          "start_line": 13,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "\tsaveDomain(domain: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ domain },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdomain,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "saveDomain(domain: string): Promise<UpdateResult> {\nreturn this.updateOne(",
              "successors": [
                {
                  "id": 3,
                  "label": "{ domain },\n{",
                  "successors": [
                    {
                      "id": 5,
                      "label": "$setOnInsert: {\ndomain,",
                      "successors": [
                        {
                          "id": 7,
                          "label": "},\n},",
                          "successors": [
                            {
                              "id": 9,
                              "label": "{ upsert: true },\n);",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "refreshServers",
          "type": "function",
          "start_line": 24,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "\tasync refreshServers(): Promise<void> {\n\t\t// TODO remove model dependency - this logs should be inside a function/service and not in a model\n\t\tconst domains = await Users.getDistinctFederationDomains();\n\t\tfor await (const domain of domains) {\n\t\t\tawait this.saveDomain(domain);\n\t\t}\n\t\tawait this.deleteMany({ domain: { $nin: domains } });\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "async refreshServers(): Promise<void> {\n// TODO remove model dependency - this logs should be inside a function/service and not in a model\nconst domains = await Users.getDistinctFederationDomains();",
              "successors": [
                {
                  "id": 3,
                  "label": "for await (const domain of domains) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await this.saveDomain(domain);\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "await this.deleteMany({ domain: { $nin: domains } });\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class FederationServersRaw extends BaseRaw<IFederationServer> implements IFederationServersModel {\n\t}\n\t}\n\t}\n\t}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class FederationServersRaw extends BaseRaw<IFederationServer> implements IFederationServersModel {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import type { IFederationServer, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IFederationServersModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\nimport { BaseRaw } from './BaseRaw';\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import type { IFederationServer, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IFederationServersModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\nimport { BaseRaw } from './BaseRaw';",
      "successors": []
    }
  ]
}