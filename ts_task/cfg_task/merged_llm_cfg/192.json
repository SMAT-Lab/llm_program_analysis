{
  "name": "workspace_repository",
  "type": "CFG",
  "start_line": 28,
  "end_line": 551,
  "functions": [],
  "classes": [
    {
      "name": "WorkspaceRepository",
      "type": "class",
      "start_line": 28,
      "end_line": 551,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 32,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(\n    internalContext: WorkspaceInternalContext,\n    target: EntityTarget<Entity>,\n    manager: EntityManager,\n    queryRunner?: QueryRunner,\n  ) {\n    super(target, manager, queryRunner);\n    this.internalContext = internalContext;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor (\n    internalContext: WorkspaceInternalContext,\n    target: EntityTarget<Entity>,\n    manager: EntityManager,\n    queryRunner?: QueryRunner,\n  ) {\nsuper(target, manager, queryRunner);",
              "successors": [
                {
                  "id": 3,
                  "label": "this.internalContext = internalContext;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "find",
          "type": "function",
          "start_line": 41,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async find(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<Entity[]> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    const result = await manager.find(this.target, computedOptions);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions(options);",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.find(this.target, computedOptions);\nconst formattedResult = await this.formatResult(result);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findBy",
          "type": "function",
          "start_line": 51,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<Entity[]> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    const result = await manager.findBy(this.target, computedOptions.where);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions({ where });",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.findBy(this.target, computedOptions.where);\nconst formattedResult = await this.formatResult(result);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findAndCount",
          "type": "function",
          "start_line": 61,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findAndCount(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<[Entity[], number]> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    const result = await manager.findAndCount(this.target, computedOptions);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async findAndCount(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<[Entity[], number]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions(options);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const result = await manager.findAndCount(this.target, computedOptions);\nconst formattedResult = await this.formatResult(result);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return formattedResult;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "findAndCountBy",
          "type": "function",
          "start_line": 71,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findAndCountBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<[Entity[], number]> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    const result = await manager.findAndCountBy(\n      this.target,\n      computedOptions.where,\n    );\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions({ where });",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.findAndCountBy(\n  this.target,\n  computedOptions.where,\n);\nconst formattedResult = await this.formatResult(result);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findOne",
          "type": "function",
          "start_line": 84,
          "end_line": 93,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findOne(\n    options: FindOneOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<Entity | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    const result = await manager.findOne(this.target, computedOptions);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async findOne(options: FindOneOptions<Entity>, entityManager?: EntityManager): Promise<Entity | null> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions(options);\nconst result = await manager.findOne(this.target, computedOptions);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const formattedResult = await this.formatResult(result);\nreturn formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findOneBy",
          "type": "function",
          "start_line": 94,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findOneBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<Entity | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    const result = await manager.findOneBy(this.target, computedOptions.where);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "  override async findOneBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<Entity | null> {\n    const manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "    const computedOptions = await this.transformOptions({ where });\n    const result = await manager.findOneBy(this.target, computedOptions.where);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    const formattedResult = await this.formatResult(result);\n    return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findOneOrFail",
          "type": "function",
          "start_line": 104,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findOneOrFail(\n    options: FindOneOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<Entity> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    const result = await manager.findOneOrFail(this.target, computedOptions);\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions(options);",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.findOneOrFail(this.target, computedOptions);\nconst formattedResult = await this.formatResult(result);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "findOneByOrFail",
          "type": "function",
          "start_line": 114,
          "end_line": 126,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async findOneByOrFail(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<Entity> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    const result = await manager.findOneByOrFail(\n      this.target,\n      computedOptions.where,\n    );\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async findOneByOrFail(\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nconst result = await manager.findOneByOrFail(",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const formattedResult = await this.formatResult(result);\nreturn formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "save",
          "type": "function",
          "start_line": 127,
          "end_line": 171,
          "functions": [],
          "classes": [],
          "simplified_code": "  override save<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T[]>;\n  override save<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<(T & Entity)[]>;\n  override save<T extends DeepPartial<Entity>>(\n    entity: T,\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T>;\n  override save<T extends DeepPartial<Entity>>(\n    entity: T,\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T & Entity>;\n  override async save<T extends DeepPartial<Entity>>(\n    entityOrEntities: T | T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T | T[]> {\n    const manager = entityManager || this.manager;\n    const formattedEntityOrEntities = await this.formatData(entityOrEntities);\n    let result: T | T[];\n    // Needed becasuse save method has multiple signature, otherwise we will need to do a type assertion\n    if (Array.isArray(formattedEntityOrEntities)) {\n      result = await manager.save(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    } else {\n      result = await manager.save(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    }\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst formattedEntityOrEntities = await this.formatData(entityOrEntities);",
              "successors": [
                {
                  "id": 3,
                  "label": "let result: T | T[];\nif (Array.isArray(formattedEntityOrEntities)) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  result = await manager.save(this.target, formattedEntityOrEntities, options);\nconst formattedResult = await this.formatResult(result);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "return formattedResult;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "} else {\n  result = await manager.save(this.target, formattedEntityOrEntities, options);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "const formattedResult = await this.formatResult(result);\nreturn formattedResult;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "start_line": 172,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": "  override remove(\n    entities: Entity[],\n    options?: RemoveOptions,\n    entityManager?: EntityManager,\n  ): Promise<Entity[]>;\n  override remove(\n    entity: Entity,\n    options?: RemoveOptions,\n    entityManager?: EntityManager,\n  ): Promise<Entity>;\n  override async remove(\n    entityOrEntities: Entity | Entity[],\n    options?: RemoveOptions,\n    entityManager?: EntityManager,\n  ): Promise<Entity | Entity[]> {\n    const manager = entityManager || this.manager;\n    const formattedEntityOrEntities = await this.formatData(entityOrEntities);\n    const result = await manager.remove(\n      this.target,\n      formattedEntityOrEntities,\n      options,\n    );\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst formattedEntityOrEntities = await this.formatData(entityOrEntities);",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.remove(this.target, formattedEntityOrEntities, options);\nconst formattedResult = await this.formatResult(result);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return formattedResult;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "delete",
          "type": "function",
          "start_line": 197,
          "end_line": 215,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async delete(\n    criteria:\n      | string\n      | string[]\n      | number\n      | number[]\n      | Date\n      | Date[]\n      | ObjectId\n      | ObjectId[]\n      | FindOptionsWhere<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<DeleteResult> {\n    const manager = entityManager || this.manager;\n    if (typeof criteria === 'object' && 'where' in criteria) {\n      criteria = await this.transformOptions(criteria);\n    }\n    return manager.delete(this.target, criteria);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nif (typeof criteria === 'object' && 'where' in criteria) {",
              "successors": [
                {
                  "id": 3,
                  "label": "criteria = await this.transformOptions(criteria);\nreturn manager.delete(this.target, criteria);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return manager.delete(this.target, criteria);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "softRemove",
          "type": "function",
          "start_line": 216,
          "end_line": 260,
          "functions": [],
          "classes": [],
          "simplified_code": "  override softRemove<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T[]>;\n  override softRemove<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<(T & Entity)[]>;\n  override softRemove<T extends DeepPartial<Entity>>(\n    entity: T,\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T>;\n  override softRemove<T extends DeepPartial<Entity>>(\n    entity: T,\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T & Entity>;\n  override async softRemove<T extends DeepPartial<Entity>>(\n    entityOrEntities: T | T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T | T[]> {\n    const manager = entityManager || this.manager;\n    const formattedEntityOrEntities = await this.formatData(entityOrEntities);\n    let result: T | T[];\n    // Needed becasuse save method has multiple signature, otherwise we will need to do a type assertion\n    if (Array.isArray(formattedEntityOrEntities)) {\n      result = await manager.softRemove(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    } else {\n      result = await manager.softRemove(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    }\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst formattedEntityOrEntities = await this.formatData(entityOrEntities);",
              "successors": [
                {
                  "id": 3,
                  "label": "let result: T | T[];\nif (Array.isArray(formattedEntityOrEntities)) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "result = await manager.softRemove(this.target, formattedEntityOrEntities, options);\nconst formattedResult = await this.formatResult(result);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "return formattedResult;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "} else { result = await manager.softRemove(this.target, formattedEntityOrEntities, options); }\nconst formattedResult = await this.formatResult(result);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "return formattedResult;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "softDelete",
          "type": "function",
          "start_line": 261,
          "end_line": 279,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async softDelete(\n    criteria:\n      | string\n      | string[]\n      | number\n      | number[]\n      | Date\n      | Date[]\n      | ObjectId\n      | ObjectId[]\n      | FindOptionsWhere<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\n    const manager = entityManager || this.manager;\n    if (typeof criteria === 'object' && 'where' in criteria) {\n      criteria = await this.transformOptions(criteria);\n    }\n    return manager.softDelete(this.target, criteria);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async softDelete(\n    criteria:",
              "successors": [
                {
                  "id": 3,
                  "label": "        | string\n        | string[]",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        | number\n        | number[]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        | Date\n        | Date[]",
                          "successors": [
                            {
                              "id": 9,
                              "label": "        | ObjectId\n        | ObjectId[]",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "        | FindOptionsWhere<Entity>,\n    entityManager?: EntityManager,",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "): Promise<UpdateResult> {\nconst manager = entityManager || this.manager;",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "if (typeof criteria === 'object' && 'where' in criteria) {",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "    criteria = await this.transformOptions(criteria);\n}",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "label": "return manager.softDelete(this.target, criteria);",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 17,
                                              "label": "}\nreturn manager.softDelete(this.target, criteria);",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "recover",
          "type": "function",
          "start_line": 280,
          "end_line": 324,
          "functions": [],
          "classes": [],
          "simplified_code": "  override recover<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T[]>;\n  override recover<T extends DeepPartial<Entity>>(\n    entities: T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<(T & Entity)[]>;\n  override recover<T extends DeepPartial<Entity>>(\n    entity: T,\n    options: SaveOptions & { reload: false },\n    entityManager?: EntityManager,\n  ): Promise<T>;\n  override recover<T extends DeepPartial<Entity>>(\n    entity: T,\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T & Entity>;\n  override async recover<T extends DeepPartial<Entity>>(\n    entityOrEntities: T | T[],\n    options?: SaveOptions,\n    entityManager?: EntityManager,\n  ): Promise<T | T[]> {\n    const manager = entityManager || this.manager;\n    const formattedEntityOrEntities = await this.formatData(entityOrEntities);\n    let result: T | T[];\n    // Needed becasuse save method has multiple signature, otherwise we will need to do a type assertion\n    if (Array.isArray(formattedEntityOrEntities)) {\n      result = await manager.recover(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    } else {\n      result = await manager.recover(\n        this.target,\n        formattedEntityOrEntities,\n        options,\n      );\n    }\n    const formattedResult = await this.formatResult(result);\n    return formattedResult;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst formattedEntityOrEntities = await this.formatData(entityOrEntities);",
              "successors": [
                {
                  "id": 3,
                  "label": "let result: T | T[];\nif (Array.isArray(formattedEntityOrEntities)) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "result = await manager.recover(\n    this.target,\n    formattedEntityOrEntities,\n    options,\n  );\n}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "else {\nresult = await manager.recover(\n    this.target,\n    formattedEntityOrEntities,\n    options,\n  );",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}\nconst formattedResult = await this.formatResult(result);",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "return formattedResult;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "restore",
          "type": "function",
          "start_line": 325,
          "end_line": 343,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async restore(\n    criteria:\n      | string\n      | string[]\n      | number\n      | number[]\n      | Date\n      | Date[]\n      | ObjectId\n      | ObjectId[]\n      | FindOptionsWhere<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\n    const manager = entityManager || this.manager;\n    if (typeof criteria === 'object' && 'where' in criteria) {\n      criteria = await this.transformOptions(criteria);\n    }\n    return manager.restore(this.target, criteria);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async restore( criteria: | string | string[] | number | number[] | Date | Date[] | ObjectId | ObjectId[] | FindOptionsWhere<Entity>, entityManager?: EntityManager, ): Promise<UpdateResult> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (typeof criteria === 'object' && 'where' in criteria) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "criteria = await this.transformOptions(criteria);\nreturn manager.restore(this.target, criteria);",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "} else {\nreturn manager.restore(this.target, criteria);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "insert",
          "type": "function",
          "start_line": 344,
          "end_line": 357,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async insert(\n    entity: QueryDeepPartialEntity<Entity> | QueryDeepPartialEntity<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<InsertResult> {\n    const manager = entityManager || this.manager;\n    const formatedEntity = await this.formatData(entity);\n    const result = await manager.insert(this.target, formatedEntity);\n    const formattedResult = await this.formatResult(result.generatedMaps);\n    return {\n      raw: result.raw,\n      generatedMaps: formattedResult,\n      identifiers: result.identifiers,\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async insert(\n  entity: QueryDeepPartialEntity<Entity> | QueryDeepPartialEntity<Entity>[],\n  entityManager?: EntityManager,\n): Promise<InsertResult> {\n  const manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "  const formatedEntity = await this.formatData(entity);\n  const result = await manager.insert(this.target, formatedEntity);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  const formattedResult = await this.formatResult(result.generatedMaps);\n  return {\n    raw: result.raw,\n    generatedMaps: formattedResult,\n    identifiers: result.identifiers,\n  };",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 358,
          "end_line": 377,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async update(\n    criteria:\n      | string\n      | string[]\n      | number\n      | number[]\n      | Date\n      | Date[]\n      | ObjectId\n      | ObjectId[]\n      | FindOptionsWhere<Entity>,\n    partialEntity: QueryDeepPartialEntity<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\n    const manager = entityManager || this.manager;\n    if (typeof criteria === 'object' && 'where' in criteria) {\n      criteria = await this.transformOptions(criteria);\n    }\n    return manager.update(this.target, criteria, partialEntity);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (typeof criteria === 'object' && 'where' in criteria) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  criteria = await this.transformOptions(criteria);\nreturn manager.update(this.target, criteria, partialEntity);",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "return manager.update(this.target, criteria, partialEntity);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "return manager.update(this.target, criteria, partialEntity);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "upsert",
          "type": "function",
          "start_line": 378,
          "end_line": 398,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async upsert(\n    entityOrEntities:\n      | QueryDeepPartialEntity<Entity>\n      | QueryDeepPartialEntity<Entity>[],\n    conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<InsertResult> {\n    const manager = entityManager || this.manager;\n    const formattedEntityOrEntities = await this.formatData(entityOrEntities);\n    const result = await manager.upsert(\n      this.target,\n      formattedEntityOrEntities,\n      conflictPathsOrOptions,\n    );\n    const formattedResult = await this.formatResult(result.generatedMaps);\n    return {\n      raw: result.raw,\n      generatedMaps: formattedResult,\n      identifiers: result.identifiers,\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst formattedEntityOrEntities = await this.formatData(entityOrEntities);",
              "successors": [
                {
                  "id": 3,
                  "label": "const result = await manager.upsert(this.target, formattedEntityOrEntities, conflictPathsOrOptions);\nconst formattedResult = await this.formatResult(result.generatedMaps);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return { raw: result.raw, generatedMaps: formattedResult, identifiers: result.identifiers };",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "exists",
          "type": "function",
          "start_line": 399,
          "end_line": 406,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async exists(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<boolean> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    return manager.exists(this.target, computedOptions);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async exists(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<boolean> {\n    const manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "    const computedOptions = await this.transformOptions(options);\n    return manager.exists(this.target, computedOptions);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "existsBy",
          "type": "function",
          "start_line": 407,
          "end_line": 414,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async existsBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<boolean> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.existsBy(this.target, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async existsBy(where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[], entityManager?: EntityManager,): Promise<boolean> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nreturn manager.existsBy(this.target, computedOptions.where);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "count",
          "type": "function",
          "start_line": 415,
          "end_line": 422,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async count(\n    options?: FindManyOptions<Entity>,\n    entityManager?: EntityManager,\n  ): Promise<number> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions(options);\n    return manager.count(this.target, computedOptions);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const manager = entityManager || this.manager;\nconst computedOptions = await this.transformOptions(options);",
              "successors": [
                {
                  "id": 3,
                  "label": "return manager.count(this.target, computedOptions);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "countBy",
          "type": "function",
          "start_line": 423,
          "end_line": 430,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async countBy(\n    where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.countBy(this.target, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async countBy(where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[], entityManager?: EntityManager,): Promise<number> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nreturn manager.countBy(this.target, computedOptions.where);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "sum",
          "type": "function",
          "start_line": 431,
          "end_line": 439,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async sum(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.sum(this.target, columnName, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async sum(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager\n  ): Promise<number | null> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nreturn manager.sum(this.target, columnName, computedOptions.where);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "average",
          "type": "function",
          "start_line": 440,
          "end_line": 448,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async average(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.average(this.target, columnName, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async average(\n  columnName: PickKeysByType<Entity, number>,\n  where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n  entityManager?: EntityManager\n)\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nreturn manager.average(this.target, columnName, computedOptions.where);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "minimum",
          "type": "function",
          "start_line": 449,
          "end_line": 457,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async minimum(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.minimum(this.target, columnName, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async minimum(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number | null> {\n    const manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "    const computedOptions = await this.transformOptions({ where });\n    return manager.minimum(this.target, columnName, computedOptions.where);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "maximum",
          "type": "function",
          "start_line": 458,
          "end_line": 466,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async maximum(\n    columnName: PickKeysByType<Entity, number>,\n    where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    entityManager?: EntityManager,\n  ): Promise<number | null> {\n    const manager = entityManager || this.manager;\n    const computedOptions = await this.transformOptions({ where });\n    return manager.maximum(this.target, columnName, computedOptions.where);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async maximum(\n  columnName: PickKeysByType<Entity, number>,\n  where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n  entityManager?: EntityManager,\n): Promise<number | null> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedOptions = await this.transformOptions({ where });\nreturn manager.maximum(this.target, columnName, computedOptions.where);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "increment",
          "type": "function",
          "start_line": 467,
          "end_line": 483,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async increment(\n    conditions: FindOptionsWhere<Entity>,\n    propertyPath: string,\n    value: number | string,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\n    const manager = entityManager || this.manager;\n    const computedConditions = await this.transformOptions({\n      where: conditions,\n    });\n    return manager.increment(\n      this.target,\n      computedConditions.where,\n      propertyPath,\n      value,\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async increment(\n    conditions: FindOptionsWhere<Entity>,\n    propertyPath: string,\n    value: number | string,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedConditions = await this.transformOptions({\n      where: conditions,\n    });\nreturn manager.increment(\n      this.target,\n      computedConditions.where,\n      propertyPath,\n      value,\n    );\n  }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "decrement",
          "type": "function",
          "start_line": 484,
          "end_line": 500,
          "functions": [],
          "classes": [],
          "simplified_code": "  override async decrement(\n    conditions: FindOptionsWhere<Entity>,\n    propertyPath: string,\n    value: number | string,\n    entityManager?: EntityManager,\n  ): Promise<UpdateResult> {\n    const manager = entityManager || this.manager;\n    const computedConditions = await this.transformOptions({\n      where: conditions,\n    });\n    return manager.decrement(\n      this.target,\n      computedConditions.where,\n      propertyPath,\n      value,\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "override async decrement(\nconditions: FindOptionsWhere<Entity>,\npropertyPath: string,\nvalue: number | string,\nentityManager?: EntityManager,\n): Promise<UpdateResult> {\nconst manager = entityManager || this.manager;",
              "successors": [
                {
                  "id": 3,
                  "label": "const computedConditions = await this.transformOptions({ where: conditions });\nreturn manager.decrement(\n  this.target,\n  computedConditions.where,\n  propertyPath,\n  value,\n);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getObjectMetadataFromTarget",
          "type": "function",
          "start_line": 501,
          "end_line": 528,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getObjectMetadataFromTarget() {\n    const objectMetadataName =\n      typeof this.target === 'string'\n        ? this.target\n        : WorkspaceEntitiesStorage.getObjectMetadataName(\n            this.internalContext.workspaceId,\n            this.target as EntitySchema,\n          );\n    if (!objectMetadataName) {\n      throw new Error('Object metadata name is missing');\n    }\n    const objectMetadata = getObjectMetadataMapItemByNameSingular(\n      this.internalContext.objectMetadataMaps,\n      objectMetadataName,\n    );\n    if (!objectMetadata) {\n      throw new Error(\n        `Object metadata for object \"${objectMetadataName}\" is missing ` +\n          `in workspace \"${this.internalContext.workspaceId}\" ` +\n          `with object metadata collection length: ${\n            Object.keys(\n              this.internalContext.objectMetadataMaps.idByNameSingular,\n            ).length\n          }`,\n      );\n    }\n    return objectMetadata;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async getObjectMetadataFromTarget() {\nconst objectMetadataName = typeof this.target === 'string' ? this.target : WorkspaceEntitiesStorage.getObjectMetadataName(this.internalContext.workspaceId, this.target as EntitySchema);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!objectMetadataName) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "throw new Error('Object metadata name is missing');",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "}\nconst objectMetadata = getObjectMetadataMapItemByNameSingular(this.internalContext.objectMetadataMaps, objectMetadataName);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (!objectMetadata) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "throw new Error(`Object metadata for object \"${objectMetadataName}\" is missing in workspace \"${this.internalContext.workspaceId}\" with object metadata collection length: ${Object.keys(this.internalContext.objectMetadataMaps.idByNameSingular).length}`);",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "label": "}\nreturn objectMetadata;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "transformOptions",
          "type": "function",
          "start_line": 529,
          "end_line": 538,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async transformOptions<\n    T extends FindManyOptions<Entity> | FindOneOptions<Entity> | undefined,\n  >(options: T): Promise<T> {\n    if (!options) {\n      return options;\n    }\n    const transformedOptions = { ...options };\n    transformedOptions.where = await this.formatData(options.where);\n    return transformedOptions;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async transformOptions< T extends FindManyOptions<Entity> | FindOneOptions<Entity> | undefined, >(options: T): Promise<T> {\n    if (!options) {",
              "successors": [
                {
                  "id": 3,
                  "label": "      return options;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    }\n    const transformedOptions = { ...options };",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    transformedOptions.where = await this.formatData(options.where);\n    return transformedOptions;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "formatData",
          "type": "function",
          "start_line": 539,
          "end_line": 542,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async formatData<T>(data: T): Promise<T> {\n    const objectMetadata = await this.getObjectMetadataFromTarget();\n    return formatData(data, objectMetadata) as T;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "const objectMetadata = await this.getObjectMetadataFromTarget();\nreturn formatData(data, objectMetadata) as T;",
              "successors": []
            }
          ]
        },
        {
          "name": "formatResult",
          "type": "function",
          "start_line": 543,
          "end_line": 550,
          "functions": [],
          "classes": [],
          "simplified_code": "  async formatResult<T>(\n    data: T,\n    objectMetadata?: ObjectMetadataItemWithFieldMaps,\n  ): Promise<T> {\n    objectMetadata ??= await this.getObjectMetadataFromTarget();\n    const objectMetadataMaps = this.internalContext.objectMetadataMaps;\n    return formatResult(data, objectMetadata, objectMetadataMaps) as T;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async formatResult<T>(data: T, objectMetadata?: ObjectMetadataItemWithFieldMaps): Promise<T> {\n  objectMetadata ??= await this.getObjectMetadataFromTarget();",
              "successors": [
                {
                  "id": 3,
                  "label": "  const objectMetadataMaps = this.internalContext.objectMetadataMaps;\n  return formatResult(data, objectMetadata, objectMetadataMaps) as T;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class WorkspaceRepository<\n  Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n  private readonly internalContext: WorkspaceInternalContext;\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n  }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "}",
  "blocks": [
    {
      "id": 1,
      "label": "# Example input code",
      "successors": []
    }
  ]
}