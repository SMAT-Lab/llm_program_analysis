{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 53,
  "functions": [],
  "classes": [
    {
      "name": "MainAbility",
      "type": "class",
      "start_line": 20,
      "end_line": 53,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 21,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want, launchParam) {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onCreate')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want, launchParam) {\nLogger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onCreate')",
              "successors": []
            }
          ]
        },
        {
          "name": "onDestroy",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDestroy() {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onDestroy')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDestroy() {\nLogger.info('[Sample_AdaptiveCapabilities]', 'MainAbility onDestroy')",
              "successors": []
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 29,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageCreate')\n    windowStage.setUIContent(this.context, \"pages/Index\", null)\n    window.getTopWindow(this.context)\n      .then(windowObj => {\n        AppStorage.SetOrCreate('windowObj', windowObj)\n      })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage) {\n// Main window is created, set main page for this ability\nLogger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageCreate')\nwindowStage.setUIContent(this.context, \"pages/Index\", null)\nwindow.getTopWindow(this.context)\n  .then(windowObj => {",
              "successors": [
                {
                  "id": 3,
                  "label": "AppStorage.SetOrCreate('windowObj', windowObj)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageDestroy",
          "type": "function",
          "start_line": 39,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageDestroy')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageDestroy() {\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onWindowStageDestroy')",
              "successors": []
            }
          ]
        },
        {
          "name": "onForeground",
          "type": "function",
          "start_line": 44,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "  onForeground() {\n    // Ability has brought to foreground\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onForeground')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onForeground() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    // Ability has brought to foreground",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    Logger.info('[Sample_AdaptiveCapabilities]', 'onForeground')",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onBackground",
          "type": "function",
          "start_line": 49,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  onBackground() {\n    // Ability has back to background\n    Logger.info('[Sample_AdaptiveCapabilities]', 'onBackground')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onBackground() {\n    // Ability has back to background",
              "successors": [
                {
                  "id": 3,
                  "label": "    Logger.info('[Sample_AdaptiveCapabilities]', 'onBackground')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default class MainAbility extends UIAbility {\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default class MainAbility extends UIAbility {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../model/Logger'\nimport window from '@ohos.window'\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../model/Logger'",
      "successors": [
        {
          "id": 3,
          "label": "import window from '@ohos.window'",
          "successors": []
        }
      ]
    }
  ]
}