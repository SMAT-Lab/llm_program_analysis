{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [
    {
      "name": "computeSampleSize",
      "type": "function",
      "start_line": 26,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "export function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\nif (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {",
          "successors": [
            {
              "id": 3,
              "label": "return 2;",
              "successors": []
            },
            {
              "id": 4,
              "label": "}\nlet initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);",
              "successors": [
                {
                  "id": 6,
                  "label": "Log.info(TAG, 'initialSize:  ' + initialSize);\nreturn initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "computeInitialSampleSize",
      "type": "function",
      "start_line": 35,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "function computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\nif ((maxNumOfPixels === -1) && (minSideLength === -1)) {",
          "successors": [
            {
              "id": 3,
              "label": "return 1;",
              "successors": []
            },
            {
              "id": 4,
              "label": "}\nlet lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\nLog.info(TAG, 'lowerBound: ' + lowerBound);",
              "successors": [
                {
                  "id": 6,
                  "label": "if (minSideLength === -1) {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return lowerBound;",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "} else {\nlet sampleSize = Math.min(width / minSideLength, height / minSideLength);\nreturn Math.max(sampleSize, lowerBound);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "nextPowerOf2",
      "type": "function",
      "start_line": 49,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "function nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function nextPowerOf2(value: number): number {\nlet useValue = value;",
          "successors": [
            {
              "id": 3,
              "label": "if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "useValue -= 1;\nuseValue |= useValue >> BIT_SIXTEEN;",
                  "successors": [
                    {
                      "id": 7,
                      "label": "useValue |= useValue >> BIT_EIGHT;\nuseValue |= useValue >> BIT_FOUR;",
                      "successors": [
                        {
                          "id": 9,
                          "label": "useValue |= useValue >> BIT_TWO;\nuseValue |= useValue >> BIT_ONE;",
                          "successors": [
                            {
                              "id": 11,
                              "label": "Log.info(TAG, 'nextPowerOf2:' + useValue);\nreturn useValue + 1;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\n\nconst TAG = 'ImageUtil';\nconst MAX_BIT = 30;\nconst BIT_SIXTEEN = 16;\nconst BIT_EIGHT = 8;\nconst BIT_FOUR = 4;\nconst BIT_TWO = 2;\nconst BIT_ONE = 1;\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from './Log';\nconst TAG = 'ImageUtil';",
      "successors": [
        {
          "id": 3,
          "label": "const MAX_BIT = 30;\nconst BIT_SIXTEEN = 16;",
          "successors": [
            {
              "id": 5,
              "label": "const BIT_EIGHT = 8;\nconst BIT_FOUR = 4;",
              "successors": [
                {
                  "id": 7,
                  "label": "const BIT_TWO = 2;\nconst BIT_ONE = 1;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}