{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [
    {
      "name": "map",
      "type": "function",
      "start_line": 4,
      "end_line": 4,
      "functions": [],
      "classes": [],
      "simplified_code": "(<any>Observable.prototype).map = function() { }",
      "blocks": [
        {
          "id": 1,
          "label": "(<any>Observable.prototype).map = function() { }",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Observable",
      "type": "class",
      "start_line": 14,
      "end_line": 16,
      "functions": [
        {
          "name": "filter",
          "type": "function",
          "start_line": 15,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    filter(pred: (e:T) => boolean): Observable<T>;",
          "blocks": [
            {
              "id": 1,
              "label": "filter(pred: (e:T) => boolean): Observable<T>;",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export declare class Observable<T> {\n    filter(pred: (e:T) => boolean): Observable<T>;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export declare class Observable<T> {",
          "successors": [
            {
              "id": 2,
              "label": "    filter(pred: (e:T) => boolean): Observable<T>;",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// @module: commonjs\n// @filename: map.ts\nimport { Observable } from \"./observable\"\n(<any>Observable.prototype).map = function() { }\ndeclare module \"./observable\" {\n    interface Observable<T> {\n        map<U>(proj: (e:T) => U): Observable<U>\n    }\n    namespace Observable {\n        let someAnotherValue: string;\n    }\n}\n// @filename: observable.ts\n}\nexport namespace Observable {\n    export let someValue: number;\n}\n// @filename: main.ts\nimport { Observable } from \"./observable\"\nimport \"./map\";\nlet x: Observable<number>;\nlet y = x.map(x => x + 1);\nlet z1 = Observable.someValue.toFixed();\nlet z2 = Observable.someAnotherValue.toLowerCase();",
  "blocks": [
    {
      "id": 1,
      "label": "import { Observable } from \"./observable\"\n(<any>Observable.prototype).map = function() { }",
      "successors": [
        {
          "id": 3,
          "label": "declare module \"./observable\" {\n    interface Observable<T> {\n        map<U>(proj: (e:T) => U): Observable<U>\n    }\n    namespace Observable {\n        let someAnotherValue: string;\n    }\n}",
          "successors": []
        }
      ]
    }
  ]
}