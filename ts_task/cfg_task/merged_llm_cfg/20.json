{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 167,
  "functions": [],
  "classes": [
    {
      "name": "AlbumSetNewMenuOperation",
      "type": "class",
      "start_line": 35,
      "end_line": 167,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;",
              "successors": []
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 43,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.menuContext == null) {\n  Log.warn(TAG, 'menuContext is null, return');\n  return;",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallback",
          "type": "function",
          "start_line": 60,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async confirmCallback(displayName: string): Promise<void> {\nreturn await this.confirmCallbackBindImpl(displayName);",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallbackBindImpl",
          "type": "function",
          "start_line": 64,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\nlet simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (displayName != undefined && displayName != null) {\nlet isExit = await this.checkAlbumExit(simpleAlbumDataItem);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (isExit) {\ngetResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n    showToast(message);\n})",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "this.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart: Function = this.menuContext.onOperationStart;",
                  "successors": [
                    {
                      "id": 9,
                      "label": "if (onOperationStart != null) onOperationStart();",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\nLog.info(TAG, 'go back to photo grid');",
                      "successors": [
                        {
                          "id": 12,
                          "label": "this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "else {\nlet params: Object = {\n  albumInfo: JSON.stringify(simpleAlbumDataItem),\n  isNewAlbum: true\n};",
                      "successors": [
                        {
                          "id": 15,
                          "label": "let routerOptions: RouterOptions = {\n  uri: 'pages/AlbumSelect',\n  params: params\n};\nrouter.push(routerOptions);",
                          "successors": [
                            {
                              "id": 17,
                              "label": "this.onCompleted();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "checkAlbumExit",
          "type": "function",
          "start_line": 97,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;",
              "successors": []
            }
          ]
        },
        {
          "name": "cancelCallback",
          "type": "function",
          "start_line": 101,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();",
              "successors": []
            }
          ]
        },
        {
          "name": "cancelCallbackBindImpl",
          "type": "function",
          "start_line": 105,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');",
              "successors": []
            }
          ]
        },
        {
          "name": "onCompleted",
          "type": "function",
          "start_line": 109,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCompleted(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.onCompletedBindImpl();",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onCompletedBindImpl",
          "type": "function",
          "start_line": 113,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'new album data succeed!');\nif (this.onOperationEnd != null) this.onOperationEnd();",
              "successors": []
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 118,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onError(): void {\nLog.error(TAG, 'new album data failed!');",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.onOperationEnd != null) this.onOperationEnd();\nthis.onOperationEnd();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "checkAndAddNumber",
          "type": "function",
          "start_line": 123,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\nLog.info(TAG, `check name res ${res}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (res) {\nlet number = res[0].match(new RegExp(`[1-9][0-9]*`));",
                  "successors": [
                    {
                      "id": 5,
                      "label": "numbers.push(parseInt(number[0]));",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getNewAlbumDefaultName",
          "type": "function",
          "start_line": 132,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let numbers: number[] = [];",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let album = this.menuContext.dataSource as AlbumsDataSource;\nthis.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.debug(TAG, `${JSON.stringify(numbers)}`);",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if (numbers.length <= 0) {\nreturn `${prefixName}1`;",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "else if (numbers.length === 1) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "if (numbers[0] - 1 > 0) {\nreturn `${prefixName}1`;",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "else {\nreturn `${prefixName}${numbers[0] + 1}`;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "numbers.sort(function (a, b) {\n  return a - b;\n});",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "if (numbers[0] - 1 > 0) {\nreturn `${prefixName}1`;",
                                  "successors": []
                                },
                                {
                                  "id": 16,
                                  "label": "for (let i = 1; i < numbers.length; i++) {",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "let res = numbers[i - 1] + 1;\nif (res < numbers[i]) {\nreturn `${prefixName}${res}`;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 19,
                                  "label": "return `${prefixName}${numbers[numbers.length - 1] + 1}`;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {",
          "successors": [
            {
              "id": 2,
              "label": "private menuContext: MenuContext;",
              "successors": []
            },
            {
              "id": 3,
              "label": "private onOperationEnd: Function;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { showToast } from '../utils/UiUtil';\nimport { userFileModel } from '../base/UserFileModel';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { LazyItem } from '../common/ItemDataSource';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumsDataSource } from '../common/AlbumsDataSource';\n\nconst TAG = 'AlbumSetNewMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import router from '@system.router';\nimport { RouterOptions } from '@system.router';",
      "successors": [
        {
          "id": 3,
          "label": "import { Log } from '../utils/Log';\nimport { getResourceString } from '../utils/ResourceUtils';",
          "successors": [
            {
              "id": 5,
              "label": "import { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';",
              "successors": [
                {
                  "id": 7,
                  "label": "import { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';",
                      "successors": [
                        {
                          "id": 11,
                          "label": "import { showToast } from '../utils/UiUtil';\nimport { userFileModel } from '../base/UserFileModel';",
                          "successors": [
                            {
                              "id": 13,
                              "label": "import { AlbumDataItem } from '../common/AlbumDataItem';\nimport { LazyItem } from '../common/ItemDataSource';",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "import { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumsDataSource } from '../common/AlbumsDataSource';",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "const TAG = 'AlbumSetNewMenuOperation';",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}