{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [],
  "classes": [
    {
      "name": "WithMetadataConsoleCallbackHandler",
      "type": "class",
      "start_line": 5,
      "end_line": 15,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 7,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(metadata: Record<string, unknown>) {\n    super();\n    this.metadata = metadata;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(metadata: Record<string, unknown>) {\nsuper();",
              "successors": [
                {
                  "id": 3,
                  "label": "this.metadata = metadata;\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onChainStart",
          "type": "function",
          "start_line": 11,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "  onChainStart(run: Run) {\n    console.log(`Chain metadata: ${JSON.stringify(this.metadata)}`);\n    super.onChainStart(run);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "console.log(`Chain metadata: ${JSON.stringify(this.metadata)}`);\nsuper.onChainStart(run);",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class WithMetadataConsoleCallbackHandler extends ConsoleCallbackHandler {\n  private metadata: Record<string, unknown>;\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class WithMetadataConsoleCallbackHandler extends ConsoleCallbackHandler {",
          "successors": [
            {
              "id": 2,
              "label": "  private metadata: Record<string, unknown>;",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ConsoleDriver",
      "type": "class",
      "start_line": 16,
      "end_line": 20,
      "functions": [
        {
          "name": "getCallbackHandler",
          "type": "function",
          "start_line": 17,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "  getCallbackHandler(metadata: Record<string, unknown>): BaseCallbackHandler {\n    return new WithMetadataConsoleCallbackHandler(metadata);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getCallbackHandler(metadata: Record<string, unknown>): BaseCallbackHandler {\n    return new WithMetadataConsoleCallbackHandler(metadata);",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export class ConsoleDriver implements LLMTracingDriver {\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class ConsoleDriver implements LLMTracingDriver {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import { BaseCallbackHandler } from '@langchain/core/callbacks/base';\nimport { Run } from '@langchain/core/tracers/base';\nimport { ConsoleCallbackHandler } from '@langchain/core/tracers/console';\nimport { LLMTracingDriver } from 'src/engine/core-modules/llm-tracing/drivers/interfaces/llm-tracing-driver.interface';\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { BaseCallbackHandler } from '@langchain/core/callbacks/base';\nimport { Run } from '@langchain/core/tracers/base';",
      "successors": [
        {
          "id": 3,
          "label": "import { ConsoleCallbackHandler } from '@langchain/core/tracers/console';\nimport { LLMTracingDriver } from 'src/engine/core-modules/llm-tracing/drivers/interfaces/llm-tracing-driver.interface';",
          "successors": []
        }
      ]
    }
  ]
}