{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 54,
  "functions": [
    {
      "name": "describe",
      "type": "function",
      "start_line": 9,
      "end_line": 39,
      "functions": [
        {
          "name": "beforeEach",
          "type": "function",
          "start_line": 12,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "beforeEach(() => {\n    TestBed.configureTestingModule({",
              "successors": [
                {
                  "id": 3,
                  "label": "        providers: [provideNativeDateAdapter()],",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');",
                      "successors": [
                        {
                          "id": 8,
                          "label": "    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();",
                          "successors": [
                            {
                              "id": 10,
                              "label": "    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 23,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);",
              "successors": [
                {
                  "id": 3,
                  "label": "    expect(harnesses.length).toBe(2);\n});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 27,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should get the open state of a timepicker toggle', async () => {\nconst toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));",
              "successors": [
                {
                  "id": 3,
                  "label": "expect(await toggle.isTimepickerOpen()).toBe(false);\nawait toggle.openTimepicker();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "expect(await toggle.isTimepickerOpen()).toBe(true);\n});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 33,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should get the disabled state of a toggle', async () => {\n  const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));",
              "successors": [
                {
                  "id": 3,
                  "label": "  expect(await toggle.isDisabled()).toBe(false);\n  fixture.componentInstance.disabled.set(true);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  expect(await toggle.isDisabled()).toBe(true);\n});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('MatTimepickerToggleHarness', () => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  });\n  });\n  });\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('MatTimepickerToggleHarness', () => {\nlet fixture: ComponentFixture<TimepickerHarnessTest>;",
          "successors": [
            {
              "id": 3,
              "label": "let loader: HarnessLoader;\n});",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "TimepickerHarnessTest",
      "type": "class",
      "start_line": 52,
      "end_line": 54,
      "functions": [],
      "classes": [],
      "simplified_code": "class TimepickerHarnessTest {\n  disabled = signal(false);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class TimepickerHarnessTest {\n  disabled = signal(false);",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import {Component, signal} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {HarnessLoader} from '@angular/cdk/testing';\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';\nimport {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness';\n});\n@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import {Component, signal} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';",
      "successors": [
        {
          "id": 3,
          "label": "import {HarnessLoader} from '@angular/cdk/testing';\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';",
          "successors": [
            {
              "id": 5,
              "label": "import {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';",
              "successors": [
                {
                  "id": 7,
                  "label": "import {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness';",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}