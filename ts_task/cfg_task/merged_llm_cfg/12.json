{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 2039,
  "functions": [
    {
      "name": "mockInterface",
      "type": "function",
      "start_line": 56,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "function mockInterface(): void {\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function mockInterface(): void {",
          "successors": [
            {
              "id": 2,
              "label": "if (!camera.SceneFeatureType) {\ncamera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };",
              "successors": []
            },
            {
              "id": 4,
              "label": "if (!camera.SceneMode) {\ncamera.SceneMode = { NORMAL_PHOTO: 1, NORMAL_VIDEO: 2, PORTRAIT_PHOTO: 3, NIGHT_PHOTO: 4 };",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "CameraService",
      "type": "class",
      "start_line": 73,
      "end_line": 2037,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 158,
          "end_line": 197,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    let imageCapacity = 8;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\nthis.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');",
                  "successors": [
                    {
                      "id": 4,
                      "label": "this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "savePicture",
          "type": "function",
          "start_line": 202,
          "end_line": 220,
          "functions": [],
          "classes": [],
          "simplified_code": "  async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Logger.info(TAG, 'savePicture start');\nlet fileName = `${Date.now()}.jpg`;\nlet fileAsset = await this.accessHelper.createAsset(fileName);\nlet imgPhotoUri: string = fileAsset.uri;\nconst fd = await fileAsset.open('rw');\nawait fs.write(fd, buffer);\nawait fileAsset.close(fd);\nawait img.release();\nLogger.info(TAG, 'savePicture End');",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (this.handleTakePicture) {\nthis.handleTakePicture(imgPhotoUri);",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "withinErrorMargin",
          "type": "function",
          "start_line": 225,
          "end_line": 231,
          "functions": [],
          "classes": [],
          "simplified_code": "  withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let baseNumber = 2;\nlet indexNumber = 2;",
              "successors": [
                {
                  "id": 3,
                  "label": "return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "switchProfiles",
          "type": "function",
          "start_line": 233,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": "  switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\nif (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }",
              "successors": [
                {
                  "id": 3,
                  "label": "if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\nif (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\nlet defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;",
                      "successors": [
                        {
                          "id": 7,
                          "label": "const deviceType = AppStorage.get<string>('deviceType');\nswitch (this.cameraMode) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "case CameraMode.PORTRAIT:\n    previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n    this.previewProfileObj = previewProfileObj;\n    photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n    this.photoProfileObj = photoProfileObj;\n    break;\nif (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };",
                              "successors": [
                                {
                                  "id": 18,
                                  "label": "if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "case CameraMode.SUPER_STAB:\n    previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n    this.previewProfileObj = previewProfileObj;\n    photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n    this.photoProfileObj = photoProfileObj;\n    this.videoProfileObj = {\n      format: 1003,\n      size: {\n        width: 1920,\n        height: 1080\n      },\n      frameRateRange: {\n        min: 60,\n        max: 60\n      }\n    };\nlet videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n      return profile.size.height === this.videoProfileObj.size.height &&\n        profile.size.width === this.videoProfileObj.size.width &&\n        profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n        profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n    });\n    Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "if (!videoProfileObj) {\n      Logger.error('videoProfileObj not supported');\n    }\n    break;\nif (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };",
                                  "successors": [
                                    {
                                      "id": 18,
                                      "label": "if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "case CameraMode.NIGHT:\n    previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n    this.previewProfileObj = previewProfileObj;\n    photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n      return profile.size.height === this.defaultProfile.size.height &&\n        profile.size.width === this.defaultProfile.size.width;\n    });\n    Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n    this.photoProfileObj = photoProfileObj;\n    break;\nif (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };",
                              "successors": [
                                {
                                  "id": 18,
                                  "label": "if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "case CameraMode.NORMAL:\ncase CameraMode.VIDEO:\ndefault:",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n    const previewProfile = profiles.previewProfiles[index];\n    if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n      if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n        previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n        let previewProfileTemp = {\n          format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n          size: {\n            width: previewProfile.size.width,\n            height: previewProfile.size.height\n          }\n        };\n        this.previewProfileObj = previewProfileTemp;\n        Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n        break;\n      }\n    }\n  }",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n    const photoProfile = profiles.photoProfiles[index];\n    if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n      if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n        photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n        let photoProfileTemp = {\n          format: photoProfile.format,\n          size: {\n            width: photoProfile.size.width,\n            height: photoProfile.size.height\n          }\n        };\n        this.photoProfileObj = photoProfileTemp;\n        Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n        break;\n      }\n    }\n  }",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\nif ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setCameraMode",
          "type": "function",
          "start_line": 393,
          "end_line": 395,
          "functions": [],
          "classes": [],
          "simplified_code": "  setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "initProfile",
          "type": "function",
          "start_line": 397,
          "end_line": 408,
          "functions": [],
          "classes": [],
          "simplified_code": "  initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "initProfile(cameraDeviceIndex: number): void {\nlet profiles;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.cameraMode === CameraMode.PORTRAIT) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\nthis.videoProfiles = profiles.videoProfiles;\nthis.switchProfiles(profiles);",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} else if (this.cameraMode === CameraMode.VIDEO) {\nprofiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "this.videoProfiles = profiles.videoProfiles;\nthis.switchProfiles(profiles);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "} else {\nprofiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "this.videoProfiles = profiles.videoProfiles;\nthis.switchProfiles(profiles);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "initCamera",
          "type": "function",
          "start_line": 413,
          "end_line": 475,
          "functions": [],
          "classes": [],
          "simplified_code": "  async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> { try { this.isFirstRecord = true; // 获取传入摄像头 Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`); await this.releaseCamera(); // 获取相机管理器实例 this.getCameraManagerFn(); let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];",
              "successors": [
                {
                  "id": 2,
                  "label": "if (newModes.indexOf(this.cameraMode) >= 0) { this.getModeManagerFn(); }\n// 获取支持指定的相机设备对象 this.getSupportedCamerasFn(); if (newModes.indexOf(this.cameraMode) >= 0) { this.getSupportedModeFn(cameraDeviceIndex); } this.initProfile(cameraDeviceIndex); // 创建previewOutput输出对象 this.createPreviewOutputFn(this.previewProfileObj, surfaceId); // 监听预览事件 this.previewOutputCallBack();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) { await this.createAVRecorder(); await this.createVideoOutput(); // 监听录像事件 this.onVideoOutputChange(); }\n// 创建photoOutPut输出对象 let mSurfaceId = await this.mReceiver.getReceivingSurfaceId(); this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId); // 拍照监听事件 this.photoOutPutCallBack(); // 创建cameraInput输出对象 this.createCameraInputFn(this.cameras[cameraDeviceIndex]); // 打开相机 await this.cameraInputOpenFn(); // 镜头状态回调 this.onCameraStatusChange(); // 监听CameraInput的错误事件 this.onCameraInputChange();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "// 会话流程 switch (this.cameraMode) { case CameraMode.PORTRAIT: await this.portraitSessionFlowFn(); break; case CameraMode.NIGHT: await this.nightSessionFlowFn(); break; case CameraMode.MACRO_PHOTO: await this.macroPhotoSessionFlowFn(); break; case CameraMode.MACRO_VIDEO: break; case CameraMode.VIDEO: await this.videoSessionFlowFn(); break; default: await this.photoSessionFlowFn(); break; }\nthis.testAbilityFunction();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "} catch (error) { let err = error as BusinessError; Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isVideoFrameSupportedFn",
          "type": "function",
          "start_line": 478,
          "end_line": 486,
          "functions": [],
          "classes": [],
          "simplified_code": "  isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;",
          "blocks": [
            {
              "id": 1,
              "label": "isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {",
              "successors": [
                {
                  "id": 3,
                  "label": "        return videoProfile.size.height === this.videoProfileObj.size.height &&\n          videoProfile.size.width === this.videoProfileObj.size.width &&\n          videoProfile.format === this.videoProfileObj.format &&\n          videoProfile.frameRateRange.min === videoFrame &&\n          videoProfile.frameRateRange.max === videoFrame;\n    });",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    return videoProfile === undefined ? false : true;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isExposureModeSupportedFn",
          "type": "function",
          "start_line": 492,
          "end_line": 501,
          "functions": [],
          "classes": [],
          "simplified_code": "  isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;",
          "blocks": [
            {
              "id": 1,
              "label": "isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\nlet isSupported: boolean = false;\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!session) {\nreturn isSupported;",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "isSupported = session.isExposureModeSupported(aeMode);\nLogger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\nreturn isSupported;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setExposureMode",
          "type": "function",
          "start_line": 504,
          "end_line": 513,
          "functions": [],
          "classes": [],
          "simplified_code": "  setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\nif (!session) {",
              "successors": [
                {
                  "id": 3,
                  "label": "  return;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\nsession.setExposureMode(aeMode);",
                  "successors": [
                    {
                      "id": 6,
                      "label": "let exposureMode: camera.ExposureMode | undefined = undefined;\nexposureMode = session.getExposureMode();",
                      "successors": [
                        {
                          "id": 8,
                          "label": "Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isMeteringPoint",
          "type": "function",
          "start_line": 518,
          "end_line": 531,
          "functions": [],
          "classes": [],
          "simplified_code": "  isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\nif (!session) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\nlet exposureMode: camera.ExposureMode | undefined = undefined;\nexposureMode = session.getExposureMode();\nLogger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\nsession.setMeteringPoint(point);\nlet exposurePoint: camera.Point | undefined = undefined;\nexposurePoint = session.getMeteringPoint();\nLogger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isExposureBiasRange",
          "type": "function",
          "start_line": 536,
          "end_line": 548,
          "functions": [],
          "classes": [],
          "simplified_code": "  isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!session) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "let biasRangeArray: Array<number> = [];\nbiasRangeArray = session.getExposureBiasRange();",
                  "successors": [
                    {
                      "id": 7,
                      "label": "Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\nsession.setExposureBias(exposureBias);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isFocusModeSupported",
          "type": "function",
          "start_line": 553,
          "end_line": 559,
          "functions": [],
          "classes": [],
          "simplified_code": "  isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isFocusModeSupported(focusMode: camera.FocusMode): boolean {\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!session) {\nreturn false;",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "return session.isFocusModeSupported(focusMode);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isFocusMode",
          "type": "function",
          "start_line": 564,
          "end_line": 577,
          "functions": [],
          "classes": [],
          "simplified_code": "  isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isSupported = this.isFocusModeSupported(focusMode);\nLogger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!isSupported) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (!session) {\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "session.setFocusMode(focusMode);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isFocusPoint",
          "type": "function",
          "start_line": 582,
          "end_line": 594,
          "functions": [],
          "classes": [],
          "simplified_code": "  isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!session) {\n  return;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "session.setFocusPoint(point);\nLogger.info(TAG, 'setFocusPoint success');",
                  "successors": [
                    {
                      "id": 6,
                      "label": "let nowPoint: camera.Point | undefined = undefined;\nnowPoint = session.getFocusPoint();",
                      "successors": [
                        {
                          "id": 8,
                          "label": "Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "hasFlashFn",
          "type": "function",
          "start_line": 599,
          "end_line": 615,
          "functions": [],
          "classes": [],
          "simplified_code": "  hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!session) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let hasFlash = session.hasFlash();\nLogger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\nlet isFlashModeSupported = session.isFlashModeSupported(flashMode);\nLogger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);",
                  "successors": [
                    {
                      "id": 6,
                      "label": "session.setFlashMode(flashMode);\nlet nowFlashMode = session.getFlashMode();\nLogger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSession",
          "type": "function",
          "start_line": 617,
          "end_line": 633,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\nswitch (this.cameraMode) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case CameraMode.PORTRAIT:\n        return this.portraitSession;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case CameraMode.NIGHT:\n        return this.nightSession;",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "case CameraMode.VIDEO:\n        return this.videoSession;",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "case CameraMode.NORMAL:\n        return this.photoSession;",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "default:\n        return this.captureSession;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setZoomRatioFn",
          "type": "function",
          "start_line": 638,
          "end_line": 668,
          "functions": [],
          "classes": [],
          "simplified_code": "  setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setZoomRatioFn(zoomRatio: number): void {\nLogger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (!session) {\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let zoomRatioRange = session.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);",
                          "successors": [
                            {
                              "id": 11,
                              "label": "try {\nsession.setZoomRatio(zoomRatio);",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "Logger.info(TAG, 'setZoomRatioFn success');",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "try {\nlet nowZoomRatio = session.getZoomRatio();",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 19,
                                      "label": "catch (error) {",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "let err = error as BusinessError;",
                                          "successors": []
                                        },
                                        {
                                          "id": 21,
                                          "label": "Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "catch (error) {",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "let err = error as BusinessError;",
                                  "successors": []
                                },
                                {
                                  "id": 22,
                                  "label": "Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "catch (error) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "let err = error as BusinessError;",
                              "successors": []
                            },
                            {
                              "id": 23,
                              "label": "Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isVideoStabilizationModeSupportedFn",
          "type": "function",
          "start_line": 673,
          "end_line": 678,
          "functions": [],
          "classes": [],
          "simplified_code": "  isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\nlet isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);",
              "successors": [
                {
                  "id": 3,
                  "label": "Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\nreturn isVideoStabilizationModeSupported;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setVideoStabilizationMode",
          "type": "function",
          "start_line": 681,
          "end_line": 688,
          "functions": [],
          "classes": [],
          "simplified_code": "  setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isNightModeSupportedFn",
          "type": "function",
          "start_line": 693,
          "end_line": 696,
          "functions": [],
          "classes": [],
          "simplified_code": "  isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;",
          "blocks": [
            {
              "id": 1,
              "label": "isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;",
              "successors": [
                {
                  "id": 3,
                  "label": "    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isPortraitModeSupportedFn",
          "type": "function",
          "start_line": 702,
          "end_line": 705,
          "functions": [],
          "classes": [],
          "simplified_code": "  isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;",
          "blocks": [
            {
              "id": 1,
              "label": "isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;",
              "successors": [
                {
                  "id": 3,
                  "label": "    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isMacroPhotoModeSupportedFn",
          "type": "function",
          "start_line": 711,
          "end_line": 714,
          "functions": [],
          "classes": [],
          "simplified_code": "  isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;",
          "blocks": [
            {
              "id": 1,
              "label": "let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\nLogger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "return isSupportMacroMode;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isMirrorSupportedFn",
          "type": "function",
          "start_line": 720,
          "end_line": 723,
          "functions": [],
          "classes": [],
          "simplified_code": "  isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);",
              "successors": []
            }
          ]
        },
        {
          "name": "setTakePictureCallback",
          "type": "function",
          "start_line": 725,
          "end_line": 727,
          "functions": [],
          "classes": [],
          "simplified_code": "  setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;",
              "successors": []
            }
          ]
        },
        {
          "name": "onChangeRotation",
          "type": "function",
          "start_line": 732,
          "end_line": 745,
          "functions": [],
          "classes": [],
          "simplified_code": "  onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onChangeRotation(): number {\nlet cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);",
              "successors": [
                {
                  "id": 3,
                  "label": "switch (cameraConfig.photoOrientation) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case PhotoOrientation.ORIENTATION_1:\nreturn this.photoRotationMap.rotation90;",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "case PhotoOrientation.ORIENTATION_2:\nreturn this.photoRotationMap.rotation180;",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "case PhotoOrientation.ORIENTATION_3:\nreturn this.photoRotationMap.rotation270;",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "case PhotoOrientation.ORIENTATION_0:\ndefault:",
                      "successors": [
                        {
                          "id": 12,
                          "label": "return this.photoRotationMap.rotation0;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onChangeLocation",
          "type": "function",
          "start_line": 750,
          "end_line": 769,
          "functions": [],
          "classes": [],
          "simplified_code": "  onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\nif (cameraConfig.locationBol) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return {\n  // 位置信息，经纬度\n  latitude: 12.9698,\n  longitude: 77.7500,\n  altitude: 1000\n};",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nreturn {\n  latitude: 0,\n  longitude: 0,\n  altitude: 0\n};",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "takePicture",
          "type": "function",
          "start_line": 774,
          "end_line": 788,
          "functions": [],
          "classes": [],
          "simplified_code": "  async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async takePicture(mirrorBol?: boolean): Promise<void> {\nLogger.info(TAG, 'takePicture start');",
              "successors": [
                {
                  "id": 3,
                  "label": "mirrorBol = mirrorBol || false;\nthis.isMirrorSupportedFn();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\nlet photoSettings = {\\n  rotation: this.onChangeRotation(),\\n  quality: cameraConfig.photoQuality,\\n  location: this.onChangeLocation(),\\n  mirror: cameraConfig.mirrorBol\\n};",
                      "successors": [
                        {
                          "id": 7,
                          "label": "Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\nawait this.photoOutPut.capture(photoSettings);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "Logger.info(TAG, 'takePicture end');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "prepareAVRecorder",
          "type": "function",
          "start_line": 790,
          "end_line": 811,
          "functions": [],
          "classes": [],
          "simplified_code": "  async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async prepareAVRecorder(): Promise<void> {\nawait this.initUrl();",
              "successors": [
                {
                  "id": 3,
                  "label": "let deviceType = AppStorage.get<string>('deviceType');",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (deviceType === Constants.DEFAULT) {\nthis.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "if (deviceType === Constants.PHONE) {\nthis.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\nthis.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\nthis.videoConfig.rotation = this.photoRotationMap.rotation90;",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "if (deviceType === Constants.TABLET) {\nthis.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\nthis.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\nthis.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\nLogger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\nawait this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n  Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAVRecorderSurfaceId",
          "type": "function",
          "start_line": 813,
          "end_line": 815,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();",
              "successors": []
            }
          ]
        },
        {
          "name": "createAVRecorder",
          "type": "function",
          "start_line": 817,
          "end_line": 819,
          "functions": [],
          "classes": [],
          "simplified_code": "  async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();",
              "successors": []
            }
          ]
        },
        {
          "name": "createVideoOutput",
          "type": "function",
          "start_line": 824,
          "end_line": 835,
          "functions": [],
          "classes": [],
          "simplified_code": "  async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'createVideoOutput start');\nawait this.prepareAVRecorder();",
              "successors": [
                {
                  "id": 3,
                  "label": "let videoId = await this.getAVRecorderSurfaceId();\nLogger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\nthis.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;",
                          "successors": [
                            {
                              "id": 8,
                              "label": "this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\nLogger.info(TAG, 'createVideoOutput end');",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\nLogger.info(TAG, 'createVideoOutput end');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "pauseVideo",
          "type": "function",
          "start_line": 840,
          "end_line": 848,
          "functions": [],
          "classes": [],
          "simplified_code": "  async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {",
              "successors": [
                {
                  "id": 3,
                  "label": "      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "resumeVideo",
          "type": "function",
          "start_line": 853,
          "end_line": 862,
          "functions": [],
          "classes": [],
          "simplified_code": "  async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });",
          "blocks": [
            {
              "id": 1,
              "label": "async resumeVideo(): Promise<void> {\nthis.videoOutput.start().then((): void => {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.videoOutputStatus = true;\nLogger.info(TAG, 'resumeVideo start');",
                  "successors": [
                    {
                      "id": 4,
                      "label": "this.videoRecorder.resume().then((): void => {\nLogger.info(TAG, 'resumeVideo success');",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "}).catch((err: { code?: number }): void => {\nLogger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "initUrl",
          "type": "function",
          "start_line": 868,
          "end_line": 873,
          "functions": [],
          "classes": [],
          "simplified_code": "  async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.videoConfig.url = `fd://${this.fd.toString()}`;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "startVideo",
          "type": "function",
          "start_line": 878,
          "end_line": 895,
          "functions": [],
          "classes": [],
          "simplified_code": "  async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async startVideo(): Promise<void> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "Logger.info(TAG, 'startVideo begin'); await this.videoOutput.start(); this.videoOutputStatus = true;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (!this.isFirstRecord) {\nawait this.prepareAVRecorder(); await this.getAVRecorderSurfaceId();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "await this.videoRecorder.start(); this.isFirstRecord = false; AppStorage.setOrCreate<boolean>('isRecorder', true); Logger.info(TAG, 'startVideo end');",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "await this.videoRecorder.start(); this.isFirstRecord = false; AppStorage.setOrCreate<boolean>('isRecorder', true); Logger.info(TAG, 'startVideo end');",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} catch (error) {\nlet err = error as BusinessError; Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "releaseVideoRecorder",
          "type": "function",
          "start_line": 897,
          "end_line": 907,
          "functions": [],
          "classes": [],
          "simplified_code": "  async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "async releaseVideoRecorder(): Promise<void> {\nif (this.videoRecorder) {",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await this.videoRecorder.release();\nthis.videoOutputStatus = false;\nAppStorage.setOrCreate<boolean>('isRecorder', false);\n}",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "stopVideo",
          "type": "function",
          "start_line": 913,
          "end_line": 938,
          "functions": [],
          "classes": [],
          "simplified_code": "  async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\nif (!isRecorder) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    Logger.info(TAG, 'not in recording');\n    return undefined;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "try {\n    Logger.info(TAG, 'stopVideo start');\n    AppStorage.setOrCreate<boolean>('isRecorder', false);",
                  "successors": [
                    {
                      "id": 6,
                      "label": "if (this.videoRecorder) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    await this.videoRecorder.stop();\nif (this.videoOutputStatus) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    await this.videoOutput.stop();\n    this.videoOutputStatus = false;\nif (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "if (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "if (this.videoOutputStatus) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    await this.videoOutput.stop();\n    this.videoOutputStatus = false;\nif (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "if (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "if (this.videoRecorder) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    await this.videoRecorder.stop();\nif (this.videoOutputStatus) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    await this.videoOutput.stop();\n    this.videoOutputStatus = false;\nif (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "if (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "if (this.videoOutputStatus) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    await this.videoOutput.stop();\n    this.videoOutputStatus = false;\nif (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "if (this.fileAsset) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    await this.fileAsset.close(this.fd);\n    return this.fileAsset;",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "label": "return undefined;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "catch (error) {\n    let err = error as BusinessError;\n    Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n    return undefined;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "releaseCamera",
          "type": "function",
          "start_line": 944,
          "end_line": 1031,
          "functions": [],
          "classes": [],
          "simplified_code": "  async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'releaseCamera is called');\nawait this.stopVideo();",
              "successors": [
                {
                  "id": 3,
                  "label": "await this.releaseVideoRecorder();\nif (this.previewOutput) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "try {\nawait this.previewOutput.stop();\nawait this.previewOutput.release();",
                      "successors": [
                        {
                          "id": 7,
                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "} finally {\nthis.previewOutput = null;",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "}\nif (this.photoOutPut) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "try {\nawait this.photoOutPut.release();",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "} finally {\nthis.photoOutPut = null;",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "}\nif (this.videoOutput) {",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "try {\nawait this.videoOutput.release();",
                                                      "successors": [
                                                        {
                                                          "id": 23,
                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "} finally {\nthis.videoOutput = null;",
                                                              "successors": [
                                                                {
                                                                  "id": 27,
                                                                  "label": "}\nif (this.photoSession) {",
                                                                  "successors": [
                                                                    {
                                                                      "id": 29,
                                                                      "label": "try {\nawait this.photoSession.release();",
                                                                      "successors": [
                                                                        {
                                                                          "id": 31,
                                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);",
                                                                          "successors": [
                                                                            {
                                                                              "id": 33,
                                                                              "label": "} finally {\nthis.photoSession = null;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 35,
                                                                                  "label": "}\nif (this.videoSession) {",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 37,
                                                                                      "label": "try {\nawait this.videoSession.release();",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 39,
                                                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 41,
                                                                                              "label": "} finally {\nthis.videoSession = null;",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 43,
                                                                                                  "label": "}\nif (this.portraitSession) {",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 45,
                                                                                                      "label": "try {\nawait this.portraitSession.release();",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 47,
                                                                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 49,
                                                                                                              "label": "} finally {\nthis.portraitSession = null;",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 51,
                                                                                                                  "label": "}\nif (this.nightSession) {",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 53,
                                                                                                                      "label": "try {\nawait this.nightSession.release();",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 55,
                                                                                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 57,
                                                                                                                              "label": "} finally {\nthis.nightSession = null;",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 59,
                                                                                                                                  "label": "}\nif (this.cameraInput) {",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 61,
                                                                                                                                      "label": "try {\nawait this.cameraInput.close();",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 63,
                                                                                                                                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 65,
                                                                                                                                              "label": "} finally {\nthis.cameraInput = null;",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 67,
                                                                                                                                                  "label": "}\nLogger.info(TAG, 'releaseCamera success');",
                                                                                                                                                  "successors": []
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getCameraManagerFn",
          "type": "function",
          "start_line": 1036,
          "end_line": 1047,
          "functions": [],
          "classes": [],
          "simplified_code": "  getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getCameraManagerFn(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.cameraManager) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "} catch (error) {\nlet err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getModeManagerFn",
          "type": "function",
          "start_line": 1049,
          "end_line": 1057,
          "functions": [],
          "classes": [],
          "simplified_code": "  getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getModeManagerFn(): void {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\nLogger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n}",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);",
                  "successors": [
                    {
                      "id": 6,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSupportedCamerasFn",
          "type": "function",
          "start_line": 1062,
          "end_line": 1070,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "try {",
              "successors": [
                {
                  "id": 2,
                  "label": "  this.cameras = this.cameraManager.getSupportedCameras();\n  Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (error) {\n  let err = error as BusinessError;",
                  "successors": [
                    {
                      "id": 6,
                      "label": "  Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSupportedModeFn",
          "type": "function",
          "start_line": 1072,
          "end_line": 1080,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getSupportedModeFn(cameraIndex: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nthis.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\nLogger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getSupportedOutputCapabilityFn",
          "type": "function",
          "start_line": 1085,
          "end_line": 1087,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);",
              "successors": []
            }
          ]
        },
        {
          "name": "createPreviewOutputFn",
          "type": "function",
          "start_line": 1092,
          "end_line": 1104,
          "functions": [],
          "classes": [],
          "simplified_code": "  createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "try {\nlet hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\nphotoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;",
                  "successors": [
                    {
                      "id": 6,
                      "label": "this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\nLogger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\nLogger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "createPhotoOutputFn",
          "type": "function",
          "start_line": 1109,
          "end_line": 1123,
          "functions": [],
          "classes": [],
          "simplified_code": "  createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\nswitch (this.captureMode) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case CaptureMode.OLD_CAPTURE:\nthis.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);",
                  "successors": [
                    {
                      "id": 7,
                      "label": "break;\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "case CaptureMode.NEW_CAPTURE:\ncase CaptureMode.NEW_DEFERRED_PHOTO:",
                  "successors": [
                    {
                      "id": 9,
                      "label": "this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\nif (this.photoOutPut == null) {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n}",
                          "successors": [
                            {
                              "id": 7,
                              "label": "break;\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "createCameraInputFn",
          "type": "function",
          "start_line": 1128,
          "end_line": 1135,
          "functions": [],
          "classes": [],
          "simplified_code": "  createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "createCameraInputFn(cameraDevice: camera.CameraDevice): void {\nLogger.info(TAG, 'createCameraInputFn is called.');",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\nthis.cameraInput = this.cameraManager.createCameraInput(cameraDevice);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "} catch (err) {\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cameraInputOpenFn",
          "type": "function",
          "start_line": 1140,
          "end_line": 1148,
          "functions": [],
          "classes": [],
          "simplified_code": "  async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async cameraInputOpenFn(): Promise<void> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "await this.cameraInput.open();\nLogger.info(TAG, 'cameraInput open success');\n}",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "configMoonCaptureBoost",
          "type": "function",
          "start_line": 1153,
          "end_line": 1176,
          "functions": [],
          "classes": [],
          "simplified_code": "  configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "try {\nthis.isMoonCaptureBoostSupported = this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.isMoonCaptureBoostSupported) {\nthis.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST, (error, statusObject) => {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "Logger.info(TAG, `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\nif (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let status = statusObject.detected;\nLogger.info(TAG, `on moonCaptureBoostStatus change:${status}`);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\nif (!status) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "this.setMoonCaptureBoostEnable(status);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "photoSessionFlowFn",
          "type": "function",
          "start_line": 1181,
          "end_line": 1266,
          "functions": [],
          "classes": [],
          "simplified_code": "  async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async photoSessionFlowFn(): Promise<void> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "Logger.info(TAG, 'photoSessionFlowFn start');\nthis.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.onFocusStateChange();\nthis.onCaptureSessionErrorChange();",
                      "successors": [
                        {
                          "id": 7,
                          "label": "this.photoSession.beginConfig();\nthis.photoSession.addInput(this.cameraInput);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "this.photoSession.addOutput(this.previewOutput);\nthis.photoSession.addOutput(this.photoOutPut);",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\nLogger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "if (hdrPhotoBol) {",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\nif (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\nthis.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\nawait this.photoSession.commitConfig();",
                                                  "successors": [
                                                    {
                                                      "id": 22,
                                                      "label": "try {\nlet range: Array<number> = this.photoSession.getZoomRatioRange();",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {",
                                                          "successors": [
                                                            {
                                                              "id": 26,
                                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                                              "successors": [
                                                                {
                                                                  "id": 30,
                                                                  "label": "try {\nlet zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 32,
                                                                      "label": "if (zoomPointInfo) {\nLogger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);",
                                                                      "successors": [
                                                                        {
                                                                          "id": 34,
                                                                          "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\nthis.configMoonCaptureBoost();",
                                                                          "successors": [
                                                                            {
                                                                              "id": 38,
                                                                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 40,
                                                                                  "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 42,
                                                                                      "label": "this.setColorEffect(this.colorEffect);\nawait this.photoSession.start();",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 45,
                                                                                          "label": "if (this.cameraMode === CameraMode.SUPER_STAB) {\nlet isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 47,
                                                                                              "label": "if (isSupported) {\nthis.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 50,
                                                                                                  "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'photoSessionFlowFn success');",
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 15,
                                          "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\nif (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\nthis.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\nawait this.photoSession.commitConfig();",
                                                  "successors": [
                                                    {
                                                      "id": 22,
                                                      "label": "try {\nlet range: Array<number> = this.photoSession.getZoomRatioRange();",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {",
                                                          "successors": [
                                                            {
                                                              "id": 26,
                                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                                              "successors": [
                                                                {
                                                                  "id": 30,
                                                                  "label": "try {\nlet zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 32,
                                                                      "label": "if (zoomPointInfo) {\nLogger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);",
                                                                      "successors": [
                                                                        {
                                                                          "id": 34,
                                                                          "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\nthis.configMoonCaptureBoost();",
                                                                          "successors": [
                                                                            {
                                                                              "id": 38,
                                                                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 40,
                                                                                  "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 42,
                                                                                      "label": "this.setColorEffect(this.colorEffect);\nawait this.photoSession.start();",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 45,
                                                                                          "label": "if (this.cameraMode === CameraMode.SUPER_STAB) {\nlet isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 47,
                                                                                              "label": "if (isSupported) {\nthis.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 50,
                                                                                                  "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'photoSessionFlowFn success');",
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 57,
                  "label": "let err = error as BusinessError;\nLogger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "videoSessionFlowFn",
          "type": "function",
          "start_line": 1271,
          "end_line": 1356,
          "functions": [],
          "classes": [],
          "simplified_code": "  async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async videoSessionFlowFn(): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nLogger.info(TAG, 'videoSessionFlowFn start');\nthis.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\nthis.onFocusStateChange();\nthis.onCaptureSessionErrorChange();\nthis.videoSession.beginConfig();\nthis.videoSession.addInput(this.cameraInput);\nthis.videoSession.addOutput(this.previewOutput);\nthis.videoSession.addOutput(this.videoOutput);\nawait this.videoSession.commitConfig();\nlet hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\nLogger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (hdrVideoBol) {\nlet isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (isSupportedVideoStabilization) {\nthis.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\nthis.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);",
                          "successors": [
                            {
                              "id": 12,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "let range: Array<number> = this.videoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\n  AppStorage.setOrCreate('zoomRatioMin', range[0]);\n  AppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\ntry {",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 17,
                                      "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\ntry {",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 17,
                                      "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "} else {\n  Logger.info(TAG, 'VideoStabilization not support');\ntry {",
                          "successors": [
                            {
                              "id": 13,
                              "label": "let range: Array<number> = this.videoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\n  AppStorage.setOrCreate('zoomRatioMin', range[0]);\n  AppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\ntry {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 17,
                                  "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\ntry {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 17,
                                  "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "} else {\n  this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\ntry {",
                      "successors": [
                        {
                          "id": 13,
                          "label": "let range: Array<number> = this.videoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\n  AppStorage.setOrCreate('zoomRatioMin', range[0]);\n  AppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\ntry {",
                          "successors": [
                            {
                              "id": 16,
                              "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 17,
                              "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 14,
                          "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\ntry {",
                          "successors": [
                            {
                              "id": 16,
                              "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\nif (zoomPointInfo) {\n  Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n  AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n}\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 17,
                              "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nAppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\nAppStorage.setOrCreate('moonCaptureComponentIsShow', false);\nif (this.colorEffect) {\n  this.setColorEffect(this.colorEffect);\n}",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "await this.videoSession.start();\nif (this.cameraMode === CameraMode.SUPER_STAB) {\n  let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n  if (isSupported) {\n    this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n  }\n}\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "} catch (error) {\n  let err = error as BusinessError;\n  Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "portraitSessionFlowFn",
          "type": "function",
          "start_line": 1358,
          "end_line": 1415,
          "functions": [],
          "classes": [],
          "simplified_code": "  async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {",
              "successors": [
                {
                  "id": 2,
                  "label": "// 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\nif (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "await this.portraitSession.commitConfig();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "try {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "} catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "label": "// 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "} catch (error) {\n    let err = error as BusinessError;\n    Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n  }\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nightSessionFlowFn",
          "type": "function",
          "start_line": 1417,
          "end_line": 1471,
          "functions": [],
          "classes": [],
          "simplified_code": "  async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\nthis.onFocusStateChange();\nthis.onCaptureSessionErrorChange();\nthis.nightSession.beginConfig();\nthis.nightSession.addInput(this.cameraInput);\nthis.nightSession.addOutput(this.previewOutput);\nthis.nightSession.addOutput(this.photoOutPut);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\nthis.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\nthis.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "await this.nightSession.commitConfig();",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "try {",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "let range: Array<number> = this.nightSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "if (range) {",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);\nconst deviceType = AppStorage.get<string>('deviceType');",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "if (deviceType !== Constants.DEFAULT) {",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                              "successors": [
                                                                {
                                                                  "id": 20,
                                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 20,
                                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                              "successors": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "if (deviceType !== Constants.DEFAULT) {",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                              "successors": [
                                                                {
                                                                  "id": 20,
                                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 20,
                                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                              "successors": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 14,
                                              "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "if (deviceType !== Constants.DEFAULT) {",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                      "successors": [
                                                        {
                                                          "id": 17,
                                                          "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                          "successors": [
                                                            {
                                                              "id": 20,
                                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                              "successors": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 14,
                                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "if (deviceType !== Constants.DEFAULT) {",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                      "successors": [
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 14,
                                      "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "if (deviceType !== Constants.DEFAULT) {",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 20,
                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "await this.nightSession.commitConfig();",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "try {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "let range: Array<number> = this.nightSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);\nconst deviceType = AppStorage.get<string>('deviceType');",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "if (deviceType !== Constants.DEFAULT) {",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                      "successors": [
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 14,
                                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "if (deviceType !== Constants.DEFAULT) {",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                      "successors": [
                                                        {
                                                          "id": 20,
                                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 14,
                                      "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "if (deviceType !== Constants.DEFAULT) {",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 20,
                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "const deviceType = AppStorage.get<string>('deviceType');",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "if (deviceType !== Constants.DEFAULT) {",
                                      "successors": [
                                        {
                                          "id": 16,
                                          "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                              "successors": [
                                                {
                                                  "id": 20,
                                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 20,
                                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 20,
                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 20,
                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 14,
                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                          "successors": [
                            {
                              "id": 15,
                              "label": "if (deviceType !== Constants.DEFAULT) {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 20,
                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 20,
                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "label": "const deviceType = AppStorage.get<string>('deviceType');",
                      "successors": [
                        {
                          "id": 15,
                          "label": "if (deviceType !== Constants.DEFAULT) {",
                          "successors": [
                            {
                              "id": 16,
                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                              "successors": [
                                {
                                  "id": 17,
                                  "label": "if (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);",
                                  "successors": [
                                    {
                                      "id": 20,
                                      "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 20,
                                  "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 20,
                          "label": "await this.nightSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'nightSessionFlowFn success');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 22,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "macroPhotoSessionFlowFn",
          "type": "function",
          "start_line": 1473,
          "end_line": 1532,
          "functions": [],
          "classes": [],
          "simplified_code": "  async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "// 创建MacroPhotoSession实例\nthis.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n// 监听焦距的状态变化\nthis.onFocusStateChange();\n// 监听拍照会话的错误事件\nthis.onCaptureSessionErrorChange();\n// 开始配置会话\nthis.macroPhotoSession.beginConfig();\n// 把CameraInput加入到会话\nthis.macroPhotoSession.addInput(this.cameraInput);\n// 把previewOutput加入到会话\nthis.macroPhotoSession.addOutput(this.previewOutput);\n// 把photoOutPut加入到会话\nthis.macroPhotoSession.addOutput(this.photoOutPut);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\nthis.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\nthis.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n}\nlet isSketchSupported = this.previewOutput.isSketchSupported();\nLogger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n// 提交配置信息\nawait this.macroPhotoSession.commitConfig();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\nAppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "let isSketchSupported = this.previewOutput.isSketchSupported();\nLogger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n// 提交配置信息\nawait this.macroPhotoSession.commitConfig();\ntry {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\nAppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                              "successors": []
                            },
                            {
                              "id": 11,
                              "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "let isSketchSupported = this.previewOutput.isSketchSupported();\nLogger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n// 提交配置信息\nawait this.macroPhotoSession.commitConfig();\ntry {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\nLogger.info(TAG, `getZoomRatioRange:${range}`);\nif (range) {\nAppStorage.setOrCreate('zoomRatioMin', range[0]);\nAppStorage.setOrCreate('zoomRatioMax', range[1]);\n}\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\nconst deviceType = AppStorage.get<string>('deviceType');\nif (deviceType !== Constants.DEFAULT) {\nAppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\nif (this.colorEffect) {\nthis.setColorEffect(this.colorEffect);\n}\n}\n\n// 开始会话工作\nawait this.macroPhotoSession.start();\nthis.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\nLogger.info(TAG, 'macroPhotoSessionFlowFn success');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setColorSpace",
          "type": "function",
          "start_line": 1534,
          "end_line": 1549,
          "functions": [],
          "classes": [],
          "simplified_code": "  setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "try {\nlet colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\nLogger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\nlet isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (isSupportedUseColorSpaces) {\nLogger.info(TAG, `setColorSpace: ${colorSpace}`);\nsession.setColorSpace(colorSpace);\nLogger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\nreturn;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setPortraitEffect",
          "type": "function",
          "start_line": 1551,
          "end_line": 1559,
          "functions": [],
          "classes": [],
          "simplified_code": "  setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setPortraitEffect(): void {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `setPortraitEffect error code: ${err.code}`);",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "this.getPortraitEffect();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getPortraitEffect",
          "type": "function",
          "start_line": 1561,
          "end_line": 1569,
          "functions": [],
          "classes": [],
          "simplified_code": "  getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getPortraitEffect(): void {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (error) {\nlet err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);",
                  "successors": [
                    {
                      "id": 6,
                      "label": "",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setMoonCaptureBoostEnable",
          "type": "function",
          "start_line": 1571,
          "end_line": 1586,
          "functions": [],
          "classes": [],
          "simplified_code": "  setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'moonCaptureBoostEnable is called.');\nlet session: camera.CaptureSession = this.getSession();\nif (!session) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return false;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\ntry {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\nAppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n}\nreturn true;",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);",
                      "successors": [
                        {
                          "id": 9,
                          "label": "return false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setColorEffect",
          "type": "function",
          "start_line": 1588,
          "end_line": 1607,
          "functions": [],
          "classes": [],
          "simplified_code": "  setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'setColorEffect is called.');\nif (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let res: Array<camera.ColorEffectType> | undefined = [];\nres = this.getSupportedColorEffects();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (!session) {\nreturn;",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "for (let i = 0; i < res.length; i++) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (res[i] === colorEffect) {\nLogger.info(TAG, 'setColorEffect success.');",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "session.setColorEffect(colorEffect);\nthis.colorEffect = colorEffect;",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "return;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 14,
                          "label": "Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getColorEffect",
          "type": "function",
          "start_line": 1609,
          "end_line": 1623,
          "functions": [],
          "classes": [],
          "simplified_code": "  getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'getColorEffect is called.');\nlet colorEffect: camera.ColorEffectType | undefined = undefined;\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!session) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return colorEffect;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "colorEffect = session.getColorEffect();\nreturn colorEffect;",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "} catch (error) {\nlet err = error as BusinessError;\nLogger.error(TAG, `setColorEffect fail: error code ${err.code}`);",
                          "successors": [
                            {
                              "id": 8,
                              "label": "return colorEffect;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSupportedColorEffects",
          "type": "function",
          "start_line": 1625,
          "end_line": 1635,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'getSupportedColorEffects is called.');\nlet res: Array<camera.ColorEffectType> | undefined = [];\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\nif (!session) {",
              "successors": [
                {
                  "id": 3,
                  "label": "  return res;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\nres = session.getSupportedColorEffects();\nLogger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\nreturn res;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "photoOutPutCallBack",
          "type": "function",
          "start_line": 1640,
          "end_line": 1693,
          "functions": [],
          "classes": [],
          "simplified_code": "  photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "photoOutPutCallBack(): void {\nthis.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => { Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`); });",
              "successors": [
                {
                  "id": 3,
                  "label": "this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => { Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`); });\nthis.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => { Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`); });",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.photoOutPut.on('error', (data: BusinessError): void => { Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`); });\nthis.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => { Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (err) { Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`); return; }\nlet mainImage: image.Image = photo.main; AppStorage.setOrCreate('mainImage', mainImage);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => { Logger.debug(TAG, 'getComponent start'); Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\nif (errCode || component === undefined) { Logger.info(TAG, 'getComponent failed'); return; }",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "let buffer: ArrayBuffer; if (component.byteBuffer) { buffer = component.byteBuffer; } else { Logger.error(TAG, 'component byteBuffer is undefined'); } this.savePicture(buffer, mainImage); });\nphoto.release(); });",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\nif (err) { Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`); return; }",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable'); proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => { AppStorage.setOrCreate('proxyThumbnail', thumbnail); }); this.saveDeferredPhoto(proxyObj); });",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "saveDeferredPhoto",
          "type": "function",
          "start_line": 1698,
          "end_line": 1714,
          "functions": [],
          "classes": [],
          "simplified_code": "  async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\nlet fileName = Date.now() + '.jpg';\nlet photoAsset = await photoHelper.createAsset(fileName);\nlet imgPhotoUri: string = photoAsset.uri;\nlet mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\nmediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\nlet res = await photoHelper.applyChanges(mediaRequest);\nthis.handleTakePicture(imgPhotoUri);\nLogger.info(TAG, `saveDeferredPhoto res:${res}.`);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} catch (err) {\nLogger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "previewOutputCallBack",
          "type": "function",
          "start_line": 1719,
          "end_line": 1730,
          "functions": [],
          "classes": [],
          "simplified_code": "  previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "previewOutputCallBack(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Logger.info(TAG, 'previewOutputCallBack is called');",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "this.previewOutput.on('frameStart', (): void => {\nLogger.debug(TAG, 'Preview frame started');",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "this.previewOutput.on('frameEnd', (): void => {\nLogger.debug(TAG, 'Preview frame ended');",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\nLogger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onVideoOutputChange",
          "type": "function",
          "start_line": 1735,
          "end_line": 1745,
          "functions": [],
          "classes": [],
          "simplified_code": "  onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onVideoOutputChange(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.videoOutput.on('frameStart', (): void => {\nLogger.info(TAG, 'onVideoOutputChange frame started');",
                  "successors": [
                    {
                      "id": 4,
                      "label": "});",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "this.videoOutput.on('frameEnd', (): void => {\nLogger.info(TAG, 'onVideoOutputChange frame frameEnd');",
                  "successors": [
                    {
                      "id": 7,
                      "label": "});",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "this.videoOutput.on('error', (videoOutputError: BusinessError) => {\nLogger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);",
                  "successors": [
                    {
                      "id": 10,
                      "label": "});",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onCameraStatusChange",
          "type": "function",
          "start_line": 1750,
          "end_line": 1755,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Logger.info(TAG, 'onCameraStatusChange is called');\nthis.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {",
              "successors": [
                {
                  "id": 3,
                  "label": "Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onCameraInputChange",
          "type": "function",
          "start_line": 1760,
          "end_line": 1768,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCameraInputChange(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nthis.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "} catch (error) {\nLogger.info(TAG, `onCameraInputChange cameraInput occur error: error`);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onFocusStateChange",
          "type": "function",
          "start_line": 1773,
          "end_line": 1781,
          "functions": [],
          "classes": [],
          "simplified_code": "  onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!session) {\n    return;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onAbilityChange",
          "type": "function",
          "start_line": 1783,
          "end_line": 1793,
          "functions": [],
          "classes": [],
          "simplified_code": "  onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!session) {\nreturn;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "session.on('abilityChange', async (err: BusinessError): Promise<void> => {\nlet zoomRatioRange: Array<number> = session.getZoomRatioRange();",
                  "successors": [
                    {
                      "id": 6,
                      "label": "let isMacroSupported: bool = session.isMacroSupported();\nLogger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onCaptureSessionErrorChange",
          "type": "function",
          "start_line": 1797,
          "end_line": 1805,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n",
          "blocks": [
            {
              "id": 1,
              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!session) {\n  return;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "session.on('error', (captureSessionError: BusinessError): void => {\n  Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setCaptureMode",
          "type": "function",
          "start_line": 1808,
          "end_line": 1810,
          "functions": [],
          "classes": [],
          "simplified_code": "  setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setCaptureMode(mode: number): void {\n    this.captureMode = mode;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCaptureMode",
          "type": "function",
          "start_line": 1812,
          "end_line": 1814,
          "functions": [],
          "classes": [],
          "simplified_code": "  getCaptureMode(): number {\n    return this.captureMode;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getCaptureMode(): number {\n    return this.captureMode;",
              "successors": []
            }
          ]
        },
        {
          "name": "isDeferredImageDeliverySupported",
          "type": "function",
          "start_line": 1819,
          "end_line": 1823,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\nLogger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "return res;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isDeferredImageDeliveryEnabled",
          "type": "function",
          "start_line": 1828,
          "end_line": 1831,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\nLogger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);",
              "successors": []
            }
          ]
        },
        {
          "name": "deferImageDeliveryFor",
          "type": "function",
          "start_line": 1836,
          "end_line": 1839,
          "functions": [],
          "classes": [],
          "simplified_code": "  deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.photoOutPut.deferImageDelivery(deferredType);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testAbilityFunction",
          "type": "function",
          "start_line": 1841,
          "end_line": 1857,
          "functions": [],
          "classes": [],
          "simplified_code": "  testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.cameraMode === CameraMode.PORTRAIT)",
              "successors": [
                {
                  "id": 2,
                  "label": "  Logger.info(TAG_AB, `portraitSession ability`);\n  let session: camera.PortraitPhotoSession = this.getSession();\n  this.logPortraitSession(session);",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "else if (this.cameraMode === CameraMode.VIDEO)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  Logger.info(TAG_AB, `videoSession ability`);\n  let session: camera.VideoSession = this.getSession();\n  this.logVideoSession(session);",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "else if (this.cameraMode === CameraMode.NORMAL)",
                      "successors": [
                        {
                          "id": 6,
                          "label": "  Logger.info(TAG_AB, `photoSession ability`);\n  let session: camera.PhotoSession = this.getSession();\n  this.logPhotoSession(session);",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else\n  Logger.info(TAG, `not support ability`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logPortraitSession",
          "type": "function",
          "start_line": 1859,
          "end_line": 1873,
          "functions": [],
          "classes": [],
          "simplified_code": "  logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\nlist.forEach((conflictFunctions) => { this.logPortraitPhotoConflictFunctions(conflictFunctions); });",
              "successors": [
                {
                  "id": 3,
                  "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\nlet coc: camera.CameraOutputCapability = cocList[0];",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.logCameraOutputCapabilities(coc);\nif (coc) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\nfunctionsList.forEach((functions) => { this.logPortraitPhotoFunctions(functions); });",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logVideoSession",
          "type": "function",
          "start_line": 1875,
          "end_line": 1892,
          "functions": [],
          "classes": [],
          "simplified_code": "  logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "logVideoSession(session: camera.VideoSession): void {\n  let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();",
              "successors": [
                {
                  "id": 3,
                  "label": "  list.forEach((conflictFunctions) => {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "  let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n  let coc: camera.CameraOutputCapability = cocList[0];\n  this.logCameraOutputCapabilities(coc);\n  if (coc) {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "    let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n    functionsList.forEach((functions) => {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "      this.logVideoFunctions(functions);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logPhotoSession",
          "type": "function",
          "start_line": 1894,
          "end_line": 1910,
          "functions": [],
          "classes": [],
          "simplified_code": "  logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\nlist.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });",
              "successors": [
                {
                  "id": 3,
                  "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\nif (coc) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logPortraitPhotoFunctions",
          "type": "function",
          "start_line": 1913,
          "end_line": 1947,
          "functions": [],
          "classes": [],
          "simplified_code": "  logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\nlet hasFlash: bool = functions.hasFlash();\nLogger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\nlet isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\nLogger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\nlet isLcdFlashSupported: bool = functions.isLcdFlashSupported();\nLogger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\nlet isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\nLogger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\nlet exposureBiasRange: Array<number> = functions.getExposureBiasRange();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\nlet isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\nLogger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\nlet zoomRatioRange: Array<number> = functions.getZoomRatioRange();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\nlet beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\nlet beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\nlet colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\nlet colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\nlet portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\nlet virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\nLogger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\nlet physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();",
              "successors": [
                {
                  "id": 3,
                  "label": "physicalAperturesList.forEach((physicalAperture) => {\n  Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n  physicalAperture.apertures.forEach((aperture) => {\n    Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n  });\n});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "logVideoFunctions",
          "type": "function",
          "start_line": 1949,
          "end_line": 1976,
          "functions": [],
          "classes": [],
          "simplified_code": "  logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "logVideoFunctions(functions: camera.VideoFunctions): void {\nlet hasFlash: bool = functions.hasFlash();\nLogger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\nLogger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\nlet isLcdFlashSupported: bool = functions.isLcdFlashSupported();\nLogger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\nLogger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\nlet exposureBiasRange: Array<number> = functions.getExposureBiasRange();\nLogger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\nLogger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\nlet zoomRatioRange: Array<number> = functions.getZoomRatioRange();\nLogger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\nLogger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\nlet beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\nLogger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\nLogger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\nlet colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\nLogger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\nLogger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\nlet isMacroSupported: bool = functions.isMacroSupported();\nLogger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logPhotoFunctions",
          "type": "function",
          "start_line": 1978,
          "end_line": 2011,
          "functions": [],
          "classes": [],
          "simplified_code": "  logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "logPhotoFunctions(functions: camera.PhotoFunctions): void {\nlet isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);",
              "successors": [
                {
                  "id": 3,
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\nlet isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\nlet isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\nlet exposureRange: Array<number> = functions.getSupportedExposureRange();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\nlet hasFlash: bool = functions.hasFlash();",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\nlet isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\nlet isLcdFlashSupported: bool = functions.isLcdFlashSupported();",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\nlet isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\nlet exposureBiasRange: Array<number> = functions.getExposureBiasRange();",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\nlet isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\nlet zoomRatioRange: Array<number> = functions.getZoomRatioRange();",
                                                      "successors": [
                                                        {
                                                          "id": 23,
                                                          "label": "Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\nlet beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\nlet beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);",
                                                              "successors": [
                                                                {
                                                                  "id": 27,
                                                                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\nlet colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 29,
                                                                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\nlet colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();",
                                                                      "successors": [
                                                                        {
                                                                          "id": 31,
                                                                          "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\nlet isMacroSupported: bool = functions.isMacroSupported();",
                                                                          "successors": [
                                                                            {
                                                                              "id": 33,
                                                                              "label": "Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logPortraitPhotoConflictFunctions",
          "type": "function",
          "start_line": 2013,
          "end_line": 2027,
          "functions": [],
          "classes": [],
          "simplified_code": "  logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\nLogger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
              "successors": [
                {
                  "id": 3,
                  "label": "let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\nLogger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\nLogger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\nphysicalAperturesList.forEach((physicalAperture) => {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\nphysicalAperture.apertures.forEach((aperture) => {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "Logger.info(TAG_AB, `           with aperture: ${aperture} `);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logCameraOutputCapabilities",
          "type": "function",
          "start_line": 2029,
          "end_line": 2036,
          "functions": [],
          "classes": [],
          "simplified_code": "  logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\nLogger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\nlet photoProfiles: Array<camera.Profile> = coc.photoProfiles;\nLogger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\nlet videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\nLogger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class CameraService {\n  private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | undefined = undefined;\n  private sceneModes: Array<camera.SceneMode> | undefined = undefined;\n  private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutPut: camera.PhotoOutput | undefined = undefined;\n  private photoSession: camera.PhotoSession | undefined = undefined;\n  private videoSession: camera.VideoSession | undefined = undefined;\n  private portraitSession: camera.PortraitPhotoSession | undefined = undefined;\n  private nightSession: camera.NightPhotoSession | undefined = undefined;\n  private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\n  private mReceiver: image.ImageReceiver | undefined = undefined;\n  private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\n  private fd: number = -1;\n  private videoRecorder: media.AVRecorder | undefined = undefined;\n  private videoOutput: camera.VideoOutput | undefined = undefined;\n  private handleTakePicture: (photoUri: string) => void | undefined = undefined;\n  private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };\n  private videoProfiles: Array<camera.VideoProfile>;\n  private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };\n  private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };\n  private videoOutputStatus: boolean = false;\n  private colorEffect: camera.ColorEffectType | undefined = undefined;\n  private cameraMode: number = 0;\n  private accessHelper: photoAccessHelper.PhotoAccessHelper;\n  private globalContext: GlobalContext = GlobalContext.get();\n  private isFirstRecord = true;\n  private isMoonCaptureBoostSupported: Boolean = false;\n\n  }\n\n  /**\n   * 读取图像\n   */\n  }\n\n  /**\n   * 判断两浮点数是否相等\n   */\n  }\n\n  }\n\n  }\n\n  }\n\n  /**\n   * 初始化\n   */\n    }\n  }\n\n    return videoProfile === undefined ? false : true;\n  }\n\n  /**\n   * 曝光\n   */\n    return isSupported;\n  }\n\n  }\n\n  /**\n   * 曝光区域\n   */\n  }\n\n  /**\n   * 曝光补偿\n   */\n  }\n\n  /**\n   * 是否支持对应对焦模式\n   */\n  }\n\n  /**\n   * 对焦模式\n   */\n  }\n\n  /**\n   * 焦点\n   */\n  }\n\n  /**\n   * 闪关灯\n   */\n  }\n\n  }\n\n  /**\n   * 变焦\n   */\n  }\n\n  /**\n   * 防抖\n   */\n    return isVideoStabilizationModeSupported;\n  }\n\n  }\n\n  /**\n   * 是否支持夜景模式\n   */\n    return isSupportNightMode;\n  }\n\n  /**\n   * 是否支持人像模式\n   */\n    return isSupportPortraitMode;\n  }\n\n  /**\n   * 是否支持微距模式\n   */\n    return isSupportMacroMode;\n  }\n\n  /**\n   * 是否支持镜像\n   */\n  }\n\n  }\n\n  /**\n   * 照片方向判断\n   */\n  }\n\n  /**\n   * 照片地理位置逻辑 ，后续需要靠定位实现 目前传入固定值\n   */\n  }\n\n  /**\n   * 拍照\n   */\n  }\n\n  }\n\n  }\n\n  }\n\n  /**\n   * 配置videoOutput流\n   */\n  }\n\n  /**\n   * 暂停录制\n   */\n  }\n\n  /**\n   * 恢复视频录制\n   */\n    });\n  }\n\n  /**\n   * 初始化录制适配地址\n   */\n  }\n\n  /**\n   * 开始录制\n   */\n  }\n\n    }\n  }\n\n  /**\n   * 停止录制\n   */\n    }\n  }\n\n  /**\n   * 释放会话及其相关参数\n   */\n  }\n\n  /**\n   * 获取相机管理器实例\n   */\n  }\n\n  }\n\n  /**\n   * 获取支持指定的相机设备对象\n   */\n  }\n\n  }\n\n  /**\n   * 查询相机设备在模式下支持的输出能力\n   */\n  }\n\n  /**\n   * 创建previewOutput输出对象\n   */\n  }\n\n  /**\n   * 创建photoOutPut输出对象\n   */\n  }\n\n  /**\n   * 创建cameraInput输出对象\n   */\n  }\n\n  /**\n   * 打开相机\n   */\n  }\n\n  /**\n   * 处理望月信息\n   */\n  }\n\n  /**\n   * 拍照会话流程\n   */\n  }\n\n  /**\n   * 会话流程\n   */\n  }\n \n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  /**\n   * 监听拍照事件\n   */\n  }\n\n  /**\n   * 调用媒体库方式落盘缩略图\n   */\n  }\n\n  /**\n   * 监听预览事件\n   */\n  }\n\n  /**\n   * 监听录像事件\n   */\n  }\n\n  /**\n   * 镜头状态回调\n   */\n  }\n\n  /**\n   * 监听CameraInput的错误事件\n   */\n  }\n\n  /**\n   * 监听焦距的状态变化\n   */\n  }\n\n  }\n  /**\n   * 监听拍照会话的错误事件\n   */\n\n  }\n\n  }\n\n  }\n\n  /**\n   * 查询是否支持二阶段\n   */\n  }\n\n  /**\n   * 查询是否已使能二阶段\n   */\n  }\n\n  /**\n   * 使能二阶段\n   */\n  }\n\n  }\n  \n  }\n  \n  }\n  \n    }\n  }\n  \n  }\n  \n  }\n  \n  }\n\n  }\n  \n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class CameraService {\nprivate captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\nprivate cameraManager: camera.CameraManager | undefined = undefined;\nprivate cameras: Array<camera.CameraDevice> | undefined = undefined;\nprivate sceneModes: Array<camera.SceneMode> | undefined = undefined;\nprivate cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\nprivate cameraInput: camera.CameraInput | undefined = undefined;\nprivate previewOutput: camera.PreviewOutput | undefined = undefined;\nprivate photoOutPut: camera.PhotoOutput | undefined = undefined;\nprivate photoSession: camera.PhotoSession | undefined = undefined;\nprivate videoSession: camera.VideoSession | undefined = undefined;\nprivate portraitSession: camera.PortraitPhotoSession | undefined = undefined;\nprivate nightSession: camera.NightPhotoSession | undefined = undefined;\nprivate macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\nprivate mReceiver: image.ImageReceiver | undefined = undefined;\nprivate fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\nprivate fd: number = -1;\nprivate videoRecorder: media.AVRecorder | undefined = undefined;\nprivate videoOutput: camera.VideoOutput | undefined = undefined;\nprivate handleTakePicture: (photoUri: string) => void | undefined = undefined;\nprivate videoConfig: media.AVRecorderConfig = {\n  audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n  videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n  profile: {\n    audioBitrate: 48000,\n    audioChannels: 2,\n    audioCodec: media.CodecMimeType.AUDIO_AAC,\n    audioSampleRate: 48000,\n    fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n    videoBitrate: 512000,\n    videoCodec: media.CodecMimeType.VIDEO_AVC,\n    videoFrameWidth: 640,\n    videoFrameHeight: 480,\n    videoFrameRate: Constants.VIDEO_FRAME_30\n  },\n  url: '',\n  rotation: 0\n};\nprivate videoProfiles: Array<camera.VideoProfile>;\nprivate videoProfileObj: camera.VideoProfile = {\n  format: 1003,\n  size: {\n    width: 1920,\n    height: 1080\n  },\n  frameRateRange: {\n    min: Constants.VIDEO_FRAME_30,\n    max: Constants.VIDEO_FRAME_30\n  }\n};\nprivate defaultProfile: camera.Profile = {\n  format: 1003,\n  size: {\n    width: 1920,\n    height: 1080\n  }\n};\nprivate photoProfileObj: camera.Profile = {\n  format: 1003,\n  size: {\n    width: 1920,\n    height: 1080\n  }\n};\nprivate previewProfileObj: camera.Profile = {\n  format: 1003,\n  size: {\n    width: 1920,\n    height: 1080\n  }\n};\nprivate photoRotationMap = {\n  rotation0: 0,\n  rotation90: 90,\n  rotation180: 180,\n  rotation270: 270,\n};\nprivate videoOutputStatus: boolean = false;\nprivate colorEffect: camera.ColorEffectType | undefined = undefined;\nprivate cameraMode: number = 0;\nprivate accessHelper: photoAccessHelper.PhotoAccessHelper;\nprivate globalContext: GlobalContext = GlobalContext.get();\nprivate isFirstRecord = true;\nprivate isMoonCaptureBoostSupported: Boolean = false;",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// @ts-nocheck\nimport camera from '@ohos.multimedia.camera';\nimport image from '@ohos.multimedia.image';\nimport media from '@ohos.multimedia.media';\nimport { BusinessError } from '@ohos.base';\nimport Logger from '../model/Logger';\nimport { Constants } from '../common/Constants';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport fs from '@ohos.file.fs';\nimport { GlobalContext } from '../common/GlobalContext';\nimport type { CameraConfig } from '../common/CameraConfig';\nimport colorSpaceManager from '@ohos.graphics.colorSpaceManager';\n\nconst cameraSize = {\n  width: 1280,\n  height: 720\n};\n\nenum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}\n\nenum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}\n\nenum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}\n\n}\n\nconst TAG: string = 'CameraService';\nconst TAG_AB: string = '-----AB-----';\n\n}\n\nexport default new CameraService();",
  "blocks": [
    {
      "id": 1,
      "label": "import camera from '@ohos.multimedia.camera';\nimport image from '@ohos.multimedia.image';\nimport media from '@ohos.multimedia.media';\nimport { BusinessError } from '@ohos.base';\nimport Logger from '../model/Logger';\nimport { Constants } from '../common/Constants';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport fs from '@ohos.file.fs';\nimport { GlobalContext } from '../common/GlobalContext';\nimport type { CameraConfig } from '../common/CameraConfig';\nimport colorSpaceManager from '@ohos.graphics.colorSpaceManager';\nconst cameraSize = {\n  width: 1280,\n  height: 720\n};",
      "successors": [
        {
          "id": 3,
          "label": "enum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}\nenum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}",
          "successors": [
            {
              "id": 5,
              "label": "enum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}\nconst TAG: string = 'CameraService';\nconst TAG_AB: string = '-----AB-----';",
              "successors": [
                {
                  "id": 7,
                  "label": "export default new CameraService();",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}