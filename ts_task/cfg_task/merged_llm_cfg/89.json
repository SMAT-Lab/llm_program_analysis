{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 69,
  "functions": [],
  "classes": [
    {
      "name": "MediaUtils",
      "type": "class",
      "start_line": 30,
      "end_line": 67,
      "functions": [
        {
          "name": "createAndGetFile",
          "type": "function",
          "start_line": 31,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  async createAndGetFile(context: any) {\n    let mediaTest = photoAccessHelper.getPhotoAccessHelper(context)\n    let info = {\n      prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n    }\n    let dateTimeUtil = new DateTimeUtil()\n    let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\n    let displayName = `${info.prefix}${name}${info.suffix}`\n    let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\n    let options: photoAccessHelper.CreateOptions = {\n      title: displayName\n    }\n    return await mediaTest.createAsset(photoType, '.jpg', options)\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async createAndGetFile(context: any) {\nlet mediaTest = photoAccessHelper.getPhotoAccessHelper(context)",
              "successors": [
                {
                  "id": 3,
                  "label": "let info = {\n  prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\n}\nlet dateTimeUtil = new DateTimeUtil()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\nlet displayName = `${info.prefix}${name}${info.suffix}`",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\nlet options: photoAccessHelper.CreateOptions = {\n  title: displayName\n}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return await mediaTest.createAsset(photoType, '.jpg', options)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "savePicture",
          "type": "function",
          "start_line": 46,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "  async savePicture(data: image.PixelMap, context: any) {\n    console.log(TAG, `savePicture`)\n    let packOpts: image.PackingOption = {\n      format: \"image/jpeg\", quality: 100\n    }\n    let imagePackerApi = image.createImagePacker()\n    let arrayBuffer = await imagePackerApi.packing(data, packOpts)\n    let fileAsset = await this.createAndGetFile(context)\n    let file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n    imagePackerApi.release()\n    try {\n      await fs.write(file.fd, arrayBuffer);\n    } catch (err) {\n      console.log(`write failed, code is ${err.code}, message is ${err.message}`)\n    }\n    await fs.close(file.fd);\n    console.log(TAG, `write done`)\n    prompt.showToast({\n      message: '图片保存成功', duration: 1000\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async savePicture(data: image.PixelMap, context: any) {\nconsole.log(TAG, `savePicture`)\nlet packOpts: image.PackingOption = {\n  format: \"image/jpeg\", quality: 100\n}\nlet imagePackerApi = image.createImagePacker()\nlet arrayBuffer = await imagePackerApi.packing(data, packOpts)\nlet fileAsset = await this.createAndGetFile(context)\nlet file = await fs.open(fileAsset,  fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\nimagePackerApi.release()",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await fs.write(file.fd, arrayBuffer);\nawait fs.close(file.fd);\nconsole.log(TAG, `write done`)\nprompt.showToast({\n  message: '图片保存成功', duration: 1000\n})",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} catch (err) {\n  console.log(`write failed, code is ${err.code}, message is ${err.message}`)\nawait fs.close(file.fd);\nconsole.log(TAG, `write done`)\nprompt.showToast({\n  message: '图片保存成功', duration: 1000\n})",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class MediaUtils {\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class MediaUtils {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport image from '@ohos.multimedia.image'\nimport fileio from '@ohos.fileio'\nimport fs from '@ohos.file.fs';\nimport prompt from '@ohos.prompt'\nimport photoAccessHelper from '@ohos.file.photoAccessHelper'\nimport DateTimeUtil from './DateTimeUtil'\n\n\n/**\n * mediaUtils of wifi test\n */\n\nconst TAG = \"[MediaUtils]\"\n\n}\n\nexport default new MediaUtils()",
  "blocks": [
    {
      "id": 1,
      "label": "import image from '@ohos.multimedia.image'\nimport fileio from '@ohos.fileio'\nimport fs from '@ohos.file.fs';\nimport prompt from '@ohos.prompt'\nimport photoAccessHelper from '@ohos.file.photoAccessHelper'\nimport DateTimeUtil from './DateTimeUtil'\n\n\n/**\n * mediaUtils of wifi test\n */\n\nconst TAG = \"[MediaUtils]\"\n\n}\n\nexport default new MediaUtils()",
      "successors": []
    }
  ]
}