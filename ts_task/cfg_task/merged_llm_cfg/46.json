{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 40,
  "functions": [],
  "classes": [
    {
      "name": "SelectManager",
      "type": "class",
      "start_line": 20,
      "end_line": 38,
      "functions": [
        {
          "name": "isSelect",
          "type": "function",
          "start_line": 23,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  isSelect(key: string, defaultValue: boolean): boolean {\n    if (this.status.has(key)) {\n      return this.status.get(key);\n    } else {\n      return defaultValue;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isSelect(key: string, defaultValue: boolean): boolean {\nif (this.status.has(key)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return this.status.get(key);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nreturn defaultValue;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setSelect",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelect(key: string, value: boolean): void {\n    this.status.set(key, value);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelect(key: string, value: boolean): void {\nthis.status.set(key, value);",
              "successors": []
            }
          ]
        },
        {
          "name": "deleteSelect",
          "type": "function",
          "start_line": 35,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "  deleteSelect(key: string): void {\n    this.status.delete(key);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "deleteSelect(key: string): void {\nthis.status.delete(key);",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class SelectManager {\n  private status: Map<string, boolean> = new Map<string, boolean>();\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class SelectManager {\n  private status: Map<string, boolean> = new Map<string, boolean>();",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\n\nconst TAG = 'SelectManager';\n\n}\n\nexport let selectManager: SelectManager = stashOrGetObject<SelectManager>(new SelectManager(), TAG);",
  "blocks": [
    {
      "id": 1,
      "label": "import { stashOrGetObject } from '../utils/SingleInstanceUtils';\nconst TAG = 'SelectManager';",
      "successors": [
        {
          "id": 3,
          "label": "export let selectManager: SelectManager = stashOrGetObject<SelectManager>(new SelectManager(), TAG);",
          "successors": []
        }
      ]
    }
  ]
}