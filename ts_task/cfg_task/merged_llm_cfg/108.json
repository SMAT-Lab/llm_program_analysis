{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 81,
  "functions": [],
  "classes": [
    {
      "name": "IdlServiceExtProxy",
      "type": "class",
      "start_line": 25,
      "end_line": 80,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 30,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(proxy) {\n    this.proxy = proxy;\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(proxy) {\n    this.proxy = proxy;\n  };",
              "successors": []
            }
          ]
        },
        {
          "name": "processData",
          "type": "function",
          "start_line": 34,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "let option = new rpc.MessageOption();\nlet dataSequence = rpc.MessageSequence.create();",
              "successors": [
                {
                  "id": 3,
                  "label": "let replySequence = rpc.MessageSequence.create();\ntry {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "dataSequence.writeInt(data);\nthis.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (result.errCode === 0) {\nlet errCodeVar = result.reply.readInt();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (errCodeVar !== 0) {\nlet returnValueVar = undefined;",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "callback(errCodeVar, returnValueVar);\nreturn;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "let returnValueVar = result.reply.readInt();\ncallback(errCodeVar, returnValueVar);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 15,
                          "label": "hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "} finally {\ndataSequence.reclaim();",
                      "successors": [
                        {
                          "id": 18,
                          "label": "replySequence.reclaim();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "insertDataToMap",
          "type": "function",
          "start_line": 60,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };",
          "blocks": [
            {
              "id": 1,
              "label": "let option = new rpc.MessageOption();\nlet dataSequence = rpc.MessageSequence.create();",
              "successors": [
                {
                  "id": 3,
                  "label": "let replySequence = rpc.MessageSequence.create();\ntry {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "dataSequence.writeString(key);\ndataSequence.writeInt(val);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\nif (result.errCode === 0) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let errCodeVar = result.reply.readInt();\ncallback(errCodeVar);",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "});\nfinally {",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "dataSequence.reclaim();\nreplySequence.reclaim();",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "} else {\nhilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "});\nfinally {",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "dataSequence.reclaim();\nreplySequence.reclaim();",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  };\n\n  };\n\n  };\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export default class IdlServiceExtProxy implements IIdlServiceExt {\nstatic readonly COMMAND_PROCESS_DATA = 1;",
          "successors": [
            {
              "id": 3,
              "label": "static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\nprivate proxy;",
              "successors": [
                {
                  "id": 5,
                  "label": "};\n};",
                  "successors": [
                    {
                      "id": 7,
                      "label": "};",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtProxy]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n};\n",
  "blocks": [
    {
      "id": 1,
      "label": "import type { ProcessDataCallback } from './i_idl_service_ext';",
      "successors": []
    }
  ]
}