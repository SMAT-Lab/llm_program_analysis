{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 38,
  "functions": [
    {
      "name": "getResourceString",
      "type": "function",
      "start_line": 23,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function getResourceString(resource: Resource): Promise<string> {\n  try {\n    Log.debug(TAG, 'getResourceString: ' + JSON.stringify(resource));\n    let context = GlobalContext.getContext().getObject('appContext');\n    let mgr: resourceManager.ResourceManager = await resourceManager.getResourceManager(context);\n    if (mgr != null || mgr != undefined) {\n      return await mgr.getStringValue(resource.id);\n    } else {\n      Log.warn(TAG, 'getResourceManager instance is none');\n      return null;\n    }\n  } catch (error) {\n    Log.error(TAG, 'getResourceString error: ' + error);\n    return null;\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function getResourceString(resource: Resource): Promise<string> {",
          "successors": [
            {
              "id": 2,
              "label": "try {\nLog.debug(TAG, 'getResourceString: ' + JSON.stringify(resource));\nlet context = GlobalContext.getContext().getObject('appContext');\nlet mgr: resourceManager.ResourceManager = await resourceManager.getResourceManager(context);",
              "successors": [
                {
                  "id": 4,
                  "label": "if (mgr != null || mgr != undefined) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return await mgr.getStringValue(resource.id);",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "} else {\nLog.warn(TAG, 'getResourceManager instance is none');\nreturn null;",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "label": "} catch (error) {\nLog.error(TAG, 'getResourceString error: ' + error);\nreturn null;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// @ts-nocheck\n/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport resourceManager from '@ohos.resourceManager';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'ResourceUtils';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import resourceManager from '@ohos.resourceManager';\nimport { Log } from './Log';",
      "successors": [
        {
          "id": 3,
          "label": "import { GlobalContext } from '../common/GlobalContext';\nconst TAG = 'ResourceUtils';",
          "successors": []
        }
      ]
    }
  ]
}