digraph "32.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L452]";
    node_1_1 [label="id: 1\nimport deviceInfo from '@ohos.deviceInfo';
import window from '@ohos.window';
import { stashOrGetObject } from '../utils/SingleInstanceUtils';
import { Log } from '../utils/Log';
import { BroadcastConstants } from '../constants/BroadcastConstants';
import { Constants } from '../constants/Constants';
import { getResourceString } from '../utils/ResourceUtils';
import { GlobalContext } from './GlobalContext';
export enum ColumnSize {
  COLUMN_TWO = 2,
  COLUMN_FOUR = 4,
  COLUMN_SIX = 6,
  COLUMN_EIGHT = 8,
  COLUMN_TWELVE = 12
}", shape=box];
  subgraph "cluster_2" {
    label="ScreenManager (class) [L72-L450]";
    node_2_1 [label="id: 1\nclass ScreenManager {  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';  readonly DEFAULT_WIDTH: number = 1920;  readonly DEFAULT_HEIGHT: number = 1080;  readonly SPLIT_THRESHOLD = 1.7;  private winWidth = 0.0;  private winHeight = 0.0;  private statusBarHeight = 0;  private naviBarHeight = 0;  private leftBlank: number[] = [0, 0, 0, 0];  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();  private mainWindow: window.Window = undefined;  private globalThis = GlobalContext.getContext();  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;  private windowMode = WindowMode.UNDEFINED;}", shape=box];
  subgraph "cluster_3" {
    label="constructor (function) [L94-L96]";
    node_3_1 [label="id: 1\nconstructor() {
  Log.info(TAG, 'constructor');
}", shape=box];
  }
  subgraph "cluster_4" {
    label="initializationSize (function) [L98-L103]";
    node_4_1 [label="id: 1\nasync initializationSize(win): Promise<void> {
this.mainWindow = win;", shape=box];
  }
  subgraph "cluster_5" {
    label="on (function) [L111-L122]";
    node_5_1 [label="id: 1\non(event, fn): void {", shape=box];
  }
  subgraph "cluster_6" {
    label="off (function) [L130-L155]";
    node_6_1 [label="id: 1\noff(event, fn): void {", shape=box];
  }
  subgraph "cluster_7" {
    label="emit (function) [L157-L180]";
    node_7_1 [label="id: 1\nlet _self = this;
if (!new Boolean(this.events.get(event)).valueOf()) {", shape=box];
  }
  subgraph "cluster_8" {
    label="isLeftBlankInitialized (function) [L182-L184]";
    node_8_1 [label="id: 1\nprivate isLeftBlankInitialized(): boolean {
return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;", shape=box];
  }
  subgraph "cluster_9" {
    label="getWinWidth (function) [L187-L189]";
    node_9_1 [label="id: 1\ngetWinWidth(): number {
return px2vp(this.winWidth);", shape=box];
  }
  subgraph "cluster_10" {
    label="setWinWidth (function) [L191-L193]";
    node_10_1 [label="id: 1\nsetWinWidth(width: number): void {
this.winWidth = width;", shape=box];
  }
  subgraph "cluster_11" {
    label="getWinHeight (function) [L196-L198]";
    node_11_1 [label="id: 1\ngetWinHeight(): number {
return px2vp(this.winHeight);", shape=box];
  }
  subgraph "cluster_12" {
    label="getStatusBarHeight (function) [L200-L202]";
    node_12_1 [label="id: 1\ngetStatusBarHeight(): number {
    return px2vp(this.statusBarHeight);", shape=box];
  }
  subgraph "cluster_13" {
    label="getNaviBarHeight (function) [L204-L206]";
    node_13_1 [label="id: 1\ngetNaviBarHeight(): number {
    return px2vp(this.naviBarHeight);", shape=box];
  }
  subgraph "cluster_14" {
    label="initWindowMode (function) [L208-L210]";
    node_14_1 [label="id: 1\nasync initWindowMode(): Promise<void> {
    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);", shape=box];
  }
  subgraph "cluster_15" {
    label="isSplitMode (function) [L212-L214]";
    node_15_1 [label="id: 1\nisSplitMode(): boolean {
return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)", shape=box];
  }
  subgraph "cluster_16" {
    label="checkWindowMode (function) [L216-L232]";
    node_16_1 [label="id: 1\nlet before = this.windowMode;
let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;
let mode = await photosWindowStage.getWindowMode();
Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);", shape=box];
  }
  subgraph "cluster_17" {
    label="setMainWindow (function) [L234-L241]";
    node_17_1 [label="id: 1\nprivate setMainWindow(win: window.Window): void {
Log.debug(TAG, 'setMainWindow');", shape=box];
  }
  subgraph "cluster_18" {
    label="getWindowProperties (function) [L243-L255]";
    node_18_1 [label="id: 1\nLog.debug(TAG, 'getWindowProperties');
try {", shape=box];
  }
  subgraph "cluster_19" {
    label="setFullScreen (function) [L257-L267]";
    node_19_1 [label="id: 1\nlet topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW); Log.debug(TAG, 'getTopWindow start');
try {", shape=box];
  }
  subgraph "cluster_20" {
    label="setSplitScreen (function) [L269-L278]";
    node_20_1 [label="id: 1\nsetSplitScreen(): void {
try {", shape=box];
  }
  subgraph "cluster_21" {
    label="hideStatusBar (function) [L280-L308]";
    node_21_1 [label="id: 1\nLog.debug(TAG, 'hideStatusBar start');
let names: string[] = ['navigation'];
Log.debug(TAG, 'getTopWindow names: ' + names + ' end');
try {", shape=box];
  }
  subgraph "cluster_22" {
    label="setNavigationBarColor (function) [L310-L325]";
    node_22_1 [label="id: 1\nasync setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {
    Log.debug(TAG, 'setNavigationBarColor start');
    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);
try {", shape=box];
  }
  subgraph "cluster_23" {
    label="setSystemUi (function) [L327-L348]";
    node_23_1 [label="id: 1\nsetSystemUi(isShowBar: boolean): void {
Log.debug(TAG, 'setSystemUi start');
let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);
Log.debug(TAG, 'getTopWindow start');
let names: string[] = ['navigation'];", shape=box];
  }
  subgraph "cluster_24" {
    label="onLeftBlankChanged (function) [L350-L365]";
    node_24_1 [label="id: 1\nprivate onLeftBlankChanged(area: window.AvoidArea): void {", shape=box];
  }
  subgraph "cluster_25" {
    label="onWinSizeChanged (function) [L367-L384]";
    node_25_1 [label="id: 1\nLog.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));
if (size == null || size == undefined) {", shape=box];
  }
  subgraph "cluster_26" {
    label="onRotationAngleChanged (function) [L386-L397]";
    node_26_1 [label="id: 1\nprivate onRotationAngleChanged(angle): void {", shape=box];
  }
  subgraph "cluster_27" {
    label="isHorizontal (function) [L399-L404]";
    node_27_1 [label="id: 1\nif (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null)
  AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);", shape=box];
    node_27_3 [label="id: 3\nreturn AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);", shape=box];
    node_27_1 -> node_27_3;
  }
  subgraph "cluster_28" {
    label="isSidebar (function) [L406-L411]";
    node_28_1 [label="id: 1\nisSidebar(): boolean {", shape=box];
  }
  subgraph "cluster_29" {
    label="getColumnsWidth (function) [L413-L418]";
    node_29_1 [label="id: 1\nlet columns = this.getScreenColumns();
Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);", shape=box];
  }
  subgraph "cluster_30" {
    label="getScreenColumns (function) [L420-L429]";
    node_30_1 [label="id: 1\nlet width = px2vp(this.winWidth);", shape=box];
  }
  subgraph "cluster_31" {
    label="setKeepScreenOn (function) [L431-L439]";
    node_31_1 [label="id: 1\nsetKeepScreenOn(): void {
Log.info(TAG, 'setKeepScreenOn start');", shape=box];
  }
  subgraph "cluster_32" {
    label="setKeepScreenOff (function) [L441-L449]";
    node_32_1 [label="id: 1\nsetKeepScreenOff(): void {
    Log.info(TAG, 'setKeepScreenOff start');
    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');
try {
          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))", shape=box];
  }
  }
  }
}