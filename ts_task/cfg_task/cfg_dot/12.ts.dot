digraph "12.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L2039]";
    node_1_1 [label="id: 1\nimport camera from '@ohos.multimedia.camera';
import image from '@ohos.multimedia.image';
import media from '@ohos.multimedia.media';
import { BusinessError } from '@ohos.base';
import Logger from '../model/Logger';
import { Constants } from '../common/Constants';
import photoAccessHelper from '@ohos.file.photoAccessHelper';
import fs from '@ohos.file.fs';
import { GlobalContext } from '../common/GlobalContext';
import type { CameraConfig } from '../common/CameraConfig';
import colorSpaceManager from '@ohos.graphics.colorSpaceManager';
const cameraSize = {
  width: 1280,
  height: 720
};", shape=box];
  subgraph "cluster_2" {
    label="CameraService (class) [L73-L2037]";
    node_2_1 [label="id: 1\nclass CameraService {
private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;
private cameraManager: camera.CameraManager | undefined = undefined;
private cameras: Array<camera.CameraDevice> | undefined = undefined;
private sceneModes: Array<camera.SceneMode> | undefined = undefined;
private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;
private cameraInput: camera.CameraInput | undefined = undefined;
private previewOutput: camera.PreviewOutput | undefined = undefined;
private photoOutPut: camera.PhotoOutput | undefined = undefined;
private photoSession: camera.PhotoSession | undefined = undefined;
private videoSession: camera.VideoSession | undefined = undefined;
private portraitSession: camera.PortraitPhotoSession | undefined = undefined;
private nightSession: camera.NightPhotoSession | undefined = undefined;
private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;
private mReceiver: image.ImageReceiver | undefined = undefined;
private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;
private fd: number = -1;
private videoRecorder: media.AVRecorder | undefined = undefined;
private videoOutput: camera.VideoOutput | undefined = undefined;
private handleTakePicture: (photoUri: string) => void | undefined = undefined;
private videoConfig: media.AVRecorderConfig = {
  audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,
  videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,
  profile: {
    audioBitrate: 48000,
    audioChannels: 2,
    audioCodec: media.CodecMimeType.AUDIO_AAC,
    audioSampleRate: 48000,
    fileFormat: media.ContainerFormatType.CFT_MPEG_4,
    videoBitrate: 512000,
    videoCodec: media.CodecMimeType.VIDEO_AVC,
    videoFrameWidth: 640,
    videoFrameHeight: 480,
    videoFrameRate: Constants.VIDEO_FRAME_30
  },
  url: '',
  rotation: 0
};
private videoProfiles: Array<camera.VideoProfile>;
private videoProfileObj: camera.VideoProfile = {
  format: 1003,
  size: {
    width: 1920,
    height: 1080
  },
  frameRateRange: {
    min: Constants.VIDEO_FRAME_30,
    max: Constants.VIDEO_FRAME_30
  }
};
private defaultProfile: camera.Profile = {
  format: 1003,
  size: {
    width: 1920,
    height: 1080
  }
};
private photoProfileObj: camera.Profile = {
  format: 1003,
  size: {
    width: 1920,
    height: 1080
  }
};
private previewProfileObj: camera.Profile = {
  format: 1003,
  size: {
    width: 1920,
    height: 1080
  }
};
private photoRotationMap = {
  rotation0: 0,
  rotation90: 90,
  rotation180: 180,
  rotation270: 270,
};
private videoOutputStatus: boolean = false;
private colorEffect: camera.ColorEffectType | undefined = undefined;
private cameraMode: number = 0;
private accessHelper: photoAccessHelper.PhotoAccessHelper;
private globalContext: GlobalContext = GlobalContext.get();
private isFirstRecord = true;
private isMoonCaptureBoostSupported: Boolean = false;", shape=box];
  subgraph "cluster_3" {
    label="constructor (function) [L158-L197]";
    node_3_1 [label="id: 1\nconstructor() {
    mockInterface();
    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());
    let imageCapacity = 8;", shape=box];
  }
  subgraph "cluster_4" {
    label="savePicture (function) [L202-L220]";
    node_4_1 [label="id: 1\nasync savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {", shape=box];
  }
  subgraph "cluster_5" {
    label="withinErrorMargin (function) [L225-L231]";
    node_5_1 [label="id: 1\nlet baseNumber = 2;
let indexNumber = 2;", shape=box];
  }
  subgraph "cluster_6" {
    label="switchProfiles (function) [L233-L391]";
    node_6_1 [label="id: 1\nswitchProfiles(profiles: camera.CameraOutputCapability): void {
    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;
    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;
    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;
    let isValidProfiles = true;
if (!previewProfiles || previewProfiles.length < 1) {
      isValidProfiles = false;
    }", shape=box];
  }
  subgraph "cluster_7" {
    label="setCameraMode (function) [L393-L395]";
    node_7_1 [label="id: 1\nsetCameraMode(cameraMode: number): void {
    this.cameraMode = cameraMode;", shape=box];
  }
  subgraph "cluster_8" {
    label="initProfile (function) [L397-L408]";
    node_8_1 [label="id: 1\ninitProfile(cameraDeviceIndex: number): void {
let profiles;", shape=box];
  }
  subgraph "cluster_9" {
    label="initCamera (function) [L413-L475]";
    node_9_1 [label="id: 1\nasync initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> { try { this.isFirstRecord = true; // 获取传入摄像头 Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`); await this.releaseCamera(); // 获取相机管理器实例 this.getCameraManagerFn(); let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];", shape=box];
  }
  subgraph "cluster_10" {
    label="isVideoFrameSupportedFn (function) [L478-L486]";
    node_10_1 [label="id: 1\nisVideoFrameSupportedFn(videoFrame: number): boolean {
    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {", shape=box];
  }
  subgraph "cluster_11" {
    label="isExposureModeSupportedFn (function) [L492-L501]";
    node_11_1 [label="id: 1\nisExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {
let isSupported: boolean = false;
let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_12" {
    label="setExposureMode (function) [L504-L513]";
    node_12_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();
if (!session) {", shape=box];
  }
  subgraph "cluster_13" {
    label="isMeteringPoint (function) [L518-L531]";
    node_13_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();
if (!session) {", shape=box];
  }
  subgraph "cluster_14" {
    label="isExposureBiasRange (function) [L536-L548]";
    node_14_1 [label="id: 1\nLogger.debug(TAG, `setExposureBias value ${exposureBias}`);
let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_15" {
    label="isFocusModeSupported (function) [L553-L559]";
    node_15_1 [label="id: 1\nisFocusModeSupported(focusMode: camera.FocusMode): boolean {
let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_16" {
    label="isFocusMode (function) [L564-L577]";
    node_16_1 [label="id: 1\nlet isSupported = this.isFocusModeSupported(focusMode);
Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);", shape=box];
  }
  subgraph "cluster_17" {
    label="isFocusPoint (function) [L582-L594]";
    node_17_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_18" {
    label="hasFlashFn (function) [L599-L615]";
    node_18_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_19" {
    label="getSession (function) [L617-L633]";
    node_19_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;
switch (this.cameraMode) {", shape=box];
  }
  subgraph "cluster_20" {
    label="setZoomRatioFn (function) [L638-L668]";
    node_20_1 [label="id: 1\nsetZoomRatioFn(zoomRatio: number): void {
Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);", shape=box];
  }
  subgraph "cluster_21" {
    label="isVideoStabilizationModeSupportedFn (function) [L673-L678]";
    node_21_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();
let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);", shape=box];
  }
  subgraph "cluster_22" {
    label="setVideoStabilizationMode (function) [L681-L688]";
    node_22_1 [label="id: 1\nsetVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {
    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);", shape=box];
  }
  subgraph "cluster_23" {
    label="isNightModeSupportedFn (function) [L693-L696]";
    node_23_1 [label="id: 1\nisNightModeSupportedFn(): boolean {
    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;", shape=box];
  }
  subgraph "cluster_24" {
    label="isPortraitModeSupportedFn (function) [L702-L705]";
    node_24_1 [label="id: 1\nisPortraitModeSupportedFn(): boolean {
    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;", shape=box];
  }
  subgraph "cluster_25" {
    label="isMacroPhotoModeSupportedFn (function) [L711-L714]";
    node_25_1 [label="id: 1\nlet isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;
Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);", shape=box];
  }
  subgraph "cluster_26" {
    label="isMirrorSupportedFn (function) [L720-L723]";
    node_26_1 [label="id: 1\nisMirrorSupportedFn(): void {
    let isSupported = this.photoOutPut.isMirrorSupported();
    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);", shape=box];
  }
  subgraph "cluster_27" {
    label="setTakePictureCallback (function) [L725-L727]";
    node_27_1 [label="id: 1\nsetTakePictureCallback(callback: (photoUri: string) => void): void {
    this.handleTakePicture = callback;", shape=box];
  }
  subgraph "cluster_28" {
    label="onChangeRotation (function) [L732-L745]";
    node_28_1 [label="id: 1\nonChangeRotation(): number {
let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);", shape=box];
  }
  subgraph "cluster_29" {
    label="onChangeLocation (function) [L750-L769]";
    node_29_1 [label="id: 1\nlet cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);
if (cameraConfig.locationBol) {", shape=box];
  }
  subgraph "cluster_30" {
    label="takePicture (function) [L774-L788]";
    node_30_1 [label="id: 1\nasync takePicture(mirrorBol?: boolean): Promise<void> {
Logger.info(TAG, 'takePicture start');", shape=box];
  }
  subgraph "cluster_31" {
    label="prepareAVRecorder (function) [L790-L811]";
    node_31_1 [label="id: 1\nasync prepareAVRecorder(): Promise<void> {
await this.initUrl();", shape=box];
  }
  subgraph "cluster_32" {
    label="getAVRecorderSurfaceId (function) [L813-L815]";
    node_32_1 [label="id: 1\nasync getAVRecorderSurfaceId(): Promise<string> {
    return await this.videoRecorder.getInputSurface();", shape=box];
  }
  subgraph "cluster_33" {
    label="createAVRecorder (function) [L817-L819]";
    node_33_1 [label="id: 1\nasync createAVRecorder(): Promise<void> {
    this.videoRecorder = await media.createAVRecorder();", shape=box];
  }
  subgraph "cluster_34" {
    label="createVideoOutput (function) [L824-L835]";
    node_34_1 [label="id: 1\nLogger.info(TAG, 'createVideoOutput start');
await this.prepareAVRecorder();", shape=box];
  }
  subgraph "cluster_35" {
    label="pauseVideo (function) [L840-L848]";
    node_35_1 [label="id: 1\nasync pauseVideo(): Promise<void> {
    await this.videoRecorder.pause().then((): void => {", shape=box];
  }
  subgraph "cluster_36" {
    label="resumeVideo (function) [L853-L862]";
    node_36_1 [label="id: 1\nasync resumeVideo(): Promise<void> {
this.videoOutput.start().then((): void => {", shape=box];
  }
  subgraph "cluster_37" {
    label="initUrl (function) [L868-L873]";
    node_37_1 [label="id: 1\nasync initUrl(): Promise<void> {
    let fileName = `${Date.now()}.mp4`;", shape=box];
  }
  subgraph "cluster_38" {
    label="startVideo (function) [L878-L895]";
    node_38_1 [label="id: 1\nasync startVideo(): Promise<void> {
try {", shape=box];
  }
  subgraph "cluster_39" {
    label="releaseVideoRecorder (function) [L897-L907]";
    node_39_1 [label="id: 1\nasync releaseVideoRecorder(): Promise<void> {
if (this.videoRecorder) {", shape=box];
  }
  subgraph "cluster_40" {
    label="stopVideo (function) [L913-L938]";
    node_40_1 [label="id: 1\nasync stopVideo(): Promise<photoAccessHelper.PhotoAsset> {
    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');
if (!isRecorder) {", shape=box];
  }
  subgraph "cluster_41" {
    label="releaseCamera (function) [L944-L1031]";
    node_41_1 [label="id: 1\nLogger.info(TAG, 'releaseCamera is called');
await this.stopVideo();", shape=box];
  }
  subgraph "cluster_42" {
    label="getCameraManagerFn (function) [L1036-L1047]";
    node_42_1 [label="id: 1\ngetCameraManagerFn(): void {", shape=box];
  }
  subgraph "cluster_43" {
    label="getModeManagerFn (function) [L1049-L1057]";
    node_43_1 [label="id: 1\ngetModeManagerFn(): void {
try {", shape=box];
  }
  subgraph "cluster_44" {
    label="getSupportedCamerasFn (function) [L1062-L1070]";
    node_44_1 [label="id: 1\ntry {", shape=box];
  }
  subgraph "cluster_45" {
    label="getSupportedModeFn (function) [L1072-L1080]";
    node_45_1 [label="id: 1\ngetSupportedModeFn(cameraIndex: number): void {", shape=box];
  }
  subgraph "cluster_46" {
    label="getSupportedOutputCapabilityFn (function) [L1085-L1087]";
    node_46_1 [label="id: 1\nasync getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {
    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);", shape=box];
  }
  subgraph "cluster_47" {
    label="createPreviewOutputFn (function) [L1092-L1104]";
    node_47_1 [label="id: 1\ntry {
let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;", shape=box];
  }
  subgraph "cluster_48" {
    label="createPhotoOutputFn (function) [L1109-L1123]";
    node_48_1 [label="id: 1\nLogger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);
switch (this.captureMode) {", shape=box];
  }
  subgraph "cluster_49" {
    label="createCameraInputFn (function) [L1128-L1135]";
    node_49_1 [label="id: 1\ncreateCameraInputFn(cameraDevice: camera.CameraDevice): void {
Logger.info(TAG, 'createCameraInputFn is called.');", shape=box];
  }
  subgraph "cluster_50" {
    label="cameraInputOpenFn (function) [L1140-L1148]";
    node_50_1 [label="id: 1\nasync cameraInputOpenFn(): Promise<void> {
try {", shape=box];
  }
  subgraph "cluster_51" {
    label="configMoonCaptureBoost (function) [L1153-L1176]";
    node_51_1 [label="id: 1\ntry {
this.isMoonCaptureBoostSupported = this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);", shape=box];
  }
  subgraph "cluster_52" {
    label="photoSessionFlowFn (function) [L1181-L1266]";
    node_52_1 [label="id: 1\nasync photoSessionFlowFn(): Promise<void> {
try {", shape=box];
  }
  subgraph "cluster_53" {
    label="videoSessionFlowFn (function) [L1271-L1356]";
    node_53_1 [label="id: 1\nasync videoSessionFlowFn(): Promise<void> {", shape=box];
  }
  subgraph "cluster_54" {
    label="portraitSessionFlowFn (function) [L1358-L1415]";
    node_54_1 [label="id: 1\nasync portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {
    try {", shape=box];
  }
  subgraph "cluster_55" {
    label="nightSessionFlowFn (function) [L1417-L1471]";
    node_55_1 [label="id: 1\nasync nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {", shape=box];
  }
  subgraph "cluster_56" {
    label="macroPhotoSessionFlowFn (function) [L1473-L1532]";
    node_56_1 [label="id: 1\nLogger.info(TAG, `macroPhotoSessionFlowFn enter`);
try {", shape=box];
  }
  subgraph "cluster_57" {
    label="setColorSpace (function) [L1534-L1549]";
    node_57_1 [label="id: 1\ntry {
let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();
Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);
let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);", shape=box];
  }
  subgraph "cluster_58" {
    label="setPortraitEffect (function) [L1551-L1559]";
    node_58_1 [label="id: 1\nsetPortraitEffect(): void {
try {", shape=box];
  }
  subgraph "cluster_59" {
    label="getPortraitEffect (function) [L1561-L1569]";
    node_59_1 [label="id: 1\ngetPortraitEffect(): void {
try {", shape=box];
  }
  subgraph "cluster_60" {
    label="setMoonCaptureBoostEnable (function) [L1571-L1586]";
    node_60_1 [label="id: 1\nLogger.info(TAG, 'moonCaptureBoostEnable is called.');
let session: camera.CaptureSession = this.getSession();
if (!session) {", shape=box];
  }
  subgraph "cluster_61" {
    label="setColorEffect (function) [L1588-L1607]";
    node_61_1 [label="id: 1\nLogger.info(TAG, 'setColorEffect is called.');
if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {", shape=box];
  }
  subgraph "cluster_62" {
    label="getColorEffect (function) [L1609-L1623]";
    node_62_1 [label="id: 1\nLogger.info(TAG, 'getColorEffect is called.');
let colorEffect: camera.ColorEffectType | undefined = undefined;
let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_63" {
    label="getSupportedColorEffects (function) [L1625-L1635]";
    node_63_1 [label="id: 1\nLogger.info(TAG, 'getSupportedColorEffects is called.');
let res: Array<camera.ColorEffectType> | undefined = [];
let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();
if (!session) {", shape=box];
  }
  subgraph "cluster_64" {
    label="photoOutPutCallBack (function) [L1640-L1693]";
    node_64_1 [label="id: 1\nphotoOutPutCallBack(): void {
this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => { Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`); });", shape=box];
  }
  subgraph "cluster_65" {
    label="saveDeferredPhoto (function) [L1698-L1714]";
    node_65_1 [label="id: 1\nasync saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {
try {", shape=box];
  }
  subgraph "cluster_66" {
    label="previewOutputCallBack (function) [L1719-L1730]";
    node_66_1 [label="id: 1\npreviewOutputCallBack(): void {", shape=box];
  }
  subgraph "cluster_67" {
    label="onVideoOutputChange (function) [L1735-L1745]";
    node_67_1 [label="id: 1\nonVideoOutputChange(): void {", shape=box];
  }
  subgraph "cluster_68" {
    label="onCameraStatusChange (function) [L1750-L1755]";
    node_68_1 [label="id: 1\nLogger.info(TAG, 'onCameraStatusChange is called');
this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {", shape=box];
  }
  subgraph "cluster_69" {
    label="onCameraInputChange (function) [L1760-L1768]";
    node_69_1 [label="id: 1\nonCameraInputChange(): void {", shape=box];
  }
  subgraph "cluster_70" {
    label="onFocusStateChange (function) [L1773-L1781]";
    node_70_1 [label="id: 1\nonFocusStateChange(): void {
    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_71" {
    label="onAbilityChange (function) [L1783-L1793]";
    node_71_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_72" {
    label="onCaptureSessionErrorChange (function) [L1797-L1805]";
    node_72_1 [label="id: 1\nlet session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();", shape=box];
  }
  subgraph "cluster_73" {
    label="setCaptureMode (function) [L1808-L1810]";
    node_73_1 [label="id: 1\nsetCaptureMode(mode: number): void {
    this.captureMode = mode;", shape=box];
  }
  subgraph "cluster_74" {
    label="getCaptureMode (function) [L1812-L1814]";
    node_74_1 [label="id: 1\ngetCaptureMode(): number {
    return this.captureMode;", shape=box];
  }
  subgraph "cluster_75" {
    label="isDeferredImageDeliverySupported (function) [L1819-L1823]";
    node_75_1 [label="id: 1\nlet res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);
Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);", shape=box];
  }
  subgraph "cluster_76" {
    label="isDeferredImageDeliveryEnabled (function) [L1828-L1831]";
    node_76_1 [label="id: 1\nlet res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);
Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);", shape=box];
  }
  subgraph "cluster_77" {
    label="deferImageDeliveryFor (function) [L1836-L1839]";
    node_77_1 [label="id: 1\ndeferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {
    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);", shape=box];
  }
  subgraph "cluster_78" {
    label="testAbilityFunction (function) [L1841-L1857]";
    node_78_1 [label="id: 1\nif (this.cameraMode === CameraMode.PORTRAIT)", shape=box];
  }
  subgraph "cluster_79" {
    label="logPortraitSession (function) [L1859-L1873]";
    node_79_1 [label="id: 1\nlet list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();
list.forEach((conflictFunctions) => { this.logPortraitPhotoConflictFunctions(conflictFunctions); });", shape=box];
  }
  subgraph "cluster_80" {
    label="logVideoSession (function) [L1875-L1892]";
    node_80_1 [label="id: 1\nlogVideoSession(session: camera.VideoSession): void {
  let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();", shape=box];
  }
  subgraph "cluster_81" {
    label="logPhotoSession (function) [L1894-L1910]";
    node_81_1 [label="id: 1\nlogPhotoSession(session: camera.PhotoSession): void {
    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();
list.forEach((conflictFunctions) => {
      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();
      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);
      let isMacroSupported: bool = conflictFunctions.isMacroSupported();
      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);
    });", shape=box];
  }
  subgraph "cluster_82" {
    label="logPortraitPhotoFunctions (function) [L1913-L1947]";
    node_82_1 [label="id: 1\nlogPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {
let hasFlash: bool = functions.hasFlash();
Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);
let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);
Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);
let isLcdFlashSupported: bool = functions.isLcdFlashSupported();
Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);
let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);
Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);
let exposureBiasRange: Array<number> = functions.getExposureBiasRange();
Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);
let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);
Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);
let zoomRatioRange: Array<number> = functions.getZoomRatioRange();
Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);
let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);
let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);
let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);
let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);
let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);
let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();
Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);
let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();", shape=box];
  }
  subgraph "cluster_83" {
    label="logVideoFunctions (function) [L1949-L1976]";
    node_83_1 [label="id: 1\nlogVideoFunctions(functions: camera.VideoFunctions): void {
let hasFlash: bool = functions.hasFlash();
Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);", shape=box];
  }
  subgraph "cluster_84" {
    label="logPhotoFunctions (function) [L1978-L2011]";
    node_84_1 [label="id: 1\nlogPhotoFunctions(functions: camera.PhotoFunctions): void {
let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);", shape=box];
  }
  subgraph "cluster_85" {
    label="logPortraitPhotoConflictFunctions (function) [L2013-L2027]";
    node_85_1 [label="id: 1\nlet zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();
Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);", shape=box];
  }
  subgraph "cluster_86" {
    label="logCameraOutputCapabilities (function) [L2029-L2036]";
    node_86_1 [label="id: 1\nlet previewProfiles: Array<camera.Profile> = coc.previewProfiles;
Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);
let photoProfiles: Array<camera.Profile> = coc.photoProfiles;
Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);
let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;
Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);", shape=box];
  }
  }
  subgraph "cluster_87" {
    label="mockInterface (function) [L56-L68]";
    node_87_1 [label="id: 1\nfunction mockInterface(): void {", shape=box];
  }
  }
}