digraph "75.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L114]";
    node_1_1 [label="id: 1\nimport { Action } from './Action';
import { ActionBarProp } from '../common/ActionBarProp';", shape=box];
  subgraph "cluster_2" {
    label="PhotoGridBarModel (class) [L22-L114]";
    node_2_1 [label="id: 1\nexport class PhotoGridBarModel {
private albumId: string = '';", shape=box];
  subgraph "cluster_3" {
    label="setAlbumId (function) [L25-L27]";
    node_3_1 [label="id: 1\nsetAlbumId(albumId: string): void {
    this.albumId = albumId;", shape=box];
  }
  subgraph "cluster_4" {
    label="createActionBar (function) [L29-L39]";
    node_4_1 [label="id: 1\ncreateActionBar(title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {
let actionBarProp: ActionBarProp = new ActionBarProp();
let isHorizontal = screenManager.isHorizontal()", shape=box];
  }
  subgraph "cluster_5" {
    label="updateActionBar (function) [L41-L49]";
    node_5_1 [label="id: 1\nlet isHorizontal = screenManager.isHorizontal()
if (isHorizontal) {", shape=box];
  }
  subgraph "cluster_6" {
    label="updateHorizontalActionBar (function) [L51-L70]";
    node_6_1 [label="id: 1\nactionBarProp
  .setLeftAction(Action.BACK)
  .setTitle(title)
  .setMode(ActionBarMode.STANDARD_MODE);
let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);", shape=box];
  }
  subgraph "cluster_7" {
    label="updateVerticalActionBar (function) [L72-L94]";
    node_7_1 [label="id: 1\nlet menuList: Action[] = [];", shape=box];
  }
  subgraph "cluster_8" {
    label="getMenuList (function) [L96-L113]";
    node_8_1 [label="id: 1\ngetMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {
    let menuList: Action[] = [];", shape=box];
  }
  }
  }
}