digraph "29.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L176]";
    node_1_1 [label="id: 1\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';
import { AsyncCallback } from './AsyncCallback';", shape=box];
  subgraph "cluster_2" {
    label="ProcessMenuOperation (class) [L39-L176]";
    node_2_1 [label="id: 1\nexport class ProcessMenuOperation implements MenuOperation, AsyncCallback<String[]>, MenuOperationCallback {", shape=box];
  subgraph "cluster_3" {
    label="constructor (function) [L64-L67]";
    node_3_1 [label="id: 1\nconstructor(menuContext: MenuContext) {
    this.menuContext = menuContext;", shape=box];
  }
  subgraph "cluster_4" {
    label="doAction (function) [L69-L70]";
    node_4_1 [label="id: 1\ndoAction(): void {
}", shape=box];
  }
  subgraph "cluster_5" {
    label="callback (function) [L73-L75]";
    node_5_1 [label="id: 1\ncallback(uris: string[]): void {
    this.callbackBindImpl(uris);", shape=box];
  }
  subgraph "cluster_6" {
    label="callbackBindImpl (function) [L77-L78]";
    node_6_1 [label="id: 1\nprotected callbackBindImpl(uris: string[]): void {
}", shape=box];
  }
  subgraph "cluster_7" {
    label="onCompleted (function) [L80-L86]";
    node_7_1 [label="id: 1\nLog.info(TAG, 'onCompleted ' + this.isPause);
this.successBatch++;", shape=box];
  }
  subgraph "cluster_8" {
    label="onError (function) [L88-L92]";
    node_8_1 [label="id: 1\nonError(): void {
    Log.error(TAG, 'Operate the ' + this.currentBatch + ' batch data error, total ' + this.totalBatches + ' batches');", shape=box];
  }
  subgraph "cluster_9" {
    label="processOperation (function) [L95-L108]";
    node_9_1 [label="id: 1\nprocessOperation(): void {
    Log.info(TAG, 'processOperation start');
    let length = this.items.length;
    Log.info(TAG, 'selected count: ' + this.count + ', uris length: ' + length);
    this.totalBatches = Math.floor(length / this.BATCH_SIZE) + (((length % this.BATCH_SIZE) ? 1 : 0) as number);
    Log.info(TAG, 'The count to be operate is ' + length + ', operate in ' + this.totalBatches + ' batches');", shape=box];
  }
  subgraph "cluster_10" {
    label="cyclicOperation (function) [L111-L124]";
    node_10_1 [label="id: 1\ncyclicOperation(): void {
Log.info(TAG, 'cyclicOperation');", shape=box];
  }
  subgraph "cluster_11" {
    label="requestOneBatchOperation (function) [L127-L128]";
    node_11_1 [label="id: 1\nrequestOneBatchOperation(): void { }", shape=box];
  }
  subgraph "cluster_12" {
    label="onProcessDone (function) [L130-L141]";
    node_12_1 [label="id: 1\nthis.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [100]);
this.findSameOperation = FindSameOperation.NONE;", shape=box];
  }
  subgraph "cluster_13" {
    label="onOperateCancelled (function) [L144-L146]";
    node_13_1 [label="id: 1\nonOperateCancelled(): void {
    this.onOperateCancelledBindImpl();", shape=box];
  }
  subgraph "cluster_14" {
    label="onOperateCancelledBindImpl (function) [L148-L152]";
    node_14_1 [label="id: 1\nprotected onOperateCancelledBindImpl(): void {
    Log.info(TAG, 'Operate Cancel');
    this.isCancelled = true;
    this.onProcessDone();", shape=box];
  }
  subgraph "cluster_15" {
    label="onOperatePause (function) [L155-L158]";
    node_15_1 [label="id: 1\nonOperatePause(): void {
    Log.info(TAG, 'Operate Pause');", shape=box];
  }
  subgraph "cluster_16" {
    label="getExpectProgress (function) [L161-L166]";
    node_16_1 [label="id: 1\ngetExpectProgress(): number {
Log.info(TAG, 'getExpectProgress');", shape=box];
  }
  subgraph "cluster_17" {
    label="setFindSameOperation (function) [L168-L170]";
    node_17_1 [label="id: 1\nsetFindSameOperation(newOperation: number): void {
    this.setFindSameOperationBindImpl(newOperation);", shape=box];
  }
  subgraph "cluster_18" {
    label="setFindSameOperationBindImpl (function) [L172-L175]";
    node_18_1 [label="id: 1\nprotected setFindSameOperationBindImpl(newOperation: number): void {
Log.info(TAG, 'setFindSameOperation ' + newOperation);", shape=box];
  }
  }
  }
}