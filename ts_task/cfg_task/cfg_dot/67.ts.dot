digraph "67.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L540]";
    node_1_1 [label="id: 1\nimport fileIO from '@ohos.fileio';
import { stashOrGetObject } from '../utils/SingleInstanceUtils';", shape=box];
  subgraph "cluster_2" {
    label="UserFileModelItem (class) [L29-L32]";
    node_2_1 [label="id: 1\nexport class UserFileModelItem {", shape=box];
  }
  subgraph "cluster_3" {
    label="UserFileModel (class) [L34-L538]";
    node_3_1 [label="id: 1\nclass UserFileModel {
  private userFileMgr: photoAccessHelper.PhotoAccessHelper = undefined;", shape=box];
  subgraph "cluster_4" {
    label="constructor (function) [L37-L38]";
    node_4_1 [label="id: 1\nconstructor() {", shape=box];
  }
  subgraph "cluster_5" {
    label="onCreate (function) [L40-L44]";
    node_5_1 [label="id: 1\nonCreate(context): void {
if (this.userFileMgr == undefined) {", shape=box];
  }
  subgraph "cluster_6" {
    label="getUserFileMgr (function) [L46-L48]";
    node_6_1 [label="id: 1\ngetUserFileMgr(): photoAccessHelper.PhotoAccessHelper {
    return this.userFileMgr;", shape=box];
  }
  subgraph "cluster_7" {
    label="createOne (function) [L50-L56]";
    node_7_1 [label="id: 1\nasync createOne(displayName: string, albumUri: string): Promise<photoAccessHelper.PhotoAsset> {
    Log.info(TAG, 'createOne displayName:' + displayName + ' albumUri: ' + albumUri);", shape=box];
  }
  subgraph "cluster_8" {
    label="getUserAlbumItemByUri (function) [L58-L82]";
    node_8_1 [label="id: 1\nasync getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {
    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;
    let album: photoAccessHelper.Album = null;", shape=box];
  }
  subgraph "cluster_9" {
    label="copyOne (function) [L84-L102]";
    node_9_1 [label="id: 1\nasync copyOne(source: photoAccessHelper.PhotoAsset, target: photoAccessHelper.PhotoAsset): Promise<void> {
  Log.info(TAG, 'copy start: src:' + source.uri + ' target: ' + target.uri);
  let fd: Number = await this.openAsset('R', source);", shape=box];
  }
  subgraph "cluster_10" {
    label="deleteOne (function) [L104-L111]";
    node_10_1 [label="id: 1\nasync deleteOne(uri: string): Promise<void> {
Log.debug(TAG, 'deleteAsset uri: ' + uri);", shape=box];
  }
  subgraph "cluster_11" {
    label="recover (function) [L113-L132]";
    node_11_1 [label="id: 1\nasync recover(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {
    let albumFetchResult = null;
try {", shape=box];
  }
  subgraph "cluster_12" {
    label="permanentDelete (function) [L134-L152]";
    node_12_1 [label="id: 1\nasync permanentDelete(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {
    let albumFetchResult = null;
try {
      Log.debug(TAG, 'permanentDelete');
      albumFetchResult = await this.userFileMgr.getAlbums(photoAccessHelper.AlbumType.SYSTEM, photoAccessHelper.AlbumSubtype.TRASH);", shape=box];
  }
  subgraph "cluster_13" {
    label="createAlbum (function) [L154-L164]";
    node_13_1 [label="id: 1\nasync createAlbum(albumName: string): Promise<SimpleAlbumDataItem> {
let newAlbum: SimpleAlbumDataItem = undefined;", shape=box];
  }
  subgraph "cluster_14" {
    label="deleteAlbum (function) [L166-L193]";
    node_14_1 [label="id: 1\nasync deleteAlbum(albumName: string): Promise<void> {
let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;", shape=box];
  }
  subgraph "cluster_15" {
    label="deleteAll (function) [L195-L216]";
    node_15_1 [label="id: 1\nasync deleteAll(fetchOption: photoAccessHelper.FetchOptions): Promise<void> {
  Log.info(TAG, 'deleteAll');
  let fetchFileResult: photoAccessHelper.FetchResult = null;", shape=box];
  }
  subgraph "cluster_16" {
    label="getAllMediaItems (function) [L218-L241]";
    node_16_1 [label="id: 1\nasync getAllMediaItems(): Promise<photoAccessHelper.PhotoAsset[]> {
let fileAssets: photoAccessHelper.PhotoAsset[] = [];", shape=box];
  }
  subgraph "cluster_17" {
    label="getAllMovingPhotoItems (function) [L243-L267]";
    node_17_1 [label="id: 1\nasync getAllMovingPhotoItems(): Promise<photoAccessHelper.PhotoAsset[]> {
  let fileAssets: photoAccessHelper.PhotoAsset[] = [];
  let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;
try {", shape=box];
  }
  subgraph "cluster_18" {
    label="getAllMediaItemsByType (function) [L269-L310]";
    node_18_1 [label="id: 1\nasync getAllMediaItemsByType(type: number, subType: number, albumFetchOption, fileFetchOption): Promise<photoAccessHelper.PhotoAsset[]> {
let fileAssets: photoAccessHelper.PhotoAsset[] = [];
let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;", shape=box];
  }
  subgraph "cluster_19" {
    label="getMediaItemByUriFromTrash (function) [L312-L351]";
    node_19_1 [label="id: 1\nasync getMediaItemByUriFromTrash(uri: string): Promise<photoAccessHelper.PhotoAsset> {
    Log.info(TAG, 'getMediaItemByUriFromTrash');
    Log.info(TAG, 'uri:' + uri);
    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;
    let fileAsset: photoAccessHelper.PhotoAsset = null;", shape=box];
  }
  subgraph "cluster_20" {
    label="getMediaItemByUri (function) [L353-L378]";
    node_20_1 [label="id: 1\nasync getMediaItemByUri(uri: string): Promise<photoAccessHelper.PhotoAsset> {
    Log.info(TAG, 'getMediaItemByUri');
    Log.info(TAG, 'uri:' + uri);
    let predicates = new dataSharePredicates.DataSharePredicates();
    predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uri);
    let fetchOptions = {
      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,
      predicates: predicates
    };
    let fileAsset: photoAccessHelper.PhotoAsset = null;
    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null
    try {", shape=box];
    node_20_4 [label="id: 4\nif (fetchResult != null) {
        fetchResult.close();
      }
return fileAsset;", shape=box];
  }
  subgraph "cluster_21" {
    label="getMediaItemCountsByDisplayName (function) [L380-L403]";
    node_21_1 [label="id: 1\nasync getMediaItemCountsByDisplayName(displayName: string): Promise<number> {
Log.info(TAG, 'getMediaItemCountsByDisplayName');", shape=box];
  }
  subgraph "cluster_22" {
    label="getUserAlbumCountByName (function) [L405-L433]";
    node_22_1 [label="id: 1\nasync getUserAlbumCountByName(albumName: string): Promise<number> {
    Log.info(TAG, 'getUserAlbumCountByName');
    Log.info(TAG, 'album_nameï¼š' + albumName);
    let count = 0;
    let systemAlbums = await getSystemAlbumDisplayName();
if (systemAlbums.indexOf(albumName) >= 0) {
      return 1;
    }", shape=box];
  }
  subgraph "cluster_23" {
    label="getActivePeers (function) [L435-L447]";
    node_23_1 [label="id: 1\nasync getActivePeers(): Promise<photoAccessHelper.PeerInfo[]> {
  Log.info(TAG, 'getActivePeers');
  let peers: photoAccessHelper.PeerInfo[] = [];
try {", shape=box];
  }
  subgraph "cluster_24" {
    label="getUserAlbumByName (function) [L449-L475]";
    node_24_1 [label="id: 1\nasync getUserAlbumByName(albumName: string): Promise<photoAccessHelper.Album> {
    Log.info(TAG, 'getUserAlbumByName');
    Log.info(TAG, 'album_name' + albumName);
    let fetchResult: photoAccessHelper.FetchResult = null;
    let album = null;", shape=box];
  }
  subgraph "cluster_25" {
    label="getAlbums (function) [L477-L488]";
    node_25_1 [label="id: 1\nasync getAlbums(fetchOption: photoAccessHelper.FetchOptions): Promise<photoAccessHelper.Album[]> {
Log.info(TAG, 'getAlbums');
let albums: photoAccessHelper.Album[] = [];", shape=box];
  }
  subgraph "cluster_26" {
    label="openAsset (function) [L490-L498]";
    node_26_1 [label="id: 1\nLog.debug(TAG, 'openAsset start');
let fd: number = await fileAsset.open(mode);", shape=box];
  }
  subgraph "cluster_27" {
    label="closeAsset (function) [L500-L503]";
    node_27_1 [label="id: 1\nasync closeAsset(fd: number, fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {
Log.debug(TAG, 'closeAsset start');", shape=box];
  }
  subgraph "cluster_28" {
    label="addPhotoToAlbumByUserFileMgr (function) [L505-L537]";
    node_28_1 [label="id: 1\nasync addPhotoToAlbumByUserFileMgr(albumUri: string, uri: string): Promise<void> {
Log.info(TAG, 'addPhotoAssetsDemoPromise');
    Log.info(TAG, 'albumUri' + albumUri);
    Log.info(TAG, 'mediaItem.uri' + uri);", shape=box];
  }
  }
  }
}