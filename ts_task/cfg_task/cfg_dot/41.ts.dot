digraph "41.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L190]";
    node_1_1 [label="id: 1\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';
import { Log } from '../utils/Log';", shape=box];
  subgraph "cluster_2" {
    label="GroupDataImpl (class) [L32-L190]";
    node_2_1 [label="id: 1\nexport class GroupDataImpl {", shape=box];
  subgraph "cluster_3" {
    label="setSelectType (function) [L40-L42]";
    node_3_1 [label="id: 1\nsetSelectType(selectType: number): void {
    this.selectType = selectType;", shape=box];
  }
  subgraph "cluster_4" {
    label="setAlbumId (function) [L44-L47]";
    node_4_1 [label="id: 1\nsetAlbumId(id: string): void {
    Log.info(TAG, 'setAlbumId: ' + id);", shape=box];
  }
  subgraph "cluster_5" {
    label="setDeviceId (function) [L49-L52]";
    node_5_1 [label="id: 1\nsetDeviceId(id: string): void {
    Log.info(TAG, 'setDeviceId: ' + id);", shape=box];
  }
  subgraph "cluster_6" {
    label="setAlbumType (function) [L54-L57]";
    node_6_1 [label="id: 1\nsetAlbumType(albumType: number): void {
Log.info(TAG, 'setAlbumType: ' + albumType);", shape=box];
  }
  subgraph "cluster_7" {
    label="setAlbumSubtype (function) [L59-L62]";
    node_7_1 [label="id: 1\nsetAlbumSubtype(albumSubType: number): void {
    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);", shape=box];
  }
  subgraph "cluster_8" {
    label="setAlbumName (function) [L64-L67]";
    node_8_1 [label="id: 1\nsetAlbumName(name: string): void {
    Log.info(TAG, 'setAlbumName: ' + name);", shape=box];
  }
  subgraph "cluster_9" {
    label="reloadGroupItemData (function) [L69-L75]";
    node_9_1 [label="id: 1\nasync reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {
if (isGrid) {", shape=box];
  }
  subgraph "cluster_10" {
    label="reloadBrowserGroupItemData (function) [L77-L115]";
    node_10_1 [label="id: 1\nasync reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {
Log.info(TAG, 'reloadBrowserGroupItemData');
let groupDataItem: UserFileDataItem[] = [];
let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);", shape=box];
  }
  subgraph "cluster_11" {
    label="reloadGridGroupItemData (function) [L117-L158]";
    node_11_1 [label="id: 1\nasync reloadGridGroupItemData(): Promise<UserFileDataItem[]> {
Log.info(TAG, 'reloadGridGroupItemData');
let groupDataItem: UserFileDataItem[] = [];
let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);", shape=box];
  }
  subgraph "cluster_12" {
    label="getMediaItemFileAssets (function) [L160-L180]";
    node_12_1 [label="id: 1\nlet predicates = new dataSharePredicates.DataSharePredicates();
predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)
let fetchOption = {
  fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,
  predicates: predicates
};
Log.info(TAG, 'albumName:' + albumName);", shape=box];
  }
  subgraph "cluster_13" {
    label="getCount (function) [L182-L189]";
    node_13_1 [label="id: 1\nlet contentWidth = screenManager.getWinWidth();
let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;
let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));
let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();
let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;
return columns * rows;", shape=box];
  }
  }
  }
}