digraph "72.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L100]";
    node_1_1 [label="id: 1\nimport { Action } from './Action'
import { ActionBarProp } from '../common/ActionBarProp'", shape=box];
  subgraph "cluster_2" {
    label="AlbumBarModel (class) [L21-L100]";
  subgraph "cluster_3" {
    label="createActionBar (function) [L22-L33]";
    node_3_1 [label="id: 1\ncreateActionBar(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number,
                  isDisableRename: boolean, isDisableDelete: boolean): ActionBarProp {
let actionBarProp: ActionBarProp = new ActionBarProp();
let isHorizontal = screenManager.isHorizontal();", shape=box];
  }
  subgraph "cluster_4" {
    label="updateActionBar (function) [L35-L44]";
    node_4_1 [label="id: 1\nlet isHorizontal = screenManager.isHorizontal();
if (isHorizontal) {", shape=box];
  }
  subgraph "cluster_5" {
    label="updateHorizontalActionBar (function) [L46-L67]";
    node_5_1 [label="id: 1\nlet isSidebar: boolean = screenManager.isSidebar();
actionBarProp
  .setHasTabBar(isSidebar)
  .setTitle($r('app.string.tab_albums'))
  .setIsHeadTitle(true);
let menuList: Action[] = this.getMenuList(isAlbumSetSelectedMode, selectedAlbumsCount, isDisableRename, isDisableDelete);
if (isAlbumSetSelectedMode) {", shape=box];
  }
  subgraph "cluster_6" {
    label="updateVerticalActionBar (function) [L69-L90]";
    node_6_1 [label="id: 1\nlet menuList: Action[] = [];
menuList.push(Action.NEW);", shape=box];
  }
  subgraph "cluster_7" {
    label="getMenuList (function) [L92-L99]";
    node_7_1 [label="id: 1\ngetMenuList(isAlbumSetSelectedMode: boolean, selectedAlbumsCount: number, isDisableRename: boolean, isDisableDelete: boolean): Action[] {
    let menuList: Action[] = [];
if (isAlbumSetSelectedMode) {", shape=box];
  }
  }
  }
}