digraph "44.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L677]";
    node_1_1 [label="id: 1\nimport Matrix4 from '@ohos.matrix4';
import { UserFileDataItem } from '../base/UserFileDataItem';", shape=box];
  subgraph "cluster_2" {
    label="EventPipeline (class) [L36-L677]";
    node_2_1 [label="id: 1\nexport class EventPipeline {
// last offset
private lastOffset: number[] = [0, 0];

// offset
private offset: number[] = [0, 0];

// default scale
private defaultScale = 1.0;

// last scale
private lastScale = 1.0;

// scale
private scale = 1.0;

// the zoom center point is a percentage position relative to the control, not an absolute position
private center: number[] = [Constants.CENTER_DEFAULT, Constants.CENTER_DEFAULT];

// leftmost zoom Center，(1 - leftMost)is rightmost zoom Center
private leftMost = 0.0;

// top zoom center，(1 - topMost)is bottom zoom center
private topMost = 0.0;

// double tap scale
private doubleTapScale = 1.0;

// max scale
private maxScale = 1.0;

// has reached the far left
private hasReachLeft = true;

// has reached the far right
private hasReachRight = true;

// has reached the far top
private hasReachTop = true;

// has reached the far bottom
private hasReachBottom = true;

// Broadcast
private broadCast: Broadcast;

// item
private item: UserFileDataItem;

// timeStamp
private timeStamp: string;

// width
private width: number;

// height
private height: number;

// Large display control width
private componentWidth: number = vp2px(screenManager.getWinWidth());

// Large display control height
private componentHeight = vp2px(screenManager.getWinHeight());

// is now in animation
private isInAnimation = false;

// pull down to return flag to prevent multiple triggers
private isExiting = false;

private updateMatrix: Function;", shape=box];
  subgraph "cluster_3" {
    label="constructor (function) [L109-L117]";
    node_3_1 [label="id: 1\nconstructor(broadCastParam: Broadcast, item: UserFileDataItem, timeStamp: string, updateMatrix: Function) {
    this.broadCast = broadCastParam;", shape=box];
  }
  subgraph "cluster_4" {
    label="onDataChanged (function) [L119-L124]";
    node_4_1 [label="id: 1\nonDataChanged(item: UserFileDataItem): void {
    this.item = item;", shape=box];
  }
  subgraph "cluster_5" {
    label="setDefaultScale (function) [L126-L129]";
    node_5_1 [label="id: 1\nsetDefaultScale(scale): void {
    this.defaultScale = scale;", shape=box];
  }
  subgraph "cluster_6" {
    label="onComponentSizeChanged (function) [L131-L133]";
    node_6_1 [label="id: 1\nonComponentSizeChanged(): void {
    this.evaluateScales();", shape=box];
  }
  subgraph "cluster_7" {
    label="onTouch (function) [L135-L150]";
    node_7_1 [label="id: 1\nonTouch(event: TouchEvent): void {
Log.debug(TAG, 'onTouch trigger: ' + event.type + ', ' + this.isInAnimation + ', ' + this.isExiting);", shape=box];
  }
  subgraph "cluster_8" {
    label="emitDirectionChange (function) [L152-L188]";
    node_8_1 [label="id: 1\nprivate emitDirectionChange(): void {", shape=box];
  }
  subgraph "cluster_9" {
    label="evaluateOffset (function) [L190-L198]";
    node_9_1 [label="id: 1\nLog.info(TAG, 'evaluateOffset lastOffset: ' + this.lastOffset + ', offset: ' + this.offset);
let centerX = (this.center[0] - Constants.CENTER_DEFAULT) * this.componentWidth * (this.defaultScale - this.scale) * this.lastScale;", shape=box];
  }
  subgraph "cluster_10" {
    label="emitTouchEvent (function) [L200-L238]";
    node_10_1 [label="id: 1\nlet offset: number[];
let scale = this.lastScale * this.scale;", shape=box];
  }
  subgraph "cluster_11" {
    label="evaluateScales (function) [L240-L273]";
    node_11_1 [label="id: 1\nprivate evaluateScales(): void {", shape=box];
  }
  subgraph "cluster_12" {
    label="evaluateCompBounds (function) [L275-L283]";
    node_12_1 [label="id: 1\nlet scale = this.lastScale * this.scale;
let offset = this.evaluateOffset();", shape=box];
  }
  subgraph "cluster_13" {
    label="evaluateImgDisplaySize (function) [L286-L296]";
    node_13_1 [label="id: 1\nprivate evaluateImgDisplaySize(): number[] {
let screenScale = 1;
let widthScale = this.componentWidth / this.item.imgWidth;
let heightScale = this.componentHeight / this.item.imgHeight;
screenScale = widthScale > heightScale ? heightScale : widthScale;", shape=box];
  }
  subgraph "cluster_14" {
    label="evaluateImgDisplayBounds (function) [L299-L321]";
    node_14_1 [label="id: 1\nlet scale = this.lastScale * this.scale;
let leftTop = this.evaluateCompBounds();
let imgDisplaySize: number[] = this.evaluateImgDisplaySize();
let imgDisplayWidth = imgDisplaySize[0];
let imgDisplayHeight = imgDisplaySize[1];
let imgLeftBound = 0;
let imgTopBound = 0;
if (this.width / this.height > this.componentWidth / this.componentHeight) {", shape=box];
  }
  subgraph "cluster_15" {
    label="evaluateBounds (function) [L325-L333]";
    node_15_1 [label="id: 1\nlet imgDisplaySize: number[] = this.evaluateImgDisplaySize();
let imgDisplayWidth = imgDisplaySize[0];
let imgDisplayBounds = this.evaluateImgDisplayBounds();
let imgLeftBound = imgDisplayBounds[0];", shape=box];
  }
  subgraph "cluster_16" {
    label="evaluateOffsetRange (function) [L341-L353]";
    node_16_1 [label="id: 1\nprivate evaluateOffsetRange(scale: number): number[] {
let result: number[] = [0, 0, 0, 0];", shape=box];
  }
  subgraph "cluster_17" {
    label="emitPullDownToBackEvent (function) [L356-L364]";
    node_17_1 [label="id: 1\nprivate emitPullDownToBackEvent(): void {
  Log.debug(TAG, 'emitPullDownToBackEvent');
if (this.isExiting) {", shape=box];
  }
  subgraph "cluster_18" {
    label="emitPullDownCancelEvent (function) [L366-L369]";
    node_18_1 [label="id: 1\nprivate emitPullDownCancelEvent(): void {
  Log.debug(TAG, 'emitPullDownCancelEvent');
  this.broadCast.emit(Constants.PULL_DOWN_CANCEL, []);
}", shape=box];
  }
  subgraph "cluster_19" {
    label="onMoveStart (function) [L371-L387]";
    node_19_1 [label="id: 1\nonMoveStart(offsetX: number, offsetY: number): void {", shape=box];
  }
  subgraph "cluster_20" {
    label="onMove (function) [L395-L424]";
    node_20_1 [label="id: 1\nonMove(offsetX: number, offsetY: number): void {", shape=box];
  }
  subgraph "cluster_21" {
    label="onMoveEnd (function) [L426-L445]";
    node_21_1 [label="id: 1\nonMoveEnd(offsetX, offsetY): void {", shape=box];
  }
  subgraph "cluster_22" {
    label="onScaleStart (function) [L447-L457]";
    node_22_1 [label="id: 1\nLog.info(TAG, 'onScaleStart: ' + this.isInAnimation + ', ' + this.isExiting);
if (this.isInAnimation || this.isExiting) {", shape=box];
  }
  subgraph "cluster_23" {
    label="evaluateCenter (function) [L466-L503]";
    node_23_1 [label="id: 1\nprivate evaluateCenter(centerX: number, centerY: number): number[] {
let scale = this.lastScale * this.scale;
let leftTop = this.evaluateCompBounds();", shape=box];
  }
  subgraph "cluster_24" {
    label="onScale (function) [L505-L519]";
    node_24_1 [label="id: 1\nLog.debug(TAG, 'onScale: ' + this.isInAnimation + ', ' + this.isExiting + ', scale: ' + scale);", shape=box];
  }
  subgraph "cluster_25" {
    label="onScaleEnd (function) [L521-L545]";
    node_25_1 [label="id: 1\nLog.info(TAG, 'onScaleEnd: ' + this.isInAnimation + ', ' + this.isExiting);", shape=box];
  }
  subgraph "cluster_26" {
    label="evaluateAnimeMatrix (function) [L548-L585]";
    node_26_1 [label="id: 1\nlet offset: number[] = [this.lastOffset[0] + this.offset[0] + (center[0] - Constants.CENTER_DEFAULT) * this.componentWidth * (this.defaultScale - scale / this.lastScale) * this.lastScale, this.lastOffset[1] + this.offset[1] + (center[1] - Constants.CENTER_DEFAULT) * this.componentHeight * (this.defaultScale - scale / this.lastScale) * this.lastScale];", shape=box];
  }
  subgraph "cluster_27" {
    label="onDoubleTap (function) [L596-L628]";
    node_27_1 [label="id: 1\nif (this.isInAnimation || this.isExiting)", shape=box];
  }
  subgraph "cluster_28" {
    label="reset (function) [L630-L642]";
    node_28_1 [label="id: 1\nreset(): void {
this.lastOffset = [0, 0];
this.offset = [0, 0];
this.lastScale = 1.0;
this.scale = 1;
this.hasReachLeft = true;
this.hasReachRight = true;
this.hasReachTop = true;
this.hasReachBottom = true;
this.isInAnimation = false;
this.isExiting = false;
this.emitDirectionChange();", shape=box];
  }
  subgraph "cluster_29" {
    label="onDisAppear (function) [L644-L646]";
    node_29_1 [label="id: 1\nonDisAppear(): void {
    Log.info(TAG, 'onDisAppear');", shape=box];
  }
  subgraph "cluster_30" {
    label="startAnimation (function) [L648-L656]";
    node_30_1 [label="id: 1\nprivate startAnimation(animationEndMatrix: Matrix4TransitWithMatrix4x4): void {
    this.isInAnimation = true;", shape=box];
  }
  subgraph "cluster_31" {
    label="onAnimationEnd (function) [L665-L675]";
    node_31_1 [label="id: 1\nonAnimationEnd(animationEndMatrix: Matrix4TransitWithMatrix4x4): void {
if (animationEndMatrix != null) {", shape=box];
  }
  }
  }
}