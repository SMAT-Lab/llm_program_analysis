digraph "37.ts" {
  subgraph "cluster_1" {
    label="example_script (CFG) [L1-L102]";
    node_1_1 [label="id: 1\nimport { Log } from '../utils/Log';
const TAG = 'ItemDataSource'", shape=box];
  subgraph "cluster_2" {
    label="LazyItem (class) [L20-L49]";
    node_2_1 [label="id: 1\nexport class LazyItem<T> {
  item: T;
  onItemUpdate: Function;
  index: number = -1;", shape=box];
  subgraph "cluster_3" {
    label="constructor (function) [L25-L29]";
    node_3_1 [label="id: 1\nconstructor(item: T, index: number, onItemUpdate?: Function) {
    this.item = item;
    this.onItemUpdate = onItemUpdate;
    this.index = index;
  }", shape=box];
  }
  subgraph "cluster_4" {
    label="update (function) [L31-L35]";
    node_4_1 [label="id: 1\nupdate(item: T): void {
if (this.onItemUpdate != null && this.index !== -1) {", shape=box];
  }
  subgraph "cluster_5" {
    label="getHashCode (function) [L37-L40]";
    node_5_1 [label="id: 1\ngetHashCode(): string {
    return this.index + '' + this.item.getHashCode();", shape=box];
  }
  subgraph "cluster_6" {
    label="get (function) [L42-L44]";
    node_6_1 [label="id: 1\nget(): T {
return this.item;", shape=box];
  }
  subgraph "cluster_7" {
    label="set (function) [L46-L48]";
    node_7_1 [label="id: 1\nset(item: T): void {
this.item = item;", shape=box];
  }
  }
  subgraph "cluster_8" {
    label="ItemDataSource (class) [L51-L102]";
    node_8_1 [label="id: 1\nexport abstract class ItemDataSource implements IDataSource {
private listeners: DataChangeListener[] = [];", shape=box];
  subgraph "cluster_9" {
    label="registerDataChangeListener (function) [L68-L74]";
    node_9_1 [label="id: 1\nLog.info(TAG, 'registerDataChangeListener');
if (this.listeners.indexOf(listener) < 0) {", shape=box];
  }
  subgraph "cluster_10" {
    label="unregisterDataChangeListener (function) [L76-L83]";
    node_10_1 [label="id: 1\nunregisterDataChangeListener(listener: DataChangeListener): void {
    Log.info(TAG, 'unregisterDataChangeListener');
    const pos = this.listeners.indexOf(listener);
if (pos >= 0) {", shape=box];
  }
  subgraph "cluster_11" {
    label="notifyDataChange (function) [L85-L89]";
    node_11_1 [label="id: 1\nnotifyDataChange(index: number): void {
this.listeners.forEach((listener: DataChangeListener): void => {", shape=box];
  }
  subgraph "cluster_12" {
    label="notifyDataReload (function) [L91-L95]";
    node_12_1 [label="id: 1\nnotifyDataReload(): void {
this.listeners.forEach((listener: DataChangeListener): void => {", shape=box];
  }
  subgraph "cluster_13" {
    label="notifyDataDelete (function) [L97-L101]";
    node_13_1 [label="id: 1\nnotifyDataDelete(index: number): void {
this.listeners.forEach((listener: DataChangeListener): void => {", shape=box];
  }
  }
  }
}