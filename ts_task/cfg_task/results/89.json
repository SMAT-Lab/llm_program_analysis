{
  "edge_analysis": {
    "static_total": 1,
    "llm_total": 7,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "id:0\\ndata = parameter0: image.PixelMap\\ncontext = parameter1: any\\nthis = this: @ts_files/89.ts: MediaUtils\\ninstanceinvoke console.<@%unk/%unk: .log()>(TAG, 'savePicture')\\n%0 = new @ts_files/89.ts: %AC$MediaUtils$savePicture$2\\ninstanceinvoke %0.<@ts_files/89.ts: %AC$MediaUtils$savePicture$2.constructor()>()\\npackOpts = %0\\nimagePackerApi = instanceinvoke image.<@%unk/%unk: .createImagePacker()>()\\narrayBuffer = await instanceinvoke imagePackerApi.<@%unk/%unk: .packing()>(data, packOpts)\\nfileAsset = await instanceinvoke this.<@ts_files/89.ts: MediaUtils.createAndGetFile(any)>(context)\\n%1 = fs.<@%unk/%unk: .OpenMode>\\n%2 = %1.<@%unk/%unk: .READ_WRITE>\\n%3 = fs.<@%unk/%unk: .OpenMode>\\n%4 = %3.<@%unk/%unk: .CREATE>\\n%5 = %2 | %4\\nfile = await instanceinvoke fs.<@%unk/%unk: .open()>(fileAsset, %5)\\ninstanceinvoke imagePackerApi.<@%unk/%unk: .release()>()\\n%6 = file.<@%unk/%unk: .fd>\\n%7 = await instanceinvoke fs.<@%unk/%unk: .write()>(%6, arrayBuffer) => [Target] id:1\\n%8 = file.<@%unk/%unk: .fd>\\n%9 = await instanceinvoke fs.<@%unk/%unk: .close()>(%8)\\ninstanceinvoke console.<@%unk/%unk: .log()>(TAG, 'write done')\\n%10 = new @ts_files/89.ts: %AC$MediaUtils$savePicture$3\\ninstanceinvoke %10.<@ts_files/89.ts: %AC$MediaUtils$savePicture$3.constructor()>()\\ninstanceinvoke prompt.<@%unk/%unk: .showToast()>(%10)\\nreturn"
    ],
    "extra_blocks": [
      "Edge 0: [Source] async createAndGetFile(context: any) {\\nlet mediaTest = photoAccessHelper.getPhotoAccessHelper(context) => [Target] let info = {\\n prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\\n}\\nlet dateTimeUtil = new DateTimeUtil()",
      "Edge 1: [Source] let info = {\\n prefix: 'IMG_', suffix: '.jpg', directory: photoAccessHelper.PhotoType.IMAGE\\n}\\nlet dateTimeUtil = new DateTimeUtil() => [Target] let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\\nlet displayName = `${info.prefix}${name}${info.suffix}`",
      "Edge 2: [Source] let name = `${dateTimeUtil.getDate()}_${dateTimeUtil.getTime()}`\\nlet displayName = `${info.prefix}${name}${info.suffix}` => [Target] let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\\nlet options: photoAccessHelper.CreateOptions = {\\n title: displayName\\n}",
      "Edge 3: [Source] let photoType: photoAccessHelper.PhotoType = photoAccessHelper.PhotoType.IMAGE;\\nlet options: photoAccessHelper.CreateOptions = {\\n title: displayName\\n} => [Target] return await mediaTest.createAsset(photoType, '.jpg', options)",
      "Edge 4: [Source] async savePicture(data: image.PixelMap, context: any) {\\nconsole.log(TAG, `savePicture`)\\nlet packOpts: image.PackingOption = {\\n format: \"image/jpeg\", quality: 100\\n}\\nlet imagePackerApi = image.createImagePacker()\\nlet arrayBuffer = await imagePackerApi.packing(data, packOpts)\\nlet fileAsset = await this.createAndGetFile(context)\\nlet file = await fs.open(fileAsset, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\nimagePackerApi.release() => [Target] try {",
      "Edge 5: [Source] try { => [Target] await fs.write(file.fd, arrayBuffer);\\nawait fs.close(file.fd);\\nconsole.log(TAG, `write done`)\\nprompt.showToast({\\n message: '\n56fe\n7247\n4fdd\n5b58\n6210\n529f', duration: 1000\\n})",
      "Edge 6: [Source] try { => [Target] } catch (err) {\\n console.log(`write failed, code is ${err.code}, message is ${err.message}`)\\nawait fs.close(file.fd);\\nconsole.log(TAG, `write done`)\\nprompt.showToast({\\n message: '\n56fe\n7247\n4fdd\n5b58\n6210\n529f', duration: 1000\\n})"
    ]
  }
}