{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 14,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] import { Datum } from \".\";\\nimport LatLonEllipsoidal, { Dms } from \"./latlon-ellipsoidal-datum\"; => [Target] type Hemisphere = \"N\" | \"S\";\\n}",
      "Edge 1: [Source] type Hemisphere = \"N\" | \"S\";\\n} => [Target] }\\nexport { Dms, LatLon_Utm as LatLon, Utm as default };",
      "Edge 2: [Source] declare class Utm { => [Target] zone: number;",
      "Edge 3: [Source] declare class Utm { => [Target] hemisphere: Hemisphere;",
      "Edge 4: [Source] declare class Utm { => [Target] easting: number;",
      "Edge 5: [Source] declare class Utm { => [Target] northing: number;",
      "Edge 6: [Source] declare class Utm { => [Target] datum: Datum;",
      "Edge 7: [Source] declare class Utm { => [Target] convergence: number | null;",
      "Edge 8: [Source] declare class Utm { => [Target] scale: number | null;",
      "Edge 9: [Source] declare class Utm { => [Target] );",
      "Edge 10: [Source] declare class Utm { => [Target] static parse(utmCoord: string, datum?: Datum): Utm;",
      "Edge 11: [Source] declare class Utm { => [Target] toLatLon(): LatLon_Utm;",
      "Edge 12: [Source] declare class Utm { => [Target] toString(digits?: number): string;",
      "Edge 13: [Source] declare class LatLon_Utm extends LatLonEllipsoidal {\\n toUtm(zoneOverride?: number): Utm; => [Target] }"
    ]
  }
}