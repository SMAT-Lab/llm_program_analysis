{
  "edge_analysis": {
    "static_total": 26,
    "llm_total": 36,
    "matched_edges": {
      "exact_matches": 6,
      "partial_matches": 8
    },
    "accuracy_metrics": {
      "precision": 0.16666666666666666,
      "recall": 0.23076923076923078,
      "f1_score": 0.19444444444444442
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "id:0",
      "id:1",
      "id:2",
      "id:3",
      "id:4",
      "id:5",
      "id:6",
      "id:7",
      "id:8",
      "id:9",
      "id:10",
      "id:11",
      "id:12",
      "id:13",
      "id:14",
      "id:15",
      "id:16",
      "id:17",
      "id:18",
      "id:19",
      "id:20",
      "id:21",
      "id:22",
      "id:23",
      "id:24",
      "id:25"
    ],
    "extra_blocks": [
      "import { Log } from '../utils/Log';",
      "import { ItemDataSource } from '../common/ItemDataSource';",
      "import { MenuContext } from './MenuContext';",
      "import { BroadcastConstants } from '../constants/BroadcastConstants';",
      "import { ProcessMenuOperation } from './ProcessMenuOperation';",
      "import { UserFileDataItem } from '../base/UserFileDataItem';",
      "Log.info(TAG, 'delete doAction');",
      "if (this.menuContext == null) {",
      "Log.warn(TAG, 'menuContext is null, return');",
      "return;",
      "let dataSource: ItemDataSource = this.menuContext.dataSource;",
      "if (dataSource == null) {",
      "this.count = this.menuContext.items.length;",
      "if (this.count <= 0) {",
      "Log.warn(TAG, 'count <= 0, return');",
      "this.confirmCallback = (): void => this.confirmCallbackBindImpl();",
      "this.cancelCallback = (): void => this.cancelCallbackBindImpl();",
      "let resource: Resource = this.getDeleteMessageResource(dataSource);",
      "let deleteResource: Resource = this.menuContext.albumId === MediaConstants.ALBUM_ID_RECYCLE ? $r('app.string.dialog_recycle') : $r('app.string.dialog_delete');",
      "this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [resource, deleteResource, this.confirmCallback, this.cancelCallback]);",
      "this.count = dataSource.getSelectedCount();",
      "if (this.count <= 0) {",
      "this.confirmCallback = (): void => this.confirmCallbackBindImpl();",
      "this.cancelCallback = (): void => this.cancelCallbackBindImpl();",
      "getResourceFromGrid(dataSource: ItemDataSource): Resource {",
      "if (dataSource != null && dataSource.isSelect()) {",
      "let resource: Resource;",
      "if (this.menuContext.deletePageFromType === BroadcastConstants.DELETE_FROM_BROWSER) {",
      "resource = this.getResourceFromBrowser();",
      "return resource;",
      "} else {",
      "resource = this.getResourceFromGrid(dataSource);",
      "return resource;",
      "confirmCallback(): void {",
      "this.confirmCallbackBindImpl();",
      "Log.info(TAG, 'Batch delete confirm');",
      "AppStorage.SetOrCreate<number>('isDelete', 1);",
      "this.onOperationEnd = this.menuContext.onOperationEnd;",
      "let onOperationStart: Function = this.menuContext.onOperationStart;"
    ]
  }
}