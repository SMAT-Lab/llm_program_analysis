{
  "edge_analysis": {
    "static_total": 6,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "id:1",
      "id:2",
      "id:3"
    ],
    "extra_blocks": [
      "import { createDirectory } from '@nx/workspace/src/utilities/fileutils';",
      "import { names, ExecutorContext } from '@nx/devkit';",
      "import { dirname, join, resolve as pathResolve } from 'path';",
      "import { ChildProcess, fork } from 'child_process';",
      "import { ReactNativeBundleOptions } from './schema';",
      "export interface ReactNativeBundleOutput {\\n success: boolean;\\n}",
      "options.bundleOutput = join(context.root, options.bundleOutput);",
      "createDirectory(dirname(options.bundleOutput));",
      "await runCliBuild(context.root, projectRoot, options);",
      "yield { success: true };",
      "const cliOptions = createBundleOptions(options);",
      "const childProcess = fork(require.resolve('react-native/cli.js'), ['bundle', ...cliOptions], { stdio: 'inherit', cwd: pathResolve(workspaceRoot, projectRoot), env: process.env, });",
      "const processExitListener = (signal?: number | NodeJS.Signals) => () => { childProcess.kill(signal); process.exit(); }; process.once('exit', (signal) => childProcess.kill(signal));",
      "process.once('SIGTERM', processExitListener); process.once('SIGINT', processExitListener); process.once('SIGQUIT', processExitListener);",
      "childProcess.on('error', (err) => { reject(err); });"
    ]
  }
}