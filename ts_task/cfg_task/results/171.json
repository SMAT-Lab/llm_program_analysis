{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] import {Component, signal} from '@angular/core';\\nimport {ComponentFixture, TestBed} from '@angular/core/testing'; => [Target] import {HarnessLoader} from '@angular/cdk/testing';\\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';",
      "Edge 1: [Source] import {HarnessLoader} from '@angular/cdk/testing';\\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core'; => [Target] import {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';",
      "Edge 2: [Source] import {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\\nimport {NoopAnimationsModule} from '@angular/browser/animations'; => [Target] import {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness';",
      "Edge 3: [Source] import {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness'; => [Target] @Component({\\n template: `\\n <input [matTimepicker]=\"onePicker\">\\n <mat-timepicker #onePicker/>\\n <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\\n <input [matTimepicker]=\"twoPicker\">\\n <mat-timepicker #twoPicker/>\\n <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\\n `,\\n standalone: true,\\n imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\\n})",
      "Edge 4: [Source] describe('MatTimepickerToggleHarness', () => {\\nlet fixture: ComponentFixture<TimepickerHarnessTest>; => [Target] let loader: HarnessLoader;\\n});",
      "Edge 5: [Source] beforeEach(() => {\\n TestBed.configureTestingModule({ => [Target] providers: [provideNativeDateAdapter()],",
      "Edge 6: [Source] beforeEach(() => {\\n TestBed.configureTestingModule({ => [Target] imports: [NoopAnimationsModule, TimepickerHarnessTest],\\n });",
      "Edge 7: [Source] imports: [NoopAnimationsModule, TimepickerHarnessTest],\\n }); => [Target] const adapter = TestBed.inject(DateAdapter);\\n adapter.setLocale('en-US');",
      "Edge 8: [Source] const adapter = TestBed.inject(DateAdapter);\\n adapter.setLocale('en-US'); => [Target] fixture = TestBed.createComponent(TimepickerHarnessTest);\\n fixture.detectChanges();",
      "Edge 9: [Source] fixture = TestBed.createComponent(TimepickerHarnessTest);\\n fixture.detectChanges(); => [Target] loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\\n});",
      "Edge 10: [Source] it('should be able to load timepicker toggle harnesses', async () => {\\n const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness); => [Target] expect(harnesses.length).toBe(2);\\n});",
      "Edge 11: [Source] it('should get the open state of a timepicker toggle', async () => {\\nconst toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'})); => [Target] expect(await toggle.isTimepickerOpen()).toBe(false);\\nawait toggle.openTimepicker();",
      "Edge 12: [Source] expect(await toggle.isTimepickerOpen()).toBe(false);\\nawait toggle.openTimepicker(); => [Target] expect(await toggle.isTimepickerOpen()).toBe(true);\\n});",
      "Edge 13: [Source] it('should get the disabled state of a toggle', async () => {\\n const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'})); => [Target] expect(await toggle.isDisabled()).toBe(false);\\n fixture.componentInstance.disabled.set(true);",
      "Edge 14: [Source] expect(await toggle.isDisabled()).toBe(false);\\n fixture.componentInstance.disabled.set(true); => [Target] expect(await toggle.isDisabled()).toBe(true);\\n});"
    ]
  }
}