{
  "name": "example_script",
  "type": "CFG",
  "start_line": 13,
  "end_line": 96,
  "functions": [
    {
      "name": "describe('view transitions')",
      "type": "function",
      "start_line": 13,
      "end_line": 96,
      "functions": [
        {
          "name": "it('should skip initial transition')",
          "type": "function",
          "start_line": 27,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should skip initial transition', async () => {\n    const appRef = await bootstrapApplication(App, {\n      providers: [\n        provideRouter(\n          [{path: '**', component: App}],\n          withDisabledInitialNavigation(),\n          withViewTransitions({skipInitialTransition: true}),\n        ),\n      ],\n    });\n    const doc = appRef.injector.get(DOCUMENT);\n    if (!doc.startViewTransition) {\n      return;\n    }\n    const viewTransitionSpy = spyOn(doc, 'startViewTransition').and.callThrough();\n    await appRef.injector.get(Router).navigateByUrl('/a');\n    expect(viewTransitionSpy).not.toHaveBeenCalled();\n    await appRef.injector.get(Router).navigateByUrl('/b');\n    expect(viewTransitionSpy).toHaveBeenCalled();\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should skip initial transition', async () => {",
              "successors": [
                {
                  "id": 2,
                  "label": "const appRef = await bootstrapApplication(App, {\n  providers: [\n    provideRouter(\n      [{path: '**', component: App}],\n      withDisabledInitialNavigation(),\n      withViewTransitions({skipInitialTransition: true}),\n    ),\n  ],\n});",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const doc = appRef.injector.get(DOCUMENT);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (!doc.startViewTransition) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "const viewTransitionSpy = spyOn(doc, 'startViewTransition').and.callThrough();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "await appRef.injector.get(Router).navigateByUrl('/a');",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "expect(viewTransitionSpy).not.toHaveBeenCalled();",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "await appRef.injector.get(Router).navigateByUrl('/b');",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "expect(viewTransitionSpy).toHaveBeenCalled();",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "});",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it('should have the correct event order when using view transitions')",
          "type": "function",
          "start_line": 47,
          "end_line": 64,
          "functions": [],
          "classes": [
            {
              "name": "ComponentB",
              "type": "class",
              "start_line": 48,
              "end_line": 53,
              "functions": [],
              "classes": [],
              "simplified_code": "    @Component({\n      selector: 'component-b',\n      template: `b`,\n      standalone: true,\n    })\n    class ComponentB {}",
              "blocks": [
                {
                  "id": 1,
                  "label": "@Component({",
                  "successors": [
                    {
                      "id": 2,
                      "label": "  selector: 'component-b',",
                      "successors": [
                        {
                          "id": 3,
                          "label": "  template: `b`,",
                          "successors": [
                            {
                              "id": 4,
                              "label": "  standalone: true,",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "})",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "class ComponentB {}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "simplified_code": "  it('should have the correct event order when using view transitions', async () => {\n    class ComponentB {}\n    const res = await bootstrapApplication(App, {\n      providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())],\n    });\n    const router = res.injector.get(Router);\n    const eventLog = [] as Event[];\n    router.events.subscribe((e) => {\n      eventLog.push(e);\n    });\n    await router.navigateByUrl('/b');\n    expect(eventLog[eventLog.length - 1]).toBeInstanceOf(NavigationEnd);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should have the correct event order when using view transitions', async () => {",
              "successors": [
                {
                  "id": 2,
                  "label": "class ComponentB {}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const res = await bootstrapApplication(App, { providers: [provideRouter([{path: 'b', component: ComponentB}], withViewTransitions())], });",
                      "successors": [
                        {
                          "id": 4,
                          "label": "const router = res.injector.get(Router);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "const eventLog = [] as Event[];",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "router.events.subscribe((e) => { eventLog.push(e); });",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "await router.navigateByUrl('/b');",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "expect(eventLog[eventLog.length - 1]).toBeInstanceOf(NavigationEnd);",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "});",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "describe('onViewTransitionCreated option')",
          "type": "function",
          "start_line": 65,
          "end_line": 95,
          "functions": [
            {
              "name": "it('should not create a view transition if only the fragment changes')",
              "type": "function",
              "start_line": 66,
              "end_line": 94,
              "functions": [],
              "classes": [
                {
                  "name": "App",
                  "type": "class",
                  "start_line": 67,
                  "end_line": 77,
                  "functions": [
                    {
                      "name": "ngDoCheck",
                      "type": "function",
                      "start_line": 74,
                      "end_line": 76,
                      "functions": [],
                      "classes": [],
                      "simplified_code": "        ngDoCheck() {\n          this.checks++;\n        }",
                      "blocks": [
                        {
                          "id": 1,
                          "label": "ngDoCheck() {",
                          "successors": [
                            {
                              "id": 2,
                              "label": "  this.checks++;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "classes": [],
                  "simplified_code": "      @Component({\n        selector: 'test-app',\n        standalone: true,\n        template: `{{checks}}`,\n      })\n      class App {\n        checks = 0;\n        }\n      }",
                  "blocks": [
                    {
                      "id": 1,
                      "label": "@Component({ selector: 'test-app', standalone: true, template: `{{checks}}`, })",
                      "successors": [
                        {
                          "id": 2,
                          "label": "class App { checks = 0; }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "simplified_code": "    it('should not create a view transition if only the fragment changes', async () => {\n      }\n      const transitionSpy = jasmine.createSpy();\n      const appRef = await bootstrapApplication(App, {\n        providers: [\n          provideRouter(\n            [{path: '**', component: App}],\n            withDisabledInitialNavigation(),\n            withViewTransitions({onViewTransitionCreated: transitionSpy}),\n          ),\n        ],\n      });\n      const doc = appRef.injector.get(DOCUMENT);\n      if (!doc.startViewTransition) {\n        return;\n      }\n      await appRef.injector.get(Router).navigateByUrl('/a');\n      expect(transitionSpy).toHaveBeenCalled();\n    });",
              "blocks": [
                {
                  "id": 1,
                  "label": "# Example input code\n    it('should not create a view transition if only the fragment changes', async () => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "}\n    const transitionSpy = jasmine.createSpy();\n    const appRef = await bootstrapApplication(App, {\n        providers: [\n            provideRouter(\n              [{path: '**', component: App}],\n              withDisabledInitialNavigation(),\n              withViewTransitions({onViewTransitionCreated: transitionSpy}),\n           ),\n         ],\n     });\n     const doc = appRef.injector.get(DOCUMENT);",
                      "successors": [
                        {
                          "id": 3,
                          "label": "if (!doc.startViewTransition) {",
                          "successors": [
                            {
                              "id": 4,
                              "label": "    return;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "await appRef.injector.get(Router).navigateByUrl('/a'); expect(transitionSpy).toHaveBeenCalled();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  describe('onViewTransitionCreated option', () => {\n    });\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "describe('onViewTransitionCreated option', () => {",
              "successors": [
                {
                  "id": 2,
                  "label": "});",
                  "successors": [
                    {
                      "id": 3,
                      "label": "});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "App",
          "type": "class",
          "start_line": 20,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "  @Component({\n    selector: 'test-app',\n    standalone: true,\n    template: ``,\n  })\n  class App {}",
          "blocks": [
            {
              "id": 1,
              "label": "@Component({",
              "successors": [
                {
                  "id": 2,
                  "label": "  selector: 'test-app',",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  standalone: true,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "  template: ``,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "})",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "class App {}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "describe('view transitions', () => {\n  if (isNode) {\n    it('are not available in node environment', () => {});\n    return;\n  }\n  beforeEach(destroyPlatform);\n  afterEach(destroyPlatform);\n  class App {}\n  beforeEach(withBody('<test-app></test-app>', () => {}));\n  });\n  });\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('view transitions', () => {",
          "successors": [
            {
              "id": 2,
              "label": "if (isNode) {",
              "successors": [
                {
                  "id": 3,
                  "label": "it('are not available in node environment', () => {});",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return;",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "beforeEach(destroyPlatform);",
              "successors": [
                {
                  "id": 6,
                  "label": "afterEach(destroyPlatform);",
                  "successors": [
                    {
                      "id": 7,
                      "label": "class App {}",
                      "successors": [
                        {
                          "id": 8,
                          "label": "beforeEach(withBody('<test-app></test-app>', () => {}));",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "});",
  "blocks": []
}