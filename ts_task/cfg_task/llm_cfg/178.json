{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 64,
  "functions": [],
  "classes": [
    {
      "name": "FederatedMouseEvent",
      "type": "class",
      "start_line": 6,
      "end_line": 64,
      "functions": [
        {
          "name": "clientX",
          "type": "function",
          "start_line": 18,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public get clientX(): number { return this.client.x; }",
          "blocks": [
            {
              "id": 1,
              "label": "public get clientX(): number { return this.client.x; }",
              "successors": []
            }
          ]
        },
        {
          "name": "clientY",
          "type": "function",
          "start_line": 19,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public get clientY(): number { return this.client.y; }",
          "blocks": [
            {
              "id": 1,
              "label": "public get clientY(): number { return this.client.y; }",
              "successors": []
            }
          ]
        },
        {
          "name": "x",
          "type": "function",
          "start_line": 20,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    get x(): number { return this.clientX; }",
          "blocks": [
            {
              "id": 1,
              "label": "get x(): number { return this.clientX; }",
              "successors": []
            }
          ]
        },
        {
          "name": "y",
          "type": "function",
          "start_line": 21,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    get y(): number { return this.clientY; }",
          "blocks": [
            {
              "id": 1,
              "label": "get y(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "  return this.clientY;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "movementX",
          "type": "function",
          "start_line": 24,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    get movementX(): number { return this.movement.x; }",
          "blocks": [
            {
              "id": 1,
              "label": "get movementX(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.movement.x;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "movementY",
          "type": "function",
          "start_line": 25,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    get movementY(): number { return this.movement.y; }",
          "blocks": [
            {
              "id": 1,
              "label": "get movementY(): number { return this.movement.y; }",
              "successors": []
            }
          ]
        },
        {
          "name": "offsetX",
          "type": "function",
          "start_line": 27,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    get offsetX(): number { return this.offset.x; }",
          "blocks": [
            {
              "id": 1,
              "label": "get offsetX(): number { return this.offset.x; }",
              "successors": []
            }
          ]
        },
        {
          "name": "offsetY",
          "type": "function",
          "start_line": 28,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    get offsetY(): number { return this.offset.y; }",
          "blocks": [
            {
              "id": 1,
              "label": "get offsetY(): number { return this.offset.y; }",
              "successors": []
            }
          ]
        },
        {
          "name": "globalX",
          "type": "function",
          "start_line": 30,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    get globalX(): number { return this.global.x; }",
          "blocks": [
            {
              "id": 1,
              "label": "get globalX(): number { return this.global.x; }",
              "successors": []
            }
          ]
        },
        {
          "name": "globalY",
          "type": "function",
          "start_line": 31,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    get globalY(): number { return this.global.y; }",
          "blocks": [
            {
              "id": 1,
              "label": "get globalY(): number { return this.global.y; }",
              "successors": []
            }
          ]
        },
        {
          "name": "screenX",
          "type": "function",
          "start_line": 33,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    get screenX(): number { return this.screen.x; }",
          "blocks": [
            {
              "id": 1,
              "label": "get screenX(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.screen.x;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "screenY",
          "type": "function",
          "start_line": 34,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    get screenY(): number { return this.screen.y; }",
          "blocks": [
            {
              "id": 1,
              "label": "get screenY(): number { return this.screen.y; }",
              "successors": []
            }
          ]
        },
        {
          "name": "getLocalPosition",
          "type": "function",
          "start_line": 35,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    public getLocalPosition<P extends PointData = Point>(container: Container, point?: P, globalPos?: PointData): P\n    {\n        return container.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public getLocalPosition<P extends PointData = Point>(container: Container, point?: P, globalPos?: PointData): P",
              "successors": [
                {
                  "id": 2,
                  "label": "return container.worldTransform.applyInverse<P>(globalPos || this.global, point);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getModifierState",
          "type": "function",
          "start_line": 39,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    public getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public getModifierState(key: string): boolean",
              "successors": [
                {
                  "id": 2,
                  "label": "return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "initMouseEvent",
          "type": "function",
          "start_line": 44,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "    public initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public initMouseEvent(\n    _typeArg: string,\n    _canBubbleArg: boolean,\n    _cancelableArg: boolean,\n    _viewArg: Window,\n    _detailArg: number,\n    _screenXArg: number,\n    _screenYArg: number,\n    _clientXArg: number,\n    _clientYArg: number,\n    _ctrlKeyArg: boolean,\n    _altKeyArg: boolean,\n    _shiftKeyArg: boolean,\n    _metaKeyArg: boolean,\n    _buttonArg: number,\n    _relatedTargetArg: EventTarget\n): void\n{",
              "successors": [
                {
                  "id": 2,
                  "label": "    throw new Error('Method not implemented.');",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | PixiTouch\n> implements MouseEvent\n{\n    public altKey: boolean;\n    public button: number;\n    public buttons: number;\n    public ctrlKey: boolean;\n    public metaKey: boolean;\n    public relatedTarget: EventTarget;\n    public shiftKey: boolean;\n    public client: Point = new Point();\n    public get clientX(): number { return this.client.x; }\n    public get clientY(): number { return this.client.y; }\n    get x(): number { return this.clientX; }\n    get y(): number { return this.clientY; }\n    public detail: number;\n    public movement: Point = new Point();\n    get movementX(): number { return this.movement.x; }\n    get movementY(): number { return this.movement.y; }\n    public offset: Point = new Point();\n    get offsetX(): number { return this.offset.x; }\n    get offsetY(): number { return this.offset.y; }\n    public global: Point = new Point();\n    get globalX(): number { return this.global.x; }\n    get globalY(): number { return this.global.y; }\n    public screen: Point = new Point();\n    get screenX(): number { return this.screen.x; }\n    get screenY(): number { return this.screen.y; }\n    }\n    }\n    // eslint-disable-next-line max-params\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class FederatedMouseEvent extends FederatedEvent<MouseEvent | PointerEvent | PixiTouch> implements MouseEvent",
          "successors": [
            {
              "id": 2,
              "label": "{\n    public altKey: boolean;\n    public button: number;\n    public buttons: number;\n    public ctrlKey: boolean;\n    public metaKey: boolean;\n    public relatedTarget: EventTarget;\n    public shiftKey: boolean;\n    public client: Point = new Point();",
              "successors": [
                {
                  "id": 3,
                  "label": "public get clientX(): number { return this.client.x; }\n    public get clientY(): number { return this.client.y; }\n    get x(): number { return this.clientX; }\n    get y(): number { return this.clientY; }\n    public detail: number;\n    public movement: Point = new Point();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "get movementX(): number { return this.movement.x; }\n    get movementY(): number { return this.movement.y; }\n    public offset: Point = new Point();",
                      "successors": [
                        {
                          "id": 5,
                          "label": "get offsetX(): number { return this.offset.x; }\n    get offsetY(): number { return this.offset.y; }\n    public global: Point = new Point();",
                          "successors": [
                            {
                              "id": 6,
                              "label": "get globalX(): number { return this.global.x; }\n    get globalY(): number { return this.global.y; }\n    public screen: Point = new Point();",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "get screenX(): number { return this.screen.x; }\n    get screenY(): number { return this.screen.y; }\n    }\n    }\n    // eslint-disable-next-line max-params\n    }\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import { Point } from '../maths/point/Point';\nimport { FederatedEvent } from './FederatedEvent';\nimport type { PointData } from '../maths/point/PointData';\nimport type { Container } from '../scene/container/Container';\nimport type { PixiTouch } from './FederatedEvent';\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Point } from '../maths/point/Point';",
      "successors": [
        {
          "id": 2,
          "label": "import { FederatedEvent } from './FederatedEvent';",
          "successors": [
            {
              "id": 3,
              "label": "import type { PointData } from '../maths/point/PointData';",
              "successors": [
                {
                  "id": 4,
                  "label": "import type { Container } from '../scene/container/Container';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import type { PixiTouch } from './FederatedEvent';",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}