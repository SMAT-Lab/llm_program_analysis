{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 253,
  "functions": [],
  "classes": [
    {
      "name": "Remix",
      "type": "class",
      "start_line": 27,
      "end_line": 250,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 31,
          "end_line": 233,
          "functions": [
            {
              "name": "checkIsUsingVite",
              "type": "function",
              "start_line": 65,
              "end_line": 71,
              "functions": [],
              "classes": [],
              "simplified_code": "    function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function checkIsUsingVite() {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return sitePath.apply(",
                      "successors": [
                        {
                          "id": 3,
                          "label": "(sitePath) =>",
                          "successors": [
                            {
                              "id": 4,
                              "label": "fs.existsSync(path.join(sitePath, \"vite.config.ts\")) || fs.existsSync(path.join(sitePath, \"vite.config.js\"))",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "loadBuildOutput",
              "type": "function",
              "start_line": 72,
              "end_line": 76,
              "functions": [],
              "classes": [],
              "simplified_code": "    function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function loadBuildOutput() {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return { buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(), };",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "loadBuildMetadata",
              "type": "function",
              "start_line": 77,
              "end_line": 101,
              "functions": [],
              "classes": [],
              "simplified_code": "    function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function loadBuildMetadata() {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return all([outputPath, isUsingVite]).apply(([outputPath, isUsingVite]) => {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "const assetsPath = isUsingVite ? path.join(\"build\", \"client\") : \"public\";",
                          "successors": [
                            {
                              "id": 4,
                              "label": "const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "return {",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "assetsPath,",
                                      "successors": [
                                        {
                                          "id": 7,
                                          "label": "assetsVersionedSubDir,",
                                          "successors": [
                                            {
                                              "id": 8,
                                              "label": "staticRoutes: fs.readdirSync(path.join(outputPath, assetsPath), { withFileTypes: true }).map((item) => item.isDirectory() ? `${item.name}/(.*)` : item.name),",
                                              "successors": [
                                                {
                                                  "id": 9,
                                                  "label": "};",
                                                  "successors": [
                                                    {
                                                      "id": 10,
                                                      "label": "});",
                                                      "successors": [
                                                        {
                                                          "id": 11,
                                                          "label": "});",
                                                          "successors": [
                                                            {
                                                              "id": 12,
                                                              "label": "}"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 7,
                                              "label": "}"
                                            }
                                          ]
                                        },
                                        {
                                          "id": 6,
                                          "label": "}"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "loadBuildMetadataPlaceholder",
              "type": "function",
              "start_line": 102,
              "end_line": 108,
              "functions": [],
              "classes": [],
              "simplified_code": "    function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function loadBuildMetadataPlaceholder() {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return {\n  assetsPath: \"placeholder\",\n  assetsVersionedSubDir: undefined,\n  staticRoutes: [],\n};",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "buildPlan",
              "type": "function",
              "start_line": 109,
              "end_line": 137,
              "functions": [],
              "classes": [],
              "simplified_code": "    function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function buildPlan() {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return all([isUsingVite, outputPath, buildMeta]).apply(([isUsingVite, outputPath, buildMeta]) => {",
                      "successors": [
                        {
                          "id": 3,
                          "label": "return validatePlan({",
                          "successors": [
                            {
                              "id": 4,
                              "label": "server: createServerLambdaBundle(isUsingVite, outputPath),",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "assets: {",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "copy: [",
                                      "successors": [
                                        {
                                          "id": 7,
                                          "label": "{",
                                          "successors": [
                                            {
                                              "id": 8,
                                              "label": "from: buildMeta.assetsPath,",
                                              "successors": [
                                                {
                                                  "id": 9,
                                                  "label": "to: \"\",",
                                                  "successors": [
                                                    {
                                                      "id": 10,
                                                      "label": "cached: true,",
                                                      "successors": [
                                                        {
                                                          "id": 11,
                                                          "label": "versionedSubDir: buildMeta.assetsVersionedSubDir",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "routes: [",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "{",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "regex: pathToRegexp(buildMeta.staticRoutes).source,",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "origin: \"assets\" as const",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 16,
                                  "label": "{",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "regex: pathToRegexp(\"(.*)\").source,",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "origin: \"server\" as const",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "createServerLambdaBundle",
              "type": "function",
              "start_line": 138,
              "end_line": 232,
              "functions": [],
              "classes": [],
              "simplified_code": "    function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }",
              "blocks": [
                {
                  "id": 1,
                  "label": "function createServerLambdaBundle( isUsingVite: boolean, outputPath: string, ) {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "const buildPath = path.join(outputPath, \"build\");",
                      "successors": [
                        {
                          "id": 3,
                          "label": "fs.mkdirSync(buildPath, { recursive: true });",
                          "successors": [
                            {
                              "id": 4,
                              "label": "const content = [\n    `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n    `import * as build from \"./server/index.js\";`,\n    `export default {`,\n    `  async fetch(request) {`,\n    `    console.log(\"fetch\");`,\n    `    console.log(\"build\", build);`,\n    `    console.log(\"build mode\", build.mode);`,\n    `    const handleRequest = createRequestHandler(build);`,\n    `    console.log(\"handleRequest\", handleRequest);`,\n    `    return await handleRequest(request);`,\n    `  },`,\n    `};`,\n].join(\"\\n\");",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "const nodeBuiltInModulesPlugin: Plugin = {\n  name: \"node:built-in:modules\",\n  setup(build) {\n    build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n      return kind === \"require-call\"\n        ? { path, namespace: \"node-built-in-modules\" }\n        : undefined;\n    });\n    build.onLoad(\n      { filter: /.*/, namespace: \"node-built-in-modules\" },\n      ({ path }) => {\n        return {\n          contents: `export * from 'node:${path}'`,\n          loader: \"js\",\n        };\n      },\n    );\n  },\n};",
                                      "successors": [
                                        {
                                          "id": 7,
                                          "label": "return {\n  handler: path.join(buildPath, \"server.ts\"),\n  build: {\n    esbuild: {\n      define: {\n        process: JSON.stringify({\n          env: {\n            NODE_ENV: \"development\", // Comment out `NODE_ENV` to avoid compilation errors.\n          },\n        }),\n      },\n      plugins: [nodeBuiltInModulesPlugin],\n    },\n  },\n};",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  constructor(\n    name: string,\n    args: RemixArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const parent = this;\n    const { sitePath } = prepare(args);\n    const isUsingVite = checkIsUsingVite();\n    const storage = createKvStorage(parent, name, args);\n    const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\n    const { buildMeta } = loadBuildOutput();\n    const plan = buildPlan();\n    const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );\n    this.assets = storage;\n    this.router = router;\n    this.server = server;\n    if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }\n    this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });\n    }\n    }\n    }\n    }\n    }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(\n  name: string,\n  args: RemixArgs = {},\n  opts: ComponentResourceOptions = {},\n) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(__pulumiType, name, args, opts);\nconst parent = this;\nconst { sitePath } = prepare(args);\nconst isUsingVite = checkIsUsingVite();\nconst storage = createKvStorage(parent, name, args);\nconst outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\nconst { buildMeta } = loadBuildOutput();\nconst plan = buildPlan();\nconst { router, server } = createRouter(\n  parent,\n  name,\n  args,\n  outputPath,\n  storage,\n  plan,\n);\nthis.assets = storage;\nthis.router = router;\nthis.server = server;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (!$dev) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Hint.register(this.urn, this.url as Output<string>);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.registerOutputs(\n  {\n    _metadata: {\n      mode: $dev ? \"placeholder\" : \"deployed\",\n      path: sitePath,\n      url: this.url,\n    },\n  },\n);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "url",
          "type": "function",
          "start_line": 234,
          "end_line": 236,
          "functions": [],
          "classes": [],
          "simplified_code": "  public get url() {\n    return this.router.url;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public get url() {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.router.url;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nodes",
          "type": "function",
          "start_line": 237,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": "  public get nodes() {\n    return {\n      server: this.server,\n      assets: this.assets,\n    };",
          "blocks": [
            {
              "id": 1,
              "label": "public get nodes() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      server: this.server,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "      assets: this.assets,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    };",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSSTLink",
          "type": "function",
          "start_line": 243,
          "end_line": 249,
          "functions": [],
          "classes": [],
          "simplified_code": "  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public getSSTLink() {",
              "successors": [
                {
                  "id": 2,
                  "label": "return {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "properties: {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "url: this.url,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "},",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "};",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class Remix extends Component implements Link.Linkable {\n  private assets: Kv;\n  private router: Output<Worker>;\n  private server: Output<Worker>;\n  }\n  }\n    };\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class Remix extends Component implements Link.Linkable {",
          "successors": [
            {
              "id": 2,
              "label": "  private assets: Kv;",
              "successors": [
                {
                  "id": 3,
                  "label": "  private router: Output<Worker>;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  private server: Output<Worker>;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "};",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport {\n  SsrSiteArgs,\n  createKvStorage,\n  createRouter,\n  prepare,\n  validatePlan,\n} from \"./ssr-site.js\";\nimport { Component } from \"../component.js\";\nimport { Hint } from \"../hint.js\";\nimport { Link } from \"../link.js\";\nimport { Kv } from \"./kv.js\";\nimport { buildApp } from \"../base/base-ssr-site.js\";\nimport { Worker } from \"./worker.js\";\nimport { Plugin } from \"esbuild\";\nimport { pathToRegexp } from \"../../util/path-to-regex.js\";\nexport interface RemixArgs extends SsrSiteArgs {\n  assets?: SsrSiteArgs[\"assets\"];\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  domain?: SsrSiteArgs[\"domain\"];\n  environment?: SsrSiteArgs[\"environment\"];\n  link?: SsrSiteArgs[\"link\"];\n  path?: SsrSiteArgs[\"path\"];\n}\n}\nconst __pulumiType = \"sst:cloudflare:Remix\";\n// @ts-expect-error\nRemix.__pulumiType = __pulumiType;",
  "blocks": [
    {
      "id": 1,
      "label": "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport { SsrSiteArgs, createKvStorage, createRouter, prepare, validatePlan } from \"./ssr-site.js\";\nimport { Component } from \"../component.js\";\nimport { Hint } from \"../hint.js\";\nimport { Link } from \"../link.js\";\nimport { Kv } from \"./kv.js\";\nimport { buildApp } from \"../base/base-ssr-site.js\";\nimport { Worker } from \"./worker.js\";\nimport { Plugin } from \"esbuild\";\nimport { pathToRegexp } from \"../../util/path-to-regex.js\";",
      "successors": [
        {
          "id": 2,
          "label": "export interface RemixArgs extends SsrSiteArgs {\n  assets?: SsrSiteArgs[\"assets\"];\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  domain?: SsrSiteArgs[\"domain\"];\n  environment?: SsrSiteArgs[\"environment\"];\n  link?: SsrSiteArgs[\"link\"];\n  path?: SsrSiteArgs[\"path\"];\n}",
          "successors": [
            {
              "id": 3,
              "label": "const __pulumiType = \"sst:cloudflare:Remix\";",
              "successors": [
                {
                  "id": 4,
                  "label": "// @ts-expect-error\nRemix.__pulumiType = __pulumiType;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}