{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "beforeEach",
      "type": "function",
      "start_line": 10,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });",
      "blocks": [
        {
          "id": 1,
          "label": "beforeEach(() => {",
          "successors": [
            {
              "id": 2,
              "label": "    mockedAxios.create.mockReturnThis();",
              "successors": [
                {
                  "id": 3,
                  "label": "    novu = new Novu(mockConfig.apiKey);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test",
      "type": "function",
      "start_line": 14,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled();\n    expect(mockedAxios.get).toHaveBeenCalledWith('/inbound-parse/mx/status');\n  });",
      "blocks": [
        {
          "id": 1,
          "label": "test('should get inbound parse correctly', async () => {",
          "successors": [
            {
              "id": 2,
              "label": "mockedAxios.get.mockResolvedValue({});",
              "successors": [
                {
                  "id": 3,
                  "label": "await novu.inboundParse.getMxStatus();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "expect(mockedAxios.get).toHaveBeenCalled();",
                      "successors": [
                        {
                          "id": 5,
                          "label": "expect(mockedAxios.get).toHaveBeenCalledWith('/inbound-parse/mx/status');",
                          "successors": [
                            {
                              "id": 6,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import axios from 'axios';\nimport { Novu } from '../novu';\nconst mockConfig = {\n  apiKey: '1234',\n};\njest.mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  });\n  });\n});",
  "blocks": [
    {
      "id": 1,
      "label": "import axios from 'axios';",
      "successors": [
        {
          "id": 2,
          "label": "import { Novu } from '../novu';",
          "successors": [
            {
              "id": 3,
              "label": "const mockConfig = {\n  apiKey: '1234',\n};",
              "successors": [
                {
                  "id": 4,
                  "label": "jest.mock('axios');",
                  "successors": [
                    {
                      "id": 5,
                      "label": "describe('test use of novus node package - InboundParse class', () => {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "const mockedAxios = axios as jest.Mocked<typeof axios>;",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let novu: Novu;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}