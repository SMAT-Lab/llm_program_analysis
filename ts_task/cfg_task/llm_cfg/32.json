{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 452,
  "functions": [],
  "classes": [
    {
      "name": "ScreenManager",
      "type": "class",
      "start_line": 72,
      "end_line": 450,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 94,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor() {\n    Log.info(TAG, 'constructor');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {\n  Log.info(TAG, 'constructor');\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "initializationSize",
          "type": "function",
          "start_line": 98,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async initializationSize(win): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.mainWindow = win;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.setMainWindow(win);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "await this.checkWindowMode();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.getWindowProperties(win);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "on",
          "type": "function",
          "start_line": 111,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "on(event, fn): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (Array.isArray(event)) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (let i = 0, l = event.length; i < l; i++) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.on(event[i], fn);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (let i = 0, l = event.length; i < l; i++) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "if (this.events.get(event) === null || this.events.get(event) === undefined) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "this.events.set(event, []);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "this.events.get(event).push(fn);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "off",
          "type": "function",
          "start_line": 130,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "off(event, fn): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (event == null || event == undefined) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (Array.isArray(event)) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "for (let i = 0, l = event.length; i < l; i++) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "this.off(event[i], fn);",
                          "successors": [
                            {
                              "id": 8,
                              "label": "const cbs: CallbackType[] = this.events.get(event);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "if (!new Boolean(cbs).valueOf()) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "return;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 11,
                                  "label": "if (fn == null || fn == undefined) {",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "return;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "label": "let cb;\nlet i = cbs.length;\nwhile (i-- > 0) {",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "cb = cbs[i];\nif (cb === fn || cb.fn === fn) {",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "cbs.splice(i, 1);\nbreak;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "const cbs: CallbackType[] = this.events.get(event);",
                  "successors": [
                    {
                      "id": 9,
                      "label": "if (!new Boolean(cbs).valueOf()) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "if (fn == null || fn == undefined) {",
                      "successors": [
                        {
                          "id": 12,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "let cb;\nlet i = cbs.length;\nwhile (i-- > 0) {",
                      "successors": [
                        {
                          "id": 14,
                          "label": "cb = cbs[i];\nif (cb === fn || cb.fn === fn) {",
                          "successors": [
                            {
                              "id": 15,
                              "label": "cbs.splice(i, 1);\nbreak;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "emit",
          "type": "function",
          "start_line": 157,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": "  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let _self = this;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!new Boolean(this.events.get(event)).valueOf()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let cbs: CallbackType[] = [];",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for (let i = 0; i < this.events.get(event).length; i++) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "cbs.push(this.events.get(event)[i]);",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "if (cbs.length > 0) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "for (let i = 0, l = cbs.length; i < l; i++) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "let ref = cbs[i];",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "if (ref != null) {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "try {",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "ref.apply(_self, argument);",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 14,
                                          "label": "catch (e) {",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "new Error(e);",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 15,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 17,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 18,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isLeftBlankInitialized",
          "type": "function",
          "start_line": 182,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": "  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private isLeftBlankInitialized(): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getWinWidth",
          "type": "function",
          "start_line": 187,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": "  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getWinWidth(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "return px2vp(this.winWidth);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setWinWidth",
          "type": "function",
          "start_line": 191,
          "end_line": 193,
          "functions": [],
          "classes": [],
          "simplified_code": "  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setWinWidth(width: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.winWidth = width;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getWinHeight",
          "type": "function",
          "start_line": 196,
          "end_line": 198,
          "functions": [],
          "classes": [],
          "simplified_code": "  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getWinHeight(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "return px2vp(this.winHeight);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getStatusBarHeight",
          "type": "function",
          "start_line": 200,
          "end_line": 202,
          "functions": [],
          "classes": [],
          "simplified_code": "  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getStatusBarHeight(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return px2vp(this.statusBarHeight);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getNaviBarHeight",
          "type": "function",
          "start_line": 204,
          "end_line": 206,
          "functions": [],
          "classes": [],
          "simplified_code": "  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getNaviBarHeight(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return px2vp(this.naviBarHeight);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "initWindowMode",
          "type": "function",
          "start_line": 208,
          "end_line": 210,
          "functions": [],
          "classes": [],
          "simplified_code": "  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async initWindowMode(): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isSplitMode",
          "type": "function",
          "start_line": 212,
          "end_line": 214,
          "functions": [],
          "classes": [],
          "simplified_code": "  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isSplitMode(): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "checkWindowMode",
          "type": "function",
          "start_line": 216,
          "end_line": 232,
          "functions": [],
          "classes": [],
          "simplified_code": "  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let before = this.windowMode;\nlet photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\nlet mode = await photosWindowStage.getWindowMode();\nLog.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (before === mode) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "this.windowMode = mode;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (WindowMode.FULL_SCREEN == this.windowMode) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "this.setFullScreen();",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "} else {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "this.setSplitScreen();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setMainWindow",
          "type": "function",
          "start_line": 234,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": "  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private setMainWindow(win: window.Window): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.debug(TAG, 'setMainWindow');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "win.on('windowSizeChange', (data: window.Size): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.checkWindowMode();",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.onWinSizeChanged(data);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getWindowProperties",
          "type": "function",
          "start_line": 243,
          "end_line": 255,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'getWindowProperties');",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let properties = win.getWindowProperties();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.winWidth = properties.windowRect.width;\nthis.winHeight = properties.windowRect.height;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "}",
                          "successors": [
                            {
                              "id": 7,
                              "label": "Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "} catch (exception) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setFullScreen",
          "type": "function",
          "start_line": 257,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW); Log.debug(TAG, 'getTopWindow start');",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "await topWindow.setWindowLayoutFullScreen(true); Log.debug(TAG, 'setFullScreen true Succeeded'); await this.hideStatusBar(topWindow);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "} catch (err) { Log.error(TAG, 'setFullScreen err: ' + err); }",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setSplitScreen",
          "type": "function",
          "start_line": 269,
          "end_line": 278,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSplitScreen(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.statusBarHeight = 0;\nthis.naviBarHeight = 0;\nthis.leftBlank = [0, 0, 0, 0];\nAppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} catch (err) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.error(TAG, 'setSplitScreen err: ' + err);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "hideStatusBar",
          "type": "function",
          "start_line": 280,
          "end_line": 308,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'hideStatusBar start');\nlet names: string[] = ['navigation'];\nLog.debug(TAG, 'getTopWindow names: ' + names + ' end');",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "// @ts-ignore\nawait topWindow.setWindowSystemBarEnable(names);\nLog.debug(TAG, 'hideStatusBar Succeeded');\nlet data = await topWindow.getWindowAvoidArea(0)\nLog.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\nthis.onLeftBlankChanged(data);\nlet barColor: string = await getResourceString($r('app.color.default_background_color'));\nlet barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (!barColor) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "barColor = '#FFF1F3F5';",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "if (!barContentColor) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "barContentColor = '#FF000000';",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "let systemBarProperties: window.SystemBarProperties = {\n  navigationBarColor: barColor,\n  navigationBarContentColor: barContentColor\n};\nawait topWindow.setWindowSystemBarProperties(systemBarProperties);\nLog.info(TAG, 'setStatusBarColor done');",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 10,
                                          "label": "let systemBarProperties: window.SystemBarProperties = {\n  navigationBarColor: barColor,\n  navigationBarContentColor: barContentColor\n};\nawait topWindow.setWindowSystemBarProperties(systemBarProperties);\nLog.info(TAG, 'setStatusBarColor done');",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "if (!barContentColor) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "barContentColor = '#FF000000';",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "let systemBarProperties: window.SystemBarProperties = {\n  navigationBarColor: barColor,\n  navigationBarContentColor: barContentColor\n};\nawait topWindow.setWindowSystemBarProperties(systemBarProperties);\nLog.info(TAG, 'setStatusBarColor done');",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "if (!barContentColor) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "barContentColor = '#FF000000';",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "let systemBarProperties: window.SystemBarProperties = {\n  navigationBarColor: barColor,\n  navigationBarContentColor: barContentColor\n};\nawait topWindow.setWindowSystemBarProperties(systemBarProperties);\nLog.info(TAG, 'setStatusBarColor done');",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "} catch (err) {",
                      "successors": [
                        {
                          "id": 12,
                          "label": "Log.error(TAG, 'hideStatusBar err: ' + err);",
                          "successors": [
                            {
                              "id": 15,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setNavigationBarColor",
          "type": "function",
          "start_line": 310,
          "end_line": 325,
          "functions": [],
          "classes": [],
          "simplified_code": "  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  let systemBarProperties: window.SystemBarProperties = {\n    navigationBarColor: barColor,\n    navigationBarContentColor: barContentColor\n  };",
                      "successors": [
                        {
                          "id": 4,
                          "label": "  topWindow.setWindowSystemBarProperties(\n    systemBarProperties,\n    (): void => Log.info(TAG, 'setStatusBarColor done')\n  );",
                          "successors": [
                            {
                              "id": 5,
                              "label": "} catch (err) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "  Log.error(TAG, 'setNavigationBarColor err: ' + err);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setSystemUi",
          "type": "function",
          "start_line": 327,
          "end_line": 348,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSystemUi(isShowBar: boolean): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.debug(TAG, 'setSystemUi start');\nlet topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\nLog.debug(TAG, 'getTopWindow start');\nlet names: string[] = ['navigation'];",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (!isShowBar) {\n  names = [];\n}",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.debug(TAG, 'getTopWindow names: ' + names + ' end');",
                          "successors": [
                            {
                              "id": 5,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "// @ts-ignore\ntopWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n    Log.debug(TAG, 'setFullScreen Succeeded');\n    if (isShowBar) {\n        let data = await topWindow.getWindowAvoidArea(0);\n        this.onLeftBlankChanged(data);\n    }\n})",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "} catch (err) {\n  Log.error(TAG, 'setSystemUi err: ' + err);\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onLeftBlankChanged",
          "type": "function",
          "start_line": 350,
          "end_line": 365,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private onLeftBlankChanged(area: window.AvoidArea): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (area == null || area == undefined || area.bottomRect.height === 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "let leftBlankBefore: StatusNaviHeight = {\n  status: this.statusBarHeight,\n  navi: this.naviBarHeight\n};\nthis.statusBarHeight = 0;\nthis.naviBarHeight = area.bottomRect.height;\nthis.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\nAppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onWinSizeChanged",
          "type": "function",
          "start_line": 367,
          "end_line": 384,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));",
              "successors": [
                {
                  "id": 2,
                  "label": "if (size == null || size == undefined) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let sizeBefore: Size = {\n  width: this.winWidth,\n  height: this.winHeight\n};\nthis.winWidth = size.width;\nthis.winHeight = size.height;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\nthis.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onRotationAngleChanged",
          "type": "function",
          "start_line": 386,
          "end_line": 397,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private onRotationAngleChanged(angle): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (angle == null || angle == undefined) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (angle === 0) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.horizontal = false;",
                      "successors": [
                        {
                          "id": 7,
                          "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "else { this.horizontal = true; }",
                  "successors": [
                    {
                      "id": 7,
                      "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isHorizontal",
          "type": "function",
          "start_line": 399,
          "end_line": 404,
          "functions": [],
          "classes": [],
          "simplified_code": "  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null)",
              "successors": [
                {
                  "id": 2,
                  "label": "  AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 3,
              "label": "return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);",
              "successors": []
            }
          ]
        },
        {
          "name": "isSidebar",
          "type": "function",
          "start_line": 406,
          "end_line": 411,
          "functions": [],
          "classes": [],
          "simplified_code": "  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isSidebar(): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return AppStorage.Get<boolean>(SCREEN_SIDEBAR);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return AppStorage.Get<boolean>(SCREEN_SIDEBAR);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getColumnsWidth",
          "type": "function",
          "start_line": 413,
          "end_line": 418,
          "functions": [],
          "classes": [],
          "simplified_code": "  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let columns = this.getScreenColumns();",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return columnWidth * count - COLUMN_GUTTER;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getScreenColumns",
          "type": "function",
          "start_line": 420,
          "end_line": 429,
          "functions": [],
          "classes": [],
          "simplified_code": "  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let width = px2vp(this.winWidth);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (width < ScreenWidth.WIDTH_MEDIUM) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  return ColumnSize.COLUMN_FOUR;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "} else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  return ColumnSize.COLUMN_EIGHT;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} else {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "  return ColumnSize.COLUMN_TWELVE;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setKeepScreenOn",
          "type": "function",
          "start_line": 431,
          "end_line": 439,
          "functions": [],
          "classes": [],
          "simplified_code": "  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setKeepScreenOn(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'setKeepScreenOn start');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');",
                      "successors": [
                        {
                          "id": 4,
                          "label": "try {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "} catch (err) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "Log.error(TAG, 'setKeepScreenOn err: ' + err);",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setKeepScreenOff",
          "type": "function",
          "start_line": 441,
          "end_line": 449,
          "functions": [],
          "classes": [],
          "simplified_code": "  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "} catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  }\n\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  }\n\n  }\n\n  }\n\n  // Unit\uff1avp\n  }\n\n  }\n\n  // Unit\uff1avp\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n    }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class ScreenManager {  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';  readonly DEFAULT_WIDTH: number = 1920;  readonly DEFAULT_HEIGHT: number = 1080;  readonly SPLIT_THRESHOLD = 1.7;  private winWidth = 0.0;  private winHeight = 0.0;  private statusBarHeight = 0;  private naviBarHeight = 0;  private leftBlank: number[] = [0, 0, 0, 0];  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();  private mainWindow: window.Window = undefined;  private globalThis = GlobalContext.getContext();  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;  private windowMode = WindowMode.UNDEFINED;}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport deviceInfo from '@ohos.deviceInfo';\nimport window from '@ohos.window';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { Constants } from '../constants/Constants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from './GlobalContext';\n\nexport enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}\n\nenum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}\n\nenum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\ninterface StatusNaviHeight {\n  status: number;\n  navi: number;\n}\n\ninterface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}\n\nconst TAG = 'ScreenManager';\n\nconst APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';\n\nconst SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';\nconst SCREEN_SIDEBAR: string = 'isSidebar';\n\nconst COLUMN_MARGIN: number = 12;\nconst COLUMN_GUTTER: number = 12;\n\ntype CallbackType = Function;\n\n}\n\nexport let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);",
  "blocks": [
    {
      "id": 1,
      "label": "import deviceInfo from '@ohos.deviceInfo';\nimport window from '@ohos.window';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { Constants } from '../constants/Constants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from './GlobalContext';",
      "successors": [
        {
          "id": 2,
          "label": "export enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}",
          "successors": [
            {
              "id": 3,
              "label": "enum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}",
              "successors": [
                {
                  "id": 4,
                  "label": "enum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "interface Size {\n  width: number;\n  height: number;\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "interface StatusNaviHeight {\n  status: number;\n  navi: number;\n}",
                          "successors": [
                            {
                              "id": 7,
                              "label": "interface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "const TAG = 'ScreenManager';",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "const APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "const SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';\nconst SCREEN_SIDEBAR: string = 'isSidebar';",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "const COLUMN_MARGIN: number = 12;\nconst COLUMN_GUTTER: number = 12;",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "type CallbackType = Function;",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "export let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}