{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [
    {
      "name": "matcherHint",
      "type": "function",
      "start_line": 7,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": "export function matcherHint(state: ExpectMatcherState, locator: Locator | undefined, matcherName: string, expression: any, actual: any, matcherOptions: any, timeout?: number) {\n  let header = state.utils.matcherHint(matcherName, expression, actual, matcherOptions).replace(/ \\/\\/ deep equality/, '') + '\\n\\n';\n  if (timeout)\n    header = colors.red(`Timed out ${timeout}ms waiting for `) + header;\n  if (locator)\n    header += `Locator: ${String(locator)}\\n`;\n  return header;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function matcherHint(state: ExpectMatcherState, locator: Locator | undefined, matcherName: string, expression: any, actual: any, matcherOptions: any, timeout?: number) {",
          "successors": [
            {
              "id": 2,
              "label": "let header = state.utils.matcherHint(matcherName, expression, actual, matcherOptions).replace(/ \\/\\/ deep equality/, '') + '\\n\\n';",
              "successors": [
                {
                  "id": 3,
                  "label": "if (timeout)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "header = colors.red(`Timed out ${timeout}ms waiting for `) + header;",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (locator)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "header += `Locator: ${String(locator)}\\n`;",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "return header;\n}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "return header;\n}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "if (locator)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "header += `Locator: ${String(locator)}\\n`;",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "return header;\n}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "return header;\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "isJestError",
      "type": "function",
      "start_line": 44,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "export function isJestError(e: unknown): e is JestError {\n  return e instanceof Error && 'matcherResult' in e;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function isJestError(e: unknown): e is JestError {",
          "successors": [
            {
              "id": 2,
              "label": "  return e instanceof Error && 'matcherResult' in e;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ExpectError",
      "type": "class",
      "start_line": 31,
      "end_line": 43,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 33,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(jestError: JestError, customMessage: string, stackFrames: StackFrame[]) {\n    super('');\n    // Copy to erase the JestMatcherError constructor name from the console.log(error).\n    this.name = jestError.name;\n    this.message = jestError.message;\n    this.matcherResult = jestError.matcherResult;\n    if (customMessage)\n      this.message = customMessage + '\\n\\n' + this.message;\n    this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(jestError: JestError, customMessage: string, stackFrames: StackFrame[]) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super('');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.name = jestError.name;\nthis.message = jestError.message;\nthis.matcherResult = jestError.matcherResult;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (customMessage)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.message = customMessage + '\\n\\n' + this.message;",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "this.stack = this.name + ': ' + this.message + '\\n' + stringifyStackFrames(stackFrames).join('\\n');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class ExpectError extends Error {\n  matcherResult: MatcherResultProperty;\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class ExpectError extends Error {",
          "successors": [
            {
              "id": 2,
              "label": "  matcherResult: MatcherResultProperty;",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import { colors } from 'playwright-core/lib/utilsBundle';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { Locator } from 'playwright-core';\nimport type { StackFrame } from '@protocol/channels';\nimport { stringifyStackFrames } from 'playwright-core/lib/utils';\nexport const kNoElementsFoundError = '<element(s) not found>';\n}\nexport type MatcherResult<E, A> = {\n  name: string;\n  expected?: E;\n  message: () => string;\n  pass: boolean;\n  actual?: A;\n  log?: string[];\n  timeout?: number;\n  suggestedRebaseline?: string;\n};\nexport type MatcherResultProperty = Omit<MatcherResult<unknown, unknown>, 'message'> & {\n  message: string;\n};\ntype JestError = Error & {\n  matcherResult: MatcherResultProperty;\n};\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { colors } from 'playwright-core/lib/utilsBundle';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { Locator } from 'playwright-core';\nimport type { StackFrame } from '@protocol/channels';\nimport { stringifyStackFrames } from 'playwright-core/lib/utils';\nexport const kNoElementsFoundError = '<element(s) not found>';\n",
      "successors": []
    },
    {
      "id": 2,
      "label": "export type MatcherResult<E, A> = {\n  name: string;\n  expected?: E;\n  message: () => string;\n  pass: boolean;\n  actual?: A;\n  log?: string[];\n  timeout?: number;\n  suggestedRebaseline?: string;\n};\n",
      "successors": []
    },
    {
      "id": 3,
      "label": "export type MatcherResultProperty = Omit<MatcherResult<unknown, unknown>, 'message'> & {\n  message: string;\n};\n",
      "successors": []
    },
    {
      "id": 4,
      "label": "type JestError = Error & {\n  matcherResult: MatcherResultProperty;\n};\n",
      "successors": []
    }
  ]
}