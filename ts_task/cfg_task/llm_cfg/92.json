{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 89,
  "functions": [],
  "classes": [
    {
      "name": "LogUtil",
      "type": "class",
      "start_line": 50,
      "end_line": 84,
      "functions": [
        {
          "name": "debug",
          "type": "function",
          "start_line": 51,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "  debug(msg): void {\n    console.log(msg)\n    if (LogLevel.DEBUG >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "debug(msg): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "console.log(msg)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (LogLevel.DEBUG >= LOG_LEVEL) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "console.log(msg);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "log",
          "type": "function",
          "start_line": 58,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "  log(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "log(msg): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    console.log(msg)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (LogLevel.INFO >= LOG_LEVEL) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    console.log(msg);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "info",
          "type": "function",
          "start_line": 65,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  info(msg): void {\n    console.log(msg)\n    if (LogLevel.INFO >= LOG_LEVEL) {\n      console.log(msg);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "info(msg): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "console.log(msg)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (LogLevel.INFO >= LOG_LEVEL) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "console.log(msg);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "warn",
          "type": "function",
          "start_line": 72,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "  warn(msg): void {\n    console.log(msg)\n    if (LogLevel.WARN >= LOG_LEVEL) {\n      console.warn(msg);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "warn(msg): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    console.log(msg)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (LogLevel.WARN >= LOG_LEVEL) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    console.warn(msg);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "error",
          "type": "function",
          "start_line": 79,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "  error(msg): void {\n    if (LogLevel.ERROR >= LOG_LEVEL) {\n      console.error(msg);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (LogLevel.ERROR >= LOG_LEVEL) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    console.error(msg);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class LogUtil extends BaseModel {\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class LogUtil extends BaseModel {\n  }\n\n  }\n\n  }\n\n  }\n\n  }",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/**\n * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport BaseModel from './BaseModel';\n\nlet LogLevel = {\n  /**\n   * debug\n   */\n  DEBUG: 3,\n\n  /**\n   * info\n   */\n  INFO: 4,\n\n  /**\n   * warn\n   */\n  WARN: 5,\n\n  /**\n   * error\n   */\n  ERROR: 6,\n\n  /**\n   * fatal\n   */\n  FATAL: 7,\n};\n\nconst LOG_LEVEL = LogLevel.INFO\n\n/**\n *  log package tool class\n */\n}\n\nlet mLogUtil = new LogUtil();\n\nexport default mLogUtil as LogUtil\n;",
  "blocks": [
    {
      "id": 1,
      "label": "import BaseModel from './BaseModel';",
      "successors": [
        {
          "id": 2,
          "label": "let LogLevel = {\n  /**\n   * debug\n   */\n  DEBUG: 3,\n\n  /**\n   * info\n   */\n  INFO: 4,\n\n  /**\n   * warn\n   */\n  WARN: 5,\n\n  /**\n   * error\n   */\n  ERROR: 6,\n\n  /**\n   * fatal\n   */\n  FATAL: 7,\n};",
          "successors": [
            {
              "id": 3,
              "label": "const LOG_LEVEL = LogLevel.INFO",
              "successors": [
                {
                  "id": 4,
                  "label": "let mLogUtil = new LogUtil();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "export default mLogUtil as LogUtil;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}