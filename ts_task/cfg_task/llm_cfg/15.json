{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 72,
  "functions": [],
  "classes": [
    {
      "name": "MainAbility",
      "type": "class",
      "start_line": 24,
      "end_line": 72,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 25,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    Logger.info(TAG, 'Ability onCreate');\n    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);\n    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Logger.info(TAG, 'Ability onCreate');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    Logger.debug(TAG, `want param: ${JSON.stringify(want)}`);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    Logger.debug(TAG, `launchParam: ${JSON.stringify(launchParam)}`);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDestroy",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDestroy(): void {\n    Logger.info(TAG, 'Ability onDestroy');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDestroy(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Logger.info(TAG, 'Ability onDestroy');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 35,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage: Window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'Ability onWindowStageCreate');\n    windowStage.getMainWindow().then((win: Window.Window): void => {\n      win.setWindowLayoutFullScreen(true).then((): void => {\n        win.setWindowSystemBarEnable(['navigation']).then((): void => {\n        });\n      });\n      win.setWindowSystemBarProperties({\n        navigationBarColor: '#00000000',\n        navigationBarContentColor: '#B3B3B3'\n      }).then((): void => {\n      });\n    })\n    this.onLoadContent(windowStage, 'pages/Index');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage: Window.WindowStage): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Logger.info(TAG, 'Ability onWindowStageCreate');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "windowStage.getMainWindow().then((win: Window.Window): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "win.setWindowLayoutFullScreen(true).then((): void => {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "win.setWindowSystemBarProperties({\n  navigationBarColor: '#00000000',\n  navigationBarContentColor: '#B3B3B3'\n}).then((): void => {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "})",
                      "successors": [
                        {
                          "id": 9,
                          "label": "this.onLoadContent(windowStage, 'pages/Index');",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onLoadContent",
          "type": "function",
          "start_line": 52,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "  onLoadContent(windowStage: Window.WindowStage, page: string): void {\n    windowStage.loadContent(page, (): void => {\n    });\n\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onLoadContent(windowStage: Window.WindowStage, page: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    windowStage.loadContent(page, (): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    });",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageDestroy",
          "type": "function",
          "start_line": 58,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'Ability onWindowStageDestroy');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageDestroy(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    // Main window is destroyed, release UI related resources",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    Logger.info(TAG, 'Ability onWindowStageDestroy');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onForeground",
          "type": "function",
          "start_line": 63,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "  onForeground(): void {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onForeground(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "// Ability has brought to foreground\n    Logger.info(TAG, 'Ability onForeground');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onBackground",
          "type": "function",
          "start_line": 68,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  onBackground(): void {\n    // Ability has back to background\n    Logger.info(TAG, 'Ability onBackground');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onBackground(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Logger.info(TAG, 'Ability onBackground');",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export default class MainAbility extends Ability {\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default class MainAbility extends Ability {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ability from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport type Window from '@ohos.window';\nimport Logger from '../model/Logger';\n\nconst TAG: string = 'MainAbility';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import Ability from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\nimport type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport type Window from '@ohos.window';\nimport Logger from '../model/Logger';\n\nconst TAG: string = 'MainAbility';",
      "successors": []
    }
  ]
}