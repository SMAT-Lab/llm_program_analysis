{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 155,
  "functions": [
    {
      "name": "getCompletionsForKeyword",
      "type": "function",
      "start_line": 2,
      "end_line": 155,
      "functions": [
        {
          "name": "render",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For Loop\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"For Loop\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 27,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-in Loop\");\n          element.innerHTML = \"forin\";\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"For-in Loop\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = \"forin\";",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 36,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"For-of Loop\");\n          element.innerHTML = \"forof\";\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"For-of Loop\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = \"forof\";",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 47,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"While Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"While Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 58,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"do-While Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"do-While Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 70,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"if Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"if Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 81,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Switch Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"Switch Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = completion.text;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 92,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Function Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"Function Statement\");",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    element.innerHTML = completion.text;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 103,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Try-catch Statement\");\n          element.innerHTML = \"try-catch\";\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"Try-catch Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = \"try-catch\";",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 114,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"Throw Exception\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "    element.setAttribute(\"keyword\", \"Throw Exception\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 125,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "        render: (element: HTMLElement) => {\n          element.setAttribute(\"keyword\", \"new Statement\");\n          element.innerHTML = completion.text;\n        },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"new Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "},",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 137,
          "end_line": 140,
          "functions": [],
          "classes": [],
          "simplified_code": "          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Function Statement\");\n            element.innerHTML = completion.text;\n          },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"async Function Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "start_line": 146,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": "          render: (element: HTMLElement) => {\n            element.setAttribute(\"keyword\", \"async Arrow Function Statement\");\n            element.innerHTML = completion.text;\n          },",
          "blocks": [
            {
              "id": 1,
              "label": "render: (element: HTMLElement) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "element.setAttribute(\"keyword\", \"async Arrow Function Statement\");",
                  "successors": [
                    {
                      "id": 3,
                      "label": "element.innerHTML = completion.text;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export const getCompletionsForKeyword = (\n  completion: Completion<TernCompletionResult>,\n  cursorHorizontalPos: number,\n) => {\n  const keywordName = completion.text;\n  // indentation needs to be positive number\n  const indentation = cursorHorizontalPos < 0 ? 0 : cursorHorizontalPos;\n  const indentationSpace = \" \".repeat(indentation);\n  const completions = [];\n  switch (keywordName) {\n    // loops\n    case \"for\":\n      completions.push({\n        ...completion,\n        name: \"for-loop\",\n        text: `for(let i=0;i < array.length;i++){\\n${indentationSpace}\\tconst element = array[i];\\n${indentationSpace}}`,\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-in-loop\",\n        text: `for(const key in object) {\\n${indentationSpace}}`,\n        },\n      });\n      completions.push({\n        ...completion,\n        name: \"for-of-loop\",\n        text: `for(const iterator of object){\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"while\":\n      completions.push({\n        ...completion,\n        name: \"while-loop\",\n        text: `while(condition){\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"do\":\n      completions.push({\n        ...completion,\n        name: \"do-while-statement\",\n        text: `do{\\n\\n${indentationSpace}} while (condition);`,\n        },\n      });\n      break;\n    // conditional statement\n    case \"if\":\n      completions.push({\n        ...completion,\n        name: \"if-statement\",\n        text: `if(condition){\\n\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"switch\":\n      completions.push({\n        ...completion,\n        name: \"switch-statement\",\n        text: `switch(key){\\n${indentationSpace}\\tcase value:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}\\tdefault:\\n${indentationSpace}\\t\\tbreak;\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"function\":\n      completions.push({\n        ...completion,\n        name: \"function-statement\",\n        text: `function name(params){\\n\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"try\":\n      completions.push({\n        ...completion,\n        name: \"try-catch\",\n        text: `try{\\n\\n${indentationSpace}}catch(error){\\n\\n${indentationSpace}}`,\n        },\n      });\n      break;\n    case \"throw\":\n      completions.push({\n        ...completion,\n        name: \"throw-exception\",\n        text: `throw new Error(\"\");`,\n        },\n      });\n      break;\n    case \"new\":\n      completions.push({\n        ...completion,\n        name: \"new-statement\",\n        text: `const name = new type(arguments);`,\n        },\n      });\n      break;\n    case \"async\":\n      completions.push(\n        {\n          ...completion,\n          name: \"async-function\",\n          text: `async function() {\\n\\n${indentationSpace}}`,\n          },\n        },\n        {\n          ...completion,\n          name: \"async-arrow-function\",\n          text: `async () => {\\n\\n${indentationSpace}}`,\n          },\n        },\n      );\n      break;\n  }\n  return completions;\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export const getCompletionsForKeyword = (completion: Completion<TernCompletionResult>, cursorHorizontalPos: number) => {",
          "successors": [
            {
              "id": 2,
              "label": "const keywordName = completion.text;",
              "successors": [
                {
                  "id": 3,
                  "label": "const indentation = cursorHorizontalPos < 0 ? 0 : cursorHorizontalPos;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const indentationSpace = \" \".repeat(indentation);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "const completions = [];",
                          "successors": [
                            {
                              "id": 6,
                              "label": "switch (keywordName) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "case \"for\":",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "completions.push({\n  ...completion,\n  name: \"for-loop\",\n  text: `for(let i=0;i < array.length;i++){\n${indentationSpace}\tconst element = array[i];\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "completions.push({\n  ...completion,\n  name: \"for-in-loop\",\n  text: `for(const key in object) {\n${indentationSpace}}`,\n});",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "completions.push({\n  ...completion,\n  name: \"for-of-loop\",\n  text: `for(const iterator of object){\n${indentationSpace}}`,\n});",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "break;",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 12,
                                  "label": "case \"while\":",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "completions.push({\n  ...completion,\n  name: \"while-loop\",\n  text: `while(condition){\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "case \"do\":",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "completions.push({\n  ...completion,\n  name: \"do-while-statement\",\n  text: `do{\n\n${indentationSpace}} while (condition);`,\n});",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 18,
                                  "label": "case \"if\":",
                                  "successors": [
                                    {
                                      "id": 19,
                                      "label": "completions.push({\n  ...completion,\n  name: \"if-statement\",\n  text: `if(condition){\n\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 21,
                                  "label": "case \"switch\":",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "completions.push({\n  ...completion,\n  name: \"switch-statement\",\n  text: `switch(key){\n${indentationSpace}\tcase value:\n${indentationSpace}\t\tbreak;\n${indentationSpace}\tdefault:\n${indentationSpace}\t\tbreak;\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 23,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 24,
                                  "label": "case \"function\":",
                                  "successors": [
                                    {
                                      "id": 25,
                                      "label": "completions.push({\n  ...completion,\n  name: \"function-statement\",\n  text: `function name(params){\n\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 26,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 27,
                                  "label": "case \"try\":",
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "completions.push({\n  ...completion,\n  name: \"try-catch\",\n  text: `try{\n\n${indentationSpace}}catch(error){\n\n${indentationSpace}}`,\n});",
                                      "successors": [
                                        {
                                          "id": 29,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 30,
                                  "label": "case \"throw\":",
                                  "successors": [
                                    {
                                      "id": 31,
                                      "label": "completions.push({\n  ...completion,\n  name: \"throw-exception\",\n  text: `throw new Error(\"\");`,\n});",
                                      "successors": [
                                        {
                                          "id": 32,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 33,
                                  "label": "case \"new\":",
                                  "successors": [
                                    {
                                      "id": 34,
                                      "label": "completions.push({\n  ...completion,\n  name: \"new-statement\",\n  text: `const name = new type(arguments);`,\n});",
                                      "successors": [
                                        {
                                          "id": 35,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 36,
                                  "label": "case \"async\":",
                                  "successors": [
                                    {
                                      "id": 37,
                                      "label": "completions.push(\n  {\n    ...completion,\n    name: \"async-function\",\n    text: `async function() {\n\n${indentationSpace}}`,\n  },\n  {\n    ...completion,\n    name: \"async-arrow-function\",\n    text: `async () => {\n\n${indentationSpace}}`,\n  }\n);",
                                      "successors": [
                                        {
                                          "id": 38,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 39,
                          "label": "return completions;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import type { Completion, TernCompletionResult } from \"./CodemirrorTernService\";\n};",
  "blocks": [
    {
      "id": 1,
      "label": "import type { Completion, TernCompletionResult } from \"./CodemirrorTernService\";",
      "successors": []
    }
  ]
}