{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 114,
  "functions": [
    {
      "name": "len",
      "type": "function",
      "start_line": 5,
      "end_line": 7,
      "functions": [],
      "classes": [],
      "simplified_code": "async function len(s: string) {\n    return s.length;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function len(s: string) {",
          "successors": [
            {
              "id": 2,
              "label": "return s.length;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "f1",
      "type": "function",
      "start_line": 8,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": "async function f1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await len(x);\n        x;\n    }\n    x;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function f1() {",
          "successors": [
            {
              "id": 2,
              "label": "    let x: string | number | boolean;",
              "successors": [
                {
                  "id": 3,
                  "label": "    x = \"\";",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    while (cond) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        x = await len(x);",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        x;",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "    while (cond) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "    }",
                      "successors": [
                        {
                          "id": 8,
                          "label": "    x;",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "f2",
      "type": "function",
      "start_line": 17,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": "async function f2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await len(x);\n    }\n    x;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let x: string | number | boolean;",
          "successors": [
            {
              "id": 2,
              "label": "x = \"\";",
              "successors": [
                {
                  "id": 3,
                  "label": "while (cond) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    x;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    x = await len(x);",
                          "successors": [
                            {
                              "id": 3,
                              "label": "while (cond) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "x;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "g1",
      "type": "function",
      "start_line": 28,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": "async function g1() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x = await foo(x);\n        x;\n    }\n    x;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let x: string | number | boolean;",
          "successors": [
            {
              "id": 2,
              "label": "x = \"\";",
              "successors": [
                {
                  "id": 3,
                  "label": "while (cond) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    x = await foo(x);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    x;",
                          "successors": [
                            {
                              "id": 3,
                              "label": "while (cond) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "x;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "g2",
      "type": "function",
      "start_line": 37,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "async function g2() {\n    let x: string | number | boolean;\n    x = \"\";\n    while (cond) {\n        x;\n        x = await foo(x);\n    }\n    x;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function g2() {\n    let x: string | number | boolean;\n    x = \"\";",
          "successors": [
            {
              "id": 2,
              "label": "while (cond) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    x;\n    x = await foo(x);",
                  "successors": [
                    {
                      "id": 2
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "label": "x;\n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "asNumber",
      "type": "function",
      "start_line": 46,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": "async function asNumber(x: string | number): Promise<number> {\n    return +x;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function asNumber(x: string | number): Promise<number> {",
          "successors": [
            {
              "id": 2,
              "label": "    return +x;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "h1",
      "type": "function",
      "start_line": 49,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": "async function h1() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = +x + 1;\n        x;\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function h1() {",
          "successors": [
            {
              "id": 2,
              "label": "    let x: string | number | boolean;",
              "successors": [
                {
                  "id": 3,
                  "label": "    x = \"0\";",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    while (cond) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        x = +x + 1;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        x;",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "    while (cond) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "h2",
      "type": "function",
      "start_line": 57,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": "async function h2() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x = await asNumber(x) + 1;\n        x;\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function h2() {",
          "successors": [
            {
              "id": 2,
              "label": "    let x: string | number | boolean;",
              "successors": [
                {
                  "id": 3,
                  "label": "    x = \"0\";",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    while (cond) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        x = await asNumber(x) + 1;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        x;",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "    while (cond) {",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "label": "        x = await asNumber(x) + 1;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "h3",
      "type": "function",
      "start_line": 65,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": "async function h3() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function h3() {",
          "successors": [
            {
              "id": 2,
              "label": "let x: string | number | boolean;",
              "successors": [
                {
                  "id": 3,
                  "label": "x = \"0\";",
                  "successors": [
                    {
                      "id": 4,
                      "label": "while (cond) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let y = await asNumber(x);",
                          "successors": [
                            {
                              "id": 6,
                              "label": "x = y + 1;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "x;",
                                  "successors": [
                                    {
                                      "id": 4,
                                      "label": "while (cond) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "h4",
      "type": "function",
      "start_line": 74,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "simplified_code": "async function h4() {\n    let x: string | number | boolean;\n    x = \"0\";\n    while (cond) {\n        x;\n        let y = await asNumber(x);\n        x = y + 1;\n        x;\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function h4() {\n    let x: string | number | boolean;\n    x = \"0\";",
          "successors": [
            {
              "id": 2,
              "label": "while (cond) {",
              "successors": [
                {
                  "id": 3,
                  "label": "x;\n        let y = await asNumber(x);\n        x = y + 1;\n        x;",
                  "successors": [
                    {
                      "id": 2,
                      "label": "while (cond) {",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_things",
      "type": "function",
      "start_line": 85,
      "end_line": 87,
      "functions": [],
      "classes": [],
      "simplified_code": "async function get_things(_: number | undefined) {\n    return [0];\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function get_things(_: number | undefined) {",
          "successors": [
            {
              "id": 2,
              "label": "    return [0];",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "foobar",
      "type": "function",
      "start_line": 88,
      "end_line": 94,
      "functions": [],
      "classes": [],
      "simplified_code": "async function foobar() {\n    let before: number | undefined = undefined;\n    for (let i = 0; i < 2; i++) {\n        const results = await get_things(before);\n        before = results[0];\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function foobar() {",
          "successors": [
            {
              "id": 2,
              "label": "    let before: number | undefined = undefined;",
              "successors": [
                {
                  "id": 3,
                  "label": "    for (let i = 0; i < 2; i++) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        const results = await get_things(before);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        before = results[0];",
                          "successors": [
                            {
                              "id": 3,
                              "label": "    }",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "",
      "type": "function",
      "start_line": 97,
      "end_line": 103,
      "functions": [],
      "classes": [],
      "simplified_code": "async () => {\n  let bar: string | undefined = undefined;\n  do {\n    const baz = await foox(bar);\n    bar = baz\n  } while (bar)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async () => {",
          "successors": [
            {
              "id": 2,
              "label": "let bar: string | undefined = undefined;",
              "successors": [
                {
                  "id": 3,
                  "label": "do {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const baz = await foox(bar);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "bar = baz",
                          "successors": [
                            {
                              "id": 6,
                              "label": "} while (bar)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "myFunc",
      "type": "function",
      "start_line": 106,
      "end_line": 114,
      "functions": [],
      "classes": [],
      "simplified_code": "async function myFunc(): Promise<void> {\n  let lastId: number | undefined = undefined;\n  while (true) {\n    const { entities } = await myQuery({\n        lastId,\n    });\n    lastId = entities[entities.length - 1];\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function myFunc(): Promise<void> {",
          "successors": [
            {
              "id": 2,
              "label": "let lastId: number | undefined = undefined;",
              "successors": [
                {
                  "id": 3,
                  "label": "while (true) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const { entities } = await myQuery({ lastId, });",
                      "successors": [
                        {
                          "id": 5,
                          "label": "lastId = entities[entities.length - 1];",
                          "successors": [
                            {
                              "id": 3,
                              "label": "while (true) {",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "const { entities } = await myQuery({ lastId, });",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "label": "lastId = entities[entities.length - 1];",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// @strict: true\n// @noEmit: true\n// @lib: esnext\nlet cond: boolean;\n}\n}\n}\ndeclare function foo(x: string): Promise<number>;\ndeclare function foo(x: number): Promise<string>;\n}\n}\n}\n}\n}\n}\n}\n// repro #51115\n}\n}\n// repro #43047#issuecomment-821453073\ndeclare function foox(x: string | undefined): Promise<string>\n}\n// repro #43047#issuecomment-874221939\ndeclare function myQuery(input: { lastId: number | undefined }): Promise<{ entities: number[] }>;\n}",
  "blocks": [
    {
      "id": 1,
      "label": "// @strict: true\n// @noEmit: true\n// @lib: esnext\nlet cond: boolean;",
      "successors": [
        {
          "id": 2,
          "label": "declare function foo(x: string): Promise<number>;\ndeclare function foo(x: number): Promise<string>;",
          "successors": []
        },
        {
          "id": 3,
          "label": "declare function foox(x: string | undefined): Promise<string>",
          "successors": []
        },
        {
          "id": 4,
          "label": "declare function myQuery(input: { lastId: number | undefined }): Promise<{ entities: number[] }>; ",
          "successors": []
        }
      ]
    }
  ]
}