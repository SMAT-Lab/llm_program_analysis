{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 194,
  "functions": [],
  "classes": [
    {
      "name": "GroupItemDataSource",
      "type": "class",
      "start_line": 23,
      "end_line": 194,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor() {\n    super();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setSelectType",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelectType(selectType: number): void {\n    this.groupDataImpl.setSelectType(selectType);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelectType(selectType: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.groupDataImpl.setSelectType(selectType);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumId",
          "type": "function",
          "start_line": 35,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.groupDataImpl.setAlbumId(id);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumId(id: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumId: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.groupDataImpl.setAlbumId(id);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumType",
          "type": "function",
          "start_line": 40,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumType(id: number): void {\n    Log.info(TAG, 'setAlbumType: ' + id);\n    this.groupDataImpl.setAlbumType(id);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumType(id: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumType: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.groupDataImpl.setAlbumType(id);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumSubtype",
          "type": "function",
          "start_line": 45,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumSubtype(id: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + id);\n    this.groupDataImpl.setAlbumSubtype(id);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumSubtype(id: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumSubtype: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.groupDataImpl.setAlbumSubtype(id);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumName",
          "type": "function",
          "start_line": 50,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.groupDataImpl.setAlbumName(name);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumName(name: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumName: ' + name);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.groupDataImpl.setAlbumName(name);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setDeviceId",
          "type": "function",
          "start_line": 55,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.groupDataImpl.setDeviceId(id);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setDeviceId(id: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setDeviceId: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.groupDataImpl.setDeviceId(id);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "totalCount",
          "type": "function",
          "start_line": 60,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "  totalCount(): number {\n    return this.groupDataItem.length;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "totalCount(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.groupDataItem.length;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getIndexByItem",
          "type": "function",
          "start_line": 64,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  getIndexByItem(item: UserFileDataItem): number {\n    let index = -1;\n    let length = this.groupDataItem.length;\n    for (let i = 0;i < length; i++) {\n      if (this.groupDataItem[i].uri === item.uri) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let index = -1;\nlet length = this.groupDataItem.length;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0;i < length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.groupDataItem[i].uri === item.uri) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "index = i;\nbreak;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "return index;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getData",
          "type": "function",
          "start_line": 76,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "  getData(index: number): LazyItem<UserFileDataItem> {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getData(index: number): LazyItem<UserFileDataItem> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (index < 0 || index >= this.groupDataItem.length) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, index + '/' + this.groupDataItem.length);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return undefined;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "this.groupDataItem[index].index = index;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "return new LazyItem<UserFileDataItem>(this.groupDataItem[index], index, (index: number): void => this.onDataUpdateBindImpl(index));",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getDataByIndex",
          "type": "function",
          "start_line": 87,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  getDataByIndex(index: number): UserFileDataItem {\n    if (index < 0 || index >= this.groupDataItem.length) {\n      Log.warn(TAG, index + '/' + this.groupDataItem.length);\n      return undefined;\n    }\n    if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {\n      this.groupDataItem[index].index = index;\n    }\n    return this.groupDataItem[index];\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getDataByIndex(index: number): UserFileDataItem {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (index < 0 || index >= this.groupDataItem.length) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, index + '/' + this.groupDataItem.length);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return undefined;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "if (this.groupDataItem[index] != null && this.groupDataItem[index] != undefined) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "this.groupDataItem[index].index = index;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "return this.groupDataItem[index];",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isSelect",
          "type": "function",
          "start_line": 98,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "  isSelect(): boolean {\n    let isSelect = true;\n    for (let i = 0;i < this.groupDataItem.length; i++) {\n      if (!this.groupDataItem[i].isSelect) {\n        isSelect = false;\n        break;\n      }\n    }\n    return isSelect;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isSelect = true;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0;i < this.groupDataItem.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (!this.groupDataItem[i].isSelect) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "isSelect = false;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "break;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return isSelect;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedCount",
          "type": "function",
          "start_line": 109,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedCount(): number {\n    let count = 0;\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        count++;\n      }\n    })\n    return count;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getSelectedCount(): number {",
              "successors": [
                {
                  "id": 2,
                  "label": "let count = 0;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.groupDataItem.forEach((item: UserFileDataItem): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (item.isSelect) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "count++;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "return count;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getItems",
          "type": "function",
          "start_line": 119,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "  getItems(): UserFileDataItem[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      items.push(item);\n    })\n    return items;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getItems(): UserFileDataItem[] {",
              "successors": [
                {
                  "id": 2,
                  "label": "let items: UserFileDataItem[] = [];",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.groupDataItem.forEach((item: UserFileDataItem): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "items.push(item);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "return items;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedItems",
          "type": "function",
          "start_line": 127,
          "end_line": 135,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedItems(): Object[] {\n    let items: UserFileDataItem[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        items.push(item);\n      }\n    })\n    return items;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getSelectedItems(): Object[] {",
              "successors": [
                {
                  "id": 2,
                  "label": "let items: UserFileDataItem[] = [];",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.groupDataItem.forEach((item: UserFileDataItem): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (item.isSelect) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "items.push(item);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "return items;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getSelectedUris",
          "type": "function",
          "start_line": 137,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": "  getSelectedUris(): string[] {\n    let uris: string[] = [];\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      if (item.isSelect) {\n        uris.push(item.uri);\n      }\n    })\n    return uris;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let uris: string[] = [];",
              "successors": [
                {
                  "id": 2,
                  "label": "this.groupDataItem.forEach((item: UserFileDataItem): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (item.isSelect) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "uris.push(item.uri);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "})",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return uris;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setSelect",
          "type": "function",
          "start_line": 147,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelect(isSelect: boolean): void {\n    this.groupDataItem.forEach((item: UserFileDataItem): void => {\n      item.setSelect(isSelect);\n    })\n    this.notifyDataReload();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelect(isSelect: boolean): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.groupDataItem.forEach((item: UserFileDataItem): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "item.setSelect(isSelect);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "});",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.notifyDataReload();",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reloadGroupItemData",
          "type": "function",
          "start_line": 154,
          "end_line": 157,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadGroupItemData(isGrid: boolean): Promise<boolean> {\n    this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);\n    return this.groupDataItem.length === 0;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadGroupItemData(isGrid: boolean): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.groupDataItem = await this.groupDataImpl.reloadGroupItemData(isGrid);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this.groupDataItem.length === 0;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDataUpdate",
          "type": "function",
          "start_line": 159,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDataUpdate(index: number): void {\n    this.onDataUpdateBindImpl(index);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDataUpdate(index: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.onDataUpdateBindImpl(index);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onDataUpdateBindImpl",
          "type": "function",
          "start_line": 163,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": "  private onDataUpdateBindImpl(index: number): void {\n    Log.debug(TAG, 'onDataUpdate ' + index);\n    if (index !== -1) {\n      this.notifyDataChange(index);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'onDataUpdate ' + index);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (index !== -1) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.notifyDataChange(index);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dataReload",
          "type": "function",
          "start_line": 170,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": "  dataReload(isGrid: boolean): void {\n    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {\n      this.notifyDataReload();\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "dataReload(isGrid: boolean): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.reloadGroupItemData(isGrid).then<void, void>((isEmpty: boolean): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        this.notifyDataReload();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dataRemove",
          "type": "function",
          "start_line": 176,
          "end_line": 183,
          "functions": [],
          "classes": [],
          "simplified_code": "  dataRemove(): void {\n    for (let i = this.groupDataItem.length - 1;i >= 0; i--) {\n      if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {\n        this.groupDataItem.splice(i, 1);\n        super.notifyDataDelete(i);\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "dataRemove(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = this.groupDataItem.length - 1;i >= 0; i--) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.groupDataItem[i] != undefined && this.groupDataItem[i].isDeleted()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.groupDataItem.splice(i, 1);\nsuper.notifyDataDelete(i);",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (let i = this.groupDataItem.length - 1;i >= 0; i--) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dataDelete",
          "type": "function",
          "start_line": 185,
          "end_line": 193,
          "functions": [],
          "classes": [],
          "simplified_code": "  dataDelete(uri: string): void {\n    const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {\n      return item.uri === uri;\n    })\n    if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {\n      this.groupDataItem.splice(mediaDataItemIndex, 1);\n      super.notifyDataDelete(mediaDataItemIndex);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "dataDelete(uri: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "const mediaDataItemIndex = this.groupDataItem.findIndex((item: UserFileDataItem): boolean => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return item.uri === uri;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "})",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (mediaDataItemIndex !== -1 && this.groupDataItem[mediaDataItemIndex].isDeleted()) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.groupDataItem.splice(mediaDataItemIndex, 1);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "super.notifyDataDelete(mediaDataItemIndex);",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "}",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class GroupItemDataSource extends ItemDataSource {\n  groupDataItem: UserFileDataItem[] = [];\n  private groupDataImpl: GroupDataImpl = new GroupDataImpl();\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class GroupItemDataSource extends ItemDataSource {",
          "successors": [
            {
              "id": 2,
              "label": "groupDataItem: UserFileDataItem[] = [];",
              "successors": []
            },
            {
              "id": 3,
              "label": "private groupDataImpl: GroupDataImpl = new GroupDataImpl();",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { GroupDataImpl } from './GroupDataImpl';\nimport { LazyItem, ItemDataSource } from './ItemDataSource';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'GroupItemDataSource';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';",
      "successors": []
    },
    {
      "id": 2,
      "label": "import { GroupDataImpl } from './GroupDataImpl';",
      "successors": []
    },
    {
      "id": 3,
      "label": "import { LazyItem, ItemDataSource } from './ItemDataSource';",
      "successors": []
    },
    {
      "id": 4,
      "label": "import { UserFileDataItem } from '../base/UserFileDataItem';",
      "successors": []
    },
    {
      "id": 5,
      "label": "const TAG = 'GroupItemDataSource';",
      "successors": []
    }
  ]
}