{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 53,
  "functions": [
    {
      "name": "createAgpRegExp",
      "type": "function",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "simplified_code": "function createAgpRegExp() {\n  return /^(\\s*classpath[(\\s][\"']com\\.android\\.tools\\.build:gradle:)(\\d+\\.\\d+\\.\\d+)([\"'][)\\s]\\s*)$/gm;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function createAgpRegExp() {",
          "successors": [
            {
              "id": 2,
              "label": "  return /^(\\",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "shouldUpdateAgpVersionAsync",
      "type": "function",
      "start_line": 9,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function shouldUpdateAgpVersionAsync(projectRoot: string, targetVersion: string) {\n  const gradlePath = path.join(projectRoot, 'android', 'build.gradle');\n  const content = await fs.promises.readFile(gradlePath, 'utf-8');\n  const matchResult = createAgpRegExp().exec(content);\n  if (!matchResult) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  const version = matchResult[2];\n  if (!version) {\n    console.warn(\n      'Unrecognized `android/build.gradle` content, will skip the process to update AGP version.'\n    );\n    return false;\n  }\n  return semver.lt(toSemVer(version), toSemVer(targetVersion));\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function shouldUpdateAgpVersionAsync(projectRoot: string, targetVersion: string) {",
          "successors": [
            {
              "id": 2,
              "label": "const gradlePath = path.join(projectRoot, 'android', 'build.gradle');",
              "successors": [
                {
                  "id": 3,
                  "label": "const content = await fs.promises.readFile(gradlePath, 'utf-8');",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const matchResult = createAgpRegExp().exec(content);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (!matchResult) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "console.warn('Unrecognized `android/build.gradle` content, will skip the process to update AGP version.');",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "return false;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "} const version = matchResult[2];",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (!version) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "console.warn('Unrecognized `android/build.gradle` content, will skip the process to update AGP version.');",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "return false;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "} return semver.lt(toSemVer(version), toSemVer(targetVersion));",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "withAndroidGradlePluginVersion",
      "type": "function",
      "start_line": 28,
      "end_line": 50,
      "functions": [
        {
          "name": "configHandler",
          "type": "function",
          "start_line": 32,
          "end_line": 49,
          "functions": [
            {
              "name": "replaceHandler",
              "type": "function",
              "start_line": 42,
              "end_line": 44,
              "functions": [],
              "classes": [],
              "simplified_code": "          (match, prefix, versionPart, suffix) => {\n            return `${prefix}${prop.androidAgpVersion}${suffix}`;\n          }",
              "blocks": [
                {
                  "id": 1,
                  "label": "(match, prefix, versionPart, suffix) => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "return `${prefix}${prop.androidAgpVersion}${suffix}`;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language !== 'groovy') {\n      throw new Error('Cannot setup kotlin because the build.gradle is not groovy');\n    }\n    const matchResult = createAgpRegExp().exec(config.modResults.contents);\n    if (matchResult) {\n      const version = matchResult[2];\n      if (version && semver.lt(toSemVer(version), toSemVer(prop.androidAgpVersion))) {\n        config.modResults.contents = config.modResults.contents.replace(\n          createAgpRegExp(),\n          }\n        );\n      }\n    }\n    return config;\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "return withProjectBuildGradle(config, (config) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (config.modResults.language !== 'groovy') {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw new Error('Cannot setup kotlin because the build.gradle is not groovy');",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "const matchResult = createAgpRegExp().exec(config.modResults.contents);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (matchResult) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "const version = matchResult[2];",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if (version && semver.lt(toSemVer(version), toSemVer(prop.androidAgpVersion))) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "config.modResults.contents = config.modResults.contents.replace(\n  createAgpRegExp(),\n  }\n);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "return config;",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "});",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export const withAndroidGradlePluginVersion: ConfigPlugin<{ androidAgpVersion: string }> = (\n  config,\n  prop\n) => {\n  });\n};",
      "blocks": [
        {
          "id": 1,
          "label": "export const withAndroidGradlePluginVersion: ConfigPlugin<{ androidAgpVersion: string }> = ( config, prop ) => {",
          "successors": [
            {
              "id": 2,
              "label": "});",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "toSemVer",
      "type": "function",
      "start_line": 51,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": "function toSemVer(version: string): semver.SemVer {\n  return semver.coerce(version) ?? new semver.SemVer('0.0.0');\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function toSemVer(version: string): semver.SemVer {",
          "successors": [
            {
              "id": 2,
              "label": "  return semver.coerce(version) ?? new semver.SemVer('0.0.0');",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { ConfigPlugin, withProjectBuildGradle } from '@expo/config-plugins';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n// Because regexp //g is stateful, to use it multiple times, we should create a new one.\n}\n}\n};\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { ConfigPlugin, withProjectBuildGradle } from '@expo/config-plugins';",
      "successors": [
        {
          "id": 2,
          "label": "import fs from 'fs';",
          "successors": [
            {
              "id": 3,
              "label": "import path from 'path';",
              "successors": [
                {
                  "id": 4,
                  "label": "import semver from 'semver';",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}