{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [],
  "classes": [
    {
      "name": "GroupDataImpl",
      "type": "class",
      "start_line": 32,
      "end_line": 190,
      "functions": [
        {
          "name": "setSelectType",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelectType(selectType: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.selectType = selectType;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumId",
          "type": "function",
          "start_line": 44,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumId(id: string): void {\n    Log.info(TAG, 'setAlbumId: ' + id);\n    this.albumId = id;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumId(id: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumId: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.albumId = id;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setDeviceId",
          "type": "function",
          "start_line": 49,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  setDeviceId(id: string): void {\n    Log.info(TAG, 'setDeviceId: ' + id);\n    this.deviceId = id;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setDeviceId(id: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setDeviceId: ' + id);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.deviceId = id;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumType",
          "type": "function",
          "start_line": 54,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumType(albumType: number): void {\n    Log.info(TAG, 'setAlbumType: ' + albumType);\n    this.albumType = albumType;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumType(albumType: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'setAlbumType: ' + albumType);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.albumType = albumType;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumSubtype",
          "type": "function",
          "start_line": 59,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumSubtype(albumSubType: number): void {\n    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);\n    this.albumSubType = albumSubType;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumSubtype(albumSubType: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumSubtype: ' + albumSubType);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.albumSubType = albumSubType;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setAlbumName",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumName(name: string): void {\n    Log.info(TAG, 'setAlbumName: ' + name);\n    this.albumName = name;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumName(name: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'setAlbumName: ' + name);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.albumName = name;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reloadGroupItemData",
          "type": "function",
          "start_line": 69,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {\n    if (isGrid) {\n      return this.reloadGridGroupItemData();\n    } else {\n      return this.reloadBrowserGroupItemData();\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadGroupItemData(isGrid: boolean): Promise<UserFileDataItem[]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (isGrid) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this.reloadGridGroupItemData();",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return this.reloadBrowserGroupItemData();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reloadBrowserGroupItemData",
          "type": "function",
          "start_line": 77,
          "end_line": 115,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadBrowserGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let favorMediaItem = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          favorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        favorMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(favorMediaItem);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let trashMediaItem = new TrashUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\n          trashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;\n        }\n        trashMediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(trashMediaItem);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);\n        }\n        mediaItem.update(mediaFileAssets[i]);\n        groupDataItem.push(mediaItem);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadBrowserGroupItemData(): Promise<UserFileDataItem[]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'reloadBrowserGroupItemData');\nlet groupDataItem: UserFileDataItem[] = [];\nlet mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let favorMediaItem = new FavorUserFileDataItem('', [], i);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "favorMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\nfavorMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "favorMediaItem.update(mediaFileAssets[i]);\ngroupDataItem.push(favorMediaItem);",
                                  "successors": [
                                    {
                                      "id": 4,
                                      "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "let trashMediaItem = new TrashUserFileDataItem('', [], i);",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "trashMediaItem.favouriteStatus = userFileDataItemCache.get(mediaFileAssets[i].uri).favouriteStatus;\ntrashMediaItem.orientation = userFileDataItemCache.get(mediaFileAssets[i].uri).orientation;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "trashMediaItem.update(mediaFileAssets[i]);\ngroupDataItem.push(trashMediaItem);",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "label": "else {",
                      "successors": [
                        {
                          "id": 16,
                          "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                          "successors": [
                            {
                              "id": 17,
                              "label": "let mediaItem: UserFileDataItem = new UserFileDataItem('', [], this.deviceId, i);",
                              "successors": [
                                {
                                  "id": 18,
                                  "label": "if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                                  "successors": [
                                    {
                                      "id": 19,
                                      "label": "mediaItem = userFileDataItemCache.get(mediaFileAssets[i].uri);",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 20,
                                  "label": "else {",
                                  "successors": [
                                    {
                                      "id": 21,
                                      "label": "userFileDataItemCache.set(mediaFileAssets[i].uri, mediaItem);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 22,
                              "label": "mediaItem.update(mediaFileAssets[i]);\ngroupDataItem.push(mediaItem);",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "for (let i = 0; i < mediaFileAssets.length; i++) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 23,
              "label": "Log.info(TAG, 'reload finish');\nreturn groupDataItem;",
              "successors": []
            }
          ]
        },
        {
          "name": "reloadGridGroupItemData",
          "type": "function",
          "start_line": 117,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {\n    Log.info(TAG, 'reloadGridGroupItemData');\n    let groupDataItem: UserFileDataItem[] = [];\n    let mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);\n    if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new FavorUserFileDataItem('', [], i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          Log.info(TAG, 'hasKey');\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new TrashUserFileDataItem('', [], i);\n        if (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    } else {\n      for (let i = 0;i < mediaFileAssets.length; i++) {\n        let item = new UserFileDataItem('', [], this.deviceId, i);\n        if (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {\n          item = userFileDataItemCache.get(mediaFileAssets[i].uri);\n        } else {\n          userFileDataItemCache.set(mediaFileAssets[i].uri, item);\n        }\n        item.update(mediaFileAssets[i]);\n        groupDataItem.push(item);\n      }\n    }\n    Log.info(TAG, 'reload finish');\n    return groupDataItem;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadGridGroupItemData(): Promise<UserFileDataItem[]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'reloadGridGroupItemData');\nlet groupDataItem: UserFileDataItem[] = [];\nlet mediaFileAssets = await this.getMediaItemFileAssets(this.albumName, this.albumType, this.albumSubType);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumId === MediaConstants.ALBUM_ID_FAVOR) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let item = new FavorUserFileDataItem('', [], i);\nif (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "Log.info(TAG, 'hasKey');\nitem = userFileDataItemCache.get(mediaFileAssets[i].uri);",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                      "successors": [
                                        {
                                          "id": 4,
                                          "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 7,
                                  "label": "userFileDataItemCache.set(mediaFileAssets[i].uri, item);",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                      "successors": [
                                        {
                                          "id": 4,
                                          "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "} else if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "let item = new TrashUserFileDataItem('', [], i);\nif (trashUserFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "item = trashUserFileDataItemCache.get(mediaFileAssets[i].uri);",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 13,
                                      "label": "trashUserFileDataItemCache.set(mediaFileAssets[i].uri, item);",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 15,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "let item = new UserFileDataItem('', [], this.deviceId, i);\nif (userFileDataItemCache.hasKey(mediaFileAssets[i].uri)) {",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "item = userFileDataItemCache.get(mediaFileAssets[i].uri);",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 19,
                                          "label": "userFileDataItemCache.set(mediaFileAssets[i].uri, item);",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "item.update(mediaFileAssets[i]);\ngroupDataItem.push(item);",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "for (let i = 0;i < mediaFileAssets.length; i++) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 21,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 22,
                          "label": "}",
                          "successors": [
                            {
                              "id": 23,
                              "label": "Log.info(TAG, 'reload finish');\nreturn groupDataItem;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getMediaItemFileAssets",
          "type": "function",
          "start_line": 160,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getMediaItemFileAssets(albumName: string, albumType: number, albumSubType: number): Promise<photoAccessHelper.PhotoAsset[]> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    predicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\n    let fetchOption = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    Log.info(TAG, 'albumName:' + albumName);\n    if (albumType === MediaConstants.ALBUM_TYPE_ALL) {\n      return await userFileModel.getAllMediaItems();\n    } else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {\n      return await userFileModel.getAllMovingPhotoItems();\n    }\n    let emptyPredicates = new dataSharePredicates.DataSharePredicates();\n    emptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\n    let emptyFetchOption = {\n      fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n      predicates: emptyPredicates\n    };\n    return await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.AlbumKeys.ALBUM_NAME, albumName)\nlet fetchOption = {\n  fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n  predicates: predicates\n};\nLog.info(TAG, 'albumName:' + albumName);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (albumType === MediaConstants.ALBUM_TYPE_ALL) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  return await userFileModel.getAllMediaItems();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "} else if (albumType === MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "  return await userFileModel.getAllMovingPhotoItems();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "let emptyPredicates = new dataSharePredicates.DataSharePredicates();\nemptyPredicates.orderByDesc(photoAccessHelper.PhotoKeys.DATE_ADDED);\nlet emptyFetchOption = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: emptyPredicates\n};\nreturn await userFileModel.getAllMediaItemsByType(albumType, albumSubType, fetchOption, emptyFetchOption);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCount",
          "type": "function",
          "start_line": 182,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": "  private getCount(): number {\n    let contentWidth = screenManager.getWinWidth();\n    let maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\n    let columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\n    let contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\n    let rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;\n    return columns * rows;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let contentWidth = screenManager.getWinWidth();\nlet maxThumbWidth = px2vp(Constants.GRID_IMAGE_SIZE) * Constants.GRID_MAX_SIZE_RATIO;\nlet columns = Math.max(Constants.GRID_MIN_COUNT, Math.ceil((contentWidth + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)));\nlet contentHeight = screenManager.getWinHeight() - Constants.ACTION_BAR_HEIGHT - screenManager.getNaviBarHeight();\nlet rows = Math.ceil((contentHeight + Constants.GRID_GUTTER) / (maxThumbWidth + Constants.GRID_GUTTER)) + 4;",
              "successors": [
                {
                  "id": 2,
                  "label": "return columns * rows;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class GroupDataImpl {\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private albumId: string = '';\n  private deviceId: string = '';\n  private albumType: number = -1;\n  private albumSubType: number = -1;\n  private albumName: string = '';\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class GroupDataImpl {",
          "successors": [
            {
              "id": 2,
              "label": "  private selectType: number = MediaConstants.SELECT_TYPE_ALL;",
              "successors": []
            },
            {
              "id": 3,
              "label": "  private albumId: string = '';",
              "successors": []
            },
            {
              "id": 4,
              "label": "  private deviceId: string = '';",
              "successors": []
            },
            {
              "id": 5,
              "label": "  private albumType: number = -1;",
              "successors": []
            },
            {
              "id": 6,
              "label": "  private albumSubType: number = -1;",
              "successors": []
            },
            {
              "id": 7,
              "label": "  private albumName: string = '';",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { Log } from '../utils/Log';\nimport { Constants } from '../constants/Constants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { screenManager } from './ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\nimport { FavorUserFileDataItem } from '../base/FavorUserFileDataItem';\nimport { userFileDataItemCache } from '../base/UserFileDataItemCache';\nimport { trashUserFileDataItemCache } from '../base/TrashUserFileDataItemCache';\nimport { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\n\nconst TAG = 'GroupDataImpl';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
      "successors": [
        {
          "id": 2,
          "label": "import { Log } from '../utils/Log';",
          "successors": [
            {
              "id": 3,
              "label": "import { Constants } from '../constants/Constants';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { userFileModel } from '../base/UserFileModel';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { screenManager } from './ScreenManager';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import { MediaConstants } from '../constants/MediaConstants';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import { UserFileDataItem } from '../base/UserFileDataItem';",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "import { FavorUserFileDataItem } from '../base/FavorUserFileDataItem';",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "import { userFileDataItemCache } from '../base/UserFileDataItemCache';",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "import { trashUserFileDataItemCache } from '../base/TrashUserFileDataItemCache';",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "import { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "import dataSharePredicates from '@ohos.data.dataSharePredicates';",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "const TAG = 'GroupDataImpl';",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}