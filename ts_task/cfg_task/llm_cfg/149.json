{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [
    {
      "name": "srgbForwardTransform",
      "type": "function",
      "start_line": 12,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": "const srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)",
      "blocks": [
        {
          "id": 1,
          "label": "const srgbForwardTransform = (C: number): number => (",
          "successors": [
            {
              "id": 2,
              "label": "C <= 0.0031308",
              "successors": [
                {
                  "id": 3,
                  "label": "C * 12.92",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "1.055 * C ** (1 / 2.4) - 0.055",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "srgbReverseTransform",
      "type": "function",
      "start_line": 24,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "const srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)",
      "blocks": [
        {
          "id": 1,
          "label": "const srgbReverseTransform = (C: number): number => (",
          "successors": [
            {
              "id": 2,
              "label": "C <= 0.04045",
              "successors": [
                {
                  "id": 3,
                  "label": "C / 12.92",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "((C + 0.055) / 1.055) ** 2.4",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "fromXYZ",
      "type": "function",
      "start_line": 29,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "export function fromXYZ (xyz: XYZ): RGB {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function fromXYZ (xyz: XYZ): RGB {",
          "successors": [
            {
              "id": 2,
              "label": "  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix",
              "successors": [
                {
                  "id": 3,
                  "label": "  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "  }",
                          "successors": [
                            {
                              "id": 6,
                              "label": "  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "toXYZ",
      "type": "function",
      "start_line": 48,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "export function toXYZ ({ r, g, b }: RGB): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  r = transform(r / 255)\n  g = transform(g / 255)\n  b = transform(b / 255)\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n  return xyz\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function toXYZ ({ r, g, b }: RGB): XYZ {",
          "successors": [
            {
              "id": 2,
              "label": "  const xyz: XYZ = [0, 0, 0]",
              "successors": [
                {
                  "id": 3,
                  "label": "  const transform = srgbReverseTransform",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  const matrix = srgbReverseMatrix",
                      "successors": [
                        {
                          "id": 5,
                          "label": "  r = transform(r / 255)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "  g = transform(g / 255)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "  b = transform(b / 255)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "for (let i = 0; i < 3; ++i) {",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "  xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "return xyz",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// Utilities\nimport { clamp } from '@/util/helpers'\n// Types\nimport type { RGB, XYZ } from '../colorUtils'\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n// Forward gamma adjust\n)\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n// Reverse gamma adjust\n)\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "// Utilities\nimport { clamp } from '@/util/helpers'",
      "successors": [
        {
          "id": 2,
          "label": "// Types\nimport type { RGB, XYZ } from '../colorUtils'",
          "successors": [
            {
              "id": 3,
              "label": "// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]",
              "successors": [
                {
                  "id": 4,
                  "label": "// Forward gamma adjust\n)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]",
                      "successors": [
                        {
                          "id": 6,
                          "label": "// Reverse gamma adjust\n)\n}\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}