{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 80,
  "functions": [],
  "classes": [
    {
      "name": "UserFileObserver",
      "type": "class",
      "start_line": 25,
      "end_line": 78,
      "functions": [
        {
          "name": "registerObserver",
          "type": "function",
          "start_line": 33,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');",
              "successors": [
                {
                  "id": 2,
                  "label": "if (callback == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    Log.warn(TAG, 'registerObserver with empty callback');\n    return;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (this.callbacks.indexOf(callback) < 0) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.callbacks.push(callback);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (this.callbacks.length === 1) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "    Log.info(TAG, 'registerObserver register media');\n    try {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "label": "} catch (err) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "    Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} else {",
                  "successors": [
                    {
                      "id": 12,
                      "label": "    Log.info(TAG, 'registerObserver already exist');\n    return;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "sendNotify",
          "type": "function",
          "start_line": 64,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "sendNotify(mediaType: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    for (let callback of this.callbacks) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        callback.onChange(mediaType);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "unregisterObserver",
          "type": "function",
          "start_line": 71,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "unregisterObserver(callback: UserFileObserverCallback | null): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'unregisterObserver');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const pos = this.callbacks.indexOf(callback);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (pos >= 0) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.callbacks.splice(pos, 1);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class UserFileObserver {",
          "successors": [
            {
              "id": 2,
              "label": "callbacks: UserFileObserverCallback[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';",
                  "successors": [
                    {
                      "id": 4,
                      "label": "private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';",
                      "successors": [
                        {
                          "id": 5,
                          "label": "private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';",
                          "successors": [
                            {
                              "id": 6,
                              "label": "private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from './UserFileModel';\nimport { UserFileObserverCallback } from './UserFileObserverCallback';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nconst TAG = 'UserFileObserver';\n\n}\n\nexport let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);",
  "blocks": [
    {
      "id": 1,
      "label": "import { stashOrGetObject } from '../utils/SingleInstanceUtils';",
      "successors": [
        {
          "id": 2,
          "label": "import { Log } from '../utils/Log';",
          "successors": [
            {
              "id": 3,
              "label": "import { MediaConstants } from '../constants/MediaConstants';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { userFileModel } from './UserFileModel';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { UserFileObserverCallback } from './UserFileObserverCallback';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "const TAG = 'UserFileObserver';",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "export let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}