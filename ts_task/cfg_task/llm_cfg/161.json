{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 65,
  "functions": [
    {
      "name": "getCalcRows",
      "type": "function",
      "start_line": 5,
      "end_line": 56,
      "functions": [
        {
          "name": "(anonymous function)",
          "type": "function",
          "start_line": 15,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    .forEach((rowItem) => {\n      const { filled, ...restItem } = rowItem;\n      if (filled) {\n        tmpRow.push(restItem);\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n        return;\n      }\n      const restSpan = mergedColumn - count;\n      count += rowItem.span || 1;\n      if (count >= mergedColumn) {\n        if (count > mergedColumn) {\n          exceed = true;\n          tmpRow.push({ ...restItem, span: restSpan });\n        } else {\n          tmpRow.push(restItem);\n        }\n        rows.push(tmpRow);\n        // reset\n        tmpRow = [];\n        count = 0;\n      } else {\n        tmpRow.push(restItem);\n      }\n    });",
          "blocks": [
            {
              "id": 1,
              "label": ".forEach((rowItem) => {",
              "successors": [
                {
                  "id": 2,
                  "label": "const { filled, ...restItem } = rowItem;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (filled) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "tmpRow.push(restItem);\nrows.push(tmpRow);\n// reset\ntmpRow = [];\ncount = 0;\nreturn;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "const restSpan = mergedColumn - count;\ncount += rowItem.span || 1;",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (count >= mergedColumn) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if (count > mergedColumn) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "exceed = true;\ntmpRow.push({ ...restItem, span: restSpan });",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "else {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "tmpRow.push(restItem);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "rows.push(tmpRow);\n// reset\ntmpRow = [];\ncount = 0;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 13,
                              "label": "tmpRow.push(restItem);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "function getCalcRows(\n  rowItems: InternalDescriptionsItemType[],\n  mergedColumn: number,\n): [rows: InternalDescriptionsItemType[][], exceed: boolean] {\n  let rows: InternalDescriptionsItemType[][] = [];\n  let tmpRow: InternalDescriptionsItemType[] = [];\n  let exceed = false;\n  let count = 0;\n  rowItems\n    .filter((n) => n)\n    });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map((rows) => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - count + 1;\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function getCalcRows(rowItems: InternalDescriptionsItemType[], mergedColumn: number): [rows: InternalDescriptionsItemType[][], exceed: boolean] {\n  let rows: InternalDescriptionsItemType[][] = [];\n  let tmpRow: InternalDescriptionsItemType[] = [];\n  let exceed = false;\n  let count = 0;",
          "successors": [
            {
              "id": 2,
              "label": "rowItems.filter((n) => n);",
              "successors": [
                {
                  "id": 3,
                  "label": "if (tmpRow.length > 0) {\n  rows.push(tmpRow);\n}",
                  "successors": [
                    {
                      "id": 4,
                      "label": "rows = rows.map((rows) => {\n  const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n  if (count < mergedColumn) {\n    const last = rows[rows.length - 1];\n    last.span = mergedColumn - count + 1;\n    return rows;\n  }\n  return rows;\n});",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return [rows, exceed];",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "useRow",
      "type": "function",
      "start_line": 57,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": "const useRow = (mergedColumn: number, items: InternalDescriptionsItemType[]) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.');\n  }\n  return rows;\n};",
      "blocks": [
        {
          "id": 1,
          "label": "const useRow = (mergedColumn: number, items: InternalDescriptionsItemType[]) => {",
          "successors": [
            {
              "id": 2,
              "label": "  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);",
              "successors": [
                {
                  "id": 3,
                  "label": "  if (process.env.NODE_ENV !== 'production') {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    const warning = devUseWarning('Descriptions');",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.');",
                          "successors": [
                            {
                              "id": 6,
                              "label": "  }",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "  return rows;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "};",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "  return rows;",
                      "successors": [
                        {
                          "id": 8,
                          "label": "};",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { useMemo } from 'react';\nimport type { InternalDescriptionsItemType } from '..';\nimport { devUseWarning } from '../../_util/warning';\n// Calculate the sum of span in a row\n}\n};\nexport default useRow;",
  "blocks": [
    {
      "id": 1,
      "label": "import { useMemo } from 'react';",
      "successors": [
        {
          "id": 2,
          "label": "import type { InternalDescriptionsItemType } from '..';",
          "successors": [
            {
              "id": 3,
              "label": "import { devUseWarning } from '../../_util/warning';",
              "successors": [
                {
                  "id": 4,
                  "label": "// Calculate the sum of span in a row",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "};",
                          "successors": [
                            {
                              "id": 7,
                              "label": "export default useRow;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}