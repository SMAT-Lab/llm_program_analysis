{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 165,
  "functions": [
    {
      "name": "isStringArray",
      "type": "function",
      "start_line": 3,
      "end_line": 5,
      "functions": [],
      "classes": [],
      "simplified_code": "function isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && (value as any[]).every(elem => typeof elem === 'string')\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function isStringArray(value: any): value is string[] {",
          "successors": [
            {
              "id": 2,
              "label": "return Array.isArray(value) && (value as any[]).every(elem => typeof elem === 'string')",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "isStrArrayOrUndefined",
      "type": "function",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "simplified_code": "function isStrArrayOrUndefined(arg: any): arg is string[] | undefined {\n  return ((typeof arg === 'undefined') || isStringArray(arg))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function isStrArrayOrUndefined(arg: any): arg is string[] | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "    return ((typeof arg === 'undefined') || isStringArray(arg))",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "SemanticTokensBuilder",
      "type": "class",
      "start_line": 9,
      "end_line": 165,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 18,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(legend?: SemanticTokensLegend) {\n    this._prevLine = 0\n    this._prevChar = 0\n    this._dataIsSortedAndDeltaEncoded = true\n    this._data = []\n    this._dataLen = 0\n    this._tokenTypeStrToInt = new Map<string, number>()\n    this._tokenModifierStrToInt = new Map<string, number>()\n    this._hasLegend = false\n    if (legend) {\n      this._hasLegend = true\n      for (let i = 0, len = legend.tokenTypes.length; i < len; i++) {\n        this._tokenTypeStrToInt.set(legend.tokenTypes[i], i)\n      }\n      for (let i = 0, len = legend.tokenModifiers.length; i < len; i++) {\n        this._tokenModifierStrToInt.set(legend.tokenModifiers[i], i)\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(legend?: SemanticTokensLegend) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this._prevLine = 0\nthis._prevChar = 0\nthis._dataIsSortedAndDeltaEncoded = true\nthis._data = []\nthis._dataLen = 0\nthis._tokenTypeStrToInt = new Map<string, number>()\nthis._tokenModifierStrToInt = new Map<string, number>()\nthis._hasLegend = false",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (legend) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this._hasLegend = true",
                          "successors": [
                            {
                              "id": 5,
                              "label": "for (let i = 0, len = legend.tokenTypes.length; i < len; i++) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this._tokenTypeStrToInt.set(legend.tokenTypes[i], i)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "for (let i = 0, len = legend.tokenModifiers.length; i < len; i++) {",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "this._tokenModifierStrToInt.set(legend.tokenModifiers[i], i)",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "}",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "push",
          "type": "function",
          "start_line": 39,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  public push(arg0: any, arg1: any, arg2: any, arg3?: any, arg4?: any): void {\n    if (typeof arg0 === 'number' && typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'number' && (typeof arg4 === 'number' || typeof arg4 === 'undefined')) {\n      if (typeof arg4 === 'undefined') {\n        arg4 = 0\n      }\n      // 1st overload\n      return this._pushEncoded(arg0, arg1, arg2, arg3, arg4)\n    }\n    if (Range.is(arg0) && typeof arg1 === 'string' && isStrArrayOrUndefined(arg2)) {\n      // 2nd overload\n      return this._push(arg0, arg1, arg2)\n    }\n    throw new Error('Illegal argument')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public push(arg0: any, arg1: any, arg2: any, arg3?: any, arg4?: any): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (typeof arg0 === 'number' && typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'number' && (typeof arg4 === 'number' || typeof arg4 === 'undefined')) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (typeof arg4 === 'undefined') {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "arg4 = 0",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return this._pushEncoded(arg0, arg1, arg2, arg3, arg4)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "}",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return this._pushEncoded(arg0, arg1, arg2, arg3, arg4)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return this._pushEncoded(arg0, arg1, arg2, arg3, arg4)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "if (Range.is(arg0) && typeof arg1 === 'string' && isStrArrayOrUndefined(arg2)) {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return this._push(arg0, arg1, arg2)",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "throw new Error('Illegal argument')",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_push",
          "type": "function",
          "start_line": 53,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "  private _push(range: Range, tokenType: string, tokenModifiers?: string[]): void {\n    if (!this._hasLegend) {\n      throw new Error('Legend must be provided in constructor')\n    }\n    if (range.start.line !== range.end.line) {\n      throw new Error('`range` cannot span multiple lines')\n    }\n    if (!this._tokenTypeStrToInt.has(tokenType)) {\n      throw new Error('`tokenType` is not in the provided legend')\n    }\n    const line = range.start.line\n    const char = range.start.character\n    const length = range.end.character - range.start.character\n    const nTokenType = this._tokenTypeStrToInt.get(tokenType)!\n    let nTokenModifiers = 0\n    if (tokenModifiers) {\n      for (const tokenModifier of tokenModifiers) {\n        if (!this._tokenModifierStrToInt.has(tokenModifier)) {\n          throw new Error('`tokenModifier` is not in the provided legend')\n        }\n        const nTokenModifier = this._tokenModifierStrToInt.get(tokenModifier)!\n        nTokenModifiers |= (1 << nTokenModifier) >>> 0\n      }\n    }\n    this._pushEncoded(line, char, length, nTokenType, nTokenModifiers)\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private _push(range: Range, tokenType: string, tokenModifiers?: string[]): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!this._hasLegend) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw new Error('Legend must be provided in constructor')",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (range.start.line !== range.end.line) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "throw new Error('`range` cannot span multiple lines')",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "if (!this._tokenTypeStrToInt.has(tokenType)) {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "throw new Error('`tokenType` is not in the provided legend')",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "const line = range.start.line\nconst char = range.start.character\nconst length = range.end.character - range.start.character\nconst nTokenType = this._tokenTypeStrToInt.get(tokenType)!\nlet nTokenModifiers = 0",
                  "successors": [
                    {
                      "id": 9,
                      "label": "if (tokenModifiers) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "for (const tokenModifier of tokenModifiers) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "if (!this._tokenModifierStrToInt.has(tokenModifier)) {",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "throw new Error('`tokenModifier` is not in the provided legend')",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "const nTokenModifier = this._tokenModifierStrToInt.get(tokenModifier)!\nnTokenModifiers |= (1 << nTokenModifier) >>> 0",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "label": "this._pushEncoded(line, char, length, nTokenType, nTokenModifiers)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_pushEncoded",
          "type": "function",
          "start_line": 79,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": "  private _pushEncoded(line: number, char: number, length: number, tokenType: number, tokenModifiers: number): void {\n    if (this._dataIsSortedAndDeltaEncoded && (line < this._prevLine || (line === this._prevLine && char < this._prevChar))) {\n      // push calls were ordered and are no longer ordered\n      this._dataIsSortedAndDeltaEncoded = false\n      // Remove delta encoding from data\n      const tokenCount = (this._data.length / 5) | 0\n      let prevLine = 0\n      let prevChar = 0\n      for (let i = 0; i < tokenCount; i++) {\n        let line = this._data[5 * i]\n        let char = this._data[5 * i + 1]\n        if (line === 0) {\n          // on the same line as previous token\n          line = prevLine\n          char += prevChar\n        } else {\n          // on a different line than previous token\n          line += prevLine\n        }\n        this._data[5 * i] = line\n        this._data[5 * i + 1] = char\n        prevLine = line\n        prevChar = char\n      }\n    }\n    let pushLine = line\n    let pushChar = char\n    if (this._dataIsSortedAndDeltaEncoded && this._dataLen > 0) {\n      pushLine -= this._prevLine\n      if (pushLine === 0) {\n        pushChar -= this._prevChar\n      }\n    }\n    this._data[this._dataLen++] = pushLine\n    this._data[this._dataLen++] = pushChar\n    this._data[this._dataLen++] = length\n    this._data[this._dataLen++] = tokenType\n    this._data[this._dataLen++] = tokenModifiers\n    this._prevLine = line\n    this._prevChar = char\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private _pushEncoded(line: number, char: number, length: number, tokenType: number, tokenModifiers: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this._dataIsSortedAndDeltaEncoded && (line < this._prevLine || (line === this._prevLine && char < this._prevChar))) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this._dataIsSortedAndDeltaEncoded = false",
                      "successors": [
                        {
                          "id": 4,
                          "label": "const tokenCount = (this._data.length / 5) | 0\nlet prevLine = 0\nlet prevChar = 0",
                          "successors": [
                            {
                              "id": 5,
                              "label": "for (let i = 0; i < tokenCount; i++) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "let line = this._data[5 * i]\nlet char = this._data[5 * i + 1]",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "if (line === 0) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "line = prevLine\nchar += prevChar",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "} else {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "line += prevLine",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "this._data[5 * i] = line\nthis._data[5 * i + 1] = char\nprevLine = line\nprevChar = char"
                                                    },
                                                    {
                                                      "id": 12,
                                                      "label": "}"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "label": "}"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 14,
                  "label": "let pushLine = line\nlet pushChar = char",
                  "successors": [
                    {
                      "id": 15,
                      "label": "if (this._dataIsSortedAndDeltaEncoded && this._dataLen > 0) {",
                      "successors": [
                        {
                          "id": 16,
                          "label": "pushLine -= this._prevLine\nif (pushLine === 0) {\npushChar -= this._prevChar\n}"
                        },
                        {
                          "id": 17,
                          "label": "}"
                        }
                      ]
                    },
                    {
                      "id": 18,
                      "label": "this._data[this._dataLen++] = pushLine\nthis._data[this._dataLen++] = pushChar\nthis._data[this._dataLen++] = length\nthis._data[this._dataLen++] = tokenType\nthis._data[this._dataLen++] = tokenModifiers\nthis._prevLine = line\nthis._prevChar = char"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_sortAndDeltaEncode",
          "type": "function",
          "start_line": 120,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "  private static _sortAndDeltaEncode(data: number[]): number[] {\n    let pos: number[] = []\n    const tokenCount = (data.length / 5) | 0\n    for (let i = 0; i < tokenCount; i++) {\n      pos[i] = i\n    }\n    pos.sort((a, b) => {\n      const aLine = data[5 * a]\n      const bLine = data[5 * b]\n      if (aLine === bLine) {\n        const aChar = data[5 * a + 1]\n        const bChar = data[5 * b + 1]\n        return aChar - bChar\n      }\n      return aLine - bLine\n    })\n    const result = new Array<number>(data.length)\n    let prevLine = 0\n    let prevChar = 0\n    for (let i = 0; i < tokenCount; i++) {\n      const srcOffset = 5 * pos[i]\n      const line = data[srcOffset + 0]\n      const char = data[srcOffset + 1]\n      const length = data[srcOffset + 2]\n      const tokenType = data[srcOffset + 3]\n      const tokenModifiers = data[srcOffset + 4]\n      const pushLine = line - prevLine\n      const pushChar = (pushLine === 0 ? char - prevChar : char)\n      const dstOffset = 5 * i\n      result[dstOffset + 0] = pushLine\n      result[dstOffset + 1] = pushChar\n      result[dstOffset + 2] = length\n      result[dstOffset + 3] = tokenType\n      result[dstOffset + 4] = tokenModifiers\n      prevLine = line\n      prevChar = char\n    }\n    return result\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "  private static _sortAndDeltaEncode(data: number[]): number[] {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let pos: number[] = []",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    const tokenCount = (data.length / 5) | 0",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    for (let i = 0; i < tokenCount; i++) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "      pos[i] = i",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    }",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    pos.sort((a, b) => {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "      const aLine = data[5 * a]",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "      const bLine = data[5 * b]",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "      if (aLine === bLine) {",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "        const aChar = data[5 * a + 1]",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "        const bChar = data[5 * b + 1]",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "        return aChar - bChar",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "      }",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "      return aLine - bLine",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "    })",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "    const result = new Array<number>(data.length)",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "label": "    let prevLine = 0",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 19,
                                                                                      "label": "    let prevChar = 0",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 20,
                                                                                          "label": "    for (let i = 0; i < tokenCount; i++) {",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 21,
                                                                                              "label": "      const srcOffset = 5 * pos[i]",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 22,
                                                                                                  "label": "      const line = data[srcOffset + 0]",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 23,
                                                                                                      "label": "      const char = data[srcOffset + 1]",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 24,
                                                                                                          "label": "      const length = data[srcOffset + 2]",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 25,
                                                                                                              "label": "      const tokenType = data[srcOffset + 3]",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 26,
                                                                                                                  "label": "      const tokenModifiers = data[srcOffset + 4]",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 27,
                                                                                                                      "label": "      const pushLine = line - prevLine",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 28,
                                                                                                                          "label": "      const pushChar = (pushLine === 0 ? char - prevChar : char)",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 29,
                                                                                                                              "label": "      const dstOffset = 5 * i",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 30,
                                                                                                                                  "label": "      result[dstOffset + 0] = pushLine",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 31,
                                                                                                                                      "label": "      result[dstOffset + 1] = pushChar",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 32,
                                                                                                                                          "label": "      result[dstOffset + 2] = length",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 33,
                                                                                                                                              "label": "      result[dstOffset + 3] = tokenType",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 34,
                                                                                                                                                  "label": "      result[dstOffset + 4] = tokenModifiers",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 35,
                                                                                                                                                      "label": "      prevLine = line",
                                                                                                                                                      "successors": [
                                                                                                                                                        {
                                                                                                                                                          "id": 36,
                                                                                                                                                          "label": "      prevChar = char",
                                                                                                                                                          "successors": [
                                                                                                                                                            {
                                                                                                                                                              "id": 37,
                                                                                                                                                              "label": "    }",
                                                                                                                                                              "successors": [
                                                                                                                                                                {
                                                                                                                                                                  "id": 38,
                                                                                                                                                                  "label": "    return result",
                                                                                                                                                                  "successors": [
                                                                                                                                                                    {
                                                                                                                                                                      "id": 39,
                                                                                                                                                                      "label": "  }",
                                                                                                                                                                      "successors": []
                                                                                                                                                                    }
                                                                                                                                                                  ]
                                                                                                                                                                }
                                                                                                                                                              ]
                                                                                                                                                            }
                                                                                                                                                          ]
                                                                                                                                                        }
                                                                                                                                                      ]
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "build",
          "type": "function",
          "start_line": 159,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": "  public build(resultId?: string): SemanticTokens {\n    if (!this._dataIsSortedAndDeltaEncoded) {\n      return { data: SemanticTokensBuilder._sortAndDeltaEncode(this._data), resultId }\n    }\n    return { data: this._data, resultId }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public build(resultId?: string): SemanticTokens {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!this._dataIsSortedAndDeltaEncoded) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return { data: SemanticTokensBuilder._sortAndDeltaEncode(this._data), resultId }",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return { data: this._data, resultId }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class SemanticTokensBuilder {\n  private _prevLine: number\n  private _prevChar: number\n  private _dataIsSortedAndDeltaEncoded: boolean\n  private _data: number[]\n  private _dataLen: number\n  private _tokenTypeStrToInt: Map<string, number>\n  private _tokenModifierStrToInt: Map<string, number>\n  private _hasLegend: boolean\n  }\n  public push(line: number, char: number, length: number, tokenType: number, tokenModifiers?: number): void\n  public push(range: Range, tokenType: string, tokenModifiers?: string[]): void\n  }\n  }\n  }\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class SemanticTokensBuilder {",
          "successors": [
            {
              "id": 2,
              "label": "  private _prevLine: number",
              "successors": [
                {
                  "id": 3,
                  "label": "  private _prevChar: number",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  private _dataIsSortedAndDeltaEncoded: boolean",
                      "successors": [
                        {
                          "id": 5,
                          "label": "  private _data: number[]",
                          "successors": [
                            {
                              "id": 6,
                              "label": "  private _dataLen: number",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "  private _tokenTypeStrToInt: Map<string, number>",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "  private _tokenModifierStrToInt: Map<string, number>",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "  private _hasLegend: boolean",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "  public push(line: number, char: number, length: number, tokenType: number, tokenModifiers?: number): void",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "  public push(range: Range, tokenType: string, tokenModifiers?: string[]): void",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "}",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "}",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "'use strict'\nimport { Range, SemanticTokens, SemanticTokensLegend } from \"vscode-languageserver-types\"\n}\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "'use strict'",
      "successors": [
        {
          "id": 2,
          "label": "import { Range, SemanticTokens, SemanticTokensLegend } from \"vscode-languageserver-types\"",
          "successors": []
        }
      ]
    }
  ]
}