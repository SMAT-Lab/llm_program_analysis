{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "Log",
      "type": "class",
      "start_line": 18,
      "end_line": 57,
      "functions": [
        {
          "name": "debug",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static debug(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_DEBUG) {\n      HiLog.debug(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static debug(TAG: string, message: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.LOG_LEVEL <= this.LEVEL_DEBUG) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "HiLog.debug(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "info",
          "type": "function",
          "start_line": 34,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static info(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_INFO) {\n      HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static info(TAG: string, message: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.LOG_LEVEL <= this.LEVEL_INFO) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "warn",
          "type": "function",
          "start_line": 40,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static warn(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_WARN) {\n      HiLog.warn(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static warn(TAG: string, message: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.LOG_LEVEL <= this.LEVEL_WARN) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  HiLog.warn(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "error",
          "type": "function",
          "start_line": 46,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static error(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_ERROR) {\n      HiLog.error(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static error(TAG: string, message: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.LOG_LEVEL <= this.LEVEL_ERROR) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "HiLog.error(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fatal",
          "type": "function",
          "start_line": 52,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static fatal(TAG: string, message: string): void {\n    if (this.LOG_LEVEL <= this.LEVEL_FATAL) {\n      HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.LOG_LEVEL <= this.LEVEL_FATAL) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    HiLog.info(this.DOMAIN, this.TAG, '[' + TAG + ']: ' + message);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class Log {\n  private static readonly DOMAIN = 0xF811;\n  private static readonly TAG: string = '[Sample_Photos]';\n  public static readonly LEVEL_DEBUG = HiLog.LogLevel.DEBUG;\n  public static readonly LEVEL_INFO = HiLog.LogLevel.INFO;\n  public static readonly LEVEL_WARN = HiLog.LogLevel.WARN;\n  public static readonly LEVEL_ERROR = HiLog.LogLevel.ERROR;\n  public static readonly LEVEL_FATAL = HiLog.LogLevel.FATAL;\n  public static LOG_LEVEL = Log.LEVEL_INFO;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class Log {",
          "successors": [
            {
              "id": 2,
              "label": "private static readonly DOMAIN = 0xF811;",
              "successors": [
                {
                  "id": 3,
                  "label": "private static readonly TAG: string = '[Sample_Photos]';",
                  "successors": [
                    {
                      "id": 4,
                      "label": "public static readonly LEVEL_DEBUG = HiLog.LogLevel.DEBUG;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "public static readonly LEVEL_INFO = HiLog.LogLevel.INFO;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "public static readonly LEVEL_WARN = HiLog.LogLevel.WARN;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "public static readonly LEVEL_ERROR = HiLog.LogLevel.ERROR;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "public static readonly LEVEL_FATAL = HiLog.LogLevel.FATAL;",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "public static LOG_LEVEL = Log.LEVEL_INFO;",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport HiLog from '@ohos.hilog';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import HiLog from '@ohos.hilog';",
      "successors": []
    }
  ]
}