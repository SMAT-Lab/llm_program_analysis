{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 41,
  "functions": [
    {
      "name": "startAbility",
      "type": "function",
      "start_line": 23,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function startAbility(want: Want): Promise<void> {\n  try {\n    let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n    await appContext.startAbility(want);\n    Log.debug(TAG, 'raul startAbility complete');\n  } catch (error) {\n    Log.error(TAG, 'raul startAbility failed, error: ' + JSON.stringify(error));\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function startAbility(want: Want): Promise<void> {",
          "successors": [
            {
              "id": 2,
              "label": "try {",
              "successors": [
                {
                  "id": 3,
                  "label": "let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await appContext.startAbility(want);",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.debug(TAG, 'raul startAbility complete');",
                          "successors": [
                            {
                              "id": 8,
                              "label": "} // end of try",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "} // end of function",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "label": "} catch (error) {",
              "successors": [
                {
                  "id": 7,
                  "label": "Log.error(TAG, 'raul startAbility failed, error: ' + JSON.stringify(error));",
                  "successors": [
                    {
                      "id": 8,
                      "label": "} // end of catch",
                      "successors": [
                        {
                          "id": 9,
                          "label": "} // end of function",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "terminateSelf",
      "type": "function",
      "start_line": 33,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function terminateSelf(): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelf();\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function terminateSelf(): Promise<void> {",
          "successors": [
            {
              "id": 2,
              "label": "  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;",
              "successors": [
                {
                  "id": 3,
                  "label": "  await appContext.terminateSelf();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "terminateSelfWithResult",
      "type": "function",
      "start_line": 38,
      "end_line": 41,
      "functions": [],
      "classes": [],
      "simplified_code": "export async function terminateSelfWithResult(parameter): Promise<void> {\n  let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;\n  await appContext.terminateSelfWithResult(parameter);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export async function terminateSelfWithResult(parameter): Promise<void> {",
          "successors": [
            {
              "id": 2,
              "label": "let appContext: common.UIAbilityContext = GlobalContext.getContext().getObject('appContext') as common.UIAbilityContext;",
              "successors": [
                {
                  "id": 3,
                  "label": "await appContext.terminateSelfWithResult(parameter);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Want from '@ohos.application.Want';\nimport common from '@ohos.app.ability.common';\nimport { Log } from './Log';\nimport { GlobalContext } from '../common/GlobalContext';\n\nconst TAG = 'AbilityUtils';\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import Want from '@ohos.application.Want';",
      "successors": [
        {
          "id": 2,
          "label": "import common from '@ohos.app.ability.common';",
          "successors": [
            {
              "id": 3,
              "label": "import { Log } from './Log';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { GlobalContext } from '../common/GlobalContext';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const TAG = 'AbilityUtils';",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}