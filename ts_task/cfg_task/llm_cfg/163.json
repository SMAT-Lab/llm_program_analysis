{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 59,
  "functions": [],
  "classes": [
    {
      "name": "UserDataSyncTrigger",
      "type": "class",
      "start_line": 15,
      "end_line": 59,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 16,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "\tconstructor(\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IViewsService viewsService: IViewsService,\n\t\t@IUserDataAutoSyncService userDataAutoSyncService: IUserDataAutoSyncService,\n\t\t@IHostService hostService: IHostService,\n\t) {\n\t\tsuper();\n\t\tconst event = Event.filter(\n\t\t\tEvent.any<string | undefined>(\n\t\t\t\tEvent.map(editorService.onDidActiveEditorChange, () => this.getUserDataEditorInputSource(editorService.activeEditor)),\n\t\t\t\tEvent.map(Event.filter(viewsService.onDidChangeViewContainerVisibility, e => e.id === VIEWLET_ID && e.visible), e => e.id)\n\t\t\t), source => source !== undefined);\n\t\tif (isWeb) {\n\t\t\tthis._register(Event.debounce<string, string[]>(\n\t\t\t\tEvent.any<string>(\n\t\t\t\t\tEvent.map(hostService.onDidChangeFocus, () => 'windowFocus'),\n\t\t\t\t\tEvent.map(event, source => source!),\n\t\t\t\t), (last, source) => last ? [...last, source] : [source], 1000)\n\t\t\t\t(sources => userDataAutoSyncService.triggerSync(sources, true, false)));\n\t\t} else {\n\t\t\tthis._register(event(source => userDataAutoSyncService.triggerSync([source!], true, false)));\n\t\t}\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(\n\t@IEditorService editorService: IEditorService,\n\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t@IViewsService viewsService: IViewsService,\n\t@IUserDataAutoSyncService userDataAutoSyncService: IUserDataAutoSyncService,\n\t@IHostService hostService: IHostService,\n) {\n\tsuper();",
              "successors": [
                {
                  "id": 2,
                  "label": "const event = Event.filter(\n\tEvent.any<string | undefined>(\n\t\tEvent.map(editorService.onDidActiveEditorChange, () => this.getUserDataEditorInputSource(editorService.activeEditor)),\n\t\tEvent.map(Event.filter(viewsService.onDidChangeViewContainerVisibility, e => e.id === VIEWLET_ID && e.visible), e => e.id)\n\t), source => source !== undefined);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (isWeb) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this._register(Event.debounce<string, string[]>(\n\tEvent.any<string>(\n\t\tEvent.map(hostService.onDidChangeFocus, () => 'windowFocus'),\n\t\tEvent.map(event, source => source!),\n\t), (last, source) => last ? [...last, source] : [source], 1000)\n\t(sources => userDataAutoSyncService.triggerSync(sources, true, false)));",
                          "successors": [
                            {
                              "id": 6,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "this._register(event(source => userDataAutoSyncService.triggerSync([source!], true, false)));",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUserDataEditorInputSource",
          "type": "function",
          "start_line": 40,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "\tprivate getUserDataEditorInputSource(editorInput: EditorInput | undefined): string | undefined {\n\t\tif (!editorInput) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (editorInput instanceof SettingsEditor2Input) {\n\t\t\treturn 'settingsEditor';\n\t\t}\n\t\tif (editorInput instanceof KeybindingsEditorInput) {\n\t\t\treturn 'keybindingsEditor';\n\t\t}\n\t\tconst resource = editorInput.resource;\n\t\tif (isEqual(resource, this.userDataProfilesService.defaultProfile.settingsResource)) {\n\t\t\treturn 'settingsEditor';\n\t\t}\n\t\tif (isEqual(resource, this.userDataProfilesService.defaultProfile.keybindingsResource)) {\n\t\t\treturn 'keybindingsEditor';\n\t\t}\n\t\treturn undefined;\n\t}",
          "blocks": [
            {
              "id": 1,
              "label": "private getUserDataEditorInputSource(editorInput: EditorInput | undefined): string | undefined {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!editorInput) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return undefined;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (editorInput instanceof SettingsEditor2Input) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return 'settingsEditor';",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "}",
                      "successors": [
                        {
                          "id": 8,
                          "label": "if (editorInput instanceof KeybindingsEditorInput) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return 'keybindingsEditor';",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "}",
                          "successors": [
                            {
                              "id": 11,
                              "label": "const resource = editorInput.resource;",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (isEqual(resource, this.userDataProfilesService.defaultProfile.settingsResource)) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "return 'settingsEditor';",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "if (isEqual(resource, this.userDataProfilesService.defaultProfile.keybindingsResource)) {",
                                      "successors": [
                                        {
                                          "id": 16,
                                          "label": "return 'keybindingsEditor';",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 17,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "return undefined;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 19,
              "label": "}",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export class UserDataSyncTrigger extends Disposable implements IWorkbenchContribution {\n\t}\n\t}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class UserDataSyncTrigger extends Disposable implements IWorkbenchContribution {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import { Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataAutoSyncService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { VIEWLET_ID } from '../../extensions/common/extensions.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { KeybindingsEditorInput } from '../../../services/preferences/browser/keybindingsEditorInput.js';\nimport { SettingsEditor2Input } from '../../../services/preferences/common/preferencesEditorInput.js';\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Event } from '../../../../base/common/event.js';",
      "successors": [
        {
          "id": 2,
          "label": "import { Disposable } from '../../../../base/common/lifecycle.js';",
          "successors": [
            {
              "id": 3,
              "label": "import { isWeb } from '../../../../base/common/platform.js';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { isEqual } from '../../../../base/common/resources.js';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import { IUserDataAutoSyncService } from '../../../../platform/userDataSync/common/userDataSync.js';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import { IWorkbenchContribution } from '../../../common/contributions.js';",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "import { EditorInput } from '../../../common/editor/editorInput.js';",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "import { IViewsService } from '../../../services/views/common/viewsService.js';",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "import { VIEWLET_ID } from '../../extensions/common/extensions.js';",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "import { IEditorService } from '../../../services/editor/common/editorService.js';",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "import { IHostService } from '../../../services/host/browser/host.js';",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "import { KeybindingsEditorInput } from '../../../services/preferences/browser/keybindingsEditorInput.js';",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "label": "import { SettingsEditor2Input } from '../../../services/preferences/common/preferencesEditorInput.js';",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}