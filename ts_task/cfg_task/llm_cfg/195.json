{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [],
  "classes": [
    {
      "name": "CalendarEventFindManyPreQueryHook",
      "type": "class",
      "start_line": 13,
      "end_line": 52,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 16,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}",
              "successors": []
            }
          ]
        },
        {
          "name": "execute",
          "type": "function",
          "start_line": 20,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      });\n    if (calendarChannelCalendarEventAssociations.length === 0) {\n      throw new NotFoundException();\n    }\n    await this.canAccessCalendarEventService.canAccessCalendarEvent(\n      authContext.user.id,\n      authContext.workspace.id,\n      calendarChannelCalendarEventAssociations,\n    );\n    return payload;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!payload?.filter?.id?.eq) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw new BadRequestException('id filter is required');",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (!authContext.user?.id) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "throw new BadRequestException('User id is required');",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      });",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "if (calendarChannelCalendarEventAssociations.length === 0) {",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "throw new NotFoundException();",
                                              "successors": []
                                            },
                                            {
                                              "id": 12,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "await this.canAccessCalendarEventService.canAccessCalendarEvent(\n      authContext.user.id,\n      authContext.workspace.id,\n      calendarChannelCalendarEventAssociations,\n    );",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "return payload;",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  ) {}\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class CalendarEventFindManyPreQueryHook implements WorkspaceQueryHookInstance",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import { BadRequestException, NotFoundException, Scope } from '@nestjs/common';\nimport { WorkspaceQueryHookInstance } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/interfaces/workspace-query-hook.interface';\nimport { FindManyResolverArgs } from 'src/engine/api/graphql/workspace-resolver-builder/interfaces/workspace-resolvers-builder.interface';\nimport { WorkspaceQueryHook } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';\nimport { TwentyORMManager } from 'src/engine/twenty-orm/twenty-orm.manager';\nimport { CanAccessCalendarEventService } from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service';\nimport { CalendarChannelEventAssociationWorkspaceEntity } from 'src/modules/calendar/common/standard-objects/calendar-channel-event-association.workspace-entity';\nimport { AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key: `calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { BadRequestException, NotFoundException, Scope } from '@nestjs/common';",
      "successors": [
        {
          "id": 2,
          "label": "import { WorkspaceQueryHookInstance } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/interfaces/workspace-query-hook.interface';",
          "successors": [
            {
              "id": 3,
              "label": "import { FindManyResolverArgs } from 'src/engine/api/graphql/workspace-resolver-builder/interfaces/workspace-resolvers-builder.interface';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { WorkspaceQueryHook } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { TwentyORMManager } from 'src/engine/twenty-orm/twenty-orm.manager';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import { CanAccessCalendarEventService } from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import { CalendarChannelEventAssociationWorkspaceEntity } from 'src/modules/calendar/common/standard-objects/calendar-channel-event-association.workspace-entity';",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "import { AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "@WorkspaceQueryHook({\n  key: `calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}