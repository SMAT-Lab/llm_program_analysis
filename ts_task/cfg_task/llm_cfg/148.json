{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 303,
  "functions": [
    {
      "name": "scheduleNotificationAsync",
      "type": "function",
      "start_line": 18,
      "end_line": 29,
      "functions": [],
      "classes": [],
      "simplified_code": "export default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {\n  if (!NotificationScheduler.scheduleNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');\n  }\n  return await NotificationScheduler.scheduleNotificationAsync(\n    request.identifier ?? uuid.v4(),\n    request.content,\n    parseTrigger(request.trigger)\n  );\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {",
          "successors": [
            {
              "id": 2,
              "label": "if (!NotificationScheduler.scheduleNotificationAsync) {",
              "successors": [
                {
                  "id": 3,
                  "label": "throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return await NotificationScheduler.scheduleNotificationAsync(\n  request.identifier ?? uuid.v4(),\n  request.content,\n  parseTrigger(request.trigger)\n);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseTrigger",
      "type": "function",
      "start_line": 31,
      "end_line": 82,
      "functions": [],
      "classes": [],
      "simplified_code": "export function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {\n  if (userFacingTrigger === null) {\n    return null;\n  }\n  if (userFacingTrigger === undefined) {\n    throw new TypeError(\n      'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n    );\n  }\n  const dateTrigger = parseDateTrigger(userFacingTrigger);\n  if (dateTrigger) {\n    return dateTrigger;\n  }\n  const calendarTrigger = parseCalendarTrigger(userFacingTrigger);\n  if (calendarTrigger) {\n    return calendarTrigger;\n  }\n  const dailyTrigger = parseDailyTrigger(userFacingTrigger);\n  if (dailyTrigger) {\n    return dailyTrigger;\n  }\n  const weeklyTrigger = parseWeeklyTrigger(userFacingTrigger);\n  if (weeklyTrigger) {\n    return weeklyTrigger;\n  }\n  const monthlyTrigger = parseMonthlyTrigger(userFacingTrigger);\n  if (monthlyTrigger) {\n    return monthlyTrigger;\n  }\n  const yearlyTrigger = parseYearlyTrigger(userFacingTrigger);\n  if (yearlyTrigger) {\n    return yearlyTrigger;\n  }\n  const timeIntervalTrigger = parseTimeIntervalTrigger(userFacingTrigger);\n  if (timeIntervalTrigger) {\n    return timeIntervalTrigger;\n  }\n  return Platform.select({\n    default: null, // There's no notion of channels on platforms other than Android.\n    android: {\n      type: 'channel',\n      channelId:\n        typeof userFacingTrigger === 'object' &&\n        userFacingTrigger !== null &&\n        !(userFacingTrigger instanceof Date)\n          ? userFacingTrigger?.channelId\n          : undefined,\n    },\n  });\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {",
          "successors": [
            {
              "id": 2,
              "label": "if (userFacingTrigger === null) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return null;",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "if (userFacingTrigger === undefined) {",
              "successors": [
                {
                  "id": 5,
                  "label": "throw new TypeError(\n  'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n);",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "const dateTrigger = parseDateTrigger(userFacingTrigger);",
              "successors": [
                {
                  "id": 7,
                  "label": "if (dateTrigger) {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return dateTrigger;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "const calendarTrigger = parseCalendarTrigger(userFacingTrigger);",
                  "successors": [
                    {
                      "id": 10,
                      "label": "if (calendarTrigger) {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return calendarTrigger;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "const dailyTrigger = parseDailyTrigger(userFacingTrigger);",
                      "successors": [
                        {
                          "id": 13,
                          "label": "if (dailyTrigger) {",
                          "successors": [
                            {
                              "id": 14,
                              "label": "return dailyTrigger;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 15,
                          "label": "const weeklyTrigger = parseWeeklyTrigger(userFacingTrigger);",
                          "successors": [
                            {
                              "id": 16,
                              "label": "if (weeklyTrigger) {",
                              "successors": [
                                {
                                  "id": 17,
                                  "label": "return weeklyTrigger;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "label": "const monthlyTrigger = parseMonthlyTrigger(userFacingTrigger);",
                              "successors": [
                                {
                                  "id": 19,
                                  "label": "if (monthlyTrigger) {",
                                  "successors": [
                                    {
                                      "id": 20,
                                      "label": "return monthlyTrigger;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 21,
                                  "label": "const yearlyTrigger = parseYearlyTrigger(userFacingTrigger);",
                                  "successors": [
                                    {
                                      "id": 22,
                                      "label": "if (yearlyTrigger) {",
                                      "successors": [
                                        {
                                          "id": 23,
                                          "label": "return yearlyTrigger;",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 24,
                                      "label": "const timeIntervalTrigger = parseTimeIntervalTrigger(userFacingTrigger);",
                                      "successors": [
                                        {
                                          "id": 25,
                                          "label": "if (timeIntervalTrigger) {",
                                          "successors": [
                                            {
                                              "id": 26,
                                              "label": "return timeIntervalTrigger;",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 27,
                                          "label": "return Platform.select({\n  default: null, // There's no notion of channels on platforms other than Android.\n  android: {\n    type: 'channel',\n    channelId:\n      typeof userFacingTrigger === 'object' &&\n      userFacingTrigger !== null &&\n      !(userFacingTrigger instanceof Date)\n        ? userFacingTrigger?.channelId\n        : undefined,\n  },\n});",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseCalendarTrigger",
      "type": "function",
      "start_line": 83,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseCalendarTrigger(\n  trigger: NotificationTriggerInput\n): NativeCalendarTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.CALENDAR\n  ) {\n    const { repeats, ...calendarTrigger } = trigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  }\n  return undefined;",
      "blocks": [
        {
          "id": 1,
          "label": "function parseCalendarTrigger(\n  trigger: NotificationTriggerInput\n): NativeCalendarTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.CALENDAR\n  ) {",
              "successors": [
                {
                  "id": 3,
                  "label": "const { repeats, ...calendarTrigger } = trigger;\nreturn { type: 'calendar', value: calendarTrigger, repeats };",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return undefined;",
                          "successors": [
                            {
                              "id": 7,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "label": "return undefined;",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseDateTrigger",
      "type": "function",
      "start_line": 97,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseDateTrigger(trigger: NotificationTriggerInput): NativeDateTriggerInput | undefined {\n  if (trigger instanceof Date || typeof trigger === 'number') {\n    return { type: 'date', timestamp: toTimestamp(trigger) };\n  } else if (\n    typeof trigger === 'object' &&\n    trigger !== null &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DATE &&\n    'date' in trigger &&\n    trigger.date instanceof Date\n  ) {\n    const result: NativeDateTriggerInput = {\n      type: 'date',\n      timestamp: toTimestamp(trigger.date),\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  } else {\n    return undefined;\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function parseDateTrigger(trigger: NotificationTriggerInput): NativeDateTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (trigger instanceof Date || typeof trigger === 'number') {",
              "successors": [
                {
                  "id": 3,
                  "label": "return { type: 'date', timestamp: toTimestamp(trigger) };",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else if (typeof trigger === 'object' && trigger !== null && 'type' in trigger && trigger.type === SchedulableTriggerInputTypes.DATE && 'date' in trigger && trigger.date instanceof Date) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const result: NativeDateTriggerInput = { type: 'date', timestamp: toTimestamp(trigger.date) };",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (trigger.channelId) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "result.channelId = trigger.channelId;",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "return result;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return undefined;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 12,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "toTimestamp",
      "type": "function",
      "start_line": 120,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": "function toTimestamp(date: number | Date) {\n  if (date instanceof Date) {\n    return date.getTime();\n  }\n  return date;",
      "blocks": [
        {
          "id": 1,
          "label": "function toTimestamp(date: number | Date) {",
          "successors": [
            {
              "id": 2,
              "label": "if (date instanceof Date) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return date.getTime();",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "return date;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseDailyTrigger",
      "type": "function",
      "start_line": 126,
      "end_line": 145,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseDailyTrigger(trigger: NotificationTriggerInput): NativeDailyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.DAILY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['hour', 'minute']);\n    const result: NativeDailyTriggerInput = {\n      type: 'daily',\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function parseDailyTrigger(trigger: NotificationTriggerInput): NativeDailyTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (trigger !== null && typeof trigger === 'object' && 'type' in trigger && trigger.type === SchedulableTriggerInputTypes.DAILY) {",
              "successors": [
                {
                  "id": 3,
                  "label": "validateDateComponentsInTrigger(trigger, ['hour', 'minute']);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const result: NativeDailyTriggerInput = { type: 'daily', hour: trigger.hour ?? placeholderDateComponentValue, minute: trigger.minute ?? placeholderDateComponentValue };",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (trigger.channelId) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "result.channelId = trigger.channelId;",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return result;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return result;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "return result;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "}",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return undefined;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "}",
                  "successors": [
                    {
                      "id": 11,
                      "label": "return undefined;",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "return undefined;",
              "successors": []
            }
          ]
        },
        {
          "id": 12,
          "label": "}",
          "successors": []
        }
      ]
    },
    {
      "name": "parseWeeklyTrigger",
      "type": "function",
      "start_line": 146,
      "end_line": 167,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseWeeklyTrigger(\n  trigger: NotificationTriggerInput\n): NativeWeeklyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.WEEKLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['weekday', 'hour', 'minute']);\n    const result: NativeWeeklyTriggerInput = {\n      type: 'weekly',\n      weekday: trigger.weekday ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;",
      "blocks": [
        {
          "id": 1,
          "label": "function parseWeeklyTrigger(\n  trigger: NotificationTriggerInput\n): NativeWeeklyTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.WEEKLY\n  ) {",
              "successors": [
                {
                  "id": 3,
                  "label": "validateDateComponentsInTrigger(trigger, ['weekday', 'hour', 'minute']);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const result: NativeWeeklyTriggerInput = {\n      type: 'weekly',\n      weekday: trigger.weekday ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (trigger.channelId) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "result.channelId = trigger.channelId;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "return result;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "label": "return undefined;",
              "successors": []
            },
            {
              "id": 10,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseMonthlyTrigger",
      "type": "function",
      "start_line": 169,
      "end_line": 190,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseMonthlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeMonthlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.MONTHLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['day', 'hour', 'minute']);\n    const result: NativeMonthlyTriggerInput = {\n      type: 'monthly',\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;",
      "blocks": [
        {
          "id": 1,
          "label": "function parseMonthlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeMonthlyTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (\n  trigger !== null &&\n  typeof trigger === 'object' &&\n  'type' in trigger &&\n  trigger.type === SchedulableTriggerInputTypes.MONTHLY\n) {",
              "successors": [
                {
                  "id": 3,
                  "label": "validateDateComponentsInTrigger(trigger, ['day', 'hour', 'minute']);\nconst result: NativeMonthlyTriggerInput = {\n  type: 'monthly',\n  day: trigger.day ?? placeholderDateComponentValue,\n  hour: trigger.hour ?? placeholderDateComponentValue,\n  minute: trigger.minute ?? placeholderDateComponentValue,\n};",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (trigger.channelId) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "result.channelId = trigger.channelId;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "return result;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "return result;",
                      "successors": [
                        {
                          "id": 10,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "return undefined;",
              "successors": [
                {
                  "id": 12,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseYearlyTrigger",
      "type": "function",
      "start_line": 192,
      "end_line": 214,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseYearlyTrigger(\n  trigger: NotificationTriggerInput\n): NativeYearlyTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.YEARLY\n  ) {\n    validateDateComponentsInTrigger(trigger, ['month', 'day', 'hour', 'minute']);\n    const result: NativeYearlyTriggerInput = {\n      type: 'yearly',\n      month: trigger.month ?? placeholderDateComponentValue,\n      day: trigger.day ?? placeholderDateComponentValue,\n      hour: trigger.hour ?? placeholderDateComponentValue,\n      minute: trigger.minute ?? placeholderDateComponentValue,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;",
      "blocks": [
        {
          "id": 1,
          "label": "function parseYearlyTrigger(trigger: NotificationTriggerInput): NativeYearlyTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (trigger !== null && typeof trigger === 'object' && 'type' in trigger && trigger.type === SchedulableTriggerInputTypes.YEARLY) {",
              "successors": [
                {
                  "id": 3,
                  "label": "validateDateComponentsInTrigger(trigger, ['month', 'day', 'hour', 'minute']);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "const result: NativeYearlyTriggerInput = { type: 'yearly', month: trigger.month ?? placeholderDateComponentValue, day: trigger.day ?? placeholderDateComponentValue, hour: trigger.hour ?? placeholderDateComponentValue, minute: trigger.minute ?? placeholderDateComponentValue, };",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (trigger.channelId) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "result.channelId = trigger.channelId;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "return result;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "return result;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "label": "return undefined;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseTimeIntervalTrigger",
      "type": "function",
      "start_line": 216,
      "end_line": 237,
      "functions": [],
      "classes": [],
      "simplified_code": "function parseTimeIntervalTrigger(\n  trigger: NotificationTriggerInput\n): NativeTimeIntervalTriggerInput | undefined {\n  if (\n    trigger !== null &&\n    typeof trigger === 'object' &&\n    'type' in trigger &&\n    trigger.type === SchedulableTriggerInputTypes.TIME_INTERVAL &&\n    'seconds' in trigger &&\n    typeof trigger.seconds === 'number'\n  ) {\n    const result: NativeTimeIntervalTriggerInput = {\n      type: 'timeInterval',\n      seconds: trigger.seconds,\n      repeats: trigger.repeats ?? false,\n    };\n    if (trigger.channelId) {\n      result.channelId = trigger.channelId;\n    }\n    return result;\n  }\n  return undefined;",
      "blocks": [
        {
          "id": 1,
          "label": "function parseTimeIntervalTrigger(\n  trigger: NotificationTriggerInput\n): NativeTimeIntervalTriggerInput | undefined {",
          "successors": [
            {
              "id": 2,
              "label": "if (\n  trigger !== null &&\n  typeof trigger === 'object' &&\n  'type' in trigger &&\n  trigger.type === SchedulableTriggerInputTypes.TIME_INTERVAL &&\n  'seconds' in trigger &&\n  typeof trigger.seconds === 'number'\n) {",
              "successors": [
                {
                  "id": 3,
                  "label": "const result: NativeTimeIntervalTriggerInput = {\n  type: 'timeInterval',\n  seconds: trigger.seconds,\n  repeats: trigger.repeats ?? false,\n};",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (trigger.channelId) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "result.channelId = trigger.channelId;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return result;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "return result;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "return result;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "return undefined;",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "return undefined;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "validateDateComponentsInTrigger",
      "type": "function",
      "start_line": 241,
      "end_line": 300,
      "functions": [],
      "classes": [],
      "simplified_code": "function validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {\n  const anyTriggerType = trigger as any;\n  components.forEach((component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const day = anyTriggerType.day;\n        const month =\n          anyTriggerType.month !== undefined ? anyTriggerType.month : new Date().getMonth();\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  });\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {",
          "successors": [
            {
              "id": 2,
              "label": "const anyTriggerType = trigger as any;",
              "successors": [
                {
                  "id": 3,
                  "label": "components.forEach((component) => {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (!(component in anyTriggerType)) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "throw new TypeError(`The ${component} parameter needs to be present`);",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "if (typeof anyTriggerType[component] !== 'number') {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "throw new TypeError(`The ${component} parameter should be a number`);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "switch (component) {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "case 'month': {",
                          "successors": [
                            {
                              "id": 12,
                              "label": "const { month } = anyTriggerType;",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "if (month < 0 || month > 11) {",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 16,
                              "label": "break;",
                              "successors": []
                            },
                            {
                              "id": 17,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 18,
                          "label": "case 'day': {",
                          "successors": [
                            {
                              "id": 19,
                              "label": "const day = anyTriggerType.day;\nconst month =\n  anyTriggerType.month !== undefined ? anyTriggerType.month : new Date().getMonth();\nconst daysInGivenMonth = daysInMonth(month);",
                              "successors": [
                                {
                                  "id": 20,
                                  "label": "if (day < 1 || day > daysInGivenMonth) {",
                                  "successors": [
                                    {
                                      "id": 21,
                                      "label": "throw new RangeError(\n  `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n);",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 23,
                              "label": "break;",
                              "successors": []
                            },
                            {
                              "id": 24,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 25,
                          "label": "case 'weekday': {",
                          "successors": [
                            {
                              "id": 26,
                              "label": "const { weekday } = anyTriggerType;",
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "if (weekday < 1 || weekday > 7) {",
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "throw new RangeError(\n  `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n);",
                                      "successors": [
                                        {
                                          "id": 29,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 30,
                              "label": "break;",
                              "successors": []
                            },
                            {
                              "id": 31,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 32,
                          "label": "case 'hour': {",
                          "successors": [
                            {
                              "id": 33,
                              "label": "const { hour } = anyTriggerType;",
                              "successors": [
                                {
                                  "id": 34,
                                  "label": "if (hour < 0 || hour > 23) {",
                                  "successors": [
                                    {
                                      "id": 35,
                                      "label": "throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);",
                                      "successors": [
                                        {
                                          "id": 36,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 37,
                              "label": "break;",
                              "successors": []
                            },
                            {
                              "id": 38,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 39,
                          "label": "case 'minute': {",
                          "successors": [
                            {
                              "id": 40,
                              "label": "const { minute } = anyTriggerType;",
                              "successors": [
                                {
                                  "id": 41,
                                  "label": "if (minute < 0 || minute > 59) {",
                                  "successors": [
                                    {
                                      "id": 42,
                                      "label": "throw new RangeError(\n  `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n);",
                                      "successors": [
                                        {
                                          "id": 43,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 44,
                              "label": "break;",
                              "successors": []
                            },
                            {
                              "id": 45,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 46,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 47,
                      "label": "});",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 48,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "daysInMonth",
      "type": "function",
      "start_line": 301,
      "end_line": 303,
      "functions": [],
      "classes": [],
      "simplified_code": "function daysInMonth(month: number = 0, year?: number) {\n  return new Date(year ?? 2000, month + 1, 0).getDate();\n}",
      "blocks": [
        {
          "id": 1,
          "label": "function daysInMonth(month: number = 0, year?: number) {",
          "successors": [
            {
              "id": 2,
              "label": "  return new Date(year ?? 2000, month + 1, 0).getDate();",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { Platform, UnavailabilityError, uuid } from 'expo-modules-core';\nimport NotificationScheduler from './NotificationScheduler';\nimport {\n  NativeCalendarTriggerInput,\n  NativeDailyTriggerInput,\n  NativeDateTriggerInput,\n  NativeNotificationTriggerInput,\n  NativeTimeIntervalTriggerInput,\n  NativeWeeklyTriggerInput,\n  NativeMonthlyTriggerInput,\n  NativeYearlyTriggerInput,\n} from './NotificationScheduler.types';\nimport {\n  NotificationRequestInput,\n  NotificationTriggerInput,\n  SchedulableTriggerInputTypes,\n} from './Notifications.types';\n}\ntype ValidTriggerDateComponents = 'month' | 'day' | 'weekday' | 'hour' | 'minute';\n}\n  return undefined;\n}\n}\n  return date;\n}\n}\n  return undefined;\n}\n  return undefined;\n}\n  return undefined;\n}\n  return undefined;\n}\n// Needed only to satisfy Typescript types for validated date components\nconst placeholderDateComponentValue = -9999;\n}\n}",
  "blocks": []
}