{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 78,
  "functions": [],
  "classes": [
    {
      "name": "MultimodalInputManager",
      "type": "class",
      "start_line": 22,
      "end_line": 76,
      "functions": [
        {
          "name": "registerListener",
          "type": "function",
          "start_line": 46,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "  async registerListener(callback): Promise<void> {\n    Log.debug(TAG, 'registerListener start');\n    inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\n      callback(0);\n    });\n    inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\n      callback(1);\n    });\n    inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {\n      Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\n      callback(2);\n    });\n    Log.debug(TAG, 'registerListener end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async registerListener(callback): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.debug(TAG, 'registerListener start');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "inputConsumer.on('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void => {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.debug(TAG, 'notificationRegister data: ' + JSON.stringify(data));\ncallback(0);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "inputConsumer.on('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void => {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "Log.debug(TAG, 'controlRegister data: ' + JSON.stringify(data));\ncallback(1);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "inputConsumer.on('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void => {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "Log.debug(TAG, 'escRegister data: ' + JSON.stringify(data));\ncallback(2);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "Log.debug(TAG, 'registerListener end');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "unregisterListener",
          "type": "function",
          "start_line": 63,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "  async unregisterListener(): Promise<void> {\n    Log.debug(TAG, 'unregisterListener start');\n    inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n    });\n    inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n      Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n    });\n    Log.debug(TAG, 'unregisterListener end');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'unregisterListener start');",
              "successors": [
                {
                  "id": 2,
                  "label": "inputConsumer.off('key', this.leftKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n  Log.debug(TAG, 'notificationUnregister data: ' + JSON.stringify(data));\n});",
                  "successors": [
                    {
                      "id": 3,
                      "label": "inputConsumer.off('key', this.rightKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n  Log.debug(TAG, 'controlUnregister data: ' + JSON.stringify(data));\n});",
                      "successors": [
                        {
                          "id": 4,
                          "label": "inputConsumer.off('key', this.escKeyOptions, (data: inputConsumer.KeyOptions): void  => {\n  Log.debug(TAG, 'escUnregister data: ' + JSON.stringify(data));\n});",
                          "successors": [
                            {
                              "id": 5,
                              "label": "Log.debug(TAG, 'unregisterListener end');",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class MultimodalInputManager {\n\n  //win + N\n  leftKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  //win + I\n  rightKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n  escKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class MultimodalInputManager {",
          "successors": [
            {
              "id": 2,
              "label": "//win + N\n  leftKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2014,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };",
              "successors": [
                {
                  "id": 3,
                  "label": "//win + I\n  rightKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2015,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };",
                  "successors": [
                    {
                      "id": 4,
                      "label": "escKeyOptions: inputConsumer.KeyOptions = {\n    preKeys: Array<number>(),\n    finalKey: 2070,\n    isFinalKeyDown: true,\n    finalKeyDownDuration: 0\n  };",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport inputConsumer from '@ohos.multimodalInput.inputConsumer';\nimport { Log } from '../utils/Log';\n\n\nconst TAG = 'MultimodalInputManager';\n\n}\n\nexport let mMultimodalInputManager = new MultimodalInputManager();",
  "blocks": [
    {
      "id": 1,
      "label": "import inputConsumer from '@ohos.multimodalInput.inputConsumer';\nimport { Log } from '../utils/Log';",
      "successors": [
        {
          "id": 2,
          "label": "const TAG = 'MultimodalInputManager';",
          "successors": [
            {
              "id": 3,
              "label": "export let mMultimodalInputManager = new MultimodalInputManager();",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}