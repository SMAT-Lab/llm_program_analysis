{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 87,
  "functions": [],
  "classes": [
    {
      "name": "MainAbility",
      "type": "class",
      "start_line": 23,
      "end_line": 87,
      "functions": [
        {
          "name": "onCreate",
          "type": "function",
          "start_line": 24,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "  onCreate(want, launchParam) {\n    Logger.info(TAG, 'onCreate');\n    AppStorage.setOrCreate('context', this.context);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onCreate(want, launchParam) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Logger.info(TAG, 'onCreate');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    AppStorage.setOrCreate('context', this.context);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDestroy",
          "type": "function",
          "start_line": 29,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "  onDestroy() {\n    Logger.info(TAG, 'onDestroy')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onDestroy() {",
              "successors": [
                {
                  "id": 2,
                  "label": " Logger.info(TAG, 'onDestroy')",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageCreate",
          "type": "function",
          "start_line": 33,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageCreate(windowStage) {\n    // Main window is created, set main page for this ability\n    Logger.info(TAG, 'onWindowStageCreate')\n    try {\n      let windowClass = null;\n      window.getLastWindow(this.context, (err, data) => {\n        if (err.code) {\n          Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\n          return;\n        }\n        Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\n        windowClass = data;\n        let systemBarProperties = {\n          statusBarColor: \"#f1f3f5\"\n        };\n        windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {\n          if (err.code) {\n            Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n            return;\n          }\n          Logger.info('Succeeded in setting the system bar properties.');\n        })\n        windowClass.on('keyboardHeightChange', (data: number) => {\n          AppStorage.setOrCreate('keyboardHeight', data);\n        })\n      })\n    } catch (exception) {\n      Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));\n    }\n    windowStage.loadContent('pages/Index', (err, data) => {\n      let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n      windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);\n      if (err) {\n        Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\n        return\n      }\n      Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageCreate(windowStage) {",
              "successors": [
                {
                  "id": 2,
                  "label": "Logger.info(TAG, 'onWindowStageCreate')",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let windowClass = null;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "window.getLastWindow(this.context, (err, data) => {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "if (err.code) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));\nreturn;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "Logger.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));\nwindowClass = data;\nlet systemBarProperties = {\n  statusBarColor: \"#f1f3f5\"\n};",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "windowClass.setWindowSystemBarProperties(systemBarProperties, (err) => {",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "if (err.code) {",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "Logger.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\nreturn;",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 12,
                                          "label": "Logger.info('Succeeded in setting the system bar properties.');",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 13,
                                      "label": "windowClass.on('keyboardHeightChange', (data: number) => {\n  AppStorage.setOrCreate('keyboardHeight', data);\n})",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "label": "} catch (exception) {",
                      "successors": [
                        {
                          "id": 15,
                          "label": "Logger.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "windowStage.loadContent('pages/Index', (err, data) => {",
                      "successors": [
                        {
                          "id": 17,
                          "label": "let a = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\nwindowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.OFFSET);",
                          "successors": [
                            {
                              "id": 18,
                              "label": "if (err) {",
                              "successors": [
                                {
                                  "id": 19,
                                  "label": "Logger.error(TAG, `Failed to load the content. Cause: ${JSON.stringify(err)}`)\nreturn",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "Logger.info(TAG, `Succeeded in loading the content. Data: ${JSON.stringify(data)}`)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onWindowStageDestroy",
          "type": "function",
          "start_line": 73,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": "  onWindowStageDestroy() {\n    // Main window is destroyed, release UI related resources\n    Logger.info(TAG, 'onWindowStageDestroy')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onWindowStageDestroy() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    // Main window is destroyed, release UI related resources",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    Logger.info(TAG, 'onWindowStageDestroy')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onForeground",
          "type": "function",
          "start_line": 78,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "  onForeground() {\n    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onForeground() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    // Ability has brought to foreground\n    Logger.info(TAG, 'onForeground')",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onBackground",
          "type": "function",
          "start_line": 83,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "  onBackground() {\n    // Ability has back to background\n    Logger.info(TAG, 'onBackground')\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "onBackground() {",
              "successors": [
                {
                  "id": 2,
                  "label": "// Ability has back to background\nLogger.info(TAG, 'onBackground')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export default class MainAbility extends UIAbility {\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export default class MainAbility extends UIAbility {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2022-2023 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport UIAbility from '@ohos.app.ability.UIAbility'\nimport Logger from '../util/Logger'\nimport window from '@ohos.window';\nimport { KeyboardAvoidMode } from '@ohos.arkui.UIContext';\n\nconst TAG: string = 'MainAbility'\n\n}",
  "blocks": []
}