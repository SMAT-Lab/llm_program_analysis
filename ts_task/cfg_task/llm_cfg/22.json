{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 123,
  "functions": [],
  "classes": [
    {
      "name": "AlbumSetDeleteMenuOperation",
      "type": "class",
      "start_line": 25,
      "end_line": 123,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(menuContext);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 30,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n      this.items = this.menuContext.items;\n    } else {\n      this.count = dataSource.getSelectedCount();\n      this.items = dataSource.getSelectedItems();\n    }\n    if (this.count as number <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.confirmCallback = (): void => this.confirmCallbackBindImpl();\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n    let deleteResource: Resource = $r('app.string.dialog_delete');\n    this.getDialogTitle().then<void, void>((dialogTitle: Resource): void => {\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [dialogTitle, deleteResource, this.confirmCallback, this.cancelCallback]);\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "doAction(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.menuContext == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, 'menuContext is null, return');\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let dataSource: ItemDataSource = this.menuContext.dataSource;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (dataSource == null) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "this.count = this.menuContext.items.length;\nthis.items = this.menuContext.items;",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if (this.count as number <= 0) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "label": "this.confirmCallback = (): void => this.confirmCallbackBindImpl();\nthis.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\nlet deleteResource: Resource = $r('app.string.dialog_delete');\nthis.getDialogTitle().then<void, void>((dialogTitle: Resource): void => {\n  this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [dialogTitle, deleteResource, this.confirmCallback, this.cancelCallback]);\n})",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "this.count = dataSource.getSelectedCount();\nthis.items = dataSource.getSelectedItems();",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if (this.count as number <= 0) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "label": "this.confirmCallback = (): void => this.confirmCallbackBindImpl();\nthis.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\nlet deleteResource: Resource = $r('app.string.dialog_delete');\nthis.getDialogTitle().then<void, void>((dialogTitle: Resource): void => {\n  this.menuContext.broadCast.emit(BroadcastConstants.SHOW_DELETE_DIALOG, [dialogTitle, deleteResource, this.confirmCallback, this.cancelCallback]);\n})",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getDialogTitle",
          "type": "function",
          "start_line": 57,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getDialogTitle(): Promise<Resource> {\n    let videoCount = 0;\n    let photoCount = 0;\n    for (let i = 0; i < this.items.length; i++) {\n      let itemVideoCount = await  (this.items[i] as AlbumDataItem).getVideoCount();\n      videoCount += itemVideoCount;\n      photoCount += ((this.items[i] as AlbumDataItem).count - itemVideoCount);\n    }\n\n    if (this.count as number === 1) {\n      if (videoCount > 0 && photoCount > 0) {\n        return $r('app.string.recycle_single_album_tips', photoCount, videoCount);\n      }\n      if (videoCount > 0 && photoCount <= 0) {\n        return $r('app.string.recycle_single_album_with_videos_tips', videoCount);\n      }\n      if (videoCount <= 0 && photoCount > 0) {\n        return $r('app.string.recycle_single_album_with_photos_tips', photoCount);\n      }\n    } else {\n      if (videoCount > 0 && photoCount > 0) {\n        return $r('app.string.recycle_albums_tips', this.count, photoCount, videoCount);\n      }\n      if (videoCount > 0 && photoCount <= 0) {\n        return $r('app.string.recycle_albums_with_videos_tips', this.count, videoCount);\n      }\n      if (videoCount <= 0 && photoCount > 0) {\n        return $r('app.string.recycle_albums_with_photos_tips', this.count, photoCount);\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let videoCount = 0;\nlet photoCount = 0;",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0; i < this.items.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let itemVideoCount = await  (this.items[i] as AlbumDataItem).getVideoCount();\nvideoCount += itemVideoCount;\nphotoCount += ((this.items[i] as AlbumDataItem).count - itemVideoCount);",
                      "successors": [
                        {
                          "id": 2,
                          "label": "}"
                        },
                        {
                          "id": 4,
                          "label": "if (this.count as number === 1) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (videoCount > 0 && photoCount > 0) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "return $r('app.string.recycle_single_album_tips', photoCount, videoCount);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "if (videoCount > 0 && photoCount <= 0) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return $r('app.string.recycle_single_album_with_videos_tips', videoCount);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "if (videoCount <= 0 && photoCount > 0) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "return $r('app.string.recycle_single_album_with_photos_tips', photoCount);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 11,
                          "label": "if (videoCount > 0 && photoCount > 0) {",
                          "successors": [
                            {
                              "id": 12,
                              "label": "return $r('app.string.recycle_albums_tips', this.count, photoCount, videoCount);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "if (videoCount > 0 && photoCount <= 0) {",
                          "successors": [
                            {
                              "id": 14,
                              "label": "return $r('app.string.recycle_albums_with_videos_tips', this.count, videoCount);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 15,
                          "label": "if (videoCount <= 0 && photoCount > 0) {",
                          "successors": [
                            {
                              "id": 16,
                              "label": "return $r('app.string.recycle_albums_with_photos_tips', this.count, photoCount);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "requestOneBatchOperation",
          "type": "function",
          "start_line": 89,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as AlbumDataItem;\n    let promise: Promise<boolean> = item.onDelete();\n    promise.then<void, void>((): void => {\n      this.currentBatch++;\n      this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n      this.cyclicOperation();\n    }).catch<void>((): void => {\n      this.onError();\n    })\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "requestOneBatchOperation(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "let item = this.items[this.currentBatch] as AlbumDataItem;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let promise: Promise<boolean> = item.onDelete();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "promise.then<void, void>((): void => {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.currentBatch++;",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "this.cyclicOperation();",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "}).catch<void>((): void => {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "this.onError();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "confirmCallback",
          "type": "function",
          "start_line": 101,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "  private confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private confirmCallback(): void {\n    this.confirmCallbackBindImpl();\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "confirmCallbackBindImpl",
          "type": "function",
          "start_line": 105,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "  private confirmCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet delete confirm');\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n\n    if (onOperationStart != null) onOperationStart();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG, [$r('app.string.action_delete'), this.count]);\n    this.processOperation();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'AlbumSet delete confirm');\nthis.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart: Function = this.menuContext.onOperationStart;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (onOperationStart != null) onOperationStart();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG, [$r('app.string.action_delete'), this.count]);\nthis.processOperation();",
                      "successors": []
                    },
                    {
                      "id": 3,
                      "label": "this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG, [$r('app.string.action_delete'), this.count]);\nthis.processOperation();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cancelCallback",
          "type": "function",
          "start_line": 116,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallback(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.cancelCallbackBindImpl();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "cancelCallbackBindImpl",
          "type": "function",
          "start_line": 120,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet delete cancel');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet delete cancel');\n}",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "export class AlbumSetDeleteMenuOperation extends ProcessMenuOperation {\n  }\n\n  }\n\n  }\n\n    }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AlbumSetDeleteMenuOperation extends ProcessMenuOperation {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { MenuContext } from './MenuContext';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\n\nconst TAG = 'AlbumSetDeleteMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { MenuContext } from './MenuContext';\nimport { ProcessMenuOperation } from './ProcessMenuOperation';",
      "successors": [
        {
          "id": 2,
          "label": "const TAG = 'AlbumSetDeleteMenuOperation';",
          "successors": []
        }
      ]
    }
  ]
}