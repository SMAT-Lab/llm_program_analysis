{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 284,
  "functions": [],
  "classes": [
    {
      "name": "UserFileDataItem",
      "type": "class",
      "start_line": 34,
      "end_line": 284,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 64,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(selections: string, selectionArgs: string[], deviceId: string, index: number) {\n    this.selections = selections;\n    this.selectionArgs = selectionArgs;\n    this.deviceId = deviceId;\n    this.hashIndex = index;\n    this.index = index;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(selections: string, selectionArgs: string[], deviceId: string, index: number) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.selections = selections;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "this.selectionArgs = selectionArgs;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "this.deviceId = deviceId;",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "this.hashIndex = index;",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "this.index = index;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getHashCode",
          "type": "function",
          "start_line": 72,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "  getHashCode(): string {\n    // \u65f6\u95f4\u7ebf\u754c\u9762\u89d2\u5ea6\uff0c\u6536\u85cf\u72b6\u6001\u53d8\u66f4\uff0c\u90fd\u9700\u8981\u5237\u65b0\u754c\u9762\uff1b\u5927\u56fe\u6d4f\u89c8\u754c\u9762\u89d2\u5ea6\u53d8\u66f4\uff0c\u9700\u8981\u5237\u65b0\u754c\u9762\n    return this.status === MediaConstants.UNDEFINED ?\n      '' + this.hashIndex :\n      this.uri + this.favouriteStatus + ' ' + this.orientation + ' ' + this.isSelect;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getHashCode(): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.status === MediaConstants.UNDEFINED ? '' + this.hashIndex : this.uri + this.favouriteStatus + ' ' + this.orientation + ' ' + this.isSelect;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "loadFileAsset",
          "type": "function",
          "start_line": 79,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    return await userFileModel.getMediaItemByUri(this.uri);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {",
              "successors": [
                {
                  "id": 2,
                  "label": "return await userFileModel.getMediaItemByUri(this.uri);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isLoad",
          "type": "function",
          "start_line": 83,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "  isLoad(): boolean {\n    if (this.status > MediaConstants.UNDEFINED) {\n      return true;\n    }\n    return false;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.status > MediaConstants.UNDEFINED) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return true;",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "return false;",
              "successors": []
            }
          ]
        },
        {
          "name": "load",
          "type": "function",
          "start_line": 90,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "  async load(isForce: boolean): Promise<void> {\n    Log.info(TAG, 'load ' + this.status);\n    if (this.status > (isForce ? MediaConstants.PART_LOADED : MediaConstants.UNDEFINED)) {\n      return;\n    }\n    let fileAsset = await this.loadFileAsset();\n    if (fileAsset != null) {\n      this.update(fileAsset);\n    }\n    return;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async load(isForce: boolean): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "Log.info(TAG, 'load ' + this.status);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.status > (isForce ? MediaConstants.PART_LOADED : MediaConstants.UNDEFINED)) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "let fileAsset = await this.loadFileAsset();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (fileAsset != null) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "this.update(fileAsset);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 102,
          "end_line": 177,
          "functions": [],
          "classes": [],
          "simplified_code": "  async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    this.fileAsset = fileAsset;\n    this.uri = fileAsset.uri;\n    this.displayName = fileAsset.displayName;\n    this.mediaType = fileAsset.photoType;\n    this.width = screenManager.getWinWidth();\n    this.height = screenManager.getWinHeight();\n    this.orientation = MediaConstants.ROTATE_NONE;\n    try {\n      this.orientation = fileAsset.get(photoAccessHelper.PhotoKeys.ORIENTATION.toString()) as number;\n      Log.info(TAG, 'orientation ' + this.orientation);\n    } catch (err) {\n      Log.error(TAG, 'get orientation ' + JSON.stringify(err));\n    }\n    try {\n      this.duration = fileAsset.get(photoAccessHelper.PhotoKeys.DURATION.toString()) as number;\n      Log.info(TAG, 'duration ' + this.duration);\n    } catch (err) {\n      Log.error(TAG, 'get duration ' + JSON.stringify(err));\n    }\n    try {\n      if (this.orientation === MediaConstants.ROTATE_ONCE || this.orientation === MediaConstants.ROTATE_THIRD) {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n      } else {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n      }\n      Log.info(TAG, 'width ' + this.width);\n      Log.info(TAG, 'height ' + this.height);\n    } catch (err) {\n      Log.error(TAG, 'get width height ' + JSON.stringify(err));\n    }\n    try {\n      this.title = fileAsset.get(photoAccessHelper.PhotoKeys.TITLE.toString()) as string;\n      Log.info(TAG, 'title ' + this.title);\n    } catch (err) {\n      Log.error(TAG, 'get title ' + JSON.stringify(err));\n    }\n    try {\n      this.dateAdded = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_ADDED.toString()) as number * 1000;\n      this.dateModified = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_MODIFIED.toString()) as number * 1000;\n      this.dateTaken = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_TAKEN.toString()) as number * 1000;\n      Log.info(TAG, 'dateAdded ' + this.dateAdded);\n    } catch (err) {\n      Log.error(TAG, 'get date ' + JSON.stringify(err));\n    }\n    try {\n      this.favouriteStatus = fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean ? STATUS_TRUE : STATUS_FALSE\n      Log.info(TAG, 'favouriteStatus ' + this.favouriteStatus);\n    } catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));\n    }\n    try {\n      this.size = fileAsset.get(photoAccessHelper.PhotoKeys.SIZE.toString()) as number;\n      Log.info(TAG, 'size ' + this.size);\n    } catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));\n    }\n    let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };\n    if (fileAsset != null && this.defaultThumbnail == undefined) {\n      try {\n        this.defaultThumbnail = await this.fileAsset.getThumbnail(size);\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    this.isSelect = selectManager.isSelect(this.uri, this.isSelect);\n    this.imgWidth = this.width;\n    this.imgHeight = this.height;\n    if (this.width > 0 && this.height > 0) {\n      this.status = MediaConstants.LOADED;\n    } else {\n      this.status = MediaConstants.PART_LOADED;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async update(fileAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n    this.fileAsset = fileAsset;\n    this.uri = fileAsset.uri;\n    this.displayName = fileAsset.displayName;\n    this.mediaType = fileAsset.photoType;\n    this.width = screenManager.getWinWidth();\n    this.height = screenManager.getWinHeight();\n    this.orientation = MediaConstants.ROTATE_NONE;",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n      this.orientation = fileAsset.get(photoAccessHelper.PhotoKeys.ORIENTATION.toString()) as number;\n      Log.info(TAG, 'orientation ' + this.orientation);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "} catch (err) {\n      Log.error(TAG, 'get orientation ' + JSON.stringify(err));",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": [
                            {
                              "id": 5,
                              "label": "try {\n      this.duration = fileAsset.get(photoAccessHelper.PhotoKeys.DURATION.toString()) as number;\n      Log.info(TAG, 'duration ' + this.duration);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "} catch (err) {\n      Log.error(TAG, 'get duration ' + JSON.stringify(err));",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "try {\n      if (this.orientation === MediaConstants.ROTATE_ONCE || this.orientation === MediaConstants.ROTATE_THIRD) {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n      } else {\n        this.width = fileAsset.get(photoAccessHelper.PhotoKeys.WIDTH.toString()) as number;\n        this.height = fileAsset.get(photoAccessHelper.PhotoKeys.HEIGHT.toString()) as number;\n      }\n      Log.info(TAG, 'width ' + this.width);\n      Log.info(TAG, 'height ' + this.height);",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "} catch (err) {\n      Log.error(TAG, 'get width height ' + JSON.stringify(err));",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "}",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "try {\n      this.title = fileAsset.get(photoAccessHelper.PhotoKeys.TITLE.toString()) as string;\n      Log.info(TAG, 'title ' + this.title);",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "} catch (err) {\n      Log.error(TAG, 'get title ' + JSON.stringify(err));",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "}",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "try {\n      this.dateAdded = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_ADDED.toString()) as number * 1000;\n      this.dateModified = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_MODIFIED.toString()) as number * 1000;\n      this.dateTaken = fileAsset.get(photoAccessHelper.PhotoKeys.DATE_TAKEN.toString()) as number * 1000;\n      Log.info(TAG, 'dateAdded ' + this.dateAdded);",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "} catch (err) {\n      Log.error(TAG, 'get date ' + JSON.stringify(err));",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "}",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "try {\n      this.favouriteStatus = fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean ? STATUS_TRUE : STATUS_FALSE\n      Log.info(TAG, 'favouriteStatus ' + this.favouriteStatus);",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "label": "} catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 19,
                                                                                      "label": "}",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 20,
                                                                                          "label": "try {\n      this.size = fileAsset.get(photoAccessHelper.PhotoKeys.SIZE.toString()) as number;\n      Log.info(TAG, 'size ' + this.size);",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 21,
                                                                                              "label": "} catch (err) {\n      Log.error(TAG, 'get favouriteStatus ' + JSON.stringify(err));",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 22,
                                                                                                  "label": "}",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 23,
                                                                                                      "label": "let size = { width: MediaConstants.DEFAULT_SIZE, height: MediaConstants.DEFAULT_SIZE };",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 24,
                                                                                                          "label": "if (fileAsset != null && this.defaultThumbnail == undefined) {",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 25,
                                                                                                              "label": "try {\n        this.defaultThumbnail = await this.fileAsset.getThumbnail(size);",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 26,
                                                                                                                  "label": "} catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 27,
                                                                                                                      "label": "}",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 28,
                                                                                                                          "label": "}"
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        },
                                                                                                        {
                                                                                                          "id": 29,
                                                                                                          "label": "this.isSelect = selectManager.isSelect(this.uri, this.isSelect);\n    this.imgWidth = this.width;\n    this.imgHeight = this.height;",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 30,
                                                                                                              "label": "if (this.width > 0 && this.height > 0) {",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 31,
                                                                                                                  "label": "this.status = MediaConstants.LOADED;",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 33,
                                                                                                                      "label": "}"
                                                                                                                    }
                                                                                                                  ]
                                                                                                                },
                                                                                                                {
                                                                                                                  "id": 32,
                                                                                                                  "label": "} else {\n      this.status = MediaConstants.PART_LOADED;",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 33,
                                                                                                                      "label": "}"
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getThumbnail",
          "type": "function",
          "start_line": 179,
          "end_line": 203,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getThumbnail(width: number, height: number): Promise<PixelMap> {\n    Log.debug(TAG, 'getThumbnail ' + this.status);\n    if (this.status !== MediaConstants.LOADED && this.status !== MediaConstants.PART_LOADED) {\n      Log.warn(TAG, 'getThumbnail fail as status: ' + this.status);\n      return undefined;\n    }\n    if (width === MediaConstants.DEFAULT_SIZE && height === MediaConstants.DEFAULT_SIZE) {\n      return this.defaultThumbnail;\n    }\n    let newThumbnail: PixelMap = undefined;\n    let size = { width: width, height: height };\n    let cacheThumbnail = this.thumbnailArray.get(width.toString() + height.toString());\n    if (cacheThumbnail != null) {\n      return cacheThumbnail;\n    }\n    if (this.fileAsset != undefined) {\n      try {\n        newThumbnail = await this.fileAsset.getThumbnail(size);\n        this.thumbnailArray.set(width.toString() + height.toString(), newThumbnail);\n      } catch (err) {\n        Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));\n      }\n    }\n    return newThumbnail;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.debug(TAG, 'getThumbnail ' + this.status);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.status !== MediaConstants.LOADED && this.status !== MediaConstants.PART_LOADED) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, 'getThumbnail fail as status: ' + this.status);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return undefined;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "if (width === MediaConstants.DEFAULT_SIZE && height === MediaConstants.DEFAULT_SIZE) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return this.defaultThumbnail;",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "let newThumbnail: PixelMap = undefined;\nlet size = { width: width, height: height };\nlet cacheThumbnail = this.thumbnailArray.get(width.toString() + height.toString());",
                          "successors": [
                            {
                              "id": 8,
                              "label": "if (cacheThumbnail != null) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "return cacheThumbnail;",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "label": "if (this.fileAsset != undefined) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "try {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "newThumbnail = await this.fileAsset.getThumbnail(size);\nthis.thumbnailArray.set(width.toString() + height.toString(), newThumbnail);",
                                          "successors": []
                                        },
                                        {
                                          "id": 13,
                                          "label": "catch (err) {",
                                          "successors": [
                                            {
                                              "id": 14,
                                              "label": "Log.error(TAG, 'getThumbnail error: ' + JSON.stringify(err));",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 15,
                              "label": "return newThumbnail;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAlt",
          "type": "function",
          "start_line": 205,
          "end_line": 211,
          "functions": [],
          "classes": [],
          "simplified_code": "  getAlt(): Resource {\n    if (this.mediaType === photoAccessHelper.PhotoType.VIDEO) {\n      return $r('app.media.alt_video_placeholder');\n    } else {\n      return $r('app.media.alt_placeholder');\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (this.mediaType === photoAccessHelper.PhotoType.VIDEO) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return $r('app.media.alt_video_placeholder');",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    return $r('app.media.alt_placeholder');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setSelect",
          "type": "function",
          "start_line": 213,
          "end_line": 216,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelect(isSelect: boolean): void {\n    this.isSelect = isSelect;\n    selectManager.setSelect(this.uri, this.isSelect);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelect(isSelect: boolean): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.isSelect = isSelect;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    selectManager.setSelect(this.uri, this.isSelect);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDelete",
          "type": "function",
          "start_line": 218,
          "end_line": 228,
          "functions": [],
          "classes": [],
          "simplified_code": "  async onDelete(): Promise<boolean> {\n    try {\n      await userFileModel.deleteOne(this.uri);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete ' + this.index + ' error: ' + JSON.stringify(err));\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async onDelete(): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "await userFileModel.deleteOne(this.uri);\nselectManager.deleteSelect(this.uri);\nthis.status = MediaConstants.TRASHED;\nreturn true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} catch (err) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.error(TAG, 'onDelete ' + this.index + ' error: ' + JSON.stringify(err));\nreturn false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "addToAlbum",
          "type": "function",
          "start_line": 230,
          "end_line": 240,
          "functions": [],
          "classes": [],
          "simplified_code": "  async addToAlbum(albumUri:string): Promise<boolean> {\n    try {\n      await userFileModel.addPhotoToAlbumByUserFileMgr(albumUri, this.uri);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'addToAlbum ' + this.index + ' error: ' + JSON.stringify(err));\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async addToAlbum(albumUri:string): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "await userFileModel.addPhotoToAlbumByUserFileMgr(albumUri, this.uri);\nselectManager.deleteSelect(this.uri);\nthis.status = MediaConstants.TRASHED;\nreturn true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} catch (err) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.error(TAG, 'addToAlbum ' + this.index + ' error: ' + JSON.stringify(err));\nreturn false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isDeleted",
          "type": "function",
          "start_line": 242,
          "end_line": 244,
          "functions": [],
          "classes": [],
          "simplified_code": "  isDeleted(): boolean {\n    return this.status === MediaConstants.TRASHED;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "isDeleted(): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.status === MediaConstants.TRASHED;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isFavor",
          "type": "function",
          "start_line": 246,
          "end_line": 256,
          "functions": [],
          "classes": [],
          "simplified_code": "  async isFavor(): Promise<boolean> {\n    if (this.favouriteStatus === STATUS_UNDEFINED) {\n      let fileAsset = await this.loadFileAsset();\n      try {\n        this.favouriteStatus = (fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean) ? STATUS_TRUE : STATUS_FALSE;\n      } catch (err) {\n        Log.error(TAG, 'isFavor error: ' + JSON.stringify(err));\n      }\n    }\n    return this.favouriteStatus === STATUS_TRUE;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async isFavor(): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.favouriteStatus === STATUS_UNDEFINED) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let fileAsset = await this.loadFileAsset();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "try {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.favouriteStatus = (fileAsset.get(photoAccessHelper.PhotoKeys.FAVORITE.toString()) as boolean) ? STATUS_TRUE : STATUS_FALSE;",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "} catch (err) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "Log.error(TAG, 'isFavor error: ' + JSON.stringify(err));",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "return this.favouriteStatus === STATUS_TRUE;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setFavor",
          "type": "function",
          "start_line": 258,
          "end_line": 268,
          "functions": [],
          "classes": [],
          "simplified_code": "  async setFavor(): Promise<boolean> {\n    let status = !(await this.isFavor());\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await fileAsset.setFavorite(status);\n      this.favouriteStatus = status ? STATUS_TRUE : STATUS_FALSE;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async setFavor(): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let status = !(await this.isFavor());",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let fileAsset = await this.loadFileAsset();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "await fileAsset.setFavorite(status);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.favouriteStatus = status ? STATUS_TRUE : STATUS_FALSE;",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return true;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "} catch (err) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return false;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setName",
          "type": "function",
          "start_line": 270,
          "end_line": 283,
          "functions": [],
          "classes": [],
          "simplified_code": "  async setName(name: string): Promise<void> {\n    let fileAsset = await this.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    this.displayName = displayName;\n    this.title = name;\n    try {\n      fileAsset.set(photoAccessHelper.PhotoKeys.TITLE.toString(), name);\n      await fileAsset.commitModify();\n    } catch (err) {\n      Log.error(TAG, 'setName error: ' + JSON.stringify(err));\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async setName(name: string): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let fileAsset = await this.loadFileAsset();\nlet displayName = fileAsset.displayName;\nlet index = displayName.lastIndexOf('.');\ndisplayName = name + displayName.slice(index);\nthis.displayName = displayName;\nthis.title = name;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "fileAsset.set(photoAccessHelper.PhotoKeys.TITLE.toString(), name);\nawait fileAsset.commitModify();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "catch (err) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "Log.error(TAG, 'setName error: ' + JSON.stringify(err));",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class UserFileDataItem implements DateAdded {\n  viewType: ViewType = ViewType.ITEM;\n  readonly hashIndex: number;\n  index: number;\n  dateAdded: number = 0;\n  dateModified: number;\n  dateTaken: number;\n  status: number = MediaConstants.UNDEFINED;\n  isSelect: boolean = false;\n  uri: string;\n  orientation: number;\n  duration: number;\n  size: number;\n  width: number; // width changed by orientation\n  height: number; // height changed by orientation\n  imgWidth: number; // may be smaller than width, as width is too large\n  imgHeight: number; // may be smaller than height, as height is too large\n  path: string = '';\n  title: string;\n  displayName: string;\n  mediaType: photoAccessHelper.PhotoType;\n  favouriteStatus: number = STATUS_UNDEFINED;\n  canRotate: number = STATUS_UNDEFINED;\n  selections: string = '';\n  selectionArgs: string[] = [];\n  deviceId: string = '';\n  fileAsset: photoAccessHelper.PhotoAsset = undefined;\n  defaultThumbnail: PixelMap = undefined;\n  thumbnailArray: Map<string, PixelMap> = new Map<string, PixelMap>();\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class UserFileDataItem implements DateAdded {\n  viewType: ViewType = ViewType.ITEM;\n  readonly hashIndex: number;\n  index: number;\n  dateAdded: number = 0;\n  dateModified: number;\n  dateTaken: number;\n  status: number = MediaConstants.UNDEFINED;\n  isSelect: boolean = false;\n  uri: string;\n  orientation: number;\n  duration: number;\n  size: number;\n  width: number; // width changed by orientation\n  height: number; // height changed by orientation\n  imgWidth: number; // may be smaller than width, as width is too large\n  imgHeight: number; // may be smaller than height, as height is too large\n  path: string = '';\n  title: string;\n  displayName: string;\n  mediaType: photoAccessHelper.PhotoType;\n  favouriteStatus: number = STATUS_UNDEFINED;\n  canRotate: number = STATUS_UNDEFINED;\n  selections: string = '';\n  selectionArgs: string[] = [];\n  deviceId: string = '';\n  fileAsset: photoAccessHelper.PhotoAsset = undefined;\n  defaultThumbnail: PixelMap = undefined;\n  thumbnailArray: Map<string, PixelMap> = new Map<string, PixelMap>();",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { ViewType } from '../models/ViewType';\nimport { userFileModel } from './UserFileModel';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { selectManager } from '../common/SelectManager';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { screenManager } from '../common/ScreenManager';\n\nconst TAG = 'UserFileDataItem';\nconst STATUS_UNDEFINED = -1;\nconst STATUS_FALSE = 0;\nconst STATUS_TRUE = 1;\n\nexport interface DateAdded {\n  dateAdded: number;\n  viewType: ViewType;\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';\nimport { ViewType } from '../models/ViewType';\nimport { userFileModel } from './UserFileModel';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { selectManager } from '../common/SelectManager';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { screenManager } from '../common/ScreenManager';",
      "successors": [
        {
          "id": 2,
          "label": "const TAG = 'UserFileDataItem';\nconst STATUS_UNDEFINED = -1;\nconst STATUS_FALSE = 0;\nconst STATUS_TRUE = 1;",
          "successors": [
            {
              "id": 3,
              "label": "export interface DateAdded {\n  dateAdded: number;\n  viewType: ViewType;\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}