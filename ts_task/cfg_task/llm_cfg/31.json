{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 312,
  "functions": [],
  "classes": [
    {
      "name": "AlbumDataImpl",
      "type": "class",
      "start_line": 26,
      "end_line": 312,
      "functions": [
        {
          "name": "setBlackList",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "  setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setBlackList(blackList: string[]): void {\n    this.blackList = blackList;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "setSelectType",
          "type": "function",
          "start_line": 35,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "  setSelectType(selectType: number): void {\n    this.selectType = selectType;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setSelectType(selectType: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.selectType = selectType;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setDeviceId",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "  setDeviceId(deviceId: string): void {\n    this.deviceId = deviceId;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setDeviceId(deviceId: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.deviceId = deviceId;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reloadAlbumItemData",
          "type": "function",
          "start_line": 43,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadAlbumItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumItemData');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);\n    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);\n    return albumDataItems;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadAlbumItemData(): Promise<AlbumDataItem[]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'reloadAlbumItemData');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    let albumDataItems: AlbumDataItem[] = [];",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    for (let i = 0; i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "    for (let i = 0; i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "    await this.getAlbumItem(MediaConstants.ALBUM_ID_USER, albumDataItems);",
                                      "successors": [
                                        {
                                          "id": 7,
                                          "label": "    await this.getAlbumItem(MediaConstants.ALBUM_ID_RECYCLE, albumDataItems);",
                                          "successors": [
                                            {
                                              "id": 8,
                                              "label": "    return albumDataItems;",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAlbumItem",
          "type": "function",
          "start_line": 54,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getAlbumItem(id: string, albumDataItems: AlbumDataItem[]): Promise<void> {\n    Log.info(TAG, 'getAlbumItem: ' + id);\n    if (this.blackList.indexOf(id) >= 0) {\n      Log.debug(TAG, 'no need as in black list');\n      return;\n    }\n    if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {\n      Log.info(TAG, 'no need');\n      return;\n    }\n    let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;\n    let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n    switch (id) {\n      case MediaConstants.ALBUM_ID_FAVOR:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;\n        break;\n      case MediaConstants.ALBUM_ID_CAMERA:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;\n        break;\n      case MediaConstants.ALBUM_ID_RECYCLE:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;\n        break;\n      case MediaConstants.ALBUM_ID_SNAPSHOT:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;\n        break;\n      case MediaConstants.ALBUM_ID_VIDEO:\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;\n        break;\n      case MediaConstants.ALBUM_ID_ALL:\n        await this.getAllPhotoAlbum(albumDataItems);\n        return;\n      case MediaConstants.ALBUM_ID_USER:\n        albumType = MediaConstants.ALBUM_TYPE_USER;\n        albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;\n        break;\n      case MediaConstants.ALBUM_ID_MOVING_PHOTO:\n        await this.getMovingPhotoAbstractAlbum(albumDataItems);\n        return;\n      default:\n        break;\n    }\n    await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'getAlbumItem: ' + id);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.blackList.indexOf(id) >= 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.debug(TAG, 'no need as in black list');",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (this.deviceId.length > 0 && (id !== MediaConstants.ALBUM_ID_SNAPSHOT && id !== MediaConstants.ALBUM_ID_CAMERA)) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "Log.info(TAG, 'no need');",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "let albumType = MediaConstants.ALBUM_TYPE_SYSTEM;",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "let albumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "switch (id) {",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "case MediaConstants.ALBUM_ID_FAVOR:\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_FAVOR;",
                                              "successors": [
                                                {
                                                  "id": 14,
                                                  "label": "break;",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "case MediaConstants.ALBUM_ID_CAMERA:\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_CAMERA;",
                                                      "successors": [
                                                        {
                                                          "id": 21,
                                                          "label": "break;",
                                                          "successors": [
                                                            {
                                                              "id": 22,
                                                              "label": "case MediaConstants.ALBUM_ID_RECYCLE:\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_RECYCLE;",
                                                              "successors": [
                                                                {
                                                                  "id": 23,
                                                                  "label": "break;",
                                                                  "successors": [
                                                                    {
                                                                      "id": 24,
                                                                      "label": "case MediaConstants.ALBUM_ID_SNAPSHOT:\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_SNAPSHOT;",
                                                                      "successors": [
                                                                        {
                                                                          "id": 25,
                                                                          "label": "break;",
                                                                          "successors": [
                                                                            {
                                                                              "id": 26,
                                                                              "label": "case MediaConstants.ALBUM_ID_VIDEO:\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_VIDEO;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 27,
                                                                                  "label": "break;",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 28,
                                                                                      "label": "case MediaConstants.ALBUM_ID_ALL:\nawait this.getAllPhotoAlbum(albumDataItems);",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 29,
                                                                                          "label": "return;",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "id": 30,
                                                                                      "label": "case MediaConstants.ALBUM_ID_USER:\nalbumType = MediaConstants.ALBUM_TYPE_USER;\nalbumSubType = MediaConstants.ALBUM_SUBTYPE_USER_GENERIC;",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 31,
                                                                                          "label": "break;",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 32,
                                                                                              "label": "case MediaConstants.ALBUM_ID_MOVING_PHOTO:\nawait this.getMovingPhotoAbstractAlbum(albumDataItems);",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 33,
                                                                                                  "label": "return;",
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "id": 34,
                                                                                              "label": "default:",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 35,
                                                                                                  "label": "break;",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 36,
                                                                                                      "label": "await this.getAlbumItemByUserFileMgr(id, albumType, albumSubType, albumDataItems);",
                                                                                                      "successors": []
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAlbumItemByUserFileMgr",
          "type": "function",
          "start_line": 98,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    try {\n      Log.info(TAG, 'getAlbumItemByUserFileMgr');\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);\n      Log.info(TAG, 'type:' + type);\n      Log.info(TAG, 'subType:' + subType);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      for (let i = 0; i < fetchResult.getCount(); i++) {\n        let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);\n        Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);\n        Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);\n        Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);\n        Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);\n        if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {\n          Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);\n          continue;\n        }\n        Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);\n        Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);\n        let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n        let fileAsset:photoAccessHelper.PhotoAsset = null;\n        let count = 0;\n        try {\n          let predicates = new dataSharePredicates.DataSharePredicates();\n          let fetchOptions = {\n            fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n            predicates: predicates\n          };\n          photoFetchResult = await albumAsset.getAssets(fetchOptions);\n          count = photoFetchResult.getCount();\n          Log.info(TAG, 'photoFetchResult count: ' + count);\n          let displayName = 'unknown';\n          if (id === MediaConstants.ALBUM_ID_USER) {\n            displayName = albumAsset.albumName;\n          } else {\n            displayName = await getAlbumDisplayName(id);\n          }\n          let albumType = albumAsset.albumType;\n          let albumSubType = albumAsset.albumSubtype;\n          let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);\n          albumItem.uri = albumAsset.albumUri;\n          if (count > 0) {\n            fileAsset = await photoFetchResult.getFirstObject();\n            Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n            await albumItem.update(fileAsset);\n          }\n          albumDataItems.push(albumItem);\n        } catch (err) {\n          Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n        } finally {\n          if (photoFetchResult != null) {\n            photoFetchResult.close();\n          }\n        }\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAlbumItemByUserFileMgr(id: string, type: photoAccessHelper.AlbumType, subType: photoAccessHelper.AlbumSubtype, albumDataItems: AlbumDataItem[]): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.info(TAG, 'getAlbumItemByUserFileMgr');",
                          "successors": [
                            {
                              "id": 5,
                              "label": "fetchResult = await userFileModel.getUserFileMgr().getAlbums(type, subType);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "Log.info(TAG, 'type:' + type);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "Log.info(TAG, 'subType:' + subType);",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "for (let i = 0; i < fetchResult.getCount(); i++) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "let albumAsset:photoAccessHelper.Album = await fetchResult.getObjectByPosition(i);",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "Log.info(TAG, 'albumAsset albumType: ' + i + '---' + albumAsset.albumType);",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "Log.info(TAG, 'albumAsset albumSubType: ' + i + '---' + albumAsset.albumSubtype);",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "Log.info(TAG, 'albumAsset albumName: ' + i + '---' + albumAsset.albumName);",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "Log.info(TAG, 'albumAsset albumUri: ' + i + '---' + albumAsset.albumUri);",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "if (this.blackList.indexOf(albumAsset.albumUri) >= 0) {",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "Log.debug(TAG, 'no need as in black list:'+albumAsset.albumUri);",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "continue;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "label": "}"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "id": 19,
                                                                      "label": "Log.info(TAG, 'albumAsset count: ' + i + '---' + albumAsset.count);",
                                                                      "successors": [
                                                                        {
                                                                          "id": 20,
                                                                          "label": "Log.info(TAG, 'albumAsset coverUri: ' + i + '---' + albumAsset.coverUri);",
                                                                          "successors": [
                                                                            {
                                                                              "id": 21,
                                                                              "label": "let photoFetchResult:photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 22,
                                                                                  "label": "let fileAsset:photoAccessHelper.PhotoAsset = null;",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 23,
                                                                                      "label": "let count = 0;",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 24,
                                                                                          "label": "try {",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 25,
                                                                                              "label": "let predicates = new dataSharePredicates.DataSharePredicates();",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 26,
                                                                                                  "label": "let fetchOptions = { fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS, predicates: predicates };",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 27,
                                                                                                      "label": "photoFetchResult = await albumAsset.getAssets(fetchOptions);",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 28,
                                                                                                          "label": "count = photoFetchResult.getCount();",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 29,
                                                                                                              "label": "Log.info(TAG, 'photoFetchResult count: ' + count);",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 30,
                                                                                                                  "label": "let displayName = 'unknown';",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 31,
                                                                                                                      "label": "if (id === MediaConstants.ALBUM_ID_USER) {",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 32,
                                                                                                                          "label": "displayName = albumAsset.albumName;",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 33,
                                                                                                                              "label": "} else {",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 34,
                                                                                                                                  "label": "displayName = await getAlbumDisplayName(id);",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 35,
                                                                                                                                      "label": "}"
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                          "id": 36,
                                                                                                                          "label": "let albumType = albumAsset.albumType;",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 37,
                                                                                                                              "label": "let albumSubType = albumAsset.albumSubtype;",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 38,
                                                                                                                                  "label": "let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, albumType, albumSubType);",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 39,
                                                                                                                                      "label": "albumItem.uri = albumAsset.albumUri;",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 40,
                                                                                                                                          "label": "if (count > 0) {",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 41,
                                                                                                                                              "label": "fileAsset = await photoFetchResult.getFirstObject();",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 42,
                                                                                                                                                  "label": "Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 43,
                                                                                                                                                      "label": "await albumItem.update(fileAsset);",
                                                                                                                                                      "successors": [
                                                                                                                                                        {
                                                                                                                                                          "id": 44,
                                                                                                                                                          "label": "albumDataItems.push(albumItem);"
                                                                                                                                                        }
                                                                                                                                                      ]
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            },
                                                                                                                                            {
                                                                                                                                              "id": 45,
                                                                                                                                              "label": "} catch (err) {",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 46,
                                                                                                                                                  "label": "Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 47,
                                                                                                                                                      "label": "}"
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                          "id": 48,
                                                                                                                                          "label": "finally {",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 49,
                                                                                                                                              "label": "if (photoFetchResult != null) {",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 50,
                                                                                                                                                  "label": "photoFetchResult.close();",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 51,
                                                                                                                                                      "label": "}",
                                                                                                                                                      "successors": [
                                                                                                                                                        {
                                                                                                                                                          "id": 52,
                                                                                                                                                          "label": "}",
                                                                                                                                                          "successors": [
                                                                                                                                                            {
                                                                                                                                                              "id": 53,
                                                                                                                                                              "label": "} catch (err) {",
                                                                                                                                                              "successors": [
                                                                                                                                                                {
                                                                                                                                                                  "id": 54,
                                                                                                                                                                  "label": "Log.error(TAG, 'get Album fetchResult failed with err: ' + err);",
                                                                                                                                                                  "successors": [
                                                                                                                                                                    {
                                                                                                                                                                      "id": 55,
                                                                                                                                                                      "label": "} finally {",
                                                                                                                                                                      "successors": [
                                                                                                                                                                        {
                                                                                                                                                                          "id": 56,
                                                                                                                                                                          "label": "if (fetchResult != null) {",
                                                                                                                                                                          "successors": [
                                                                                                                                                                            {
                                                                                                                                                                              "id": 57,
                                                                                                                                                                              "label": "fetchResult.close();",
                                                                                                                                                                              "successors": [
                                                                                                                                                                                {
                                                                                                                                                                                  "id": 58,
                                                                                                                                                                                  "label": "}",
                                                                                                                                                                                  "successors": [
                                                                                                                                                                                    {
                                                                                                                                                                                      "id": 59,
                                                                                                                                                                                      "label": "}"
                                                                                                                                                                                    }
                                                                                                                                                                                  ]
                                                                                                                                                                                }
                                                                                                                                                                              ]
                                                                                                                                                                            }
                                                                                                                                                                          ]
                                                                                                                                                                        }
                                                                                                                                                                      ]
                                                                                                                                                                    }
                                                                                                                                                                  ]
                                                                                                                                                                }
                                                                                                                                                              ]
                                                                                                                                                            }
                                                                                                                                                          ]
                                                                                                                                                        }
                                                                                                                                                      ]
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ],
                          "blocks": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUserAlbumItemByUri",
          "type": "function",
          "start_line": 163,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {\n    let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\n    let album: photoAccessHelper.Album = null;\n    try {\n      Log.info(TAG, 'getUserAlbumItemByUri');\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\n      let fetchOptions = {\n        fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      fetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n      Log.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());\n      if (fetchResult.getCount() > 0) {\n        album = await fetchResult.getFirstObject();\n      }\n    } catch (err) {\n      Log.error(TAG, 'get Album fetchResult failed with err: ' + err);\n    } finally {\n      if (fetchResult != null) {\n        fetchResult.close();\n      }\n    }\n    return album;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getUserAlbumItemByUri(uri: string): Promise<photoAccessHelper.Album> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let fetchResult:photoAccessHelper.FetchResult<photoAccessHelper.Album> = null;\nlet album: photoAccessHelper.Album = null;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.info(TAG, 'getUserAlbumItemByUri');\nlet predicates = new dataSharePredicates.DataSharePredicates();\npredicates.equalTo(photoAccessHelper.AlbumKeys.URI, uri);\nlet fetchOptions = {\nfetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\npredicates: predicates\n};\nfetchResult = await userFileModel.getUserFileMgr().getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\nLog.info(TAG, 'get Album fetchResult, count: ' + fetchResult.getCount());",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (fetchResult.getCount() > 0) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "album = await fetchResult.getFirstObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "}",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "} catch (err) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "Log.error(TAG, 'get Album fetchResult failed with err: ' + err);",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "} finally {",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "if (fetchResult != null) {",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "fetchResult.close();",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "}",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "return album;",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "}",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "removeFileFromAlbum",
          "type": "function",
          "start_line": 189,
          "end_line": 201,
          "functions": [],
          "classes": [],
          "simplified_code": "  async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {\n    let album = await this.getUserAlbumItemByUri(albumUri);\n    let fileAsset = await userFileModel.getMediaItemByUri(uri);\n    if (album != null && fileAsset != null) {\n      try {\n        await album.removeAssets([fileAsset]);\n        return true;\n      } catch (err) {\n        Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);\n      }\n    }\n    return false;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async removeFileFromAlbum(albumUri: string, uri: string): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let album = await this.getUserAlbumItemByUri(albumUri);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let fileAsset = await userFileModel.getMediaItemByUri(uri);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (album != null && fileAsset != null) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "await album.removeAssets([fileAsset]);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return true;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "} catch (err) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "Log.error(TAG, 'album removePhotoAssets failed with error: ' + err);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "}",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAllPhotoAlbum",
          "type": "function",
          "start_line": 203,
          "end_line": 231,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getAllPhotoAlbum count: ' + count);\n      let displayName = '';\n      let id = MediaConstants.ALBUM_ID_ALL;\n      displayName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getAllPhotoAlbum(albumDataItems: AlbumDataItem[]): Promise<void>",
              "successors": [
                {
                  "id": 2,
                  "label": "let photoFetchResult = null;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let predicates = new dataSharePredicates.DataSharePredicates();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let fetchOptions = { fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,predicates: predicates };",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let count = photoFetchResult.getCount();",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "Log.info(TAG, 'getAllPhotoAlbum count: ' + count);",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "let displayName = '';",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "let id = MediaConstants.ALBUM_ID_ALL;",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "displayName = await getAlbumDisplayName(id);",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "let albumItem: AlbumDataItem = new AlbumDataItem(id, count, displayName, this.selectType, this.deviceId, -1, -1);",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "if (count > 0)",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "let fileAsset = await photoFetchResult.getFirstObject();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "await albumItem.update(fileAsset);",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "Log.info(TAG, 'getFirstObject file displayName: ' + fileAsset.displayName);",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "albumDataItems.push(albumItem);",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "id": 17,
                                                                  "label": "albumDataItems.push(albumItem);",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 18,
                          "label": "catch (err)",
                          "successors": [
                            {
                              "id": 19,
                              "label": "Log.error(TAG, 'get Album getPhotoAssets failed with err: ' + err);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 20,
                      "label": "finally",
                      "successors": [
                        {
                          "id": 21,
                          "label": "if (photoFetchResult != null)",
                          "successors": [
                            {
                              "id": 22,
                              "label": "photoFetchResult.close();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getMovingPhotoAbstractAlbum",
          "type": "function",
          "start_line": 233,
          "end_line": 262,
          "functions": [],
          "classes": [],
          "simplified_code": "  async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;\n    try {\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);\n      let fetchOptions: photoAccessHelper.FetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);\n      let count = photoFetchResult.getCount();\n      Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);\n      let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;\n      let albumName = await getAlbumDisplayName(id);\n      let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,\n        MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);\n      if (count > 0) {\n        let fileAsset = await photoFetchResult.getFirstObject();\n        await albumItem.update(fileAsset);\n        Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);\n      }\n      albumDataItems.push(albumItem);\n    } catch (err) {\n      Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);\n    } finally {\n      if (photoFetchResult != null) {\n        photoFetchResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async getMovingPhotoAbstractAlbum(albumDataItems: AlbumDataItem[]): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = null;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let predicates = new dataSharePredicates.DataSharePredicates();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "predicates.equalTo(MediaConstants.PHOTO_SUBTYPE, MediaConstants.MOVING_PHOTO);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "let fetchOptions: photoAccessHelper.FetchOptions = {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "predicates: predicates",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "};",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "photoFetchResult = await userFileModel.getUserFileMgr().getAssets(fetchOptions);",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "let count = photoFetchResult.getCount();",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "Log.info(TAG, 'getMovingPhotoAbstractAlbum count: ' + count);",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "let id = MediaConstants.ALBUM_ID_MOVING_PHOTO;",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "let albumName = await getAlbumDisplayName(id);",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "let albumItem: AlbumDataItem = new AlbumDataItem(id, count, albumName, this.selectType, this.deviceId,",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "MediaConstants.ABSTRACT_ALBUM_TYPE_MOVING_PHOTO, -1);",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "if (count > 0) {",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "label": "let fileAsset = await photoFetchResult.getFirstObject();",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 19,
                                                                                      "label": "await albumItem.update(fileAsset);",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 20,
                                                                                          "label": "Log.info(TAG, 'first moving photo displayName: ' + fileAsset.displayName);",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "id": 21,
                                                                              "label": "}",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 22,
                                                                                  "label": "albumDataItems.push(albumItem);",
                                                                                  "successors": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 23,
                          "label": "}",
                          "successors": [
                            {
                              "id": 24,
                              "label": "catch (err) {",
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "Log.error(TAG, 'getMovingPhotoAbstractAlbum failed with err: ' + err);",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 26,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "finally {",
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "if (photoFetchResult != null) {",
                                      "successors": [
                                        {
                                          "id": 29,
                                          "label": "photoFetchResult.close();",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 30,
                                      "label": "}",
                                      "successors": []
                                    },
                                    {
                                      "id": 31,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 32,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reloadAlbumListItemData",
          "type": "function",
          "start_line": 264,
          "end_line": 272,
          "functions": [],
          "classes": [],
          "simplified_code": "  async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {\n    Log.info(TAG, 'reloadAlbumListItemData start');\n    let albumDataItems: AlbumDataItem[] = [];\n    for (let i = 0;i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {\n      await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);\n    }\n    await this.getCommonListAlbumItem(albumDataItems);\n    return albumDataItems;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async reloadAlbumListItemData(): Promise<AlbumDataItem[]> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.info(TAG, 'reloadAlbumListItemData start');",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    let albumDataItems: AlbumDataItem[] = [];",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    for (let i = 0; i < MediaConstants.ALBUM_DEFAULT_SORT_LIST.length; i++) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "        await this.getAlbumItem(MediaConstants.ALBUM_DEFAULT_SORT_LIST[i], albumDataItems);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    }",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    await this.getCommonListAlbumItem(albumDataItems);",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    return albumDataItems;",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getCommonListAlbumItem",
          "type": "function",
          "start_line": 274,
          "end_line": 282,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {\n    let predicates = new dataSharePredicates.DataSharePredicates();\n    let fetchOptions = {\n      fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS,\n      predicates: predicates\n    };\n    let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);\n    await this.getAlbumDataItem(albumDataItems, albums);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async getCommonListAlbumItem(albumDataItems: AlbumDataItem[]): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "let predicates = new dataSharePredicates.DataSharePredicates();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let fetchOptions = { fetchColumns: MediaConstants.EMPTY_FETCH_COLUMNS, predicates: predicates };",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let albums: photoAccessHelper.Album[] = await userFileModel.getAlbums(fetchOptions);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "await this.getAlbumDataItem(albumDataItems, albums);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getAlbumDataItem",
          "type": "function",
          "start_line": 284,
          "end_line": 311,
          "functions": [],
          "classes": [],
          "simplified_code": "  private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {\n    for (let i = 0;i < albums.length; i++) {\n      let album: photoAccessHelper.Album = albums[i];\n      if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {\n        continue;\n      }\n      let predicates = new dataSharePredicates.DataSharePredicates();\n      let fetchOptions = {\n        fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n        predicates: predicates\n      };\n      let fetchFileResult = await album.getAssets(fetchOptions);\n      try {\n        let count = fetchFileResult.getCount();\n        if (count === 0) {\n          continue;\n        }\n        let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\n        item.uri = album.albumUri;\n        await item.update(await fetchFileResult.getFirstObject());\n        albumDataItems.push(item);\n      } catch (err) {\n        Log.error(TAG, 'on err: ' + JSON.stringify(err));\n      } finally {\n        fetchFileResult.close();\n      }\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private async getAlbumDataItem(albumDataItems: AlbumDataItem[], albums: photoAccessHelper.Album[]): Promise<void> {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (let i = 0;i < albums.length; i++) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let album: photoAccessHelper.Album = albums[i];",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (this.blackList.indexOf(album.albumUri.toString()) >= 0) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "continue;",
                              "successors": [
                                {
                                  "id": 2
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "let predicates = new dataSharePredicates.DataSharePredicates();\nlet fetchOptions = {\n  fetchColumns: MediaConstants.FILE_ASSET_FETCH_COLUMNS,\n  predicates: predicates\n};\nlet fetchFileResult = await album.getAssets(fetchOptions);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "let count = fetchFileResult.getCount();",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "if (count === 0) {",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "continue;",
                                          "successors": [
                                            {
                                              "id": 2
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 11,
                                      "label": "let item = new AlbumDataItem(MediaConstants.ALBUM_ID_USER, count, album.albumName, this.selectType, this.deviceId, 0, 0);\nitem.uri = album.albumUri;\nawait item.update(await fetchFileResult.getFirstObject());\nalbumDataItems.push(item);",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "}",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "catch (err) {",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "Log.error(TAG, 'on err: ' + JSON.stringify(err));",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "finally {",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "fetchFileResult.close();",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "}",
                                                                  "successors": [
                                                                    {
                                                                      "id": 2,
                                                                      "label": "}"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class AlbumDataImpl {\n  private blackList: string[] = [];\n  private selectType: number = MediaConstants.SELECT_TYPE_ALL;\n  private deviceId: string = '';\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class AlbumDataImpl {",
          "successors": [
            {
              "id": 2,
              "label": "  private blackList: string[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "  private selectType: number = MediaConstants.SELECT_TYPE_ALL;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  private deviceId: string = '';",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\nimport { AlbumDataItem } from './AlbumDataItem';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from '../base/UserFileModel';\nimport { getAlbumDisplayName } from '../base/UserFileDataHelper';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport dataSharePredicates from '@ohos.data.dataSharePredicates';\n\nconst TAG = 'AlbumDataImpl';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';",
      "successors": [
        {
          "id": 2,
          "label": "import { AlbumDataItem } from './AlbumDataItem';",
          "successors": [
            {
              "id": 3,
              "label": "import { MediaConstants } from '../constants/MediaConstants';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { userFileModel } from '../base/UserFileModel';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { getAlbumDisplayName } from '../base/UserFileDataHelper';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import dataSharePredicates from '@ohos.data.dataSharePredicates';",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "const TAG = 'AlbumDataImpl';",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}