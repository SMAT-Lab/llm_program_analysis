{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 114,
  "functions": [],
  "classes": [
    {
      "name": "PhotoGridBarModel",
      "type": "class",
      "start_line": 22,
      "end_line": 114,
      "functions": [
        {
          "name": "setAlbumId",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "  setAlbumId(albumId: string): void {\n    this.albumId = albumId;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "setAlbumId(albumId: string): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.albumId = albumId;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "createActionBar",
          "type": "function",
          "start_line": 29,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "  createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number,\n                  isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    let actionBarProp: ActionBarProp = new ActionBarProp();\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "createActionBar(title: Object, isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {",
              "successors": [
                {
                  "id": 2,
                  "label": "let actionBarProp: ActionBarProp = new ActionBarProp();\nlet isHorizontal = screenManager.isHorizontal()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (isHorizontal) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return actionBarProp;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "} else {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "return actionBarProp;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateActionBar",
          "type": "function",
          "start_line": 41,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": "  updateActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                  selectedCount: number, isAllSelected: boolean, isEmpty: boolean): void {\n    let isHorizontal = screenManager.isHorizontal()\n    if (isHorizontal) {\n      this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    } else {\n      this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let isHorizontal = screenManager.isHorizontal()",
              "successors": [
                {
                  "id": 2,
                  "label": "if (isHorizontal) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.updateHorizontalActionBar(actionBarProp, title, isSelectedMode, selectedCount, isAllSelected, isEmpty);",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "this.updateVerticalActionBar(actionBarProp, title, isSelectedMode);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateHorizontalActionBar",
          "type": "function",
          "start_line": 51,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  private updateHorizontalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean,\n                                    selectedCount: number, isAllSelected: boolean, isEmpty: boolean): ActionBarProp {\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);\n    if (isSelectedMode) {\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    } else {\n      if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n        menuList.push(Action.NEW);\n      }\n    }\n    actionBarProp.setMenuList(menuList);\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "actionBarProp\n  .setLeftAction(Action.BACK)\n  .setTitle(title)\n  .setMode(ActionBarMode.STANDARD_MODE);",
              "successors": [
                {
                  "id": 2,
                  "label": "let menuList: Action[] = this.getMenuList(isSelectedMode, selectedCount, isAllSelected, isEmpty);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (isSelectedMode) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "  actionBarProp\n    .setLeftAction(Action.CANCEL)\n    .setMode(ActionBarMode.SELECTION_MODE)\n    .setSelectionMode(ActionBarSelectionMode.MULTI);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "actionBarProp.setMenuList(menuList);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return actionBarProp;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "  if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n    menuList.push(Action.NEW);\n  }",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "actionBarProp.setMenuList(menuList);",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "return actionBarProp;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateVerticalActionBar",
          "type": "function",
          "start_line": 72,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "  private updateVerticalActionBar(actionBarProp: ActionBarProp, title: Object, isSelectedMode: boolean): ActionBarProp {\n    let menuList: Action[] = [];\n\n    if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {\n      menuList.push(Action.NEW);\n    }\n\n    actionBarProp\n      .setLeftAction(Action.BACK)\n      .setTitle(title)\n      .setMenuList(menuList)\n      .setMode(ActionBarMode.STANDARD_MODE);\n    if (isSelectedMode) {\n      menuList = [];\n      actionBarProp\n        .setLeftAction(Action.CANCEL)\n        .setMenuList(menuList)\n        .setMode(ActionBarMode.SELECTION_MODE)\n        .setSelectionMode(ActionBarSelectionMode.MULTI);\n    }\n\n    return actionBarProp;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let menuList: Action[] = [];",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!MediaConstants.ALBUM_DISABLE_NEW_LIST.has(this.albumId)) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "menuList.push(Action.NEW);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "actionBarProp\n  .setLeftAction(Action.BACK)\n  .setTitle(title)\n  .setMenuList(menuList)\n  .setMode(ActionBarMode.STANDARD_MODE);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (isSelectedMode) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "menuList = [];\nactionBarProp\n  .setLeftAction(Action.CANCEL)\n  .setMenuList(menuList)\n  .setMode(ActionBarMode.SELECTION_MODE)\n  .setSelectionMode(ActionBarSelectionMode.MULTI);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "return actionBarProp;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getMenuList",
          "type": "function",
          "start_line": 96,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "  getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];\n    if (isSelectedMode) {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {\n        menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n      } else {\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);\n      }\n    } else {\n      if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {\n        menuList.push(Action.CLEAR_RECYCLE);\n      }\n    }\n    return menuList;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getMenuList(isSelectedMode: boolean, selectedCount: number, isAllSelected: boolean, isEmpty: boolean): Action[] {\n    let menuList: Action[] = [];",
              "successors": [
                {
                  "id": 2,
                  "label": "if (isSelectedMode) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "menuList.push((new Boolean(selectedCount)) ? Action.RECOVER : Action.RECOVER_INVALID);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID);\n        menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);",
                          "successors": [
                            {
                              "id": 10,
                              "label": "return menuList;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "menuList.push(isAllSelected ? Action.DESELECT_ALL : Action.SELECT_ALL);\n        menuList.push((new Boolean(selectedCount)) ? Action.DELETE : Action.DELETE_INVALID, Action.MORE);",
                          "successors": [
                            {
                              "id": 10,
                              "label": "return menuList;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} else {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "if (this.albumId === MediaConstants.ALBUM_ID_RECYCLE && !isEmpty) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "menuList.push(Action.CLEAR_RECYCLE);",
                          "successors": [
                            {
                              "id": 10,
                              "label": "return menuList;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "return menuList;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class PhotoGridBarModel {\n  private albumId: string = '';\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class PhotoGridBarModel {",
          "successors": [
            {
              "id": 2,
              "label": "private albumId: string = '';",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action } from './Action';\nimport { ActionBarProp } from '../common/ActionBarProp';\nimport { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode';\nimport { screenManager } from '../common/ScreenManager';\nimport { MediaConstants } from '../constants/MediaConstants';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Action } from './Action';",
      "successors": [
        {
          "id": 2,
          "label": "import { ActionBarProp } from '../common/ActionBarProp';",
          "successors": [
            {
              "id": 3,
              "label": "import { ActionBarMode, ActionBarSelectionMode } from './ActionBarMode';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { screenManager } from '../common/ScreenManager';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { MediaConstants } from '../constants/MediaConstants';",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}