{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 132,
  "functions": [
    {
      "name": "initializeSession",
      "type": "function",
      "start_line": 27,
      "end_line": 41,
      "functions": [],
      "classes": [],
      "simplified_code": "  const initializeSession = async ({\n    applicationIdentifier,\n    subscriberId,\n    subscriberHash,\n  }: {\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }) => {\n    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });\n  };",
      "blocks": [
        {
          "id": 1,
          "label": "const initializeSession = async ({\napplicationIdentifier,\nsubscriberId,\nsubscriberHash,\n}: {\napplicationIdentifier: string;\nsubscriberId: string;\nsubscriberHash?: string;\n}) => {",
          "successors": [
            {
              "id": 2,
              "label": "    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });",
              "successors": []
            },
            {
              "id": 3,
              "label": "};",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "setIntegrationConfig",
      "type": "function",
      "start_line": 107,
      "end_line": 132,
      "functions": [],
      "classes": [],
      "simplified_code": "async function setIntegrationConfig(\n  {\n    _environmentId,\n    _organizationId,\n    hmac = true,\n    active = true,\n  }: { _environmentId: string; _organizationId: string; active?: boolean; hmac?: boolean },\n  cacheService: CacheService\n) {\n  await cacheService.delByPattern('*');\n  await integrationRepository.update(\n    {\n      _environmentId,\n      _organizationId,\n      providerId: InAppProviderIdEnum.Novu,\n      channel: ChannelTypeEnum.IN_APP,\n      active: true,\n    },\n    {\n      $set: {\n        'credentials.hmac': hmac,\n        active,\n      },\n    }\n  );\n}",
      "blocks": [
        {
          "id": 1,
          "label": "async function setIntegrationConfig({ _environmentId, _organizationId, hmac = true, active = true, }: { _environmentId: string; _organizationId: string; active?: boolean; hmac?: boolean }, cacheService: CacheService) {",
          "successors": [
            {
              "id": 2,
              "label": "await cacheService.delByPattern('*');",
              "successors": [
                {
                  "id": 3,
                  "label": "await integrationRepository.update({ _environmentId, _organizationId, providerId: InAppProviderIdEnum.Novu, channel: ChannelTypeEnum.IN_APP, active: true, }, { $set: { 'credentials.hmac': hmac, active, }, });",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "describe",
      "type": "class",
      "start_line": 8,
      "end_line": 106,
      "functions": [
        {
          "name": "before",
          "type": "function",
          "start_line": 11,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "  before(async () => {\n    const cacheInMemoryProviderService = new CacheInMemoryProviderService();\n    cacheService = new CacheService(cacheInMemoryProviderService);\n    await cacheService.initialize();\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "before(async () => {",
              "successors": [
                {
                  "id": 2,
                  "label": "  const cacheInMemoryProviderService = new CacheInMemoryProviderService();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  cacheService = new CacheService(cacheInMemoryProviderService);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "  await cacheService.initialize();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "});",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "beforeEach",
          "type": "function",
          "start_line": 16,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "  beforeEach(async () => {\n    session = new UserSession();\n    await session.initialize();\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n      },\n      cacheService\n    );\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "beforeEach(async () => {",
              "successors": [
                {
                  "id": 2,
                  "label": "  session = new UserSession();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  await session.initialize();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "  await setIntegrationConfig(",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "      _environmentId: session.environment._id,",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "      _organizationId: session.environment._organizationId,",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    },",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "    cacheService",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "  );",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "});",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 42,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should initialize session', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        hmac: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should initialize session', async function () {",
              "successors": [
                {
                  "id": 2,
                  "label": "await setIntegrationConfig(\n  {\n    _environmentId: session.environment._id,\n    _organizationId: session.environment._organizationId,\n    hmac: false,\n  },\n  cacheService\n);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const { body, status } = await initializeSession({\n  applicationIdentifier: session.environment.identifier,\n  subscriberId: mockSubscriberId,\n});",
                      "successors": [
                        {
                          "id": 4,
                          "label": "expect(status).to.equal(201);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "expect(body.data.token).to.be.ok;",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "expect(body.data.totalUnreadCount).to.equal(0);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "});",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 59,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should initialize session with HMAC', async function () {\n    const secretKey = session.environment.apiKeys[0].key;\n    const subscriberHash = createHash(secretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(201);\n    expect(body.data.token).to.be.ok;\n    expect(body.data.totalUnreadCount).to.equal(0);\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should initialize session with HMAC', async function () {",
              "successors": [
                {
                  "id": 2,
                  "label": "const secretKey = session.environment.apiKeys[0].key;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const subscriberHash = createHash(secretKey, mockSubscriberId);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "const { body, status } = await initializeSession({\n  applicationIdentifier: session.environment.identifier,\n  subscriberId: mockSubscriberId,\n  subscriberHash,\n});",
                          "successors": [
                            {
                              "id": 5,
                              "label": "expect(status).to.equal(201);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "expect(body.data.token).to.be.ok;",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "expect(body.data.totalUnreadCount).to.equal(0);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 71,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should throw an error when invalid applicationIdentifier provided', async function () {\n    const { body, status } = await initializeSession({\n      applicationIdentifier: 'some-not-existing-id',\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid application identifier');\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should throw an error when invalid applicationIdentifier provided', async function () {",
              "successors": [
                {
                  "id": 2,
                  "label": "const { body, status } = await initializeSession({",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "applicationIdentifier: 'some-not-existing-id',",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "subscriberId: mockSubscriberId,",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "});",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "expect(status).to.equal(400);",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "expect(body.message).to.contain('Please provide a valid application identifier');",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "});",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 79,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should throw an error when no active integrations', async function () {\n    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      },\n      cacheService\n    );\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });\n    expect(status).to.equal(404);\n    expect(body.message).to.contain('The active in-app integration could not be found');\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should throw an error when no active integrations', async function () {",
              "successors": [
                {
                  "id": 2,
                  "label": "    await setIntegrationConfig(\n      {\n        _environmentId: session.environment._id,\n        _organizationId: session.environment._organizationId,\n        active: false,\n      },\n      cacheService\n    );",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: mockSubscriberId,\n    });",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    expect(status).to.equal(404);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    expect(body.message).to.contain('The active in-app integration could not be found');",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "});",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "it",
          "type": "function",
          "start_line": 95,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "  it('should throw an error when invalid subscriberHash provided', async function () {\n    const invalidSecretKey = 'invalid-secret-key';\n    const subscriberHash = createHash(invalidSecretKey, mockSubscriberId);\n    const { body, status } = await initializeSession({\n      applicationIdentifier: session.environment.identifier,\n      subscriberId: session.subscriberId,\n      subscriberHash,\n    });\n    expect(status).to.equal(400);\n    expect(body.message).to.contain('Please provide a valid HMAC hash');\n  });",
          "blocks": [
            {
              "id": 1,
              "label": "it('should throw an error when invalid subscriberHash provided', async function () {",
              "successors": [
                {
                  "id": 2,
                  "label": "const invalidSecretKey = 'invalid-secret-key';",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const subscriberHash = createHash(invalidSecretKey, mockSubscriberId);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "const { body, status } = await initializeSession({\n  applicationIdentifier: session.environment.identifier,\n  subscriberId: session.subscriberId,\n  subscriberHash,\n});",
                          "successors": [
                            {
                              "id": 5,
                              "label": "expect(status).to.equal(400);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "expect(body.message).to.contain('Please provide a valid HMAC hash');",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "describe('Session - /inbox/session (POST)', async () => {\n  let session: UserSession;\n  let cacheService: CacheService;\n  });\n  });\n  const initializeSession = async ({\n    applicationIdentifier,\n    subscriberId,\n    subscriberHash,\n  }: {\n    applicationIdentifier: string;\n    subscriberId: string;\n    subscriberHash?: string;\n  }) => {\n    return await session.testAgent.post('/v1/inbox/session').send({\n      applicationIdentifier,\n      subscriberId,\n      subscriberHash,\n    });\n  };\n  });\n  });\n  });\n  });\n  });\n});",
      "blocks": [
        {
          "id": 1,
          "label": "describe('Session - /inbox/session (POST)', async () => {",
          "successors": [
            {
              "id": 2,
              "label": "let session: UserSession;\nlet cacheService: CacheService;",
              "successors": [
                {
                  "id": 3,
                  "label": "});\n});\nconst initializeSession = async ({\n  applicationIdentifier,\n  subscriberId,\n  subscriberHash,\n}: {\n  applicationIdentifier: string;\n  subscriberId: string;\n  subscriberHash?: string;\n}) => {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return await session.testAgent.post('/v1/inbox/session').send({\n  applicationIdentifier,\n  subscriberId,\n  subscriberHash,\n});\n});\n});\n});\n});\n});\n});",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import { IntegrationRepository } from '@novu/dal';\nimport { ChannelTypeEnum, InAppProviderIdEnum } from '@novu/shared';\nimport { UserSession } from '@novu/testing';\nimport { expect } from 'chai';\nimport { CacheInMemoryProviderService, CacheService, createHash } from '@novu/application-generic';\nconst integrationRepository = new IntegrationRepository();\nconst mockSubscriberId = '12345';\n});\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { IntegrationRepository } from '@novu/dal';",
      "successors": [
        {
          "id": 2,
          "label": "import { ChannelTypeEnum, InAppProviderIdEnum } from '@novu/shared';",
          "successors": [
            {
              "id": 3,
              "label": "import { UserSession } from '@novu/testing';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { expect } from 'chai';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { CacheInMemoryProviderService, CacheService, createHash } from '@novu/application-generic';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "const integrationRepository = new IntegrationRepository();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "const mockSubscriberId = '12345';",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}