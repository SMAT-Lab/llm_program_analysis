{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 50,
  "functions": [
    {
      "name": "buildServePath",
      "type": "function",
      "start_line": 2,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "export function buildServePath(\n  browserOptions: NormalizedWebpackExecutorOptions\n) {\n  let servePath =\n    _findDefaultServePath(browserOptions.baseHref, browserOptions.deployUrl) ||\n    '/';\n  if (servePath.endsWith('/')) {\n    servePath = servePath.slice(0, -1);\n  }\n  if (!servePath.startsWith('/')) {\n    servePath = `/${servePath}`;\n  }\n  return servePath;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let servePath = _findDefaultServePath(browserOptions.baseHref, browserOptions.deployUrl) || '/';",
          "successors": [
            {
              "id": 2,
              "label": "if (servePath.endsWith('/')) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    servePath = servePath.slice(0, -1);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (!servePath.startsWith('/')) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    servePath = `/${servePath}`;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return servePath;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "return servePath;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (!servePath.startsWith('/')) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    servePath = `/${servePath}`;",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return servePath;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "return servePath;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "_findDefaultServePath",
      "type": "function",
      "start_line": 16,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "export function _findDefaultServePath(\n  baseHref?: string,\n  deployUrl?: string\n): string | null {\n  if (!baseHref && !deployUrl) {\n    return '';\n  }\n  if (\n    /^(\\w+:)?\\/\\//.test(baseHref || '') ||\n    /^(\\w+:)?\\/\\//.test(deployUrl || '')\n  ) {\n    // If baseHref or deployUrl is absolute, unsupported by nx serve\n    return null;\n  }\n  // normalize baseHref\n  // for nx serve the starting base is always `/` so a relative\n  // and root relative value are identical\n  const baseHrefParts = (baseHref || '')\n    .split('/')\n    .filter((part) => part !== '');\n  if (baseHref && !baseHref.endsWith('/')) {\n    baseHrefParts.pop();\n  }\n  const normalizedBaseHref =\n    baseHrefParts.length === 0 ? '/' : `/${baseHrefParts.join('/')}/`;\n  if (deployUrl && deployUrl[0] === '/') {\n    if (baseHref && baseHref[0] === '/' && normalizedBaseHref !== deployUrl) {\n      // If baseHref and deployUrl are root relative and not equivalent, unsupported by nx serve\n      return null;\n    }\n    return deployUrl;\n  }\n  // Join together baseHref and deployUrl\n  return `${normalizedBaseHref}${deployUrl || ''}`;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function _findDefaultServePath(\n  baseHref?: string,\n  deployUrl?: string\n): string | null {",
          "successors": [
            {
              "id": 2,
              "label": "if (!baseHref && !deployUrl) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return '';",
                  "successors": [
                    {
                      "id": 4,
                      "label": "} else ",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (/^(\\w+:)?\\/\\//.test(baseHref || '') || /^(\\w+:)?\\/\\//.test(deployUrl || '')) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "// If baseHref or deployUrl is absolute, unsupported by nx serve\nreturn null;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "} else ",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "// normalize baseHref\n// for nx serve the starting base is always `/` so a relative\n// and root relative value are identical\nconst baseHrefParts = (baseHref || '')\n  .split('/')\n  .filter((part) => part !== '');",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "if (baseHref && !baseHref.endsWith('/')) {",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "baseHrefParts.pop();",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "} else ",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "const normalizedBaseHref =\nbaseHrefParts.length === 0 ? '/' : `/${baseHrefParts.join('/')}/`;",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "if (deployUrl && deployUrl[0] === '/') {",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "if (baseHref && baseHref[0] === '/' && normalizedBaseHref !== deployUrl) {",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "label": "// If baseHref and deployUrl are root relative and not equivalent, unsupported by nx serve\nreturn null;",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "label": "} else ",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "label": "return deployUrl;",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "label": "} else ",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 19,
                                                                                  "label": "// Join together baseHref and deployUrl\nreturn `${normalizedBaseHref}${deployUrl || ''}`;",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 20,
                                                                                      "label": "}"
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import type { NormalizedWebpackExecutorOptions } from '../../webpack/schema';\n}\n}",
  "blocks": []
}