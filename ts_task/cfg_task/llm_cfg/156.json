{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 37,
  "functions": [],
  "classes": [
    {
      "name": "FlowGraphThrottleBlock",
      "type": "class",
      "start_line": 8,
      "end_line": 36,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 12,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": "    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.reset = this._registerSignalInput(\"reset\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.timeRemaining = this.registerDataOutput(\"timeRemaining\", RichTypeNumber);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(config?: IFlowGraphBlockConfiguration) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(config);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.reset = this._registerSignalInput(\"reset\");",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.duration = this.registerDataInput(\"duration\", RichTypeNumber);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.timeRemaining = this.registerDataOutput(\"timeRemaining\", RichTypeNumber);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_execute",
          "type": "function",
          "start_line": 18,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n        const lastExecutedTime = context._getExecutionVariable(this, \"lastExecutedTime\");\n        const durationValue = this.duration.getValue(context);\n        const currentTime = Date.now();\n        if (callingSignal === this.reset || lastExecutedTime === undefined || currentTime - lastExecutedTime > durationValue) {\n            //activate the output flow\n            this.timeRemaining.setValue(0, context);\n            this.out._activateSignal(context);\n            context._setExecutionVariable(this, \"lastExecutedTime\", currentTime);\n        } else {\n            //activate the output flow after the remaining time\n            const remaining = durationValue - (currentTime - lastExecutedTime);\n            this.timeRemaining.setValue(remaining, context);\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "const lastExecutedTime = context._getExecutionVariable(this, \"lastExecutedTime\");",
              "successors": [
                {
                  "id": 2,
                  "label": "const durationValue = this.duration.getValue(context);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "const currentTime = Date.now();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (callingSignal === this.reset || lastExecutedTime === undefined || currentTime - lastExecutedTime > durationValue) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    this.timeRemaining.setValue(0, context);\n    this.out._activateSignal(context);\n    context._setExecutionVariable(this, \"lastExecutedTime\", currentTime);",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "    const remaining = durationValue - (currentTime - lastExecutedTime);\n    this.timeRemaining.setValue(remaining, context);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getClassName",
          "type": "function",
          "start_line": 33,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override getClassName(): string {\n        return \"FGThrottleBlock\";\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override getClassName(): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return \"FGThrottleBlock\";",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\n    public readonly duration: FlowGraphDataConnection<number>;\n    public readonly reset: FlowGraphSignalConnection;\n    public readonly timeRemaining: FlowGraphDataConnection<number>;\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\n    public readonly duration: FlowGraphDataConnection<number>;\n    public readonly reset: FlowGraphSignalConnection;\n    public readonly timeRemaining: FlowGraphDataConnection<number>;\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import type { FlowGraphContext } from \"../../../flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\n}\nRegisterClass(\"FGThrottleBlock\", FlowGraphThrottleBlock);",
  "blocks": [
    {
      "id": 1,
      "label": "import type { FlowGraphContext } from \"../../../flowGraphContext\";",
      "successors": [
        {
          "id": 2,
          "label": "import type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";",
          "successors": [
            {
              "id": 3,
              "label": "import { RichTypeNumber } from \"../../../flowGraphRichTypes\";",
              "successors": [
                {
                  "id": 4,
                  "label": "import type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import { RegisterClass } from \"../../../../Misc/typeStore\";",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "RegisterClass(\"FGThrottleBlock\", FlowGraphThrottleBlock);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}