{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 36,
  "functions": [
    {
      "name": "getTwoFactorAuthRequired",
      "type": "function",
      "start_line": 4,
      "end_line": 36,
      "functions": [
        {
          "name": "success",
          "type": "function",
          "start_line": 11,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "function success(result) {\n  opts.log.silly(\"2FA\", result.tfa);",
              "successors": [
                {
                  "id": 2,
                  "label": "  if (result.tfa.pending) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return false;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "  return result.tfa.mode === \"auth-and-writes\";",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "failure",
          "type": "function",
          "start_line": 19,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "function failure(err) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    if (err.code === \"E500\" || err.code === \"E404\") {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        opts.log.warn(\n            \"EREGISTRY\",\n            `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n        );",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        return false;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "    }",
                      "successors": [
                        {
                          "id": 6,
                          "label": "    opts.log.pause();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "    console.error(err.message);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "    opts.log.resume();",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {",
          "successors": [
            {
              "id": 2,
              "label": "  const opts = getFetchConfig(options, { fetchRetries: 0, });",
              "successors": [
                {
                  "id": 3,
                  "label": "  opts.log.info(\"\", \"Checking two-factor auth mode\");",
                  "successors": [
                    {
                      "id": 4,
                      "label": "  return getProfileData(opts).then(success, failure);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import { ValidationError } from \"@lerna/core\";\nimport { FetchConfig, getFetchConfig } from \"./fetch-config\";\nimport { getProfileData } from \"./get-profile-data\";\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { ValidationError } from \"@lerna/core\";",
      "successors": [
        {
          "id": 2,
          "label": "import { FetchConfig, getFetchConfig } from \"./fetch-config\";",
          "successors": [
            {
              "id": 3,
              "label": "import { getProfileData } from \"./get-profile-data\";",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}