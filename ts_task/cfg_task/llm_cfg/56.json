{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 247,
  "functions": [],
  "classes": [
    {
      "name": "DateUtil",
      "type": "class",
      "start_line": 22,
      "end_line": 247,
      "functions": [
        {
          "name": "initLanguageLocalesMap",
          "type": "function",
          "start_line": 34,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private static initLanguageLocalesMap(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (DateUtil.LANGUAGE_LOCALES_MAP == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\nDateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\nDateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getLocalizedDate",
          "type": "function",
          "start_line": 43,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getLocalizedDate(milliseconds: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let locales: string = this.getLocales();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "format",
          "type": "function",
          "start_line": 49,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static format(time: Date, format_s?: string): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!Boolean<string>(format_s).valueOf()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return time.valueOf().toString();",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let opts: Map<string, number> = new Map<string, number>();\nopts.set('MM', time.getMonth() + 1);\nopts.set('dd', time.getDate());\nopts.set('HH', time.getHours());\nopts.set('mm', time.getMinutes());\nopts.set('ss', time.getSeconds());",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let check: RegExp = new RegExp('/(y+)/');",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "if (check.test(format_s)) {",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));",
                                      "successors": []
                                    },
                                    {
                                      "id": 9,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "opts.forEach((value: number, key: string): void => {",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "if (new RegExp('(' + key + ')').test(format_s)) {",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "format_s = format_s.replace(key,\n (key.length === 1)\n ? value.toString()\n : (('00' + value).substr(value.toString().length))\n);",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 13,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 14,
                                              "label": "});",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 15,
                                          "label": "return format_s;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getDateTimeFormat",
          "type": "function",
          "start_line": 76,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getDateTimeFormat(milliseconds: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getGroupDataLocalizedDate",
          "type": "function",
          "start_line": 81,
          "end_line": 93,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getGroupDataLocalizedDate(milliseconds: number): Resource {",
              "successors": [
                {
                  "id": 2,
                  "label": "let date = new Date(milliseconds);\n    let today = new Date();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (date.getDate() === today.getDate()) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return $r('app.string.date_today');",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "if (today.getDate() - date.getDate() === 1) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "return $r('app.string.date_yesterday');",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getLocalizedYear",
          "type": "function",
          "start_line": 95,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getLocalizedYear(milliseconds: number): Resource {",
              "successors": [
                {
                  "id": 2,
                  "label": "let locales: string = this.getLocales();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return $r('app.string.common_place_holder', yearText.toString());",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getLocalizedYearAndMonth",
          "type": "function",
          "start_line": 102,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getLocalizedYearAndMonth(milliseconds: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "let locales: string = this.getLocales();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getLocalizedYearString",
          "type": "function",
          "start_line": 108,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getLocalizedYearString(milliseconds: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let locales: string = this.getLocales();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getLocalizedTime",
          "type": "function",
          "start_line": 114,
          "end_line": 120,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getLocalizedTime(milliseconds: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "let locales: string = this.getLocales();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let is24HourClock = i18n.is24HourClock();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "Log.info(TAG, 'get is24HourClock ' + is24HourClock);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getLocales",
          "type": "function",
          "start_line": 122,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": "  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "DateUtil.initLanguageLocalesMap();",
              "successors": [
                {
                  "id": 2,
                  "label": "let systemLocale: string = i18n.getSystemLanguage().toString();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let language = systemLocale.split('-')[0];",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (this.LANGUAGE_LOCALES_MAP.has(language))",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "locales = this.LANGUAGE_LOCALES_MAP.get(language);",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return locales;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "return locales;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getFormattedDuration",
          "type": "function",
          "start_line": 134,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static getFormattedDuration(milliSecond: number): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (milliSecond == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, 'getFormattedDuration, input is null!');\nreturn '00:00';",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "if (milliSecond <= 0) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Log.warn(TAG, 'getFormattedDuration, input is negative number!');\nreturn '00:00';",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "if (milliSecond < this.MILLISECONDS_PER_SECOND) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "return '00:01';",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\nlet hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\nlet minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\nlet secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "if (hourTime > 0) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "label": "return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "checkTime",
          "type": "function",
          "start_line": 157,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": "  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (time < 0) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.warn(TAG, 'checkTime, input is negative number!');\n    return '00';",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let formatTime: string = time.toString();",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (time < DateUtil.FORMAT_DECIMAL) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    let zeroString = '0';\n    formatTime = zeroString.concat(formatTime);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "return formatTime;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "return formatTime;",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "isTheSameDay",
          "type": "function",
          "start_line": 170,
          "end_line": 177,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "if (startTime == null || endTime == null) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return false;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isTheSameYear",
          "type": "function",
          "start_line": 179,
          "end_line": 186,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static isTheSameYear(startTime: number, endTime: number): boolean {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (startTime == null || endTime == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return false;",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "const startYear = new Date(startTime).getFullYear();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const endYear = new Date(endTime).getFullYear();",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return startYear === endYear ? true : false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "buildDateTimeOpt",
          "type": "function",
          "start_line": 188,
          "end_line": 211,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {",
              "successors": [
                {
                  "id": 2,
                  "label": "let obj: Object = {\n  locale: '',\n  dateStyle: '',\n  timeStyle: '',\n  hourCycle: '',\n  timeZone: '',\n  numberingSystem: '',\n  hour12: false,\n  weekday: '',\n  era: '',\n  year: year,\n  month: month,\n  day: day,\n  hour: hour,\n  minute: minute,\n  second: '',\n  timeZoneName: '',\n  dayPeriod: '',\n  localeMatcher: '',\n  formatMatcher: '',\n};",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return obj;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "formats",
          "type": "function",
          "start_line": 213,
          "end_line": 238,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "let time = new Date();",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!Boolean<string>(format).valueOf()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return time.valueOf().toString();",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let opts: Map<string, number> = new Map<string, number>();\nopts.set('MM', time.getMonth() + 1);\nopts.set('dd', time.getDate());\nopts.set('HH', time.getHours());\nopts.set('mm', time.getMinutes());\nopts.set('ss', time.getSeconds());",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (new RegExp('/(y+)/').test(format)) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "format = format.replace('yyyy', time.getFullYear().toString().substr(0));",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "opts.forEach((value: number, key: string): void => {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "if (new RegExp('(' + key + ')').test(format)) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "format = format.replace(key,\n  (key.length === 1)\n  ? value.toString()\n  : (('00' + value).substr(value.toString().length))\n);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "return format;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "nameByDate",
          "type": "function",
          "start_line": 240,
          "end_line": 246,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static nameByDate(isReplace: Boolean, name?: string): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (isReplace != null && isReplace === true) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "} else {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  }\n\n  // Get the date after localization (year-month-day)\n  }\n\n  }\n\n  }\n\n  // Gets the localization date of the photo page grouping data\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  // Format duration\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport i18n from '@ohos.i18n';\nimport Intl from '@ohos.intl';\n\nconst TAG = 'DateUtil';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from './Log';\nimport i18n from '@ohos.i18n';\nimport Intl from '@ohos.intl';",
      "successors": [
        {
          "id": 2,
          "label": "const TAG = 'DateUtil';",
          "successors": []
        }
      ]
    }
  ]
}