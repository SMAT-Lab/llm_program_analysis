{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 35,
  "functions": [],
  "classes": [
    {
      "name": "UiUtil",
      "type": "class",
      "start_line": 22,
      "end_line": 35,
      "functions": [
        {
          "name": "getAlbumGridCount",
          "type": "function",
          "start_line": 23,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static getAlbumGridCount(horizontal: boolean): number {\n    Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\n    Log.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\n    let sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\n    let contentWidth = screenManager.getWinWidth() - sideBarWidth;\n\n    let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\n    let gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n    / (maxCardWidth + Constants.ALBUM_SET_GUTTER));\n    Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\n    return gridColumnsCount;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'get screen width is : ' + screenManager.getWinWidth());\nLog.info(TAG, 'get screen height is : ' + screenManager.getWinHeight());\nlet sideBarWidth = horizontal ? Constants.TAB_BAR_WIDTH : 0;\nlet contentWidth = screenManager.getWinWidth() - sideBarWidth;",
              "successors": [
                {
                  "id": 2,
                  "label": "let maxCardWidth = Constants.ALBUM_SET_COVER_SIZE * Constants.GRID_MAX_SIZE_RATIO;\nlet gridColumnsCount = Math.ceil((contentWidth - Constants.ALBUM_SET_MARGIN * 2 + Constants.ALBUM_SET_GUTTER)\n/ (maxCardWidth + Constants.ALBUM_SET_GUTTER));",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.info(TAG, 'the grid count in a line is : ' + gridColumnsCount);\nreturn gridColumnsCount;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "export class UiUtil {\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class UiUtil {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from './Log';\nimport { screenManager } from '../common/ScreenManager'\nimport { Constants } from '../constants/Constants'\n\nconst TAG = 'UiUtil';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from './Log';",
      "successors": [
        {
          "id": 2,
          "label": "import { screenManager } from '../common/ScreenManager'",
          "successors": [
            {
              "id": 3,
              "label": "import { Constants } from '../constants/Constants'",
              "successors": [
                {
                  "id": 4,
                  "label": "const TAG = 'UiUtil';",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}