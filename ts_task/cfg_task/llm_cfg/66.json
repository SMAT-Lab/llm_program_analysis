{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 65,
  "functions": [],
  "classes": [
    {
      "name": "TrashUserFileDataItem",
      "type": "class",
      "start_line": 25,
      "end_line": 65,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 26,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(selections: string, selectionArgs: string[], index: number) {\n    super(selections, selectionArgs, '', index);\n    this.setSelect(false);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(selections: string, selectionArgs: string[], index: number) {",
              "successors": [
                {
                  "id": 2,
                  "label": "  super(selections, selectionArgs, '', index);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "  this.setSelect(false);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "loadFileAsset",
          "type": "function",
          "start_line": 31,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "  async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {\n    Log.debug(TAG, 'loadFileAsset' + this.uri);\n    return await userFileModel.getMediaItemByUriFromTrash(this.uri);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async loadFileAsset(): Promise<photoAccessHelper.PhotoAsset> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Log.debug(TAG, 'loadFileAsset' + this.uri);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return await userFileModel.getMediaItemByUriFromTrash(this.uri);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onRecover",
          "type": "function",
          "start_line": 36,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "  async onRecover(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      if (fileAsset == null) {\n        Log.error(TAG, 'onRecover error: cant find file');\n        return false;\n      }\n      await userFileModel.recover(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async onRecover(): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let fileAsset = await this.loadFileAsset();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (fileAsset == null) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "Log.error(TAG, 'onRecover error: cant find file');",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "return false;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "await userFileModel.recover(fileAsset);",
                          "successors": [
                            {
                              "id": 8,
                              "label": "selectManager.deleteSelect(this.uri);",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "this.status = MediaConstants.TRASHED;",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "return true;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "catch (err) {",
                  "successors": [
                    {
                      "id": 12,
                      "label": "Log.error(TAG, 'onRecover error: ' + JSON.stringify(err));",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "label": "return false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "onDelete",
          "type": "function",
          "start_line": 53,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "  async onDelete(): Promise<boolean> {\n    try {\n      let fileAsset = await this.loadFileAsset();\n      await userFileModel.permanentDelete(fileAsset);\n      selectManager.deleteSelect(this.uri);\n      this.status = MediaConstants.TRASHED;\n      return true;\n    } catch (err) {\n      Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));\n      return false;\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "async onDelete(): Promise<boolean> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let fileAsset = await this.loadFileAsset();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "await userFileModel.permanentDelete(fileAsset);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "selectManager.deleteSelect(this.uri);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.status = MediaConstants.TRASHED;",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "return true;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "} catch (err) {",
                  "successors": [
                    {
                      "id": 9,
                      "label": "Log.error(TAG, 'onDelete error: ' + JSON.stringify(err));",
                      "successors": [
                        {
                          "id": 10,
                          "label": "return false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class TrashUserFileDataItem extends UserFileDataItem {\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class TrashUserFileDataItem extends UserFileDataItem {",
          "successors": []
        },
        {
          "id": 2,
          "label": "  }",
          "successors": []
        },
        {
          "id": 3,
          "label": "  }",
          "successors": []
        },
        {
          "id": 4,
          "label": "  }",
          "successors": []
        },
        {
          "id": 5,
          "label": "  }",
          "successors": []
        },
        {
          "id": 6,
          "label": "}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport { selectManager } from '../common/SelectManager';\nimport { userFileModel } from './UserFileModel';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { UserFileDataItem } from './UserFileDataItem';\n\nconst TAG = 'TrashUserFileDataItem';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
      "successors": [
        {
          "id": 2,
          "label": "import { selectManager } from '../common/SelectManager';",
          "successors": [
            {
              "id": 3,
              "label": "import { userFileModel } from './UserFileModel';",
              "successors": [
                {
                  "id": 4,
                  "label": "import { Log } from '../utils/Log';",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import { MediaConstants } from '../constants/MediaConstants';",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import { UserFileDataItem } from './UserFileDataItem';",
                          "successors": [
                            {
                              "id": 7,
                              "label": "const TAG = 'TrashUserFileDataItem';",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}