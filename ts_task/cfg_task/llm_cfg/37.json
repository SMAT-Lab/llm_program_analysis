{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 102,
  "functions": [],
  "classes": [
    {
      "name": "LazyItem",
      "type": "class",
      "start_line": 20,
      "end_line": 49,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 25,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(item: T, index: number, onItemUpdate?: Function) {\n    this.item = item;\n    this.onItemUpdate = onItemUpdate;\n    this.index = index;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 31,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "  update(item: T): void {\n    if (this.onItemUpdate != null && this.index !== -1) {\n      this.onItemUpdate(this.index, item);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "update(item: T): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.onItemUpdate != null && this.index !== -1) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.onItemUpdate(this.index, item);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getHashCode",
          "type": "function",
          "start_line": 37,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "  getHashCode(): string {\n    // @ts-ignore\n    return this.index + '' + this.item.getHashCode();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "getHashCode(): string {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.index + '' + this.item.getHashCode();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "  get(): T {\n    return this.item;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "get(): T {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.item;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "  set(item: T): void {\n    this.item = item;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "set(item: T): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.item = item;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class LazyItem<T> {\n  item: T;\n  onItemUpdate: Function;\n  index: number = -1;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class LazyItem<T> {\n  item: T;\n  onItemUpdate: Function;\n  index: number = -1;",
          "successors": []
        }
      ]
    },
    {
      "name": "ItemDataSource",
      "type": "class",
      "start_line": 51,
      "end_line": 102,
      "functions": [
        {
          "name": "registerDataChangeListener",
          "type": "function",
          "start_line": 68,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "  registerDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'registerDataChangeListener');\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener);\n      Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'registerDataChangeListener');",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.listeners.indexOf(listener) < 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.listeners.push(listener);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    Log.info(TAG, 'registerDataChangeListener, add listener, length: ' + this.listeners.length);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "unregisterDataChangeListener",
          "type": "function",
          "start_line": 76,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "  unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1);\n      Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "unregisterDataChangeListener(listener: DataChangeListener): void {\n    Log.info(TAG, 'unregisterDataChangeListener');\n    const pos = this.listeners.indexOf(listener);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (pos >= 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.listeners.splice(pos, 1);\n    Log.info(TAG, 'registerDataChangeListener, remove listener, length: ' + this.listeners.length);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "notifyDataChange",
          "type": "function",
          "start_line": 85,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "  notifyDataChange(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataChange(index);\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "notifyDataChange(index: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.listeners.forEach((listener: DataChangeListener): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "listener.onDataChange(index);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "notifyDataReload",
          "type": "function",
          "start_line": 91,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "  notifyDataReload(): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataReloaded();\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "notifyDataReload(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.listeners.forEach((listener: DataChangeListener): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "listener.onDataReloaded();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "notifyDataDelete",
          "type": "function",
          "start_line": 97,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": "  notifyDataDelete(index: number): void {\n    this.listeners.forEach((listener: DataChangeListener): void => {\n      listener.onDataDelete(index);\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "notifyDataDelete(index: number): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.listeners.forEach((listener: DataChangeListener): void => {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "listener.onDataDelete(index);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export abstract class ItemDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n\n  abstract totalCount(): number;\n\n  abstract getData(index: number): Object;\n\n  abstract isSelect(): boolean;\n\n  abstract getSelectedCount(): number;\n\n  abstract getSelectedItems(): Object[];\n\n  abstract getSelectedUris(): string[];\n\n  abstract dataRemove(): void;\n\n  }\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export abstract class ItemDataSource implements IDataSource {",
          "successors": [
            {
              "id": 2,
              "label": "private listeners: DataChangeListener[] = [];",
              "successors": [
                {
                  "id": 3,
                  "label": "abstract totalCount(): number;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "abstract getData(index: number): Object;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "abstract isSelect(): boolean;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "abstract getSelectedCount(): number;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "abstract getSelectedItems(): Object[];",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "abstract getSelectedUris(): string[];",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "abstract dataRemove(): void;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Log } from '../utils/Log';\n\nconst TAG = 'ItemDataSource'\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { Log } from '../utils/Log';",
      "successors": [
        {
          "id": 2,
          "label": "const TAG = 'ItemDataSource'",
          "successors": []
        }
      ]
    }
  ]
}