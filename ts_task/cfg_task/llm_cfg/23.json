{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 72,
  "functions": [],
  "classes": [
    {
      "name": "BatchRecoverMenuOperation",
      "type": "class",
      "start_line": 25,
      "end_line": 72,
      "functions": [
        {
          "name": "constructor",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "  constructor(menuContext: MenuContext) {\n    super(menuContext);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "constructor(menuContext: MenuContext) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(menuContext);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "doAction",
          "type": "function",
          "start_line": 30,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "  doAction(): void {\n    Log.info(TAG, 'delete doAction');\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n\n    let dataSource: ItemDataSource = this.menuContext.dataSource;\n    if (dataSource == null) {\n      this.count = this.menuContext.items.length;\n    } else {\n      this.count = dataSource.getSelectedCount();\n    }\n    if (this.count <= 0) {\n      Log.warn(TAG, 'count <= 0, return');\n      return;\n    }\n\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n      [$r('app.string.action_recover'), this.count]);\n\n    if (dataSource == null) {\n      this.items = this.menuContext.items;\n    } else {\n      this.items = dataSource.getSelectedItems();\n    }\n    this.processOperation();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "Log.info(TAG, 'delete doAction');",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.menuContext == null) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Log.warn(TAG, 'menuContext is null, return');\nreturn;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let dataSource: ItemDataSource = this.menuContext.dataSource;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (dataSource == null) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "this.count = this.menuContext.items.length;",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if (this.count <= 0) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "label": "this.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart = this.menuContext.onOperationStart;\nif (onOperationStart != null) onOperationStart();",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n  [$r('app.string.action_recover'), this.count]);",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "if (dataSource == null) {",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "this.items = this.menuContext.items;",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "this.processOperation();",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "this.items = dataSource.getSelectedItems();",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "this.processOperation();",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "this.count = dataSource.getSelectedCount();",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if (this.count <= 0) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "Log.warn(TAG, 'count <= 0, return');\nreturn;",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "label": "this.onOperationEnd = this.menuContext.onOperationEnd;\nlet onOperationStart = this.menuContext.onOperationStart;\nif (onOperationStart != null) onOperationStart();",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "this.menuContext.broadCast.emit(BroadcastConstants.DELETE_PROGRESS_DIALOG,\n  [$r('app.string.action_recover'), this.count]);",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "if (dataSource == null) {",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "this.items = this.menuContext.items;",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "this.processOperation();",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "this.items = dataSource.getSelectedItems();",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "this.processOperation();",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "requestOneBatchOperation",
          "type": "function",
          "start_line": 64,
          "end_line": 71,
          "functions": [
            {
              "name": "anonymous_function",
              "type": "function",
              "start_line": 66,
              "end_line": 69,
              "functions": [],
              "classes": [],
              "simplified_code": "    item.onRecover().then<void, void>((): void => {\n      this.currentBatch++;\n      this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);\n      this.cyclicOperation();",
              "blocks": [
                {
                  "id": 1,
                  "label": "item.onRecover().then<void, void>((): void => {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "    this.currentBatch++;",
                      "successors": [
                        {
                          "id": 3,
                          "label": "    this.menuContext.broadCast.emit(BroadcastConstants.UPDATE_PROGRESS, [this.getExpectProgress(), this.currentBatch]);",
                          "successors": [
                            {
                              "id": 4,
                              "label": "    this.cyclicOperation();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "  requestOneBatchOperation(): void {\n    let item = this.items[this.currentBatch] as TrashUserFileDataItem;\n      this.cyclicOperation();\n    })\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "requestOneBatchOperation(): void {",
              "successors": [
                {
                  "id": 2,
                  "label": "let item = this.items[this.currentBatch] as TrashUserFileDataItem;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.cyclicOperation();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "export class BatchRecoverMenuOperation extends ProcessMenuOperation {\n  }\n\n  }\n\n  // Delete a batch of data\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "export class BatchRecoverMenuOperation extends ProcessMenuOperation {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/*\n * Copyright (c) 2023 Shenzhen Kaihong Digital Industry Development Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext'\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\n\nconst TAG = 'BatchRecoverMenuOperation';\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import { TrashUserFileDataItem } from '../base/TrashUserFileDataItem';\nimport { Log } from '../utils/Log';\nimport { ItemDataSource } from '../common/ItemDataSource';\nimport { MenuContext } from './MenuContext'\nimport { ProcessMenuOperation } from './ProcessMenuOperation';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\n\nconst TAG = 'BatchRecoverMenuOperation';",
      "successors": []
    }
  ]
}