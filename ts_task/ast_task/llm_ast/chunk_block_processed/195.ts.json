{
    "type": "module",
    "start_token": 0,
    "end_token": 258,
    "label": "import { BadRequestException, NotFoundException, Scope } from '@nestjs/common';\nimport { WorkspaceQueryHookInstance } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/interfaces/workspace-query-hook.interface';\nimport { FindManyResolverArgs } from 'src/engine/api/graphql/workspace-resolver-builder/interfaces/workspace-resolvers-builder.interface';\nimport { WorkspaceQueryHook } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';\nimport { TwentyORMManager } from 'src/engine/twenty-orm/twenty-orm.manager';\nimport { CanAccessCalendarEventService } from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service';\nimport { CalendarChannelEventAssociationWorkspaceEntity } from 'src/modules/calendar/common/standard-objects/calendar-channel-event-association.workspace-entity';\nimport { AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key: `calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      })",
    "children": [
        {
            "type": "ImportDeclaration",
            "start_token": 0,
            "end_token": 10,
            "label": "import { BadRequestException, NotFoundException, Scope } from '@nestjs/common';",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 1,
                    "end_token": 7,
                    "label": "{ BadRequestException, NotFoundException, Scope }",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 2,
                            "end_token": 2,
                            "label": "BadRequestException",
                            "children": []
                        },
                        {
                            "type": "ImportSpecifier",
                            "start_token": 4,
                            "end_token": 4,
                            "label": "NotFoundException",
                            "children": []
                        },
                        {
                            "type": "ImportSpecifier",
                            "start_token": 6,
                            "end_token": 6,
                            "label": "Scope",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "'@nestjs/common'",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 11,
            "end_token": 17,
            "label": "\nimport { WorkspaceQueryHookInstance } from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/interfaces/workspace-query-hook.interface'",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 12,
                    "end_token": 14,
                    "label": "import { WorkspaceQueryHookInstance",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 13,
                            "end_token": 13,
                            "label": "{",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 16,
                    "end_token": 16,
                    "label": "from",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 18,
            "end_token": 24,
            "label": ";\nimport { FindManyResolverArgs } from",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 19,
                    "end_token": 21,
                    "label": "\nimport {",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 20,
                            "end_token": 20,
                            "label": "import",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 23,
                    "end_token": 23,
                    "label": "}",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 25,
            "end_token": 31,
            "label": "'src/engine/api/graphql/workspace-resolver-builder/interfaces/workspace-resolvers-builder.interface';\nimport { WorkspaceQueryHook }",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 26,
                    "end_token": 28,
                    "label": ";\nimport",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 27,
                            "end_token": 27,
                            "label": "\n",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 30,
                    "end_token": 30,
                    "label": "WorkspaceQueryHook",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 32,
            "end_token": 38,
            "label": "from 'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';\nimport { TwentyORMManager",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 33,
                    "end_token": 35,
                    "label": "'src/engine/api/graphql/workspace-query-runner/workspace-query-hook/decorators/workspace-query-hook.decorator';\n",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 34,
                            "end_token": 34,
                            "label": ";",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 37,
                    "end_token": 37,
                    "label": "{",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 39,
            "end_token": 45,
            "label": "} from 'src/engine/twenty-orm/twenty-orm.manager';\nimport {",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 40,
                    "end_token": 42,
                    "label": "from 'src/engine/twenty-orm/twenty-orm.manager';",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 41,
                            "end_token": 41,
                            "label": "'src/engine/twenty-orm/twenty-orm.manager'",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 44,
                    "end_token": 44,
                    "label": "import",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 46,
            "end_token": 52,
            "label": "CanAccessCalendarEventService } from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service';\nimport",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 47,
                    "end_token": 49,
                    "label": "} from 'src/modules/calendar/common/query-hooks/calendar-event/services/can-access-calendar-event.service'",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 48,
                            "end_token": 48,
                            "label": "from",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 51,
                    "end_token": 51,
                    "label": "\n",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 53,
            "end_token": 59,
            "label": "{ CalendarChannelEventAssociationWorkspaceEntity } from 'src/modules/calendar/common/standard-objects/calendar-channel-event-association.workspace-entity';\n",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 54,
                    "end_token": 56,
                    "label": "CalendarChannelEventAssociationWorkspaceEntity } from",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 55,
                            "end_token": 55,
                            "label": "}",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 58,
                    "end_token": 58,
                    "label": ";",
                    "children": []
                }
            ]
        },
        {
            "type": "CallExpression",
            "start_token": 60,
            "end_token": 74,
            "label": "import { AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key:",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 60,
                    "end_token": 60,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "ParenthesizedExpression",
                    "start_token": 61,
                    "end_token": 73,
                    "label": "{ AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key",
                    "children": [
                        {
                            "type": "ObjectLiteralExpression",
                            "start_token": 62,
                            "end_token": 73,
                            "label": "AuthContext } from 'src/engine/core-modules/auth/types/auth-context.type';\n@WorkspaceQueryHook({\n  key",
                            "children": [
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 63,
                                    "end_token": 65,
                                    "label": "} from 'src/engine/core-modules/auth/types/auth-context.type'",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 63,
                                            "end_token": 63,
                                            "label": "}",
                                            "children": []
                                        },
                                        {
                                            "type": "TemplateExpression",
                                            "start_token": 65,
                                            "end_token": 65,
                                            "label": "'src/engine/core-modules/auth/types/auth-context.type'",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 67,
                                    "end_token": 71,
                                    "label": "\n@WorkspaceQueryHook({",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 67,
                                            "end_token": 67,
                                            "label": "\n",
                                            "children": []
                                        },
                                        {
                                            "type": "PropertyAccessExpression",
                                            "start_token": 69,
                                            "end_token": 71,
                                            "label": "WorkspaceQueryHook({",
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 69,
                                                    "end_token": 69,
                                                    "label": "WorkspaceQueryHook",
                                                    "children": []
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 71,
                                                    "end_token": 71,
                                                    "label": "{",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "CalendarEventFindManyPreQueryHook",
            "start_line": 13,
            "end_line": 52,
            "start_token": 75,
            "end_token": 258,
            "label": "`calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      })",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 75,
                    "end_token": 258,
                    "label": "`calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      })",
                    "children": [
                        {
                            "type": "ExportKeyword",
                            "start_token": 75,
                            "end_token": 75,
                            "label": "`",
                            "children": []
                        },
                        {
                            "type": "ClassDeclaration",
                            "start_token": 76,
                            "end_token": 258,
                            "label": "calendarEvent.findMany`,\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      })",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 77,
                                    "end_token": 77,
                                    "label": ".",
                                    "children": []
                                },
                                {
                                    "type": "ImplementsHeritageClause",
                                    "start_token": 78,
                                    "end_token": 79,
                                    "label": "findMany`",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 79,
                                            "end_token": 79,
                                            "label": "`",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "Block",
                                    "start_token": 80,
                                    "end_token": 258,
                                    "label": ",\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      })",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "constructor",
                            "start_line": 16,
                            "end_line": 19,
                            "start_token": 81,
                            "end_token": 97,
                            "label": "\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance",
                            "children": [
                                {
                                    "type": "Constructor",
                                    "start_token": 81,
                                    "end_token": 97,
                                    "label": "\n  scope: Scope.REQUEST,\n})\nexport class CalendarEventFindManyPreQueryHook\n  implements WorkspaceQueryHookInstance",
                                    "children": [
                                        {
                                            "type": "Parameter",
                                            "start_token": 83,
                                            "end_token": 88,
                                            "label": ": Scope.REQUEST,\n",
                                            "children": [
                                                {
                                                    "type": "PrivateKeyword",
                                                    "start_token": 83,
                                                    "end_token": 83,
                                                    "label": ":",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ReadonlyKeyword",
                                                    "start_token": 84,
                                                    "end_token": 84,
                                                    "label": "Scope",
                                                    "children": []
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 85,
                                                    "end_token": 85,
                                                    "label": ".",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ColonToken",
                                                    "start_token": 86,
                                                    "end_token": 86,
                                                    "label": "REQUEST",
                                                    "children": []
                                                },
                                                {
                                                    "type": "TypeReference",
                                                    "start_token": 87,
                                                    "end_token": 87,
                                                    "label": ",",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "Parameter",
                                            "start_token": 89,
                                            "end_token": 94,
                                            "label": "})\nexport class CalendarEventFindManyPreQueryHook",
                                            "children": [
                                                {
                                                    "type": "PrivateKeyword",
                                                    "start_token": 89,
                                                    "end_token": 89,
                                                    "label": "}",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ReadonlyKeyword",
                                                    "start_token": 90,
                                                    "end_token": 90,
                                                    "label": ")",
                                                    "children": []
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 91,
                                                    "end_token": 91,
                                                    "label": "\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ColonToken",
                                                    "start_token": 92,
                                                    "end_token": 92,
                                                    "label": "export",
                                                    "children": []
                                                },
                                                {
                                                    "type": "TypeReference",
                                                    "start_token": 93,
                                                    "end_token": 93,
                                                    "label": "class",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "Block",
                                            "start_token": 96,
                                            "end_token": 97,
                                            "label": "implements WorkspaceQueryHookInstance",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "execute",
                            "start_line": 20,
                            "end_line": 51,
                            "start_token": 98,
                            "end_token": 257,
                            "label": "\n{\n  constructor(\n    private readonly twentyORMManager: TwentyORMManager,\n    private readonly canAccessCalendarEventService: CanAccessCalendarEventService,\n  ) {}\n  async execute(\n    authContext: AuthContext,\n    objectName: string,\n    payload: FindManyResolverArgs,\n  ): Promise<FindManyResolverArgs> {\n    if (!payload?.filter?.id?.eq) {\n      throw new BadRequestException('id filter is required');\n    }\n    if (!authContext.user?.id) {\n      throw new BadRequestException('User id is required');\n    }\n    const calendarChannelEventAssociationRepository =\n      await this.twentyORMManager.getRepository<CalendarChannelEventAssociationWorkspaceEntity>(\n        'calendarChannelEventAssociation',\n      );\n    const calendarChannelCalendarEventAssociations =\n      await calendarChannelEventAssociationRepository.find({\n        where: {\n          calendarEventId: payload?.filter?.id?.eq,\n        },\n        relations: ['calendarChannel.connectedAccount'],\n      }",
                            "children": [
                                {
                                    "type": "ErrorNode",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}