{
    "type": "module",
    "start_token": 0,
    "end_token": 316,
    "label": "import { Test } from '@nestjs/testing';\nimport { expect } from 'chai';\nimport { Controller, Injectable, Module } from '@nestjs/common';\nclass B {}\n@Injectable()\nclass A {\n  constructor(b: B) {}\n}\n@Injectable()\nclass BImpl {\n  constructor(a: A) {}\n}\n@Controller()\nclass AppController {\n  constructor(a: A) {}\n}\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
    "children": [
        {
            "type": "ImportDeclaration",
            "start_token": 0,
            "end_token": 6,
            "label": "import { Test } from '@nestjs/testing';",
            "children": [
                {
                    "type": "ImportSpecifier",
                    "start_token": 1,
                    "end_token": 3,
                    "label": "{ Test }",
                    "children": [
                        {
                            "type": "Identifier",
                            "start_token": 2,
                            "end_token": 2,
                            "label": "Test",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "'@nestjs/testing'",
                    "children": []
                },
                {
                    "type": "SemicolonClassElement",
                    "start_token": 6,
                    "end_token": 6,
                    "label": ";",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 7,
            "end_token": 13,
            "label": "\nimport { expect } from 'chai'",
            "children": [
                {
                    "type": "ImportSpecifier",
                    "start_token": 8,
                    "end_token": 10,
                    "label": "import { expect",
                    "children": [
                        {
                            "type": "Identifier",
                            "start_token": 9,
                            "end_token": 9,
                            "label": "{",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 12,
                    "end_token": 12,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "SemicolonClassElement",
                    "start_token": 13,
                    "end_token": 13,
                    "label": "'chai'",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 14,
            "end_token": 24,
            "label": ";\nimport { Controller, Injectable, Module } from",
            "children": [
                {
                    "type": "ImportSpecifier",
                    "start_token": 15,
                    "end_token": 21,
                    "label": "\nimport { Controller, Injectable,",
                    "children": [
                        {
                            "type": "Identifier",
                            "start_token": 16,
                            "end_token": 16,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "Identifier",
                            "start_token": 18,
                            "end_token": 18,
                            "label": "Controller",
                            "children": []
                        },
                        {
                            "type": "Identifier",
                            "start_token": 20,
                            "end_token": 20,
                            "label": "Injectable",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 23,
                    "end_token": 23,
                    "label": "}",
                    "children": []
                },
                {
                    "type": "SemicolonClassElement",
                    "start_token": 24,
                    "end_token": 24,
                    "label": "from",
                    "children": []
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "B",
            "start_line": 4,
            "end_line": 4,
            "start_token": 25,
            "end_token": 28,
            "label": "'@nestjs/common';\nclass",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 25,
                    "end_token": 28,
                    "label": "'@nestjs/common';\nclass",
                    "children": [
                        {
                            "type": "ClassDeclaration",
                            "start_token": 25,
                            "end_token": 28,
                            "label": "'@nestjs/common';\nclass",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 25,
                                    "end_token": 25,
                                    "label": "'@nestjs/common'",
                                    "children": []
                                },
                                {
                                    "type": "Identifier",
                                    "start_token": 26,
                                    "end_token": 26,
                                    "label": ";",
                                    "children": []
                                },
                                {
                                    "type": "Block",
                                    "start_token": 27,
                                    "end_token": 28,
                                    "label": "\nclass",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "Decorator",
            "start_token": 29,
            "end_token": 31,
            "label": "B {}",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 29,
                    "end_token": 29,
                    "label": "B",
                    "children": []
                },
                {
                    "type": "ParenthesizedExpression",
                    "start_token": 30,
                    "end_token": 31,
                    "label": "{}",
                    "children": []
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "A",
            "start_line": 6,
            "end_line": 8,
            "start_token": 32,
            "end_token": 43,
            "label": "\n@Injectable()\nclass A {\n  constructor(",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 32,
                    "end_token": 43,
                    "label": "\n@Injectable()\nclass A {\n  constructor(",
                    "children": [
                        {
                            "type": "ClassDeclaration",
                            "start_token": 32,
                            "end_token": 43,
                            "label": "\n@Injectable()\nclass A {\n  constructor(",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 33,
                                    "end_token": 33,
                                    "label": "@",
                                    "children": []
                                },
                                {
                                    "type": "Block",
                                    "start_token": 34,
                                    "end_token": 43,
                                    "label": "Injectable()\nclass A {\n  constructor(",
                                    "children": [
                                        {
                                            "type": "Constructor",
                                            "start_token": 35,
                                            "end_token": 42,
                                            "label": "()\nclass A {\n  constructor",
                                            "children": [
                                                {
                                                    "type": "Parameter",
                                                    "start_token": 37,
                                                    "end_token": 39,
                                                    "label": "\nclass A",
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "start_token": 37,
                                                            "end_token": 37,
                                                            "label": "\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "TypeReference",
                                                            "start_token": 39,
                                                            "end_token": 39,
                                                            "label": "A",
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "start_token": 39,
                                                                    "end_token": 39,
                                                                    "label": "A",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "Block",
                                                    "start_token": 41,
                                                    "end_token": 42,
                                                    "label": "\n  constructor",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "Decorator",
            "start_token": 44,
            "end_token": 46,
            "label": "b: B",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 44,
                    "end_token": 44,
                    "label": "b",
                    "children": []
                },
                {
                    "type": "ParenthesizedExpression",
                    "start_token": 45,
                    "end_token": 46,
                    "label": ": B",
                    "children": []
                }
            ]
        },
        {
            "type": "ClassDeclaration",
            "start_token": 47,
            "end_token": 58,
            "label": ") {}\n}\n@Injectable()\nclass",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 48,
                    "end_token": 48,
                    "label": "{",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 49,
                    "end_token": 58,
                    "label": "}\n}\n@Injectable()\nclass",
                    "children": [
                        {
                            "type": "Constructor",
                            "start_token": 50,
                            "end_token": 57,
                            "label": "\n}\n@Injectable()\n",
                            "children": [
                                {
                                    "type": "Parameter",
                                    "start_token": 52,
                                    "end_token": 55,
                                    "label": "\n@Injectable(",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 52,
                                            "end_token": 52,
                                            "label": "\n",
                                            "children": []
                                        },
                                        {
                                            "type": "ColonToken",
                                            "start_token": 53,
                                            "end_token": 53,
                                            "label": "@",
                                            "children": []
                                        },
                                        {
                                            "type": "TypeReference",
                                            "start_token": 54,
                                            "end_token": 54,
                                            "label": "Injectable",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 56,
                                    "end_token": 57,
                                    "label": ")\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "BImpl",
            "start_line": 10,
            "end_line": 12
        },
        {
            "type": "Decorator",
            "start_token": 59,
            "end_token": 61,
            "label": "BImpl {\n",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 59,
                    "end_token": 59,
                    "label": "BImpl",
                    "children": []
                },
                {
                    "type": "ParenthesizedExpression",
                    "start_token": 60,
                    "end_token": 61,
                    "label": "{\n",
                    "children": []
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "AppController",
            "start_line": 14,
            "end_line": 16,
            "start_token": 62,
            "end_token": 73,
            "label": "constructor(a: A) {}\n}\n@",
            "children": [
                {
                    "type": "Module",
                    "start_token": 62,
                    "end_token": 73,
                    "label": "constructor(a: A) {}\n}\n@",
                    "children": [
                        {
                            "type": "ClassDeclaration",
                            "start_token": 62,
                            "end_token": 73,
                            "label": "constructor(a: A) {}\n}\n@",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 63,
                                    "end_token": 63,
                                    "label": "(",
                                    "children": []
                                },
                                {
                                    "type": "Block",
                                    "start_token": 64,
                                    "end_token": 73,
                                    "label": "a: A) {}\n}\n@",
                                    "children": [
                                        {
                                            "type": "Constructor",
                                            "start_token": 65,
                                            "end_token": 72,
                                            "label": ": A) {}\n}\n",
                                            "children": [
                                                {
                                                    "type": "Parameter",
                                                    "start_token": 67,
                                                    "end_token": 69,
                                                    "label": ") {}",
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "start_token": 67,
                                                            "end_token": 67,
                                                            "label": ")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "ColonToken",
                                                            "start_token": 68,
                                                            "end_token": 68,
                                                            "label": "{",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "TypeReference",
                                                            "start_token": 69,
                                                            "end_token": 69,
                                                            "label": "}",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "Block",
                                                    "start_token": 71,
                                                    "end_token": 72,
                                                    "label": "}\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "Decorator",
            "start_token": 74,
            "end_token": 75,
            "label": "Controller(",
            "children": [
                {
                    "type": "Identifier",
                    "start_token": 74,
                    "end_token": 74,
                    "label": "Controller",
                    "children": []
                },
                {
                    "type": "ParenthesizedExpression",
                    "start_token": 75,
                    "end_token": 105,
                    "label": "()\nclass AppController {\n  constructor(a: A) {}\n}\n@Module({\n  imports: [],\n  controllers:",
                    "children": [
                        {
                            "type": "ObjectLiteralExpression",
                            "start_token": 76,
                            "end_token": 104,
                            "label": ")\nclass AppController {\n  constructor(a: A) {}\n}\n@Module({\n  imports: [],\n  controllers",
                            "children": [
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 77,
                                    "end_token": 81,
                                    "label": "\nclass AppController {\n",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 77,
                                            "end_token": 77,
                                            "label": "\n",
                                            "children": []
                                        },
                                        {
                                            "type": "ColonToken",
                                            "start_token": 78,
                                            "end_token": 78,
                                            "label": "class",
                                            "children": []
                                        },
                                        {
                                            "type": "ArrayLiteralExpression",
                                            "start_token": 79,
                                            "end_token": 80,
                                            "label": "AppController {",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 82,
                                    "end_token": 87,
                                    "label": "constructor(a: A)",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 82,
                                            "end_token": 82,
                                            "label": "constructor",
                                            "children": []
                                        },
                                        {
                                            "type": "ColonToken",
                                            "start_token": 83,
                                            "end_token": 83,
                                            "label": "(",
                                            "children": []
                                        },
                                        {
                                            "type": "ArrayLiteralExpression",
                                            "start_token": 84,
                                            "end_token": 86,
                                            "label": "a: A",
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 85,
                                                    "end_token": 85,
                                                    "label": ":",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 88,
                                    "end_token": 102,
                                    "label": "{}\n}\n@Module({\n  imports: [],",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 88,
                                            "end_token": 88,
                                            "label": "{",
                                            "children": []
                                        },
                                        {
                                            "type": "ColonToken",
                                            "start_token": 89,
                                            "end_token": 89,
                                            "label": "}",
                                            "children": []
                                        },
                                        {
                                            "type": "ArrayLiteralExpression",
                                            "start_token": 90,
                                            "end_token": 101,
                                            "label": "\n}\n@Module({\n  imports: []",
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "start_token": 91,
                                                    "end_token": 91,
                                                    "label": "}",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ObjectLiteralExpression",
                                                    "start_token": 93,
                                                    "end_token": 101,
                                                    "label": "@Module({\n  imports: []",
                                                    "children": [
                                                        {
                                                            "type": "PropertyAssignment",
                                                            "start_token": 94,
                                                            "end_token": 95,
                                                            "label": "Module(",
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "start_token": 94,
                                                                    "end_token": 94,
                                                                    "label": "Module",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "ColonToken",
                                                                    "start_token": 95,
                                                                    "end_token": 95,
                                                                    "label": "(",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "PropertyAssignment",
                                                            "start_token": 96,
                                                            "end_token": 97,
                                                            "label": "{\n",
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "start_token": 96,
                                                                    "end_token": 96,
                                                                    "label": "{",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "ColonToken",
                                                                    "start_token": 97,
                                                                    "end_token": 97,
                                                                    "label": "\n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "PropertyAssignment",
                                                            "start_token": 98,
                                                            "end_token": 100,
                                                            "label": "imports: [",
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "start_token": 98,
                                                                    "end_token": 98,
                                                                    "label": "imports",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "ColonToken",
                                                                    "start_token": 99,
                                                                    "end_token": 99,
                                                                    "label": ":",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "start_token": 100,
                                                                    "end_token": 100,
                                                                    "label": "[",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "AppModule",
            "start_line": 22,
            "end_line": 22,
            "start_token": 106,
            "end_token": 110,
            "label": "[AppController],\n",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 106,
                    "end_token": 110,
                    "label": "[AppController],\n",
                    "children": [
                        {
                            "type": "ExportKeyword",
                            "start_token": 106,
                            "end_token": 106,
                            "label": "[",
                            "children": []
                        },
                        {
                            "type": "ClassDeclaration",
                            "start_token": 107,
                            "end_token": 110,
                            "label": "AppController],\n",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 108,
                                    "end_token": 108,
                                    "label": "]",
                                    "children": []
                                },
                                {
                                    "type": "Block",
                                    "start_token": 109,
                                    "end_token": 110,
                                    "label": ",\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "describe",
            "start_line": 23,
            "end_line": 53,
            "start_token": 111,
            "end_token": 316,
            "label": "providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 111,
                    "end_token": 316,
                    "label": "providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
                    "children": [
                        {
                            "type": "CallExpression",
                            "start_token": 111,
                            "end_token": 315,
                            "label": "providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      }",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 111,
                                    "end_token": 111,
                                    "label": "providers",
                                    "children": []
                                },
                                {
                                    "type": "ParenthesizedExpression",
                                    "start_token": 112,
                                    "end_token": 315,
                                    "label": ": [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      }",
                                    "children": [
                                        {
                                            "type": "StringLiteral",
                                            "start_token": 113,
                                            "end_token": 113,
                                            "label": "[",
                                            "children": []
                                        },
                                        {
                                            "type": "CommaToken",
                                            "start_token": 114,
                                            "end_token": 114,
                                            "label": "A",
                                            "children": []
                                        },
                                        {
                                            "type": "ArrowFunction",
                                            "start_token": 115,
                                            "end_token": 314,
                                            "label": ", { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n",
                                            "children": [
                                                {
                                                    "type": "Parameter",
                                                    "start_token": 115,
                                                    "end_token": 116,
                                                    "label": ", {",
                                                    "children": []
                                                },
                                                {
                                                    "type": "EqualsGreaterThanToken",
                                                    "start_token": 117,
                                                    "end_token": 117,
                                                    "label": "provide",
                                                    "children": []
                                                },
                                                {
                                                    "type": "Block",
                                                    "start_token": 118,
                                                    "end_token": 314,
                                                    "label": ": B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "it",
                            "start_line": 24,
                            "end_line": 36,
                            "start_token": 119,
                            "end_token": 194,
                            "label": "B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to",
                            "children": [
                                {
                                    "type": "SourceFile",
                                    "start_token": 119,
                                    "end_token": 194,
                                    "label": "B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "start_token": 119,
                                            "end_token": 194,
                                            "label": "B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to",
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "start_token": 119,
                                                    "end_token": 193,
                                                    "label": "B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).",
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "start_token": 119,
                                                            "end_token": 119,
                                                            "label": "B",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "ParenthesizedExpression",
                                                            "start_token": 120,
                                                            "end_token": 193,
                                                            "label": ", useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).",
                                                            "children": [
                                                                {
                                                                    "type": "StringLiteral",
                                                                    "start_token": 121,
                                                                    "end_token": 121,
                                                                    "label": "useClass",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "CommaToken",
                                                                    "start_token": 122,
                                                                    "end_token": 122,
                                                                    "label": ":",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "ArrowFunction",
                                                                    "start_token": 123,
                                                                    "end_token": 192,
                                                                    "label": "BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true)",
                                                                    "children": [
                                                                        {
                                                                            "type": "AsyncKeyword",
                                                                            "start_token": 123,
                                                                            "end_token": 123,
                                                                            "label": "BImpl",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "ParameterList",
                                                                            "start_token": 124,
                                                                            "end_token": 125,
                                                                            "label": "}]",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "EqualsGreaterThanToken",
                                                                            "start_token": 126,
                                                                            "end_token": 126,
                                                                            "label": ",",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "Block",
                                                                            "start_token": 127,
                                                                            "end_token": 192,
                                                                            "label": "\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "TryStatement",
                                                                                    "start_token": 128,
                                                                                    "end_token": 191,
                                                                                    "label": "})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Block",
                                                                                            "start_token": 129,
                                                                                            "end_token": 168,
                                                                                            "label": ")\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "VariableDeclarationList",
                                                                                                    "start_token": 130,
                                                                                                    "end_token": 135,
                                                                                                    "label": "\nexport class AppModule {}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "VariableDeclaration",
                                                                                                            "start_token": 130,
                                                                                                            "end_token": 132,
                                                                                                            "label": "\nexport class",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "start_token": 130,
                                                                                                                    "end_token": 130,
                                                                                                                    "label": "\n",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "EqualsToken",
                                                                                                                    "start_token": 132,
                                                                                                                    "end_token": 132,
                                                                                                                    "label": "class",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "start_token": 133,
                                                                                                                    "end_token": 135,
                                                                                                                    "label": "AppModule {}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "PropertyAccessExpression",
                                                                                                                            "start_token": 133,
                                                                                                                            "end_token": 134,
                                                                                                                            "label": "AppModule {",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "start_token": 133,
                                                                                                                                    "end_token": 133,
                                                                                                                                    "label": "AppModule",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "start_token": 134,
                                                                                                                                    "end_token": 134,
                                                                                                                                    "label": "{",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "ParenthesizedExpression",
                                                                                                                            "start_token": 135,
                                                                                                                            "end_token": 145,
                                                                                                                            "label": "}\ndescribe('Circular custom providers', () => {",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "ObjectLiteralExpression",
                                                                                                                                    "start_token": 137,
                                                                                                                                    "end_token": 144,
                                                                                                                                    "label": "describe('Circular custom providers', () =>",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "start_token": 138,
                                                                                                                                            "end_token": 138,
                                                                                                                                            "label": "(",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "ColonToken",
                                                                                                                                            "start_token": 139,
                                                                                                                                            "end_token": 139,
                                                                                                                                            "label": "'Circular custom providers'",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "ArrayLiteralExpression",
                                                                                                                                            "start_token": 140,
                                                                                                                                            "end_token": 142,
                                                                                                                                            "label": ", ()",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "Identifier",
                                                                                                                                                    "start_token": 141,
                                                                                                                                                    "end_token": 141,
                                                                                                                                                    "label": "(",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "ExpressionStatement",
                                                                                                    "start_token": 146,
                                                                                                    "end_token": 153,
                                                                                                    "label": "\n  it('should throw an exception (useClass + regular provider)', async ()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "AwaitExpression",
                                                                                                            "start_token": 147,
                                                                                                            "end_token": 153,
                                                                                                            "label": "it('should throw an exception (useClass + regular provider)', async ()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "start_token": 148,
                                                                                                                    "end_token": 153,
                                                                                                                    "label": "('should throw an exception (useClass + regular provider)', async ()",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "PropertyAccessExpression",
                                                                                                                            "start_token": 148,
                                                                                                                            "end_token": 150,
                                                                                                                            "label": "('should throw an exception (useClass + regular provider)',",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "start_token": 148,
                                                                                                                                    "end_token": 148,
                                                                                                                                    "label": "(",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "start_token": 150,
                                                                                                                                    "end_token": 150,
                                                                                                                                    "label": ",",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "ParenthesizedExpression",
                                                                                                                            "start_token": 151,
                                                                                                                            "end_token": 152,
                                                                                                                            "label": "async (",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "ExpressionStatement",
                                                                                                    "start_token": 154,
                                                                                                    "end_token": 167,
                                                                                                    "label": "=> {\n    try {\n      const builder = Test.createTestingModule(",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "CallExpression",
                                                                                                            "start_token": 154,
                                                                                                            "end_token": 167,
                                                                                                            "label": "=> {\n    try {\n      const builder = Test.createTestingModule(",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "start_token": 154,
                                                                                                                    "end_token": 154,
                                                                                                                    "label": "=",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "ParenthesizedExpression",
                                                                                                                    "start_token": 155,
                                                                                                                    "end_token": 165,
                                                                                                                    "label": "> {\n    try {\n      const builder = Test.",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "BooleanKeyword",
                                                                                                                            "start_token": 156,
                                                                                                                            "end_token": 156,
                                                                                                                            "label": "{",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "PropertyAccessExpression",
                                                                                                                    "start_token": 158,
                                                                                                                    "end_token": 163,
                                                                                                                    "label": "try {\n      const builder =",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "start_token": 159,
                                                                                                                            "end_token": 159,
                                                                                                                            "label": "{",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "start_token": 161,
                                                                                                                            "end_token": 161,
                                                                                                                            "label": "const",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "CallExpression",
                                                                                                                            "start_token": 164,
                                                                                                                            "end_token": 164,
                                                                                                                            "label": "Test",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "BooleanKeyword",
                                                                                                                                    "start_token": 165,
                                                                                                                                    "end_token": 165,
                                                                                                                                    "label": ".",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "CatchClause",
                                                                                            "start_token": 169,
                                                                                            "end_token": 191,
                                                                                            "label": "\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Parameter",
                                                                                                    "start_token": 170,
                                                                                                    "end_token": 172,
                                                                                                    "label": "imports: [",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 171,
                                                                                                            "end_token": 171,
                                                                                                            "label": ":",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "Block",
                                                                                                    "start_token": 173,
                                                                                                    "end_token": 191,
                                                                                                    "label": "AppModule],\n      });\n      await builder.compile();\n      expect(true",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "ExpressionStatement",
                                                                                                            "start_token": 174,
                                                                                                            "end_token": 190,
                                                                                                            "label": "],\n      });\n      await builder.compile();\n      expect(",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "start_token": 174,
                                                                                                                    "end_token": 190,
                                                                                                                    "label": "],\n      });\n      await builder.compile();\n      expect(",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "start_token": 174,
                                                                                                                            "end_token": 174,
                                                                                                                            "label": "]",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "ParenthesizedExpression",
                                                                                                                            "start_token": 175,
                                                                                                                            "end_token": 189,
                                                                                                                            "label": ",\n      });\n      await builder.compile();\n      expect",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "PropertyAccessExpression",
                                                                                                                                    "start_token": 176,
                                                                                                                                    "end_token": 178,
                                                                                                                                    "label": "\n      })",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "start_token": 176,
                                                                                                                                            "end_token": 176,
                                                                                                                                            "label": "\n",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "start_token": 178,
                                                                                                                                            "end_token": 178,
                                                                                                                                            "label": ")",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "PropertyAccessExpression",
                                                                                                                                    "start_token": 181,
                                                                                                                                    "end_token": 185,
                                                                                                                                    "label": "await builder.compile(",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "start_token": 182,
                                                                                                                                            "end_token": 182,
                                                                                                                                            "label": "builder",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "start_token": 184,
                                                                                                                                            "end_token": 184,
                                                                                                                                            "label": "compile",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "StringLiteral",
                                                                                                                                            "start_token": 187,
                                                                                                                                            "end_token": 187,
                                                                                                                                            "label": ";",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "SemicolonToken",
                                                    "start_token": 194,
                                                    "end_token": 194,
                                                    "label": "to",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "ExpressionStatement",
                            "start_token": 195,
                            "end_token": 313,
                            "label": ".be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],",
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "start_token": 195,
                                    "end_token": 313,
                                    "label": ".be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],",
                                    "children": []
                                }
                            ],
                            "name": "it",
                            "start_line": 37,
                            "end_line": 52
                        },
                        {
                            "type": "SemicolonClassElement",
                            "start_token": 316,
                            "end_token": 316,
                            "label": ")",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}