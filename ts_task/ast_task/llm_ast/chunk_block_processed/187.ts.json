{
    "type": "module",
    "start_token": 0,
    "end_token": 138,
    "label": "import axios from 'axios';\nimport { Novu } from '../novu';\nconst mockConfig = {\n  apiKey: '1234',\n};\njest.mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled()",
    "children": [
        {
            "type": "ImportDeclaration",
            "start_token": 0,
            "end_token": 4,
            "label": "import axios from 'axios';",
            "children": [
                {
                    "type": "ImportClause",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import axios",
                    "children": [
                        {
                            "type": "Identifier",
                            "start_token": 1,
                            "end_token": 1,
                            "label": "axios",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "'axios'",
                    "children": []
                }
            ]
        },
        {
            "type": "ImportDeclaration",
            "start_token": 5,
            "end_token": 11,
            "label": "\nimport { Novu } from '../novu'",
            "children": [
                {
                    "type": "NamedImports",
                    "start_token": 6,
                    "end_token": 8,
                    "label": "import { Novu",
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "start_token": 7,
                            "end_token": 7,
                            "label": "{",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "StringLiteral",
                    "start_token": 10,
                    "end_token": 10,
                    "label": "from",
                    "children": []
                }
            ]
        },
        {
            "type": "VariableDeclarationList",
            "start_token": 12,
            "end_token": 21,
            "label": ";\nconst mockConfig = {\n  apiKey: '1234'",
            "children": [
                {
                    "type": "VariableDeclaration",
                    "start_token": 13,
                    "end_token": 20,
                    "label": "\nconst mockConfig = {\n  apiKey:",
                    "children": [
                        {
                            "type": "Identifier",
                            "start_token": 13,
                            "end_token": 13,
                            "label": "\n",
                            "children": []
                        },
                        {
                            "type": "ObjectLiteralExpression",
                            "start_token": 15,
                            "end_token": 20,
                            "label": "mockConfig = {\n  apiKey:",
                            "children": [
                                {
                                    "type": "PropertyAssignment",
                                    "start_token": 16,
                                    "end_token": 18,
                                    "label": "= {\n",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 16,
                                            "end_token": 16,
                                            "label": "=",
                                            "children": []
                                        },
                                        {
                                            "type": "StringLiteral",
                                            "start_token": 18,
                                            "end_token": 18,
                                            "label": "\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "ExpressionStatement",
            "start_token": 22,
            "end_token": 28,
            "label": ",\n};\njest.",
            "children": [
                {
                    "type": "CallExpression",
                    "start_token": 22,
                    "end_token": 27,
                    "label": ",\n};\njest",
                    "children": [
                        {
                            "type": "PropertyAccessExpression",
                            "start_token": 22,
                            "end_token": 24,
                            "label": ",\n}",
                            "children": [
                                {
                                    "type": "Identifier",
                                    "start_token": 22,
                                    "end_token": 22,
                                    "label": ",",
                                    "children": []
                                },
                                {
                                    "type": "Identifier",
                                    "start_token": 24,
                                    "end_token": 24,
                                    "label": "}",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "StringLiteral",
                            "start_token": 26,
                            "end_token": 26,
                            "label": "\n",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "describe",
            "start_line": 7,
            "end_line": 20,
            "start_token": 29,
            "end_token": 138,
            "label": "mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled()",
            "children": [
                {
                    "type": "SourceFile",
                    "start_token": 29,
                    "end_token": 138,
                    "label": "mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled()",
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "start_token": 29,
                            "end_token": 137,
                            "label": "mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled(",
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "start_token": 29,
                                    "end_token": 137,
                                    "label": "mock('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled(",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 29,
                                            "end_token": 29,
                                            "label": "mock",
                                            "children": []
                                        },
                                        {
                                            "type": "ParenthesizedExpression",
                                            "start_token": 30,
                                            "end_token": 137,
                                            "label": "('axios');\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled(",
                                            "children": [
                                                {
                                                    "type": "StringLiteral",
                                                    "start_token": 31,
                                                    "end_token": 31,
                                                    "label": "'axios'",
                                                    "children": []
                                                },
                                                {
                                                    "type": "CommaToken",
                                                    "start_token": 32,
                                                    "end_token": 32,
                                                    "label": ")",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ArrowFunction",
                                                    "start_token": 33,
                                                    "end_token": 136,
                                                    "label": ";\ndescribe('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled",
                                                    "children": [
                                                        {
                                                            "type": "ParenthesizedExpression",
                                                            "start_token": 33,
                                                            "end_token": 34,
                                                            "label": ";\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "EqualsGreaterThanToken",
                                                            "start_token": 35,
                                                            "end_token": 35,
                                                            "label": "describe",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "Block",
                                                            "start_token": 36,
                                                            "end_token": 136,
                                                            "label": "('test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as jest.Mocked<typeof axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n    novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).toHaveBeenCalled",
                                                            "children": [
                                                                {
                                                                    "type": "VariableDeclarationList",
                                                                    "start_token": 37,
                                                                    "end_token": 49,
                                                                    "label": "'test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as",
                                                                    "children": [
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "start_token": 37,
                                                                            "end_token": 49,
                                                                            "label": "'test use of novus node package - InboundParse class', () => {\n  const mockedAxios = axios as",
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "start_token": 38,
                                                                                    "end_token": 38,
                                                                                    "label": ",",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "EqualsToken",
                                                                                    "start_token": 39,
                                                                                    "end_token": 39,
                                                                                    "label": "(",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "AsExpression",
                                                                                    "start_token": 40,
                                                                                    "end_token": 48,
                                                                                    "label": ") => {\n  const mockedAxios = axios",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 40,
                                                                                            "end_token": 40,
                                                                                            "label": ")",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 41,
                                                                                            "end_token": 41,
                                                                                            "label": "=",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "start_token": 42,
                                                                                            "end_token": 47,
                                                                                            "label": "> {\n  const mockedAxios =",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 42,
                                                                                                    "end_token": 42,
                                                                                                    "label": ">",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "DotToken",
                                                                                                    "start_token": 43,
                                                                                                    "end_token": 43,
                                                                                                    "label": "{",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 44,
                                                                                                    "end_token": 44,
                                                                                                    "label": "\n",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "TypeReference",
                                                                                                    "start_token": 45,
                                                                                                    "end_token": 47,
                                                                                                    "label": "const mockedAxios =",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 46,
                                                                                                            "end_token": 46,
                                                                                                            "label": "mockedAxios",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 47,
                                                                                                            "end_token": 47,
                                                                                                            "label": "=",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SemicolonClassElement",
                                                                            "start_token": 49,
                                                                            "end_token": 49,
                                                                            "label": "as",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "VariableDeclarationList",
                                                                    "start_token": 50,
                                                                    "end_token": 54,
                                                                    "label": "jest.Mocked<typeof",
                                                                    "children": [
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "start_token": 50,
                                                                            "end_token": 54,
                                                                            "label": "jest.Mocked<typeof",
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "start_token": 51,
                                                                                    "end_token": 51,
                                                                                    "label": ".",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "ColonToken",
                                                                                    "start_token": 52,
                                                                                    "end_token": 52,
                                                                                    "label": "Mocked",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "TypeReference",
                                                                                    "start_token": 53,
                                                                                    "end_token": 53,
                                                                                    "label": "<",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 53,
                                                                                            "end_token": 53,
                                                                                            "label": "<",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "SemicolonClassElement",
                                                                                    "start_token": 54,
                                                                                    "end_token": 54,
                                                                                    "label": "typeof",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "beforeEach",
                            "start_line": 10,
                            "end_line": 13,
                            "start_token": 55,
                            "end_token": 81,
                            "label": "axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n",
                            "children": [
                                {
                                    "type": "module",
                                    "start_token": 55,
                                    "end_token": 81,
                                    "label": "axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();\n",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "start_token": 55,
                                            "end_token": 80,
                                            "label": "axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();",
                                            "children": [
                                                {
                                                    "type": "ArrowFunction",
                                                    "start_token": 55,
                                                    "end_token": 80,
                                                    "label": "axios>;\n  let novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis();",
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "start_token": 55,
                                                            "end_token": 55,
                                                            "label": "axios",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "Parameter",
                                                            "start_token": 56,
                                                            "end_token": 58,
                                                            "label": ">;\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "EqualsGreaterThanToken",
                                                            "start_token": 59,
                                                            "end_token": 59,
                                                            "label": "let",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 60,
                                                            "end_token": 79,
                                                            "label": "novu: Novu;\n  beforeEach(() => {\n    mockedAxios.create.mockReturnThis()",
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 61,
                                                                    "end_token": 68,
                                                                    "label": ": Novu;\n  beforeEach(()",
                                                                    "children": [
                                                                        {
                                                                            "type": "PropertyAccessExpression",
                                                                            "start_token": 61,
                                                                            "end_token": 65,
                                                                            "label": ": Novu;\n  beforeEach",
                                                                            "children": [
                                                                                {
                                                                                    "type": "PropertyAccessExpression",
                                                                                    "start_token": 61,
                                                                                    "end_token": 63,
                                                                                    "label": ": Novu;",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 61,
                                                                                            "end_token": 61,
                                                                                            "label": ":",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 63,
                                                                                            "end_token": 63,
                                                                                            "label": ";",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "start_token": 65,
                                                                                    "end_token": 65,
                                                                                    "label": "beforeEach",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "start_token": 66,
                                                                            "end_token": 67,
                                                                            "label": "((",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "SemicolonClassElement",
                                                                            "start_token": 68,
                                                                            "end_token": 68,
                                                                            "label": ")",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 69,
                                                                    "end_token": 78,
                                                                    "label": "=> {\n    mockedAxios.create.mockReturnThis(",
                                                                    "children": [
                                                                        {
                                                                            "type": "VariableDeclarationList",
                                                                            "start_token": 69,
                                                                            "end_token": 78,
                                                                            "label": "=> {\n    mockedAxios.create.mockReturnThis(",
                                                                            "children": [
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "start_token": 69,
                                                                                    "end_token": 78,
                                                                                    "label": "=> {\n    mockedAxios.create.mockReturnThis(",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 69,
                                                                                            "end_token": 69,
                                                                                            "label": "=",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "EqualsToken",
                                                                                            "start_token": 70,
                                                                                            "end_token": 70,
                                                                                            "label": ">",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "NewExpression",
                                                                                            "start_token": 71,
                                                                                            "end_token": 78,
                                                                                            "label": "{\n    mockedAxios.create.mockReturnThis(",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 72,
                                                                                                    "end_token": 72,
                                                                                                    "label": "\n",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "start_token": 73,
                                                                                                    "end_token": 77,
                                                                                                    "label": "mockedAxios.create.mockReturnThis",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "PropertyAccessExpression",
                                                                                                            "start_token": 74,
                                                                                                            "end_token": 76,
                                                                                                            "label": ".create.",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "start_token": 74,
                                                                                                                    "end_token": 74,
                                                                                                                    "label": ".",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "start_token": 76,
                                                                                                                    "end_token": 76,
                                                                                                                    "label": ".",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SemicolonClassElement",
                                                                            "start_token": 78,
                                                                            "end_token": 78,
                                                                            "label": "(",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "start_token": 80,
                                                    "end_token": 80,
                                                    "label": ";",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "SemicolonClassElement",
                                            "start_token": 81,
                                            "end_token": 81,
                                            "label": "\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "ExpressionStatement",
                            "start_token": 82,
                            "end_token": 135,
                            "label": "novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get).",
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "start_token": 82,
                                    "end_token": 134,
                                    "label": "novu = new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get)",
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "start_token": 82,
                                            "end_token": 82,
                                            "label": "novu",
                                            "children": []
                                        },
                                        {
                                            "type": "ParenthesizedExpression",
                                            "start_token": 83,
                                            "end_token": 134,
                                            "label": "= new Novu(mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get)",
                                            "children": [
                                                {
                                                    "type": "StringLiteral",
                                                    "start_token": 84,
                                                    "end_token": 84,
                                                    "label": "new",
                                                    "children": []
                                                },
                                                {
                                                    "type": "AsyncKeyword",
                                                    "start_token": 86,
                                                    "end_token": 86,
                                                    "label": "(",
                                                    "children": []
                                                },
                                                {
                                                    "type": "ArrowFunction",
                                                    "start_token": 87,
                                                    "end_token": 133,
                                                    "label": "mockConfig.apiKey);\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get",
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "start_token": 90,
                                                            "end_token": 133,
                                                            "label": ");\n  });\n  test('should get inbound parse correctly', async () => {\n    mockedAxios.get.mockResolvedValue({});\n    await novu.inboundParse.getMxStatus();\n    expect(mockedAxios.get",
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 91,
                                                                    "end_token": 100,
                                                                    "label": ";\n  });\n  test('should get inbound parse correctly',",
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "start_token": 91,
                                                                            "end_token": 99,
                                                                            "label": ";\n  });\n  test('should get inbound parse correctly'",
                                                                            "children": [
                                                                                {
                                                                                    "type": "PropertyAccessExpression",
                                                                                    "start_token": 91,
                                                                                    "end_token": 95,
                                                                                    "label": ";\n  });",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "PropertyAccessExpression",
                                                                                            "start_token": 91,
                                                                                            "end_token": 93,
                                                                                            "label": ";\n  }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 91,
                                                                                                    "end_token": 91,
                                                                                                    "label": ";",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 93,
                                                                                                    "end_token": 93,
                                                                                                    "label": "}",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 95,
                                                                                            "end_token": 95,
                                                                                            "label": ";",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "ParenthesizedExpression",
                                                                                    "start_token": 96,
                                                                                    "end_token": 99,
                                                                                    "label": "\n  test('should get inbound parse correctly'",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "ObjectLiteralExpression",
                                                                                            "start_token": 97,
                                                                                            "end_token": 98,
                                                                                            "label": "test(",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 101,
                                                                    "end_token": 109,
                                                                    "label": "async () => {\n    mockedAxios.",
                                                                    "children": [
                                                                        {
                                                                            "type": "AwaitExpression",
                                                                            "start_token": 101,
                                                                            "end_token": 108,
                                                                            "label": "async () => {\n    mockedAxios",
                                                                            "children": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "start_token": 102,
                                                                                    "end_token": 108,
                                                                                    "label": "() => {\n    mockedAxios",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "PropertyAccessExpression",
                                                                                            "start_token": 102,
                                                                                            "end_token": 106,
                                                                                            "label": "() => {",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "PropertyAccessExpression",
                                                                                                    "start_token": 102,
                                                                                                    "end_token": 104,
                                                                                                    "label": "() =",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 102,
                                                                                                            "end_token": 102,
                                                                                                            "label": "(",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 104,
                                                                                                            "end_token": 104,
                                                                                                            "label": "=",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 106,
                                                                                                    "end_token": 106,
                                                                                                    "label": "{",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "ParenthesizedExpression",
                                                                                            "start_token": 107,
                                                                                            "end_token": 108,
                                                                                            "label": "\n    mockedAxios",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 110,
                                                                    "end_token": 120,
                                                                    "label": "get.mockResolvedValue({});\n    await novu",
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "start_token": 110,
                                                                            "end_token": 119,
                                                                            "label": "get.mockResolvedValue({});\n    await",
                                                                            "children": [
                                                                                {
                                                                                    "type": "PropertyAccessExpression",
                                                                                    "start_token": 110,
                                                                                    "end_token": 117,
                                                                                    "label": "get.mockResolvedValue({});",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "ParenthesizedExpression",
                                                                                            "start_token": 111,
                                                                                            "end_token": 115,
                                                                                            "label": ".mockResolvedValue({}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "PropertyAccessExpression",
                                                                                                    "start_token": 112,
                                                                                                    "end_token": 114,
                                                                                                    "label": "mockResolvedValue({",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 112,
                                                                                                            "end_token": 112,
                                                                                                            "label": "mockResolvedValue",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 114,
                                                                                                            "end_token": 114,
                                                                                                            "label": "{",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 115,
                                                                                                    "end_token": 115,
                                                                                                    "label": "}",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 117,
                                                                                            "end_token": 117,
                                                                                            "label": ";",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "ParenthesizedExpression",
                                                                                    "start_token": 118,
                                                                                    "end_token": 119,
                                                                                    "label": "\n    await",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "start_token": 121,
                                                                    "end_token": 132,
                                                                    "label": ".inboundParse.getMxStatus();\n    expect(mockedAxios.",
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "start_token": 121,
                                                                            "end_token": 131,
                                                                            "label": ".inboundParse.getMxStatus();\n    expect(mockedAxios",
                                                                            "children": [
                                                                                {
                                                                                    "type": "PropertyAccessExpression",
                                                                                    "start_token": 121,
                                                                                    "end_token": 129,
                                                                                    "label": ".inboundParse.getMxStatus();\n    expect",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "ParenthesizedExpression",
                                                                                            "start_token": 122,
                                                                                            "end_token": 126,
                                                                                            "label": "inboundParse.getMxStatus()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "PropertyAccessExpression",
                                                                                                    "start_token": 123,
                                                                                                    "end_token": 125,
                                                                                                    "label": ".getMxStatus(",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 123,
                                                                                                            "end_token": 123,
                                                                                                            "label": ".",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "start_token": 125,
                                                                                                            "end_token": 125,
                                                                                                            "label": "(",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "start_token": 126,
                                                                                                    "end_token": 126,
                                                                                                    "label": ")",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "start_token": 128,
                                                                                            "end_token": 128,
                                                                                            "label": "\n",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "ParenthesizedExpression",
                                                                                    "start_token": 130,
                                                                                    "end_token": 131,
                                                                                    "label": "(mockedAxios",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "StringLiteral",
                                                                                            "start_token": 130,
                                                                                            "end_token": 130,
                                                                                            "label": "(",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "SemicolonClassElement",
                                    "start_token": 135,
                                    "end_token": 135,
                                    "label": ".",
                                    "children": []
                                }
                            ],
                            "name": "test",
                            "start_line": 14,
                            "end_line": 19
                        },
                        {
                            "type": "SemicolonClassElement",
                            "start_token": 138,
                            "end_token": 138,
                            "label": ")",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}