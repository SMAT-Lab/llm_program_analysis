{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 102,
  "functions": [],
  "classes": [
    {
      "name": "UnrealTextToSpeechBlock",
      "type": "class",
      "start_line": 30,
      "end_line": 102,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 52,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\",\n            description=\"Converts text to speech using the Unreal Speech API\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=UnrealTextToSpeechBlock.Input,\n            output_schema=UnrealTextToSpeechBlock.Output,\n            test_input={\n                \"text\": \"This is a test of the text to speech API.\",\n                \"voice_id\": \"Scarlett\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")],\n            test_mock={\n                \"call_unreal_speech_api\": lambda *args, **kwargs: {\n                    \"OutputUri\": \"https://example.com/test.mp3\"\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "call_unreal_speech_api",
          "type": "function",
          "start_line": 74,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    def call_unreal_speech_api(\n        api_key: SecretStr, text: str, voice_id: str\n    ) -> dict[str, Any]:\n        url = \"https://api.v7.unrealspeech.com/speech\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n        data = {\n            \"Text\": text,\n            \"VoiceId\": voice_id,\n            \"Bitrate\": \"192k\",\n            \"Speed\": \"0\",\n            \"Pitch\": \"1\",\n            \"TimestampType\": \"sentence\",\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "def call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "url = \"https://api.v7.unrealspeech.com/speech\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "headers = {\"Authorization\": f\"Bearer {api_key.get_secret_value()}\", \"Content-Type\": \"application/json\"}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "data = {\"Text\": text, \"VoiceId\": voice_id, \"Bitrate\": \"192k\", \"Speed\": \"0\", \"Pitch\": \"1\", \"TimestampType\": \"sentence\"}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "response = requests.post(url, headers=headers, json=data)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 94,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(\n            credentials.api_key,\n            input_data.text,\n            input_data.voice_id,\n        )\n        yield \"mp3_url\", api_response[\"OutputUri\"]",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"mp3_url\", api_response[\"OutputUri\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 31,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to be converted to speech\",\n            placeholder=\"Enter the text you want to convert to speech\",\n        )\n        voice_id: str = SchemaField(\n            description=\"The voice ID to use for text-to-speech conversion\",\n            placeholder=\"Scarlett\",\n            default=\"Scarlett\",\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Unreal Speech integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "text: str = SchemaField(description=\"The text to be converted to speech\", placeholder=\"Enter the text you want to convert to speech\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "voice_id: str = SchemaField(description=\"The voice ID to use for text-to-speech conversion\", placeholder=\"Scarlett\", default=\"Scarlett\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]] = CredentialsField(description=\"The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")\n        error: str = SchemaField(description=\"Error message if the API call failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the API call failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class UnrealTextToSpeechBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the API call failed\")\n\n        )\n\n    @staticmethod\n        return response.json()\n\n        yield \"mp3_url\", api_response[\"OutputUri\"]",
      "blocks": [
        {
          "id": 1,
          "label": "class UnrealTextToSpeechBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "error: str = SchemaField(description=\"Error message if the API call failed\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@staticmethod",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return response.json()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "yield \"mp3_url\", api_response[\"OutputUri\"]",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from typing import Any, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"unreal_speech\",\n    api_key=SecretStr(\"mock-unreal-speech-api-key\"),\n    title=\"Mock Unreal Speech API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n        yield \"mp3_url\", api_response[\"OutputUri\"]",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any, Literal",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from pydantic import SecretStr",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.model import ( APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField, )",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.util.request import requests",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "TEST_CREDENTIALS = APIKeyCredentials( id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"unreal_speech\", api_key=SecretStr(\"mock-unreal-speech-api-key\"), title=\"Mock Unreal Speech API key\", expires_at=None, )",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "TEST_CREDENTIALS_INPUT = { \"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type, }",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "yield \"mp3_url\", api_response[\"OutputUri\"]",
      "successors": []
    }
  ]
}