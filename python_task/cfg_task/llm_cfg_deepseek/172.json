{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 257,
  "functions": [
    {
      "name": "get_pid_path",
      "type": "function",
      "start_line": 15,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_pid_path() -> pathlib.Path:\n    home_dir = pathlib.Path.home()\n    new_dir = home_dir / \".config\" / \"agpt\"\n    file_path = new_dir / \"running.tmp\"\n    return file_path",
      "blocks": [
        {
          "id": 1,
          "label": "def get_pid_path() -> pathlib.Path:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "home_dir = pathlib.Path.home()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "new_dir = home_dir / \".config\" / \"agpt\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "file_path = new_dir / \"running.tmp\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return file_path",
          "successors": []
        }
      ]
    },
    {
      "name": "get_pid",
      "type": "function",
      "start_line": 22,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_pid() -> int | None:\n    file_path = get_pid_path()\n    if not file_path.exists():\n        return None\n\n    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        pid = file.read()\n    try:\n        return int(pid)\n    except ValueError:\n        return None",
      "blocks": [
        {
          "id": 1,
          "label": "file_path = get_pid_path()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not file_path.exists():",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "return None",
          "successors": []
        },
        {
          "id": 4,
          "label": "os.makedirs(file_path.parent, exist_ok=True)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "with open(file_path, \"r\", encoding=\"utf-8\") as file:",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "pid = file.read()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "try:",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return int(pid)",
          "successors": []
        },
        {
          "id": 9,
          "label": "except ValueError:",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return None",
          "successors": []
        }
      ]
    },
    {
      "name": "write_pid",
      "type": "function",
      "start_line": 36,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "def write_pid(pid: int):\n    file_path = get_pid_path()\n    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, \"w\", encoding=\"utf-8\") as file:\n        file.write(str(pid))",
      "blocks": [
        {
          "id": 1,
          "label": "def write_pid(pid: int):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "file_path = get_pid_path()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "os.makedirs(file_path.parent, exist_ok=True)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "with open(file_path, \"w\", encoding=\"utf-8\") as file:",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "file.write(str(pid))",
          "successors": []
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 49,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": "def main():\n    \"\"\"AutoGPT Server CLI Tool\"\"\"\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "def main():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"AutoGPT Server CLI Tool\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": []
        }
      ]
    },
    {
      "name": "start",
      "type": "function",
      "start_line": 55,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": "def start():\n    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n    # Define the path for the new directory and file\n    pid = get_pid()\n    if pid and psutil.pid_exists(pid):\n        print(\"Server is already running\")\n        exit(1)\n    elif pid:\n        print(\"PID does not exist deleting file\")\n        os.remove(get_pid_path())\n\n    print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n\n    write_pid(pid)\n    print(\"done\")\n    os._exit(status=0)",
      "blocks": [
        {
          "id": 1,
          "label": "pid = get_pid()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if pid and psutil.pid_exists(pid):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "print(\"Server is already running\")",
          "successors": [
            5
          ]
        },
        {
          "id": 4,
          "label": "elif pid:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 5,
          "label": "exit(1)",
          "successors": []
        },
        {
          "id": 6,
          "label": "print(\"PID does not exist deleting file\")",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "os.remove(get_pid_path())",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "print(\"Starting server\")",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "pid = MainApp().start(background=True, silent=True)",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "print(f\"Server running in process: {pid}\")",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "write_pid(pid)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "print(\"done\")",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "os._exit(status=0)",
          "successors": []
        }
      ]
    },
    {
      "name": "stop",
      "type": "function",
      "start_line": 78,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "simplified_code": "def stop():\n    \"\"\"\n    Stops the server\n    \"\"\"\n    pid = get_pid()\n    if not pid:\n        print(\"Server is not running\")\n        return\n\n    os.remove(get_pid_path())\n    process = psutil.Process(int(pid))\n    for child in process.children(recursive=True):\n        child.terminate()\n    process.terminate()\n\n    print(\"Server Stopped\")",
      "blocks": [
        {
          "id": 1,
          "label": "pid = get_pid()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not pid:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "print(\"Server is not running\")",
          "successors": [
            5
          ]
        },
        {
          "id": 4,
          "label": "os.remove(get_pid_path())",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "return",
          "successors": []
        },
        {
          "id": 6,
          "label": "process = psutil.Process(int(pid))",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "for child in process.children(recursive=True):",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "child.terminate()",
          "successors": [
            7
          ]
        },
        {
          "id": 9,
          "label": "process.terminate()",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "print(\"Server Stopped\")",
          "successors": []
        }
      ]
    },
    {
      "name": "gen_encrypt_key",
      "type": "function",
      "start_line": 97,
      "end_line": 103,
      "functions": [],
      "classes": [],
      "simplified_code": "def gen_encrypt_key():\n    \"\"\"\n    Generate a new encryption key\n    \"\"\"\n    from cryptography.fernet import Fernet\n\n    print(Fernet.generate_key().decode())",
      "blocks": [
        {
          "id": 1,
          "label": "def gen_encrypt_key():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "from cryptography.fernet import Fernet",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "print(Fernet.generate_key().decode())",
          "successors": []
        }
      ]
    },
    {
      "name": "test",
      "type": "function",
      "start_line": 107,
      "end_line": 111,
      "functions": [],
      "classes": [],
      "simplified_code": "def test():\n    \"\"\"\n    Group for test commands\n    \"\"\"\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "def test():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "pass",
          "successors": []
        }
      ]
    },
    {
      "name": "reddit",
      "type": "function",
      "start_line": 116,
      "end_line": 132,
      "functions": [],
      "classes": [],
      "simplified_code": "def reddit(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    from backend.usecases.reddit_marketing import create_test_graph\n\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n\n    response = requests.post(url, headers=headers, data=data)\n\n    graph_id = response.json()[\"id\"]\n    print(f\"Graph created with ID: {graph_id}\")",
      "blocks": [
        {
          "id": 1,
          "label": "def reddit(server_address: str):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "import requests",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "from backend.usecases.reddit_marketing import create_test_graph",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "test_graph = create_test_graph()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "url = f\"{server_address}/graphs\"",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "headers = {\"Content-Type\": \"application/json\"}",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "data = test_graph.model_dump_json()",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "response = requests.post(url, headers=headers, data=data)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "graph_id = response.json()[\"id\"]",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "print(f\"Graph created with ID: {graph_id}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "populate_db",
      "type": "function",
      "start_line": 137,
      "end_line": 168,
      "functions": [],
      "classes": [],
      "simplified_code": "def populate_db(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n\n    response = requests.post(url, headers=headers, data=data)\n\n    graph_id = response.json()[\"id\"]\n\n    if response.status_code == 200:\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n\n        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"\n        data = {\n            \"graph_id\": graph_id,\n            \"cron\": \"*/5 * * * *\",\n            \"input_data\": {\"input\": \"Hello, World!\"},\n        }\n        response = requests.post(schedule_url, headers=headers, json=data)\n\n    print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
      "blocks": [
        {
          "id": 1,
          "label": "import requests",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "from backend.usecases.sample import create_test_graph",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "test_graph = create_test_graph()",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "url = f\"{server_address}/graphs\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "headers = {\"Content-Type\": \"application/json\"}",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "data = test_graph.model_dump_json()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "response = requests.post(url, headers=headers, data=data)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "graph_id = response.json()[\"id\"]",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "if response.status_code == 200:",
          "successors": [
            10,
            13
          ]
        },
        {
          "id": 10,
          "label": "execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "text = \"Hello, World!\"",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "input_data = {\"input\": text}",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "response = requests.post(execute_url, headers=headers, json=input_data)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "data = {\"graph_id\": graph_id, \"cron\": \"*/5 * * * *\", \"input_data\": {\"input\": \"Hello, World!\"}}",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "response = requests.post(schedule_url, headers=headers, json=data)",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
          "successors": []
        }
      ]
    },
    {
      "name": "graph",
      "type": "function",
      "start_line": 173,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": "def graph(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n\n    if response.status_code == 200:\n        print(response.json()[\"id\"])\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n\n    else:\n        print(\"Failed to send graph\")\n        print(f\"Response: {response.text}\")",
      "blocks": [
        {
          "id": 1,
          "label": "import requests",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "from backend.usecases.sample import create_test_graph",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "url = f\"{server_address}/graphs\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "headers = {\"Content-Type\": \"application/json\"}",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "data = create_test_graph().model_dump_json()",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "response = requests.post(url, headers=headers, data=data)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if response.status_code == 200:",
          "successors": [
            8,
            11
          ]
        },
        {
          "id": 8,
          "label": "print(response.json()[\"id\"])",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "text = \"Hello, World!\"",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "input_data = {\"input\": text}",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "response = requests.post(execute_url, headers=headers, json=input_data)",
          "successors": []
        },
        {
          "id": 13,
          "label": "else:",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "print(\"Failed to send graph\")",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "print(f\"Response: {response.text}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "execute",
      "type": "function",
      "start_line": 201,
      "end_line": 210,
      "functions": [],
      "classes": [],
      "simplified_code": "def execute(graph_id: str, content: dict):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\n    requests.post(execute_url, headers=headers, json=content)",
      "blocks": [
        {
          "id": 1,
          "label": "def execute(graph_id: str, content: dict):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "import requests",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "headers = {\"Content-Type\": \"application/json\"}",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "requests.post(execute_url, headers=headers, json=content)",
          "successors": []
        }
      ]
    },
    {
      "name": "event",
      "type": "function",
      "start_line": 214,
      "end_line": 218,
      "functions": [],
      "classes": [],
      "simplified_code": "def event():\n    \"\"\"\n    Send an event to the running server\n    \"\"\"\n    print(\"Event sent\")",
      "blocks": [
        {
          "id": 1,
          "label": "def event():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "print(\"Event sent\")",
          "successors": []
        }
      ]
    },
    {
      "name": "websocket",
      "type": "function",
      "start_line": 224,
      "end_line": 250,
      "functions": [
        {
          "name": "send_message",
          "type": "function",
          "start_line": 234,
          "end_line": 250,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def send_message(server_address: str):\n        uri = f\"ws://{server_address}\"\n        async with websockets.asyncio.client.connect(uri) as websocket:\n            try:\n                msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()\n                await websocket.send(msg)\n                print(f\"Sending: {msg}\")\n                while True:\n                    response = await websocket.recv()\n                    print(f\"Response from server: {response}\")\n            except InterruptedError:\n                exit(0)\n\n    asyncio.run(send_message(server_address))",
          "blocks": [
            {
              "id": 1,
              "label": "async def send_message(server_address: str):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "uri = f\"ws://{server_address}\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "async with websockets.asyncio.client.connect(uri) as websocket:",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "try:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump(),).model_dump_json()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "await websocket.send(msg)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "print(f\"Sending: {msg}\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "while True:",
              "successors": [
                9,
                11
              ]
            },
            {
              "id": 9,
              "label": "response = await websocket.recv()",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "print(f\"Response from server: {response}\")",
              "successors": [
                8
              ]
            },
            {
              "id": 11,
              "label": "except InterruptedError:",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "exit(0)",
              "successors": []
            },
            {
              "id": 13,
              "label": "asyncio.run(send_message(server_address))",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def websocket(server_address: str, graph_id: str):\n    \"\"\"\n    Tests the websocket connection.\n    \"\"\"\n    import asyncio\n\n    import websockets.asyncio.client\n\n    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage\n\n    asyncio.run(send_message(server_address))",
      "blocks": [
        {
          "id": 1,
          "label": "def websocket(server_address: str, graph_id: str):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "import asyncio",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "import websockets.asyncio.client",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "asyncio.run(send_message(server_address))",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "MainApp",
      "type": "class",
      "start_line": 43,
      "end_line": 45,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self):\n        app.main(silent=True)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "app.main(silent=True)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class MainApp(AppProcess):\n        app.main(silent=True)",
      "blocks": [
        {
          "id": 1,
          "label": "class MainApp(AppProcess):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "app.main(silent=True)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "\"\"\"\nThe command line interface for the agent server\n\"\"\"\n\nimport os\nimport pathlib\n\nimport click\nimport psutil\n\nfrom backend import app\nfrom backend.util.process import AppProcess\n\n\n    return file_path\n\n\n        return None\n\n\n        file.write(str(pid))\n\n\n        app.main(silent=True)\n\n\n@click.group()\n    pass\n\n\n@main.command()\n    os._exit(status=0)\n\n\n@main.command()\n    print(\"Server Stopped\")\n\n\n@main.command()\n    print(Fernet.generate_key().decode())\n\n\n@click.group()\n    pass\n\n\n@test.command()\n@click.argument(\"server_address\")\n    print(f\"Graph created with ID: {graph_id}\")\n\n\n@test.command()\n@click.argument(\"server_address\")\n    print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")\n\n\n@test.command()\n@click.argument(\"server_address\")\n        print(f\"Response: {response.text}\")\n\n\n@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")\n    requests.post(execute_url, headers=headers, json=content)\n\n\n@test.command()\n    print(\"Event sent\")\n\n\n@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")\n    asyncio.run(send_message(server_address))\n    print(\"Testing WS\")\n\n\nmain.add_command(test)\n\nif __name__ == \"__main__\":\n    main()",
  "blocks": [
    {
      "id": 1,
      "label": "import os",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import pathlib",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import click",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import psutil",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend import app",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.util.process import AppProcess",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return file_path",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "return None",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "file.write(str(pid))",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "app.main(silent=True)",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "@click.group()",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "pass",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "@main.command()",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "os._exit(status=0)",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "@main.command()",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "print(\"Server Stopped\")",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "@main.command()",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "print(Fernet.generate_key().decode())",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "@click.group()",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": "pass",
      "successors": [
        21
      ]
    },
    {
      "id": 21,
      "label": "@test.command()",
      "successors": [
        22
      ]
    },
    {
      "id": 22,
      "label": "@click.argument(\"server_address\")",
      "successors": [
        23
      ]
    },
    {
      "id": 23,
      "label": "print(f\"Graph created with ID: {graph_id}\")",
      "successors": [
        24
      ]
    },
    {
      "id": 24,
      "label": "@test.command()",
      "successors": [
        25
      ]
    },
    {
      "id": 25,
      "label": "@click.argument(\"server_address\")",
      "successors": [
        26
      ]
    },
    {
      "id": 26,
      "label": "print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
      "successors": [
        27
      ]
    },
    {
      "id": 27,
      "label": "@test.command()",
      "successors": [
        28
      ]
    },
    {
      "id": 28,
      "label": "@click.argument(\"server_address\")",
      "successors": [
        29
      ]
    },
    {
      "id": 29,
      "label": "print(f\"Response: {response.text}\")",
      "successors": [
        30
      ]
    },
    {
      "id": 30,
      "label": "@test.command()",
      "successors": [
        31
      ]
    },
    {
      "id": 31,
      "label": "@click.argument(\"graph_id\")",
      "successors": [
        32
      ]
    },
    {
      "id": 32,
      "label": "@click.argument(\"content\")",
      "successors": [
        33
      ]
    },
    {
      "id": 33,
      "label": "requests.post(execute_url, headers=headers, json=content)",
      "successors": [
        34
      ]
    },
    {
      "id": 34,
      "label": "@test.command()",
      "successors": [
        35
      ]
    },
    {
      "id": 35,
      "label": "print(\"Event sent\")",
      "successors": [
        36
      ]
    },
    {
      "id": 36,
      "label": "@test.command()",
      "successors": [
        37
      ]
    },
    {
      "id": 37,
      "label": "@click.argument(\"server_address\")",
      "successors": [
        38
      ]
    },
    {
      "id": 38,
      "label": "@click.argument(\"graph_id\")",
      "successors": [
        39
      ]
    },
    {
      "id": 39,
      "label": "asyncio.run(send_message(server_address))",
      "successors": [
        40
      ]
    },
    {
      "id": 40,
      "label": "print(\"Testing WS\")",
      "successors": [
        41
      ]
    },
    {
      "id": 41,
      "label": "main.add_command(test)",
      "successors": [
        42
      ]
    },
    {
      "id": 42,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        43
      ]
    },
    {
      "id": 43,
      "label": "main()",
      "successors": []
    }
  ]
}