{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 101,
  "functions": [
    {
      "name": "get_valid_pos",
      "type": "function",
      "start_line": 6,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions",
      "blocks": [
        {
          "id": 1,
          "label": "y, x = position",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "positions = [\n (y + 1, x + 2),\n (y - 1, x + 2),\n (y + 1, x - 2),\n (y - 1, x - 2),\n (y + 2, x + 1),\n (y + 2, x - 1),\n (y - 2, x + 1),\n (y - 2, x - 1),\n]",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "permissible_positions = []",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "for inner_position in positions:",
          "successors": [
            5,
            7
          ]
        },
        {
          "id": 5,
          "label": "y_test, x_test = inner_position",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if 0 <= y_test < n and 0 <= x_test < n:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "permissible_positions.append(inner_position)",
          "successors": [
            4
          ]
        },
        {
          "id": 8,
          "label": "return permissible_positions",
          "successors": []
        }
      ]
    },
    {
      "name": "is_complete",
      "type": "function",
      "start_line": 35,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "def is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)",
      "blocks": [
        {
          "id": 1,
          "label": "def is_complete(board: list[list[int]]) -> bool:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return not any(elem == 0 for row in board for elem in row)",
          "successors": []
        }
      ]
    },
    {
      "name": "open_knight_tour_helper",
      "type": "function",
      "start_line": 49,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False",
      "blocks": [
        {
          "id": 1,
          "label": "if is_complete(board):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return True",
          "successors": []
        },
        {
          "id": 3,
          "label": "for position in get_valid_pos(pos, len(board)):",
          "successors": [
            4,
            7
          ]
        },
        {
          "id": 4,
          "label": "y, x = position",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if board[y][x] == 0:",
          "successors": [
            6,
            3
          ]
        },
        {
          "id": 6,
          "label": "board[y][x] = curr + 1",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if open_knight_tour_helper(board, position, curr + 1):",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "return True",
          "successors": []
        },
        {
          "id": 9,
          "label": "board[y][x] = 0",
          "successors": [
            3
          ]
        },
        {
          "id": 10,
          "label": "return False",
          "successors": []
        }
      ]
    },
    {
      "name": "open_knight_tour",
      "type": "function",
      "start_line": 71,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "simplified_code": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
      "blocks": [
        {
          "id": 1,
          "label": "def open_knight_tour(n: int) -> list[list[int]]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "board = [[0 for i in range(n)] for j in range(n)]",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "for i in range(n):",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "for j in range(n):",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "board[i][j] = 1",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if open_knight_tour_helper(board, (i, j), 1):",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "return board",
          "successors": []
        },
        {
          "id": 8,
          "label": "board[i][j] = 0",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "raise ValueError(msg)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM\n\nfrom __future__ import annotations\n\n\n    return permissible_positions\n\n\n    return not any(elem == 0 for row in board for elem in row)\n\n\n    return False\n\n\n    raise ValueError(msg)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import doctest",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}