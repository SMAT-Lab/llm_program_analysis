{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 39,
  "functions": [],
  "classes": [
    {
      "name": "TextDecoderBlock",
      "type": "class",
      "start_line": 7,
      "end_line": 39,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 19,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(\n id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n description=\"Decodes a string containing escape sequences into actual text\",\n categories={BlockCategory.TEXT},\n input_schema=TextDecoderBlock.Input,\n output_schema=TextDecoderBlock.Output,\n test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n test_output=[\n (\n \"decoded_text\",\n \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n )\n ],\n )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 37,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "decoded_text = codecs.decode(input_data.text, \"unicode_escape\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"decoded_text\", decoded_text",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "text: str = SchemaField(description=\"A string containing escaped characters to be decoded\", placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 14,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "decoded_text: str = SchemaField(description=\"The decoded text with escape sequences processed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class TextDecoderBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"decoded_text\", decoded_text",
      "blocks": [
        {
          "id": 1,
          "label": "class TextDecoderBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"decoded_text\", decoded_text",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import codecs\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n        yield \"decoded_text\", decoded_text",
  "blocks": [
    {
      "id": 1,
      "label": "import codecs",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "yield \"decoded_text\", decoded_text",
      "successors": []
    }
  ]
}