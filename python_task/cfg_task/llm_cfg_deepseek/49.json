{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "class",
      "start_line": 5,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\"",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "input_schema=ReadCsvBlock.Input",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "output_schema=ReadCsvBlock.Output",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\"",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "contributors=[ContributorDetails(name=\"Nicholas Tindle\")]",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "categories={BlockCategory.TEXT, BlockCategory.DATA}",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "test_input={\"contents\": \"a, b, c\\n1,2,3\\n4,5,6\"}",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "test_output=[(\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}), (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}), (\"all_data\", [{\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}, {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}])]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 72,
          "end_line": 109,
          "functions": [
            {
              "name": "process_row",
              "type": "function",
              "start_line": 93,
              "end_line": 101,
              "functions": [],
              "classes": [],
              "simplified_code": "        def process_row(row):\n            data = {}\n            for i, value in enumerate(row):\n                if i not in input_data.skip_columns:\n                    if input_data.has_header and header:\n                        data[header[i]] = value.strip() if input_data.strip else value\n                    else:\n                        data[str(i)] = value.strip() if input_data.strip else value\n            return data",
              "blocks": [
                {
                  "id": 1,
                  "label": "def process_row(row):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "data = {}",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "for i, value in enumerate(row):",
                  "successors": [
                    4,
                    9
                  ]
                },
                {
                  "id": 4,
                  "label": "if i not in input_data.skip_columns:",
                  "successors": [
                    5,
                    8
                  ]
                },
                {
                  "id": 5,
                  "label": "if input_data.has_header and header:",
                  "successors": [
                    6,
                    7
                  ]
                },
                {
                  "id": 6,
                  "label": "data[header[i]] = value.strip() if input_data.strip else value",
                  "successors": [
                    8
                  ]
                },
                {
                  "id": 7,
                  "label": "data[str(i)] = value.strip() if input_data.strip else value",
                  "successors": [
                    8
                  ]
                },
                {
                  "id": 8,
                  "label": "continue",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 9,
                  "label": "return data",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )\n\n        header = None\n        if input_data.has_header:\n            header = next(reader)\n            if input_data.strip:\n                header = [h.strip() for h in header]\n\n        for _ in range(input_data.skip_rows):\n            next(reader)\n\n            return data\n\n        all_data = []\n        for row in reader:\n            processed_row = process_row(row)\n            all_data.append(processed_row)\n            yield \"row\", processed_row\n\n        yield \"all_data\", all_data",
          "blocks": [
            {
              "id": 1,
              "label": "import csv",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "from io import StringIO",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "csv_file = StringIO(input_data.contents)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "reader = csv.reader(csv_file, delimiter=input_data.delimiter, quotechar=input_data.quotechar, escapechar=input_data.escapechar)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "header = None",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if input_data.has_header:",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "header = next(reader)",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "if input_data.strip:",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 9,
              "label": "header = [h.strip() for h in header]",
              "successors": [
                12
              ]
            },
            {
              "id": 10,
              "label": "for _ in range(input_data.skip_rows):",
              "successors": [
                13,
                14
              ]
            },
            {
              "id": 11,
              "label": "next(reader)",
              "successors": [
                15
              ]
            },
            {
              "id": 12,
              "label": "return data",
              "successors": []
            },
            {
              "id": 13,
              "label": "all_data = []",
              "successors": [
                16
              ]
            },
            {
              "id": 14,
              "label": "for row in reader:",
              "successors": [
                17,
                18
              ]
            },
            {
              "id": 15,
              "label": "processed_row = process_row(row)",
              "successors": [
                19
              ]
            },
            {
              "id": 16,
              "label": "all_data.append(processed_row)",
              "successors": [
                20
              ]
            },
            {
              "id": 17,
              "label": "yield \"row\", processed_row",
              "successors": [
                21
              ]
            },
            {
              "id": 18,
              "label": "yield \"all_data\", all_data",
              "successors": []
            },
            {
              "id": 19,
              "label": "yield \"row\", processed_row",
              "successors": [
                22
              ]
            },
            {
              "id": 20,
              "label": "yield \"all_data\", all_data",
              "successors": []
            },
            {
              "id": 21,
              "label": "yield \"all_data\", all_data",
              "successors": []
            },
            {
              "id": 22,
              "label": "yield \"all_data\", all_data",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 6,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        contents: str = SchemaField(\n            description=\"The contents of the CSV file to read\",\n            placeholder=\"a, b, c\\n1,2,3\\n4,5,6\",\n        )\n        delimiter: str = SchemaField(\n            description=\"The delimiter used in the CSV file\",\n            default=\",\",\n        )\n        quotechar: str = SchemaField(\n            description=\"The character used to quote fields\",\n            default='\"',\n        )\n        escapechar: str = SchemaField(\n            description=\"The character used to escape the delimiter\",\n            default=\"\\\\\",\n        )\n        has_header: bool = SchemaField(\n            description=\"Whether the CSV file has a header row\",\n            default=True,\n        )\n        skip_rows: int = SchemaField(\n            description=\"The number of rows to skip from the start of the file\",\n            default=0,\n        )\n        strip: bool = SchemaField(\n            description=\"Whether to strip whitespace from the values\",\n            default=True,\n        )\n        skip_columns: list[str] = SchemaField(\n            description=\"The columns to skip from the start of the row\",\n            default=[],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "contents: str = SchemaField(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "delimiter: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "quotechar: str = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "escapechar: str = SchemaField(...)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "has_header: bool = SchemaField(...)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "skip_rows: int = SchemaField(...)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "strip: bool = SchemaField(...)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "skip_columns: list[str] = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        row: dict[str, str] = SchemaField(\n            description=\"The data produced from each row in the CSV file\"\n        )\n        all_data: list[dict[str, str]] = SchemaField(\n            description=\"All the data in the CSV file as a list of rows\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "row: dict[str, str] = SchemaField(description=\"The data produced from each row in the CSV file\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "all_data: list[dict[str, str]] = SchemaField(description=\"All the data in the CSV file as a list of rows\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ReadCsvBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"all_data\", all_data",
      "blocks": [
        {
          "id": 1,
          "label": "class ReadCsvBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"all_data\", all_data",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ContributorDetails, SchemaField\n\n\n        yield \"all_data\", all_data",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from backend.data.model import ContributorDetails, SchemaField",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "yield \"all_data\", all_data",
      "successors": []
    }
  ]
}