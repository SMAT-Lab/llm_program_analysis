{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 121,
  "functions": [],
  "classes": [
    {
      "name": "HubSpotEngagementBlock",
      "type": "class",
      "start_line": 13,
      "end_line": 121,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 37,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"c6524385-7d87-49d6-a470-248bd29ca765\",\n            description=\"Manages HubSpot engagements - sends emails and tracks engagement metrics\",\n            categories={BlockCategory.CRM, BlockCategory.COMMUNICATION},\n            input_schema=HubSpotEngagementBlock.Input,\n            output_schema=HubSpotEngagementBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"c6524385-7d87-49d6-a470-248bd29ca765\", description=\"Manages HubSpot engagements - sends emails and tracks engagement metrics\", categories={BlockCategory.CRM, BlockCategory.COMMUNICATION}, input_schema=HubSpotEngagementBlock.Input, output_schema=HubSpotEngagementBlock.Output)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 46,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n        base_url = \"https://api.hubapi.com\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        if input_data.operation == \"send_email\":\n            # Using the email send API\n            email_url = f\"{base_url}/crm/v3/objects/emails\"\n            email_data = {\n                \"properties\": {\n                    \"hs_timestamp\": datetime.now().isoformat(),\n                    \"hubspot_owner_id\": \"1\",  # This should be configurable\n                    \"hs_email_direction\": \"OUTBOUND\",\n                    \"hs_email_status\": \"SEND\",\n                    \"hs_email_subject\": input_data.email_data.get(\"subject\"),\n                    \"hs_email_text\": input_data.email_data.get(\"content\"),\n                    \"hs_email_to_email\": input_data.email_data.get(\"recipient\"),\n                }\n            }\n\n            response = requests.post(email_url, headers=headers, json=email_data)\n            result = response.json()\n            yield \"result\", result\n            yield \"status\", \"email_sent\"\n\n        elif input_data.operation == \"track_engagement\":\n            # Get engagement events for the contact\n            from_date = datetime.now() - timedelta(days=input_data.timeframe_days)\n            engagement_url = (\n                f\"{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement\"\n            )\n\n            params = {\"limit\": 100, \"after\": from_date.isoformat()}\n\n            response = requests.get(engagement_url, headers=headers, params=params)\n            engagements = response.json()\n\n            # Process engagement metrics\n            metrics = {\n                \"email_opens\": 0,\n                \"email_clicks\": 0,\n                \"email_replies\": 0,\n                \"last_engagement\": None,\n                \"engagement_score\": 0,\n            }\n\n            for engagement in engagements.get(\"results\", []):\n                eng_type = engagement.get(\"properties\", {}).get(\"hs_engagement_type\")\n                if eng_type == \"EMAIL\":\n                    metrics[\"email_opens\"] += 1\n                elif eng_type == \"EMAIL_CLICK\":\n                    metrics[\"email_clicks\"] += 1\n                elif eng_type == \"EMAIL_REPLY\":\n                    metrics[\"email_replies\"] += 1\n\n                # Update last engagement time\n                eng_time = engagement.get(\"properties\", {}).get(\"hs_timestamp\")\n                if eng_time and (\n                    not metrics[\"last_engagement\"]\n                    or eng_time > metrics[\"last_engagement\"]\n                ):\n                    metrics[\"last_engagement\"] = eng_time\n\n            # Calculate simple engagement score\n            metrics[\"engagement_score\"] = (\n                metrics[\"email_opens\"]\n                + metrics[\"email_clicks\"] * 2\n                + metrics[\"email_replies\"] * 3\n            )\n\n            yield \"result\", metrics\n            yield \"status\", \"engagement_tracked\"",
          "blocks": [
            {
              "id": 1,
              "label": "base_url = \"https://api.hubapi.com\"",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "headers = {\"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\", \"Content-Type\": \"application/json\"}",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if input_data.operation == \"send_email\":",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "email_url = f\"{base_url}/crm/v3/objects/emails\"",
              "successors": [
                6
              ]
            },
            {
              "id": 5,
              "label": "elif input_data.operation == \"track_engagement\":",
              "successors": [
                7
              ]
            },
            {
              "id": 6,
              "label": "email_data = {\"properties\": {\"hs_timestamp\": datetime.now().isoformat(), \"hubspot_owner_id\": \"1\", \"hs_email_direction\": \"OUTBOUND\", \"hs_email_status\": \"SEND\", \"hs_email_subject\": input_data.email_data.get(\"subject\"), \"hs_email_text\": input_data.email_data.get(\"content\"), \"hs_email_to_email\": input_data.email_data.get(\"recipient\")}}",
              "successors": [
                8
              ]
            },
            {
              "id": 7,
              "label": "from_date = datetime.now() - timedelta(days=input_data.timeframe_days)",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "response = requests.post(email_url, headers=headers, json=email_data)",
              "successors": [
                10
              ]
            },
            {
              "id": 9,
              "label": "engagement_url = f\"{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement\"",
              "successors": [
                11
              ]
            },
            {
              "id": 10,
              "label": "result = response.json()",
              "successors": [
                12
              ]
            },
            {
              "id": 11,
              "label": "params = {\"limit\": 100, \"after\": from_date.isoformat()}",
              "successors": [
                13
              ]
            },
            {
              "id": 12,
              "label": "yield \"result\", result",
              "successors": [
                14
              ]
            },
            {
              "id": 13,
              "label": "response = requests.get(engagement_url, headers=headers, params=params)",
              "successors": [
                15
              ]
            },
            {
              "id": 14,
              "label": "yield \"status\", \"email_sent\"",
              "successors": []
            },
            {
              "id": 15,
              "label": "engagements = response.json()",
              "successors": [
                16
              ]
            },
            {
              "id": 16,
              "label": "metrics = {\"email_opens\": 0, \"email_clicks\": 0, \"email_replies\": 0, \"last_engagement\": None, \"engagement_score\": 0}",
              "successors": [
                17
              ]
            },
            {
              "id": 17,
              "label": "for engagement in engagements.get(\"results\", []):",
              "successors": [
                18,
                19
              ]
            },
            {
              "id": 18,
              "label": "eng_type = engagement.get(\"properties\", {}).get(\"hs_engagement_type\")",
              "successors": [
                20
              ]
            },
            {
              "id": 19,
              "label": "yield \"result\", metrics",
              "successors": [
                21
              ]
            },
            {
              "id": 20,
              "label": "if eng_type == \"EMAIL\":",
              "successors": [
                22,
                23
              ]
            },
            {
              "id": 21,
              "label": "yield \"status\", \"engagement_tracked\"",
              "successors": []
            },
            {
              "id": 22,
              "label": "metrics[\"email_opens\"] += 1",
              "successors": [
                24
              ]
            },
            {
              "id": 23,
              "label": "elif eng_type == \"EMAIL_CLICK\":",
              "successors": [
                25,
                26
              ]
            },
            {
              "id": 24,
              "label": "eng_time = engagement.get(\"properties\", {}).get(\"hs_timestamp\")",
              "successors": [
                27
              ]
            },
            {
              "id": 25,
              "label": "metrics[\"email_clicks\"] += 1",
              "successors": [
                24
              ]
            },
            {
              "id": 26,
              "label": "elif eng_type == \"EMAIL_REPLY\":",
              "successors": [
                28,
                29
              ]
            },
            {
              "id": 27,
              "label": "if eng_time and (not metrics[\"last_engagement\"] or eng_time > metrics[\"last_engagement\"]):",
              "successors": [
                30,
                31
              ]
            },
            {
              "id": 28,
              "label": "metrics[\"email_replies\"] += 1",
              "successors": [
                24
              ]
            },
            {
              "id": 29,
              "label": "metrics[\"engagement_score\"] = metrics[\"email_opens\"] + metrics[\"email_clicks\"] * 2 + metrics[\"email_replies\"] * 3",
              "successors": [
                19
              ]
            },
            {
              "id": 30,
              "label": "metrics[\"last_engagement\"] = eng_time",
              "successors": [
                31
              ]
            },
            {
              "id": 31,
              "label": "metrics[\"engagement_score\"] = metrics[\"email_opens\"] + metrics[\"email_clicks\"] * 2 + metrics[\"email_replies\"] * 3",
              "successors": [
                19
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 14,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(\n            description=\"Operation to perform (send_email, track_engagement)\",\n            default=\"send_email\",\n        )\n        email_data: dict = SchemaField(\n            description=\"Email data including recipient, subject, content\",\n            default={},\n        )\n        contact_id: str = SchemaField(\n            description=\"Contact ID for engagement tracking\", default=\"\"\n        )\n        timeframe_days: int = SchemaField(\n            description=\"Number of days to look back for engagement\",\n            default=30,\n            optional=True,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: HubSpotCredentialsInput = HubSpotCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "operation: str = SchemaField(description=\"Operation to perform (send_email, track_engagement)\", default=\"send_email\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "email_data: dict = SchemaField(description=\"Email data including recipient, subject, content\", default={},)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "contact_id: str = SchemaField(description=\"Contact ID for engagement tracking\", default=\"\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "timeframe_days: int = SchemaField(description=\"Number of days to look back for engagement\", default=30, optional=True,)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 33,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: dict = SchemaField(description=\"Operation result\")\n        status: str = SchemaField(description=\"Operation status\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: dict = SchemaField(description=\"Operation result\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "status: str = SchemaField(description=\"Operation status\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class HubSpotEngagementBlock(Block):\n        )\n\n        status: str = SchemaField(description=\"Operation status\")\n\n        )\n\n            yield \"status\", \"engagement_tracked\"",
      "blocks": [
        {
          "id": 1,
          "label": "class HubSpotEngagementBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "status: str = SchemaField(description=\"Operation status\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "yield \"status\", \"engagement_tracked\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from datetime import datetime, timedelta\n\nfrom backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n            yield \"status\", \"engagement_tracked\"",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime, timedelta",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from backend.blocks.hubspot._auth import (HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput)",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.util.request import requests",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "yield \"status\", \"engagement_tracked\"",
      "successors": []
    }
  ]
}