{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [
    {
      "name": "match_word_pattern",
      "type": "function",
      "start_line": 1,
      "end_line": 55,
      "functions": [
        {
          "name": "backtrack",
          "type": "function",
          "start_line": 19,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False",
          "blocks": [
            {
              "id": 1,
              "label": "if pattern_index == len(pattern) and str_index == len(input_string):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "return True",
              "successors": []
            },
            {
              "id": 3,
              "label": "if pattern_index == len(pattern) or str_index == len(input_string):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "return False",
              "successors": []
            },
            {
              "id": 5,
              "label": "char = pattern[pattern_index]",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if char in pattern_map:",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "mapped_str = pattern_map[char]",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "if input_string.startswith(mapped_str, str_index):",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 10,
              "label": "return backtrack(pattern_index + 1, str_index + len(mapped_str))",
              "successors": []
            },
            {
              "id": 11,
              "label": "return False",
              "successors": []
            },
            {
              "id": 8,
              "label": "for end in range(str_index + 1, len(input_string) + 1):",
              "successors": [
                12,
                13
              ]
            },
            {
              "id": 12,
              "label": "substr = input_string[str_index:end]",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "if substr in str_map:",
              "successors": [
                15,
                16
              ]
            },
            {
              "id": 15,
              "label": "continue",
              "successors": [
                8
              ]
            },
            {
              "id": 16,
              "label": "pattern_map[char] = substr",
              "successors": [
                17
              ]
            },
            {
              "id": 17,
              "label": "str_map[substr] = char",
              "successors": [
                18
              ]
            },
            {
              "id": 18,
              "label": "if backtrack(pattern_index + 1, end):",
              "successors": [
                19,
                20
              ]
            },
            {
              "id": 19,
              "label": "return True",
              "successors": []
            },
            {
              "id": 20,
              "label": "del pattern_map[char]",
              "successors": [
                21
              ]
            },
            {
              "id": 21,
              "label": "del str_map[substr]",
              "successors": [
                8
              ]
            },
            {
              "id": 13,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n        return False\n\n    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n    return backtrack(0, 0)",
      "blocks": [
        {
          "id": 1,
          "label": "def match_word_pattern(pattern: str, input_string: str) -> bool:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "pattern_map: dict[str, str] = {}",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "str_map: dict[str, str] = {}",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return backtrack(0, 0)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "    return backtrack(0, 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "return backtrack(0, 0)",
      "successors": []
    },
    {
      "id": 2,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import doctest",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}