{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 38,
  "functions": [],
  "classes": [
    {
      "name": "Item",
      "type": "class",
      "start_line": 1,
      "end_line": 5,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 3,
          "end_line": 5,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, key, value):\n        self.key = key\n        self.value = value",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, key, value):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.key = key",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.value = value",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Item(object):\n\n        self.value = value",
      "blocks": [
        {
          "id": 1,
          "label": "class Item(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.value = value",
          "successors": []
        }
      ]
    },
    {
      "name": "HashTable",
      "type": "class",
      "start_line": 8,
      "end_line": 38,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, size):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.size = size",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.table = [[] for _ in range(self.size)]",
              "successors": []
            }
          ]
        },
        {
          "name": "_hash_function",
          "type": "function",
          "start_line": 14,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _hash_function(self, key):\n        return key % self.size",
          "blocks": [
            {
              "id": 1,
              "label": "def _hash_function(self, key):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return key % self.size",
              "successors": []
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 17,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))",
          "blocks": [
            {
              "id": 1,
              "label": "hash_index = self._hash_function(key)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for item in self.table[hash_index]:",
              "successors": [
                3,
                5
              ]
            },
            {
              "id": 3,
              "label": "if item.key == key:",
              "successors": [
                4,
                2
              ]
            },
            {
              "id": 4,
              "label": "item.value = value\nreturn",
              "successors": []
            },
            {
              "id": 5,
              "label": "self.table[hash_index].append(Item(key, value))",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')",
          "blocks": [
            {
              "id": 1,
              "label": "hash_index = self._hash_function(key)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for item in self.table[hash_index]:",
              "successors": [
                3,
                5
              ]
            },
            {
              "id": 3,
              "label": "if item.key == key:",
              "successors": [
                4,
                2
              ]
            },
            {
              "id": 4,
              "label": "return item.value",
              "successors": []
            },
            {
              "id": 5,
              "label": "raise KeyError('Key not found')",
              "successors": []
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "start_line": 32,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')",
          "blocks": [
            {
              "id": 1,
              "label": "hash_index = self._hash_function(key)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for index, item in enumerate(self.table[hash_index]):",
              "successors": [
                3,
                6
              ]
            },
            {
              "id": 3,
              "label": "if item.key == key:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "del self.table[hash_index][index]",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "return",
              "successors": []
            },
            {
              "id": 6,
              "label": "raise KeyError('Key not found')",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class HashTable(object):\n\n        self.table = [[] for _ in range(self.size)]\n\n        return key % self.size\n\n        self.table[hash_index].append(Item(key, value))\n\n        raise KeyError('Key not found')\n\n        raise KeyError('Key not found')",
      "blocks": [
        {
          "id": 1,
          "label": "class HashTable(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.table = [[] for _ in range(self.size)]",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return key % self.size",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self.table[hash_index].append(Item(key, value))",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "raise KeyError('Key not found')",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "raise KeyError('Key not found')",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "        self.value = value\n\n\n        raise KeyError('Key not found')",
  "blocks": [
    {
      "id": 1,
      "label": "self.value = value",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "raise KeyError('Key not found')",
      "successors": []
    }
  ]
}