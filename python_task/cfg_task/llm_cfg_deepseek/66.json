{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 123,
  "functions": [
    {
      "name": "get_service_name",
      "type": "function",
      "start_line": 16,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_service_name():\n    return _SERVICE_NAME",
      "blocks": [
        {
          "id": 1,
          "label": "def get_service_name():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return _SERVICE_NAME",
          "successors": []
        }
      ]
    },
    {
      "name": "set_service_name",
      "type": "function",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name",
      "blocks": [
        {
          "id": 1,
          "label": "def set_service_name(name: str):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global _SERVICE_NAME",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_SERVICE_NAME = name",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AppProcess",
      "type": "class",
      "start_line": 25,
      "end_line": 123,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 39,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "service_name",
          "type": "function",
          "start_line": 47,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    def service_name(cls) -> str:\n        return cls.__name__",
          "blocks": [
            {
              "id": 1,
              "label": "def service_name(cls) -> str:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return cls.__name__",
              "successors": []
            }
          ]
        },
        {
          "name": "cleanup",
          "type": "function",
          "start_line": 50,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def cleanup(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "health_check",
          "type": "function",
          "start_line": 57,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def health_check(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "execute_run_command",
          "type": "function",
          "start_line": 63,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
          "blocks": [
            {
              "id": 1,
              "label": "signal.signal(signal.SIGTERM, self._self_terminate)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "try:",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if silent:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "sys.stdout = open(os.devnull, \"w\")\nsys.stderr = open(os.devnull, \"w\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "set_service_name(self.service_name)\nlogger.info(f\"[{self.service_name}] Starting...\")\nself.run()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "except (KeyboardInterrupt, SystemExit) as e:",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
              "successors": []
            }
          ]
        },
        {
          "name": "_self_terminate",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)",
          "blocks": [
            {
              "id": 1,
              "label": "def _self_terminate(self, signum: int, frame):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.cleanup()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "sys.exit(0)",
              "successors": []
            }
          ]
        },
        {
          "name": "__enter__",
          "type": "function",
          "start_line": 83,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __enter__(self):\n        self.start(background=True)\n        return self",
          "blocks": [
            {
              "id": 1,
              "label": "def __enter__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.start(background=True)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return self",
              "successors": []
            }
          ]
        },
        {
          "name": "__exit__",
          "type": "function",
          "start_line": 87,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __exit__(self, *args, **kwargs):\n        self.stop()",
          "blocks": [
            {
              "id": 1,
              "label": "def __exit__(self, *args, **kwargs):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.stop()",
              "successors": []
            }
          ]
        },
        {
          "name": "start",
          "type": "function",
          "start_line": 90,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0",
          "blocks": [
            {
              "id": 1,
              "label": "if not background:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "self.execute_run_command(silent)",
              "successors": [
                4
              ]
            },
            {
              "id": 3,
              "label": "self.process = Process(name=self.__class__.__name__, target=self.execute_run_command, args=(silent,), **proc_args,)",
              "successors": [
                5
              ]
            },
            {
              "id": 4,
              "label": "return 0",
              "successors": []
            },
            {
              "id": 5,
              "label": "self.process.start()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "self.health_check()",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return self.process.pid or 0",
              "successors": []
            }
          ]
        },
        {
          "name": "stop",
          "type": "function",
          "start_line": 114,
          "end_line": 123,
          "functions": [],
          "classes": [],
          "simplified_code": "    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
          "blocks": [
            {
              "id": 1,
              "label": "if not self.process:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "return",
              "successors": []
            },
            {
              "id": 3,
              "label": "self.process.terminate()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.process.join()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.process = None",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n        pass\n\n    @classmethod\n    @property\n        return cls.__name__\n\n        pass\n\n        pass\n\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n\n        sys.exit(0)\n\n    # Methods that are executed OUTSIDE the process #\n\n        return self\n\n        self.stop()\n\n        return self.process.pid or 0\n\n        self.process = None",
      "blocks": [
        {
          "id": 1,
          "label": "class AppProcess(ABC):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "process: Optional[Process] = None",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "set_start_method(\"spawn\", force=True)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "configure_logging()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "sentry_init()",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "@abstractmethod",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "pass",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "@classmethod",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "@property",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return cls.__name__",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "pass",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "pass",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "sys.exit(0)",
          "successors": []
        },
        {
          "id": 15,
          "label": "return self",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "self.stop()",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "return self.process.pid or 0",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "self.process = None",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"\n\n\n    return _SERVICE_NAME\n\n\n    _SERVICE_NAME = name\n\n\n        self.process = None",
  "blocks": [
    {
      "id": 1,
      "label": "import statements and variable initializations",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "_SERVICE_NAME = \"MainProcess\"",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "return _SERVICE_NAME",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "_SERVICE_NAME = name",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "self.process = None",
      "successors": []
    }
  ]
}