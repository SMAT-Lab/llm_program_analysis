{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 106,
  "functions": [],
  "classes": [
    {
      "name": "HubSpotCompanyBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 106,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 28,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3ae02219-d540-47cd-9c78-3ad6c7d9820a\",\n            description=\"Manages HubSpot companies - create, update, and retrieve company information\",\n            categories={BlockCategory.CRM},\n            input_schema=HubSpotCompanyBlock.Input,\n            output_schema=HubSpotCompanyBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(\n id=\"3ae02219-d540-47cd-9c78-3ad6c7d9820a\",\n description=\"Manages HubSpot companies - create, update, and retrieve company information\",\n categories={BlockCategory.CRM},\n input_schema=HubSpotCompanyBlock.Input,\n output_schema=HubSpotCompanyBlock.Output,\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 37,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n        base_url = \"https://api.hubapi.com/crm/v3/objects/companies\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        if input_data.operation == \"create\":\n            response = requests.post(\n                base_url, headers=headers, json={\"properties\": input_data.company_data}\n            )\n            result = response.json()\n            yield \"company\", result\n            yield \"status\", \"created\"\n\n        elif input_data.operation == \"get\":\n            search_url = f\"{base_url}/search\"\n            search_data = {\n                \"filterGroups\": [\n                    {\n                        \"filters\": [\n                            {\n                                \"propertyName\": \"domain\",\n                                \"operator\": \"EQ\",\n                                \"value\": input_data.domain,\n                            }\n                        ]\n                    }\n                ]\n            }\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield \"company\", result.get(\"results\", [{}])[0]\n            yield \"status\", \"retrieved\"\n\n        elif input_data.operation == \"update\":\n            # First get company ID by domain\n            search_response = requests.post(\n                f\"{base_url}/search\",\n                headers=headers,\n                json={\n                    \"filterGroups\": [\n                        {\n                            \"filters\": [\n                                {\n                                    \"propertyName\": \"domain\",\n                                    \"operator\": \"EQ\",\n                                    \"value\": input_data.domain,\n                                }\n                            ]\n                        }\n                    ]\n                },\n            )\n            company_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")\n\n            if company_id:\n                response = requests.patch(\n                    f\"{base_url}/{company_id}\",\n                    headers=headers,\n                    json={\"properties\": input_data.company_data},\n                )\n                result = response.json()\n                yield \"company\", result\n                yield \"status\", \"updated\"\n            else:\n                yield \"company\", {}\n                yield \"status\", \"company_not_found\"",
          "blocks": [
            {
              "id": 1,
              "label": "base_url = \"https://api.hubapi.com/crm/v3/objects/companies\"",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "headers = {\"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\", \"Content-Type\": \"application/json\"}",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if input_data.operation == \"create\":",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "response = requests.post(base_url, headers=headers, json={\"properties\": input_data.company_data})",
              "successors": [
                6
              ]
            },
            {
              "id": 5,
              "label": "elif input_data.operation == \"get\":",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 6,
              "label": "result = response.json()",
              "successors": [
                9
              ]
            },
            {
              "id": 7,
              "label": "search_url = f\"{base_url}/search\"",
              "successors": [
                10
              ]
            },
            {
              "id": 8,
              "label": "elif input_data.operation == \"update\":",
              "successors": [
                11,
                12
              ]
            },
            {
              "id": 9,
              "label": "yield \"company\", result",
              "successors": [
                13
              ]
            },
            {
              "id": 10,
              "label": "search_data = {\"filterGroups\": [{\"filters\": [{\"propertyName\": \"domain\", \"operator\": \"EQ\", \"value\": input_data.domain}]}]}",
              "successors": [
                14
              ]
            },
            {
              "id": 11,
              "label": "search_response = requests.post(f\"{base_url}/search\", headers=headers, json={\"filterGroups\": [{\"filters\": [{\"propertyName\": \"domain\", \"operator\": \"EQ\", \"value\": input_data.domain}]}]})",
              "successors": [
                15
              ]
            },
            {
              "id": 12,
              "label": "else:",
              "successors": [
                16
              ]
            },
            {
              "id": 13,
              "label": "yield \"status\", \"created\"",
              "successors": []
            },
            {
              "id": 14,
              "label": "response = requests.post(search_url, headers=headers, json=search_data)",
              "successors": [
                17
              ]
            },
            {
              "id": 15,
              "label": "company_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")",
              "successors": [
                18
              ]
            },
            {
              "id": 16,
              "label": "yield \"company\", {}",
              "successors": [
                19
              ]
            },
            {
              "id": 17,
              "label": "result = response.json()",
              "successors": [
                20
              ]
            },
            {
              "id": 18,
              "label": "if company_id:",
              "successors": [
                21,
                22
              ]
            },
            {
              "id": 19,
              "label": "yield \"status\", \"company_not_found\"",
              "successors": []
            },
            {
              "id": 20,
              "label": "yield \"company\", result.get(\"results\", [{}])[0]",
              "successors": [
                23
              ]
            },
            {
              "id": 21,
              "label": "response = requests.patch(f\"{base_url}/{company_id}\", headers=headers, json={\"properties\": input_data.company_data})",
              "successors": [
                24
              ]
            },
            {
              "id": 22,
              "label": "else:",
              "successors": [
                16
              ]
            },
            {
              "id": 23,
              "label": "yield \"status\", \"retrieved\"",
              "successors": []
            },
            {
              "id": 24,
              "label": "result = response.json()",
              "successors": [
                25
              ]
            },
            {
              "id": 25,
              "label": "yield \"company\", result",
              "successors": [
                26
              ]
            },
            {
              "id": 26,
              "label": "yield \"status\", \"updated\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 12,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(\n            description=\"Operation to perform (create, update, get)\", default=\"get\"\n        )\n        company_data: dict = SchemaField(\n            description=\"Company data for create/update operations\", default={}\n        )\n        domain: str = SchemaField(\n            description=\"Company domain for get/update operations\", default=\"\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: HubSpotCredentialsInput = HubSpotCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "operation: str = SchemaField(description=\"Operation to perform (create, update, get)\", default=\"get\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "company_data: dict = SchemaField(description=\"Company data for create/update operations\", default={})",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "domain: str = SchemaField(description=\"Company domain for get/update operations\", default=\"\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        company: dict = SchemaField(description=\"Company information\")\n        status: str = SchemaField(description=\"Operation status\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "company: dict = SchemaField(description=\"Company information\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "status: str = SchemaField(description=\"Operation status\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class HubSpotCompanyBlock(Block):\n        )\n\n        status: str = SchemaField(description=\"Operation status\")\n\n        )\n\n                yield \"status\", \"company_not_found\"",
      "blocks": [
        {
          "id": 1,
          "label": "class HubSpotCompanyBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "status: str = SchemaField(description=\"Operation status\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "yield \"status\", \"company_not_found\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n                yield \"status\", \"company_not_found\"",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.blocks.hubspot._auth import (HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput)",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.util.request import requests",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "yield \"status\", \"company_not_found\"",
      "successors": []
    }
  ]
}