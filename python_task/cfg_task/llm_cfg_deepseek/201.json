{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [
    {
      "name": "get_bounds",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest",
      "blocks": [
        {
          "id": 1,
          "label": "lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return lowest, highest",
          "successors": []
        }
      ]
    },
    {
      "name": "show_frequency_response",
      "type": "function",
      "start_line": 38,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()",
      "blocks": [
        {
          "id": 1,
          "label": "size = 512",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "inputs = [1] + [0] * (size - 1)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "outputs = [filter_type.process(item) for item in inputs]",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "filler = [0] * (samplerate - size)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "outputs += filler",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "fft_out = np.abs(np.fft.fft(outputs))",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "fft_db = 20 * np.log10(fft_out)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "plt.xlim(24, samplerate / 2 - 1)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "plt.xlabel(\"Frequency (Hz)\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "plt.xscale(\"log\")",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "bounds = get_bounds(fft_db, samplerate)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "plt.ylabel(\"Gain (dB)\")",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "plt.plot(fft_db)",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "plt.show()",
          "successors": []
        }
      ]
    },
    {
      "name": "show_phase_response",
      "type": "function",
      "start_line": 70,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "simplified_code": "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
      "blocks": [
        {
          "id": 1,
          "label": "size = 512",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "inputs = [1] + [0] * (size - 1)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "outputs = [filter_type.process(item) for item in inputs]",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "filler = [0] * (samplerate - size)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "outputs += filler",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "fft_out = np.angle(np.fft.fft(outputs))",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "plt.xlim(24, samplerate / 2 - 1)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "plt.xlabel(\"Frequency (Hz)\")",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "plt.xscale(\"log\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "plt.ylim(-2 * pi, 2 * pi)",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "plt.ylabel(\"Phase shift (Radians)\")",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "plt.plot(np.unwrap(fft_out, -2 * pi))",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "plt.show()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "FilterType",
      "type": "class",
      "start_line": 11,
      "end_line": 19,
      "functions": [
        {
          "name": "process",
          "type": "function",
          "start_line": 13,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
          "blocks": [
            {
              "id": 1,
              "label": "def process(self, sample: float) -> float:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "Calculate y[n]",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": ">>> issubclass(FilterType, Protocol)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "True",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class FilterType(Protocol):\n    @abstractmethod\n        \"\"\"",
      "blocks": [
        {
          "id": 1,
          "label": "class FilterType(Protocol):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "@abstractmethod",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "\"\"\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from __future__ import annotations\n\nfrom abc import abstractmethod\nfrom math import pi\nfrom typing import Protocol\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n        \"\"\"\n\n\n    return lowest, highest\n\n\n    plt.show()\n\n\n    plt.show()",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from abc import abstractmethod",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from math import pi",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from typing import Protocol",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "import matplotlib.pyplot as plt",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "import numpy as np",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return lowest, highest",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "plt.show()",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "plt.show()",
      "successors": []
    }
  ]
}