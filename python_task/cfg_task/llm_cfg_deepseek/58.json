{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ComparisonOperator",
      "type": "class",
      "start_line": 8,
      "end_line": 14,
      "functions": [],
      "simplified_code": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ComparisonOperator(Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "EQUAL = \"==\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "NOT_EQUAL = \"!=\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "GREATER_THAN = \">\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "LESS_THAN = \"<\"",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "GREATER_THAN_OR_EQUAL = \">=\"",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "LESS_THAN_OR_EQUAL = \"<=\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ConditionBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 53,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 73,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n\n        value1 = input_data.value1\n        if isinstance(value1, str):\n            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n\n        value2 = input_data.value2\n        if isinstance(value2, str):\n            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n\n        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n\n        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n\n        result = comparison_funcs[operator](value1, value2)\n\n        yield \"result\", result\n\n        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value",
          "blocks": [
            {
              "id": 1,
              "label": "operator = input_data.operator",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "value1 = input_data.value1",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if isinstance(value1, str):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "try: value1 = float(value1.strip())",
              "successors": [
                6
              ]
            },
            {
              "id": 5,
              "label": "except ValueError: value1 = value1.strip()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "value2 = input_data.value2",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "if isinstance(value2, str):",
              "successors": [
                8,
                9
              ]
            },
            {
              "id": 8,
              "label": "try: value2 = float(value2.strip())",
              "successors": [
                10
              ]
            },
            {
              "id": 9,
              "label": "except ValueError: value2 = value2.strip()",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "yes_value = input_data.yes_value if input_data.yes_value is not None else value1",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "no_value = input_data.no_value if input_data.no_value is not None else value2",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "comparison_funcs = {...}",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "result = comparison_funcs[operator](value1, value2)",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "yield 'result', result",
              "successors": [
                15
              ]
            },
            {
              "id": 15,
              "label": "if result:",
              "successors": [
                16,
                17
              ]
            },
            {
              "id": 16,
              "label": "yield 'yes_output', yes_value",
              "successors": []
            },
            {
              "id": 17,
              "label": "yield 'no_output', no_value",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 40,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "value1: Any = SchemaField(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "operator: ComparisonOperator = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "value2: Any = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yes_value: Any = SchemaField(...)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "no_value: Any = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 42,
          "end_line": 51,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: bool = SchemaField(description=\"The result of the condition evaluation (True or False)\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yes_output: Any = SchemaField(description=\"The output value if the condition is true\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "no_output: Any = SchemaField(description=\"The output value if the condition is false\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ConditionBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"no_output\", no_value",
      "blocks": [
        {
          "id": 1,
          "label": "class ConditionBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"no_output\", no_value",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n    LESS_THAN_OR_EQUAL = \"<=\"\n\n\n            yield \"no_output\", no_value",
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import Any",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "LESS_THAN_OR_EQUAL = \"<=\"",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "yield \"no_output\", no_value",
      "successors": []
    }
  ]
}