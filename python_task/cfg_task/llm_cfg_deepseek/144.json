{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 14,
  "functions": [],
  "classes": [
    {
      "name": "JsonFileHandler",
      "type": "class",
      "start_line": 7,
      "end_line": 14,
      "functions": [
        {
          "name": "format",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    def format(self, record: logging.LogRecord) -> str:\n        record.json_data = json.loads(record.getMessage())\n        return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)",
          "blocks": [
            {
              "id": 1,
              "label": "record.json_data = json.loads(record.getMessage())",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)",
              "successors": []
            }
          ]
        },
        {
          "name": "emit",
          "type": "function",
          "start_line": 12,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    def emit(self, record: logging.LogRecord) -> None:\n        with open(self.baseFilename, \"w\", encoding=\"utf-8\") as f:\n            f.write(self.format(record))",
          "blocks": [
            {
              "id": 1,
              "label": "def emit(self, record: logging.LogRecord) -> None:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "with open(self.baseFilename, \"w\", encoding=\"utf-8\") as f:",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "f.write(self.format(record))",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class JsonFileHandler(logging.FileHandler):\n        return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)\n\n            f.write(self.format(record))",
      "blocks": [
        {
          "id": 1,
          "label": "class JsonFileHandler(logging.FileHandler):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "f.write(self.format(record))",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from __future__ import annotations\n\nimport json\nimport logging\n\n\n            f.write(self.format(record))",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import json",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import logging",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "f.write(self.format(record))",
      "successors": []
    }
  ]
}