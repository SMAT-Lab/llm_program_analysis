{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 328,
  "functions": [],
  "classes": [
    {
      "name": "AppEnvironment",
      "type": "class",
      "start_line": 19,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "class AppEnvironment(str, Enum):\n    LOCAL = \"local\"\n    DEVELOPMENT = \"dev\"\n    PRODUCTION = \"prod\"",
      "blocks": [
        {
          "id": 1,
          "label": "class AppEnvironment(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "LOCAL = \"local\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "DEVELOPMENT = \"dev\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "PRODUCTION = \"prod\"",
          "successors": []
        }
      ]
    },
    {
      "name": "BehaveAs",
      "type": "class",
      "start_line": 25,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "class BehaveAs(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"",
      "blocks": [
        {
          "id": 1,
          "label": "class BehaveAs(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "LOCAL = \"local\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "CLOUD = \"cloud\"",
          "successors": []
        }
      ]
    },
    {
      "name": "UpdateTrackingModel",
      "type": "class",
      "start_line": 30,
      "end_line": 50,
      "functions": [
        {
          "name": "__setattr__",
          "type": "function",
          "start_line": 33,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __setattr__(self, name: str, value) -> None:\n        if name in self.model_fields:\n            self._updated_fields.add(name)\n        super().__setattr__(name, value)",
          "blocks": [
            {
              "id": 1,
              "label": "if name in self.model_fields:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "self._updated_fields.add(name)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "super().__setattr__(name, value)",
              "successors": []
            }
          ]
        },
        {
          "name": "mark_updated",
          "type": "function",
          "start_line": 38,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    def mark_updated(self, field_name: str) -> None:\n        if field_name in self.model_fields:\n            self._updated_fields.add(field_name)",
          "blocks": [
            {
              "id": 1,
              "label": "if field_name in self.model_fields:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "self._updated_fields.add(field_name)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "end of function",
              "successors": []
            }
          ]
        },
        {
          "name": "clear_updates",
          "type": "function",
          "start_line": 42,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    def clear_updates(self) -> None:\n        self._updated_fields.clear()",
          "blocks": [
            {
              "id": 1,
              "label": "def clear_updates(self) -> None:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self._updated_fields.clear()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_updates",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}",
          "blocks": [
            {
              "id": 1,
              "label": "def get_updates(self) -> Dict[str, Any]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return {field: getattr(self, field) for field in self._updated_fields}",
              "successors": []
            }
          ]
        },
        {
          "name": "updated_fields",
          "type": "function",
          "start_line": 49,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    def updated_fields(self):\n        return self._updated_fields",
          "blocks": [
            {
              "id": 1,
              "label": "def updated_fields(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return self._updated_fields",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)\n\n        super().__setattr__(name, value)\n\n            self._updated_fields.add(field_name)\n\n        self._updated_fields.clear()\n\n        return {field: getattr(self, field) for field in self._updated_fields}\n\n    @property\n        return self._updated_fields",
      "blocks": [
        {
          "id": 1,
          "label": "class UpdateTrackingModel(BaseModel, Generic[T]):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_updated_fields: Set[str] = PrivateAttr(default_factory=set)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "super().__setattr__(name, value)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self._updated_fields.add(field_name)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "self._updated_fields.clear()",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return {field: getattr(self, field) for field in self._updated_fields}",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "@property",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return self._updated_fields",
          "successors": []
        }
      ]
    },
    {
      "name": "Config",
      "type": "class",
      "start_line": 53,
      "end_line": 234,
      "functions": [
        {
          "name": "validate_platform_base_url",
          "type": "function",
          "start_line": 158,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": "    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n        if not v:\n            return v\n        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )\n        if v.endswith(\"/\"):\n            return v.rstrip(\"/\")  # Remove trailing slash\n        return v",
          "blocks": [
            {
              "id": 1,
              "label": "if not v:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "return v",
              "successors": []
            },
            {
              "id": 3,
              "label": "if not v.startswith((\"http://\", \"https://\")):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "raise ValueError",
              "successors": []
            },
            {
              "id": 5,
              "label": "if v.endswith(\"/\"):",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "return v.rstrip(\"/\")",
              "successors": []
            },
            {
              "id": 7,
              "label": "return v",
              "successors": []
            }
          ]
        },
        {
          "name": "validate_cors_allow_origins",
          "type": "function",
          "start_line": 194,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": "    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False\n        for url in v:\n            url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):\n                if \"localhost\" in url:\n                    port = url.split(\":\")[2]\n                    has_localhost = True\n                if \"127.0.0.1\" in url:\n                    port = url.split(\":\")[2]\n                    has_127_0_0_1 = True\n                out.append(url)\n            else:\n                raise ValueError(f\"Invalid URL: {url}\")\n\n        if has_127_0_0_1 and not has_localhost:\n            out.append(f\"http://localhost:{port}\")\n        if has_localhost and not has_127_0_0_1:\n            out.append(f\"http://127.0.0.1:{port}\")\n\n        return out",
          "blocks": [
            {
              "id": 1,
              "label": "out = []",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "port = None",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "has_localhost = False",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "has_127_0_0_1 = False",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "for url in v:",
              "successors": [
                6,
                12
              ]
            },
            {
              "id": 6,
              "label": "url = url.strip()",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "if url.startswith(('http://', 'https://')):",
              "successors": [
                8,
                11
              ]
            },
            {
              "id": 8,
              "label": "if 'localhost' in url:",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "port = url.split(':')[2]",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "has_localhost = True",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "if '127.0.0.1' in url:",
              "successors": [
                12,
                13
              ]
            },
            {
              "id": 12,
              "label": "port = url.split(':')[2]",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "has_127_0_0_1 = True",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "out.append(url)",
              "successors": [
                5
              ]
            },
            {
              "id": 15,
              "label": "raise ValueError(f'Invalid URL: {url}')",
              "successors": []
            },
            {
              "id": 16,
              "label": "if has_127_0_0_1 and not has_localhost:",
              "successors": [
                17,
                18
              ]
            },
            {
              "id": 17,
              "label": "out.append(f'http://localhost:{port}')",
              "successors": [
                18
              ]
            },
            {
              "id": 18,
              "label": "if has_localhost and not has_127_0_0_1:",
              "successors": [
                19,
                20
              ]
            },
            {
              "id": 19,
              "label": "out.append(f'http://127.0.0.1:{port}')",
              "successors": [
                20
              ]
            },
            {
              "id": 20,
              "label": "return out",
              "successors": []
            }
          ]
        },
        {
          "name": "settings_customise_sources",
          "type": "function",
          "start_line": 220,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": "    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def settings_customise_sources(cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -> Tuple[PydanticBaseSettingsSource, ...]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return (env_settings, file_secret_settings, dotenv_settings, JsonConfigSettingsSource(settings_cls), init_settings,)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n\n    num_graph_workers: int = Field(\n        default=10,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for graph execution.\",\n    )\n    num_node_workers: int = Field(\n        default=5,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for node execution within a single graph.\",\n    )\n    pyro_host: str = Field(\n        default=\"localhost\",\n        description=\"The default hostname of the Pyro server.\",\n    )\n    pyro_client_comm_timeout: float = Field(\n        default=15,\n        description=\"The default timeout in seconds, for Pyro client connections.\",\n    )\n    pyro_client_comm_retry: int = Field(\n        default=3,\n        description=\"The default number of retries for Pyro client connections.\",\n    )\n    enable_auth: bool = Field(\n        default=True,\n        description=\"If authentication is enabled or not\",\n    )\n    enable_credit: str = Field(\n        default=\"false\",\n        description=\"If user credit system is enabled or not\",\n    )\n    num_user_credits_refill: int = Field(\n        default=1500,\n        description=\"Number of credits to refill for each user\",\n    )\n    # Add more configuration fields as needed\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        extra=\"allow\",\n    )\n\n    websocket_server_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for the websocket server to run on\",\n    )\n\n    websocket_server_port: int = Field(\n        default=8001,\n        description=\"The port for the websocket server to run on\",\n    )\n\n    execution_manager_port: int = Field(\n        default=8002,\n        description=\"The port for execution manager daemon to run on\",\n    )\n\n    execution_scheduler_port: int = Field(\n        default=8003,\n        description=\"The port for execution scheduler daemon to run on\",\n    )\n\n    agent_server_port: int = Field(\n        default=8004,\n        description=\"The port for agent server daemon to run on\",\n    )\n\n    database_api_port: int = Field(\n        default=8005,\n        description=\"The port for database server API to run on\",\n    )\n\n    agent_api_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for agent server API to run on\",\n    )\n\n    agent_api_port: int = Field(\n        default=8006,\n        description=\"The port for agent server API to run on\",\n    )\n\n    platform_base_url: str = Field(\n        default=\"\",\n        description=\"Must be set so the application knows where it's hosted at. \"\n        \"This is necessary to make sure webhooks find their way.\",\n    )\n\n    frontend_base_url: str = Field(\n        default=\"\",\n        description=\"Can be used to explicitly set the base URL for the frontend. \"\n        \"This value is then used to generate redirect URLs for OAuth flows.\",\n    )\n\n    media_gcs_bucket_name: str = Field(\n        default=\"\",\n        description=\"The name of the Google Cloud Storage bucket for media files\",\n    )\n\n    @field_validator(\"platform_base_url\", \"frontend_base_url\")\n    @classmethod\n        return v\n\n    app_env: AppEnvironment = Field(\n        default=AppEnvironment.LOCAL,\n        description=\"The name of the app environment: local or dev or prod\",\n    )\n\n    behave_as: BehaveAs = Field(\n        default=BehaveAs.LOCAL,\n        description=\"What environment to behave as: local or cloud\",\n    )\n\n    execution_event_bus_name: str = Field(\n        default=\"execution_event\",\n        description=\"Name of the event bus\",\n    )\n\n    trust_endpoints_for_requests: List[str] = Field(\n        default_factory=list,\n        description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\",\n    )\n\n    backend_cors_allow_origins: List[str] = Field(default_factory=list)\n\n    @field_validator(\"backend_cors_allow_origins\")\n    @classmethod\n        return out\n\n    @classmethod\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "num_graph_workers: int = Field(default=10, ge=1, le=1000, description=\"Maximum number of workers to use for graph execution.\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "num_node_workers: int = Field(default=5, ge=1, le=1000, description=\"Maximum number of workers to use for node execution within a single graph.\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "pyro_host: str = Field(default=\"localhost\", description=\"The default hostname of the Pyro server.\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "pyro_client_comm_timeout: float = Field(default=15, description=\"The default timeout in seconds, for Pyro client connections.\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "pyro_client_comm_retry: int = Field(default=3, description=\"The default number of retries for Pyro client connections.\")",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "enable_auth: bool = Field(default=True, description=\"If authentication is enabled or not\")",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "enable_credit: str = Field(default=\"false\", description=\"If user credit system is enabled or not\")",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "num_user_credits_refill: int = Field(default=1500, description=\"Number of credits to refill for each user\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "model_config = SettingsConfigDict(env_file=\".env\", extra=\"allow\")",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "websocket_server_host: str = Field(default=\"0.0.0.0\", description=\"The host for the websocket server to run on\")",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "websocket_server_port: int = Field(default=8001, description=\"The port for the websocket server to run on\")",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "execution_manager_port: int = Field(default=8002, description=\"The port for execution manager daemon to run on\")",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "execution_scheduler_port: int = Field(default=8003, description=\"The port for execution scheduler daemon to run on\")",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "agent_server_port: int = Field(default=8004, description=\"The port for agent server daemon to run on\")",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "database_api_port: int = Field(default=8005, description=\"The port for database server API to run on\")",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "agent_api_host: str = Field(default=\"0.0.0.0\", description=\"The host for agent server API to run on\")",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "agent_api_port: int = Field(default=8006, description=\"The port for agent server API to run on\")",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "platform_base_url: str = Field(default=\"\", description=\"Must be set so the application knows where it's hosted at. This is necessary to make sure webhooks find their way.\")",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "frontend_base_url: str = Field(default=\"\", description=\"Can be used to explicitly set the base URL for the frontend. This value is then used to generate redirect URLs for OAuth flows.\")",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "media_gcs_bucket_name: str = Field(default=\"\", description=\"The name of the Google Cloud Storage bucket for media files\")",
          "successors": [
            22
          ]
        },
        {
          "id": 22,
          "label": "@field_validator(\"platform_base_url\", \"frontend_base_url\")",
          "successors": [
            23
          ]
        },
        {
          "id": 23,
          "label": "@classmethod",
          "successors": [
            24
          ]
        },
        {
          "id": 24,
          "label": "return v",
          "successors": [
            25
          ]
        },
        {
          "id": 25,
          "label": "app_env: AppEnvironment = Field(default=AppEnvironment.LOCAL, description=\"The name of the app environment: local or dev or prod\")",
          "successors": [
            26
          ]
        },
        {
          "id": 26,
          "label": "behave_as: BehaveAs = Field(default=BehaveAs.LOCAL, description=\"What environment to behave as: local or cloud\")",
          "successors": [
            27
          ]
        },
        {
          "id": 27,
          "label": "execution_event_bus_name: str = Field(default=\"execution_event\", description=\"Name of the event bus\")",
          "successors": [
            28
          ]
        },
        {
          "id": 28,
          "label": "trust_endpoints_for_requests: List[str] = Field(default_factory=list, description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\")",
          "successors": [
            29
          ]
        },
        {
          "id": 29,
          "label": "backend_cors_allow_origins: List[str] = Field(default_factory=list)",
          "successors": [
            30
          ]
        },
        {
          "id": 30,
          "label": "@field_validator(\"backend_cors_allow_origins\")",
          "successors": [
            31
          ]
        },
        {
          "id": 31,
          "label": "@classmethod",
          "successors": [
            32
          ]
        },
        {
          "id": 32,
          "label": "return out",
          "successors": [
            33
          ]
        },
        {
          "id": 33,
          "label": "@classmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "Secrets",
      "type": "class",
      "start_line": 237,
      "end_line": 306,
      "functions": [],
      "classes": [],
      "simplified_code": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n\n    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n\n    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n\n    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n    # --8<-- [end:OAuthServerCredentialsExample]\n    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n\n    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n\n    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n\n    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n\n    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")\n    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n\n    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n\n    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n\n    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n\n    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n\n    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n\n    # Add more secret fields as needed\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "supabase_url: str = Field(default=\"\", description=\"Supabase URL\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "supabase_service_role_key: str = Field(default=\"\", description=\"Supabase service role key\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "encryption_key: str = Field(default=\"\", description=\"Encryption key\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "github_client_secret: str = Field(default=\"\", description=\"GitHub OAuth client secret\")",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "google_client_secret: str = Field(default=\"\", description=\"Google OAuth client secret\")",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "notion_client_secret: str = Field(default=\"\", description=\"Notion OAuth client secret\")",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "groq_api_key: str = Field(default=\"\", description=\"Groq API key\")",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "reddit_username: str = Field(default=\"\", description=\"Reddit username\")",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "reddit_password: str = Field(default=\"\", description=\"Reddit password\")",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "openweathermap_api_key: str = Field(default=\"\", description=\"OpenWeatherMap API key\")",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "medium_api_key: str = Field(default=\"\", description=\"Medium API key\")",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")",
          "successors": [
            22
          ]
        },
        {
          "id": 22,
          "label": "did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")",
          "successors": [
            23
          ]
        },
        {
          "id": 23,
          "label": "revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")",
          "successors": [
            24
          ]
        },
        {
          "id": 24,
          "label": "discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")",
          "successors": [
            25
          ]
        },
        {
          "id": 25,
          "label": "smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")",
          "successors": [
            26
          ]
        },
        {
          "id": 26,
          "label": "smtp_port: str = Field(default=\"\", description=\"SMTP server port\")",
          "successors": [
            27
          ]
        },
        {
          "id": 27,
          "label": "smtp_username: str = Field(default=\"\", description=\"SMTP username\")",
          "successors": [
            28
          ]
        },
        {
          "id": 28,
          "label": "smtp_password: str = Field(default=\"\", description=\"SMTP password\")",
          "successors": [
            29
          ]
        },
        {
          "id": 29,
          "label": "sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")",
          "successors": [
            30
          ]
        },
        {
          "id": 30,
          "label": "google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")",
          "successors": [
            31
          ]
        },
        {
          "id": 31,
          "label": "replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")",
          "successors": [
            32
          ]
        },
        {
          "id": 32,
          "label": "unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")",
          "successors": [
            33
          ]
        },
        {
          "id": 33,
          "label": "ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")",
          "successors": [
            34
          ]
        },
        {
          "id": 34,
          "label": "jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")",
          "successors": [
            35
          ]
        },
        {
          "id": 35,
          "label": "unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")",
          "successors": [
            36
          ]
        },
        {
          "id": 36,
          "label": "fal_key: str = Field(default=\"\", description=\"FAL API key\")",
          "successors": [
            37
          ]
        },
        {
          "id": 37,
          "label": "model_config = SettingsConfigDict(env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"allow\")",
          "successors": []
        }
      ]
    },
    {
      "name": "Settings",
      "type": "class",
      "start_line": 309,
      "end_line": 328,
      "functions": [
        {
          "name": "save",
          "type": "function",
          "start_line": 313,
          "end_line": 328,
          "functions": [],
          "classes": [],
          "simplified_code": "    def save(self) -> None:\n        # Save updated config to JSON file\n        if self.config.updated_fields:\n            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")\n            if os.path.exists(config_path):\n                with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()\n            else:\n                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)\n            self.config.clear_updates()",
          "blocks": [
            {
              "id": 1,
              "label": "if self.config.updated_fields:",
              "successors": [
                2,
                7
              ]
            },
            {
              "id": 2,
              "label": "config_to_save = self.config.get_updates()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "config_path = os.path.join(get_data_path(), \"config.json\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if os.path.exists(config_path):",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "with open(config_path, \"r+\") as f:",
              "successors": [
                8
              ]
            },
            {
              "id": 6,
              "label": "with open(config_path, \"w\") as f:",
              "successors": [
                8
              ]
            },
            {
              "id": 7,
              "label": "self.config.clear_updates()",
              "successors": []
            },
            {
              "id": 8,
              "label": "existing_config: Dict[str, Any] = json.load(f)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "existing_config.update(config_to_save)",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "f.seek(0)",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "json.dump(existing_config, f, indent=2)",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "f.truncate()",
              "successors": [
                7
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()\n\n            self.config.clear_updates()",
      "blocks": [
        {
          "id": 1,
          "label": "class Settings(BaseModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "config: Config = Config()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "secrets: Secrets = Secrets()",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self.config.clear_updates()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\n\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\n\nfrom backend.util.data import get_data_path\n\nT = TypeVar(\"T\", bound=BaseSettings)\n\n\n    PRODUCTION = \"prod\"\n\n\n    CLOUD = \"cloud\"\n\n\n        return self._updated_fields\n\n\n        )\n\n\n    )\n\n\n            self.config.clear_updates()",
  "blocks": [
    {
      "id": 1,
      "label": "import json",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import os",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from enum import Enum",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from pydantic_settings import ( BaseSettings, JsonConfigSettingsSource, PydanticBaseSettingsSource, SettingsConfigDict, )",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.util.data import get_data_path",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "T = TypeVar(\"T\", bound=BaseSettings)",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "PRODUCTION = \"prod\"",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "CLOUD = \"cloud\"",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return self._updated_fields",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "self.config.clear_updates()",
      "successors": []
    }
  ]
}