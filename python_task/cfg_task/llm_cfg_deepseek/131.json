{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 196,
  "functions": [
    {
      "name": "create_webhook",
      "type": "function",
      "start_line": 66,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_webhook(webhook: Webhook) -> Webhook:\n    created_webhook = await IntegrationWebhook.prisma().create(\n        data={\n            \"id\": webhook.id,\n            \"userId\": webhook.user_id,\n            \"provider\": webhook.provider.value,\n            \"credentialsId\": webhook.credentials_id,\n            \"webhookType\": webhook.webhook_type,\n            \"resource\": webhook.resource,\n            \"events\": webhook.events,\n            \"config\": Json(webhook.config),\n            \"secret\": webhook.secret,\n            \"providerWebhookId\": webhook.provider_webhook_id,\n        }\n    )\n    return Webhook.from_db(created_webhook)",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_webhook(webhook: Webhook) -> Webhook:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "created_webhook = await IntegrationWebhook.prisma().create(data={...})",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return Webhook.from_db(created_webhook)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_webhook",
      "type": "function",
      "start_line": 84,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_webhook(webhook_id: str) -> Webhook:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    webhook = await IntegrationWebhook.prisma().find_unique_or_raise(\n        where={\"id\": webhook_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n    return Webhook.from_db(webhook)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_webhook(webhook_id: str) -> Webhook:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "webhook = await IntegrationWebhook.prisma().find_unique_or_raise(where={\"id\": webhook_id}, include=INTEGRATION_WEBHOOK_INCLUDE,)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return Webhook.from_db(webhook)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_all_webhooks_by_creds",
      "type": "function",
      "start_line": 93,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_all_webhooks_by_creds(credentials_id: str) -> list[Webhook]:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    if not credentials_id:\n        raise ValueError(\"credentials_id must not be empty\")\n    webhooks = await IntegrationWebhook.prisma().find_many(\n        where={\"credentialsId\": credentials_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n    return [Webhook.from_db(webhook) for webhook in webhooks]",
      "blocks": [
        {
          "id": 1,
          "label": "if not credentials_id:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise ValueError(\"credentials_id must not be empty\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "webhooks = await IntegrationWebhook.prisma().find_many(where={\"credentialsId\": credentials_id}, include=INTEGRATION_WEBHOOK_INCLUDE,)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return [Webhook.from_db(webhook) for webhook in webhooks]",
          "successors": []
        }
      ]
    },
    {
      "name": "find_webhook_by_credentials_and_props",
      "type": "function",
      "start_line": 104,
      "end_line": 117,
      "functions": [],
      "classes": [],
      "simplified_code": "async def find_webhook_by_credentials_and_props(\n    credentials_id: str, webhook_type: str, resource: str, events: list[str]\n) -> Webhook | None:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    webhook = await IntegrationWebhook.prisma().find_first(\n        where={\n            \"credentialsId\": credentials_id,\n            \"webhookType\": webhook_type,\n            \"resource\": resource,\n            \"events\": {\"has_every\": events},\n        },\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n    return Webhook.from_db(webhook) if webhook else None",
      "blocks": [
        {
          "id": 1,
          "label": "async def find_webhook_by_credentials_and_props(credentials_id: str, webhook_type: str, resource: str, events: list[str]) -> Webhook | None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "webhook = await IntegrationWebhook.prisma().find_first(where={\"credentialsId\": credentials_id, \"webhookType\": webhook_type, \"resource\": resource, \"events\": {\"has_every\": events}}, include=INTEGRATION_WEBHOOK_INCLUDE)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return Webhook.from_db(webhook) if webhook else None",
          "successors": []
        }
      ]
    },
    {
      "name": "find_webhook_by_graph_and_props",
      "type": "function",
      "start_line": 120,
      "end_line": 133,
      "functions": [],
      "classes": [],
      "simplified_code": "async def find_webhook_by_graph_and_props(\n    graph_id: str, provider: str, webhook_type: str, events: list[str]\n) -> Webhook | None:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    webhook = await IntegrationWebhook.prisma().find_first(\n        where={\n            \"provider\": provider,\n            \"webhookType\": webhook_type,\n            \"events\": {\"has_every\": events},\n            \"AgentNodes\": {\"some\": {\"agentGraphId\": graph_id}},\n        },\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n    return Webhook.from_db(webhook) if webhook else None",
      "blocks": [
        {
          "id": 1,
          "label": "async def find_webhook_by_graph_and_props(graph_id: str, provider: str, webhook_type: str, events: list[str]) -> Webhook | None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "webhook = await IntegrationWebhook.prisma().find_first(where={\"provider\": provider, \"webhookType\": webhook_type, \"events\": {\"has_every\": events}, \"AgentNodes\": {\"some\": {\"agentGraphId\": graph_id}}}, include=INTEGRATION_WEBHOOK_INCLUDE,)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return Webhook.from_db(webhook) if webhook else None",
          "successors": []
        }
      ]
    },
    {
      "name": "update_webhook_config",
      "type": "function",
      "start_line": 136,
      "end_line": 145,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_webhook_config(webhook_id: str, updated_config: dict) -> Webhook:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    _updated_webhook = await IntegrationWebhook.prisma().update(\n        where={\"id\": webhook_id},\n        data={\"config\": Json(updated_config)},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n    if _updated_webhook is None:\n        raise ValueError(f\"Webhook #{webhook_id} not found\")\n    return Webhook.from_db(_updated_webhook)",
      "blocks": [
        {
          "id": 1,
          "label": "async def update_webhook_config(webhook_id: str, updated_config: dict) -> Webhook:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_updated_webhook = await IntegrationWebhook.prisma().update(where={\"id\": webhook_id}, data={\"config\": Json(updated_config)}, include=INTEGRATION_WEBHOOK_INCLUDE,)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if _updated_webhook is None:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"Webhook #{webhook_id} not found\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "return Webhook.from_db(_updated_webhook)",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_webhook",
      "type": "function",
      "start_line": 148,
      "end_line": 152,
      "functions": [],
      "classes": [],
      "simplified_code": "async def delete_webhook(webhook_id: str) -> None:\n    \"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    deleted = await IntegrationWebhook.prisma().delete(where={\"id\": webhook_id})\n    if not deleted:\n        raise ValueError(f\"Webhook #{webhook_id} not found\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def delete_webhook(webhook_id: str) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "deleted = await IntegrationWebhook.prisma().delete(where={\"id\": webhook_id})",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if not deleted:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"Webhook #{webhook_id} not found\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "End of function",
          "successors": []
        }
      ]
    },
    {
      "name": "publish_webhook_event",
      "type": "function",
      "start_line": 176,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": "async def publish_webhook_event(event: WebhookEvent):\n    await _webhook_event_bus.publish_event(\n        event, f\"{event.webhook_id}/{event.event_type}\"\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def publish_webhook_event(event: WebhookEvent):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await _webhook_event_bus.publish_event(event, f\"{event.webhook_id}/{event.event_type}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "listen_for_webhook_events",
      "type": "function",
      "start_line": 182,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "simplified_code": "async def listen_for_webhook_events(\n    webhook_id: str, event_type: Optional[str] = None\n) -> AsyncGenerator[WebhookEvent, None]:\n    async for event in _webhook_event_bus.listen_events(\n        f\"{webhook_id}/{event_type or '*'}\"\n    ):\n        yield event",
      "blocks": [
        {
          "id": 1,
          "label": "async def listen_for_webhook_events(webhook_id: str, event_type: Optional[str] = None) -> AsyncGenerator[WebhookEvent, None]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "async for event in _webhook_event_bus.listen_events(f\"{webhook_id}/{event_type or '*'}\"):",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "yield event",
          "successors": [
            2
          ]
        }
      ]
    },
    {
      "name": "wait_for_webhook_event",
      "type": "function",
      "start_line": 191,
      "end_line": 196,
      "functions": [],
      "classes": [],
      "simplified_code": "async def wait_for_webhook_event(\n    webhook_id: str, event_type: Optional[str] = None, timeout: Optional[float] = None\n) -> WebhookEvent | None:\n    return await _webhook_event_bus.wait_for_event(\n        f\"{webhook_id}/{event_type or '*'}\", timeout\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def wait_for_webhook_event(webhook_id: str, event_type: Optional[str] = None, timeout: Optional[float] = None) -> WebhookEvent | None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return await _webhook_event_bus.wait_for_event(f\"{webhook_id}/{event_type or '*'}\", timeout)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Webhook",
      "type": "class",
      "start_line": 21,
      "end_line": 60,
      "functions": [
        {
          "name": "url",
          "type": "function",
          "start_line": 37,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def url(self) -> str:\n        return webhook_ingress_url(self.provider.value, self.id)",
          "blocks": [
            {
              "id": 1,
              "label": "def url(self) -> str:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return webhook_ingress_url(self.provider.value, self.id)",
              "successors": []
            }
          ]
        },
        {
          "name": "from_db",
          "type": "function",
          "start_line": 41,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(webhook: IntegrationWebhook):\n        from .graph import NodeModel\n\n        return Webhook(\n            id=webhook.id,\n            user_id=webhook.userId,\n            provider=ProviderName(webhook.provider),\n            credentials_id=webhook.credentialsId,\n            webhook_type=webhook.webhookType,\n            resource=webhook.resource,\n            events=webhook.events,\n            config=dict(webhook.config),\n            secret=webhook.secret,\n            provider_webhook_id=webhook.providerWebhookId,\n            attached_nodes=(\n                [NodeModel.from_db(node) for node in webhook.AgentNodes]\n                if webhook.AgentNodes is not None\n                else None\n            ),\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def from_db(webhook: IntegrationWebhook):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "from .graph import NodeModel",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return Webhook(...)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Webhook(BaseDbModel):\n    user_id: str\n    provider: ProviderName\n    credentials_id: str\n    webhook_type: str\n    resource: str\n    events: list[str]\n    config: dict = Field(default_factory=dict)\n    secret: str\n\n    provider_webhook_id: str\n\n    attached_nodes: Optional[list[\"NodeModel\"]] = None\n\n    @computed_field\n    @property\n        return webhook_ingress_url(self.provider.value, self.id)\n\n    @staticmethod\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class Webhook(BaseDbModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user_id: str",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "provider: ProviderName",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "credentials_id: str",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "webhook_type: str",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "resource: str",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "events: list[str]",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "config: dict = Field(default_factory=dict)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "secret: str",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "provider_webhook_id: str",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "attached_nodes: Optional[list[\"NodeModel\"]] = None",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "@computed_field",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "@property",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "return webhook_ingress_url(self.provider.value, self.id)",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "@staticmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "WebhookEvent",
      "type": "class",
      "start_line": 158,
      "end_line": 162,
      "functions": [],
      "classes": [],
      "simplified_code": "class WebhookEvent(BaseDbModel):\n    provider: str\n    webhook_id: str\n    event_type: str\n    payload: dict",
      "blocks": [
        {
          "id": 1,
          "label": "class WebhookEvent(BaseDbModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "provider: str",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "webhook_id: str",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "event_type: str",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "payload: dict",
          "successors": []
        }
      ]
    },
    {
      "name": "WebhookEventBus",
      "type": "class",
      "start_line": 165,
      "end_line": 170,
      "functions": [
        {
          "name": "event_bus_name",
          "type": "function",
          "start_line": 169,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": "    def event_bus_name(self) -> str:\n        return \"webhooks\"",
          "blocks": [
            {
              "id": 1,
              "label": "def event_bus_name(self) -> str:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return \"webhooks\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class WebhookEventBus(AsyncRedisEventBus[WebhookEvent]):\n    Model = WebhookEvent\n\n    @property\n        return \"webhooks\"",
      "blocks": [
        {
          "id": 1,
          "label": "class WebhookEventBus(AsyncRedisEventBus[WebhookEvent]):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "Model = WebhookEvent",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@property",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return \"webhooks\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nfrom typing import TYPE_CHECKING, AsyncGenerator, Optional\n\nfrom prisma import Json\nfrom prisma.models import IntegrationWebhook\nfrom pydantic import Field, computed_field\n\nfrom backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE\nfrom backend.data.queue import AsyncRedisEventBus\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\n\nfrom .db import BaseDbModel\n\nif TYPE_CHECKING:\n    from .graph import NodeModel\n\nlogger = logging.getLogger(__name__)\n\n\n        )\n\n\n# --------------------- CRUD functions --------------------- #\n\n\n    return Webhook.from_db(created_webhook)\n\n\n    return Webhook.from_db(webhook)\n\n\n    return [Webhook.from_db(webhook) for webhook in webhooks]\n\n\n    return Webhook.from_db(webhook) if webhook else None\n\n\n    return Webhook.from_db(webhook) if webhook else None\n\n\n    return Webhook.from_db(_updated_webhook)\n\n\n        raise ValueError(f\"Webhook #{webhook_id} not found\")\n\n\n# --------------------- WEBHOOK EVENTS --------------------- #\n\n\n    payload: dict\n\n\n        return \"webhooks\"\n\n\n_webhook_event_bus = WebhookEventBus()\n\n\n    )\n\n\n        yield event\n\n\n    )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import TYPE_CHECKING, AsyncGenerator, Optional",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from prisma import Json",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from prisma.models import IntegrationWebhook",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from pydantic import Field, computed_field",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.queue import AsyncRedisEventBus",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.integrations.webhooks.utils import webhook_ingress_url",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "from .db import BaseDbModel",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "if TYPE_CHECKING:",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "from .graph import NodeModel",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "return Webhook.from_db(created_webhook)",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "return Webhook.from_db(webhook)",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "return [Webhook.from_db(webhook) for webhook in webhooks]",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "return Webhook.from_db(webhook) if webhook else None",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "return Webhook.from_db(webhook) if webhook else None",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "return Webhook.from_db(_updated_webhook)",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": "raise ValueError(f\"Webhook #{webhook_id} not found\")",
      "successors": [
        21
      ]
    },
    {
      "id": 21,
      "label": "payload: dict",
      "successors": [
        22
      ]
    },
    {
      "id": 22,
      "label": "return \"webhooks\"",
      "successors": [
        23
      ]
    },
    {
      "id": 23,
      "label": "_webhook_event_bus = WebhookEventBus()",
      "successors": [
        24
      ]
    },
    {
      "id": 24,
      "label": "yield event",
      "successors": []
    }
  ]
}