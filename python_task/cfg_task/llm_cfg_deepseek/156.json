{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [
    {
      "name": "rate_limit_middleware",
      "type": "function",
      "start_line": 7,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n\n    if not request.url.path.startswith(\"/api\"):\n        return await call_next(request)\n\n    api_key = request.headers.get(\"Authorization\")\n    if not api_key:\n        return await call_next(request)\n\n    api_key = api_key.replace(\"Bearer \", \"\")\n\n    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)\n\n    if not is_allowed:\n        raise HTTPException(\n            status_code=429, detail=\"Rate limit exceeded. Please try again later.\"\n        )\n\n    response = await call_next(request)\n    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)\n    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)\n    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)\n\n    return response",
      "blocks": [
        {
          "id": 1,
          "label": "limiter = RateLimiter()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not request.url.path.startswith(\"/api\"):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "return await call_next(request)",
          "successors": []
        },
        {
          "id": 4,
          "label": "api_key = request.headers.get(\"Authorization\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if not api_key:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "return await call_next(request)",
          "successors": []
        },
        {
          "id": 7,
          "label": "api_key = api_key.replace(\"Bearer \", \"\")",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "if not is_allowed:",
          "successors": [
            10,
            11
          ]
        },
        {
          "id": 10,
          "label": "raise HTTPException(status_code=429, detail=\"Rate limit exceeded. Please try again later.\")",
          "successors": []
        },
        {
          "id": 11,
          "label": "response = await call_next(request)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "response.headers[\"X-RateLimit-Remaining\"] = str(remaining)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "response.headers[\"X-RateLimit-Reset\"] = str(reset_time)",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "return response",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint\n\nfrom .limiter import RateLimiter\n\n\n    return response",
  "blocks": [
    {
      "id": 1,
      "label": "from fastapi import HTTPException, Request",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from starlette.middleware.base import RequestResponseEndpoint",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from .limiter import RateLimiter",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "return response",
      "successors": []
    }
  ]
}