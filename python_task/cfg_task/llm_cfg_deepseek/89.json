{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [
    {
      "name": "twos_complement",
      "type": "function",
      "start_line": 4,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number",
      "blocks": [
        {
          "id": 1,
          "label": "if number > 0:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise ValueError(\"input must be a negative integer\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "binary_number_length = len(bin(number)[3:])",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "twos_complement_number = ((\"1\" + \"0\" * (binary_number_length - len(twos_complement_number)) + twos_complement_number) if number < 0 else \"0\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return \"0b\" + twos_complement_number",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n    return \"0b\" + twos_complement_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import doctest",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}