{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 55,
  "functions": [
    {
      "name": "bitwise_addition_recursive",
      "type": "function",
      "start_line": 7,
      "end_line": 49,
      "functions": [],
      "classes": [],
      "simplified_code": "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n\n    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n\n    if carry == 0:\n        return bitwise_sum\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)",
      "blocks": [
        {
          "id": 1,
          "label": "if not isinstance(number, int) or not isinstance(other_number, int):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise TypeError(\"Both arguments MUST be integers!\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "if number < 0 or other_number < 0:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(\"Both arguments MUST be non-negative!\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "bitwise_sum = number ^ other_number",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "carry = number & other_number",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if carry == 0:",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "return bitwise_sum",
          "successors": []
        },
        {
          "id": 9,
          "label": "return bitwise_addition_recursive(bitwise_sum, carry << 1)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\n\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "def bitwise_addition_recursive(a, b):",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "if b == 0:",
      "successors": [
        3,
        4
      ]
    },
    {
      "id": 3,
      "label": "return a",
      "successors": []
    },
    {
      "id": 4,
      "label": "bitwise_sum = a ^ b",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "carry = (a & b) << 1",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "return bitwise_addition_recursive(bitwise_sum, carry << 1)",
      "successors": []
    },
    {
      "id": 7,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "import doctest",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}