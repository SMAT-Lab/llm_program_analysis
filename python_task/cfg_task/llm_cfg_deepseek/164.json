{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "get_highest_set_bit_position",
      "type": "function",
      "start_line": 1,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n\n    position = 0\n    while number:\n        position += 1\n        number >>= 1\n\n    return position",
      "blocks": [
        {
          "id": 1,
          "label": "if not isinstance(number, int):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise TypeError(\"Input value must be an 'int' type\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "position = 0",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "while number:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "position += 1",
          "successors": [
            7
          ]
        },
        {
          "id": 6,
          "label": "return position",
          "successors": []
        },
        {
          "id": 7,
          "label": "number >>= 1",
          "successors": [
            4
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "    return position\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "return position",
      "successors": []
    },
    {
      "id": 2,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import doctest",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}