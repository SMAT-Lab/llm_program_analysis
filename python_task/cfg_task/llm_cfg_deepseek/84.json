{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 118,
  "functions": [
    {
      "name": "connection_manager",
      "type": "function",
      "start_line": 13,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": "def connection_manager() -> ConnectionManager:\n    return ConnectionManager()",
      "blocks": [
        {
          "id": 1,
          "label": "def connection_manager() -> ConnectionManager:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return ConnectionManager()",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_websocket",
      "type": "function",
      "start_line": 18,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket",
      "blocks": [
        {
          "id": 1,
          "label": "def mock_websocket() -> AsyncMock:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "websocket: AsyncMock = AsyncMock(spec=WebSocket)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "websocket.send_text = AsyncMock()",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return websocket",
          "successors": []
        }
      ]
    },
    {
      "name": "test_connect",
      "type": "function",
      "start_line": 25,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_connect(connection_manager: ConnectionManager, mock_websocket: AsyncMock) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await connection_manager.connect(mock_websocket)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert mock_websocket in connection_manager.active_connections",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "mock_websocket.accept.assert_called_once()",
          "successors": []
        }
      ]
    },
    {
      "name": "test_disconnect",
      "type": "function",
      "start_line": 33,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
      "blocks": [
        {
          "id": 1,
          "label": "connection_manager.active_connections.add(mock_websocket)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "connection_manager.disconnect(mock_websocket)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "assert mock_websocket not in connection_manager.active_connections",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
          "successors": []
        }
      ]
    },
    {
      "name": "test_subscribe",
      "type": "function",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_subscribe(connection_manager: ConnectionManager, mock_websocket: AsyncMock) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await connection_manager.subscribe(\"test_graph\", mock_websocket)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]",
          "successors": []
        }
      ]
    },
    {
      "name": "test_unsubscribe",
      "type": "function",
      "start_line": 54,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_unsubscribe(connection_manager: ConnectionManager, mock_websocket: AsyncMock) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "await connection_manager.unsubscribe(\"test_graph\", mock_websocket)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "assert \"test_graph\" not in connection_manager.subscriptions",
          "successors": []
        }
      ]
    },
    {
      "name": "test_send_execution_result",
      "type": "function",
      "start_line": 65,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "result: ExecutionResult = ExecutionResult(...)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "await connection_manager.send_execution_result(result)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "mock_websocket.send_text.assert_called_once_with(...)",
          "successors": []
        }
      ]
    },
    {
      "name": "test_send_execution_result_no_subscribers",
      "type": "function",
      "start_line": 97,
      "end_line": 118,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_send_execution_result_no_subscribers(connection_manager: ConnectionManager, mock_websocket: AsyncMock) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "result: ExecutionResult = ExecutionResult(graph_id=\"test_graph\", graph_version=1, graph_exec_id=\"test_exec_id\", node_exec_id=\"test_node_exec_id\", node_id=\"test_node_id\", block_id=\"test_block_id\", status=ExecutionStatus.COMPLETED, input_data={\"input1\": \"value1\"}, output_data={\"output1\": [\"result1\"]}, add_time=datetime.now(), queue_time=None, start_time=datetime.now(), end_time=datetime.now())",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "await connection_manager.send_execution_result(result)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "mock_websocket.send_text.assert_not_called()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket\n\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage\n\n\n@pytest.fixture\n    return ConnectionManager()\n\n\n@pytest.fixture\n    return websocket\n\n\n@pytest.mark.asyncio\n    mock_websocket.accept.assert_called_once()\n\n\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n\n\n@pytest.mark.asyncio\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n\n\n@pytest.mark.asyncio\n    assert \"test_graph\" not in connection_manager.subscriptions\n\n\n@pytest.mark.asyncio\n    )\n\n\n@pytest.mark.asyncio\n    mock_websocket.send_text.assert_not_called()",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime, timezone",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from unittest.mock import AsyncMock",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import pytest",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from fastapi import WebSocket",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.data.execution import ExecutionResult, ExecutionStatus",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.server.conn_manager import ConnectionManager",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.server.model import Methods, WsMessage",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "@pytest.fixture",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "return ConnectionManager()",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "@pytest.fixture",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return websocket",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "@pytest.mark.asyncio",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "mock_websocket.accept.assert_called_once()",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "@pytest.mark.asyncio",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "@pytest.mark.asyncio",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "assert \"test_graph\" not in connection_manager.subscriptions",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "@pytest.mark.asyncio",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": ")",
      "successors": [
        21
      ]
    },
    {
      "id": 21,
      "label": "@pytest.mark.asyncio",
      "successors": [
        22
      ]
    },
    {
      "id": 22,
      "label": "mock_websocket.send_text.assert_not_called()",
      "successors": []
    }
  ]
}