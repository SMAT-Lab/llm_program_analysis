{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 193,
  "functions": [
    {
      "name": "__convert_list",
      "type": "function",
      "start_line": 9,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, (list, tuple, set)):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return list(value)",
          "successors": []
        },
        {
          "id": 3,
          "label": "elif isinstance(value, dict):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return list(value.items())",
          "successors": []
        },
        {
          "id": 5,
          "label": "elif isinstance(value, str):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "value = value.strip()",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "if value.startswith(\"[\") and value.endswith(\"]\"):",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "try:",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "return json.loads(value)",
          "successors": []
        },
        {
          "id": 10,
          "label": "except json.JSONDecodeError:",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "return [value]",
          "successors": []
        },
        {
          "id": 7,
          "label": "else:",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "return [value]",
          "successors": []
        },
        {
          "id": 14,
          "label": "else:",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "return [value]",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_dict",
      "type": "function",
      "start_line": 27,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, str):",
          "successors": [
            2,
            7
          ]
        },
        {
          "id": 2,
          "label": "try:",
          "successors": [
            3,
            5
          ]
        },
        {
          "id": 3,
          "label": "result = json.loads(value)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if isinstance(result, dict):",
          "successors": [
            6,
            5
          ]
        },
        {
          "id": 5,
          "label": "except json.JSONDecodeError:",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return {\"value\": result} or return {\"value\": value}",
          "successors": []
        },
        {
          "id": 7,
          "label": "elif isinstance(value, list):",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "return {i: value[i] for i in range(len(value))}",
          "successors": []
        },
        {
          "id": 9,
          "label": "elif isinstance(value, tuple):",
          "successors": [
            10,
            11
          ]
        },
        {
          "id": 10,
          "label": "return {i: value[i] for i in range(len(value))}",
          "successors": []
        },
        {
          "id": 11,
          "label": "elif isinstance(value, dict):",
          "successors": [
            12,
            13
          ]
        },
        {
          "id": 12,
          "label": "return value",
          "successors": []
        },
        {
          "id": 13,
          "label": "else:",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "return {\"value\": value}",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_tuple",
      "type": "function",
      "start_line": 47,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, (str, list, set)):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return tuple(value)",
          "successors": []
        },
        {
          "id": 3,
          "label": "elif isinstance(value, dict):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return tuple(value.items())",
          "successors": []
        },
        {
          "id": 5,
          "label": "elif isinstance(value, (int, float, bool)):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "return (value,)",
          "successors": []
        },
        {
          "id": 7,
          "label": "elif isinstance(value, tuple):",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "return value",
          "successors": []
        },
        {
          "id": 9,
          "label": "else:",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return (value,)",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_set",
      "type": "function",
      "start_line": 60,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, (str, list, tuple)):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return set(value)",
          "successors": []
        },
        {
          "id": 3,
          "label": "elif isinstance(value, dict):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return set(value.items())",
          "successors": []
        },
        {
          "id": 5,
          "label": "elif isinstance(value, set):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "return value",
          "successors": []
        },
        {
          "id": 7,
          "label": "else:",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return {value}",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_str",
      "type": "function",
      "start_line": 71,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, str):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return value",
          "successors": []
        },
        {
          "id": 3,
          "label": "return json.dumps(value)",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_num",
      "type": "function",
      "start_line": 81,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, (list, dict, tuple, set)):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return num_type(len(value))",
          "successors": []
        },
        {
          "id": 3,
          "label": "elif isinstance(value, num_type):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return value",
          "successors": []
        },
        {
          "id": 5,
          "label": "else:",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "try:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "return num_type(float(value))",
          "successors": []
        },
        {
          "id": 8,
          "label": "except (ValueError, TypeError):",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "return num_type(0)",
          "successors": []
        }
      ]
    },
    {
      "name": "__convert_bool",
      "type": "function",
      "start_line": 93,
      "end_line": 102,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, bool):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return value",
          "successors": []
        },
        {
          "id": 3,
          "label": "elif isinstance(value, str):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "if value.lower() in [\"true\", \"1\"]:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 5,
          "label": "else:",
          "successors": [
            8
          ]
        },
        {
          "id": 6,
          "label": "return True",
          "successors": []
        },
        {
          "id": 7,
          "label": "else:",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return False",
          "successors": []
        },
        {
          "id": 9,
          "label": "else:",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return bool(value)",
          "successors": []
        }
      ]
    },
    {
      "name": "_try_convert",
      "type": "function",
      "start_line": 105,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
      "blocks": [
        {
          "id": 1,
          "label": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "origin = get_origin(target_type)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "args = get_args(target_type)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if origin is None:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "origin = target_type",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if origin not in [list, dict, tuple, str, set, int, float, bool]:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "return value",
          "successors": []
        },
        {
          "id": 8,
          "label": "if isinstance(value, origin):",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "if not args:",
          "successors": [
            11,
            12
          ]
        },
        {
          "id": 10,
          "label": "elif raise_on_mismatch:",
          "successors": [
            13,
            14
          ]
        },
        {
          "id": 11,
          "label": "return value",
          "successors": []
        },
        {
          "id": 12,
          "label": "if origin is list:",
          "successors": [
            15,
            16
          ]
        },
        {
          "id": 13,
          "label": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
          "successors": []
        },
        {
          "id": 14,
          "label": "else:",
          "successors": [
            17
          ]
        },
        {
          "id": 15,
          "label": "return [convert(v, args[0]) for v in value]",
          "successors": []
        },
        {
          "id": 16,
          "label": "elif origin is tuple:",
          "successors": [
            18,
            19
          ]
        },
        {
          "id": 17,
          "label": "if origin is list:",
          "successors": [
            20,
            21
          ]
        },
        {
          "id": 18,
          "label": "if len(args) == 1:",
          "successors": [
            22,
            23
          ]
        },
        {
          "id": 19,
          "label": "elif origin is dict:",
          "successors": [
            24,
            25
          ]
        },
        {
          "id": 20,
          "label": "value = __convert_list(value)",
          "successors": [
            26
          ]
        },
        {
          "id": 21,
          "label": "elif origin is dict:",
          "successors": [
            27,
            28
          ]
        },
        {
          "id": 22,
          "label": "return tuple(convert(v, args[0]) for v in value)",
          "successors": []
        },
        {
          "id": 23,
          "label": "else:",
          "successors": [
            29
          ]
        },
        {
          "id": 24,
          "label": "key_type, val_type = args",
          "successors": [
            30
          ]
        },
        {
          "id": 25,
          "label": "elif origin is set:",
          "successors": [
            31,
            32
          ]
        },
        {
          "id": 26,
          "label": "if args:",
          "successors": [
            33,
            34
          ]
        },
        {
          "id": 27,
          "label": "value = __convert_dict(value)",
          "successors": [
            35
          ]
        },
        {
          "id": 28,
          "label": "elif origin is tuple:",
          "successors": [
            36,
            37
          ]
        },
        {
          "id": 29,
          "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
          "successors": []
        },
        {
          "id": 30,
          "label": "return {convert(k, key_type): convert(v, val_type) for k, v in value.items()}",
          "successors": []
        },
        {
          "id": 31,
          "label": "return {convert(v, args[0]) for v in value}",
          "successors": []
        },
        {
          "id": 32,
          "label": "else:",
          "successors": [
            38
          ]
        },
        {
          "id": 33,
          "label": "return [convert(v, args[0]) for v in value]",
          "successors": []
        },
        {
          "id": 34,
          "label": "else:",
          "successors": [
            39
          ]
        },
        {
          "id": 35,
          "label": "if args:",
          "successors": [
            40,
            41
          ]
        },
        {
          "id": 36,
          "label": "value = __convert_tuple(value)",
          "successors": [
            42
          ]
        },
        {
          "id": 37,
          "label": "elif origin is str:",
          "successors": [
            43,
            44
          ]
        },
        {
          "id": 38,
          "label": "return value",
          "successors": []
        },
        {
          "id": 39,
          "label": "return value",
          "successors": []
        },
        {
          "id": 40,
          "label": "key_type, val_type = args",
          "successors": [
            45
          ]
        },
        {
          "id": 41,
          "label": "else:",
          "successors": [
            46
          ]
        },
        {
          "id": 42,
          "label": "if args:",
          "successors": [
            47,
            48
          ]
        },
        {
          "id": 43,
          "label": "return __convert_str(value)",
          "successors": []
        },
        {
          "id": 44,
          "label": "elif origin is set:",
          "successors": [
            49,
            50
          ]
        },
        {
          "id": 45,
          "label": "return {convert(k, key_type): convert(v, val_type) for k, v in value.items()}",
          "successors": []
        },
        {
          "id": 46,
          "label": "return value",
          "successors": []
        },
        {
          "id": 47,
          "label": "if len(args) == 1:",
          "successors": [
            51,
            52
          ]
        },
        {
          "id": 48,
          "label": "else:",
          "successors": [
            53
          ]
        },
        {
          "id": 49,
          "label": "value = __convert_set(value)",
          "successors": [
            54
          ]
        },
        {
          "id": 50,
          "label": "elif origin is int:",
          "successors": [
            55,
            56
          ]
        },
        {
          "id": 51,
          "label": "return tuple(convert(v, args[0]) for v in value)",
          "successors": []
        },
        {
          "id": 52,
          "label": "else:",
          "successors": [
            57
          ]
        },
        {
          "id": 53,
          "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
          "successors": []
        },
        {
          "id": 54,
          "label": "if args:",
          "successors": [
            58,
            59
          ]
        },
        {
          "id": 55,
          "label": "return __convert_num(value, int)",
          "successors": []
        },
        {
          "id": 56,
          "label": "elif origin is float:",
          "successors": [
            60,
            61
          ]
        },
        {
          "id": 57,
          "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
          "successors": []
        },
        {
          "id": 58,
          "label": "return {convert(v, args[0]) for v in value}",
          "successors": []
        },
        {
          "id": 59,
          "label": "else:",
          "successors": [
            62
          ]
        },
        {
          "id": 60,
          "label": "return __convert_num(value, float)",
          "successors": []
        },
        {
          "id": 61,
          "label": "elif origin is bool:",
          "successors": [
            63,
            64
          ]
        },
        {
          "id": 62,
          "label": "return value",
          "successors": []
        },
        {
          "id": 63,
          "label": "return __convert_bool(value)",
          "successors": []
        },
        {
          "id": 64,
          "label": "else:",
          "successors": [
            65
          ]
        },
        {
          "id": 65,
          "label": "return value",
          "successors": []
        }
      ]
    },
    {
      "name": "type_match",
      "type": "function",
      "start_line": 185,
      "end_line": 186,
      "functions": [],
      "classes": [],
      "simplified_code": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
      "blocks": [
        {
          "id": 1,
          "label": "def type_match(value: Any, target_type: Type[T]) -> T:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
          "successors": []
        }
      ]
    },
    {
      "name": "convert",
      "type": "function",
      "start_line": 189,
      "end_line": 193,
      "functions": [],
      "classes": [],
      "simplified_code": "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
      "blocks": [
        {
          "id": 1,
          "label": "try:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
          "successors": [
            4
          ]
        },
        {
          "id": 3,
          "label": "except Exception as e:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ConversionError",
      "type": "class",
      "start_line": 5,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "simplified_code": "class ConversionError(ValueError):\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class ConversionError(ValueError):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n\n\n    pass\n\n\n        return [value]\n\n\n        return {\"value\": value}\n\n\n        return (value,)\n\n\n        return {value}\n\n\n        return json.dumps(value)\n\n\nNUM = TypeVar(\"NUM\", int, float)\n\n\n            return num_type(0)  # Fallback conversion\n\n\n        return bool(value)\n\n\n            return value\n\n\nT = TypeVar(\"T\")\n\n\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n\n\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
  "blocks": [
    {
      "id": 1,
      "label": "import json",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import Any, Type, TypeVar, cast, get_args, get_origin",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "pass",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "return [value]",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "return {\"value\": value}",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "return (value,)",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return {value}",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "return json.dumps(value)",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "NUM = TypeVar(\"NUM\", int, float)",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "return num_type(0)  # Fallback conversion",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return bool(value)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "return value",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "T = TypeVar(\"T\")",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
      "successors": []
    }
  ]
}