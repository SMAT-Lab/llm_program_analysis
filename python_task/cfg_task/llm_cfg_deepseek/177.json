{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "RedisKeyedMutex",
      "type": "class",
      "start_line": 12,
      "end_line": 57,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, redis: \"Redis\", timeout: int | None = 60):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.redis = redis",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.timeout = timeout",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(max_len=6000, max_age_seconds=self.timeout)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.locks_lock = Lock()",
              "successors": []
            }
          ]
        },
        {
          "name": "locked",
          "type": "function",
          "start_line": 29,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
          "blocks": [
            {
              "id": 1,
              "label": "def locked(self, key: Any):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "lock = self.acquire(key)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "try:",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "yield",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "finally:",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if lock.locked():",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "lock.release()",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "end",
              "successors": []
            }
          ]
        },
        {
          "name": "acquire",
          "type": "function",
          "start_line": 37,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock",
          "blocks": [
            {
              "id": 1,
              "label": "def acquire(self, key: Any) -> \"RedisLock\":",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "with self.locks_lock:",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if key not in self.locks:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "self.locks[key] = self.redis.lock(str(key), self.timeout, thread_local=False)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "lock = self.locks[key]",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "lock.acquire()",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return lock",
              "successors": []
            }
          ]
        },
        {
          "name": "release",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
          "blocks": [
            {
              "id": 1,
              "label": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "lock.release()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "End of function",
              "successors": []
            }
          ]
        },
        {
          "name": "release_all_locks",
          "type": "function",
          "start_line": 52,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
          "blocks": [
            {
              "id": 1,
              "label": "self.locks_lock.acquire(blocking=False)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for lock in self.locks.values():",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if lock.locked() and lock.owned():",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "lock.release()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "End of for loop",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n        self.locks_lock = Lock()\n\n    @contextmanager\n                lock.release()\n\n        return lock\n\n            lock.release()\n\n                lock.release()",
      "blocks": [
        {
          "id": 1,
          "label": "class RedisKeyedMutex:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.locks_lock = Lock()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@contextmanager",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "lock.release()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return lock",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "lock.release()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "lock.release()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\n\nfrom expiringdict import ExpiringDict\n\nif TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock\n\n\n                lock.release()",
  "blocks": [
    {
      "id": 1,
      "label": "from contextlib import contextmanager",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from threading import Lock",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from typing import TYPE_CHECKING, Any",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from expiringdict import ExpiringDict",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "if TYPE_CHECKING:",
      "successors": [
        6,
        7
      ]
    },
    {
      "id": 6,
      "label": "from redis import Redis",
      "successors": [
        8
      ]
    },
    {
      "id": 7,
      "label": "from redis.lock import Lock as RedisLock",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "lock.release()",
      "successors": []
    }
  ]
}