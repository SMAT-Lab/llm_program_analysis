{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 130,
  "functions": [
    {
      "name": "get_or_create_user",
      "type": "function",
      "start_line": 16,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")\n    if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")\n\n    user_email = user_data.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")\n\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )\n    return User.model_validate(user)",
      "blocks": [
        {
          "id": 1,
          "label": "user_id = user_data.get(\"sub\")",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not user_id:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "user_email = user_data.get(\"email\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if not user_email:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "raise HTTPException(status_code=401, detail=\"Email not found in token\")",
          "successors": []
        },
        {
          "id": 7,
          "label": "user = await prisma.user.find_unique(where={\"id\": user_id})",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "if not user:",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "user = await prisma.user.create(data={\"id\": user_id, \"email\": user_email, \"name\": user_data.get(\"user_metadata\", {}).get(\"name\")})",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return User.model_validate(user)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_by_id",
      "type": "function",
      "start_line": 37,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_user_by_id(user_id: str) -> Optional[User]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user = await prisma.user.find_unique(where={\"id\": user_id})",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return User.model_validate(user) if user else None",
          "successors": []
        }
      ]
    },
    {
      "name": "create_default_user",
      "type": "function",
      "start_line": 42,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )\n    return User.model_validate(user)",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_default_user() -> Optional[User]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if not user:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "user = await prisma.user.create(data={\"id\": DEFAULT_USER_ID, \"email\": \"default@example.com\", \"name\": \"Default User\"})",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return User.model_validate(user)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_metadata",
      "type": "function",
      "start_line": 55,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_user_metadata(user_id: str) -> UserMetadata:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user = await User.prisma().find_unique_or_raise(where={\"id\": user_id},)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "metadata = cast(UserMetadataRaw, user.metadata)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return UserMetadata.model_validate(metadata)",
          "successors": []
        }
      ]
    },
    {
      "name": "update_user_metadata",
      "type": "function",
      "start_line": 64,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def update_user_metadata(user_id: str, metadata: UserMetadata):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await User.prisma().update(where={'id': user_id}, data={'metadata': Json(metadata.model_dump())})",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_integrations",
      "type": "function",
      "start_line": 71,
      "end_line": 82,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_user_integrations(user_id: str) -> UserIntegrations:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user = await User.prisma().find_unique_or_raise(where={\"id\": user_id},)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "encrypted_integrations = user.integrations",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if not encrypted_integrations:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "return UserIntegrations()",
          "successors": []
        },
        {
          "id": 6,
          "label": "return UserIntegrations.model_validate(JSONCryptor().decrypt(encrypted_integrations))",
          "successors": []
        }
      ]
    },
    {
      "name": "update_user_integrations",
      "type": "function",
      "start_line": 85,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def update_user_integrations(user_id: str, data: UserIntegrations):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "encrypted_data = JSONCryptor().encrypt(data.model_dump())",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "await User.prisma().update(where={\"id\": user_id}, data={\"integrations\": encrypted_data})",
          "successors": []
        }
      ]
    },
    {
      "name": "migrate_and_encrypt_user_integrations",
      "type": "function",
      "start_line": 93,
      "end_line": 130,
      "functions": [],
      "classes": [],
      "simplified_code": "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n    logger.info(f\"Migrating integration credentials for {len(users)} users\")\n\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "users = await User.prisma().find_many(...)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "logger.info(f\"Migrating integration credentials for {len(users)} users\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "for user in users:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raw_metadata = cast(UserMetadataRaw, user.metadata)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "metadata = UserMetadata.model_validate(raw_metadata)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "integrations = await get_user_integrations(user_id=user.id)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if metadata.integration_credentials and not integrations.credentials:",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "integrations.credentials = metadata.integration_credentials",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "if metadata.integration_oauth_states:",
          "successors": [
            10,
            11
          ]
        },
        {
          "id": 10,
          "label": "integrations.oauth_states = metadata.integration_oauth_states",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "await update_user_integrations(user_id=user.id, data=integrations)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "raw_metadata = dict(raw_metadata)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "raw_metadata.pop(\"integration_credentials\", None)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "raw_metadata.pop(\"integration_oauth_states\", None)",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "await User.prisma().update(...)",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "End of for loop",
          "successors": [
            3
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import logging\nfrom typing import Optional, cast\n\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\n\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\n\nlogger = logging.getLogger(__name__)\n\n\n    return User.model_validate(user)\n\n\n    return User.model_validate(user) if user else None\n\n\n    return User.model_validate(user)\n\n\n    return UserMetadata.model_validate(metadata)\n\n\n    )\n\n\n        )\n\n\n    )\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import Optional, cast",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from autogpt_libs.auth.models import DEFAULT_USER_ID",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from fastapi import HTTPException",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from prisma import Json",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from prisma.models import User",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.db import prisma",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.util.encryption import JSONCryptor",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return User.model_validate(user)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "return User.model_validate(user) if user else None",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "return User.model_validate(user)",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": "return UserMetadata.model_validate(metadata)",
      "successors": []
    }
  ]
}