{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "QueryApi",
      "type": "class",
      "start_line": 4,
      "end_line": 23,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 6,
          "end_line": 8,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, memory_cache, reverse_index_cluster):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.memory_cache = memory_cache",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.reverse_index_cluster = reverse_index_cluster",
              "successors": []
            }
          ]
        },
        {
          "name": "parse_query",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def parse_query(self, query):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "Remove markup, break text into terms, deal with typos, normalize capitalization, convert to use boolean operations.",
              "successors": []
            }
          ]
        },
        {
          "name": "process_query",
          "type": "function",
          "start_line": 16,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
          "blocks": [
            {
              "id": 1,
              "label": "query = self.parse_query(query)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "results = self.memory_cache.get(query)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if results is None:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "results = self.reverse_index_cluster.process_search(query)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.memory_cache.set(query, results)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return results",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class QueryApi(object):\n\n        self.reverse_index_cluster = reverse_index_cluster\n\n        ...\n\n        return results\n",
      "blocks": [
        {
          "id": 1,
          "label": "class QueryApi(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.reverse_index_cluster = reverse_index_cluster",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "...",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return results",
          "successors": []
        }
      ]
    },
    {
      "name": "Node",
      "type": "class",
      "start_line": 25,
      "end_line": 31,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, query, results):\n        self.query = query\n        self.results = results",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, query, results):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.query = query",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.results = results",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Node(object):\n\n        self.results = results\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class Node(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.results = results",
          "successors": []
        }
      ]
    },
    {
      "name": "LinkedList",
      "type": "class",
      "start_line": 32,
      "end_line": 47,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.head = None\n        self.tail = None",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.head = None",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.tail = None",
              "successors": []
            }
          ]
        },
        {
          "name": "move_to_front",
          "type": "function",
          "start_line": 38,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    def move_to_front(self, node):\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def move_to_front(self, node):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "...",
              "successors": []
            }
          ]
        },
        {
          "name": "append_to_front",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def append_to_front(self, node):\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def append_to_front(self, node):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "...",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_from_tail",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove_from_tail(self):\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def remove_from_tail(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "...",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class LinkedList(object):\n\n        self.tail = None\n\n        ...\n\n        ...\n\n        ...\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class LinkedList(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.tail = None",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "...",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "...",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "...",
          "successors": []
        }
      ]
    },
    {
      "name": "Cache",
      "type": "class",
      "start_line": 48,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 50,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, MAX_SIZE):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.MAX_SIZE = MAX_SIZE",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.size = 0",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.lookup = {}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.linked_list = LinkedList()",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 56,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results",
          "blocks": [
            {
              "id": 1,
              "label": "node = self.lookup[query]",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if node is None:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "return None",
              "successors": []
            },
            {
              "id": 4,
              "label": "self.linked_list.move_to_front(node)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "return node.results",
              "successors": []
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 67,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
          "blocks": [
            {
              "id": 1,
              "label": "node = self.map[query]",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if node is not None:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "node.results = results",
              "successors": [
                5
              ]
            },
            {
              "id": 4,
              "label": "if self.size == self.MAX_SIZE:",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 5,
              "label": "self.linked_list.move_to_front(node)",
              "successors": [
                8
              ]
            },
            {
              "id": 6,
              "label": "self.lookup.pop(self.linked_list.tail.query, None)",
              "successors": [
                9
              ]
            },
            {
              "id": 7,
              "label": "self.size += 1",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "End of if-else block",
              "successors": []
            },
            {
              "id": 9,
              "label": "new_node = Node(query, results)",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "self.linked_list.append_to_front(new_node)",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "self.lookup[query] = new_node",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Cache(object):\n\n        self.linked_list = LinkedList()\n\n        return node.results\n\n            self.lookup[query] = new_node",
      "blocks": [
        {
          "id": 1,
          "label": "class Cache(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.linked_list = LinkedList()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return node.results",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self.lookup[query] = new_node",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\n\n\n\n\n\n            self.lookup[query] = new_node",
  "blocks": [
    {
      "id": 1,
      "label": "self.lookup[query] = new_node",
      "successors": []
    }
  ]
}