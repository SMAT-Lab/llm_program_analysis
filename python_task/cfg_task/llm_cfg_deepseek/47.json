{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 75,
  "functions": [
    {
      "name": "_log_prefix",
      "type": "function",
      "start_line": 15,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
      "blocks": [
        {
          "id": 1,
          "label": "def _log_prefix(resource_name: str, conn_id: str):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
          "successors": []
        }
      ]
    },
    {
      "name": "conn_retry",
      "type": "function",
      "start_line": 24,
      "end_line": 75,
      "functions": [
        {
          "name": "on_retry",
          "type": "function",
          "start_line": 34,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
          "blocks": [
            {
              "id": 1,
              "label": "def on_retry(retry_state):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "prefix = _log_prefix(resource_name, conn_id)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "exception = retry_state.outcome.exception()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
              "successors": []
            }
          ]
        },
        {
          "name": "decorator",
          "type": "function",
          "start_line": 39,
          "end_line": 74,
          "functions": [
            {
              "name": "sync_wrapper",
              "type": "function",
              "start_line": 50,
              "end_line": 59,
              "functions": [],
              "classes": [],
              "simplified_code": "        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
              "blocks": [
                {
                  "id": 1,
                  "label": "def sync_wrapper(*args, **kwargs):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "prefix = _log_prefix(resource_name, conn_id)",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "logger.info(f\"{prefix} {action_name} started...\")",
                  "successors": [
                    4
                  ]
                },
                {
                  "id": 4,
                  "label": "try:",
                  "successors": [
                    5
                  ]
                },
                {
                  "id": 5,
                  "label": "result = wrapped_func(*args, **kwargs)",
                  "successors": [
                    6
                  ]
                },
                {
                  "id": 6,
                  "label": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                  "successors": [
                    7
                  ]
                },
                {
                  "id": 7,
                  "label": "return result",
                  "successors": [
                    9
                  ]
                },
                {
                  "id": 8,
                  "label": "except Exception as e:",
                  "successors": [
                    9
                  ]
                },
                {
                  "id": 9,
                  "label": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                  "successors": [
                    10
                  ]
                },
                {
                  "id": 10,
                  "label": "raise",
                  "successors": []
                }
              ]
            },
            {
              "name": "async_wrapper",
              "type": "function",
              "start_line": 62,
              "end_line": 71,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
              "blocks": [
                {
                  "id": 1,
                  "label": "async def async_wrapper(*args, **kwargs):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "prefix = _log_prefix(resource_name, conn_id)",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "logger.info(f\"{prefix} {action_name} started...\")",
                  "successors": [
                    4
                  ]
                },
                {
                  "id": 4,
                  "label": "try:",
                  "successors": [
                    5
                  ]
                },
                {
                  "id": 5,
                  "label": "result = await wrapped_func(*args, **kwargs)",
                  "successors": [
                    6
                  ]
                },
                {
                  "id": 6,
                  "label": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                  "successors": [
                    7
                  ]
                },
                {
                  "id": 7,
                  "label": "return result",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "except Exception as e:",
                  "successors": [
                    9
                  ]
                },
                {
                  "id": 9,
                  "label": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                  "successors": [
                    10
                  ]
                },
                {
                  "id": 10,
                  "label": "raise",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n                raise\n\n        @wraps(func)\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper\n",
          "blocks": [
            {
              "id": 1,
              "label": "def decorator(func):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "is_coroutine = asyncio.iscoroutinefunction(func)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "retry_decorator = retry(stop=stop_after_attempt(max_retry + 1), wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait), before_sleep=on_retry, reraise=True)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "wrapped_func = retry_decorator(func)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "@wraps(func)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "raise",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "@wraps(func)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "raise",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "return async_wrapper if is_coroutine else sync_wrapper",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n    conn_id = str(uuid4())\n\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n\n\n    return decorator",
      "blocks": [
        {
          "id": 1,
          "label": "def conn_retry(resource_name: str, action_name: str, max_retry: int = 5, multiplier: int = 1, min_wait: float = 1, max_wait: float = 30):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "conn_id = str(uuid4())",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return decorator",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\n\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nfrom backend.util.process import get_service_name\n\nlogger = logging.getLogger(__name__)\n\n\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"\n\n\n    return decorator",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import logging",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import os",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import threading",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from functools import wraps",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from uuid import uuid4",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from tenacity import retry, stop_after_attempt, wait_exponential",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.util.process import get_service_name",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return decorator",
      "successors": []
    }
  ]
}