{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [],
  "classes": [
    {
      "name": "DatabaseManager",
      "type": "class",
      "start_line": 33,
      "end_line": 94,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.use_db = True",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.use_redis = True",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.event_queue = RedisExecutionEventBus()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_port",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_port(cls) -> int:\n        return config.database_api_port",
          "blocks": [
            {
              "id": 1,
              "label": "def get_port(cls) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return config.database_api_port",
              "successors": []
            }
          ]
        },
        {
          "name": "send_execution_update",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)",
          "blocks": [
            {
              "id": 1,
              "label": "def send_execution_update(self, execution_result: ExecutionResult):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.event_queue.publish(execution_result)",
              "successors": []
            }
          ]
        },
        {
          "name": "exposed_run_and_wait",
          "type": "function",
          "start_line": 49,
          "end_line": 62,
          "functions": [
            {
              "name": "wrapper",
              "type": "function",
              "start_line": 54,
              "end_line": 57,
              "functions": [],
              "classes": [],
              "simplified_code": "        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
              "blocks": [
                {
                  "id": 1,
                  "label": "def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "coroutine = f(*args, **kwargs)",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "res = self.run_and_wait(coroutine)",
                  "successors": [
                    4
                  ]
                },
                {
                  "id": 4,
                  "label": "return res",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper",
          "blocks": [
            {
              "id": 1,
              "label": "def exposed_run_and_wait(f: Callable[P, Coroutine[None, None, R]]) -> Callable[Concatenate[object, P], R]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "@expose",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "@wraps(f)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "return res",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "# Register serializers for annotations on bare function",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "register_pydantic_serializers(f)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return wrapper",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class DatabaseManager(AppService):\n        self.event_queue = RedisExecutionEventBus()\n\n    @classmethod\n        return config.database_api_port\n\n    @expose\n        self.event_queue.publish(execution_result)\n\n    @staticmethod\n        return wrapper\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
      "blocks": [
        {
          "id": 1,
          "label": "class DatabaseManager(AppService):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.event_queue = RedisExecutionEventBus()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@classmethod",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return config.database_api_port",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "@expose",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "self.event_queue.publish(execution_result)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "@staticmethod",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return wrapper",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "# Executions",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "create_graph_execution = exposed_run_and_wait(create_graph_execution)",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "get_execution_results = exposed_run_and_wait(get_execution_results)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "get_latest_execution = exposed_run_and_wait(get_latest_execution)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "update_execution_status = exposed_run_and_wait(update_execution_status)",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "upsert_execution_input = exposed_run_and_wait(upsert_execution_input)",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "upsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "# Graphs",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "get_node = exposed_run_and_wait(get_node)",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "get_graph = exposed_run_and_wait(get_graph)",
          "successors": [
            22
          ]
        },
        {
          "id": 22,
          "label": "# Credits",
          "successors": [
            23
          ]
        },
        {
          "id": 23,
          "label": "user_credit_model = get_user_credit_model()",
          "successors": [
            24
          ]
        },
        {
          "id": 24,
          "label": "get_or_refill_credit = cast(Callable[[Any, str], int], exposed_run_and_wait(user_credit_model.get_or_refill_credit))",
          "successors": [
            25
          ]
        },
        {
          "id": 25,
          "label": "spend_credits = cast(Callable[[Any, str, int, str, dict[str, str], float, float], int], exposed_run_and_wait(user_credit_model.spend_credits))",
          "successors": [
            26
          ]
        },
        {
          "id": 26,
          "label": "# User + User Metadata + User Integrations",
          "successors": [
            27
          ]
        },
        {
          "id": 27,
          "label": "get_user_metadata = exposed_run_and_wait(get_user_metadata)",
          "successors": [
            28
          ]
        },
        {
          "id": 28,
          "label": "update_user_metadata = exposed_run_and_wait(update_user_metadata)",
          "successors": [
            29
          ]
        },
        {
          "id": 29,
          "label": "get_user_integrations = exposed_run_and_wait(get_user_integrations)",
          "successors": [
            30
          ]
        },
        {
          "id": 30,
          "label": "update_user_integrations = exposed_run_and_wait(update_user_integrations)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()\n\n\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
  "blocks": [
    {
      "id": 1,
      "label": "from functools import wraps",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.credit import get_user_credit_model",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.execution import ( ExecutionResult, RedisExecutionEventBus, create_graph_execution, get_execution_results, get_incomplete_executions, get_latest_execution, update_execution_status, update_graph_execution_stats, update_node_execution_stats, upsert_execution_input, upsert_execution_output )",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.data.graph import get_graph, get_node",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.data.user import ( get_user_integrations, get_user_metadata, update_user_integrations, update_user_metadata )",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.util.service import AppService, expose, register_pydantic_serializers",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.util.settings import Config",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "P = ParamSpec(\"P\")",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "R = TypeVar(\"R\")",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "config = Config()",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "update_user_integrations = exposed_run_and_wait(update_user_integrations)",
      "successors": []
    }
  ]
}