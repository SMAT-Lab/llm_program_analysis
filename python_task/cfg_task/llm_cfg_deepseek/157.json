{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [
    {
      "name": "connect",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": "def connect() -> Redis:\n    global connection\n    if connection:\n        return connection\n\n    c = Redis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n    c.ping()\n    connection = c\n    return connection",
      "blocks": [
        {
          "id": 1,
          "label": "def connect() -> Redis:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global connection",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if connection:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return connection",
          "successors": []
        },
        {
          "id": 5,
          "label": "c = Redis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True,)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "c.ping()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "connection = c",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return connection",
          "successors": []
        }
      ]
    },
    {
      "name": "disconnect",
      "type": "function",
      "start_line": 39,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": "def disconnect():\n    global connection\n    if connection:\n        connection.close()\n    connection = None",
      "blocks": [
        {
          "id": 1,
          "label": "def disconnect():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global connection",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if connection:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "connection.close()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "connection = None",
          "successors": []
        }
      ]
    },
    {
      "name": "get_redis",
      "type": "function",
      "start_line": 46,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_redis(auto_connect: bool = True) -> Redis:\n    if connection:\n        return connection\n    if auto_connect:\n        return connect()\n    raise RuntimeError(\"Redis connection is not established\")",
      "blocks": [
        {
          "id": 1,
          "label": "if connection:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return connection",
          "successors": []
        },
        {
          "id": 3,
          "label": "if auto_connect:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return connect()",
          "successors": []
        },
        {
          "id": 5,
          "label": "raise RuntimeError(\"Redis connection is not established\")",
          "successors": []
        }
      ]
    },
    {
      "name": "connect_async",
      "type": "function",
      "start_line": 55,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "async def connect_async() -> AsyncRedis:\n    global connection_async\n    if connection_async:\n        return connection_async\n\n    c = AsyncRedis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n    await c.ping()\n    connection_async = c\n    return connection_async",
      "blocks": [
        {
          "id": 1,
          "label": "async def connect_async() -> AsyncRedis:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global connection_async",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if connection_async:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return connection_async",
          "successors": []
        },
        {
          "id": 5,
          "label": "c = AsyncRedis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True,)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "await c.ping()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "connection_async = c",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return connection_async",
          "successors": []
        }
      ]
    },
    {
      "name": "disconnect_async",
      "type": "function",
      "start_line": 72,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "simplified_code": "async def disconnect_async():\n    global connection_async\n    if connection_async:\n        await connection_async.close()\n    connection_async = None",
      "blocks": [
        {
          "id": 1,
          "label": "async def disconnect_async():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global connection_async",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if connection_async:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "await connection_async.close()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "connection_async = None",
          "successors": []
        }
      ]
    },
    {
      "name": "get_redis_async",
      "type": "function",
      "start_line": 79,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_redis_async(auto_connect: bool = True) -> AsyncRedis:\n    if connection_async:\n        return connection_async\n    if auto_connect:\n        return await connect_async()\n    raise RuntimeError(\"AsyncRedis connection is not established\")",
      "blocks": [
        {
          "id": 1,
          "label": "if connection_async:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return connection_async",
          "successors": []
        },
        {
          "id": 3,
          "label": "if auto_connect:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "return await connect_async()",
          "successors": []
        },
        {
          "id": 5,
          "label": "raise RuntimeError(\"AsyncRedis connection is not established\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import logging\nimport os\n\nfrom dotenv import load_dotenv\nfrom redis import Redis\nfrom redis.asyncio import Redis as AsyncRedis\n\nfrom backend.util.retry import conn_retry\n\nload_dotenv()\n\nHOST = os.getenv(\"REDIS_HOST\", \"localhost\")\nPORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))\nPASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\")\n\nlogger = logging.getLogger(__name__)\nconnection: Redis | None = None\nconnection_async: AsyncRedis | None = None\n\n\n@conn_retry(\"Redis\", \"Acquiring connection\")\n    return connection\n\n\n@conn_retry(\"Redis\", \"Releasing connection\")\n    connection = None\n\n\n    raise RuntimeError(\"Redis connection is not established\")\n\n\n@conn_retry(\"AsyncRedis\", \"Acquiring connection\")\n    return connection_async\n\n\n@conn_retry(\"AsyncRedis\", \"Releasing connection\")\n    connection_async = None\n\n\n    raise RuntimeError(\"AsyncRedis connection is not established\")",
  "blocks": [
    {
      "id": 1,
      "label": "import statements and environment variables setup",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "logger setup and connection variables initialization",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "@conn_retry(\"Redis\", \"Acquiring connection\")",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "return connection",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "@conn_retry(\"Redis\", \"Releasing connection\")",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "connection = None",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "raise RuntimeError(\"Redis connection is not established\")",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "@conn_retry(\"AsyncRedis\", \"Acquiring connection\")",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "return connection_async",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "@conn_retry(\"AsyncRedis\", \"Releasing connection\")",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "connection_async = None",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "raise RuntimeError(\"AsyncRedis connection is not established\")",
      "successors": []
    }
  ]
}