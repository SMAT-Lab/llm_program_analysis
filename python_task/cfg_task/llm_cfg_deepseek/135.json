{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [],
  "classes": [
    {
      "name": "HitCounts",
      "type": "class",
      "start_line": 6,
      "end_line": 46,
      "functions": [
        {
          "name": "extract_url",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def extract_url(self, line):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_year_month",
          "type": "function",
          "start_line": 12,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def extract_year_month(self, line):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "mapper",
          "type": "function",
          "start_line": 16,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1",
          "blocks": [
            {
              "id": 1,
              "label": "def mapper(self, _, line):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "url = self.extract_url(line)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "period = self.extract_year_month(line)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "yield (period, url), 1",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer",
          "type": "function",
          "start_line": 29,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n        yield key, sum(values)",
          "blocks": [
            {
              "id": 1,
              "label": "def reducer(self, key, values):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "yield key, sum(values)",
              "successors": []
            }
          ]
        },
        {
          "name": "steps",
          "type": "function",
          "start_line": 37,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
          "blocks": [
            {
              "id": 1,
              "label": "def steps(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class HitCounts(MRJob):\n\n        pass\n\n        pass\n\n        yield (period, url), 1\n\n        yield key, sum(values)\n\n        ]\n\n\nif __name__ == '__main__':\n    HitCounts.run()",
      "blocks": [
        {
          "id": 1,
          "label": "class HitCounts(MRJob):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "pass",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "yield (period, url), 1",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "yield key, sum(values)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "]",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if __name__ == '__main__':",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "HitCounts.run()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\n    HitCounts.run()",
  "blocks": [
    {
      "id": 1,
      "label": "from mrjob.job import MRJob",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "class HitCounts(MRJob):",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "def mapper(self, _, line):",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "for word in line.split():",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "yield word.lower(), 1",
      "successors": [
        4
      ]
    },
    {
      "id": 6,
      "label": "def reducer(self, word, counts):",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "yield word, sum(counts)",
      "successors": []
    },
    {
      "id": 8,
      "label": "if __name__ == '__main__':",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "HitCounts.run()",
      "successors": []
    }
  ]
}