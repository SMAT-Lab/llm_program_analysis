{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 234,
  "functions": [
    {
      "name": "make_lowpass",
      "type": "function",
      "start_line": 13,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "def make_lowpass(frequency: int, samplerate: int, q_factor: float = 1 / sqrt(2)) -> IIRFilter:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_sin = sin(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "_cos = cos(w0)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "b0 = (1 - _cos) / 2",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "b1 = 1 - _cos",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "a0 = 1 + alpha",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "a1 = -2 * _cos",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "a2 = 1 - alpha",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "filt = IIRFilter(2)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_highpass",
      "type": "function",
      "start_line": 43,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_sin = sin(w0)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_cos = cos(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "b0 = (1 + _cos) / 2",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "b1 = -1 - _cos",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "a0 = 1 + alpha",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "a1 = -2 * _cos",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "a2 = 1 - alpha",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "filt = IIRFilter(2)",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_bandpass",
      "type": "function",
      "start_line": 73,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "def make_bandpass(frequency: int, samplerate: int, q_factor: float = 1 / sqrt(2)) -> IIRFilter:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_sin = sin(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "_cos = cos(w0)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "b0 = _sin / 2",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "b1 = 0",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "b2 = -b0",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "a0 = 1 + alpha",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "a1 = -2 * _cos",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "a2 = 1 - alpha",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "filt = IIRFilter(2)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_allpass",
      "type": "function",
      "start_line": 104,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_sin = sin(w0)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_cos = cos(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "b0 = 1 - alpha",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "b1 = -2 * _cos",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "b2 = 1 + alpha",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "filt = IIRFilter(2)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "filt.set_coefficients([b2, b1, b0], [b0, b1, b2])",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_peak",
      "type": "function",
      "start_line": 131,
      "end_line": 160,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_sin = sin(w0)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_cos = cos(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "big_a = 10 ** (gain_db / 40)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "b0 = 1 + alpha * big_a",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "b1 = -2 * _cos",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "b2 = 1 - alpha * big_a",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "a0 = 1 + alpha / big_a",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "a1 = -2 * _cos",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "a2 = 1 - alpha / big_a",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "filt = IIRFilter(2)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_lowshelf",
      "type": "function",
      "start_line": 163,
      "end_line": 197,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_sin = sin(w0)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_cos = cos(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "big_a = 10 ** (gain_db / 40)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "pmc = (big_a + 1) - (big_a - 1) * _cos",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "ppmc = (big_a + 1) + (big_a - 1) * _cos",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "mpc = (big_a - 1) - (big_a + 1) * _cos",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "pmpc = (big_a - 1) + (big_a + 1) * _cos",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "aa2 = 2 * sqrt(big_a) * alpha",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "b0 = big_a * (pmc + aa2)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "b1 = 2 * big_a * mpc",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "b2 = big_a * (pmc - aa2)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "a0 = ppmc + aa2",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "a1 = -2 * pmpc",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "a2 = ppmc - aa2",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "filt = IIRFilter(2)",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_highshelf",
      "type": "function",
      "start_line": 200,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
      "blocks": [
        {
          "id": 1,
          "label": "w0 = tau * frequency / samplerate",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "_sin = sin(w0)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "_cos = cos(w0)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "alpha = _sin / (2 * q_factor)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "big_a = 10 ** (gain_db / 40)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "pmc = (big_a + 1) - (big_a - 1) * _cos",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "ppmc = (big_a + 1) + (big_a - 1) * _cos",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "mpc = (big_a - 1) - (big_a + 1) * _cos",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "pmpc = (big_a - 1) + (big_a + 1) * _cos",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "aa2 = 2 * sqrt(big_a) * alpha",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "b0 = big_a * (ppmc + aa2)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "b1 = -2 * big_a * pmpc",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "b2 = big_a * (ppmc - aa2)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "a0 = pmc + aa2",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "a1 = 2 * mpc",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "a2 = pmc - aa2",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "filt = IIRFilter(2)",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "return filt",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from math import cos, sin, sqrt, tau\n\nfrom audio_filters.iir_filter import IIRFilter\n\n\"\"\"\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n\"\"\"\n\n\n    return filt\n\n\n    return filt\n\n\n    return filt\n\n\n    return filt\n\n\n    return filt\n\n\n    return filt\n\n\n    return filt",
  "blocks": [
    {
      "id": 1,
      "label": "from math import cos, sin, sqrt, tau",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from audio_filters.iir_filter import IIRFilter",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "Create 2nd-order IIR filters with Butterworth design.",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "Code based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "Alternatively you can use scipy.signal.butter, which should yield the same results.",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "return filt",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return filt",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "return filt",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "return filt",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "return filt",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "return filt",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "return filt",
      "successors": []
    }
  ]
}