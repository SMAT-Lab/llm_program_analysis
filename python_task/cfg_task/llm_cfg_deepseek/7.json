{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 234,
  "functions": [
    {
      "name": "get_user_credit_model",
      "type": "function",
      "start_line": 226,
      "end_line": 230,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)",
      "blocks": [
        {
          "id": 1,
          "label": "if config.enable_credit.lower() == \"true\":",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return UserCredit(config.num_user_credits_refill)",
          "successors": []
        },
        {
          "id": 3,
          "label": "return DisabledUserCredit(0)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_block_costs",
      "type": "function",
      "start_line": 233,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
      "blocks": [
        {
          "id": 1,
          "label": "def get_block_costs() -> dict[str, list[BlockCost]]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "UserCreditBase",
      "type": "class",
      "start_line": 17,
      "end_line": 66,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 18,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, num_user_credits_refill: int):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.num_user_credits_refill = num_user_credits_refill",
              "successors": []
            }
          ]
        },
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 32,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def spend_credits(self, user_id: str, user_credit: int, block_id: str, input_data: BlockInput, data_size: float, run_time: float) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 58,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, user_id: str, amount: int):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class UserCreditBase(ABC):\n        self.num_user_credits_refill = num_user_credits_refill\n\n    @abstractmethod\n        pass\n\n    @abstractmethod\n        pass\n\n    @abstractmethod\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class UserCreditBase(ABC):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.num_user_credits_refill = num_user_credits_refill",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@abstractmethod",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "pass",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "@abstractmethod",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "pass",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "@abstractmethod",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "pass",
          "successors": []
        }
      ]
    },
    {
      "name": "UserCredit",
      "type": "class",
      "start_line": 69,
      "end_line": 212,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 70,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "cur_time = self.time_now()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "nxt_month = (cur_month.replace(month=cur_month.month + 1) if cur_month.month < 12 else cur_month.replace(year=cur_month.year + 1, month=1))",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "user_credit = await CreditTransaction.prisma().group_by(by=['userId'], sum={'amount': True}, where={'userId': user_id, 'createdAt': {'gte': cur_month, 'lt': nxt_month}, 'isActive': True})",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if user_credit:",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "credit_sum = user_credit[0].get('_sum') or {}",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "key = f'MONTHLY-CREDIT-TOP-UP-{cur_month}'",
              "successors": [
                10
              ]
            },
            {
              "id": 9,
              "label": "return credit_sum.get('amount', 0)",
              "successors": []
            },
            {
              "id": 10,
              "label": "try:",
              "successors": [
                11,
                12
              ]
            },
            {
              "id": 11,
              "label": "await CreditTransaction.prisma().create(data={'amount': self.num_user_credits_refill, 'type': CreditTransactionType.TOP_UP, 'userId': user_id, 'transactionKey': key, 'createdAt': self.time_now()})",
              "successors": [
                13
              ]
            },
            {
              "id": 12,
              "label": "except UniqueViolationError:",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "return self.num_user_credits_refill",
              "successors": []
            }
          ]
        },
        {
          "name": "time_now",
          "type": "function",
          "start_line": 111,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    def time_now():\n        return datetime.now(timezone.utc)",
          "blocks": [
            {
              "id": 1,
              "label": "def time_now():",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return datetime.now(timezone.utc)",
              "successors": []
            }
          ]
        },
        {
          "name": "_block_usage_cost",
          "type": "function",
          "start_line": 114,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}",
          "blocks": [
            {
              "id": 1,
              "label": "block_costs = BLOCK_COSTS.get(type(block))",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if not block_costs:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "return 0, {}",
              "successors": []
            },
            {
              "id": 4,
              "label": "for block_cost in block_costs:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if not self._is_cost_filter_match(block_cost.cost_filter, input_data):",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "continue",
              "successors": [
                4
              ]
            },
            {
              "id": 7,
              "label": "if block_cost.cost_type == BlockCostType.RUN:",
              "successors": [
                8,
                9
              ]
            },
            {
              "id": 8,
              "label": "return block_cost.cost_amount, block_cost.cost_filter",
              "successors": []
            },
            {
              "id": 9,
              "label": "if block_cost.cost_type == BlockCostType.SECOND:",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 10,
              "label": "return (int(run_time * block_cost.cost_amount), block_cost.cost_filter)",
              "successors": []
            },
            {
              "id": 11,
              "label": "if block_cost.cost_type == BlockCostType.BYTE:",
              "successors": [
                12,
                13
              ]
            },
            {
              "id": 12,
              "label": "return (int(data_size * block_cost.cost_amount), block_cost.cost_filter)",
              "successors": []
            },
            {
              "id": 13,
              "label": "return 0, {}",
              "successors": []
            }
          ]
        },
        {
          "name": "_is_cost_filter_match",
          "type": "function",
          "start_line": 146,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "return cost_filter == input_data",
              "successors": []
            },
            {
              "id": 3,
              "label": "return all((not input_data.get(k) and not v) or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k])) for k, v in cost_filter.items())",
              "successors": []
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 164,
          "end_line": 202,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost",
          "blocks": [
            {
              "id": 1,
              "label": "block = get_block(block_id)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if not block:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "raise ValueError(f\"Block not found: {block_id}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "cost, matching_filter = self._block_usage_cost(block=block, input_data=input_data, data_size=data_size, run_time=run_time)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if cost <= 0:",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "return 0",
              "successors": []
            },
            {
              "id": 7,
              "label": "if validate_balance and user_credit < cost:",
              "successors": [
                8,
                9
              ]
            },
            {
              "id": 8,
              "label": "raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
              "successors": []
            },
            {
              "id": 9,
              "label": "await CreditTransaction.prisma().create(data={\"userId\": user_id, \"amount\": -cost, \"type\": CreditTransactionType.USAGE, \"blockId\": block.id, \"metadata\": Json({\"block\": block.name, \"input\": matching_filter}), \"createdAt\": self.time_now()})",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "return cost",
              "successors": []
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 204,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, user_id: str, amount: int):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "await CreditTransaction.prisma().create(data={\"userId\": user_id, \"amount\": amount, \"type\": CreditTransactionType.TOP_UP, \"createdAt\": self.time_now()})",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class UserCredit(UserCreditBase):\n        return self.num_user_credits_refill\n\n    @staticmethod\n        return datetime.now(timezone.utc)\n\n        return 0, {}\n\n        )\n\n        return cost\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class UserCredit(UserCreditBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return self.num_user_credits_refill",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@staticmethod",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return datetime.now(timezone.utc)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return 0, {}",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return cost",
          "successors": []
        }
      ]
    },
    {
      "name": "DisabledUserCredit",
      "type": "class",
      "start_line": 215,
      "end_line": 223,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 216,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, *args, **kwargs) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return 0",
              "successors": []
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 219,
          "end_line": 220,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0",
          "blocks": [
            {
              "id": 1,
              "label": "async def spend_credits(self, *args, **kwargs) -> int:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return 0",
              "successors": []
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 222,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, *args, **kwargs):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, *args, **kwargs):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class DisabledUserCredit(UserCreditBase):\n        return 0\n\n        return 0\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class DisabledUserCredit(UserCreditBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return 0",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return 0",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n\nconfig = Config()\n\n\n        pass\n\n\n        )\n\n\n        pass\n\n\n        return DisabledUserCredit(0)\n\n\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABC, abstractmethod",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from datetime import datetime, timezone",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from prisma import Json",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from prisma.enums import CreditTransactionType",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from prisma.errors import UniqueViolationError",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from prisma.models import CreditTransaction",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.block import Block, BlockInput, get_block",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data.block_cost_config import BLOCK_COSTS",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.data.cost import BlockCost, BlockCostType",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "from backend.util.settings import Config",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "config = Config()",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "pass",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "pass",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "return DisabledUserCredit(0)",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
      "successors": []
    }
  ]
}