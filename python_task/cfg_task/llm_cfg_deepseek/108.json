{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "NotionOAuthHandler",
      "type": "class",
      "start_line": 11,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 22,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.client_id = client_id\nself.client_secret = client_secret\nself.redirect_uri = redirect_uri\nself.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\nself.token_url = \"https://api.notion.com/v1/oauth/token\"",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 29,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        params = {\n            \"client_id\": self.client_id,\n            \"redirect_uri\": self.redirect_uri,\n            \"response_type\": \"code\",\n            \"owner\": \"user\",\n            \"state\": state,\n        }\n        return f\"{self.auth_base_url}?{urlencode(params)}\"",
          "blocks": [
            {
              "id": 1,
              "label": "params = {...}",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return f\"{self.auth_base_url}?{urlencode(params)}\"",
              "successors": []
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 39,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        request_body = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": self.redirect_uri,\n        }\n        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n        headers = {\n            \"Authorization\": f\"Basic {auth_str}\",\n            \"Accept\": \"application/json\",\n        }\n        response = requests.post(self.token_url, json=request_body, headers=headers)\n        token_data = response.json()\n        # Email is only available for non-bot users\n        email = (\n            token_data[\"owner\"][\"person\"][\"email\"]\n            if \"person\" in token_data[\"owner\"]\n            and \"email\" in token_data[\"owner\"][\"person\"]\n            else None\n        )\n\n        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=token_data.get(\"workspace_name\"),\n            username=email,\n            access_token=token_data[\"access_token\"],\n            refresh_token=None,\n            access_token_expires_at=None,  # Notion tokens don't expire\n            refresh_token_expires_at=None,\n            scopes=[],\n            metadata={\n                \"owner\": token_data[\"owner\"],\n                \"bot_id\": token_data[\"bot_id\"],\n                \"workspace_id\": token_data[\"workspace_id\"],\n                \"workspace_name\": token_data.get(\"workspace_name\"),\n                \"workspace_icon\": token_data.get(\"workspace_icon\"),\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def exchange_code_for_tokens(self, code: str, scopes: list[str]) -> OAuth2Credentials:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "request_body = {\n    \"grant_type\": \"authorization_code\",\n    \"code\": code,\n    \"redirect_uri\": self.redirect_uri,\n}",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "headers = {\n    \"Authorization\": f\"Basic {auth_str}\",\n    \"Accept\": \"application/json\",\n}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "response = requests.post(self.token_url, json=request_body, headers=headers)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "token_data = response.json()",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "email = (\n    token_data[\"owner\"][\"person\"][\"email\"]\n    if \"person\" in token_data[\"owner\"]\n    and \"email\" in token_data[\"owner\"][\"person\"]\n    else None\n)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "return OAuth2Credentials(\n    provider=self.PROVIDER_NAME,\n    title=token_data.get(\"workspace_name\"),\n    username=email,\n    access_token=token_data[\"access_token\"],\n    refresh_token=None,\n    access_token_expires_at=None,  # Notion tokens don't expire\n    refresh_token_expires_at=None,\n    scopes=[],\n    metadata={\n        \"owner\": token_data[\"owner\"],\n        \"bot_id\": token_data[\"bot_id\"],\n        \"workspace_id\": token_data[\"workspace_id\"],\n        \"workspace_name\": token_data.get(\"workspace_name\"),\n        \"workspace_icon\": token_data.get(\"workspace_icon\"),\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 80,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # Notion doesn't support token revocation\n        return False",
          "blocks": [
            {
              "id": 1,
              "label": "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return False",
              "successors": []
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 84,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Notion doesn't support token refresh\n        return credentials",
          "blocks": [
            {
              "id": 1,
              "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return credentials",
              "successors": []
            }
          ]
        },
        {
          "name": "needs_refresh",
          "type": "function",
          "start_line": 88,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        # Notion access tokens don't expire\n        return False",
          "blocks": [
            {
              "id": 1,
              "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class NotionOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"\n\n    PROVIDER_NAME = ProviderName.NOTION\n\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"\n\n        return f\"{self.auth_base_url}?{urlencode(params)}\"\n\n        )\n\n        return False\n\n        return credentials\n\n        return False",
      "blocks": [
        {
          "id": 1,
          "label": "class NotionOAuthHandler(BaseOAuthHandler):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "PROVIDER_NAME = ProviderName.NOTION",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "self.token_url = \"https://api.notion.com/v1/oauth/token\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return f\"{self.auth_base_url}?{urlencode(params)}\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return False",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return credentials",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "return False",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from base64 import b64encode\nfrom urllib.parse import urlencode\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nfrom .base import BaseOAuthHandler\n\n\n        return False",
  "blocks": [
    {
      "id": 1,
      "label": "from base64 import b64encode",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from urllib.parse import urlencode",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.model import OAuth2Credentials",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.util.request import requests",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from .base import BaseOAuthHandler",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return False",
      "successors": []
    }
  ]
}