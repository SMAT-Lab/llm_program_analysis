{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 99,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DWebhooksManager",
      "type": "class",
      "start_line": 14,
      "end_line": 99,
      "functions": [
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 20,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")\n\n        headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        # Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}\n\n        response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )\n\n        if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")\n\n        webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }\n\n        return \"\", webhook_config",
          "blocks": [
            {
              "id": 1,
              "label": "if not isinstance(credentials, APIKeyCredentials):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise ValueError(\"API key is required to register a webhook\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "payload = {\"endPoint\": ingress_url}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if not response.ok:",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")",
              "successors": []
            },
            {
              "id": 8,
              "label": "webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "return \"\", webhook_config",
              "successors": []
            }
          ]
        },
        {
          "name": "validate_payload",
          "type": "function",
          "start_line": 60,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n\n        payload = await request.json()\n\n        # Validate required fields from Slant3D API spec\n        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]\n        missing_fields = [field for field in required_fields if field not in payload]\n\n        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n\n        # Normalize payload structure\n        normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }\n\n        # Currently Slant3D only sends shipping notifications\n        # Convert status to lowercase for event format compatibility\n        event_type = f\"order.{payload['status'].lower()}\"\n\n        return normalized_payload, event_type",
          "blocks": [
            {
              "id": 1,
              "label": "payload = await request.json()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "missing_fields = [field for field in required_fields if field not in payload]",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if missing_fields:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")",
              "successors": []
            },
            {
              "id": 6,
              "label": "normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "event_type = f\"order.{payload['status'].lower()}\"",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "return normalized_payload, event_type",
              "successors": []
            }
          ]
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 88,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n        # Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "logger.warning(f\"Warning: Manual deregistration required for webhook {webhook.id}\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = \"https://www.slant3dapi.com/api\"\n\n        return \"\", webhook_config\n\n    @classmethod\n        return normalized_payload, event_type\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DWebhooksManager(BaseWebhooksManager):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "PROVIDER_NAME = ProviderName.SLANT3D",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "BASE_URL = \"https://www.slant3dapi.com/api\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return \"\", webhook_config",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "@classmethod",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return normalized_payload, event_type",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\n\nimport requests\nfrom fastapi import Request\n\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import requests",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from fastapi import Request",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data import integrations",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.data.model import APIKeyCredentials, Credentials",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.integrations.webhooks._base import BaseWebhooksManager",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "pass",
      "successors": []
    }
  ]
}