{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 49,
  "functions": [
    {
      "name": "test_conn_retry_sync_function",
      "type": "function",
      "start_line": 8,
      "end_line": 26,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 12,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"",
          "blocks": [
            {
              "id": 1,
              "label": "def test_function():",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "nonlocal retry_count\nretry_count -= 1",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if retry_count > 0:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "raise ValueError(\"Test error\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "return \"Success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"",
      "blocks": [
        {
          "id": 1,
          "label": "def test_conn_retry_sync_function():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "retry_count = 0",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return \"Success\"",
          "successors": []
        },
        {
          "id": 5,
          "label": "retry_count = 2\n    res = test_function()\n    assert res == \"Success\"",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "retry_count = 100",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_conn_retry_async_function",
      "type": "function",
      "start_line": 30,
      "end_line": 49,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 34,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"",
          "blocks": [
            {
              "id": 1,
              "label": "nonlocal retry_count\nawait asyncio.sleep(1)\nretry_count -= 1",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if retry_count > 0:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "raise ValueError(\"Test error\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "return \"Success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"",
      "blocks": [
        {
          "id": 1,
          "label": "retry_count = 0",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\nasync def test_function():\n    if retry_count == 1:\n        raise ValueError(\"Test error\")\n    return \"Success\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "retry_count = 2\nres = await test_function()\nassert res == \"Success\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "retry_count = 100\nwith pytest.raises(ValueError) as e:\n    await test_function()\n    assert str(e.value) == \"Test error\"",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry\n\n\n        assert str(e.value) == \"Test error\"\n\n\n@pytest.mark.asyncio\n        assert str(e.value) == \"Test error\"",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry",
      "successors": []
    },
    {
      "id": 2,
      "label": "assert str(e.value) == \"Test error\"",
      "successors": []
    },
    {
      "id": 3,
      "label": "@pytest.mark.asyncio\n        assert str(e.value) == \"Test error\"",
      "successors": []
    }
  ]
}