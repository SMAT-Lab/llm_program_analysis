{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 131,
  "functions": [
    {
      "name": "is_valid",
      "type": "function",
      "start_line": 4,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True",
      "blocks": [
        {
          "id": 1,
          "label": "for i in range(len(word)):",
          "successors": [
            2,
            5
          ]
        },
        {
          "id": 2,
          "label": "if vertical:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "if row + i >= len(puzzle) or puzzle[row + i][col] != '':\n    return False",
          "successors": [
            1
          ]
        },
        {
          "id": 4,
          "label": "elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != '':\n    return False",
          "successors": [
            1
          ]
        },
        {
          "id": 5,
          "label": "return True",
          "successors": []
        }
      ]
    },
    {
      "name": "place_word",
      "type": "function",
      "start_line": 36,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": "def place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for i, char in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char",
      "blocks": [
        {
          "id": 1,
          "label": "for i, char in enumerate(word):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "if vertical:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 3,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "label": "puzzle[row + i][col] = char",
          "successors": [
            1
          ]
        },
        {
          "id": 5,
          "label": "puzzle[row][col + i] = char",
          "successors": [
            1
          ]
        }
      ]
    },
    {
      "name": "remove_word",
      "type": "function",
      "start_line": 59,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "def remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = \"\"\n        else:\n            puzzle[row][col + i] = \"\"",
      "blocks": [
        {
          "id": 1,
          "label": "for i in range(len(word)):",
          "successors": [
            2,
            4
          ]
        },
        {
          "id": 2,
          "label": "if vertical:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "puzzle[row + i][col] = \"\"",
          "successors": [
            1
          ]
        },
        {
          "id": 4,
          "label": "puzzle[row][col + i] = \"\"",
          "successors": [
            1
          ]
        }
      ]
    },
    {
      "name": "solve_crossword",
      "type": "function",
      "start_line": 82,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == \"\":\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True",
      "blocks": [
        {
          "id": 1,
          "label": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):",
          "successors": [
            2,
            9
          ]
        },
        {
          "id": 2,
          "label": "if puzzle[row][col] == \"\":",
          "successors": [
            3,
            8
          ]
        },
        {
          "id": 3,
          "label": "for word in words:\n    for vertical in [True, False]:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if is_valid(puzzle, word, row, col, vertical):",
          "successors": [
            5,
            3
          ]
        },
        {
          "id": 5,
          "label": "place_word(puzzle, word, row, col, vertical)\nwords.remove(word)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if solve_crossword(puzzle, words):",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "return True",
          "successors": []
        },
        {
          "id": 8,
          "label": "words.append(word)\nremove_word(puzzle, word, row, col, vertical)",
          "successors": [
            3
          ]
        },
        {
          "id": 9,
          "label": "return False",
          "successors": []
        },
        {
          "id": 10,
          "label": "return True",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\n    return True\n\n\n            puzzle[row][col + i] = char\n\n\n            puzzle[row][col + i] = \"\"\n\n\n    return True\n\n\nif __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n    if solve_crossword(PUZZLE, WORDS):\n        print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))\n    else:\n        print(\"No solution found:\")",
  "blocks": [
    {
      "id": 1,
      "label": "return True",
      "successors": []
    },
    {
      "id": 2,
      "label": "puzzle[row][col + i] = char",
      "successors": []
    },
    {
      "id": 3,
      "label": "puzzle[row][col + i] = \"\"",
      "successors": []
    },
    {
      "id": 4,
      "label": "return True",
      "successors": []
    },
    {
      "id": 5,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        6,
        10
      ]
    },
    {
      "id": 6,
      "label": "PUZZLE = [[\"\"] * 3 for _ in range(3)]\nWORDS = [\"cat\", \"dog\", \"car\"]\n\nif solve_crossword(PUZZLE, WORDS):",
      "successors": [
        7,
        9
      ]
    },
    {
      "id": 7,
      "label": "print(\"Solution found:\")",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "for row in PUZZLE:\n    print(\" \".join(row))",
      "successors": [
        10
      ]
    },
    {
      "id": 9,
      "label": "print(\"No solution found:\")",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "",
      "successors": []
    }
  ]
}