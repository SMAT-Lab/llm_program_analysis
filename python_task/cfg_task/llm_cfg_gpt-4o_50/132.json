{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [
    {
      "name": "get_1s_count",
      "type": "function",
      "start_line": 1,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    count = 0\n    while number:\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n    return count",
      "blocks": [
        {
          "id": 1,
          "label": "if not isinstance(number, int) or number < 0:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise ValueError(\"Input must be a non-negative integer\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "count = 0",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "while number:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "number &= number - 1\ncount += 1",
          "successors": [
            4
          ]
        },
        {
          "id": 6,
          "label": "return count",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "return count",
      "successors": []
    },
    {
      "id": 2,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import doctest\n\ndoctest.testmod()",
      "successors": []
    }
  ]
}