{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "JSONCryptor",
      "type": "class",
      "start_line": 11,
      "end_line": 34,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 12,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, key: Optional[str] = None):\n    # Use provided key or get from environment\n    self.key = key or ENCRYPTION_KEY\n    if not self.key:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise ValueError(\n    \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n)",
              "successors": []
            },
            {
              "id": 3,
              "label": "self.fernet = Fernet(\n    self.key.encode() if isinstance(self.key, str) else self.key\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "encrypt",
          "type": "function",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
          "blocks": [
            {
              "id": 1,
              "label": "def encrypt(self, data: dict) -> str:\n    \"\"\"Encrypt dictionary data to string\"\"\"\n    json_str = json.dumps(data)\n    encrypted = self.fernet.encrypt(json_str.encode())\n    return encrypted.decode()",
              "successors": []
            }
          ]
        },
        {
          "name": "decrypt",
          "type": "function",
          "start_line": 29,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
          "blocks": [
            {
              "id": 1,
              "label": "if not encrypted_str:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "return {}",
              "successors": []
            },
            {
              "id": 3,
              "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "return json.loads(decrypted.decode())",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class JSONCryptor:\n        )\n\n        return encrypted.decode()\n\n        return json.loads(decrypted.decode())",
      "blocks": [
        {
          "id": 1,
          "label": "class JSONCryptor:",
          "successors": [
            2,
            5,
            8,
            10
          ]
        },
        {
          "id": 2,
          "label": "    def __init__(self, secret_key):",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "        self._cipher = AES.new(secret_key, AES.MODE_EAX)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "        self._nonce = self._cipher.nonce",
          "successors": [
            2
          ]
        },
        {
          "id": 5,
          "label": "    def encrypt(self, data):",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "        json_data = json.dumps(data).encode()",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "        encrypted, tag = self._cipher.encrypt_and_digest(json_data)",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 8,
          "label": "        </E>escence:</E>",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "    def decrypt(self_encrypted_tender:</E>ncrypted<since</E>:</E> _instance:) def decrypt(self_encrypted_text): </E>",
          "successors": [
            2
          ]
        },
        {
          "id": 10,
          "label": "        decipher = AES.new(self._cipher.key, AES.MODE_EAX, nonce=self._nonce)",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "        decrypted = decipher.decrypt(encrypted_text)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "        dicipher.verify(encrypted_text)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n\n\n        return json.loads(decrypted.decode())",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "return json.loads(decrypted.decode())",
      "successors": []
    }
  ]
}