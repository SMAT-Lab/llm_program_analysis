{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 73,
  "functions": [],
  "classes": [
    {
      "name": "PagesDataStore",
      "type": "class",
      "start_line": 4,
      "end_line": 32,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 6,
          "end_line": 8,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, db):\n        self.db = db\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, db):\n    self.db = db\n    pass",
              "successors": []
            }
          ]
        },
        {
          "name": "add_link_to_crawl",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def add_link_to_crawl(self, url):\n    \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n    pass",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_link_to_crawl",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def remove_link_to_crawl(self, url):\n    \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n    pass",
              "successors": []
            }
          ]
        },
        {
          "name": "reduce_priority_link_to_crawl",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reduce_priority_link_to_crawl(self, url):\n        \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def reduce_priority_link_to_crawl(self, url):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "\"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\npass",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_max_priority_page",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_max_priority_page(self):\n        \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def extract_max_priority_page(self):\n    \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n    pass",
              "successors": []
            }
          ]
        },
        {
          "name": "insert_crawled_link",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    def insert_crawled_link(self, url, signature):\n        \"\"\"Add the given link to `crawled_links`.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def insert_crawled_link(self, url, signature):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "\"\"\"Add the given link to `crawled_links`.\"\"\"\npass",
              "successors": []
            }
          ]
        },
        {
          "name": "crawled_similar",
          "type": "function",
          "start_line": 30,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    def crawled_similar(self, signature):\n        \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def crawled_similar(self, signature):\n    \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n    pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class PagesDataStore(object):\n\n        pass\n\n        pass\n\n        pass\n\n        pass\n\n        pass\n\n        pass\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class PagesDataStore(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "pass\n\npass\n\npass\n\npass\n\npass\n\npass\n\npass",
          "successors": []
        }
      ]
    },
    {
      "name": "Page",
      "type": "class",
      "start_line": 35,
      "end_line": 45,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 37,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, url, contents, child_urls):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.url = url\nself.contents = contents\nself.child_urls = child_urls\nself.signature = self.create_signature()",
              "successors": []
            }
          ]
        },
        {
          "name": "create_signature",
          "type": "function",
          "start_line": 43,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_signature(self):\n        # Create signature based on url and contents\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def create_signature(self):\n    # Create signature based on url and contents\n    pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Page(object):\n\n        self.signature = self.create_signature()\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class Page(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.signature = self.create_signature()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": []
        }
      ]
    },
    {
      "name": "Crawler",
      "type": "class",
      "start_line": 48,
      "end_line": 73,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 50,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n    self.pages = pages\n    self.data_store = data_store\n    self.reverse_index_queue = reverse_index_queue\n    self.doc_index_queue = doc_index_queue",
              "successors": []
            }
          ]
        },
        {
          "name": "crawl_page",
          "type": "function",
          "start_line": 56,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "    def crawl_page(self, page):\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n        self.reverse_index_queue.generate(page)\n        self.doc_index_queue.generate(page)\n        self.data_store.remove_link_to_crawl(page.url)\n        self.data_store.insert_crawled_link(page.url, page.signature)",
          "blocks": [
            {
              "id": 1,
              "label": "def crawl_page(self, page):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for url in page.child_urls:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "self.data_store.add_link_to_crawl(url)",
              "successors": [
                2
              ]
            },
            {
              "id": 4,
              "label": "self.reverse_index_queue.generate(page)\nself.doc_index_queue.generate(page)\nself.data_store.remove_link_to_crawl(page.url)\nself.data_store.insert_crawled_link(page.url, page.signature)",
              "successors": []
            }
          ]
        },
        {
          "name": "crawl",
          "type": "function",
          "start_line": 64,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    def crawl(self):\n        while True:\n            page = self.data_store.extract_max_priority_page()\n            if page is None:\n                break\n            if self.data_store.crawled_similar(page.signature):\n                self.data_store.reduce_priority_link_to_crawl(page.url)\n            else:\n                self.crawl_page(page)\n            page = self.data_store.extract_max_priority_page()",
          "blocks": [
            {
              "id": 1,
              "label": "def crawl(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "while True:",
              "successors": [
                3,
                6
              ]
            },
            {
              "id": 3,
              "label": "page = self.data_store.extract_max_priority_page()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if page is None:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "break",
              "successors": []
            },
            {
              "id": 6,
              "label": "if self.data_store.crawled_similar(page.signature):",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "self.data_store.reduce_priority_link_to_crawl(page.url)",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "self.crawl_page(page)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "page = self.data_store.extract_max_priority_page()",
              "successors": [
                4
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Crawler(object):\n\n        self.doc_index_queue = doc_index_queue\n\n        self.data_store.insert_crawled_link(page.url, page.signature)\n\n            page = self.data_store.extract_max_priority_page()",
      "blocks": [
        {
          "id": 1,
          "label": "class Crawler(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.doc_index_queue = doc_index_queue",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "self.data_store.insert_crawled_link(page.url, page.signature)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "page = self.data_store.extract_max_priority_page()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\n\n        pass\n\n\n        pass\n\n\n            page = self.data_store.extract_max_priority_page()",
  "blocks": [
    {
      "id": 1,
      "label": "pass",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "pass",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "page = self.data_store.extract_max_priority_page()",
      "successors": []
    }
  ]
}