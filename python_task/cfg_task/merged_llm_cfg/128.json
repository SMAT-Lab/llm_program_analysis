{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [],
  "classes": [
    {
      "name": "BaseOAuthHandler",
      "type": "class",
      "start_line": 12,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 20,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 26,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def get_login_url(self, scopes: list[str], state: str) -> str:\n\"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n...",
              "successors": []
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 33,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "\"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"",
              "successors": []
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 42,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n\"\"\"Implements the token refresh mechanism\"\"\"\n...",
              "successors": []
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n\"\"\"Revokes the given token at provider, returns False if provider does not support it\"\"\"\n...",
              "successors": []
            }
          ]
        },
        {
          "name": "refresh_tokens",
          "type": "function",
          "start_line": 55,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)",
          "blocks": [
            {
              "id": 1,
              "label": "if credentials.provider != self.PROVIDER_NAME:\nraise ValueError(f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "return self._refresh_tokens(credentials)",
              "successors": []
            }
          ]
        },
        {
          "name": "get_access_token",
          "type": "function",
          "start_line": 63,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()",
          "blocks": [
            {
              "id": 1,
              "label": "def get_access_token(self, credentials: OAuth2Credentials) -> str:\nif self.needs_refresh(credentials):\ncredentials = self.refresh_tokens(credentials)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "return credentials.access_token.get_secret_value()",
              "successors": []
            }
          ]
        },
        {
          "name": "needs_refresh",
          "type": "function",
          "start_line": 69,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\nreturn (credentials.access_token_expires_at is not None and credentials.access_token_expires_at < int(time.time()) + 300)",
              "successors": []
            }
          ]
        },
        {
          "name": "handle_default_scopes",
          "type": "function",
          "start_line": 76,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
          "blocks": [
            {
              "id": 1,
              "label": "if not scopes:\nlogger.debug(f\"Using default scopes for provider {self.PROVIDER_NAME.value}\")\nscopes = self.DEFAULT_SCOPES",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return scopes",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n        ...\n\n        return self._refresh_tokens(credentials)\n\n        return credentials.access_token.get_secret_value()\n\n        )\n\n        return scopes",
      "blocks": [
        {
          "id": 1,
          "label": "class BaseOAuthHandler(ABC):\nPROVIDER_NAME: ClassVar[ProviderName]\nDEFAULT_SCOPES: ClassVar[list[str]] = []\n@abstractmethod\ndef __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n@abstractmethod...\n@abstractmethod...\n@abstractmethod...\n@abstractmethod...\nreturn self._refresh_tokens(credentials)\nreturn credentials.access_token.get_secret_value()\nreturn scopes",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\n\n        return scopes",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nlogger = logging.getLogger(__name__)\nreturn scopes",
      "successors": []
    }
  ]
}