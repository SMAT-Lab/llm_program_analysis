{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 98,
  "functions": [
    {
      "name": "test_block_credit_usage",
      "type": "function",
      "start_line": 17,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_block_credit_usage(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    spending_amount_1 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\n            \"model\": \"gpt-4-turbo\",\n            \"credentials\": {\n                \"id\": openai_credentials.id,\n                \"provider\": openai_credentials.provider,\n                \"type\": openai_credentials.type,\n            },\n        },\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_1 > 0\n\n    spending_amount_2 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_2 == 0\n\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_block_credit_usage(server: SpinTestServer):\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 3,
              "label": "spending_amount_1 = await user_credit.spend_credits(\n    DEFAULT_USER_ID,\n    current_credit,\n    AITextGeneratorBlock().id,\n    {\n        \"model\": \"gpt-4-turbo\",\n        \"credentials\": {\n            \"id\": openai_credentials.id,\n            \"provider\": openai_credentials.provider,\n            \"type\": openai_credentials.type,\n        },\n    },\n    0.0,\n    0.0,\n    validate_balance=False,\n)\nassert spending_amount_1 > 0",
              "successors": [
                {
                  "id": 5,
                  "label": "spending_amount_2 = await user_credit.spend_credits(\n    DEFAULT_USER_ID,\n    current_credit,\n    AITextGeneratorBlock().id,\n    {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n    0.0,\n    0.0,\n    validate_balance=False,\n)\nassert spending_amount_2 == 0",
                  "successors": [
                    {
                      "id": 7,
                      "label": "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert new_credit == current_credit - spending_amount_1 - spending_amount_2",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_block_credit_top_up",
      "type": "function",
      "start_line": 54,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_block_credit_top_up(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit + 100",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_block_credit_top_up(server: SpinTestServer):\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 3,
              "label": "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\nnew_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 5,
                  "label": "assert new_credit == current_credit + 100",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_block_credit_reset",
      "type": "function",
      "start_line": 64,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n\n    user_credit.time_now = lambda: month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    # Month 1 result should only affect month 1\n    user_credit.time_now = lambda: month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\n\n    # Month 2 balance is unaffected\n    user_credit.time_now = lambda: month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)",
          "successors": [
            {
              "id": 3,
              "label": "    user_credit.time_now = lambda: month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    user_credit.time_now = lambda: month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100",
              "successors": [
                {
                  "id": 5,
                  "label": "    user_credit.time_now = lambda: month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_credit_refill",
      "type": "function",
      "start_line": 83,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_credit_refill(server: SpinTestServer):\n    # Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )\n    user_credit.time_now = lambda: datetime(2022, 2, 15)\n\n    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_credit_refill(server: SpinTestServer):\n    # Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )\n    user_credit.time_now = lambda: datetime(2022, 2, 15)",
          "successors": [
            {
              "id": 3,
              "label": "balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert balance == REFILL_VALUE",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from datetime import datetime\n\nimport pytest\nfrom prisma.models import CreditTransaction\n\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\n\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert new_credit == current_credit + 100\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert balance == REFILL_VALUE",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime\nimport pytest",
      "successors": [
        {
          "id": 3,
          "label": "from prisma.models import CreditTransaction\nfrom backend.blocks.llm import AITextGeneratorBlock",
          "successors": [
            {
              "id": 5,
              "label": "from backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID",
              "successors": [
                {
                  "id": 7,
                  "label": "from backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer",
                  "successors": [
                    {
                      "id": 9,
                      "label": "REFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)",
                      "successors": [
                        {
                          "id": 11,
                          "label": "@pytest.mark.asyncio(scope=\"session\")\nassert new_credit == current_credit - spending_amount_1 - spending_amount_2",
                          "successors": [
                            {
                              "id": 13,
                              "label": "@pytest.mark.asyncio(scope=\"session\")\nassert new_credit == current_credit + 100",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "@pytest.mark.asyncio(scope=\"session\")\nassert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "@pytest.mark.asyncio(scope=\"session\")\nassert balance == REFILL_VALUE",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}