{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 78,
  "functions": [],
  "classes": [
    {
      "name": "HttpMethod",
      "type": "class",
      "start_line": 10,
      "end_line": 17,
      "functions": [],
      "simplified_code": "class HttpMethod(Enum):\n    GET = \"GET\"\n    POST = \"POST\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n    PATCH = \"PATCH\"\n    OPTIONS = \"OPTIONS\"\n    HEAD = \"HEAD\"",
      "blocks": [
        {
          "id": 1,
          "label": "class HttpMethod(Enum):\nGET = \"GET\"\nPOST = \"POST\"\nPUT = \"PUT\"\nDELETE = \"DELETE\"\nPATCH = \"PATCH\"\nOPTIONS = \"OPTIONS\"\nHEAD = \"HEAD\"",
          "successors": []
        }
      ]
    },
    {
      "name": "SendWebRequestBlock",
      "type": "class",
      "start_line": 20,
      "end_line": 78,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 49,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n            description=\"This block makes an HTTP request to the given URL.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendWebRequestBlock.Input,\n            output_schema=SendWebRequestBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\", description=\"This block makes an HTTP request to the given URL.\", categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 58,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n\n        response = requests.request(\n            input_data.method.value,\n            input_data.url,\n            headers=input_data.headers,\n            json=input_data.body if input_data.json_format else None,\n            data=input_data.body if not input_data.json_format else None,\n        )\n        result = response.json() if input_data.json_format else response.text\n\n        if response.status_code // 100 == 2:\n            yield \"response\", result\n        elif response.status_code // 100 == 4:\n            yield \"client_error\", result\n        elif response.status_code // 100 == 5:\n            yield \"server_error\", result\n        else:\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")",
          "blocks": [
            {
              "id": 1,
              "label": "if isinstance(input_data.body, str):\ninput_data.body = json.loads(input_data.body)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\nresult = response.json() if input_data.json_format else response.text\nif response.status_code // 100 == 2:\nyield \"response\", result",
              "successors": []
            },
            {
              "id": 7,
              "label": "elif response.status_code // 100 == 4:\nyield \"client_error\", result",
              "successors": []
            },
            {
              "id": 9,
              "label": "elif response.status_code // 100 == 5:\nyield \"server_error\", result",
              "successors": []
            },
            {
              "id": 11,
              "label": "else:\nraise ValueError(f\"Unexpected status code: {response.status_code}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 21,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        url: str = SchemaField(\n            description=\"The URL to send the request to\",\n            placeholder=\"https://api.example.com\",\n        )\n        method: HttpMethod = SchemaField(\n            description=\"The HTTP method to use for the request\",\n            default=HttpMethod.POST,\n        )\n        headers: dict[str, str] = SchemaField(\n            description=\"The headers to include in the request\",\n            default={},\n        )\n        json_format: bool = SchemaField(\n            title=\"JSON format\",\n            description=\"Whether to send and receive body as JSON\",\n            default=True,\n        )\n        body: Any = SchemaField(\n            description=\"The body of the request\",\n            default=None,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nurl: str = SchemaField(description=\"The URL to send the request to\", placeholder=\"https://api.example.com\")\nmethod: HttpMethod = SchemaField(description=\"The HTTP method to use for the request\", default=HttpMethod.POST)\nheaders: dict[str, str] = SchemaField(description=\"The headers to include in the request\", default={})\njson_format: bool = SchemaField(title=\"JSON format\", description=\"Whether to send and receive body as JSON\", default=True)\nbody: Any = SchemaField(description=\"The body of the request\", default=None)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 44,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        response: object = SchemaField(description=\"The response from the server\")\n        client_error: object = SchemaField(description=\"The error on 4xx status codes\")\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresponse: object = SchemaField(description=\"The response from the server\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "client_error: object = SchemaField(description=\"The error on 4xx status codes\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "server_error: object = SchemaField(description=\"The error on 5xx status codes\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class SendWebRequestBlock(Block):\n        )\n\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")\n\n        )\n\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class SendWebRequestBlock(Block):\nserver_error: object = SchemaField(description=\"The error on 5xx status codes\")\nraise ValueError(f\"Unexpected status code: {response.status_code}\")",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n    HEAD = \"HEAD\"\n\n\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")",
  "blocks": [
    {
      "id": 1,
      "label": "import json\\nfrom enum import Enum\\nfrom typing import Any\\n\\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\\nfrom backend.data.model import SchemaField\\nfrom backend.util.request import requests\nHEAD = \"HEAD\"\nraise ValueError(f\"Unexpected status code: {response.status_code}\")",
      "successors": []
    }
  ]
}