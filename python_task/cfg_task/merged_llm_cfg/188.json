{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 264,
  "functions": [
    {
      "name": "setup_prisma",
      "type": "function",
      "start_line": 13,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "async def setup_prisma():\n    # Don't register client if already registered\n    try:\n        Prisma()\n    except prisma.errors.ClientAlreadyRegisteredError:\n        pass\n    yield",
      "blocks": [
        {
          "id": 1,
          "label": "async def setup_prisma():\ntry:",
          "successors": [
            {
              "id": 3,
              "label": "Prisma()\nyield",
              "successors": []
            },
            {
              "id": 4,
              "label": "except prisma.errors.ClientAlreadyRegisteredError:\n    pass\nyield",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_agents",
      "type": "function",
      "start_line": 23,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_get_store_agents(mocker):\n    # Mock data\n    mock_agents = [\n        prisma.models.StoreAgent(\n            listing_id=\"test-id\",\n            storeListingVersionId=\"version123\",\n            slug=\"test-agent\",\n            agent_name=\"Test Agent\",\n            agent_video=None,\n            agent_image=[\"image.jpg\"],\n            featured=False,\n            creator_username=\"creator\",\n            creator_avatar=\"avatar.jpg\",\n            sub_heading=\"Test heading\",\n            description=\"Test description\",\n            categories=[],\n            runs=10,\n            rating=4.5,\n            versions=[\"1.0\"],\n            updated_at=datetime.now(),\n        )\n    ]\n\n    # Mock prisma calls\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)\n\n    # Call function\n    result = await db.get_store_agents()\n\n    # Verify results\n    assert len(result.agents) == 1\n    assert result.agents[0].slug == \"test-agent\"\n    assert result.pagination.total_items == 1\n\n    # Verify mocks called correctly\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_get_store_agents(mocker):\n    mock_agents = [\n        prisma.models.StoreAgent(\n            listing_id=\"test-id\",\n            storeListingVersionId=\"version123\",\n            slug=\"test-agent\",\n            agent_name=\"Test Agent\",\n            agent_video=None,\n            agent_image=[\"image.jpg\"],\n            featured=False,\n            creator_username=\"creator\",\n            creator_avatar=\"avatar.jpg\",\n            sub_heading=\"Test heading\",\n            description=\"Test description\",\n            categories=[],\n            runs=10,\n            rating=4.5,\n            versions=[\"1.0\"],\n            updated_at=datetime.now(),\n        )\n    ]",
          "successors": [
            {
              "id": 3,
              "label": "    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)\n    result = await db.get_store_agents()",
              "successors": [
                {
                  "id": 5,
                  "label": "    assert len(result.agents) == 1\n    assert result.agents[0].slug == \"test-agent\"\n    assert result.pagination.total_items == 1\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_agent_details",
      "type": "function",
      "start_line": 65,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_get_store_agent_details(mocker):\n    # Mock data\n    mock_agent = prisma.models.StoreAgent(\n        listing_id=\"test-id\",\n        storeListingVersionId=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image.jpg\"],\n        featured=False,\n        creator_username=\"creator\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test heading\",\n        description=\"Test description\",\n        categories=[\"test\"],\n        runs=10,\n        rating=4.5,\n        versions=[\"1.0\"],\n        updated_at=datetime.now(),\n    )\n\n    # Mock prisma call\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n\n    # Call function\n    result = await db.get_store_agent_details(\"creator\", \"test-agent\")\n\n    # Verify results\n    assert result.slug == \"test-agent\"\n    assert result.agent_name == \"Test Agent\"\n\n    # Verify mock called correctly\n    mock_store_agent.return_value.find_first.assert_called_once_with(\n        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_get_store_agent_details(mocker):\n    mock_agent = prisma.models.StoreAgent(\n        listing_id=\"test-id\",\n        storeListingVersionId=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image.jpg\"],\n        featured=False,\n        creator_username=\"creator\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test heading\",\n        description=\"Test description\",\n        categories=[\"test\"],\n        runs=10,\n        rating=4.5,\n        versions=[\"1.0\"],\n        updated_at=datetime.now(),\n    )",
          "successors": [
            {
              "id": 3,
              "label": "    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n    result = await db.get_store_agent_details(\"creator\", \"test-agent\")",
              "successors": [
                {
                  "id": 5,
                  "label": "    assert result.slug == \"test-agent\"\n    assert result.agent_name == \"Test Agent\"\n    mock_store_agent.return_value.find_first.assert_called_once_with(\n        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_creator_details",
      "type": "function",
      "start_line": 104,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_get_store_creator_details(mocker):\n    # Mock data\n    mock_creator_data = prisma.models.Creator(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        num_agents=1,\n        agent_rating=4.5,\n        agent_runs=10,\n        top_categories=[\"test\"],\n        is_featured=False,\n    )\n\n    # Mock prisma call\n    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    # Configure the mock to return values that will pass validation\n    mock_creator.return_value.find_unique.return_value = mock_creator_data\n\n    # Call function\n    result = await db.get_store_creator_details(\"creator\")\n\n    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"\n\n    # Verify mock called correctly\n    mock_creator.return_value.find_unique.assert_called_once_with(\n        where={\"username\": \"creator\"}\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_get_store_creator_details(mocker):\n    mock_creator_data = prisma.models.Creator(name=\"Test Creator\", username=\"creator\", description=\"Test description\", links=[\"link1\"], avatar_url=\"avatar.jpg\", num_agents=1, agent_rating=4.5, agent_runs=10, top_categories=[\"test\"], is_featured=False)",
          "successors": [
            {
              "id": 3,
              "label": "    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    mock_creator.return_value.find_unique.return_value = mock_creator_data\n    result = await db.get_store_creator_details(\"creator\")",
              "successors": [
                {
                  "id": 5,
                  "label": "    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"\n    mock_creator.return_value.find_unique.assert_called_once_with(where={\"username\": \"creator\"})",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_create_store_submission",
      "type": "function",
      "start_line": 141,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_create_store_submission(mocker):\n    # Mock data\n    mock_agent = prisma.models.AgentGraph(\n        id=\"agent-id\",\n        version=1,\n        userId=\"user-id\",\n        createdAt=datetime.now(),\n        isActive=True,\n        isTemplate=False,\n    )\n\n    mock_listing = prisma.models.StoreListing(\n        id=\"listing-id\",\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        isDeleted=False,\n        isApproved=False,\n        agentId=\"agent-id\",\n        agentVersion=1,\n        owningUserId=\"user-id\",\n    )\n\n    # Mock prisma calls\n    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")\n    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n\n    mock_store_listing = mocker.patch(\"prisma.models.StoreListing.prisma\")\n    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)\n\n    # Call function\n    result = await db.create_store_submission(\n        user_id=\"user-id\",\n        agent_id=\"agent-id\",\n        agent_version=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        description=\"Test description\",\n    )\n\n    # Verify results\n    assert result.name == \"Test Agent\"\n    assert result.description == \"Test description\"\n\n    # Verify mocks called correctly\n    mock_agent_graph.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.create.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_create_store_submission(mocker):\n    mock_agent = prisma.models.AgentGraph(\n        id=\"agent-id\",\n        version=1,\n        userId=\"user-id\",\n        createdAt=datetime.now(),\n        isActive=True,\n        isTemplate=False,\n    )",
          "successors": [
            {
              "id": 3,
              "label": "    mock_listing = prisma.models.StoreListing(\n        id=\"listing-id\",\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        isDeleted=False,\n        isApproved=False,\n        agentId=\"agent-id\",\n        agentVersion=1,\n        owningUserId=\"user-id\",\n    )\n    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")\n    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
              "successors": [
                {
                  "id": 5,
                  "label": "    mock_store_listing = mocker.patch(\"prisma.models.StoreListing.prisma\")\n    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)\n    result = await db.create_store_submission(\n        user_id=\"user-id\",\n        agent_id=\"agent-id\",\n        agent_version=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        description=\"Test description\",\n    )",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    assert result.name == \"Test Agent\"\n    assert result.description == \"Test description\"\n    mock_agent_graph.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.create.assert_called_once()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_update_profile",
      "type": "function",
      "start_line": 192,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_update_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )\n\n    # Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)\n\n    # Test data\n    profile = Profile(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        is_featured=False,\n    )\n\n    # Call function\n    result = await db.update_or_create_profile(\"user-id\", profile)\n\n    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n\n    # Verify mocks called correctly\n    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_update_profile(mocker):\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )",
          "successors": [
            {
              "id": 3,
              "label": "    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)\n    profile = Profile(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        is_featured=False,\n    )",
              "successors": [
                {
                  "id": 5,
                  "label": "    result = await db.update_or_create_profile(\"user-id\", profile)\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_user_profile",
      "type": "function",
      "start_line": 236,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_get_user_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"No Profile Data\",\n        username=\"testuser\",\n        description=\"Test description\",\n        links=[\"link1\", \"link2\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )\n\n    # Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_unique = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n\n    # Call function\n    result = await db.get_user_profile(\"user-id\")\n\n    # Verify results\n    assert result.name == \"No Profile Data\"\n    assert result.username == \"No Profile Data\"\n    assert result.description == \"No Profile Data\"\n    assert result.links == []\n    assert result.avatar_url == \"\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_get_user_profile(mocker):\n    mock_profile = prisma.models.Profile(id=\"profile-id\", name=\"No Profile Data\", username=\"testuser\", description=\"Test description\", links=[\"link1\", \"link2\"], avatarUrl=\"avatar.jpg\", isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now())",
          "successors": [
            {
              "id": 3,
              "label": "    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_unique = mocker.AsyncMock(return_value=mock_profile)",
              "successors": [
                {
                  "id": 5,
                  "label": "    result = await db.get_user_profile(\"user-id\")\n    assert result.name == \"No Profile Data\"",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    assert result.username == \"No Profile Data\"\n    assert result.description == \"No Profile Data\"",
                      "successors": [
                        {
                          "id": 9,
                          "label": "    assert result.links == []\n    assert result.avatar_url == \"\"",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from datetime import datetime\n\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\n\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile\n\n\n@pytest.fixture(autouse=True)\n    yield\n\n\n@pytest.mark.asyncio\n    mock_store_agent.return_value.count.assert_called_once()\n\n\n@pytest.mark.asyncio\n    )\n\n\n@pytest.mark.asyncio\n    )\n\n\n@pytest.mark.asyncio\n    mock_store_listing.return_value.create.assert_called_once()\n\n\n@pytest.mark.asyncio\n    mock_profile_db.return_value.update.assert_called_once()\n\n\n@pytest.mark.asyncio\n    assert result.avatar_url == \"\"",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime\n\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\n\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile\n\n\n@pytest.fixture(autouse=True)\nyield\n\n\n@pytest.mark.asyncio\nmock_store_agent.return_value.count.assert_called_once()\n\n\n@pytest.mark.asyncio\n\n\n@pytest.mark.asyncio\n\n\n@pytest.mark.asyncio\nmock_store_listing.return_value.create.assert_called_once()\n\n\n@pytest.mark.asyncio\nmock_profile_db.return_value.update.assert_called_once()\n\n\n@pytest.mark.asyncio\nassert result.avatar_url == \"\"",
      "successors": []
    }
  ]
}