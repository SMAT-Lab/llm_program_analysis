{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [
    {
      "name": "example_function",
      "type": "function",
      "start_line": 7,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "def example_function(a: int, b: int, c: int) -> int:\n    time.sleep(0.5)\n    return a + b + c",
      "blocks": [
        {
          "id": 1,
          "label": "time.sleep(0.5)\nreturn a + b + c",
          "successors": []
        }
      ]
    },
    {
      "name": "example_function_with_error",
      "type": "function",
      "start_line": 13,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": "def example_function_with_error(a: int, b: int, c: int) -> int:\n    raise ValueError(\"This is a test error\")",
      "blocks": [
        {
          "id": 1,
          "label": "def example_function_with_error(a: int, b: int, c: int) -> int:\nraise ValueError(\"This is a test error\")",
          "successors": []
        }
      ]
    },
    {
      "name": "test_timer_decorator",
      "type": "function",
      "start_line": 17,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_timer_decorator():\n    info, res = example_function(1, 2, 3)\n    assert info.cpu_time >= 0\n    assert info.wall_time >= 0.4\n    assert res == 6",
      "blocks": [
        {
          "id": 1,
          "label": "info, res = example_function(1, 2, 3)\nassert info.cpu_time >= 0\nassert info.wall_time >= 0.4\nassert res == 6",
          "successors": []
        }
      ]
    },
    {
      "name": "test_error_decorator",
      "type": "function",
      "start_line": 24,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_error_decorator():\n    res = example_function_with_error(1, 2, 3)\n    assert res is None",
      "blocks": [
        {
          "id": 1,
          "label": "res = example_function_with_error(1, 2, 3)\nassert res is None",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import time\n\nfrom backend.util.decorator import error_logged, time_measured\n\n\n@time_measured\n    return a + b + c\n\n\n@error_logged\n    raise ValueError(\"This is a test error\")\n\n\n    assert res == 6\n\n\n    assert res is None",
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom backend.util.decorator import error_logged, time_measured\n@time_measured\ndef some_function(a, b, c):\n    return a + b + c\n@error_logged\ndef some_other_function():\n    raise ValueError('This is a test error')\nres = some_function(1, 2, 3)\nassert res == 6\nanother_res = some_other_function()\nassert another_res is None",
      "successors": []
    }
  ]
}