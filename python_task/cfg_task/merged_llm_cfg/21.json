{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 670,
  "functions": [
    {
      "name": "execution_manager_client",
      "type": "function",
      "start_line": 55,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": "def execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)",
      "blocks": [
        {
          "id": 1,
          "label": "def execution_manager_client() -> ExecutionManager:\nreturn get_service_client(ExecutionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "execution_scheduler_client",
      "type": "function",
      "start_line": 60,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)",
      "blocks": [
        {
          "id": 1,
          "label": "def execution_scheduler_client() -> ExecutionScheduler:\nreturn get_service_client(ExecutionScheduler)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_or_create_user_route",
      "type": "function",
      "start_line": 94,
      "end_line": 96,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\nreturn user.model_dump()",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_blocks",
      "type": "function",
      "start_line": 105,
      "end_line": 108,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
      "blocks": [
        {
          "id": 1,
          "label": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:\nblocks = [block() for block in backend.data.block.get_blocks().values()]\ncosts = get_block_costs()\nreturn [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
          "successors": []
        }
      ]
    },
    {
      "name": "execute_graph_block",
      "type": "function",
      "start_line": 116,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output",
      "blocks": [
        {
          "id": 1,
          "label": "obj = backend.data.block.get_block(block_id)\nif not obj:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "output = defaultdict(list)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "for name, data in obj.execute(data):\noutput[name].append(data)",
          "successors": [
            5
          ]
        },
        {
          "id": 7,
          "label": "return output",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_credits",
      "type": "function",
      "start_line": 133,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_user_credits(user_id: Annotated[str, Depends(get_user_id)]) -> dict[str, int]:\nreturn {'credits': max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graphs",
      "type": "function",
      "start_line": 150,
      "end_line": 153,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_graphs(user_id: Annotated[str, Depends(get_user_id)]) -> Sequence[graph_db.GraphModel]:\nreturn await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph",
      "type": "function",
      "start_line": 164,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph",
      "blocks": [
        {
          "id": 1,
          "label": "graph = await graph_db.get_graph(graph_id, version, user_id=user_id, for_export=hide_credentials)\nif not graph:\nraise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return graph",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_all_versions",
      "type": "function",
      "start_line": 188,
      "end_line": 194,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs",
      "blocks": [
        {
          "id": 1,
          "label": "graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\nif not graphs:\nraise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return graphs",
          "successors": []
        }
      ]
    },
    {
      "name": "create_new_graph",
      "type": "function",
      "start_line": 200,
      "end_line": 203,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_new_graph(create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]) -> graph_db.GraphModel:\nreturn await do_create_graph(create_graph, is_template=False, user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "do_create_graph",
      "type": "function",
      "start_line": 206,
      "end_line": 242,
      "functions": [],
      "classes": [],
      "simplified_code": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph",
      "blocks": [
        {
          "id": 1,
          "label": "if create_graph.graph:\ngraph = graph_db.make_graph_model(create_graph.graph, user_id)",
          "successors": [
            9
          ]
        },
        {
          "id": 3,
          "label": "elif create_graph.template_id:\ngraph = await graph_db.get_graph(create_graph.template_id, create_graph.template_version, template=True, user_id=user_id)\nif not graph:\nraise HTTPException(400, detail=f\"Template #{create_graph.template_id} not found\")",
          "successors": []
        },
        {
          "id": 7,
          "label": "graph.version = 1",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "raise HTTPException(status_code=400, detail=\"Either graph or template_id must be provided.\")",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_graph",
      "type": "function",
      "start_line": 248,
      "end_line": 258,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 253,
          "end_line": 254,
          "functions": [],
          "classes": [],
          "simplified_code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
          "blocks": [
            {
              "id": 1,
              "label": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\nreturn integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
      "blocks": [
        {
          "id": 1,
          "label": "async def delete_graph(graph_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> DeleteGraphResponse:\nif active_version := await graph_db.get_graph(graph_id, user_id=user_id):\nreturn integration_creds_manager.get(user_id, credentials_id)",
          "successors": []
        },
        {
          "id": 5,
          "label": "return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
          "successors": []
        }
      ]
    },
    {
      "name": "update_graph",
      "type": "function",
      "start_line": 269,
      "end_line": 320,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 301,
          "end_line": 302,
          "functions": [],
          "classes": [],
          "simplified_code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
          "blocks": [
            {
              "id": 1,
              "label": "return integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version",
      "blocks": [
        {
          "id": 1,
          "label": "if graph.id and graph.id != graph_id:\nraise HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\nif not existing_versions:\nraise HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
          "successors": []
        },
        {
          "id": 6,
          "label": "latest_version_number = max(g.version for g in existing_versions)\ngraph.version = latest_version_number + 1\nlatest_version_graph = next(v for v in existing_versions if v.version == latest_version_number)\ncurrent_active_version = next((v for v in existing_versions if v.is_active), None)\nif latest_version_graph.is_template != graph.is_template:\nraise HTTPException(400, detail=\"Changing is_template on an existing graph is forbidden\")",
          "successors": []
        },
        {
          "id": 10,
          "label": "graph.is_active = not graph.is_template\ngraph = graph_db.make_graph_model(graph, user_id)\ngraph.reassign_ids(user_id=user_id)\nnew_graph_version = await graph_db.create_graph(graph, user_id=user_id)\nif new_graph_version.is_active:\nreturn integration_creds_manager.get(user_id, credentials_id)",
          "successors": []
        },
        {
          "id": 17,
          "label": "return new_graph_version",
          "successors": []
        }
      ]
    },
    {
      "name": "set_graph_active_version",
      "type": "function",
      "start_line": 328,
      "end_line": 361,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 342,
          "end_line": 343,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)",
          "blocks": [
            {
              "id": 1,
              "label": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\nreturn integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "new_active_graph = await graph_db.get_graph(graph_id, new_active_version, user_id=user_id)\nif not new_active_graph:\nraise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\nawait on_graph_activate(new_active_graph, get_credentials=get_credentials)\nawait graph_db.set_graph_active_version(graph_id=graph_id, version=new_active_version, user_id=user_id)\nif current_active_graph and current_active_graph.version != new_active_version:\nawait on_graph_deactivate(current_active_graph, get_credentials=get_credentials)",
          "successors": []
        },
        {
          "id": 9,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "execute_graph",
      "type": "function",
      "start_line": 369,
      "end_line": 381,
      "functions": [],
      "classes": [],
      "simplified_code": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
      "blocks": [
        {
          "id": 1,
          "label": "try:\ngraph_exec = execution_manager_client().add_execution(graph_id, node_input, user_id=user_id)\nreturn {\"id\": graph_exec.graph_exec_id}",
          "successors": []
        },
        {
          "id": 3,
          "label": "except Exception as e:\nmsg = e.__str__().encode().decode(\"unicode_escape\")\nraise HTTPException(status_code=400, detail=msg)",
          "successors": []
        }
      ]
    },
    {
      "name": "stop_graph_run",
      "type": "function",
      "start_line": 389,
      "end_line": 400,
      "functions": [],
      "classes": [],
      "simplified_code": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def stop_graph_run(graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> Sequence[execution_db.ExecutionResult]:\nif not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\nraise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "await asyncio.to_thread(lambda: execution_manager_client().cancel_execution(graph_exec_id))\nreturn await execution_db.get_execution_results(graph_exec_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_executions",
      "type": "function",
      "start_line": 408,
      "end_line": 411,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_executions(user_id: Annotated[str, Depends(get_user_id)]) -> list[graph_db.GraphExecution]:\nreturn await graph_db.get_executions(user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_run_node_execution_results",
      "type": "function",
      "start_line": 419,
      "end_line": 428,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)",
      "blocks": [
        {
          "id": 1,
          "label": "graph = await graph_db.get_graph(graph_id, user_id=user_id)\nif not graph:\nraise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return await execution_db.get_execution_results(graph_exec_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_templates",
      "type": "function",
      "start_line": 441,
      "end_line": 444,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_templates(user_id: Annotated[str, Depends(get_user_id)]) -> Sequence[graph_db.GraphModel]:\nreturn await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_template",
      "type": "function",
      "start_line": 452,
      "end_line": 458,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph",
      "blocks": [
        {
          "id": 1,
          "label": "graph = await graph_db.get_graph(graph_id, version, template=True)\nif not graph:\nraise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return graph",
          "successors": []
        }
      ]
    },
    {
      "name": "create_new_template",
      "type": "function",
      "start_line": 466,
      "end_line": 469,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_new_template(create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]) -> graph_db.GraphModel:\nreturn await do_create_graph(create_graph, is_template=True, user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "create_schedule",
      "type": "function",
      "start_line": 488,
      "end_line": 506,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\nif not graph:\nraise HTTPException(status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return await asyncio.to_thread(lambda: execution_scheduler_client().add_execution_schedule(graph_id=schedule.graph_id, graph_version=graph.version, cron=schedule.cron, input_data=schedule.input_data, user_id=user_id))",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_schedule",
      "type": "function",
      "start_line": 514,
      "end_line": 519,
      "functions": [],
      "classes": [],
      "simplified_code": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
      "blocks": [
        {
          "id": 1,
          "label": "execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\nreturn {'id': schedule_id}",
          "successors": []
        }
      ]
    },
    {
      "name": "get_execution_schedules",
      "type": "function",
      "start_line": 527,
      "end_line": 534,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "return execution_scheduler_client().get_execution_schedules(user_id=user_id, graph_id=graph_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "create_api_key",
      "type": "function",
      "start_line": 549,
      "end_line": 563,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "blocks": [
        {
          "id": 1,
          "label": "try:\napi_key, plain_text = await generate_api_key(...)\nreturn CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
          "successors": []
        },
        {
          "id": 3,
          "label": "except APIKeyError as e:\nlogger.error(f\"Failed to create API key: {str(e)}\")\nraise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "name": "get_api_keys",
      "type": "function",
      "start_line": 573,
      "end_line": 580,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_api_keys(user_id: Annotated[str, Depends(get_user_id)]) -> list[APIKeyWithoutHash]:\ntry:\nreturn await list_user_api_keys(user_id)",
          "successors": []
        },
        {
          "id": 4,
          "label": "except APIKeyError as e:\nlogger.error(f\"Failed to list API keys: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "get_api_key",
      "type": "function",
      "start_line": 591,
      "end_line": 601,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\napi_key = await get_api_key_by_id(key_id, user_id)\nif not api_key:\nraise HTTPException(status_code=404, detail=\"API key not found\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "return api_key",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_api_key",
      "type": "function",
      "start_line": 612,
      "end_line": 623,
      "functions": [],
      "classes": [],
      "simplified_code": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\nreturn await revoke_api_key(key_id, user_id)",
          "successors": []
        },
        {
          "id": 3,
          "label": "except APIKeyNotFoundError:\nraise HTTPException(status_code=404, detail=\"API key not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "except APIKeyPermissionError:\nraise HTTPException(status_code=403, detail=\"Permission denied\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "except APIKeyError as e:\nlogger.error(f\"Failed to revoke API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "suspend_key",
      "type": "function",
      "start_line": 634,
      "end_line": 645,
      "functions": [],
      "classes": [],
      "simplified_code": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\nreturn await suspend_api_key(key_id, user_id)",
          "successors": []
        },
        {
          "id": 3,
          "label": "except APIKeyNotFoundError:\nraise HTTPException(status_code=404, detail=\"API key not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "except APIKeyPermissionError:\nraise HTTPException(status_code=403, detail=\"Permission denied\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "except APIKeyError as e:\nlogger.error(f\"Failed to suspend API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "update_permissions",
      "type": "function",
      "start_line": 656,
      "end_line": 669,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\nreturn await update_api_key_permissions(key_id, user_id, request.permissions)",
          "successors": []
        },
        {
          "id": 3,
          "label": "except APIKeyNotFoundError:\nraise HTTPException(status_code=404, detail=\"API key not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "except APIKeyPermissionError:\nraise HTTPException(status_code=403, detail=\"Permission denied\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "except APIKeyError as e:\nlogger.error(f\"Failed to update API key permissions: {str(e)}\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "DeleteGraphResponse",
      "type": "class",
      "start_line": 145,
      "end_line": 146,
      "functions": [],
      "classes": [],
      "simplified_code": "class DeleteGraphResponse(TypedDict):\n    version_counts: int",
      "blocks": [
        {
          "id": 1,
          "label": "class DeleteGraphResponse(TypedDict):\nversion_counts: int",
          "successors": []
        }
      ]
    },
    {
      "name": "ScheduleCreationRequest",
      "type": "class",
      "start_line": 477,
      "end_line": 480,
      "functions": [],
      "classes": [],
      "simplified_code": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str",
      "blocks": [
        {
          "id": 1,
          "label": "class ScheduleCreationRequest(pydantic.BaseModel):\ncron: str\ninput_data: dict[Any, Any]\ngraph_id: str",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n\n@thread_cached\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\n    return get_service_client(ExecutionScheduler)\n\n\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n\n_user_credit_model = get_user_credit_model()\n\n# Define the API routes\nv1_router = APIRouter()\n\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Auth #############################\n########################################################\n\n\n@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\n    return user.model_dump()\n\n\n########################################################\n##################### Blocks ###########################\n########################################################\n\n\n@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n\n\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return output\n\n\n########################################################\n##################### Credits ##########################\n########################################################\n\n\n@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\n    return graph\n\n\n@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return new_graph_version\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n        )\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n        raise HTTPException(status_code=400, detail=msg)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n########################################################\n##################### Templates ########################\n########################################################\n\n\n@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return graph\n\n\n@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n\n\n########################################################\n##################### Schedules ########################\n########################################################\n\n\n    graph_id: str\n\n\n@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    )\n\n\n@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    return {\"id\": schedule_id}\n\n\n@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n    )\n\n\n########################################################\n#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
  "blocks": [
    {
      "id": 1,
      "label": "@thread_cached\n    return get_service_client(ExecutionManager)",
      "successors": []
    }
  ]
}