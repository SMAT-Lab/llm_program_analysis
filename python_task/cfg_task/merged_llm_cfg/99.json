{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "WordCharacterCountBlock",
      "type": "class",
      "start_line": 5,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 22,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"ab2a782d-22cf-4587-8a70-55b59b3f9f90\",\n            description=\"Counts the number of words and characters in a given text.\",\n            categories={BlockCategory.TEXT},\n            input_schema=WordCharacterCountBlock.Input,\n            output_schema=WordCharacterCountBlock.Output,\n            test_input={\"text\": \"Hello, how are you?\"},\n            test_output=[(\"word_count\", 4), (\"character_count\", 19)],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"ab2a782d-22cf-4587-8a70-55b59b3f9f90\",\n    description=\"Counts the number of words and characters in a given text.\",\n    categories={BlockCategory.TEXT},\n    input_schema=WordCharacterCountBlock.Input,\n    output_schema=WordCharacterCountBlock.Output,\n    test_input={\"text\": \"Hello, how are you?\"},\n    test_output=[(\"word_count\", 4), (\"character_count\", 19)],\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 33,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            text = input_data.text\n            word_count = len(text.split())\n            character_count = len(text)\n\n            yield \"word_count\", word_count\n            yield \"character_count\", character_count\n\n        except Exception as e:\n            yield \"error\", str(e)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\ntry:",
              "successors": [
                {
                  "id": 3,
                  "label": "text = input_data.text\nword_count = len(text.split())\ncharacter_count = len(text)\nyield \"word_count\", word_count\nyield \"character_count\", character_count",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "except Exception as e:\nyield \"error\", str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 6,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Input text to count words and characters\",\n            placeholder=\"Enter your text here\",\n            advanced=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    text: str = SchemaField(\n        description=\"Input text to count words and characters\",\n        placeholder=\"Enter your text here\",\n        advanced=False,\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 13,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        word_count: int = SchemaField(description=\"Number of words in the input text\")\n        character_count: int = SchemaField(\n            description=\"Number of characters in the input text\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the counting operation failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    word_count: int = SchemaField(description=\"Number of words in the input text\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    character_count: int = SchemaField(description=\"Number of characters in the input text\")\n    error: str = SchemaField(description=\"Error message if the counting operation failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class WordCharacterCountBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"error\", str(e)",
      "blocks": [
        {
          "id": 1,
          "label": "class WordCharacterCountBlock(Block):\n    def execute(self, input_text):",
          "successors": [
            {
              "id": 3,
              "label": "        import re",
              "successors": [
                {
                  "id": 4,
                  "label": "        try:\n            word_count = len(re.findall(r\"\\b\\w+\\b\", input_text))",
                  "successors": [
                    {
                      "id": 6,
                      "label": "            character_count = len(input_text)\n            yield \"word_count\", word_count",
                      "successors": [
                        {
                          "id": 8,
                          "label": "            yield \"character_count\", character_count\n        except Exception as e:",
                          "successors": [
                            {
                              "id": 13,
                              "label": "            yield \"error\", str(e)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "        except Exception as e:\n            yield \"error\", str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n            yield \"error\", str(e)",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ]
}