{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ComparisonOperator",
      "type": "class",
      "start_line": 8,
      "end_line": 14,
      "functions": [],
      "simplified_code": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ConditionBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 53,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n    input_schema=ConditionBlock.Input,\n    output_schema=ConditionBlock.Output,\n    description=\"Handles conditional logic based on comparison operators\",\n    categories={BlockCategory.LOGIC},\n    test_input={\n        \"value1\": 10,\n        \"operator\": ComparisonOperator.GREATER_THAN.value,\n        \"value2\": 5,\n        \"yes_value\": \"Greater\",\n        \"no_value\": \"Not greater\",\n    },\n    test_output=[\n        (\"result\", True),\n        (\"yes_output\", \"Greater\"),\n    ],\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 73,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n\n        value1 = input_data.value1\n        if isinstance(value1, str):\n            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n\n        value2 = input_data.value2\n        if isinstance(value2, str):\n            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n\n        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n\n        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n\n        result = comparison_funcs[operator](value1, value2)\n\n        yield \"result\", result\n\n        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\noperator = input_data.operator\n\nvalue1 = input_data.value1",
              "successors": [
                {
                  "id": 3,
                  "label": "if isinstance(value1, str):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "try:\n    value1 = float(value1.strip())\nexcept ValueError:\n    value1 = value1.strip()",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "except ValueError:\n    value1 = value1.strip()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "value2 = input_data.value2",
                  "successors": [
                    {
                      "id": 7,
                      "label": "if isinstance(value2, str):",
                      "successors": [
                        {
                          "id": 8,
                          "label": "try:\n    value2 = float(value2.strip())\nexcept ValueError:\n    value2 = value2.strip()",
                          "successors": []
                        },
                        {
                          "id": 9,
                          "label": "except ValueError:\n    value2 = value2.strip()",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "yes_value = input_data.yes_value if input_data.yes_value is not None else value1\nno_value = input_data.no_value if input_data.no_value is not None else value2\ncomparison_funcs = {\n    ComparisonOperator.EQUAL: lambda a, b: a == b,\n    ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n    ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n    ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n    ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n    ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n}",
                      "successors": [
                        {
                          "id": 12,
                          "label": "result = comparison_funcs[operator](value1, value2)\nyield \"result\", result",
                          "successors": [
                            {
                              "id": 14,
                              "label": "if result:",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "yield \"yes_output\", yes_value",
                                  "successors": []
                                },
                                {
                                  "id": 16,
                                  "label": "else:\n    yield \"no_output\", no_value",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 40,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    value1: Any = SchemaField(\n        description=\"Enter the first value for comparison\",\n        placeholder=\"For example: 10 or 'hello' or True\",\n    )",
              "successors": [
                {
                  "id": 3,
                  "label": "    operator: ComparisonOperator = SchemaField(\n        description=\"Choose the comparison operator\",\n        placeholder=\"Select an operator\",\n    )\n    value2: Any = SchemaField(\n        description=\"Enter the second value for comparison\",\n        placeholder=\"For example: 20 or 'world' or False\",\n    )",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    yes_value: Any = SchemaField(\n        description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n        placeholder=\"Leave empty to use value1, or enter a specific value\",\n        default=None,\n    )\n    no_value: Any = SchemaField(\n        description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n        placeholder=\"Leave empty to use value1, or enter a specific value\",\n        default=None,\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 42,
          "end_line": 51,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "result: bool = SchemaField(description=\"The result of the condition evaluation (True or False)\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "yes_output: Any = SchemaField(description=\"The output value if the condition is true\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "no_output: Any = SchemaField(description=\"The output value if the condition is false\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class ConditionBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"no_output\", no_value",
      "blocks": [
        {
          "id": 1,
          "label": "class ConditionBlock(Block):\ndef execute(self, a):",
          "successors": [
            {
              "id": 3,
              "label": "if a > 10:",
              "successors": [
                {
                  "id": 4,
                  "label": "print(\"a is greater than 10\")\nyield \"no_output\", no_value",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "elif a > 5:\nprint(\"a is greater than 5 but less than or equal to 10\")",
                  "successors": [
                    {
                      "id": 9,
                      "label": "yield \"no_output\", no_value",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "else:\nprint(\"a is 5 or less\")",
                  "successors": [
                    {
                      "id": 9,
                      "label": "yield \"no_output\", no_value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n    LESS_THAN_OR_EQUAL = \"<=\"\n\n\n            yield \"no_output\", no_value",
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nLESS_THAN_OR_EQUAL = \"<=\"\n\nyield \"no_output\", no_value",
      "successors": []
    }
  ]
}