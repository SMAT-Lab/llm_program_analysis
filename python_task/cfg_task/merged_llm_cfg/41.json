{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 83,
  "functions": [
    {
      "name": "sort_blocks",
      "type": "function",
      "start_line": 17,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": "def sort_blocks():\n    # First, we load the current README into memory\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n\n    # Separating the 'table of contents' from the contents (blocks)\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n\n    # Sorting the libraries\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n\n    # Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n\n    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)",
      "blocks": [
        {
          "id": 1,
          "label": "def sort_blocks():\nwith open('README.md', 'r') as read_me_file:",
          "successors": [
            {
              "id": 3,
              "label": "read_me = read_me_file.read()",
              "successors": [
                {
                  "id": 11,
                  "label": "with open('README.md', 'w+') as sorted_file:\nsorted_file.write(final_README)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "table_of_contents = ''.join(read_me.split('- - -')[0])\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
                  "successors": [
                    {
                      "id": 6,
                      "label": "for i in range(len(blocks)):",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if i == 0:\nblocks[i] = blocks[i] + '\\n'",
                          "successors": [
                            {
                              "id": 10,
                              "label": "inner_blocks = ''.join(inner_blocks)\nwith open('README.md', 'w+') as sorted_file:",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "sorted_file.write(final_README)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "blocks[i] = '# ' + blocks[i] + '\\n'\ninner_blocks = ''.join(inner_blocks)",
                          "successors": [
                            {
                              "id": 11,
                              "label": "with open('README.md', 'w+') as sorted_file:\nsorted_file.write(final_README)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "inner_blocks = ''.join(inner_blocks)\nwith open('README.md', 'w+') as sorted_file:",
                      "successors": [
                        {
                          "id": 12,
                          "label": "sorted_file.write(final_README)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 45,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "def main():\n    # First, we load the current README into memory as an array of lines\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n\n    # Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n    blocks = []\n    last_indent = None\n    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n\n        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n            if indent == last_indent:\n                blocks[-1].append(line)\n            else:\n                blocks.append([line])\n            last_indent = indent\n        else:\n            blocks.append([line])\n            last_indent = None\n\n    with open('README.md', 'w+') as sorted_file:\n        # Then all of the blocks are sorted individually\n        blocks = [\n            ''.join(sorted(block, key=str.lower)) for block in blocks\n        ]\n        # And the result is written back to README.md\n        sorted_file.write(''.join(blocks))\n\n    # Then we call the sorting method\n    sort_blocks()",
      "blocks": [
        {
          "id": 1,
          "label": "def main():\nwith open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.readlines()",
          "successors": [
            {
              "id": 3,
              "label": "blocks = []\nlast_indent = None\nfor line in read_me:\n    s_line = line.lstrip()\n    indent = len(line) - len(s_line)",
              "successors": [
                {
                  "id": 4,
                  "label": "if any([s_line.startswith(s) for s in ['* [', '- [']]):",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if indent == last_indent:\n    blocks[-1].append(line)\nlast_indent = indent",
                      "successors": [
                        {
                          "id": 12,
                          "label": "with open('README.md', 'w+') as sorted_file:\nblocks = [\n    ''.join(sorted(block, key=str.lower)) for block in blocks\n]",
                          "successors": [
                            {
                              "id": 14,
                              "label": "sorted_file.write(''.join(blocks))\nsort_blocks()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "else:\n    blocks.append([line])\nlast_indent = indent",
                      "successors": [
                        {
                          "id": 12,
                          "label": "with open('README.md', 'w+') as sorted_file:\nblocks = [\n    ''.join(sorted(block, key=str.lower)) for block in blocks\n]",
                          "successors": [
                            {
                              "id": 14,
                              "label": "sorted_file.write(''.join(blocks))\nsort_blocks()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "else:\n    blocks.append([line])\nlast_indent = None",
                  "successors": [
                    {
                      "id": 12,
                      "label": "with open('README.md', 'w+') as sorted_file:\nblocks = [\n    ''.join(sorted(block, key=str.lower)) for block in blocks\n]",
                      "successors": [
                        {
                          "id": 14,
                          "label": "sorted_file.write(''.join(blocks))\nsort_blocks()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "#!/usr/bin/env python\n# coding: utf-8\n\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n\n        sorted_file.write(final_README)\n\n    sort_blocks()\n\n\nif __name__ == \"__main__\":\n    main()",
  "blocks": [
    {
      "id": 1,
      "label": "#!/usr/bin/env python\n# coding: utf-8\n\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n\n        sorted_file.write(final_README)\n\n    sort_blocks()\nif __name__ == \"__main__\":",
      "successors": [
        {
          "id": 3,
          "label": "    main()",
          "successors": []
        }
      ]
    }
  ]
}