{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 59,
  "functions": [],
  "classes": [
    {
      "name": "FactCheckerBlock",
      "type": "class",
      "start_line": 14,
      "end_line": 59,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 29,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\", description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\", categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.Input, output_schema=FactCheckerBlock.Output)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 38,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
          "blocks": [
            {
              "id": 1,
              "label": "encoded_statement = quote(input_data.statement)\\nurl = f\"https://g.jina.ai/{encoded_statement}\"\\nheaders = {\"Accept\": \"application/json\",\\n\"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",}\\nresponse = requests.get(url, headers=headers)\\nresponse.raise_for_status()\\ndata = response.json()\nif \"data\" in data:\ndata = data[\"data\"]\\nyield \"factuality\", data[\"factuality\"]\\nyield \"result\", data[\"result\"]\\nyield \"reason\", data[\"reason\"]",
              "successors": []
            },
            {
              "id": 3,
              "label": "else:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 15,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nstatement: str = SchemaField(description=\"The statement to check for factuality\")\ncredentials: JinaCredentialsInput = JinaCredentialsField()",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 21,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nfactuality: float = SchemaField(description=\"The factuality score of the statement\")\nresult: bool = SchemaField(description=\"The result of the factuality check\")\nreason: str = SchemaField(description=\"The reason for the factuality result\")\nerror: str = SchemaField(description=\"Error message if the check fails\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class FactCheckerBlock(Block):\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n        error: str = SchemaField(description=\"Error message if the check fails\")\n\n        )\n\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class FactCheckerBlock(Block):\ncredentials: JinaCredentialsInput = JinaCredentialsField()\nerror: str = SchemaField(description=\"Error message if the check fails\")\nraise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from urllib.parse import quote\n\nimport requests\n\nfrom backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import quote\nimport requests\nfrom backend.blocks.jina._auth import (JinaCredentials, JinaCredentialsField, JinaCredentialsInput, )\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nraise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
      "successors": []
    }
  ]
}