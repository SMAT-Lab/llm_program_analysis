{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [
    {
      "name": "parse_jwt_token",
      "type": "function",
      "start_line": 8,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\npayload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience=\"authenticated\")\nreturn payload",
          "successors": []
        },
        {
          "id": 4,
          "label": "except jwt.ExpiredSignatureError:\nraise ValueError(\"Token has expired\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "except jwt.InvalidTokenError as e:\nraise ValueError(f\"Invalid token: {str(e)}\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from typing import Any, Dict\n\nimport jwt\n\nfrom .config import settings\n\n\n        raise ValueError(f\"Invalid token: {str(e)}\")",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any, Dict\nimport jwt\nfrom .config import settings\ntry:\njwt.decode(token, key, algorithms=['HS256'])",
      "successors": [
        8
      ]
    },
    {
      "id": 6,
      "label": "except jwt.ExpiredSignatureError:\nraise ValueError('Token has expired')",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "except jwt.InvalidTokenError as e:\nraise ValueError(f\"Invalid token: {str(e)}\")",
      "successors": []
    }
  ]
}