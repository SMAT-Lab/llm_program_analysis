{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "APIKeyContainer",
      "type": "class",
      "start_line": 6,
      "end_line": 12,
      "functions": [],
      "simplified_code": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyContainer(NamedTuple):\n\"\"\"Container for API key parts.\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "raw: str\nprefix: str\npostfix: str\nhash: str",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "APIKeyManager",
      "type": "class",
      "start_line": 15,
      "end_line": 34,
      "functions": [
        {
          "name": "generate_api_key",
          "type": "function",
          "start_line": 20,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def generate_api_key(self) -> APIKeyContainer:\n\"\"\"Generate a new API key with all its parts.\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\nreturn APIKeyContainer(\n    raw=raw_key,\n    prefix=raw_key[: self.PREFIX_LENGTH],\n    postfix=raw_key[-self.POSTFIX_LENGTH :],\n    hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "verify_api_key",
          "type": "function",
          "start_line": 30,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
          "blocks": [
            {
              "id": 1,
              "label": "def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n    \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\nif not provided_key.startswith(self.PREFIX):",
              "successors": [
                {
                  "id": 3,
                  "label": "    return False",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8\n\n        )\n\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"",
          "successors": [
            {
              "id": 3,
              "label": "    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import hashlib\nimport secrets\nfrom typing import NamedTuple\n\n\n    hash: str\n\n\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
  "blocks": [
    {
      "id": 1,
      "label": "import hashlib\nimport secrets\nfrom typing import NamedTuple",
      "successors": [
        {
          "id": 2,
          "label": "User(NamedTuple):\nusername: str\n    password: str",
          "successors": []
        },
        {
          "id": 4,
          "label": "def generate_api_key() -> str:\nreturn secrets.token_hex(16)",
          "successors": []
        },
        {
          "id": 6,
          "label": "def verify_key(provided_key: str, stored_hash: str) -> bool:\nhash: str = hashlib.sha256(provided_key.encode()).hexdigest()",
          "successors": [
            {
              "id": 8,
              "label": "return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}