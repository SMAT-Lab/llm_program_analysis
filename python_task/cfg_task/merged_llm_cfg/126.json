{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [
    {
      "name": "find_previous_power_of_two",
      "type": "function",
      "start_line": 1,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else 1",
      "blocks": [
        {
          "id": 1,
          "label": "if not isinstance(number, int) or number < 0:\nraise ValueError('Input must be a non-negative integer')",
          "successors": []
        },
        {
          "id": 3,
          "label": "if number == 0:\nreturn 0",
          "successors": []
        },
        {
          "id": 5,
          "label": "power = 1",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "while power <= number:\npower <<= 1",
          "successors": [
            6
          ]
        },
        {
          "id": 8,
          "label": "return power >> 1 if number > 1 else 1",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "    return power >> 1 if number > 1 else 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "return power >> 1 if number > 1 else 1\nif __name__ == \"__main__\":\nimport doctest",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "doctest.testmod()",
      "successors": []
    }
  ]
}