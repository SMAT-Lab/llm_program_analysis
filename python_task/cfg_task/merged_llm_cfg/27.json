{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 154,
  "functions": [
    {
      "name": "mock_websocket",
      "type": "function",
      "start_line": 18,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)",
      "blocks": [
        {
          "id": 1,
          "label": "def mock_websocket() -> AsyncMock:\nreturn AsyncMock(spec=WebSocket)",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_manager",
      "type": "function",
      "start_line": 23,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
      "blocks": [
        {
          "id": 1,
          "label": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "test_websocket_router_subscribe",
      "type": "function",
      "start_line": 28,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
          "successors": [
            {
              "id": 3,
              "label": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()",
              "successors": [
                {
                  "id": 5,
                  "label": "    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_websocket_router_unsubscribe",
      "type": "function",
      "start_line": 51,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "blocks": [
        {
          "id": 1,
          "label": "mock_websocket.receive_text.side_effect = [\n    WsMessage(\n        method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n    ).model_dump_json(),\n    WebSocketDisconnect(),\n]\nawait websocket_router(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n)",
          "successors": [
            {
              "id": 3,
              "label": "mock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
              "successors": [
                {
                  "id": 5,
                  "label": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_websocket_router_invalid_method",
      "type": "function",
      "start_line": 74,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
          "successors": [
            {
              "id": 3,
              "label": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n    mock_manager.connect.assert_called_once_with(mock_websocket)",
              "successors": [
                {
                  "id": 5,
                  "label": "    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_subscribe_success",
      "type": "function",
      "start_line": 94,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
      "blocks": [
        {
          "id": 1,
          "label": "message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\nawait handle_subscribe(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n)",
          "successors": [
            {
              "id": 3,
              "label": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\nmock_websocket.send_text.assert_called_once()",
              "successors": [
                {
                  "id": 5,
                  "label": "assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_subscribe_missing_data",
      "type": "function",
      "start_line": 110,
      "end_line": 122,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_subscribe_missing_data(\n mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\nmessage = WsMessage(method=Methods.SUBSCRIBE)",
          "successors": [
            {
              "id": 3,
              "label": "await handle_subscribe(\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n)\nmock_manager.subscribe.assert_not_called()",
              "successors": [
                {
                  "id": 5,
                  "label": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_unsubscribe_success",
      "type": "function",
      "start_line": 126,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_unsubscribe_success(    mock_websocket: AsyncMock, mock_manager: AsyncMock) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
          "successors": [
            {
              "id": 3,
              "label": "    await handle_unsubscribe(        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message    )\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
              "successors": [
                {
                  "id": 5,
                  "label": "    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_unsubscribe_missing_data",
      "type": "function",
      "start_line": 142,
      "end_line": 154,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_unsubscribe_missing_data( mock_websocket: AsyncMock, mock_manager: AsyncMock) -> None:\nmessage = WsMessage(method=Methods.UNSUBSCRIBE)",
          "successors": [
            {
              "id": 3,
              "label": "await handle_unsubscribe( cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message )\nmock_manager.unsubscribe.assert_not_called()",
              "successors": [
                {
                  "id": 5,
                  "label": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n\n\n@pytest.fixture\n    return AsyncMock(spec=WebSocket)\n\n\n@pytest.fixture\n    return AsyncMock(spec=ConnectionManager)\n\n\n@pytest.mark.asyncio\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n@pytest.fixture\nasync def mock_websocket() -> WebSocket:\n    return AsyncMock(spec=WebSocket)",
      "successors": [
        {
          "id": 3,
          "label": "@pytest.fixture\nasync def mock_manager() -> ConnectionManager:\n    return AsyncMock(spec=ConnectionManager)\n@pytest.mark.asyncio\nasync def test_subscribe_success(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
          "successors": [
            {
              "id": 5,
              "label": "@pytest.mark.asyncio\nasync def test_unsubscribe_success(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n@pytest.mark.asyncio\nasync def test_subscribe_failure(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
              "successors": [
                {
                  "id": 7,
                  "label": "@pytest.mark.asyncio\nasync def test_unsubscribe_failure(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n@pytest.mark.asyncio\nasync def test_multiple_invocations(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@pytest.mark.asyncio\nasync def test_additional_case(mock_manager: ConnectionManager, mock_websocket: WebSocket):\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}