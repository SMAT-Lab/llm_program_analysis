{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 193,
  "functions": [
    {
      "name": "__convert_list",
      "type": "function",
      "start_line": 9,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
      "blocks": [
        {
          "id": 1,
          "label": "def __convert_list(value: Any) -> list:",
          "successors": [
            {
              "id": 2,
              "label": "if isinstance(value, (list, tuple, set)):\nreturn list(value)",
              "successors": []
            },
            {
              "id": 4,
              "label": "elif isinstance(value, dict):\nreturn list(value.items())",
              "successors": []
            },
            {
              "id": 6,
              "label": "elif isinstance(value, str):\nvalue = value.strip()",
              "successors": [
                {
                  "id": 8,
                  "label": "if value.startswith(\"[\") and value.endswith(\"]\"):",
                  "successors": [
                    {
                      "id": 9,
                      "label": "try:\nreturn json.loads(value)",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "except json.JSONDecodeError:\nreturn [value]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "else:\nreturn [value]",
                  "successors": []
                }
              ]
            },
            {
              "id": 15,
              "label": "else:\nreturn [value]",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_dict",
      "type": "function",
      "start_line": 27,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, str):\ntry:",
          "successors": [
            {
              "id": 3,
              "label": "result = json.loads(value)\nif isinstance(result, dict):",
              "successors": [
                {
                  "id": 5,
                  "label": "return result",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "return {\"value\": result}",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "except json.JSONDecodeError:\nreturn {\"value\": value}  # Fallback conversion",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_tuple",
      "type": "function",
      "start_line": 47,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
      "blocks": [
        {
          "id": 1,
          "label": "def __convert_tuple(value: Any) -> tuple:\nif isinstance(value, (str, list, set)):",
          "successors": [
            {
              "id": 3,
              "label": "return tuple(value)",
              "successors": []
            },
            {
              "id": 4,
              "label": "elif isinstance(value, dict):",
              "successors": [
                {
                  "id": 5,
                  "label": "return tuple(value.items())",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "elif isinstance(value, (int, float, bool)):",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return (value,)",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "elif isinstance(value, tuple):",
                      "successors": [
                        {
                          "id": 9,
                          "label": "return value",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "else:\nreturn (value,)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_set",
      "type": "function",
      "start_line": 60,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
      "blocks": [
        {
          "id": 1,
          "label": "if isinstance(value, (str, list, tuple)):",
          "successors": [
            {
              "id": 2,
              "label": "    return set(value)",
              "successors": []
            },
            {
              "id": 3,
              "label": "elif isinstance(value, dict):",
              "successors": [
                {
                  "id": 4,
                  "label": "    return set(value.items())",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "elif isinstance(value, set):",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    return value",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "else:\n    return {value}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_str",
      "type": "function",
      "start_line": 71,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
      "blocks": [
        {
          "id": 1,
          "label": "def __convert_str(value: Any) -> str:\nif isinstance(value, str):",
          "successors": [
            {
              "id": 3,
              "label": "return value",
              "successors": []
            },
            {
              "id": 4,
              "label": "else:\nreturn json.dumps(value)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_num",
      "type": "function",
      "start_line": 81,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
      "blocks": [
        {
          "id": 1,
          "label": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\nif isinstance(value, (list, dict, tuple, set)):",
          "successors": [
            {
              "id": 3,
              "label": "return num_type(len(value))",
              "successors": []
            },
            {
              "id": 4,
              "label": "elif isinstance(value, num_type):",
              "successors": [
                {
                  "id": 5,
                  "label": "return value",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "else:\ntry:",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return num_type(float(value))",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "except (ValueError, TypeError):\nreturn num_type(0)  # Fallback conversion",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_bool",
      "type": "function",
      "start_line": 93,
      "end_line": 102,
      "functions": [],
      "classes": [],
      "simplified_code": "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
      "blocks": [
        {
          "id": 1,
          "label": "def __convert_bool(value: Any) -> bool:\nif isinstance(value, bool):",
          "successors": [
            {
              "id": 3,
              "label": "return value",
              "successors": []
            },
            {
              "id": 4,
              "label": "elif isinstance(value, str):\nif value.lower() in [\"true\", \"1\"]:",
              "successors": [
                {
                  "id": 6,
                  "label": "return True",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "else:\nreturn False",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "label": "else:\nreturn bool(value)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "_try_convert",
      "type": "function",
      "start_line": 105,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
      "blocks": [
        {
          "id": 1,
          "label": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\norigin = get_origin(target_type)\nargs = get_args(target_type)\nif origin is None:\n    origin = target_type",
          "successors": [
            {
              "id": 3,
              "label": "if origin not in [list, dict, tuple, str, set, int, float, bool]:\n    return value",
              "successors": [
                {
                  "id": 4,
                  "label": "if isinstance(value, origin):\nif not args:\n    return value",
                  "successors": [
                    {
                      "id": 6,
                      "label": "else:\n    if origin is list:\n        return [convert(v, args[0]) for v in value]",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "elif origin is tuple:\n    if len(args) == 1:\n        return tuple(convert(v, args[0]) for v in value)\n    else:\n        return tuple(convert(v, t) for v, t in zip(value, args))",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "elif origin is dict:\n    key_type, val_type = args\n    return {\n        convert(k, key_type): convert(v, val_type) for k, v in value.items()\n    }",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "elif origin is set:\n    return {convert(v, args[0]) for v in value}",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "else:\n    return value",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "elif raise_on_mismatch:\n    raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "else:",
                  "successors": [
                    {
                      "id": 13,
                      "label": "if origin is list:\n    value = __convert_list(value)\n    if args:\n        return [convert(v, args[0]) for v in value]\n    else:\n        return value",
                      "successors": []
                    },
                    {
                      "id": 14,
                      "label": "elif origin is dict:\n    value = __convert_dict(value)\n    if args:\n        key_type, val_type = args\n        return {\n            convert(k, key_type): convert(v, val_type) for k, v in value.items()\n        }\n    else:\n        return value",
                      "successors": []
                    },
                    {
                      "id": 15,
                      "label": "elif origin is tuple:\n    value = __convert_tuple(value)\n    if args:\n        if len(args) == 1:\n            return tuple(convert(v, args[0]) for v in value)\n        else:\n            return tuple(convert(v, t) for v, t in zip(value, args))\n    else:\n        return value",
                      "successors": []
                    },
                    {
                      "id": 16,
                      "label": "elif origin is str:\n    return __convert_str(value)",
                      "successors": []
                    },
                    {
                      "id": 17,
                      "label": "elif origin is set:\n    value = __convert_set(value)\n    if args:\n        return {convert(v, args[0]) for v in value}\n    else:\n        return value",
                      "successors": []
                    },
                    {
                      "id": 18,
                      "label": "elif origin is int:\n    return __convert_num(value, int)",
                      "successors": []
                    },
                    {
                      "id": 19,
                      "label": "elif origin is float:\n    return __convert_num(value, float)",
                      "successors": []
                    },
                    {
                      "id": 20,
                      "label": "elif origin is bool:\n    return __convert_bool(value)",
                      "successors": []
                    },
                    {
                      "id": 21,
                      "label": "else:\n    return value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "type_match",
      "type": "function",
      "start_line": 185,
      "end_line": 186,
      "functions": [],
      "classes": [],
      "simplified_code": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
      "blocks": [
        {
          "id": 1,
          "label": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
          "successors": []
        }
      ]
    },
    {
      "name": "convert",
      "type": "function",
      "start_line": 189,
      "end_line": 193,
      "functions": [],
      "classes": [],
      "simplified_code": "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
      "blocks": [
        {
          "id": 1,
          "label": "def convert(value: Any, target_type: Type[T]) -> T:\ntry:",
          "successors": [
            {
              "id": 3,
              "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:\nraise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ConversionError",
      "type": "class",
      "start_line": 5,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "simplified_code": "class ConversionError(ValueError):\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class ConversionError(ValueError):\n    pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n\n\n    pass\n\n\n        return [value]\n\n\n        return {\"value\": value}\n\n\n        return (value,)\n\n\n        return {value}\n\n\n        return json.dumps(value)\n\n\nNUM = TypeVar(\"NUM\", int, float)\n\n\n            return num_type(0)  # Fallback conversion\n\n\n        return bool(value)\n\n\n            return value\n\n\nT = TypeVar(\"T\")\n\n\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n\n\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\npass",
      "successors": [
        {
          "id": 3,
          "label": "return [value]\nreturn {\"value\": value}",
          "successors": [
            {
              "id": 5,
              "label": "return (value,)\nreturn {value}",
              "successors": [
                {
                  "id": 7,
                  "label": "return json.dumps(value)\nNUM = TypeVar(\"NUM\", int, float)",
                  "successors": [
                    {
                      "id": 9,
                      "label": "return num_type(0)  # Fallback conversion\nreturn bool(value)",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return value\nT = TypeVar(\"T\")",
                          "successors": [
                            {
                              "id": 13,
                              "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\nraise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}