{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "CompassWebhookType",
      "type": "class",
      "start_line": 14,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": "class CompassWebhookType(StrEnum):\n    TRANSCRIPTION = \"transcription\"\n    TASK = \"task\"",
      "blocks": [
        {
          "id": 1,
          "label": "class CompassWebhookType(StrEnum):\n    TRANSCRIPTION = \"transcription\"\n    TASK = \"task\"",
          "successors": []
        }
      ]
    },
    {
      "name": "CompassWebhookManager",
      "type": "class",
      "start_line": 19,
      "end_line": 30,
      "functions": [
        {
          "name": "validate_payload",
          "type": "function",
          "start_line": 24,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        payload = await request.json()\n        event_type = CompassWebhookType.TRANSCRIPTION  # currently the only type\n\n        return payload, event_type",
          "blocks": [
            {
              "id": 1,
              "label": "async def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n    payload = await request.json()\n    event_type = CompassWebhookType.TRANSCRIPTION\nreturn payload, event_type",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class CompassWebhookManager(ManualWebhookManagerBase):\n    PROVIDER_NAME = ProviderName.COMPASS\n    WebhookType = CompassWebhookType\n\n    @classmethod\n        return payload, event_type",
      "blocks": [
        {
          "id": 1,
          "label": "class CompassWebhookManager(ManualWebhookManagerBase):",
          "successors": [
            {
              "id": 2,
              "label": "    PROVIDER_NAME = ProviderName.COMPASS\n    WebhookType = CompassWebhookType",
              "successors": []
            },
            {
              "id": 3,
              "label": "    @classmethod\n    def get_event_from_payload(cls, request):",
              "successors": [
                {
                  "id": 5,
                  "label": "        if not cls.is_valid_secret(request.GET):\n            raise APIException('Invalid request')",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "        payload = cls.parse_request(request)",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "        event_type = cls.identify_event(payload)",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "        return payload, event_type",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import logging\n\nfrom fastapi import Request\nfrom strenum import StrEnum\n\nfrom backend.data import integrations\nfrom backend.integrations.providers import ProviderName\n\nfrom ._manual_base import ManualWebhookManagerBase\n\nlogger = logging.getLogger(__name__)\n\n\n    TASK = \"task\"\n\n\n        return payload, event_type",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom fastapi import Request",
      "successors": [
        {
          "id": 3,
          "label": "from strenum import StrEnum\nfrom backend.data import integrations",
          "successors": [
            {
              "id": 5,
              "label": "from backend.integrations.providers import ProviderName\nfrom ._manual_base import ManualWebhookManagerBase",
              "successors": [
                {
                  "id": 7,
                  "label": "logger = logging.getLogger(__name__)\nTASK = \"task\"",
                  "successors": [
                    {
                      "id": 9,
                      "label": "return payload, event_type",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}