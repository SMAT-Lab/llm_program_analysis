{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [
    {
      "name": "create_test_user",
      "type": "function",
      "start_line": 11,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_test_user() -> User:\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser#example.com\",\n        \"name\": \"Test User\",\n    }\n    user = await get_or_create_user(test_user_data)\n    return user",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_test_user() -> User:\n    test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser#example.com', 'name': 'Test User'}",
          "successors": [
            {
              "id": 3,
              "label": "    user = await get_or_create_user(test_user_data)\n    return user",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "create_test_graph",
      "type": "function",
      "start_line": 21,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n    nodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]\n    links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]\n\n    return graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    nodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]\n    links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]",
              "successors": [
                {
                  "id": 5,
                  "label": "    return graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sample_agent",
      "type": "function",
      "start_line": 76,
      "end_line": 86,
      "functions": [],
      "classes": [],
      "simplified_code": "async def sample_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\n        response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)\n        print(result)",
      "blocks": [
        {
          "id": 1,
          "label": "async def sample_agent():\nasync with SpinTestServer() as server:",
          "successors": [
            {
              "id": 3,
              "label": "test_user = await create_test_user()\ntest_graph = await create_graph(create_test_graph(), test_user.id)\ninput_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\nresponse = await server.agent_server.test_execute_graph(\n    test_graph.id, input_data, test_user.id\n)\nprint(response)\nresult = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)\nprint(result)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\n\n\n    return user\n\n\n    )\n\n\n        print(result)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(sample_agent())",
  "blocks": [
    {
      "id": 1,
      "label": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution",
      "successors": [
        {
          "id": 2,
          "label": "return user",
          "successors": []
        },
        {
          "id": 3,
          "label": ")",
          "successors": []
        },
        {
          "id": 4,
          "label": "print(result)",
          "successors": []
        },
        {
          "id": 5,
          "label": "if __name__ == \"__main__\":\nimport asyncio",
          "successors": [
            {
              "id": 7,
              "label": "asyncio.run(sample_agent())",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}