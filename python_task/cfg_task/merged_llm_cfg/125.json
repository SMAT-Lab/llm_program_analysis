{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 199,
  "functions": [],
  "classes": [
    {
      "name": "FalModel",
      "type": "class",
      "start_line": 21,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "simplified_code": "class FalModel(str, Enum):\n    MOCHI = \"fal-ai/mochi-v1\"\n    LUMA = \"fal-ai/luma-dream-machine\"",
      "blocks": [
        {
          "id": 1,
          "label": "class FalModel(str, Enum):\nMOCHI = \"fal-ai/mochi-v1\"\nLUMA = \"fal-ai/luma-dream-machine\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIVideoGeneratorBlock",
      "type": "class",
      "start_line": 26,
      "end_line": 199,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\",\n            description=\"Generate videos using FAL AI models.\",\n            categories={BlockCategory.AI},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"prompt\": \"A dog running in a field.\",\n                \"model\": FalModel.MOCHI,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")],\n            test_mock={\n                \"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\", description=\"Generate videos using FAL AI models.\", categories={BlockCategory.AI}, input_schema=self.Input, output_schema=self.Output, test_input={\"prompt\": \"A dog running in a field.\", \"model\": FalModel.MOCHI, \"credentials\": TEST_CREDENTIALS_INPUT, }, test_credentials=TEST_CREDENTIALS, test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")], test_mock={\"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\"}, )",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_headers",
          "type": "function",
          "start_line": 67,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_headers(self, api_key: str) -> dict[str, str]:\n        \"\"\"Get headers for FAL API requests.\"\"\"\n        return {\n            \"Authorization\": f\"Key {api_key}\",\n            \"Content-Type\": \"application/json\",\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "def _get_headers(self, api_key: str) -> dict[str, str]:\nreturn {\n    \"Authorization\": f\"Key {api_key}\",\n    \"Content-Type\": \"application/json\",\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "_submit_request",
          "type": "function",
          "start_line": 74,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _submit_request(\n        self, url: str, headers: dict[str, str], data: dict[str, Any]\n    ) -> dict[str, Any]:\n        \"\"\"Submit a request to the FAL API.\"\"\"\n        try:\n            response = httpx.post(url, headers=headers, json=data)\n            response.raise_for_status()\n            return response.json()\n        except httpx.HTTPError as e:\n            logger.error(f\"FAL API request failed: {str(e)}\")\n            raise RuntimeError(f\"Failed to submit request: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nresponse = httpx.post(url, headers=headers, json=data)\nresponse.raise_for_status()\nreturn response.json()",
              "successors": []
            },
            {
              "id": 4,
              "label": "logger.error(f\"FAL API request failed: {str(e)}\")\nraise RuntimeError(f\"Failed to submit request: {str(e)}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "_poll_status",
          "type": "function",
          "start_line": 86,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n        \"\"\"Poll the status endpoint until completion or failure.\"\"\"\n        try:\n            response = httpx.get(status_url, headers=headers)\n            response.raise_for_status()\n            return response.json()\n        except httpx.HTTPError as e:\n            logger.error(f\"Failed to get status: {str(e)}\")\n            raise RuntimeError(f\"Failed to get status: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nresponse = httpx.get(status_url, headers=headers)\nresponse.raise_for_status()\nreturn response.json()",
              "successors": []
            },
            {
              "id": 4,
              "label": "logger.error(f\"Failed to get status: {str(e)}\")\nraise RuntimeError(f\"Failed to get status: {str(e)}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "generate_video",
          "type": "function",
          "start_line": 96,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": "    def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n        \"\"\"Generate video using the specified FAL model.\"\"\"\n        base_url = \"https://queue.fal.run\"\n        api_key = credentials.api_key.get_secret_value()\n        headers = self._get_headers(api_key)\n\n        # Submit generation request\n        submit_url = f\"{base_url}/{input_data.model.value}\"\n        submit_data = {\"prompt\": input_data.prompt}\n\n        seen_logs = set()\n\n        try:\n            # Submit request to queue\n            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n            submit_response.raise_for_status()\n            request_data = submit_response.json()\n\n            # Get request_id and urls from initial response\n            request_id = request_data.get(\"request_id\")\n            status_url = request_data.get(\"status_url\")\n            result_url = request_data.get(\"response_url\")\n\n            if not all([request_id, status_url, result_url]):\n                raise ValueError(\"Missing required data in submission response\")\n\n            # Poll for status with exponential backoff\n            max_attempts = 30\n            attempt = 0\n            base_wait_time = 5\n\n            while attempt < max_attempts:\n                status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\n                status_response.raise_for_status()\n                status_data = status_response.json()\n\n                # Process new logs only\n                logs = status_data.get(\"logs\", [])\n                if logs and isinstance(logs, list):\n                    for log in logs:\n                        if isinstance(log, dict):\n                            # Create a unique key for this log entry\n                            log_key = (\n                                f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                            )\n                            if log_key not in seen_logs:\n                                seen_logs.add(log_key)\n                                message = log.get(\"message\", \"\")\n                                if message:\n                                    logger.debug(\n                                        f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n                                    )\n\n                status = status_data.get(\"status\")\n                if status == \"COMPLETED\":\n                    # Get the final result\n                    result_response = httpx.get(result_url, headers=headers)\n                    result_response.raise_for_status()\n                    result_data = result_response.json()\n\n                    if \"video\" not in result_data or not isinstance(\n                        result_data[\"video\"], dict\n                    ):\n                        raise ValueError(\"Invalid response format - missing video data\")\n\n                    video_url = result_data[\"video\"].get(\"url\")\n                    if not video_url:\n                        raise ValueError(\"No video URL in response\")\n\n                    return video_url\n\n                elif status == \"FAILED\":\n                    error_msg = status_data.get(\"error\", \"No error details provided\")\n                    raise RuntimeError(f\"Video generation failed: {error_msg}\")\n                elif status == \"IN_QUEUE\":\n                    position = status_data.get(\"queue_position\", \"unknown\")\n                    logger.debug(\n                        f\"[FAL Generation] Status: In queue, position: {position}\"\n                    )\n                elif status == \"IN_PROGRESS\":\n                    logger.debug(\n                        \"[FAL Generation] Status: Request is being processed...\"\n                    )\n                else:\n                    logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")\n\n                wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds\n                time.sleep(wait_time)\n                attempt += 1\n\n            raise RuntimeError(\"Maximum polling attempts reached\")\n\n        except httpx.HTTPError as e:\n            raise RuntimeError(f\"API request failed: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "base_url = 'https://queue.fal.run'\napi_key = credentials.api_key.get_secret_value()\nheaders = self._get_headers(api_key)\nsubmit_url = f\"{base_url}/{input_data.model.value}\"\nsubmit_data = {\"prompt\": input_data.prompt}\nseen_logs = set()\ntry:\nsubmit_response = httpx.post(submit_url, headers=headers, json=submit_data)\nsubmit_response.raise_for_status()\nrequest_data = submit_response.json()\nrequest_id = request_data.get('request_id')\nstatus_url = request_data.get('status_url')\nresult_url = request_data.get('response_url')\nif not all([request_id, status_url, result_url]):\n    raise ValueError('Missing required data in submission response')",
              "successors": [
                4,
                17
              ]
            },
            {
              "id": 4,
              "label": "max_attempts = 30\nattempt = 0\nbase_wait_time = 5\nwhile attempt < max_attempts:\nstatus_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\nstatus_response.raise_for_status()\nstatus_data = status_response.json()\nlogs = status_data.get('logs', [])\nif logs and isinstance(logs, list):\nfor log in logs:\n    if isinstance(log, dict):\n        log_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n        if log_key not in seen_logs:\n            seen_logs.add(log_key)\n            message = log.get('message', '')\n            if message:\n                logger.debug(f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\")\n",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "status = status_data.get('status')\nif status == 'COMPLETED':\nresult_response = httpx.get(result_url, headers=headers)\nresult_response.raise_for_status()\nresult_data = result_response.json()\nif 'video' not in result_data or not isinstance(result_data['video'], dict):\n    raise ValueError('Invalid response format - missing video data')\nvideo_url = result_data['video'].get('url')\nif not video_url:\n    raise ValueError('No video URL in response')\nreturn video_url",
              "successors": []
            },
            {
              "id": 11,
              "label": "elif status == 'FAILED':\n    error_msg = status_data.get('error', 'No error details provided')\n    raise RuntimeError(f\"Video generation failed: {error_msg}\")",
              "successors": []
            },
            {
              "id": 12,
              "label": "elif status == 'IN_QUEUE':\n    position = status_data.get('queue_position', 'unknown')\n    logger.debug(f\"[FAL Generation] Status: In queue, position: {position}\")",
              "successors": [
                15
              ]
            },
            {
              "id": 13,
              "label": "elif status == 'IN_PROGRESS':\n    logger.debug(\"[FAL Generation] Status: Request is being processed...\")",
              "successors": [
                15
              ]
            },
            {
              "id": 14,
              "label": "else:\n    logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")",
              "successors": [
                15
              ]
            },
            {
              "id": 15,
              "label": "wait_time = min(base_wait_time * (2 ** attempt), 60)\ntime.sleep(wait_time)\nattempt += 1",
              "successors": [
                4
              ]
            },
            {
              "id": 17,
              "label": "except httpx.HTTPError as e:\n    raise RuntimeError(f'API request failed: {str(e)}')",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 191,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: FalCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            video_url = self.generate_video(input_data, credentials)\n            yield \"video_url\", video_url\n        except Exception as e:\n            error_message = str(e)\n            yield \"error\", error_message",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nvideo_url = self.generate_video(input_data, credentials)\nyield 'video_url', video_url",
              "successors": []
            },
            {
              "id": 3,
              "label": "except Exception as e:\nerror_message = str(e)\nyield 'error', error_message",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 27,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"Description of the video to generate.\",\n            placeholder=\"A dog running in a field.\",\n        )\n        model: FalModel = SchemaField(\n            title=\"FAL Model\",\n            default=FalModel.MOCHI,\n            description=\"The FAL model to use for video generation.\",\n        )\n        credentials: FalCredentialsInput = FalCredentialsField()",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nprompt: str = SchemaField(description=\"Description of the video to generate.\", placeholder=\"A dog running in a field.\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "model: FalModel = SchemaField(title=\"FAL Model\", default=FalModel.MOCHI, description=\"The FAL model to use for video generation.\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "credentials: FalCredentialsInput = FalCredentialsField()",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 39,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the generated video.\")\n        error: str = SchemaField(\n            description=\"Error message if video generation failed.\"\n        )\n        logs: list[str] = SchemaField(\n            description=\"Generation progress logs.\", optional=True\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nvideo_url: str = SchemaField(description=\"The URL of the generated video.\")\nerror: str = SchemaField(description=\"Error message if video generation failed.\")\nlogs: list[str] = SchemaField(description=\"Generation progress logs.\", optional=True)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIVideoGeneratorBlock(Block):\n        credentials: FalCredentialsInput = FalCredentialsField()\n\n        )\n\n        )\n\n        }\n\n            raise RuntimeError(f\"Failed to submit request: {str(e)}\")\n\n            raise RuntimeError(f\"Failed to get status: {str(e)}\")\n\n            raise RuntimeError(f\"API request failed: {str(e)}\")\n\n            yield \"error\", error_message",
      "blocks": [
        {
          "id": 1,
          "label": "class AIVideoGeneratorBlock(Block):\ncredentials: FalCredentialsInput = FalCredentialsField()\nif ...: # Assuming the code includes logic that branches\nraise RuntimeError(f\"Failed to submit request: {str(e)}\")",
          "successors": [
            7
          ]
        },
        {
          "id": 5,
          "label": "raise RuntimeError(f\"Failed to get status: {str(e)}\")",
          "successors": [
            7
          ]
        },
        {
          "id": 6,
          "label": "raise RuntimeError(f\"API request failed: {str(e)}\")",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "yield \"error\", error_message",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Any\n\nimport httpx\n\nfrom backend.blocks.fal._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    FalCredentials,\n    FalCredentialsField,\n    FalCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nlogger = logging.getLogger(__name__)\n\n\n    LUMA = \"fal-ai/luma-dream-machine\"\n\n\n            yield \"error\", error_message",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Any\nimport httpx\nfrom backend.blocks.fal._auth import ( TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, FalCredentials, FalCredentialsField, FalCredentialsInput, )\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nlogger = logging.getLogger(__name__)\nLUMA = \"fal-ai/luma-dream-machine\"",
      "successors": []
    }
  ]
}