{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "TranscribeYoutubeVideoBlock",
      "type": "class",
      "start_line": 10,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 25,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            }\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_video_id",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")",
          "blocks": [
            {
              "id": 1,
              "label": "parsed_url = urlparse(url)\nif parsed_url.netloc == \"youtu.be\":\nreturn parsed_url.path[1:]",
              "successors": []
            },
            {
              "id": 4,
              "label": "if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\nif parsed_url.path == \"/watch\":\np = parse_qs(parsed_url.query)\nreturn p[\"v\"][0]",
              "successors": []
            },
            {
              "id": 7,
              "label": "if parsed_url.path[:7] == \"/embed/\":\nreturn parsed_url.path.split(\"/\")[2]",
              "successors": []
            },
            {
              "id": 9,
              "label": "if parsed_url.path[:3] == \"/v/\":\nreturn parsed_url.path.split(\"/\")[2]",
              "successors": []
            },
            {
              "id": 10,
              "label": "raise ValueError(f\"Invalid YouTube URL: {url}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "get_transcript",
          "type": "function",
          "start_line": 64,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:\ntranscript_list = YouTubeTranscriptApi.list_transcripts(video_id)\nif not transcript_list:\nraise ValueError(f\"No transcripts found for the video: {video_id}\")",
              "successors": [
                7
              ]
            },
            {
              "id": 5,
              "label": "for transcript in transcript_list:\nfirst_transcript = transcript_list.find_transcript([transcript.language_code])\nreturn YouTubeTranscriptApi.get_transcript(video_id, languages=[first_transcript.language_code])",
              "successors": []
            },
            {
              "id": 7,
              "label": "except Exception:\nraise ValueError(f\"No transcripts found for the video: {video_id}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 82,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text",
          "blocks": [
            {
              "id": 1,
              "label": "video_id = self.extract_video_id(input_data.youtube_url)\nyield \"video_id\", video_id\ntranscript = self.get_transcript(video_id)\nformatter = TextFormatter()\ntranscript_text = formatter.format_transcript(transcript)\nyield \"transcript\", transcript_text",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 11,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nyoutube_url: str = SchemaField(title=\"YouTube URL\", description=\"The URL of the YouTube video to transcribe\", placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 18,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nvideo_id: str = SchemaField(description=\"The extracted YouTube video ID\")\ntranscript: str = SchemaField(description=\"The transcribed text of the video\")\nerror: str = SchemaField(description=\"Any error message if the transcription fails\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class TranscribeYoutubeVideoBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n\n    @staticmethod\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n        yield \"transcript\", transcript_text",
      "blocks": [
        {
          "id": 1,
          "label": "class TranscribeYoutubeVideoBlock(Block):\n@staticmethod\n    def is_valid.youtube(url):\nif not url.startswith('https://www.youtube.com/watch'):\n            raise ValueError(f\"Invalid YouTube URL: {url}\")\n@staticmethod\n    def getTranscriptForVideo(video_id):\nif not video_id:\n            raise ValueError(\"No video ID found\")\ntranscript_text = \"...\"\n        yield \"transcript\",\n            transcript_text",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n        yield \"transcript\", transcript_text",
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import parse_qs, urlparse\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nyield 'transcript', transcript_text",
      "successors": []
    }
  ]
}