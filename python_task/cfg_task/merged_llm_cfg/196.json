{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 48,
  "functions": [
    {
      "name": "server",
      "type": "function",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "async def server():\n    async with SpinTestServer() as server:\n        yield server",
      "blocks": [
        {
          "id": 1,
          "label": "async def server():\nasync with SpinTestServer() as server:\nyield server",
          "successors": []
        }
      ]
    },
    {
      "name": "graph_cleanup",
      "type": "function",
      "start_line": 26,
      "end_line": 48,
      "functions": [
        {
          "name": "create_graph_wrapper",
          "type": "function",
          "start_line": 30,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph",
          "blocks": [
            {
              "id": 1,
              "label": "created_graph = await original_create_graph(*args, **kwargs)\nuser_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\ncreated_graph_ids.append((created_graph.id, user_id))\nreturn created_graph",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def graph_cleanup(server):\ncreated_graph_ids = []\noriginal_create_graph = server.agent_server.test_create_graph\ntry:\nserver.agent_server.test_create_graph = create_graph_wrapper\nyield\nfinally:",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "server.agent_server.test_create_graph = original_create_graph",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "for graph_id, user_id in created_graph_ids:\nif user_id:\nresp = await server.agent_server.test_delete_graph(graph_id, user_id)\nnum_deleted = resp[\"version_counts\"]",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
          "successors": [
            9
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import logging\n\nimport pytest\n\nfrom backend.util.test import SpinTestServer\n\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\nlogger = logging.getLogger(__name__)\n\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n@pytest.fixture(scope=\"session\")\n        yield server\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport pytest\nfrom backend.util.test import SpinTestServer\nlogger = logging.getLogger(__name__)\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n@pytest.fixture(scope='session')\nyield server\n@pytest.fixture(scope='session', autouse=True)\nassert num_deleted > 0, f'Graph {graph_id} was not deleted.'",
      "successors": []
    }
  ]
}