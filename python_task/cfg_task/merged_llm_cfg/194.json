{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 88,
  "functions": [
    {
      "name": "generate_all_permutations",
      "type": "function",
      "start_line": 12,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": "def generate_all_permutations(sequence: list[int | str]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
      "blocks": [
        {
          "id": 1,
          "label": "create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
          "successors": []
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 16,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_state_space_tree(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_sequence)\n        return\n\n    for i in range(len(sequence)):\n        if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
      "blocks": [
        {
          "id": 1,
          "label": "def create_state_space_tree(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n) -> None:",
          "successors": [
            {
              "id": 2,
              "label": "if index == len(sequence):\n    print(current_sequence)\n    return",
              "successors": []
            },
            {
              "id": 4,
              "label": "for i in range(len(sequence)):",
              "successors": [
                {
                  "id": 5,
                  "label": "    if not index_used[i]:\n        current_sequence.append(sequence[i])\n        index_used[i] = True\n        create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n        current_sequence.pop()\n        index_used[i] = False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nIn this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\n\n\n\n            index_used[i] = False\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))\n\"\"\"\n\nsequence: list[int | str] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: list[int | str] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations\nsequence: list[int | str] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)",
      "successors": [
        {
          "id": 3,
          "label": "sequence_2: list[int | str] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)",
          "successors": []
        }
      ]
    }
  ]
}