{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 144,
  "functions": [
    {
      "name": "wait_execution",
      "type": "function",
      "start_line": 56,
      "end_line": 78,
      "functions": [
        {
          "name": "is_execution_completed",
          "type": "function",
          "start_line": 62,
          "end_line": 68,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED",
          "blocks": [
            {
              "id": 1,
              "label": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\nlog.info(f\"Execution status: {status}\")\nif status == ExecutionStatus.FAILED:\nlog.info(\"Execution failed\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "raise Exception(\"Execution failed\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\nfor i in range(timeout):\nif await is_execution_completed():\nreturn await AgentServer().test_get_graph_run_node_execution_results(\n    graph_id, graph_exec_id, user_id\n)",
          "successors": []
        },
        {
          "id": 5,
          "label": "time.sleep(1)\nassert False, \"Execution did not complete in time.\"",
          "successors": []
        }
      ]
    },
    {
      "name": "execute_block_test",
      "type": "function",
      "start_line": 81,
      "end_line": 144,
      "functions": [
        {
          "name": "compare",
          "type": "function",
          "start_line": 120,
          "end_line": 135,
          "functions": [],
          "classes": [],
          "simplified_code": "            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
          "blocks": [
            {
              "id": 1,
              "label": "if data == expected_data:\nis_matching = True",
              "successors": [
                8
              ]
            },
            {
              "id": 3,
              "label": "elif isinstance(expected_data, type):\nis_matching = isinstance(data, expected_data)",
              "successors": [
                8
              ]
            },
            {
              "id": 5,
              "label": "elif callable(expected_data):\nis_matching = expected_data(data)",
              "successors": [
                8
              ]
            },
            {
              "id": 7,
              "label": "else:",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "is_matching = False\nmark = '\u2705' if is_matching else '\u274c'\nlog.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\nif not is_matching:\nraise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "def execute_block_test(block: Block):\nprefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\nlog.info(f\"{prefix} No test data provided\")\n        return",
          "successors": []
        },
        {
          "id": 4,
          "label": "if not isinstance(block.test_input, list):\nblock.test_input = [block.test_input]",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if not isinstance(block.test_output, list):\nblock.test_output = [block.test_output]",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\nfor mock_name, mock_obj in (block.test_mock or {}).items():\nlog.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\nsetattr(block, mock_name, mock_obj)",
          "successors": [
            13
          ]
        },
        {
          "id": 12,
          "label": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "extra_exec_kwargs = {}\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\nif not block.test_credentials:\nraise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
          "successors": []
        },
        {
          "id": 17,
          "label": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "for input_data in block.test_input:",
          "successors": [
            20,
            28
          ]
        },
        {
          "id": 20,
          "label": "log.info(f\"{prefix} in: {input_data}\")\nfor output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\nif output_index >= len(block.test_output):\nraise ValueError(f\"{prefix} produced output more than expected\")",
          "successors": []
        },
        {
          "id": 24,
          "label": "ex_output_name, ex_output_data = block.test_output[output_index]\ncompare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
          "successors": [
            26
          ]
        },
        {
          "id": 26,
          "label": "",
          "successors": [
            20
          ]
        },
        {
          "id": 28,
          "label": "if output_index < len(block.test_output):\nraise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
          "successors": []
        },
        {
          "id": 30,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "SpinTestServer",
      "type": "class",
      "start_line": 17,
      "end_line": 53,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 18,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
          "blocks": [
            {
              "id": 1,
              "label": "self.db_api = DatabaseManager()\nself.exec_manager = ExecutionManager()\nself.agent_server = AgentServer()\nself.scheduler = ExecutionScheduler()",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_user_id",
          "type": "function",
          "start_line": 25,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "blocks": [
            {
              "id": 1,
              "label": "def test_get_user_id():\n    return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
              "successors": []
            }
          ]
        },
        {
          "name": "__aenter__",
          "type": "function",
          "start_line": 28,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self",
          "blocks": [
            {
              "id": 1,
              "label": "self.setup_dependency_overrides()\nself.db_api.__enter__()\nself.agent_server.__enter__()\nself.exec_manager.__enter__()\nself.scheduler.__enter__()\nawait db.connect()\nawait initialize_blocks()\nawait create_default_user()\nreturn self",
              "successors": []
            }
          ]
        },
        {
          "name": "__aexit__",
          "type": "function",
          "start_line": 41,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)",
          "blocks": [
            {
              "id": 1,
              "label": "await db.disconnect()\nself.scheduler.__exit__(exc_type, exc_val, exc_tb)\nself.exec_manager.__exit__(exc_type, exc_val, exc_tb)\nself.agent_server.__exit__(exc_type, exc_val, exc_tb)\nself.db_api.__exit__(exc_type, exc_val, exc_tb)",
              "successors": []
            }
          ]
        },
        {
          "name": "setup_dependency_overrides",
          "type": "function",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def setup_dependency_overrides(self):\nself.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class SpinTestServer:\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n        return self\n\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class SpinTestServer:\nself.scheduler = ExecutionScheduler()\n@staticmethod\nreturn \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\nreturn self\nself.db_api.__exit__(exc_type, exc_val, exc_tb)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\nlog = logging.getLogger(__name__)\n\n\n        )\n\n\n    assert False, \"Execution did not complete in time.\"\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom typing import Sequence\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\nlog = logging.getLogger(__name__)\nassert False, \"Execution did not complete in time.\"",
      "successors": []
    }
  ]
}