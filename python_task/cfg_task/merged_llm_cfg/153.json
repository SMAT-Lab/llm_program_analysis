{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 174,
  "functions": [
    {
      "name": "get_praw",
      "type": "function",
      "start_line": 34,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_praw(creds: RedditCredentials) -> praw.Reddit:\n    client = praw.Reddit(\n        client_id=creds.client_id.get_secret_value(),\n        client_secret=creds.client_secret.get_secret_value(),\n        username=creds.username.get_secret_value(),\n        password=creds.password.get_secret_value(),\n        user_agent=creds.user_agent,\n    )\n    me = client.user.me()\n    if not me:\n        raise ValueError(\"Invalid Reddit credentials.\")\n    print(f\"Logged in as Reddit user: {me.name}\")\n    return client",
      "blocks": [
        {
          "id": 1,
          "label": "client = praw.Reddit(client_id=creds.client_id.get_secret_value(), client_secret=creds.client_secret.get_secret_value(), username=creds.username.get_secret_value(), password=creds.password.get_secret_value(), user_agent=creds.user_agent)\nme = client.user.me()\nif not me:\nraise ValueError(\"Invalid Reddit credentials.\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "print(f\"Logged in as Reddit user: {me.name}\")\nreturn client",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "RedditCredentials",
      "type": "class",
      "start_line": 12,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "class RedditCredentials(BaseModel):\n    client_id: BlockSecret = SecretField(key=\"reddit_client_id\")\n    client_secret: BlockSecret = SecretField(key=\"reddit_client_secret\")\n    username: BlockSecret = SecretField(key=\"reddit_username\")\n    password: BlockSecret = SecretField(key=\"reddit_password\")\n    user_agent: str = \"AutoGPT:1.0 (by /u/autogpt)\"\n\n    model_config = ConfigDict(title=\"Reddit Credentials\")",
      "blocks": [
        {
          "id": 1,
          "label": "class RedditCredentials(BaseModel):\nclient_id: BlockSecret = SecretField(key=\"reddit_client_id\")\nclient_secret: BlockSecret = SecretField(key=\"reddit_client_secret\")\nusername: BlockSecret = SecretField(key=\"reddit_username\")\npassword: BlockSecret = SecretField(key=\"reddit_password\")\nuser_agent: str = \"AutoGPT:1.0 (by /u/autogpt)\"\n\nmodel_config = ConfigDict(title=\"Reddit Credentials\")",
          "successors": []
        }
      ]
    },
    {
      "name": "RedditPost",
      "type": "class",
      "start_line": 22,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "class RedditPost(BaseModel):\n    id: str\n    subreddit: str\n    title: str\n    body: str",
      "blocks": [
        {
          "id": 1,
          "label": "class RedditPost(BaseModel):\nid: str\nsubreddit: str\ntitle: str\nbody: str",
          "successors": []
        }
      ]
    },
    {
      "name": "RedditComment",
      "type": "class",
      "start_line": 29,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": "class RedditComment(BaseModel):\n    post_id: str\n    comment: str",
      "blocks": [
        {
          "id": 1,
          "label": "class RedditComment(BaseModel):\npost_id: str\ncomment: str",
          "successors": []
        }
      ]
    },
    {
      "name": "GetRedditPostsBlock",
      "type": "class",
      "start_line": 49,
      "end_line": 139,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 71,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"c6731acb-4285-4ee1-bc9b-03d0766c370f\",\n            description=\"This block fetches Reddit posts from a defined subreddit name.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=GetRedditPostsBlock.Input,\n            output_schema=GetRedditPostsBlock.Output,\n            test_input={\n                \"creds\": {\n                    \"client_id\": \"client_id\",\n                    \"client_secret\": \"client_secret\",\n                    \"username\": \"username\",\n                    \"password\": \"password\",\n                    \"user_agent\": \"user_agent\",\n                },\n                \"subreddit\": \"subreddit\",\n                \"last_post\": \"id3\",\n                \"post_limit\": 2,\n            },\n            test_output=[\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id1\", subreddit=\"subreddit\", title=\"title1\", body=\"body1\"\n                    ),\n                ),\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id2\", subreddit=\"subreddit\", title=\"title2\", body=\"body2\"\n                    ),\n                ),\n            ],\n            test_mock={\n                \"get_posts\": lambda _: [\n                    MockObject(id=\"id1\", title=\"title1\", selftext=\"body1\"),\n                    MockObject(id=\"id2\", title=\"title2\", selftext=\"body2\"),\n                    MockObject(id=\"id3\", title=\"title2\", selftext=\"body2\"),\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(disabled=True, id=\"c6731acb-4285-4ee1-bc9b-03d0766c370f\", description=\"This block fetches Reddit posts from a defined subreddit name.\", categories={BlockCategory.SOCIAL}, input_schema=GetRedditPostsBlock.Input, output_schema=GetRedditPostsBlock.Output, test_input={\"creds\": {\"client_id\": \"client_id\", \"client_secret\": \"client_secret\", \"username\": \"username\", \"password\": \"password\", \"user_agent\": \"user_agent\"}, \"subreddit\": \"subreddit\", \"last_post\": \"id3\", \"post_limit\": 2}, test_output=[ (\"post\", RedditPost(id=\"id1\", subreddit=\"subreddit\", title=\"title1\", body=\"body1\")), (\"post\", RedditPost(id=\"id2\", subreddit=\"subreddit\", title=\"title2\", body=\"body2\")) ], test_mock={ \"get_posts\": lambda _: [ MockObject(id=\"id1\", title=\"title1\", selftext=\"body1\"), MockObject(id=\"id2\", title=\"title2\", selftext=\"body2\"), MockObject(id=\"id3\", title=\"title2\", selftext=\"body2\") ] },)",
              "successors": []
            }
          ]
        },
        {
          "name": "get_posts",
          "type": "function",
          "start_line": 115,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_posts(input_data: Input) -> Iterator[praw.reddit.Submission]:\n        client = get_praw(input_data.creds)\n        subreddit = client.subreddit(input_data.subreddit)\n        return subreddit.new(limit=input_data.post_limit or 10)",
          "blocks": [
            {
              "id": 1,
              "label": "client = get_praw(input_data.creds)\nsubreddit = client.subreddit(input_data.subreddit)\nreturn subreddit.new(limit=input_data.post_limit or 10)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 120,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = datetime.now(tz=timezone.utc)\n        for post in self.get_posts(input_data):\n            if input_data.last_minutes:\n                post_datetime = datetime.fromtimestamp(\n                    post.created_utc, tz=timezone.utc\n                )\n                time_difference = current_time - post_datetime\n                if time_difference.total_seconds() / 60 > input_data.last_minutes:\n                    continue\n\n            if input_data.last_post and post.id == input_data.last_post:\n                break\n\n            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )",
          "blocks": [
            {
              "id": 1,
              "label": "current_time = datetime.now(tz=timezone.utc)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for post in self.get_posts(input_data):\nif input_data.last_minutes:\npost_datetime = datetime.fromtimestamp(post.created_utc, tz=timezone.utc)\ntime_difference = current_time - post_datetime\nif time_difference.total_seconds() / 60 > input_data.last_minutes:\ncontinue",
              "successors": [
                2
              ]
            },
            {
              "id": 8,
              "label": "if input_data.last_post and post.id == input_data.last_post:",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "break",
              "successors": []
            },
            {
              "id": 10,
              "label": "yield \"post\", RedditPost(id=post.id, subreddit=input_data.subreddit, title=post.title, body=post.selftext)",
              "successors": [
                2
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 50,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        subreddit: str = SchemaField(description=\"Subreddit name\")\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\",\n            default=RedditCredentials(),\n        )\n        last_minutes: int | None = SchemaField(\n            description=\"Post time to stop minutes ago while fetching posts\",\n            default=None,\n        )\n        last_post: str | None = SchemaField(\n            description=\"Post ID to stop when reached while fetching posts\",\n            default=None,\n        )\n        post_limit: int | None = SchemaField(\n            description=\"Number of posts to fetch\", default=10\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nsubreddit: str = SchemaField(description=\"Subreddit name\")\ncreds: RedditCredentials = SchemaField(description=\"Reddit credentials\", default=RedditCredentials())\nlast_minutes: int | None = SchemaField(description=\"Post time to stop minutes ago while fetching posts\", default=None)\nlast_post: str | None = SchemaField(description=\"Post ID to stop when reached while fetching posts\", default=None)\npost_limit: int | None = SchemaField(description=\"Number of posts to fetch\", default=10)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 68,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        post: RedditPost = SchemaField(description=\"Reddit post\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\npost: RedditPost = SchemaField(description=\"Reddit post\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GetRedditPostsBlock(Block):\n        )\n\n        post: RedditPost = SchemaField(description=\"Reddit post\")\n\n        )\n\n    @staticmethod\n        return subreddit.new(limit=input_data.post_limit or 10)\n\n            )",
      "blocks": [
        {
          "id": 1,
          "label": "class GetRedditPostsBlock(Block):\npost: RedditPost = SchemaField(description=\"Reddit post\")\n@staticmethod\ndef new_posts(subreddit, input_data):\nreturn subreddit.new(limit=input_data.post_limit or 10)",
          "successors": []
        }
      ]
    },
    {
      "name": "PostRedditCommentBlock",
      "type": "class",
      "start_line": 142,
      "end_line": 174,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 152,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"4a92261b-701e-4ffb-8970-675fd28e261f\",\n            description=\"This block posts a Reddit comment on a specified Reddit post.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=PostRedditCommentBlock.Input,\n            output_schema=PostRedditCommentBlock.Output,\n            test_input={\"data\": {\"post_id\": \"id\", \"comment\": \"comment\"}},\n            test_output=[(\"comment_id\", \"dummy_comment_id\")],\n            test_mock={\"reply_post\": lambda creds, comment: \"dummy_comment_id\"},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "reply_post",
          "type": "function",
          "start_line": 165,
          "end_line": 171,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reply_post(creds: RedditCredentials, comment: RedditComment) -> str:\n        client = get_praw(creds)\n        submission = client.submission(id=comment.post_id)\n        new_comment = submission.reply(comment.comment)\n        if not new_comment:\n            raise ValueError(\"Failed to post comment.\")\n        return new_comment.id",
          "blocks": [
            {
              "id": 1,
              "label": "client = get_praw(creds)\nsubmission = client.submission(id=comment.post_id)\nnew_comment = submission.reply(comment.comment)\nif not new_comment:\nraise ValueError(\"Failed to post comment.\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "return new_comment.id",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 173,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\nyield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\", default=RedditCredentials()\n        )\n        data: RedditComment = SchemaField(description=\"Reddit comment\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncreds: RedditCredentials = SchemaField(description=\"Reddit credentials\", default=RedditCredentials())\ndata: RedditComment = SchemaField(description=\"Reddit comment\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 149,
          "end_line": 150,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        comment_id: str = SchemaField(description=\"Posted comment ID\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ncomment_id: str = SchemaField(description=\"Posted comment ID\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class PostRedditCommentBlock(Block):\n        data: RedditComment = SchemaField(description=\"Reddit comment\")\n\n        comment_id: str = SchemaField(description=\"Posted comment ID\")\n\n        )\n\n    @staticmethod\n        return new_comment.id\n\n        yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
      "blocks": [
        {
          "id": 1,
          "label": "class PostRedditCommentBlock(Block):\ndata: RedditComment = SchemaField(description=\"Reddit comment\")\ncomment_id: str = SchemaField(description=\"Posted comment ID\")\n@staticmethod\nreturn new_comment.id\nyield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from datetime import datetime, timezone\nfrom typing import Iterator\n\nimport praw\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nfrom backend.util.mock import MockObject\n\n\n    model_config = ConfigDict(title=\"Reddit Credentials\")\n\n\n    body: str\n\n\n    comment: str\n\n\n    return client\n\n\n            )\n\n\n        yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime, timezone\nfrom typing import Iterator\n\nimport praw\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nfrom backend.util.mock import MockObject\nmodel_config = ConfigDict(title=\"Reddit Credentials\")\nbody: str\ncomment: str\nreturn client\nyield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
      "successors": []
    }
  ]
}