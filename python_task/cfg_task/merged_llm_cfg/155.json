{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 125,
  "functions": [],
  "classes": [
    {
      "name": "VehicleSize",
      "type": "class",
      "start_line": 5,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "class VehicleSize(Enum):\n\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2",
      "blocks": [
        {
          "id": 1,
          "label": "class VehicleSize(Enum):\nMOTORCYCLE = 0\nCOMPACT = 1\nLARGE = 2",
          "successors": []
        }
      ]
    },
    {
      "name": "Vehicle",
      "type": "class",
      "start_line": 12,
      "end_line": 30,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, vehicle_size, license_plate, spot_size):\nself.vehicle_size = vehicle_size\nself.license_plate = license_plate\nself.spot_size\nself.spots_taken = []",
              "successors": []
            }
          ]
        },
        {
          "name": "clear_spots",
          "type": "function",
          "start_line": 20,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []",
          "blocks": [
            {
              "id": 1,
              "label": "for spot in self.spots_taken:\nspot.remove_vehicle(self)",
              "successors": [
                1
              ]
            },
            {
              "id": 3,
              "label": "self.spots_taken = []",
              "successors": []
            }
          ]
        },
        {
          "name": "take_spot",
          "type": "function",
          "start_line": 25,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)",
          "blocks": [
            {
              "id": 1,
              "label": "def take_spot(self, spot):\nself.spots_taken.append(spot)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 29,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    def can_fit_in_spot(self, spot):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def can_fit_in_spot(self, spot):\npass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Vehicle(metaclass=ABCMeta):\n\n        self.spots_taken = []\n\n        self.spots_taken = []\n\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class Vehicle(metaclass=ABCMeta):\nself.spots_taken = []",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "self.spots_taken.append(spot)\n@abstractmethod\npass",
          "successors": []
        }
      ]
    },
    {
      "name": "Motorcycle",
      "type": "class",
      "start_line": 33,
      "end_line": 39,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, license_plate):\nsuper(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 38,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    def can_fit_in_spot(self, spot):\n        return True",
          "blocks": [
            {
              "id": 1,
              "label": "def can_fit_in_spot(self, spot):\nreturn True",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Motorcycle(Vehicle):\n\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n        return True",
      "blocks": [
        {
          "id": 1,
          "label": "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\nreturn True",
          "successors": []
        }
      ]
    },
    {
      "name": "Car",
      "type": "class",
      "start_line": 42,
      "end_line": 48,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, license_plate):\nsuper(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 47,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
          "blocks": [
            {
              "id": 1,
              "label": "def can_fit_in_spot(self, spot): return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Car(Vehicle):\n\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
      "blocks": [
        {
          "id": 1,
          "label": "super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\nreturn spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
          "successors": []
        }
      ]
    },
    {
      "name": "Bus",
      "type": "class",
      "start_line": 51,
      "end_line": 57,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 53,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, license_plate):\nsuper(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 56,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
          "blocks": [
            {
              "id": 1,
              "label": "def can_fit_in_spot(self, spot):\nreturn spot.size == VehicleSize.LARGE",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Bus(Vehicle):\n\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n        return spot.size == VehicleSize.LARGE",
      "blocks": [
        {
          "id": 1,
          "label": "super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\nreturn spot.size == VehicleSize.LARGE",
          "successors": []
        }
      ]
    },
    {
      "name": "ParkingLot",
      "type": "class",
      "start_line": 60,
      "end_line": 70,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 62,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, num_levels):\nself.num_levels = num_levels\nself.levels = []  # List of Levels",
              "successors": []
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 66,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
          "blocks": [
            {
              "id": 1,
              "label": "for level in self.levels:\nif level.park_vehicle(vehicle):\nreturn True",
              "successors": []
            },
            {
              "id": 4,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ParkingLot(object):\n\n        self.levels = []  # List of Levels\n\n        return False",
      "blocks": [
        {
          "id": 1,
          "label": "class ParkingLot(object):\nself.levels = []\nreturn False",
          "successors": []
        }
      ]
    },
    {
      "name": "Level",
      "type": "class",
      "start_line": 73,
      "end_line": 100,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 77,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, floor, total_spots):\nself.floor = floor\nself.num_spots = total_spots\nself.available_spots = 0\nself.spots = []",
              "successors": []
            }
          ]
        },
        {
          "name": "spot_freed",
          "type": "function",
          "start_line": 83,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def spot_freed(self):\n        self.available_spots += 1",
          "blocks": [
            {
              "id": 1,
              "label": "def spot_freed(self):\nself.available_spots += 1",
              "successors": []
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 86,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot",
          "blocks": [
            {
              "id": 1,
              "label": "spot = self._find_available_spot(vehicle)\nif spot is None:\nreturn None",
              "successors": []
            },
            {
              "id": 4,
              "label": "spot.park_vehicle(vehicle)\nreturn spot",
              "successors": []
            }
          ]
        },
        {
          "name": "_find_available_spot",
          "type": "function",
          "start_line": 94,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def _find_available_spot(self, vehicle):\npass",
              "successors": []
            }
          ]
        },
        {
          "name": "_park_starting_at_spot",
          "type": "function",
          "start_line": 98,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def _park_starting_at_spot(self, spot, vehicle):\n\"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\npass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Level(object):\n\n    SPOTS_PER_ROW = 10\n\n        self.spots = []  # List of ParkingSpots\n\n        self.available_spots += 1\n\n            return spot\n\n        pass\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class Level(object):\nSPOTS_PER_ROW = 10\nself.spots = []\nself.available_spots += 1\nreturn spot\npass\npass",
          "successors": []
        }
      ]
    },
    {
      "name": "ParkingSpot",
      "type": "class",
      "start_line": 103,
      "end_line": 125,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 105,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, level, row, spot_number, spot_size, vehicle_size):\nself.level = level\nself.row = row\nself.spot_number = spot_number\nself.spot_size = spot_size\nself.vehicle_size = vehicle_size\nself.vehicle = None",
              "successors": []
            }
          ]
        },
        {
          "name": "is_available",
          "type": "function",
          "start_line": 113,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    def is_available(self):\n        return True if self.vehicle is None else False",
          "blocks": [
            {
              "id": 1,
              "label": "def is_available(self):\nreturn True if self.vehicle is None else False",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_vehicle",
          "type": "function",
          "start_line": 116,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": "    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)",
          "blocks": [
            {
              "id": 1,
              "label": "if self.vehicle is not None:\nreturn False",
              "successors": []
            },
            {
              "id": 3,
              "label": "return vehicle.can_fit_in_spot(self)",
              "successors": []
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 121,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    def park_vehicle(self, vehicle):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def park_vehicle(self, vehicle):\npass",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_vehicle",
          "type": "function",
          "start_line": 124,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove_vehicle(self):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def remove_vehicle(self):\npass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ParkingSpot(object):\n\n        self.vehicle = None\n\n        return True if self.vehicle is None else False\n\n        return vehicle.can_fit_in_spot(self)\n\n        pass\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class ParkingSpot(object):\nself.vehicle = None",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return True if self.vehicle is None else False",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return vehicle.can_fit_in_spot(self)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "pass\npass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\n\n\n    LARGE = 2\n\n\n        pass\n\n\n        return True\n\n\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n\n\n        return spot.size == VehicleSize.LARGE\n\n\n        return False\n\n\n        pass\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nLARGE = 2\npass\nreturn True\nreturn spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\nreturn spot.size == VehicleSize.LARGE\nreturn False\npass\npass",
      "successors": []
    }
  ]
}