{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 38,
  "functions": [
    {
      "name": "test_service_creation",
      "type": "function",
      "start_line": 33,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_service_creation(server):\nwith ServiceTest():\nclient = get_service_client(ServiceTest)\nassert client.add(5, 3) == 8\nassert client.subtract(10, 4) == 6\nassert client.fun_with_async(5, 3) == 8",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ServiceTest",
      "type": "class",
      "start_line": 8,
      "end_line": 29,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 9,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_port",
          "type": "function",
          "start_line": 13,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT",
          "blocks": [
            {
              "id": 1,
              "label": "def get_port(cls) -> int:\nreturn TEST_SERVICE_PORT",
              "successors": []
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 17,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def add(self, a: int, b: int) -> int:\n        return a + b",
          "blocks": [
            {
              "id": 1,
              "label": "def add(self, a: int, b: int) -> int:\nreturn a + b",
              "successors": []
            }
          ]
        },
        {
          "name": "subtract",
          "type": "function",
          "start_line": 21,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    def subtract(self, a: int, b: int) -> int:\n        return a - b",
          "blocks": [
            {
              "id": 1,
              "label": "def subtract(self, a: int, b: int) -> int:\nreturn a - b",
              "successors": []
            }
          ]
        },
        {
          "name": "fun_with_async",
          "type": "function",
          "start_line": 25,
          "end_line": 29,
          "functions": [
            {
              "name": "add_async",
              "type": "function",
              "start_line": 26,
              "end_line": 27,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def add_async(a: int, b: int) -> int:\n            return a + b",
              "blocks": [
                {
                  "id": 1,
                  "label": "return a + b",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def fun_with_async(self, a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
          "blocks": [
            {
              "id": 1,
              "label": "def fun_with_async(self, a: int, b: int) -> int:\nreturn a + b\nreturn self.run_and_wait(add_async(a, b))",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ServiceTest(AppService):\n        super().__init__()\n\n    @classmethod\n        return TEST_SERVICE_PORT\n\n    @expose\n        return a + b\n\n    @expose\n        return a - b\n\n    @expose\n        return self.run_and_wait(add_async(a, b))",
      "blocks": [
        {
          "id": 1,
          "label": "class ServiceTest(AppService):\nsuper().__init__()\n@classmethod\nreturn TEST_SERVICE_PORT\n@expose\nreturn a + b\n@expose\nreturn a - b\n@expose\nreturn self.run_and_wait(add_async(a, b))",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import pytest\n\nfrom backend.util.service import AppService, expose, get_service_client\n\nTEST_SERVICE_PORT = 8765\n\n\n        return self.run_and_wait(add_async(a, b))\n\n\n@pytest.mark.asyncio(scope=\"session\")\n        assert client.fun_with_async(5, 3) == 8",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\nfrom backend.util.service import AppService, expose, get_service_client\nTEST_SERVICE_PORT = 8765\nreturn self.run_and_wait(add_async(a, b))\n@pytest.mark.asyncio(scope=\"session\")\nassert client.fun_with_async(5, 3) == 8",
      "successors": []
    }
  ]
}