{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 323,
  "functions": [],
  "classes": [
    {
      "name": "AudioTrack",
      "type": "class",
      "start_line": 33,
      "end_line": 81,
      "functions": [
        {
          "name": "audio_url",
          "type": "function",
          "start_line": 57,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    def audio_url(self):\n        audio_urls = {\n            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n        }\n        return audio_urls[self]",
          "blocks": [
            {
              "id": 1,
              "label": "audio_urls = {...}\nreturn audio_urls[self]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AudioTrack(str, Enum):\n    OBSERVER = (\"Observer\",)\n    FUTURISTIC_BEAT = (\"Futuristic Beat\",)\n    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)\n    HOTLINE = (\"Hotline\",)\n    BLADERUNNER_2049 = (\"Bladerunner 2049\",)\n    A_FUTURE = (\"A Future\",)\n    ELYSIAN_EMBERS = (\"Elysian Embers\",)\n    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)\n    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)\n    IZZAMUZZIC = (\"Izzamuzzic\",)\n    NAS = (\"Nas\",)\n    PARIS_ELSE = (\"Paris - Else\",)\n    SNOWFALL = (\"Snowfall\",)\n    BURLESQUE = (\"Burlesque\",)\n    CORNY_CANDY = (\"Corny Candy\",)\n    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)\n    REFRESHER = (\"Refresher\",)\n    TOURIST = (\"Tourist\",)\n    TWIN_TYCHES = (\"Twin Tyches\",)\n\n    @property\n        return audio_urls[self]",
      "blocks": [
        {
          "id": 1,
          "label": "class AudioTrack(str, Enum):\nOBSERVER = ('Observer',)\nFUTURISTIC_BEAT = ('Futuristic Beat',)\nSCIENCE_DOCUMENTARY = ('Science Documentary',)\nHOTLINE = ('Hotline',)\nBLADERUNNER_2049 = ('Bladerunner 2049',)\nA_FUTURE = ('A Future',)\nELYSIAN_EMBERS = ('Elysian Embers',)\nINSPIRING_CINEMATIC = ('Inspiring Cinematic',)\nBLADERUNNER_REMIX = ('Bladerunner Remix',)\nIZZAMUZZIC = ('Izzamuzzic',)\nNAS = ('Nas',)\nPARIS_ELSE = ('Paris - Else',)\nSNOWFALL = ('Snowfall',)\nBURLESQUE = ('Burlesque',)\nCORNY_CANDY = ('Corny Candy',)\nHIGHWAY_NOCTURNE = ('Highway Nocturne',)\nI_DONT_THINK_SO = ('I Don't Think So',)\nLOSING_YOUR_MARBLES = ('Losing Your Marbles',)\nREFRESHER = ('Refresher',)\nTOURIST = ('Tourist',)\nTWIN_TYCHES = ('Twin Tyches',)\n@property\ndef audio_url(self): return audio_urls[self]",
          "successors": []
        }
      ]
    },
    {
      "name": "GenerationPreset",
      "type": "class",
      "start_line": 84,
      "end_line": 107,
      "functions": [],
      "classes": [],
      "simplified_code": "class GenerationPreset(str, Enum):\n    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GenerationPreset(str, Enum):\nLEONARDO = ('Default',)\nANIME = ('Anime',)\nREALISM = ('Realist',)\nILLUSTRATION = ('Illustration',)\nSKETCH_COLOR = ('Sketch Color',)\nSKETCH_BW = ('Sketch B&W',)\nPIXAR = ('Pixar',)\nINK = ('Japanese Ink',)\nRENDER_3D = ('3D Render',)\nLEGO = ('Lego',)\nSCIFI = ('Sci-Fi',)\nRECRO_CARTOON = ('Retro Cartoon',) \nPIXEL_ART = ('Pixel Art',)\nCREATIVE = ('Creative',)\nPHOTOGRAPHY = ('Photography',)\nRAYTRACED = ('Raytraced',)\nENVIRONMENT = ('Environment',)\nFANTASY = ('Fantasy',)\nANIME_SR = ('Anime Realism',)\nMOVIE = ('Movie',)\nSTYLIZED_ILLUSTRATION = ('Stylized Illustration',)\nMANGA = ('Manga',)",
          "successors": []
        }
      ]
    },
    {
      "name": "Voice",
      "type": "class",
      "start_line": 109,
      "end_line": 130,
      "functions": [
        {
          "name": "voice_id",
          "type": "function",
          "start_line": 118,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    def voice_id(self):\n        voice_id_map = {\n            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n        }\n        return voice_id_map[self]",
          "blocks": [
            {
              "id": 1,
              "label": "voice_id_map = { Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\", Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\", Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\", Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\", Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\", Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\", }\nreturn voice_id_map[self]",
              "successors": []
            }
          ]
        },
        {
          "name": "__str__",
          "type": "function",
          "start_line": 129,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __str__(self):\n        return self.value",
          "blocks": [
            {
              "id": 1,
              "label": "def __str__(self):\nreturn self.value",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Voice(str, Enum):\n    LILY = \"Lily\"\n    DANIEL = \"Daniel\"\n    BRIAN = \"Brian\"\n    JESSICA = \"Jessica\"\n    CHARLOTTE = \"Charlotte\"\n    CALLUM = \"Callum\"\n\n    @property\n        return voice_id_map[self]\n\n        return self.value",
      "blocks": [
        {
          "id": 1,
          "label": "class Voice(str, Enum):\nLILY = 'Lily'\nDANIEL = 'Daniel'\nBRIAN = 'Brian'\nJESSICA = 'Jessica'\nCHARLOTTE = 'Charlotte'\nCALLUM = 'Callum'\n@property\ndef voice_id(self):\nreturn voice_id_map[self]\nreturn self.value",
          "successors": []
        }
      ]
    },
    {
      "name": "VisualMediaType",
      "type": "class",
      "start_line": 133,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = (\"stockVideo\",)\n    MOVING_AI_IMAGES = (\"movingImage\",)\n    AI_VIDEO = (\"aiVideo\",)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class VisualMediaType(str, Enum):\nSTOCK_VIDEOS = ('stockVideo',)\nMOVING_AI_IMAGES = ('movingImage',)\nAI_VIDEO = ('aiVideo',)",
          "successors": []
        }
      ]
    },
    {
      "name": "AIShortformVideoCreatorBlock",
      "type": "class",
      "start_line": 142,
      "end_line": 323,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 186,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n            description=\"Creates a shortform video using revid.ai\",\n            categories={BlockCategory.SOCIAL, BlockCategory.AI},\n            input_schema=AIShortformVideoCreatorBlock.Input,\n            output_schema=AIShortformVideoCreatorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script\": \"[close-up of a cat] Meow!\",\n                \"ratio\": \"9 / 16\",\n                \"resolution\": \"720p\",\n                \"frame_rate\": 60,\n                \"generation_preset\": GenerationPreset.LEONARDO,\n                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n                \"voice\": Voice.LILY,\n                \"video_style\": VisualMediaType.STOCK_VIDEOS,\n            },\n            test_output=(\n                \"video_url\",\n                \"https://example.com/video.mp4\",\n            ),\n            test_mock={\n                \"create_webhook\": lambda: (\n                    \"test_uuid\",\n                    \"https://webhook.site/test_uuid\",\n                ),\n                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\", description=\"Creates a shortform video using revid.ai\", categories={BlockCategory.SOCIAL, BlockCategory.AI}, input_schema=AIShortformVideoCreatorBlock.Input, output_schema=AIShortformVideoCreatorBlock.Output, test_input={ \"credentials\": TEST_CREDENTIALS_INPUT, \"script\": \"[close-up of a cat] Meow!\", \"ratio\": \"9 / 16\", \"resolution\": \"720p\", \"frame_rate\": 60, \"generation_preset\": GenerationPreset.LEONARDO, \"background_music\": AudioTrack.HIGHWAY_NOCTURNE, \"voice\": Voice.LILY, \"video_style\": VisualMediaType.STOCK_VIDEOS, }, test_output=( \"video_url\", \"https://example.com/video.mp4\", ), test_mock={ \"create_webhook\": lambda: ( \"test_uuid\", \"https://webhook.site/test_uuid\", ), \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"}, \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\", }, test_credentials=TEST_CREDENTIALS,)",
              "successors": []
            }
          ]
        },
        {
          "name": "create_webhook",
          "type": "function",
          "start_line": 219,
          "end_line": 224,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_webhook(self):\n        url = \"https://webhook.site/token\"\n        headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\n        response = requests.post(url, headers=headers)\n        webhook_data = response.json()\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
          "blocks": [
            {
              "id": 1,
              "label": "url = \"https://webhook.site/token\"\nheaders = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\nresponse = requests.post(url, headers=headers)\nwebhook_data = response.json()\nreturn webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
              "successors": []
            }
          ]
        },
        {
          "name": "create_video",
          "type": "function",
          "start_line": 226,
          "end_line": 233,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://www.revid.ai/api/public/v2/render\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n        logger.debug(\n            f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n        )\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "url = \"https://www.revid.ai/api/public/v2/render\"\nheaders = {\"key\": api_key.get_secret_value()}\nresponse = requests.post(url, json=payload, headers=headers)\nlogger.debug(f\"API Response Status Code: {response.status_code}, Content: {response.text}\")\nreturn response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "check_video_status",
          "type": "function",
          "start_line": 235,
          "end_line": 239,
          "functions": [],
          "classes": [],
          "simplified_code": "    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\nheaders = {\"key\": api_key.get_secret_value()}\nresponse = requests.get(url, headers=headers)\nreturn response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "wait_for_video",
          "type": "function",
          "start_line": 241,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wait_for_video(\n        self,\n        api_key: SecretStr,\n        pid: str,\n        webhook_token: str,\n        max_wait_time: int = 1000,\n    ) -> str:\n        start_time = time.time()\n        while time.time() - start_time < max_wait_time:\n            status = self.check_video_status(api_key, pid)\n            logger.debug(f\"Video status: {status}\")\n\n            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\n                return status[\"videoUrl\"]\n            elif status.get(\"status\") == \"error\":\n                error_message = status.get(\"error\", \"Unknown error occurred\")\n                logger.error(f\"Video creation failed: {error_message}\")\n                raise ValueError(f\"Video creation failed: {error_message}\")\n            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")\n\n            time.sleep(10)\n\n        logger.error(\"Video creation timed out\")\n        raise TimeoutError(\"Video creation timed out\")",
          "blocks": [
            {
              "id": 1,
              "label": "start_time = time.time()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "while time.time() - start_time < max_wait_time:\nstatus = self.check_video_status(api_key, pid)\nlogger.debug(f\"Video status: {status}\")\nif status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\nreturn status[\"videoUrl\"]",
              "successors": []
            },
            {
              "id": 6,
              "label": "elif status.get(\"status\") == \"error\":\nerror_message = status.get(\"error\", \"Unknown error occurred\")\nlogger.error(f\"Video creation failed: {error_message}\")\nraise ValueError(f\"Video creation failed: {error_message}\")",
              "successors": []
            },
            {
              "id": 8,
              "label": "time.sleep(10)",
              "successors": [
                2
              ]
            },
            {
              "id": 9,
              "label": "elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\nlogger.error(f\"Video creation failed: {status.get('message')}\")\nraise ValueError(f\"Video creation failed: {status.get('message')}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 268,
          "end_line": 323,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create a new Webhook.site URL\n        webhook_token, webhook_url = self.create_webhook()\n        logger.debug(f\"Webhook URL: {webhook_url}\")\n\n        audio_url = input_data.background_music.audio_url\n\n        payload = {\n            \"frameRate\": input_data.frame_rate,\n            \"resolution\": input_data.resolution,\n            \"frameDurationMultiplier\": 18,\n            \"webhook\": webhook_url,\n            \"creationParams\": {\n                \"mediaType\": input_data.video_style,\n                \"captionPresetName\": \"Wrap 1\",\n                \"selectedVoice\": input_data.voice.voice_id,\n                \"hasEnhancedGeneration\": True,\n                \"generationPreset\": input_data.generation_preset.name,\n                \"selectedAudio\": input_data.background_music,\n                \"origin\": \"/create\",\n                \"inputText\": input_data.script,\n                \"flowType\": \"text-to-video\",\n                \"slug\": \"create-tiktok-video\",\n                \"hasToGenerateVoice\": True,\n                \"hasToTranscript\": False,\n                \"hasToSearchMedia\": True,\n                \"hasAvatar\": False,\n                \"hasWebsiteRecorder\": False,\n                \"hasTextSmallAtBottom\": False,\n                \"ratio\": input_data.ratio,\n                \"sourceType\": \"contentScraping\",\n                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n                \"hasToGenerateVideos\": input_data.video_style\n                != VisualMediaType.STOCK_VIDEOS,\n                \"audioUrl\": audio_url,\n            },\n        }\n\n        logger.debug(\"Creating video...\")\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get(\"pid\")\n\n        if not pid:\n            logger.error(\n                f\"Failed to create video: No project ID returned. API Response: {response}\"\n            )\n            raise RuntimeError(\"Failed to create video: No project ID returned\")\n        else:\n            logger.debug(\n                f\"Video created with project ID: {pid}. Waiting for completion...\"\n            )\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f\"Video ready: {video_url}\")\n            yield \"video_url\", video_url",
          "blocks": [
            {
              "id": 1,
              "label": "webhook_token, webhook_url = self.create_webhook()\nlogger.debug(f\"Webhook URL: {webhook_url}\")\naudio_url = input_data.background_music.audio_url\n\npayload = {...}\nlogger.debug(\"Creating video...\")\nresponse = self.create_video(credentials.api_key, payload)\npid = response.get(\"pid\")\nif not pid:\nlogger.error(f\"Failed to create video: No project ID returned. API Response: {response}\")",
              "successors": [
                7
              ]
            },
            {
              "id": 5,
              "label": "else:\n    logger.debug(f\"Video created with project ID: {pid}. Waiting for completion...\")\n    video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n    logger.debug(f\"Video ready: {video_url}\")\n    yield \"video_url\", video_url",
              "successors": []
            },
            {
              "id": 7,
              "label": "raise RuntimeError(\"Failed to create video: No project ID returned\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REVID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The revid.ai integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        script: str = SchemaField(\n            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n            placeholder=\"[close-up of a cat] Meow!\",\n        )\n        ratio: str = SchemaField(\n            description=\"Aspect ratio of the video\", default=\"9 / 16\"\n        )\n        resolution: str = SchemaField(\n            description=\"Resolution of the video\", default=\"720p\"\n        )\n        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)\n        generation_preset: GenerationPreset = SchemaField(\n            description=\"Generation preset for visual style - only effects AI generated visuals\",\n            default=GenerationPreset.LEONARDO,\n            placeholder=GenerationPreset.LEONARDO,\n        )\n        background_music: AudioTrack = SchemaField(\n            description=\"Background music track\",\n            default=AudioTrack.HIGHWAY_NOCTURNE,\n            placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n        )\n        voice: Voice = SchemaField(\n            description=\"AI voice to use for narration\",\n            default=Voice.LILY,\n            placeholder=Voice.LILY,\n        )\n        video_style: VisualMediaType = SchemaField(\n            description=\"Type of visual media to use for the video\",\n            default=VisualMediaType.STOCK_VIDEOS,\n            placeholder=VisualMediaType.STOCK_VIDEOS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: CredentialsMetaInput[Literal[ProviderName.REVID], Literal[\\\nscript: str = SchemaField(...)\nratio: str = SchemaField(...)\nresolution: str = SchemaField(...)\nframe_rate: int = SchemaField(...)\ngeneration_preset: GenerationPreset = SchemaField(...)\nbackground_music: AudioTrack = SchemaField(...)\nvoice: Voice = SchemaField(...)\nvideo_style: VisualMediaType = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 182,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the created video\")\n        error: str = SchemaField(description=\"Error message if the request failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    video_url: str = SchemaField(description=\"The URL of the created video\")\n    error: str = SchemaField(description=\"Error message if the request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIShortformVideoCreatorBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the request failed\")\n\n        )\n\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"\n\n        return response.json()\n\n        return response.json()\n\n        raise TimeoutError(\"Video creation timed out\")\n\n            yield \"video_url\", video_url",
      "blocks": [
        {
          "id": 1,
          "label": "class AIShortformVideoCreatorBlock(Block):\nerror: str = SchemaField(description=\"Error message if the request failed\")\nreturn webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"\nreturn response.json()\nreturn response.json()\nraise TimeoutError(\"Video creation timed out\")\nyield \"video_url\", video_url",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n        return audio_urls[self]\n\n\n\n\n        return self.value\n\n\n\n\nlogger = logging.getLogger(__name__)\n\n\n            yield \"video_url\", video_url",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\\nimport time\\nfrom enum import Enum\\nfrom typing import Literal\\nfrom pydantic import SecretStr\\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\\nfrom backend.data.model import (\\n    APIKeyCredentials,\\n    CredentialsField,\\n    CredentialsMetaInput,\\n    SchemaField,\\n)\\nfrom backend.integrations.providers import ProviderName\\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(\\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\\n    provider=\"revid\",\\n    api_key=SecretStr(\"mock-revid-api-key\"),\\n    title=\"Mock Revid API key\",\\n    expires_at=None,\\n)\nTEST_CREDENTIALS_INPUT = {\\n    \"provider\": TEST_CREDENTIALS.provider,\\n    \"id\": TEST_CREDENTIALS.id,\\n    \"type\": TEST_CREDENTIALS.type,\\n    \"title\": TEST_CREDENTIALS.type,\\n}\nreturn audio_urls[self]",
      "successors": []
    }
  ]
}