{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 124,
  "functions": [],
  "classes": [
    {
      "name": "Operation",
      "type": "class",
      "start_line": 9,
      "end_line": 14,
      "functions": [],
      "simplified_code": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"",
      "blocks": [
        {
          "id": 1,
          "label": "class Operation(Enum):\nADD = \"Add\"\nSUBTRACT = \"Subtract\"\nMULTIPLY = \"Multiply\"\nDIVIDE = \"Divide\"\nPOWER = \"Power\"",
          "successors": []
        }
      ]
    },
    {
      "name": "CalculatorBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 37,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\", input_schema=CalculatorBlock.Input, output_schema=CalculatorBlock.Output, description=\"Performs a mathematical operation on two numbers.\", categories={BlockCategory.LOGIC}, test_input={\"operation\": Operation.ADD.value, \"a\": 10.0, \"b\": 5.0, \"round_result\": False}, test_output=[(\"result\", 15.0)])",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 55,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
          "blocks": [
            {
              "id": 1,
              "label": "operation = input_data.operation\na = input_data.a\nb = input_data.b\noperations = {\n    Operation.ADD: operator.add,\n    Operation.SUBTRACT: operator.sub,\n    Operation.MULTIPLY: operator.mul,\n    Operation.DIVIDE: operator.truediv,\n    Operation.POWER: operator.pow,\n}\nop_func = operations[operation]\ntry:\nif operation == Operation.DIVIDE and b == 0:\nraise ZeroDivisionError(\"Cannot divide by zero\")",
              "successors": [
                6
              ]
            },
            {
              "id": 5,
              "label": "result = op_func(a, b)\nif input_data.round_result:\n    result = round(result)\nyield \"result\", result",
              "successors": []
            },
            {
              "id": 6,
              "label": "except ZeroDivisionError:\nyield \"result\", float(\"inf\")",
              "successors": []
            },
            {
              "id": 7,
              "label": "except Exception:\nyield \"result\", float(\"nan\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\noperation: Operation = SchemaField(description=\"Choose the math operation you want to perform\", placeholder=\"Select an operation\")\na: float = SchemaField(description=\"Enter the first number (A)\", placeholder=\"For example: 10\")\nb: float = SchemaField(description=\"Enter the second number (B)\", placeholder=\"For example: 5\")\nround_result: bool = SchemaField(description=\"Do you want to round the result to a whole number?\", default=False)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 34,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresult: float = SchemaField(description=\"The result of your calculation\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class CalculatorBlock(Block):\n        )\n\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n        )\n\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
      "blocks": [
        {
          "id": 1,
          "label": "class CalculatorBlock(Block):\nresult: float = SchemaField(description=\"The result of your calculation\")\nyield \"result\", float(\"nan\")",
          "successors": []
        }
      ]
    },
    {
      "name": "CountItemsBlock",
      "type": "class",
      "start_line": 87,
      "end_line": 124,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\", input_schema=CountItemsBlock.Input, output_schema=CountItemsBlock.Output, description=\"Counts the number of items in a collection.\", categories={BlockCategory.LOGIC}, test_input={\"collection\": [1, 2, 3, 4, 5]}, test_output=[(\"count\", 5)])",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 110,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nif isinstance(collection, (str, list, tuple, set, dict)):\ncount = len(collection)",
              "successors": [
                7
              ]
            },
            {
              "id": 4,
              "label": "elif hasattr(collection, \"__iter__\"):\ncount = sum(1 for _ in collection)",
              "successors": [
                7
              ]
            },
            {
              "id": 6,
              "label": "else:",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "raise ValueError(\"Input is not a countable collection\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "yield \"count\", count",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 88,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncollection: Any = SchemaField(description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\", placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 94,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ncount: int = SchemaField(description=\"The number of items in the collection\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class CountItemsBlock(Block):\n        )\n\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n        )\n\n            yield \"count\", -1  # Return -1 to indicate an error",
      "blocks": [
        {
          "id": 1,
          "label": "class CountItemsBlock(Block):\ncount: int = SchemaField(description=\"The number of items in the collection\")\nyield \"count\", -1",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n    POWER = \"Power\"\n\n\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n\n\n            yield \"count\", -1  # Return -1 to indicate an error",
  "blocks": [
    {
      "id": 1,
      "label": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nPOWER = \"Power\"\nyield \"result\", float(\"nan\")\nyield \"count\", -1",
      "successors": []
    }
  ]
}