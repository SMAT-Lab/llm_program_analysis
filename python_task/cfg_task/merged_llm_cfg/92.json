{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [
    {
      "name": "binary_xor",
      "type": "function",
      "start_line": 4,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "def binary_xor(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary xor operation on the integers provided.\n\n    >>> binary_xor(25, 32)\n    '0b111001'\n    >>> binary_xor(37, 50)\n    '0b010111'\n    >>> binary_xor(21, 30)\n    '0b01011'\n    >>> binary_xor(58, 73)\n    '0b1110011'\n    >>> binary_xor(0, 255)\n    '0b11111111'\n    >>> binary_xor(256, 256)\n    '0b000000000'\n    >>> binary_xor(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_xor(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_xor(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n\n    a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\n    b_binary = str(bin(b))[2:]  # remove the leading \"0b\"\n\n    max_len = max(len(a_binary), len(b_binary))\n\n    return \"0b\" + \"\".join(\n        str(int(char_a != char_b))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "if a < 0 or b < 0:\nraise ValueError(\"the value of both inputs must be positive\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "a_binary = str(bin(a))[2:] ; b_binary = str(bin(b))[2:] ; max_len = max(len(a_binary), len(b_binary)) ; return \"0b\" + \"\".join( str(int(char_a != char_b)) for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len)) )",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n\n\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":\nimport doctest\ndoctest.testmod()",
      "successors": []
    }
  ]
}