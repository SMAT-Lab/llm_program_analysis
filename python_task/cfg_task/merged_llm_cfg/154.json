{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 172,
  "functions": [],
  "classes": [
    {
      "name": "FakeResponse",
      "type": "class",
      "start_line": 12,
      "end_line": 16,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 13,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, code: int, headers: dict, text: str) -> None:\nself.status_code = code\nself.headers = headers\nself.text = text",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class FakeResponse():\n        self.text = text",
      "blocks": [
        {
          "id": 1,
          "label": "class FakeResponse():",
          "successors": []
        }
      ]
    },
    {
      "name": "TestValidateLinks",
      "type": "class",
      "start_line": 19,
      "end_line": 172,
      "functions": [
        {
          "name": "setUp",
          "type": "function",
          "start_line": 21,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'",
          "blocks": [
            {
              "id": 1,
              "label": "def setUp(self):\nself.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\nself.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\nself.code_200 = 200\nself.code_403 = 403\nself.code_503 = 503\nself.cloudflare_headers = {'Server': 'cloudflare'}\nself.no_cloudflare_headers = {'Server': 'google'}\nself.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\nself.text_without_cloudflare_flags = 'Lorem Ipsum'",
              "successors": []
            }
          ]
        },
        {
          "name": "test_find_link_in_text",
          "type": "function",
          "start_line": 44,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n",
          "blocks": [
            {
              "id": 1,
              "label": "text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\nlinks = find_links_in_text(text)\nself.assertIsInstance(links, list)\nself.assertEqual(len(links), 7)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "for link in links:\nwith self.subTest():\nself.assertIsInstance(link, str)",
              "successors": [
                5
              ]
            },
            {
              "id": 8,
              "label": "",
              "successors": []
            }
          ]
        },
        {
          "name": "test_find_link_in_text_with_invalid_argument",
          "type": "function",
          "start_line": 74,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
          "blocks": [
            {
              "id": 1,
              "label": "with self.assertRaises(TypeError):\nfind_links_in_text(); find_links_in_text(1); find_links_in_text(True)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_if_check_duplicate_links_has_the_correct_return",
          "type": "function",
          "start_line": 80,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)",
          "blocks": [
            {
              "id": 1,
              "label": "result_1 = check_duplicate_links(self.duplicate_links)\nresult_2 = check_duplicate_links(self.no_duplicate_links)\nself.assertIsInstance(result_1, tuple)\nself.assertIsInstance(result_2, tuple)\nhas_duplicate_links, links = result_1\nno_duplicate_links, no_links = result_2\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\nself.assertIsInstance(links, list)\nself.assertIsInstance(no_links, list)\nself.assertEqual(len(links), 2)\nself.assertEqual(len(no_links), 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_if_fake_user_agent_has_a_str_as_return",
          "type": "function",
          "start_line": 99,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)",
          "blocks": [
            {
              "id": 1,
              "label": "def test_if_fake_user_agent_has_a_str_as_return(self):\nuser_agent = fake_user_agent()\nself.assertIsInstance(user_agent, str)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_host_from_link",
          "type": "function",
          "start_line": 103,
          "end_line": 126,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()",
          "blocks": [
            {
              "id": 1,
              "label": "links = [ ... ]",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for link in links:\nhost = get_host_from_link(link)\nwith self.subTest():\nself.assertIsInstance(host, str)\nself.assertNotIn('://', host)\nself.assertNotIn('/', host)\nself.assertNotIn('?', host)\nself.assertNotIn('#', host)",
              "successors": [
                2
              ]
            },
            {
              "id": 6,
              "label": "with self.assertRaises(TypeError):\nget_host_from_link()",
              "successors": []
            }
          ]
        },
        {
          "name": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
          "type": "function",
          "start_line": 128,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)",
          "blocks": [
            {
              "id": 1,
              "label": "resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresult1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\nself.assertTrue(result1)\nself.assertTrue(result2)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_has_cloudflare_protection_when_there_is_no_protection",
          "type": "function",
          "start_line": 147,
          "end_line": 172,
          "functions": [],
          "classes": [],
          "simplified_code": "    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
          "blocks": [
            {
              "id": 1,
              "label": "resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresult1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class TestValidateLinks(unittest.TestCase):\n\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n\n            find_links_in_text(True)\n\n        self.assertEqual(len(no_links), 0)\n\n        self.assertIsInstance(user_agent, str)\n\n            get_host_from_link()\n\n        self.assertTrue(result2)\n\n        self.assertFalse(result3)",
      "blocks": [
        {
          "id": 1,
          "label": "class TestValidateLinks(unittest.TestCase):\nself.text_without_cloudflare_flags = 'Lorem Ipsum'\nfind_links_in_text(True)\nself.assertEqual(len(no_links), 0)\nself.assertIsInstance(user_agent, str)\nget_host_from_link()\nself.assertTrue(result2)\nself.assertFalse(result3)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\n\n\n        self.text = text\n\n\n        self.assertFalse(result3)",
  "blocks": [
    {
      "id": 1,
      "label": "# -*- coding: utf-8 -*-\nimport unittest\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\nself.text = text\nself.assertFalse(result3)",
      "successors": []
    }
  ]
}