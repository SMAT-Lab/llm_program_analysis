{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 91,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 10,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": "def backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count",
      "blocks": [
        {
          "id": 1,
          "label": "def backtrack(needed_sum: int, power: int, current_number: int, current_sum: int, solutions_count: int) -> tuple[int, int]:",
          "successors": [
            {
              "id": 2,
              "label": "if current_sum == needed_sum:\n    solutions_count += 1\n    return current_sum, solutions_count",
              "successors": []
            },
            {
              "id": 4,
              "label": "i_to_n = current_number**power",
              "successors": [
                {
                  "id": 5,
                  "label": "if current_sum + i_to_n <= needed_sum:\n    current_sum += i_to_n\n    current_sum, solutions_count = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)\n    current_sum -= i_to_n",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "if i_to_n < needed_sum:\n    current_sum, solutions_count = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "label": "return current_sum, solutions_count",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "solve",
      "type": "function",
      "start_line": 54,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "simplified_code": "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
      "blocks": [
        {
          "id": 1,
          "label": "def solve(needed_sum: int, power: int) -> int:",
          "successors": [
            {
              "id": 2,
              "label": "if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\nraise ValueError(\n    \"Invalid input\\n\"\n    \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n)",
              "successors": []
            },
            {
              "id": 4,
              "label": "return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"\n\n\n    return current_sum, solutions_count\n\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "blocks": [
    {
      "id": 1,
      "label": "# Example input code\n\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "label": "return current_sum, solutions_count",
          "successors": []
        },
        {
          "id": 3,
          "label": "return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
          "successors": []
        },
        {
          "id": 4,
          "label": "if __name__ == \"__main__\":\nimport doctest",
          "successors": [
            {
              "id": 6,
              "label": "doctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}