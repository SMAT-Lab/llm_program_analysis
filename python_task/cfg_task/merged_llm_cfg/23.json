{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 79,
  "functions": [
    {
      "name": "test_validate_url",
      "type": "function",
      "start_line": 6,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_validate_url():\n    # Rejected IP ranges\n    with pytest.raises(ValueError):\n        validate_url(\"localhost\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"192.168.1.1\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"127.0.0.1\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"0.0.0.0\", [])\n\n    # Normal URLs\n    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\"\n    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\"\n\n    # Scheme Enforcement\n    with pytest.raises(ValueError):\n        validate_url(\"ftp://example.com\", [])\n    with pytest.raises(ValueError):\n        validate_url(\"file://example.com\", [])\n\n    # International domain that converts to punycode - should be allowed if public\n    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\"\n    # If the domain fails IDNA encoding or is invalid, it should raise an error\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa\u25ccmple.com\", [])\n\n    # IPv6 Addresses\n    with pytest.raises(ValueError):\n        validate_url(\"::1\", [])  # IPv6 loopback should be blocked\n    with pytest.raises(ValueError):\n        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form\n\n    # Suspicious Characters in Hostname\n    with pytest.raises(ValueError):\n        validate_url(\"http://example_underscore.com\", [])\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa mple.com\", [])  # Space in hostname\n\n    # Malformed URLs\n    with pytest.raises(ValueError):\n        validate_url(\"http://\", [])  # No hostname\n    with pytest.raises(ValueError):\n        validate_url(\"://missing-scheme\", [])  # Missing proper scheme\n\n    # Trusted Origins\n    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]\n    assert (\n        validate_url(\"internal-api.company.com\", trusted)\n        == \"http://internal-api.company.com\"\n    )\n    assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\"\n\n    # Special Characters in Path or Query\n    assert (\n        validate_url(\"example.com/path%20with%20spaces\", [])\n        == \"http://example.com/path%20with%20spaces\"\n    )\n\n    # Backslashes should be replaced with forward slashes\n    assert (\n        validate_url(\"http://example.com\\\\backslash\", [])\n        == \"http://example.com/backslash\"\n    )\n\n    # Check defaulting scheme behavior for valid domains\n    assert validate_url(\"example.com\", []) == \"http://example.com\"\n    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\"\n\n    # Non-ASCII Characters in Query/Fragment\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
      "blocks": [
        {
          "id": 1,
          "label": "def test_validate_url():\nwith pytest.raises(ValueError): validate_url('localhost', [])\nwith pytest.raises(ValueError): validate_url('192.168.1.1', [])\nwith pytest.raises(ValueError): validate_url('127.0.0.1', [])\nwith pytest.raises(ValueError): validate_url('0.0.0.0', [])\nassert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'\nassert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'\nwith pytest.raises(ValueError): validate_url('ftp://example.com', [])\nwith pytest.raises(ValueError): validate_url('file://example.com', [])\nassert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'\nwith pytest.raises(ValueError): validate_url('http://exa\u25ccmple.com', [])\nwith pytest.raises(ValueError): validate_url('::1', [])\nwith pytest.raises(ValueError): validate_url('http://[::1]', [])\nwith pytest.raises(ValueError): validate_url('http://example_underscore.com', [])\nwith pytest.raises(ValueError): validate_url('http://exa mple.com', [])\nwith pytest.raises(ValueError): validate_url('http://', [])\nwith pytest.raises(ValueError): validate_url('://missing-scheme', [])\ntrusted = ['internal-api.company.com', '10.0.0.5']\nassert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'\nassert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'\nassert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'\nassert validate_url('http://example.com\\backslash', []) == 'http://example.com/backslash'\nassert validate_url('example.com', []) == 'http://example.com'\nassert validate_url('https://secure.com', []) == 'https://secure.com'\nassert validate_url('example.com?param=\u00e4\u00f6\u00fc', []) == 'http://example.com?param=\u00e4\u00f6\u00fc'",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\n\nfrom backend.util.request import validate_url\n\n\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\n\nfrom backend.util.request import validate_url\nassert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
      "successors": []
    }
  ]
}