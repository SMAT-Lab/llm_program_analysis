{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "JinaEmbeddingBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 23,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\",\n            description=\"Generates embeddings using Jina AI\",\n            categories={BlockCategory.AI},\n            input_schema=JinaEmbeddingBlock.Input,\n            output_schema=JinaEmbeddingBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\", description=\"Generates embeddings using Jina AI\", categories={BlockCategory.AI}, input_schema=JinaEmbeddingBlock.Input, output_schema=JinaEmbeddingBlock.Output, )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 32,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.jina.ai/v1/embeddings\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n        data = {\"input\": input_data.texts, \"model\": input_data.model}\n        response = requests.post(url, headers=headers, json=data)\n        embeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]\n        yield \"embeddings\", embeddings",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\nurl = \"https://api.jina.ai/v1/embeddings\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n}\ndata = {\"input\": input_data.texts, \"model\": input_data.model}\nresponse = requests.post(url, headers=headers, json=data)\nembeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]\nyield \"embeddings\", embeddings",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 12,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to embed\")\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        model: str = SchemaField(\n            description=\"Jina embedding model to use\",\n            default=\"jina-embeddings-v2-base-en\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "texts: list = SchemaField(description=\"List of texts to embed\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "credentials: JinaCredentialsInput = JinaCredentialsField()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "model: str = SchemaField(\n description=\"Jina embedding model to use\",\n default=\"jina-embeddings-v2-base-en\",\n )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 20,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        embeddings: list = SchemaField(description=\"List of embeddings\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    embeddings: list = SchemaField(description=\"List of embeddings\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class JinaEmbeddingBlock(Block):\n        )\n\n        embeddings: list = SchemaField(description=\"List of embeddings\")\n\n        )\n\n        yield \"embeddings\", embeddings",
      "blocks": [
        {
          "id": 1,
          "label": "class JinaEmbeddingBlock(Block):\nembeddings: list = SchemaField(description=\"List of embeddings\")",
          "successors": [
            {
              "id": 3,
              "label": "yield \"embeddings\", embeddings",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n        yield \"embeddings\", embeddings",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.blocks.jina._auth import ( JinaCredentials, JinaCredentialsField, JinaCredentialsInput, )\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        {
          "id": 3,
          "label": "from backend.data.model import SchemaField\nfrom backend.util.request import requests",
          "successors": [
            {
              "id": 5,
              "label": "yield \"embeddings\", embeddings",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}