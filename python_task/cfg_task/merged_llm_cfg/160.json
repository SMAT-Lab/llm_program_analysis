{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 161,
  "functions": [],
  "classes": [
    {
      "name": "InstallationLocation",
      "type": "class",
      "start_line": 10,
      "end_line": 12,
      "functions": [],
      "simplified_code": "class InstallationLocation(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"",
      "blocks": [
        {
          "id": 1,
          "label": "class InstallationLocation(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    LOCAL = \"local\"",
              "successors": []
            },
            {
              "id": 3,
              "label": "    CLOUD = \"cloud\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AgentInstalledFromMarketplaceEventData",
      "type": "class",
      "start_line": 15,
      "end_line": 18,
      "functions": [],
      "simplified_code": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromTemplateEventData",
      "type": "class",
      "start_line": 21,
      "end_line": 24,
      "functions": [],
      "simplified_code": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromMarketplaceEvent",
      "type": "class",
      "start_line": 27,
      "end_line": 29,
      "functions": [],
      "simplified_code": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_marketplace\"]\n    event_data: AgentInstalledFromMarketplaceEventData",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):",
          "successors": [
            {
              "id": 2,
              "label": " event_name: Literal[\"agent_installed_from_marketplace\"]",
              "successors": []
            },
            {
              "id": 3,
              "label": " event_data: AgentInstalledFromMarketplaceEventData",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AgentInstalledFromTemplateEvent",
      "type": "class",
      "start_line": 32,
      "end_line": 34,
      "functions": [],
      "simplified_code": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_template\"]\n    event_data: AgentInstalledFromTemplateEventData",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_template\"]",
          "successors": [
            {
              "id": 3,
              "label": "    event_data: AgentInstalledFromTemplateEventData",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AnalyticsRequest",
      "type": "class",
      "start_line": 42,
      "end_line": 43,
      "functions": [],
      "simplified_code": "class AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent",
      "blocks": [
        {
          "id": 1,
          "label": "class AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent",
          "successors": []
        }
      ]
    },
    {
      "name": "AddAgentRequest",
      "type": "class",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "simplified_code": "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]",
      "blocks": [
        {
          "id": 1,
          "label": "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]",
          "successors": []
        }
      ]
    },
    {
      "name": "SubmissionReviewRequest",
      "type": "class",
      "start_line": 53,
      "end_line": 57,
      "functions": [],
      "simplified_code": "class SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None",
      "blocks": [
        {
          "id": 1,
          "label": "class SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentResponse",
      "type": "class",
      "start_line": 60,
      "end_line": 87,
      "functions": [],
      "simplified_code": "class AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"\n\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentResponse(pydantic.BaseModel):\n\"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AgentDetailResponse",
      "type": "class",
      "start_line": 90,
      "end_line": 116,
      "functions": [],
      "simplified_code": "class AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentDetailResponse(pydantic.BaseModel):\n\"\"\"\n Represents the response data for an agent detail.\n\n Attributes:\n id (str): The ID of the agent.\n name (Optional[str]): The name of the agent.\n description (Optional[str]): The description of the agent.\n author (Optional[str]): The author of the agent.\n keywords (List[str]): The keywords associated with the agent.\n categories (List[str]): The categories the agent belongs to.\n version (int): The version of the agent.\n createdAt (str): The creation date of the agent.\n updatedAt (str): The last update date of the agent.\n graph (Dict[str, Any]): The graph data of the agent.\n \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "id: str\nname: typing.Optional[str]",
              "successors": [
                {
                  "id": 5,
                  "label": "description: typing.Optional[str]\nauthor: typing.Optional[str]",
                  "successors": [
                    {
                      "id": 7,
                      "label": "keywords: list[str]\ncategories: list[str]",
                      "successors": [
                        {
                          "id": 9,
                          "label": "version: int\ncreatedAt: datetime.datetime",
                          "successors": [
                            {
                              "id": 11,
                              "label": "updatedAt: datetime.datetime\ngraph: dict[str, typing.Any]",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "class",
      "start_line": 119,
      "end_line": 128,
      "functions": [],
      "simplified_code": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool",
      "blocks": [
        {
          "id": 1,
          "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n\"\"\"\nRepresents the response data for an agent detail.\n\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "agentId: str\nfeaturedCategories: list[str]\ncreatedAt: datetime.datetime\nupdatedAt: datetime.datetime\nisActive: bool",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "CategoriesResponse",
      "type": "class",
      "start_line": 131,
      "end_line": 139,
      "functions": [],
      "simplified_code": "class CategoriesResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for a list of categories.\n\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"\n\n    unique_categories: list[str]",
      "blocks": [
        {
          "id": 1,
          "label": "class CategoriesResponse(pydantic.BaseModel):\n \"\"\"\n Represents the response data for a list of categories.\n\n Attributes:\n unique_categories (list[str]): The list of unique categories.\n \"\"\"\n\n unique_categories: list[str]",
          "successors": []
        }
      ]
    },
    {
      "name": "ListResponse",
      "type": "class",
      "start_line": 145,
      "end_line": 161,
      "functions": [],
      "simplified_code": "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
      "blocks": [
        {
          "id": 1,
          "label": "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    items: list[T]\n    total_count: int",
              "successors": [
                {
                  "id": 5,
                  "label": "    page: int\n    page_size: int",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    total_pages: int",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import datetime\nimport typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union\n\nimport prisma.enums\nimport pydantic\n\n\n    CLOUD = \"cloud\"\n\n\n    installation_location: InstallationLocation\n\n\n    installation_location: InstallationLocation\n\n\n    event_data: AgentInstalledFromMarketplaceEventData\n\n\n    event_data: AgentInstalledFromTemplateEventData\n\n\nAnalyticsEvent = Union[\n    AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent\n]\n\n\n    event: AnalyticsEvent\n\n\n    categories: list[str]\n\n\n    comments: str | None\n\n\n    downloads: int = 0\n\n\n    graph: dict[str, typing.Any]\n\n\n    isActive: bool\n\n\n    unique_categories: list[str]\n\n\nT = TypeVar(\"T\")\n\n\n    total_pages: int",
  "blocks": [
    {
      "id": 1,
      "label": "import datetime\nimport typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union\n\nimport prisma.enums\nimport pydantic",
      "successors": []
    }
  ]
}