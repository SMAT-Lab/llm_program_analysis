{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 128,
  "functions": [],
  "classes": [
    {
      "name": "ExaFindSimilarBlock",
      "type": "class",
      "start_line": 16,
      "end_line": 128,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 71,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\", description=\"Finds similar links using Exa's findSimilar API\", categories={BlockCategory.SEARCH}, input_schema=ExaFindSimilarBlock.Input, output_schema=ExaFindSimilarBlock.Output)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 80,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n\n        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n\n        # Add dates if they exist\n        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\nurl = \"https://api.exa.ai/findSimilar\"\nheaders = {\n\"Content-Type\": \"application/json\",\n\"x-api-key\": credentials.api_key.get_secret_value(),\n}\npayload = {\n\"url\": input_data.url,\n\"numResults\": input_data.number_of_results,\n\"contents\": input_data.contents.dict(),\n}\noptional_field_mapping = {\n\"include_domains\": \"includeDomains\",\n\"exclude_domains\": \"excludeDomains\",\n\"include_text\": \"includeText\",\n\"exclude_text\": \"excludeText\",\n}\nfor input_field, api_field in optional_field_mapping.items():\nvalue = getattr(input_data, input_field)\nif value:\npayload[api_field] = value",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "date_field_mapping = {\n\"start_crawl_date\": \"startCrawlDate\",\n\"end_crawl_date\": \"endCrawlDate\",\n\"start_published_date\": \"startPublishedDate\",\n\"end_published_date\": \"endPublishedDate\",\n}\nfor input_field, api_field in date_field_mapping.items():\nvalue = getattr(input_data, input_field, None)\nif value:\npayload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "try:\nresponse = requests.post(url, headers=headers, json=payload)\nresponse.raise_for_status()\ndata = response.json()\nyield \"results\", data.get(\"results\", [])",
              "successors": []
            },
            {
              "id": 15,
              "label": "yield \"error\", str(e)\nyield \"results\", []",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 17,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: ExaCredentialsInput = ExaCredentialsField()\nurl: str = SchemaField(description=\"The url for which you would like to find similar links\")\nnumber_of_results: int = SchemaField(description=\"Number of results to return\", default=10, advanced=True)\ninclude_domains: List[str] = SchemaField(description=\"Domains to include in search\", default=[], advanced=True)\nexclude_domains: List[str] = SchemaField(description=\"Domains to exclude from search\", default=[], advanced=True)\nstart_crawl_date: datetime = SchemaField(description=\"Start date for crawled content\")\nend_crawl_date: datetime = SchemaField(description=\"End date for crawled content\")\nstart_published_date: datetime = SchemaField(description=\"Start date for published content\")\nend_published_date: datetime = SchemaField(description=\"End date for published content\")\ninclude_text: List[str] = SchemaField(description=\"Text patterns to include (max 1 string, up to 5 words)\", default=[], advanced=True)\nexclude_text: List[str] = SchemaField(description=\"Text patterns to exclude (max 1 string, up to 5 words)\", default=[], advanced=True)\ncontents: ContentSettings = SchemaField(description=\"Content retrieval settings\", default=ContentSettings(), advanced=True)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 65,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresults: List[Any] = SchemaField(description=\"List of similar documents with title, URL, published date, author, and score\", default=[])",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ExaFindSimilarBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"results\", []",
      "blocks": [
        {
          "id": 1,
          "label": "class ExaFindSimilarBlock(Block):\ndef execute(self):\nyield results, []",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from datetime import datetime\nfrom typing import Any, List\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\nfrom .helpers import ContentSettings\n\n\n            yield \"results\", []",
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime\nfrom typing import Any, List\nfrom backend.blocks.exa._auth import (ExaCredentials, ExaCredentialsField, ExaCredentialsInput,)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nfrom .helpers import ContentSettings\nyield \"results\", []",
      "successors": []
    }
  ]
}