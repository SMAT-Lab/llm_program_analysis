{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 175,
  "functions": [
    {
      "name": "_get_provider_oauth_handler",
      "type": "function",
      "start_line": 156,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": "def _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise KeyError(f\"Unknown provider '{provider_name}'\")\n\n    client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if not (client_id and client_secret):\n        raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":",
          "successors": [
            {
              "id": 2,
              "label": "if provider_name not in HANDLERS_BY_NAME:\nraise KeyError(f\"Unknown provider '{provider_name}'\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\nclient_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")",
              "successors": [
                {
                  "id": 5,
                  "label": "if not (client_id and client_secret):\nraise MissingConfigError(f\"Integration with provider '{provider_name}' is not configured\",)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "handler_class = HANDLERS_BY_NAME[provider_name]\nfrontend_base_url = (settings.config.frontend_base_url or settings.config.platform_base_url)\nreturn handler_class(client_id=client_id, client_secret=client_secret, redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "IntegrationCredentialsManager",
      "type": "class",
      "start_line": 23,
      "end_line": 154,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nredis_conn = redis.get_redis()",
              "successors": [
                {
                  "id": 3,
                  "label": "self._locks = RedisKeyedMutex(redis_conn)\nself.store = IntegrationCredentialsStore()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "create",
          "type": "function",
          "start_line": 60,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)",
          "blocks": [
            {
              "id": 1,
              "label": "def create(self, user_id: str, credentials: Credentials) -> None:\n    return self.store.add_creds(user_id, credentials)",
              "successors": []
            }
          ]
        },
        {
          "name": "exists",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    def exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None",
          "blocks": [
            {
              "id": 1,
              "label": "def exists(self, user_id: str, credentials_id: str) -> bool:\n    return self.store.get_creds_by_id(user_id, credentials_id) is not None",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 66,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials",
          "blocks": [
            {
              "id": 1,
              "label": "def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\ncredentials = self.store.get_creds_by_id(user_id, credentials_id)",
              "successors": [
                {
                  "id": 3,
                  "label": "if not credentials:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return None",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "# Refresh OAuth credentials if needed\nif credentials.type == \"oauth2\" and credentials.access_token_expires_at:\nlogger.debug(\n    f\"Credentials #{credentials.id} expire at \"\n    f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n    f\"current time is {datetime.now()}\"\n)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "with self._locked(user_id, credentials_id, \"refresh\"):\noauth_handler = _get_provider_oauth_handler(credentials.provider)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if oauth_handler.needs_refresh(credentials):\nlogger.debug(\n    f\"Refreshing '{credentials.provider}' \"\n    f\"credentials #{credentials.id}\"\n)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "_lock = None\nif lock:",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "# Wait until the credentials are no longer in use anywhere\n_lock = self._acquire_lock(user_id, credentials_id)\nfresh_credentials = oauth_handler.refresh_tokens(credentials)\nself.store.update_creds(user_id, fresh_credentials)\nif _lock and _lock.locked():\n    _lock.release()\n\ncredentials = fresh_credentials",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "return credentials",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "else:\n    logger.debug(f\"Credentials #{credentials.id} never expire\")\nreturn credentials",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "acquire",
          "type": "function",
          "start_line": 104,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "    def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        ⚠️ WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock",
          "blocks": [
            {
              "id": 1,
              "label": "def acquire(\n    self, user_id: str, credentials_id: str\n) -> tuple[Credentials, RedisLock]:",
              "successors": [
                {
                  "id": 2,
                  "label": "with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n    lock = self._acquire_lock(user_id, credentials_id)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "credentials = self.get(user_id, credentials_id, lock=False)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if not credentials:\n    raise ValueError(f\"Credentials #{credentials_id} for user #{user_id} not found\")",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "return credentials, lock",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 123,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "    def update(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)",
          "blocks": [
            {
              "id": 1,
              "label": "def update(self, user_id: str, updated: Credentials) -> None:\nwith self._locked(user_id, updated.id):",
              "successors": [
                {
                  "id": 3,
                  "label": "self.store.update_creds(user_id, updated)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "delete",
          "type": "function",
          "start_line": 127,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "    def delete(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)",
          "blocks": [
            {
              "id": 1,
              "label": "def delete(self, user_id: str, credentials_id: str) -> None:\nwith self._locked(user_id, credentials_id):",
              "successors": [
                {
                  "id": 3,
                  "label": "    self.store.delete_creds_by_id(user_id, credentials_id)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_acquire_lock",
          "type": "function",
          "start_line": 133,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)",
          "blocks": [
            {
              "id": 1,
              "label": "def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\nkey = (\n    f\"user:{user_id}\",\n    f\"credentials:{credentials_id}\",\n    *args,\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "return self._locks.acquire(key)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_locked",
          "type": "function",
          "start_line": 142,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
          "blocks": [
            {
              "id": 1,
              "label": "lock = self._acquire_lock(user_id, credentials_id, *args)\ntry:",
              "successors": [
                {
                  "id": 3,
                  "label": "yield\nfinally:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if lock.locked():\nlock.release()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "release_all_locks",
          "type": "function",
          "start_line": 150,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": "    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()",
          "blocks": [
            {
              "id": 1,
              "label": "def release_all_locks(self):\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "self._locks.release_all_locks()\nself.store.locks.release_all_locks()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class IntegrationCredentialsManager:\n    \"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### ⚠️ Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"\n\n        self.store = IntegrationCredentialsStore()\n\n        return self.store.add_creds(user_id, credentials)\n\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None\n\n        return credentials\n\n        return credentials, lock\n\n            self.store.update_creds(user_id, updated)\n\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    # -- Locking utilities -- #\n\n        return self._locks.acquire(key)\n\n    @contextmanager\n                lock.release()\n\n        self.store.locks.release_all_locks()\n",
      "blocks": [
        {
          "id": 1,
          "label": "class IntegrationCredentialsManager:",
          "successors": [
            {
              "id": 2,
              "label": "self.store = IntegrationCredentialsStore()\nreturn self.store.add_creds(user_id, credentials)",
              "successors": []
            },
            {
              "id": 4,
              "label": "return self.store.get_creds_by_id(user_id, credentials_id) is not None",
              "successors": []
            },
            {
              "id": 5,
              "label": "return credentials",
              "successors": []
            },
            {
              "id": 6,
              "label": "return credentials, lock",
              "successors": []
            },
            {
              "id": 7,
              "label": "self.store.update_creds(user_id, updated)",
              "successors": []
            },
            {
              "id": 8,
              "label": "self.store.delete_creds_by_id(user_id, credentials_id)",
              "successors": []
            },
            {
              "id": 9,
              "label": "return self._locks.acquire(key)",
              "successors": []
            },
            {
              "id": 10,
              "label": "@contextmanager\nlock.release()",
              "successors": []
            },
            {
              "id": 12,
              "label": "self.store.locks.release_all_locks()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import TYPE_CHECKING\n\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock\n\nfrom backend.data import redis\nfrom backend.data.model import Credentials\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\n\n\n    )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom contextlib import contextmanager",
      "successors": [
        {
          "id": 3,
          "label": "from datetime import datetime\nfrom typing import TYPE_CHECKING",
          "successors": [
            {
              "id": 5,
              "label": "from autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock",
              "successors": [
                {
                  "id": 7,
                  "label": "from backend.data import redis\nfrom backend.data.model import Credentials",
                  "successors": [
                    {
                      "id": 9,
                      "label": "from backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME",
                      "successors": [
                        {
                          "id": 11,
                          "label": "from backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings",
                          "successors": [
                            {
                              "id": 13,
                              "label": "if TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler\nlogger = logging.getLogger(__name__)",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "settings = Settings()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}