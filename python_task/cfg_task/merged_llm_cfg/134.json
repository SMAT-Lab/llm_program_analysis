{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 158,
  "functions": [],
  "classes": [
    {
      "name": "GitHubTriggerBase",
      "type": "class",
      "start_line": 27,
      "end_line": 58,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 55,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"payload\", input_data.payload\n        yield \"triggered_by_user\", input_data.payload[\"sender\"]",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\nyield \"payload\", input_data.payload\nyield \"triggered_by_user\", input_data.payload[\"sender\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 28,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo: str = SchemaField(\n            description=(\n                \"Repository to subscribe to.\\n\\n\"\n                \"**Note:** Make sure your GitHub credentials have permissions \"\n                \"to create webhooks on this repo.\"\n            ),\n            placeholder=\"{owner}/{repo}\",\n        )\n        # --8<-- [start:example-payload-field]\n        payload: dict = SchemaField(hidden=True, default={})\n        # --8<-- [end:example-payload-field]",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\nrepo: str = SchemaField(description=(\"Repository to subscribe to.\\n\\n\" \"**Note:** Make sure your GitHub credentials have permissions \" \"to create webhooks on this repo.\"), placeholder=\"{owner}/{repo}\")\npayload: dict = SchemaField(hidden=True, default={})",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 42,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        payload: dict = SchemaField(\n            description=\"The complete webhook payload that was received from GitHub. \"\n            \"Includes information about the affected resource (e.g. pull request), \"\n            \"the event, and the user who triggered the event.\"\n        )\n        triggered_by_user: dict = SchemaField(\n            description=\"Object representing the GitHub user who triggered the event\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the payload could not be processed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\npayload: dict = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 3,
              "label": "triggered_by_user: dict = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "END",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GitHubTriggerBase:\n        # --8<-- [end:example-payload-field]\n\n        )\n\n        yield \"triggered_by_user\", input_data.payload[\"sender\"]\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GitHubTriggerBase:\nyield \"triggered_by_user\", input_data.payload[\"sender\"]",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubPullRequestTriggerBlock",
      "type": "class",
      "start_line": 60,
      "end_line": 155,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 111,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        from backend.integrations.webhooks.github import GithubWebhookType\n\n        example_payload = json.loads(\n            self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\")\n        )\n\n        super().__init__(\n            id=\"6c60ec01-8128-419e-988f-96a063ee2fea\",\n            description=\"This block triggers on pull request events and outputs the event type and payload.\",\n            categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},\n            input_schema=GithubPullRequestTriggerBlock.Input,\n            output_schema=GithubPullRequestTriggerBlock.Output,\n            # --8<-- [start:example-webhook_config]\n            webhook_config=BlockWebhookConfig(\n                provider=\"github\",\n                webhook_type=GithubWebhookType.REPO,\n                resource_format=\"{repo}\",\n                event_filter_input=\"events\",\n                event_format=\"pull_request.{event}\",\n            ),\n            # --8<-- [end:example-webhook_config]\n            test_input={\n                \"repo\": \"Significant-Gravitas/AutoGPT\",\n                \"events\": {\"opened\": True, \"synchronize\": True},\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"payload\": example_payload,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"payload\", example_payload),\n                (\"triggered_by_user\", example_payload[\"sender\"]),\n                (\"event\", example_payload[\"action\"]),\n                (\"number\", example_payload[\"number\"]),\n                (\"pull_request\", example_payload[\"pull_request\"]),\n                (\"pull_request_url\", example_payload[\"pull_request\"][\"html_url\"]),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "from backend.integrations.webhooks.github import GithubWebhookType\nexample_payload = json.loads(self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\"))\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 150,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n        yield \"event\", input_data.payload[\"action\"]\n        yield \"number\", input_data.payload[\"number\"]\n        yield \"pull_request\", input_data.payload[\"pull_request\"]\n        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
          "blocks": [
            {
              "id": 1,
              "label": "yield from super().run(input_data, **kwargs)\nyield \"event\", input_data.payload[\"action\"]\nyield \"number\", input_data.payload[\"number\"]\nyield \"pull_request\", input_data.payload[\"pull_request\"]\nyield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 66,
          "end_line": 96,
          "functions": [],
          "classes": [
            {
              "name": "EventsFilter",
              "type": "class",
              "start_line": 67,
              "end_line": 92,
              "functions": [],
              "classes": [],
              "simplified_code": "        class EventsFilter(BaseModel):\n            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n\n            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False",
              "blocks": [
                {
                  "id": 1,
                  "label": "class EventsFilter(BaseModel):\n\"\"\"\nhttps://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n\"\"\"\nopened: bool = False\nedited: bool = False\nclosed: bool = False\nreopened: bool = False\nsynchronize: bool = False\nassigned: bool = False\nunassigned: bool = False\nlabeled: bool = False\nunlabeled: bool = False\nconverted_to_draft: bool = False\nlocked: bool = False\nunlocked: bool = False\nenqueued: bool = False\ndeq...",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Input(GitHubTriggerBase.Input):\n            auto_merge_disabled: bool = False\n\n        events: EventsFilter = SchemaField(\n            title=\"Events\", description=\"The events to subscribe to\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(GitHubTriggerBase.Input):\nauto_merge_disabled: bool = False\nevents: EventsFilter = SchemaField(title=\"Events\", description=\"The events to subscribe to\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 99,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(GitHubTriggerBase.Output):\n        event: str = SchemaField(\n            description=\"The PR event that triggered the webhook (e.g. 'opened')\"\n        )\n        number: int = SchemaField(description=\"The number of the affected pull request\")\n        pull_request: dict = SchemaField(\n            description=\"Object representing the affected pull request\"\n        )\n        pull_request_url: str = SchemaField(\n            description=\"The URL of the affected pull request\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(GitHubTriggerBase.Output):\nevent: str = SchemaField(description=\"The PR event that triggered the webhook (e.g. 'opened')\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "number: int = SchemaField(description=\"The number of the affected pull request\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "pull_request: dict = SchemaField(description=\"Object representing the affected pull request\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "pull_request_url: str = SchemaField(description=\"The URL of the affected pull request\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):\n    EXAMPLE_PAYLOAD_FILE = (\n        Path(__file__).parent / \"example_payloads\" / \"pull_request.synchronize.json\"\n    )\n\n    # --8<-- [start:example-event-filter]\n        )\n        # --8<-- [end:example-event-filter]\n\n        )\n\n        )\n\n        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):\nEXAMPLE_PAYLOAD_FILE = (Path(__file__).parent / \"example_payloads\" / \"pull_request.synchronize.json\")\nyield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import json\nimport logging\nfrom pathlib import Path\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockOutput,\n    BlockSchema,\n    BlockWebhookConfig,\n)\nfrom backend.data.model import SchemaField\n\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\nlogger = logging.getLogger(__name__)\n\n\n# --8<-- [start:GithubTriggerExample]\n\n\n        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]\n\n\n# --8<-- [end:GithubTriggerExample]",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nimport logging\nfrom pathlib import Path\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockOutput,\n    BlockSchema,\n    BlockWebhookConfig,\n)\nfrom backend.data.model import SchemaField\n\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\nlogger = logging.getLogger(__name__)\nyield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
      "successors": []
    }
  ]
}