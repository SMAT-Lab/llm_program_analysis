{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "SpendingByCategory",
      "type": "class",
      "start_line": 6,
      "end_line": 57,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, categorizer):\nself.categorizer = categorizer",
              "successors": []
            }
          ]
        },
        {
          "name": "current_year_month",
          "type": "function",
          "start_line": 12,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "\"\"\"Return the current year and month.\"\"\"",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_year_month",
          "type": "function",
          "start_line": 16,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def extract_year_month(self, timestamp):\n\"\"\"Return the year and month portions of the timestamp.\"\"\"",
              "successors": []
            }
          ]
        },
        {
          "name": "handle_budget_notifications",
          "type": "function",
          "start_line": 20,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def handle_budget_notifications(self, key, total):",
              "successors": []
            }
          ]
        },
        {
          "name": "mapper",
          "type": "function",
          "start_line": 24,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount",
          "blocks": [
            {
              "id": 1,
              "label": "timestamp, category, amount = line.split('\\t')\nperiod = self.extract_year_month(timestamp)\nif period == self.current_year_month():\nyield (period, category), amount",
              "successors": []
            },
            {
              "id": 5,
              "label": "",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer",
          "type": "function",
          "start_line": 38,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)",
          "blocks": [
            {
              "id": 1,
              "label": "total = sum(values)\nself.handle_budget_notifications(key, total)\nyield key, sum(values)",
              "successors": []
            }
          ]
        },
        {
          "name": "steps",
          "type": "function",
          "start_line": 48,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
          "blocks": [
            {
              "id": 1,
              "label": "def steps(self):\n\"\"\"Run the map and reduce steps.\"\"\"\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer)]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class SpendingByCategory(MRJob):\n\n        ...\n\n        ...\n\n        ...\n\n        ...\n\n            yield (period, category), amount\n\n        yield key, sum(values)\n\n        ]\n\n\nif __name__ == '__main__':\n    SpendingByCategory.run()",
      "blocks": [
        {
          "id": 1,
          "label": "yield (period, category), amount\nyield key, sum(values)\nif __name__ == '__main__':\nSpendingByCategory.run()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\n    SpendingByCategory.run()",
  "blocks": [
    {
      "id": 1,
      "label": "from mrjob.job import MRJob\nSpendingByCategory.run()",
      "successors": []
    }
  ]
}