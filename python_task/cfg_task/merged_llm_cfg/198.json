{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "configure_logging",
      "type": "function",
      "start_line": 6,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": "def configure_logging():\n    import logging\n\n    import autogpt_libs.logging.config\n\n    if (\n        settings.config.behave_as == BehaveAs.LOCAL\n        or settings.config.app_env == AppEnvironment.LOCAL\n    ):\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)\n    else:\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)\n\n    # Silence httpx logger\n    logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
      "blocks": [
        {
          "id": 1,
          "label": "def configure_logging():\nimport logging\n\nimport autogpt_libs.logging.config",
          "successors": [
            {
              "id": 3,
              "label": "if (\n    settings.config.behave_as == BehaveAs.LOCAL\n    or settings.config.app_env == AppEnvironment.LOCAL\n):",
              "successors": [
                {
                  "id": 4,
                  "label": "    autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)\nlogging.getLogger(\"httpx\").setLevel(logging.WARNING)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)\nlogging.getLogger(\"httpx\").setLevel(logging.WARNING)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from backend.util.settings import AppEnvironment, BehaveAs, Settings\n\nsettings = Settings()\n\n\n    logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.util.settings import AppEnvironment, BehaveAs, Settings\n\nsettings = Settings()\nlogging.getLogger(\"httpx\").setLevel(logging.WARNING)",
      "successors": []
    }
  ]
}