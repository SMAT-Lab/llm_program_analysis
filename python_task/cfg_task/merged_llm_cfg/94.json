{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [
    {
      "name": "minimax",
      "type": "function",
      "start_line": 16,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": "def minimax(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n\n    if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")\n    if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")\n\n    # Base case: If the current depth equals the height of the tree,\n    # return the score of the current node.\n    if depth == height:\n        return scores[node_index]\n\n    # If it's the maximizer's turn, choose the maximum score\n    # between the two possible moves.\n    if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )\n\n    # If it's the minimizer's turn, choose the minimum score\n    # between the two possible moves.\n    return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def minimax(depth: int, node_index: int, is_max: bool, scores: list[int], height: float) -> int:\nif depth < 0:\n    raise ValueError(\"Depth cannot be less than 0\")",
          "successors": [
            {
              "id": 3,
              "label": "if len(scores) == 0:\n    raise ValueError(\"Scores cannot be empty\")\nif depth == height:\n    return scores[node_index]",
              "successors": [
                {
                  "id": 5,
                  "label": "if is_max:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return max(\n    minimax(depth + 1, node_index * 2, False, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n)",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "return min(\n    minimax(depth + 1, node_index * 2, True, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 81,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "simplified_code": "def main() -> None:\n    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
      "blocks": [
        {
          "id": 1,
          "label": "def main() -> None:\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)",
          "successors": [
            {
              "id": 3,
              "label": "    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\n\n    )\n\n\n    print(minimax(0, 0, True, scores, height))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations\n\nimport math\ndef minimax(depth, nodeIndex, maximizingPlayer, scores, height):\nif depth == height:",
      "successors": [
        {
          "id": 3,
          "label": "return scores[nodeIndex]",
          "successors": []
        },
        {
          "id": 4,
          "label": "if maximizingPlayer:",
          "successors": [
            {
              "id": 5,
              "label": "best = -math.inf\nfor i in range(2):",
              "successors": [
                {
                  "id": 6,
                  "label": "val = minimax(depth + 1, nodeIndex * 2 + i,\nFalse, scores, height)\nbest = max(best, val)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "return best",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "else:\nbest = math.inf\nfor i in range(2):",
              "successors": [
                {
                  "id": 10,
                  "label": "val = minimax(depth + 1, nodeIndex * 2 + i,\nTrue, scores, height)\nbest = min(best, val)",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "return best",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}