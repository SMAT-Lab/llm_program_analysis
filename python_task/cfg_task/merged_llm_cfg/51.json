{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 66,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 16,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
      "blocks": [
        {
          "id": 1,
          "label": "def backtrack(candidates: list, path: list, answer: list, target: int, previous_index: int) -> None:\nif target == 0:\nanswer.append(path.copy())",
          "successors": []
        },
        {
          "id": 4,
          "label": "for index in range(previous_index, len(candidates)):\nif target >= candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates, path, answer, target - candidates[index], index)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "path.pop(len(path) - 1)",
          "successors": [
            4
          ]
        }
      ]
    },
    {
      "name": "combination_sum",
      "type": "function",
      "start_line": 41,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
      "blocks": [
        {
          "id": 1,
          "label": "path = []  # type: list[int]\nanswer = []  # type: list[int]\nbacktrack(candidates, path, answer, target, 0)\nreturn answer",
          "successors": []
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 58,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "simplified_code": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
      "blocks": [
        {
          "id": 1,
          "label": "def main() -> None:\nprint(combination_sum([-8, 2.3, 0], 1))",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\n\n\n                path.pop(len(path) - 1)\n\n\n    return answer\n\n\n    print(combination_sum([-8, 2.3, 0], 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
  "blocks": [
    {
      "id": 1,
      "label": "def combination_sum(candidates, target):\nanswer = []\ncandidates.sort()\ndef backtrack(remain, path, start):\nif remain == 0:\nanswer.append(list(path))",
      "successors": [
        10
      ]
    },
    {
      "id": 7,
      "label": "for i in range(start, len(candidates)):\npick = candidates[i]\npath.append(pick)",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "if remain - pick >= 0:\nbacktrack(remain - pick, path, i)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "path.pop(len(path) - 1)",
      "successors": [
        7
      ]
    }
  ]
}