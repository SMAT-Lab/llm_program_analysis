{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 234,
  "functions": [
    {
      "name": "get_user_credit_model",
      "type": "function",
      "start_line": 226,
      "end_line": 230,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)",
      "blocks": [
        {
          "id": 1,
          "label": "def get_user_credit_model() -> UserCreditBase:\nif config.enable_credit.lower() == \"true\":",
          "successors": [
            {
              "id": 3,
              "label": "return UserCredit(config.num_user_credits_refill)",
              "successors": []
            },
            {
              "id": 4,
              "label": "return DisabledUserCredit(0)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_block_costs",
      "type": "function",
      "start_line": 233,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
      "blocks": [
        {
          "id": 1,
          "label": "def get_block_costs() -> dict[str, list[BlockCost]]:\nreturn {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "UserCreditBase",
      "type": "class",
      "start_line": 17,
      "end_line": 66,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 18,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, num_user_credits_refill: int):\n    self.num_user_credits_refill = num_user_credits_refill",
              "successors": []
            }
          ]
        },
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n\"\"\"\nGet the current credit for the user and refill if no transaction has been made in the current cycle.\n\nReturns:\n    int: The current credit for the user.\n\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 32,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def spend_credits(\n    self,\n    user_id: str,\n    user_credit: int,\n    block_id: str,\n    input_data: BlockInput,\n    data_size: float,\n    run_time: float,\n) -> int:\n\"\"\"\nSpend the credits for the user based on the block usage.\n\nArgs:\n    user_id (str): The user ID.\n    user_credit (int): The current credit for the user.\n    block_id (str): The block ID.\n    input_data (BlockInput): The input data for the block.\n    data_size (float): The size of the data being processed.\n    run_time (float): The time taken to run the block.\n\nReturns:\n    int: amount of credit spent\n\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 58,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, user_id: str, amount: int):\n\"\"\"\nTop up the credits for the user.\n\nArgs:\n    user_id (str): The user ID.\n    amount (int): The amount to top up.\n\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class UserCreditBase(ABC):\n        self.num_user_credits_refill = num_user_credits_refill\n\n    @abstractmethod\n        pass\n\n    @abstractmethod\n        pass\n\n    @abstractmethod\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class UserCreditBase(ABC):",
          "successors": [
            {
              "id": 2,
              "label": "    self.num_user_credits_refill = num_user_credits_refill",
              "successors": []
            },
            {
              "id": 3,
              "label": "    @abstractmethod\n    pass",
              "successors": []
            },
            {
              "id": 5,
              "label": "    @abstractmethod\n    pass",
              "successors": []
            },
            {
              "id": 7,
              "label": "    @abstractmethod\n    pass",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "UserCredit",
      "type": "class",
      "start_line": 69,
      "end_line": 212,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 70,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n    cur_time = self.time_now()\n    cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n    nxt_month = (\n        cur_month.replace(month=cur_month.month + 1)\n        if cur_month.month < 12\n        else cur_month.replace(year=cur_month.year + 1, month=1)\n    )\n\n    user_credit = await CreditTransaction.prisma().group_by(\n        by=[\"userId\"],\n        sum={\"amount\": True},\n        where={\n            \"userId\": user_id,\n            \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n            \"isActive\": True,\n        },\n    )\nif user_credit:",
              "successors": [
                {
                  "id": 3,
                  "label": "    credit_sum = user_credit[0].get(\"_sum\") or {}\n    return credit_sum.get(\"amount\", 0)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\ntry:\n    await CreditTransaction.prisma().create(\n        data={\n            \"amount\": self.num_user_credits_refill,\n            \"type\": CreditTransactionType.TOP_UP,\n            \"userId\": user_id,\n            \"transactionKey\": key,\n            \"createdAt\": self.time_now(),\n        }\n    )",
                  "successors": [
                    {
                      "id": 6,
                      "label": "except UniqueViolationError:\n    pass  # Already refilled this month",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "return self.num_user_credits_refill",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "time_now",
          "type": "function",
          "start_line": 111,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    def time_now():\n        return datetime.now(timezone.utc)",
          "blocks": [
            {
              "id": 1,
              "label": "def time_now():\n    return datetime.now(timezone.utc)",
              "successors": []
            }
          ]
        },
        {
          "name": "_block_usage_cost",
          "type": "function",
          "start_line": 114,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}",
          "blocks": [
            {
              "id": 1,
              "label": "block_costs = BLOCK_COSTS.get(type(block))\nif not block_costs:",
              "successors": [
                {
                  "id": 3,
                  "label": "return 0, {}",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "for block_cost in block_costs:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\ncontinue",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if block_cost.cost_type == BlockCostType.RUN:",
                          "successors": [
                            {
                              "id": 8,
                              "label": "return block_cost.cost_amount, block_cost.cost_filter",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "label": "if block_cost.cost_type == BlockCostType.SECOND:",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "return (\n    int(run_time * block_cost.cost_amount),\n    block_cost.cost_filter,\n)",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "if block_cost.cost_type == BlockCostType.BYTE:",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "return (\n    int(data_size * block_cost.cost_amount),\n    block_cost.cost_filter,\n)",
                                      "successors": []
                                    },
                                    {
                                      "id": 13,
                                      "label": "return 0, {}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_is_cost_filter_match",
          "type": "function",
          "start_line": 146,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):",
              "successors": [
                {
                  "id": 2,
                  "label": "    return cost_filter == input_data",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "return all(\n    (not input_data.get(k) and not v)\n    or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n    for k, v in cost_filter.items()\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 164,
          "end_line": 202,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost",
          "blocks": [
            {
              "id": 1,
              "label": "block = get_block(block_id)\nif not block:",
              "successors": [
                {
                  "id": 3,
                  "label": "raise ValueError(f\"Block not found: {block_id}\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "cost, matching_filter = self._block_usage_cost(block=block, input_data=input_data, data_size=data_size, run_time=run_time)\nif cost <= 0:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return 0",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "if validate_balance and user_credit < cost:",
                      "successors": [
                        {
                          "id": 8,
                          "label": "raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                          "successors": []
                        },
                        {
                          "id": 9,
                          "label": "await CreditTransaction.prisma().create(data={\"userId\": user_id, \"amount\": -cost, \"type\": CreditTransactionType.USAGE, \"blockId\": block.id, \"metadata\": Json({\"block\": block.name, \"input\": matching_filter}), \"createdAt\": self.time_now()})\nreturn cost",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 204,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, user_id: str, amount: int):\n    await CreditTransaction.prisma().create(\n        data={\n            \"userId\": user_id,\n            \"amount\": amount,\n            \"type\": CreditTransactionType.TOP_UP,\n            \"createdAt\": self.time_now(),\n        }\n    )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class UserCredit(UserCreditBase):\n        return self.num_user_credits_refill\n\n    @staticmethod\n        return datetime.now(timezone.utc)\n\n        return 0, {}\n\n        )\n\n        return cost\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class UserCredit(UserCreditBase):\n    def get_refill_credits(self):\n        return self.num_user_credits_refill",
          "successors": []
        }
      ]
    },
    {
      "name": "DisabledUserCredit",
      "type": "class",
      "start_line": 215,
      "end_line": 223,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 216,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0",
          "blocks": [
            {
              "id": 1,
              "label": "async def get_or_refill_credit(self, *args, **kwargs) -> int:\n    return 0",
              "successors": []
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 219,
          "end_line": 220,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0",
          "blocks": [
            {
              "id": 1,
              "label": "async def spend_credits(self, *args, **kwargs) -> int:\nreturn 0",
              "successors": []
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 222,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def top_up_credits(self, *args, **kwargs):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def top_up_credits(self, *args, **kwargs):\npass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class DisabledUserCredit(UserCreditBase):\n        return 0\n\n        return 0\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class DisabledUserCredit(UserCreditBase):",
          "successors": [
            {
              "id": 2,
              "label": "    return 0",
              "successors": []
            },
            {
              "id": 3,
              "label": "    return 0",
              "successors": []
            },
            {
              "id": 4,
              "label": "    pass",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n\nconfig = Config()\n\n\n        pass\n\n\n        )\n\n\n        pass\n\n\n        return DisabledUserCredit(0)\n\n\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
  "blocks": []
}