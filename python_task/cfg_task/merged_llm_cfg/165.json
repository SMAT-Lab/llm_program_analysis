{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 45,
  "functions": [
    {
      "name": "ld_client",
      "type": "function",
      "start_line": 8,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": "def ld_client(mocker):\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True\n    return client",
      "blocks": [
        {
          "id": 1,
          "label": "client = mocker.Mock(spec=LDClient)\nmocker.patch('ldclient.get', return_value=client)\nclient.is_initialized.return_value = True\nreturn client",
          "successors": []
        }
      ]
    },
    {
      "name": "test_feature_flag_enabled",
      "type": "function",
      "start_line": 16,
      "end_line": 25,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 20,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_function(user_id: str):\n        return \"success\"",
          "blocks": [
            {
              "id": 1,
              "label": "async def test_function(user_id: str):\nreturn \"success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def test_feature_flag_enabled(ld_client):\n    ld_client.variation.return_value = True\n\n    @feature_flag(\"test-flag\")\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n    assert result == \"success\"\n    ld_client.variation.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "ld_client.variation.return_value = True\n@feature_flag(\"test-flag\")\nreturn \"success\"\nresult = test_function(user_id=\"test-user\")\nassert result == \"success\"\nld_client.variation.assert_called_once()",
          "successors": []
        }
      ]
    },
    {
      "name": "test_feature_flag_unauthorized_response",
      "type": "function",
      "start_line": 29,
      "end_line": 37,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 33,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_function(user_id: str):\n        return \"success\"",
          "blocks": [
            {
              "id": 1,
              "label": "return \"success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "async def test_feature_flag_unauthorized_response(ld_client):\n    ld_client.variation.return_value = False\n\n    @feature_flag(\"test-flag\")\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_feature_flag_unauthorized_response(ld_client):\nld_client.variation.return_value = False\n@feature_flag('test-flag')\nreturn 'success'",
          "successors": []
        },
        {
          "id": 5,
          "label": "result = test_function(user_id='test-user')\nassert result == {'error': 'disabled'}",
          "successors": []
        }
      ]
    },
    {
      "name": "test_mock_flag_variation",
      "type": "function",
      "start_line": 40,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_mock_flag_variation(ld_client):\n    with mock_flag_variation(\"test-flag\", True):\n        assert ld_client.variation(\"test-flag\", None, False)\n\n    with mock_flag_variation(\"test-flag\", False):\n        assert ld_client.variation(\"test-flag\", None, False)",
      "blocks": [
        {
          "id": 1,
          "label": "with mock_flag_variation(\"test-flag\", True):\nassert ld_client.variation(\"test-flag\", None, False)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "with mock_flag_variation(\"test-flag\", False):\nassert ld_client.variation(\"test-flag\", None, False)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\nfrom ldclient import LDClient\n\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation\n\n\n@pytest.fixture\n    return client\n\n\n@pytest.mark.asyncio\n    ld_client.variation.assert_called_once()\n\n\n@pytest.mark.asyncio\n    assert result == {\"error\": \"disabled\"}\n\n\n        assert ld_client.variation(\"test-flag\", None, False)",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\nfrom ldclient import LDClient\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation\n@pytest.fixture\nreturn client\n@pytest.mark.asyncio\nld_client.variation.assert_called_once()\n@pytest.mark.asyncio\nassert result == {\"error\": \"disabled\"}\nassert ld_client.variation(\"test-flag\", None, False)",
      "successors": []
    }
  ]
}