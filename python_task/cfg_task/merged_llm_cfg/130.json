{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 87,
  "functions": [],
  "classes": [
    {
      "name": "ContentRetrievalSettings",
      "type": "class",
      "start_line": 15,
      "end_line": 34,
      "functions": [],
      "simplified_code": "class ContentRetrievalSettings(BaseModel):\n    text: Optional[dict] = SchemaField(\n        description=\"Text content settings\",\n        default={\"maxCharacters\": 1000, \"includeHtmlTags\": False},\n        advanced=True,\n    )\n    highlights: Optional[dict] = SchemaField(\n        description=\"Highlight settings\",\n        default={\n            \"numSentences\": 3,\n            \"highlightsPerUrl\": 3,\n            \"query\": \"\",\n        },\n        advanced=True,\n    )\n    summary: Optional[dict] = SchemaField(\n        description=\"Summary settings\",\n        default={\"query\": \"\"},\n        advanced=True,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "class ContentRetrievalSettings(BaseModel):\ntext: Optional[dict] = SchemaField(...)\nhighlights: Optional[dict] = SchemaField(...)\nsummary: Optional[dict] = SchemaField(...)",
          "successors": []
        }
      ]
    },
    {
      "name": "ExaContentsBlock",
      "type": "class",
      "start_line": 37,
      "end_line": 87,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"c52be83f-f8cd-4180-b243-af35f986b461\",\n            description=\"Retrieves document contents using Exa's contents API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaContentsBlock.Input,\n            output_schema=ExaContentsBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 64,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/contents\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"ids\": input_data.ids,\n            \"text\": input_data.contents.text,\n            \"highlights\": input_data.contents.highlights,\n            \"summary\": input_data.contents.summary,\n        }\n\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []",
          "blocks": [
            {
              "id": 1,
              "label": "url = \"https://api.exa.ai/contents\"\nheaders = {\"Content-Type\": \"application/json\", \"x-api-key\": credentials.api_key.get_secret_value()}\npayload = {\"ids\": input_data.ids, \"text\": input_data.contents.text, \"highlights\": input_data.contents.highlights, \"summary\": input_data.contents.summary}\ntry:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    data = response.json()\n    yield \"results\", data.get(\"results\", [])\nexcept Exception as e:\n    yield \"error\", str(e)\n    yield \"results\", []",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 38,
          "end_line": 47,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        ids: List[str] = SchemaField(\n            description=\"Array of document IDs obtained from searches\",\n        )\n        contents: ContentRetrievalSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentRetrievalSettings(),\n            advanced=True,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: ExaCredentialsInput = ExaCredentialsField()\nids: List[str] = SchemaField(description=\"Array of document IDs obtained from searches\",)\ncontents: ContentRetrievalSettings = SchemaField(description=\"Content retrieval settings\", default=ContentRetrievalSettings(), advanced=True,)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        results: list = SchemaField(\n            description=\"List of document contents\",\n            default=[],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresults: list = SchemaField(description=\"List of document contents\", default=[]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ExaContentsBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"results\", []",
      "blocks": [
        {
          "id": 1,
          "label": "class ExaContentsBlock(Block):\nyield \"results\", []",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from typing import List, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n    )\n\n\n            yield \"results\", []",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import List, Optional\nfrom pydantic import BaseModel\nfrom backend.blocks.exa._auth import ( ExaCredentials, ExaCredentialsField, ExaCredentialsInput, )\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nyield 'results', []",
      "successors": []
    }
  ]
}