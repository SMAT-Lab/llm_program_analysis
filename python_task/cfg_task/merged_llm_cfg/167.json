{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "JSONCryptor",
      "type": "class",
      "start_line": 11,
      "end_line": 34,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 12,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, key: Optional[str] = None):\n    self.key = key or ENCRYPTION_KEY\nif not self.key:",
              "successors": [
                {
                  "id": 3,
                  "label": "    raise ValueError(\n        \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n    )\nself.fernet = Fernet(\n    self.key.encode() if isinstance(self.key, str) else self.key\n)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "self.fernet = Fernet(\n    self.key.encode() if isinstance(self.key, str) else self.key\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "encrypt",
          "type": "function",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
          "blocks": [
            {
              "id": 1,
              "label": "def encrypt(self, data: dict) -> str:\n\"\"\"Encrypt dictionary data to string\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "json_str = json.dumps(data)\nencrypted = self.fernet.encrypt(json_str.encode())",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return encrypted.decode()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "decrypt",
          "type": "function",
          "start_line": 29,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
          "blocks": [
            {
              "id": 1,
              "label": "def decrypt(self, encrypted_str: str) -> dict:\n    \"\"\"Decrypt string to dictionary\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "if not encrypted_str:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    return {}",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class JSONCryptor:\n        )\n\n        return encrypted.decode()\n\n        return json.loads(decrypted.decode())",
      "blocks": [
        {
          "id": 1,
          "label": "class JSONCryptor:",
          "successors": [
            {
              "id": 2,
              "label": "def encrypt(self, data):\njson_data = json.dumps(data)",
              "successors": [
                {
                  "id": 4,
                  "label": "encrypted = base64.b64encode(cipher.encrypt(json_data.encode()))\nreturn encrypted.decode()",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "def decrypt(self, encrypted_data):\ndecrypted = cipher.decrypt(base64.b64decode(encrypted_data.encode()))",
              "successors": [
                {
                  "id": 8,
                  "label": "return json.loads(decrypted.decode())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n\n\n        return json.loads(decrypted.decode())",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\nreturn json.loads(decrypted.decode())",
      "successors": []
    }
  ]
}