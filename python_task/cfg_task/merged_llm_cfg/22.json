{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 581,
  "classes": [
    {
      "name": "GithubCommentBlock",
      "type": "class",
      "start_line": 23,
      "end_line": 108,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 42,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\",\n            description=\"This block posts a comment on a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubCommentBlock.Input,\n            output_schema=GithubCommentBlock.Output,\n            test_input=[\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/pull/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n            ],\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"id\", 1337),\n                (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"),\n                (\"id\", 1337),\n                (\n                    \"url\",\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                ),\n            ],\n            test_mock={\n                \"post_comment\": lambda *args, **kwargs: (\n                    1337,\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\", description=\"This block posts a comment on a specified GitHub issue or pull request.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubCommentBlock.Input, output_schema=GithubCommentBlock.Output, test_input=[{\"issue_url\": \"https://github.com/owner/repo/issues/1\", \"comment\": \"This is a test comment.\", \"credentials\": TEST_CREDENTIALS_INPUT,}, {\"issue_url\": \"https://github.com/owner/repo/pull/1\", \"comment\": \"This is a test comment.\", \"credentials\": TEST_CREDENTIALS_INPUT,},], test_credentials=TEST_CREDENTIALS, test_output=[(\"id\", 1337), (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"), (\"id\", 1337), (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\",),], test_mock={\"post_comment\": lambda *args, **kwargs: (1337, \"https://github.com/owner/repo/issues/1#issuecomment-1337\",)},)",
              "successors": []
            }
          ]
        },
        {
          "name": "post_comment",
          "type": "function",
          "start_line": 79,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "    @staticmethod\n    def post_comment(\n        credentials: GithubCredentials, issue_url: str, body_text: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"body\": body_text}\n        if \"pull\" in issue_url:\n            issue_url = issue_url.replace(\"pull\", \"issues\")\n        comments_url = issue_url + \"/comments\"\n        response = api.post(comments_url, json=data)\n        comment = response.json()\n        return comment[\"id\"], comment[\"html_url\"]",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\ndata = {'body': body_text}\nif 'pull' in issue_url:\nissue_url = issue_url.replace('pull', 'issues')",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "comments_url = issue_url + '/comments'\nresponse = api.post(comments_url, json=data)\ncomment = response.json()\nreturn comment['id'], comment['html_url']",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 92,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        id, url = self.post_comment(\n            credentials,\n            input_data.issue_url,\n            input_data.comment,\n        )\n        yield \"id\", id\n        yield \"url\", url",
          "blocks": [
            {
              "id": 1,
              "label": "def run(...):\nid, url = self.post_comment(credentials, input_data.issue_url, input_data.comment)\nyield 'id', id\nyield 'url', url",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 24,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        comment: str = SchemaField(\n            description=\"Comment to post on the issue or pull request\",\n            placeholder=\"Enter your comment\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "comment: str = SchemaField(description='Comment to post on the issue or pull request', placeholder='Enter your comment')",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 35,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        id: int = SchemaField(description=\"ID of the created comment\")\n        url: str = SchemaField(description=\"URL to the comment on GitHub\")\n        error: str = SchemaField(\n            description=\"Error message if the comment posting failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nid: int = SchemaField(description=\"ID of the created comment\")\nurl: str = SchemaField(description=\"URL to the comment on GitHub\")\nerror: str = SchemaField(description=\"Error message if the comment posting failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubCommentBlock(Block):\n        )\n\n        )\n\n        )\n\n        return comment[\"id\"], comment[\"html_url\"]\n\n        yield \"url\", url\n\n\n# --8<-- [end:GithubCommentBlockExample]",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubCommentBlock(Block):\nreturn comment[\"id\"], comment[\"html_url\"]\nyield \"url\", url",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubMakeIssueBlock",
      "type": "class",
      "start_line": 111,
      "end_line": 185,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 132,
          "end_line": 156,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"691dad47-f494-44c3-a1e8-05b7990f2dab\",\n            description=\"This block creates a new issue on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeIssueBlock.Input,\n            output_schema=GithubMakeIssueBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Issue\",\n                \"body\": \"This is a test issue.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/issues/1\"),\n            ],\n            test_mock={\n                \"create_issue\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/issues/1\",\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "create_issue",
          "type": "function",
          "start_line": 159,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_issue(\n        credentials: GithubCredentials, repo_url: str, title: str, body: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"title\": title, \"body\": body}\n        issues_url = repo_url + \"/issues\"\n        response = api.post(issues_url, json=data)\n        issue = response.json()\n        return issue[\"number\"], issue[\"html_url\"]",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials); data = {'title': title, 'body': body}; issues_url = repo_url + '/issues'; response = api.post(issues_url, json=data); issue = response.json()\nreturn issue['number'], issue['html_url']",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 169,
          "end_line": 183,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        number, url = self.create_issue(\n            credentials,\n            input_data.repo_url,\n            input_data.title,\n            input_data.body,\n        )\n        yield \"number\", number\n        yield \"url\", url",
          "blocks": [
            {
              "id": 1,
              "label": "number, url = self.create_issue(credentials, input_data.repo_url, input_data.title, input_data.body)\nyield 'number', number\nyield 'url', url",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 112,
          "end_line": 123,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        title: str = SchemaField(\n            description=\"Title of the issue\", placeholder=\"Enter the issue title\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the issue\", placeholder=\"Enter the issue body\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\nrepo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\",)\ntitle: str = SchemaField(description=\"Title of the issue\", placeholder=\"Enter the issue title\")\nbody: str = SchemaField(description=\"Body of the issue\", placeholder=\"Enter the issue body\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 125,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created issue\")\n        url: str = SchemaField(description=\"URL of the created issue\")\n        error: str = SchemaField(\n            description=\"Error message if the issue creation failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nnumber: int = SchemaField(description=\"Number of the created issue\")\nurl: str = SchemaField(description=\"URL of the created issue\")\nerror: str = SchemaField(description=\"Error message if the issue creation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubMakeIssueBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return issue[\"number\"], issue[\"html_url\"]\n\n        yield \"url\", url\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubMakeIssueBlock(Block):\n@staticmethod\nreturn issue[\"number\"], issue[\"html_url\"]\nyield \"url\", url",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubReadIssueBlock",
      "type": "class",
      "start_line": 186,
      "end_line": 258,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 202,
          "end_line": 226,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"6443c75d-032a-4772-9c08-230c707c8acc\",\n            description=\"This block reads the body, title, and user of a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadIssueBlock.Input,\n            output_schema=GithubReadIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the issue\"),\n                (\"body\", \"This is the body of the issue.\"),\n                (\"user\", \"username\"),\n            ],\n            test_mock={\n                \"read_issue\": lambda *args, **kwargs: (\n                    \"Title of the issue\",\n                    \"This is the body of the issue.\",\n                    \"username\",\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "read_issue",
          "type": "function",
          "start_line": 229,
          "end_line": 238,
          "functions": [],
          "classes": [],
          "simplified_code": "    def read_issue(\n        credentials: GithubCredentials, issue_url: str\n    ) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        user = data.get(\"user\", {}).get(\"login\", \"No user found\")\n        return title, body, user",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\nresponse = api.get(issue_url)\ndata = response.json()\ntitle = data.get(\"title\", \"No title found\")\nbody = data.get(\"body\", \"No body content found\")\nuser = data.get(\"user\", {}).get(\"login\", \"No user found\")\nreturn title, body, user",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 240,
          "end_line": 256,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, user = self.read_issue(\n            credentials,\n            input_data.issue_url,\n        )\n        if title:\n            yield \"title\", title\n        if body:\n            yield \"body\", body\n        if user:\n            yield \"user\", user",
          "blocks": [
            {
              "id": 1,
              "label": "title, body, user = self.read_issue(credentials, input_data.issue_url)\nif title:\nyield 'title', title",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if body:\nyield 'body', body",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if user:\nyield 'user', user",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 187,
          "end_line": 192,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "issue_url: str = SchemaField(description=\"URL of the GitHub issue\", placeholder=\"https://github.com/owner/repo/issues/1\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 194,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the issue\")\n        body: str = SchemaField(description=\"Body of the issue\")\n        user: str = SchemaField(description=\"User who created the issue\")\n        error: str = SchemaField(\n            description=\"Error message if reading the issue failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ntitle: str = SchemaField(description=\"Title of the issue\")\nbody: str = SchemaField(description=\"Body of the issue\")\nuser: str = SchemaField(description=\"User who created the issue\")\nerror: str = SchemaField(description=\"Error message if reading the issue failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubReadIssueBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return title, body, user\n\n            yield \"user\", user\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubReadIssueBlock(Block):\n@staticmethod\nreturn title, body, user\nyield \"user\", user",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubListIssuesBlock",
      "type": "class",
      "start_line": 259,
      "end_line": 333,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 277,
          "end_line": 306,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"c215bfd7-0e57-4573-8f8c-f7d4963dcd74\",\n            description=\"This block lists all issues for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListIssuesBlock.Input,\n            output_schema=GithubListIssuesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"issue\",\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_issues\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_issues",
          "type": "function",
          "start_line": 309,
          "end_line": 319,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_issues(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.IssueItem]:\n        api = get_api(credentials)\n        issues_url = repo_url + \"/issues\"\n        response = api.get(issues_url)\n        data = response.json()\n        issues: list[GithubListIssuesBlock.Output.IssueItem] = [\n            {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data\n        ]\n        return issues",
          "blocks": [
            {
              "id": 1,
              "label": "def list_issues(credentials: GithubCredentials, repo_url: str) -> list[Output.IssueItem]:\napi = get_api(credentials)\nissues_url = repo_url + \"/issues\"\nresponse = api.get(issues_url)\ndata = response.json()\nissues: list[GithubListIssuesBlock.Output.IssueItem] = [{\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data]\nreturn issues",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 321,
          "end_line": 332,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        issues = self.list_issues(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"issue\", issue) for issue in issues)",
          "blocks": [
            {
              "id": 1,
              "label": "issues = self.list_issues(credentials, input_data.repo_url)\nyield from (('issue', issue) for issue in issues)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 260,
          "end_line": 265,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\nrepo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 267,
          "end_line": 275,
          "functions": [],
          "classes": [
            {
              "name": "IssueItem",
              "type": "class",
              "start_line": 268,
              "end_line": 270,
              "functions": [],
              "classes": [],
              "simplified_code": "        class IssueItem(TypedDict):\n            title: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class IssueItem(TypedDict):\n    title: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        issue: IssueItem = SchemaField(\n            title=\"Issue\", description=\"Issues with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nurl: str\nissue: IssueItem = SchemaField(title=\"Issue\", description=\"Issues with their title and URL\")\nerror: str = SchemaField(description=\"Error message if listing issues failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubListIssuesBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if listing issues failed\")\n\n        )\n\n    @staticmethod\n        return issues\n\n        yield from ((\"issue\", issue) for issue in issues)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListIssuesBlock(Block):\nerror: str = SchemaField(description=\"Error message if listing issues failed\")\n@staticmethod\nreturn issues\nyield from ((\"issue\", issue) for issue in issues)",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubAddLabelBlock",
      "type": "class",
      "start_line": 335,
      "end_line": 391,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 353,
          "end_line": 368,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\",\n            description=\"This block adds a label to a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAddLabelBlock.Input,\n            output_schema=GithubAddLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label added successfully\")],\n            test_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\nid=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\",\ndescription=\"This block adds a label to a specified GitHub issue or pull request.\",\ncategories={BlockCategory.DEVELOPER_TOOLS},\ninput_schema=GithubAddLabelBlock.Input,\noutput_schema=GithubAddLabelBlock.Output,\ntest_input={\"issue_url\": \"https://github.com/owner/repo/issues/1\", \"label\": \"bug\", \"credentials\": TEST_CREDENTIALS_INPUT,},\ntest_credentials=TEST_CREDENTIALS,\ntest_output=[(\"status\", \"Label added successfully\")],\ntest_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},",
              "successors": []
            }
          ]
        },
        {
          "name": "add_label",
          "type": "function",
          "start_line": 371,
          "end_line": 376,
          "functions": [],
          "classes": [],
          "simplified_code": "    def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        data = {\"labels\": [label]}\n        labels_url = issue_url + \"/labels\"\n        api.post(labels_url, json=data)\n        return \"Label added successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\ndata = {'labels': [label]}\nlabels_url = issue_url + '/labels'\napi.post(labels_url, json=data)\nreturn 'Label added successfully'",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 378,
          "end_line": 390,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.add_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n        yield \"status\", status",
          "blocks": [
            {
              "id": 1,
              "label": "status = self.add_label(credentials, input_data.issue_url, input_data.label)\nyield 'status', status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 336,
          "end_line": 345,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to add to the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\nissue_url: str = SchemaField(...)\nlabel: str = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 347,
          "end_line": 351,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label addition operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label addition failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nstatus: str = SchemaField(description=\"Status of the label addition operation\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the label addition failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubAddLabelBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Label added successfully\"\n\n        yield \"status\", status\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubAddLabelBlock(Block):\n@staticmethod\ndef run():\nstatus = True\nreturn \"Label added successfully\"\nyield \"status\", status",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubRemoveLabelBlock",
      "type": "class",
      "start_line": 393,
      "end_line": 451,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 411,
          "end_line": 428,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"78f050c5-3e3a-48c0-9e5b-ef1ceca5589c\",\n            description=\"This block removes a label from a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubRemoveLabelBlock.Input,\n            output_schema=GithubRemoveLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label removed successfully\")],\n            test_mock={\n                \"remove_label\": lambda *args, **kwargs: \"Label removed successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_label",
          "type": "function",
          "start_line": 431,
          "end_line": 435,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        label_url = issue_url + f\"/labels/{label}\"\n        api.delete(label_url)\n        return \"Label removed successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\nlabel_url = issue_url + f\"/labels/{label}\"\napi.delete(label_url)\nreturn \"Label removed successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 437,
          "end_line": 449,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.remove_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n        yield \"status\", status",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nstatus = self.remove_label(credentials, input_data.issue_url, input_data.label)\nyield 'status', status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 394,
          "end_line": 403,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to remove from the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\nissue_url: str = SchemaField(...)\nlabel: str = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 405,
          "end_line": 409,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label removal operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label removal failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nstatus: str = SchemaField(description=\"Status of the label removal operation\")\nerror: str = SchemaField(description=\"Error message if the label removal failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubRemoveLabelBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Label removed successfully\"\n\n        yield \"status\", status\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubRemoveLabelBlock(Block):\n@staticmethod\n    def remove_label():\nreturn \"Label removed successfully\"\nyield \"status\", status",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubAssignIssueBlock",
      "type": "class",
      "start_line": 452,
      "end_line": 517,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 472,
          "end_line": 489,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"90507c72-b0ff-413a-886a-23bbbd66f542\",\n            description=\"This block assigns a user to a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignIssueBlock.Input,\n            output_schema=GithubAssignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue assigned successfully\")],\n            test_mock={\n                \"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"90507c72-b0ff-413a-886a-23bbbd66f542\", description=\"This block assigns a user to a specified GitHub issue.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignIssueBlock.Input, output_schema=GithubAssignIssueBlock.Output, test_input={\"issue_url\": \"https://github.com/owner/repo/issues/1\", \"assignee\": \"username1\", \"credentials\": TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[(\"status\", \"Issue assigned successfully\")], test_mock={\"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\"})",
              "successors": []
            }
          ]
        },
        {
          "name": "assign_issue",
          "type": "function",
          "start_line": 492,
          "end_line": 501,
          "functions": [],
          "classes": [],
          "simplified_code": "    def assign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.post(assignees_url, json=data)\n        return \"Issue assigned successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\nassignees_url = issue_url + \"/assignees\"\ndata = {\"assignees\": [assignee]}\napi.post(assignees_url, json=data)\nreturn \"Issue assigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 503,
          "end_line": 515,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.assign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )\n        yield \"status\", status",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nstatus = self.assign_issue(credentials, input_data.issue_url, input_data.assignee)\nyield \"status\", status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 453,
          "end_line": 462,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to assign to the issue\",\n            placeholder=\"Enter the username\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "issue_url: str = SchemaField(description=\"URL of the GitHub issue\", placeholder=\"https://github.com/owner/repo/issues/1\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "assignee: str = SchemaField(description=\"Username to assign to the issue\", placeholder=\"Enter the username\",)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 464,
          "end_line": 470,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue assignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue assignment failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nstatus: str = SchemaField(description=\"Status of the issue assignment operation\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the issue assignment failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubAssignIssueBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Issue assigned successfully\"\n\n        yield \"status\", status\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubAssignIssueBlock(Block):\ndef __init__(self):\nself.issue = None\ndef execute(self):\ntry:\nself.issue = self.assign_to_user()\nreturn 'Issue assigned successfully'\nyield 'status', status",
          "successors": []
        },
        {
          "id": 9,
          "label": "except SomeException as e:\nyield 'error', str(e)",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubUnassignIssueBlock",
      "type": "class",
      "start_line": 518,
      "end_line": 581,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 538,
          "end_line": 555,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"d154002a-38f4-46c2-962d-2488f2b05ece\",\n            description=\"This block unassigns a user from a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignIssueBlock.Input,\n            output_schema=GithubUnassignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue unassigned successfully\")],\n            test_mock={\n                \"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"d154002a-38f4-46c2-962d-2488f2b05ece\", description=\"This block unassigns a user from a specified GitHub issue.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignIssueBlock.Input, output_schema=GithubUnassignIssueBlock.Output, test_input={\"issue_url\": \"https://github.com/owner/repo/issues/1\", \"assignee\": \"username1\", \"credentials\": TEST_CREDENTIALS_INPUT,}, test_credentials=TEST_CREDENTIALS, test_output=[(\"status\", \"Issue unassigned successfully\")], test_mock={\"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\"}, )",
              "successors": []
            }
          ]
        },
        {
          "name": "unassign_issue",
          "type": "function",
          "start_line": 558,
          "end_line": 567,
          "functions": [],
          "classes": [],
          "simplified_code": "    def unassign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.delete(assignees_url, json=data)\n        return \"Issue unassigned successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\nassignees_url = issue_url + \"/assignees\"\ndata = {\"assignees\": [assignee]}\napi.delete(assignees_url, json=data)\nreturn \"Issue unassigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 569,
          "end_line": 580,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.unassign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nstatus = self.unassign_issue(credentials, input_data.issue_url, input_data.assignee)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 519,
          "end_line": 528,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to unassign from the issue\",\n            placeholder=\"Enter the username\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "assignee: str = SchemaField(description='Username to unassign from the issue', placeholder='Enter the username')",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 530,
          "end_line": 536,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue unassignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue unassignment failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nstatus: str = SchemaField(description=\"Status of the issue unassignment operation\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the issue unassignment failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubUnassignIssueBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Issue unassigned successfully\"\n\n        )\n        yield \"status\", status",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubUnassignIssueBlock(Block):\n@staticmethod\nreturn \"Issue unassigned successfully\"\nyield \"status\", status",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_github_url",
      "type": "function",
      "start_line": 18,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "def is_github_url(url: str) -> bool:\n    return urlparse(url).netloc == \"github.com\"",
      "blocks": [
        {
          "id": 1,
          "label": "def is_github_url(url: str) -> bool:\nreturn urlparse(url).netloc == \"github.com\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from urllib.parse import urlparse\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n    return urlparse(url).netloc == \"github.com\"\n\n\n# --8<-- [start:GithubCommentBlockExample]\n# --8<-- [end:GithubCommentBlockExample]\n\n\n\n\n\n\n\n\n\n\n        yield \"status\", status",
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import urlparse\nfrom typing_extensions import TypedDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\nreturn urlparse(url).netloc == \"github.com\"",
      "successors": []
    }
  ]
}