{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "ManualWebhookManagerBase",
      "type": "class",
      "start_line": 11,
      "end_line": 30,
      "functions": [
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 12,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: WT,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        print(ingress_url)  # FIXME: pass URL to user in front end\n\n        return \"\", {}",
          "blocks": [
            {
              "id": 1,
              "label": "print(ingress_url)\nreturn \"\", {}",
              "successors": []
            }
          ]
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _deregister_webhook(\n        self,\n        webhook: integrations.Webhook,\n        credentials: OAuth2Credentials | APIKeyCredentials,\n    ) -> None:\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "async def _deregister_webhook(...) -> None:\npass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ManualWebhookManagerBase(BaseWebhooksManager[WT]):\n        return \"\", {}\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "return '', {}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\n\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials\n\nfrom ._base import WT, BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials\nfrom ._base import WT, BaseWebhooksManager\nlogger = logging.getLogger(__name__)\npass",
      "successors": []
    }
  ]
}