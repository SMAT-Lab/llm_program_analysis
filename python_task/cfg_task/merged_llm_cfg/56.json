{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [
    {
      "name": "is_safe",
      "type": "function",
      "start_line": 16,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    # Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\nn = len(board)",
          "successors": [
            {
              "id": 3,
              "label": "return (all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))) and all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))) and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))) and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))))",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "solve",
      "type": "function",
      "start_line": 48,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": "def solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n    return False",
      "blocks": [
        {
          "id": 1,
          "label": "def solve(board: list[list[int]], row: int) -> bool:\n    if row >= len(board):",
          "successors": [
            {
              "id": 2,
              "label": "solution.append(board)\n        printboard(board)\n        print()\n        return True",
              "successors": []
            },
            {
              "id": 3,
              "label": "for i in range(len(board)):",
              "successors": [
                {
                  "id": 4,
                  "label": "if is_safe(board, row, i):\nboard[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "printboard",
      "type": "function",
      "start_line": 77,
      "end_line": 87,
      "functions": [],
      "classes": [],
      "simplified_code": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()",
      "blocks": [
        {
          "id": 1,
          "label": "for i in range(len(board)):",
          "successors": [
            {
              "id": 2,
              "label": "for j in range(len(board)):",
              "successors": [
                {
                  "id": 3,
                  "label": "if board[i][j] == 1:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    print(\"Q\", end=\" \")\nprint()",
                      "successors": [
                        {
                          "id": 1,
                          "label": "for i in range(len(board)):",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "    print(\".\", end=\" \")\nprint()",
                      "successors": [
                        {
                          "id": 1,
                          "label": "for i in range(len(board)):",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nsolution = []\n\n\n    )\n\n\n    return False\n\n\n        print()\n\n\n# Number of queens (e.g., n=8 for an 8x8 board)\nn = 8\nboard = [[0 for i in range(n)] for j in range(n)]\nsolve(board, 0)\nprint(\"The total number of solutions are:\", len(solution))",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations\nsolution = []",
      "successors": [
        {
          "id": 3,
          "label": "def is_safe(board, row, col):",
          "successors": [
            {
              "id": 4,
              "label": "    for i in range(col):",
              "successors": [
                {
                  "id": 5,
                  "label": "        if board[row][i]:\n            return False",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):",
              "successors": [
                {
                  "id": 8,
                  "label": "        if board[i][j]:\n            return False",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "label": "    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):",
              "successors": [
                {
                  "id": 11,
                  "label": "        if board[i][j]:\n            return False",
                  "successors": []
                }
              ]
            },
            {
              "id": 13,
              "label": "    return True",
              "successors": []
            }
          ]
        },
        {
          "id": 14,
          "label": "def solve(board, col):",
          "successors": [
            {
              "id": 15,
              "label": "    if col >= len(board):\n        solution.append([''.join('Q' if col else '.' for col in row) for row in board])",
              "successors": [
                {
                  "id": 17,
                  "label": "        return True",
                  "successors": []
                }
              ]
            },
            {
              "id": 18,
              "label": "    res = False",
              "successors": [
                {
                  "id": 19,
                  "label": "    for i in range(len(board)):",
                  "successors": [
                    {
                      "id": 20,
                      "label": "        if is_safe(board, i, col):\n            board[i][col] = 1",
                      "successors": [
                        {
                          "id": 22,
                          "label": "            res = solve(board, col + 1) or res",
                          "successors": []
                        },
                        {
                          "id": 23,
                          "label": "            board[i][col] = 0",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 24,
              "label": "    return res",
              "successors": []
            }
          ]
        },
        {
          "id": 25,
          "label": "n = 8\nboard = [[0 for i in range(n)] for j in range(n)]",
          "successors": [
            {
              "id": 27,
              "label": "solve(board, 0)\nprint(\"The total number of solutions are:\", len(solution))",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}