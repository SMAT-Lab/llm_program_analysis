{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 130,
  "functions": [],
  "classes": [
    {
      "name": "GetWikipediaSummaryBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 46,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 27,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\n            description=\"This block fetches the summary of a given topic from Wikipedia.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GetWikipediaSummaryBlock.Input,\n            output_schema=GetWikipediaSummaryBlock.Output,\n            test_input={\"topic\": \"Artificial Intelligence\"},\n            test_output=(\"summary\", \"summary content\"),\n            test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\", description=\"This block fetches the summary of a given topic from Wikipedia.\", categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={\"topic\": \"Artificial Intelligence\"}, test_output=(\"summary\", \"summary content\"), test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}})",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 39,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n        url = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\n        response = self.get_request(url, json=True)\n        if \"extract\" not in response:\n            raise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")\n        yield \"summary\", response[\"extract\"]",
          "blocks": [
            {
              "id": 1,
              "label": "topic = input_data.topic\nurl = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\nresponse = self.get_request(url, json=True)\nif \"extract\" not in response:\nraise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "yield \"summary\", response[\"extract\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        topic: str = SchemaField(description=\"The topic to fetch the summary for\")\n",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ntopic: str = SchemaField(description=\"The topic to fetch the summary for\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 21,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The summary of the given topic\")\n        error: str = SchemaField(\n            description=\"Error message if the summary cannot be retrieved\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\\n    summary: str = SchemaField(description=\"The summary of the given topic\")\\n    error: str = SchemaField(description=\"Error message if the summary cannot be retrieved\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GetWikipediaSummaryBlock(Block, GetRequest):\n\n        )\n\n        )\n\n        yield \"summary\", response[\"extract\"]\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GetWikipediaSummaryBlock(Block, GetRequest):\ndef process(self, inputs):\n    params = self.get_params(inputs)\n    try:\n        response = self.make_request(params)\n    except Exception as e:\n        self.logger.error(f\"Request failed: {e}\")\n    finally:\n        self.cleanup()",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "    yield \"summary\", response[\"extract\"]",
          "successors": []
        }
      ]
    },
    {
      "name": "GetWeatherInformationBlock",
      "type": "class",
      "start_line": 63,
      "end_line": 130,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 91,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\n            input_schema=GetWeatherInformationBlock.Input,\n            output_schema=GetWeatherInformationBlock.Output,\n            description=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\n            test_input={\n                \"location\": \"New York\",\n                \"use_celsius\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"temperature\", \"21.66\"),\n                (\"humidity\", \"32\"),\n                (\"condition\", \"overcast clouds\"),\n            ],\n            test_mock={\n                \"get_request\": lambda url, json: {\n                    \"main\": {\"temp\": 21.66, \"humidity\": 32},\n                    \"weather\": [{\"description\": \"overcast clouds\"}],\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 116,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        units = \"metric\" if input_data.use_celsius else \"imperial\"\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\n        weather_data = self.get_request(url, json=True)\n\n        if \"main\" in weather_data and \"weather\" in weather_data:\n            yield \"temperature\", str(weather_data[\"main\"][\"temp\"])\n            yield \"humidity\", str(weather_data[\"main\"][\"humidity\"])\n            yield \"condition\", weather_data[\"weather\"][0][\"description\"]\n        else:\n            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
          "blocks": [
            {
              "id": 1,
              "label": "units = \"metric\" if input_data.use_celsius else \"imperial\"; api_key = credentials.api_key; location = input_data.location; url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"; weather_data = self.get_request(url, json=True)\nif \"main\" in weather_data and \"weather\" in weather_data:\nyield \"temperature\", str(weather_data[\"main\"][\"temp\"]); yield \"humidity\", str(weather_data[\"main\"][\"humidity\"]); yield \"condition\", weather_data[\"weather\"][0][\"description\"]",
              "successors": []
            },
            {
              "id": 3,
              "label": "raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 64,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        location: str = SchemaField(\n            description=\"Location to get weather information for\"\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The OpenWeatherMap integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        use_celsius: bool = SchemaField(\n            default=True,\n            description=\"Whether to use Celsius or Fahrenheit for temperature\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nlocation: str = SchemaField(description=\"Location to get weather information for\")\ncredentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]] = CredentialsField(description=\"The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.\",)\nuse_celsius: bool = SchemaField(default=True, description=\"Whether to use Celsius or Fahrenheit for temperature\",)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 79,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        temperature: str = SchemaField(\n            description=\"Temperature in the specified location\"\n        )\n        humidity: str = SchemaField(description=\"Humidity in the specified location\")\n        condition: str = SchemaField(\n            description=\"Weather condition in the specified location\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the weather information cannot be retrieved\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ntemperature: str = SchemaField(description=\"Temperature in the specified location\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "humidity: str = SchemaField(description=\"Humidity in the specified location\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "condition: str = SchemaField(description=\"Weather condition in the specified location\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "error: str = SchemaField(description=\"Error message if the weather information cannot be retrieved\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GetWeatherInformationBlock(Block, GetRequest):\n        )\n\n        )\n\n        )\n\n            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class GetWeatherInformationBlock(Block, GetRequest):\ndef get_weather_data(self, location):\nresponse = self.send_request(location)\nweather_data = response.json()\nif 'weather' in weather_data and 'temperature' in weather_data:\nreturn weather_data",
          "successors": []
        },
        {
          "id": 7,
          "label": "raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
          "successors": []
        },
        {
          "id": 8,
          "label": "# other logic here if any",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from typing import Literal\nfrom urllib.parse import quote\n\nfrom pydantic import SecretStr\n\nfrom backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\n\n\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"openweathermap\",\n    api_key=SecretStr(\"mock-openweathermap-api-key\"),\n    title=\"Mock OpenWeatherMap API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Literal\nfrom urllib.parse import quote\n\nfrom pydantic import SecretStr\n\nfrom backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"openweathermap\",\n    api_key=SecretStr(\"mock-openweathermap-api-key\"),\n    title=\"Mock OpenWeatherMap API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\nraise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
      "successors": []
    }
  ]
}