{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 277,
  "functions": [
    {
      "name": "error_message",
      "type": "function",
      "start_line": 37,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "def error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'",
      "blocks": [
        {
          "id": 1,
          "label": "def error_message(line_number: int, message: str) -> str:\nline = line_number + 1",
          "successors": [
            {
              "id": 3,
              "label": "return f'(L{line:03d}) {message}'",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_categories_content",
      "type": "function",
      "start_line": 42,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n\n    categories = {}\n    category_line_num = {}\n\n    for line_num, line_content in enumerate(contents):\n\n        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n\n        raw_title = [\n            raw_content.strip() for raw_content in line_content.split('|')[1:-1]\n        ][0]\n\n        title_match = link_re.match(raw_title)\n        if title_match:\n                title = title_match.group(1).upper()\n                categories[category].append(title)\n\n    return (categories, category_line_num)",
      "blocks": [
        {
          "id": 1,
          "label": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\ncategories = {}\ncategory_line_num = {}",
          "successors": [
            {
              "id": 3,
              "label": "for line_num, line_content in enumerate(contents):",
              "successors": [
                {
                  "id": 4,
                  "label": "if line_content.startswith(anchor):",
                  "successors": [
                    {
                      "id": 5,
                      "label": "category = line_content.split(anchor)[1].strip()\ncategories[category] = []\ncategory_line_num[category] = line_num\ncontinue\nreturn (categories, category_line_num)",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "if not line_content.startswith('|') or line_content.startswith('|---'):",
                      "successors": [
                        {
                          "id": 7,
                          "label": "continue\nreturn (categories, category_line_num)",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "raw_title = [\n    raw_content.strip() for raw_content in line_content.split('|')[1:-1]\n][0]\ntitle_match = link_re.match(raw_title)",
                          "successors": [
                            {
                              "id": 10,
                              "label": "if title_match:\ntitle = title_match.group(1).upper()\ncategories[category].append(title)",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "return (categories, category_line_num)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "return (categories, category_line_num)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "return (categories, category_line_num)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "return (categories, category_line_num)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_alphabetical_order",
      "type": "function",
      "start_line": 70,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_alphabetical_order(lines: List[str]) -> List[str]:\n\n    err_msgs = []\n\n    categories, category_line_num = get_categories_content(contents=lines)\n\n    for category, api_list in categories.items():\n        if sorted(api_list) != api_list:\n            err_msg = error_message(\n                category_line_num[category], \n                f'{category} category is not alphabetical order'\n            )\n            err_msgs.append(err_msg)\n    \n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "err_msgs = []\n\ncategories, category_line_num = get_categories_content(contents=lines)",
          "successors": [
            {
              "id": 2,
              "label": "for category, api_list in categories.items():",
              "successors": [
                {
                  "id": 3,
                  "label": "if sorted(api_list) != api_list:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "err_msg = error_message(\n    category_line_num[category], \n    f'{category} category is not alphabetical order'\n)\nerr_msgs.append(err_msg)\nreturn err_msgs",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "return err_msgs",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "return err_msgs",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_title",
      "type": "function",
      "start_line": 87,
      "end_line": 104,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_title(line_num: int, raw_title: str) -> List[str]:\n\n    err_msgs = []\n\n    title_match = link_re.match(raw_title)\n\n    # url should be wrapped in \"[TITLE](LINK)\" Markdown syntax\n    if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\n    else:\n        # do not allow \"... API\" in the entry title\n        title = title_match.group(1)\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\n\n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_title(line_num: int, raw_title: str) -> List[str]:\nerr_msgs = []",
          "successors": [
            {
              "id": 3,
              "label": "title_match = link_re.match(raw_title)\nif not title_match:",
              "successors": [
                {
                  "id": 5,
                  "label": "    err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n    err_msgs.append(err_msg)\nreturn err_msgs",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "else:\n    title = title_match.group(1)\n    if title.upper().endswith(' API'):\n        err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n        err_msgs.append(err_msg)",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return err_msgs",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_description",
      "type": "function",
      "start_line": 107,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_description(line_num: int, description: str) -> List[str]:\n\n    err_msgs = []\n\n    first_char = description[0]\n    if first_char.upper() != first_char:\n        err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)\n\n    last_char = description[-1]\n    if last_char in punctuation:\n        err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)\n\n    desc_length = len(description)\n    if desc_length > max_description_length:\n        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)\n    \n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_description(line_num: int, description: str) -> List[str]:\n\n    err_msgs = []\n\n    first_char = description[0]",
          "successors": [
            {
              "id": 2,
              "label": "if first_char.upper() != first_char:\n    err_msg = error_message(line_num, 'first character of description is not capitalized')\n    err_msgs.append(err_msg)",
              "successors": []
            },
            {
              "id": 4,
              "label": "last_char = description[-1]",
              "successors": [
                {
                  "id": 5,
                  "label": "if last_char in punctuation:\n    err_msg = error_message(line_num, f'description should not end with {last_char}')\n    err_msgs.append(err_msg)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "desc_length = len(description)",
                  "successors": [
                    {
                      "id": 8,
                      "label": "if desc_length > max_description_length:\n    err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n    err_msgs.append(err_msg)",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "return err_msgs",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_auth",
      "type": "function",
      "start_line": 129,
      "end_line": 142,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_auth(line_num: int, auth: str) -> List[str]:\n\n    err_msgs = []\n\n    backtick = '`'\n    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\n\n    if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\n    \n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_auth(line_num: int, auth: str) -> List[str]:\n\n    err_msgs = []\n\n    backtick = '`'",
          "successors": [
            {
              "id": 2,
              "label": "if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\nif auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)",
              "successors": [
                {
                  "id": 4,
                  "label": "return err_msgs",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\nreturn err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_https",
      "type": "function",
      "start_line": 145,
      "end_line": 153,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_https(line_num: int, https: str) -> List[str]:\n\n    err_msgs = []\n\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)\n\n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_https(line_num: int, https: str) -> List[str]:\n\n    err_msgs = []\n\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)",
          "successors": []
        }
      ]
    },
    {
      "name": "check_cors",
      "type": "function",
      "start_line": 156,
      "end_line": 164,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_cors(line_num: int, cors: str) -> List[str]:\n\n    err_msgs = []\n\n    if cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)\n    \n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "err_msgs = []\nif cors not in cors_keys:",
          "successors": [
            {
              "id": 3,
              "label": "    err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n    err_msgs.append(err_msg)\nreturn err_msgs",
              "successors": []
            },
            {
              "id": 4,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_entry",
      "type": "function",
      "start_line": 167,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n\n    err_msgs = [\n        *title_err_msgs,\n        *desc_err_msgs,\n        *auth_err_msgs,\n        *https_err_msgs,\n        *cors_err_msgs\n    ]\n\n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_entry(line_num: int, segments: List[str]) -> List[str]:\nraw_title = segments[index_title]\ndescription = segments[index_desc]\nauth = segments[index_auth]\nhttps = segments[index_https]\ncors = segments[index_cors]",
          "successors": [
            {
              "id": 3,
              "label": "title_err_msgs = check_title(line_num, raw_title)\ndesc_err_msgs = check_description(line_num, description)\nauth_err_msgs = check_auth(line_num, auth)\nhttps_err_msgs = check_https(line_num, https)\ncors_err_msgs = check_cors(line_num, cors)\nerr_msgs = [\n    *title_err_msgs,\n    *desc_err_msgs,\n    *auth_err_msgs,\n    *https_err_msgs,\n    *cors_err_msgs\n]",
              "successors": [
                {
                  "id": 5,
                  "label": "return err_msgs",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_file_format",
      "type": "function",
      "start_line": 192,
      "end_line": 251,
      "functions": [],
      "classes": [],
      "simplified_code": "def check_file_format(lines: List[str]) -> List[str]:\n\n    err_msgs = []\n    category_title_in_index = []\n\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n\n    for line_num, line_content in enumerate(lines):\n\n        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\n            category_title_in_index.append(category_title_match.group(1))\n\n        # check each category for the minimum number of entries\n        if line_content.startswith(anchor):\n            category_match = anchor_re.match(line_content)\n            if category_match:\n                if category_match.group(1) not in category_title_in_index:\n                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)\n            else:\n                err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)\n\n            if num_in_category < min_entries_per_category:\n                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)\n\n            category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue\n\n        # skips lines that we do not care about\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n\n        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\n            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)\n            continue\n    \n        for segment in segments:\n            # every line segment should start and end with exactly 1 space\n            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)\n        \n        segments = [segment.strip() for segment in segments]\n        entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)\n    \n    return err_msgs",
      "blocks": [
        {
          "id": 1,
          "label": "def check_file_format(lines: List[str]) -> List[str]:\n\n    err_msgs = []\n    category_title_in_index = []\n\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n",
          "successors": [
            {
              "id": 3,
              "label": "for line_num, line_content in enumerate(lines):",
              "successors": [
                {
                  "id": 4,
                  "label": "\n        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "\n        if line_content.startswith(anchor):",
                  "successors": [
                    {
                      "id": 7,
                      "label": "\n            category_match = anchor_re.match(line_content)\n            if category_match:\nif category_match.group(1) not in category_title_in_index:",
                      "successors": [
                        {
                          "id": 9,
                          "label": "err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "else:\nerr_msg = error_message(line_num, 'category header is not formatted correctly')\nerr_msgs.append(err_msg)",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "\n            if num_in_category < min_entries_per_category:\nerr_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "label": "category = line_content.split(' ')[1]\ncategory_line = line_num\nnum_in_category = 0\ncontinue",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 14,
                  "label": "\n        if not line_content.startswith('|') or line_content.startswith('|---'):\ncontinue",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "\n        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\nerr_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "\n        for segment in segments:",
                  "successors": [
                    {
                      "id": 19,
                      "label": "if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\nerr_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 21,
                  "label": "segments = [segment.strip() for segment in segments]\nentry_err_msgs = check_entry(line_num, segments)\nerr_msgs.extend(entry_err_msgs)\n",
                  "successors": []
                }
              ]
            },
            {
              "id": 22,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 254,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": "def main(filename: str) -> None:\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list(line.rstrip() for line in file)\n\n    file_format_err_msgs = check_file_format(lines)\n\n    if file_format_err_msgs:\n        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)",
      "blocks": [
        {
          "id": 1,
          "label": "def main(filename: str) -> None:\nwith open(filename, mode='r', encoding='utf-8') as file:\n    lines = list(line.rstrip() for line in file)",
          "successors": [
            {
              "id": 3,
              "label": "file_format_err_msgs = check_file_format(lines)\nif file_format_err_msgs:",
              "successors": [
                {
                  "id": 5,
                  "label": "for err_msg in file_format_err_msgs:\n    print(err_msg)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "sys.exit(1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\n\n# Temporary replacement\n# The descriptions that contain () at the end must adapt to the new policy later\npunctuation = punctuation.replace('()', '')\n\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\n\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\n\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\n\nanchor_re = re.compile(anchor + '\\s(.+)')\ncategory_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')\nlink_re = re.compile('\\[(.+)\\]\\((http.*)\\)')\n\n# Type aliases\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]\n\n\n    return f'(L{line:03d}) {message}'\n\n\n    return (categories, category_line_num)\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n    return err_msgs\n\n\n        sys.exit(1)\n\n\nif __name__ == '__main__':\n\n    num_args = len(sys.argv)\n\n    if num_args < 2:\n        print('No .md file passed (file should contain Markdown table syntax)')\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename)",
  "blocks": [
    {
      "id": 1,
      "label": "import re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\npunctuation = punctuation.replace('()', '')\n\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\n\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\n\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\n\nanchor_re = re.compile(anchor + '\\s(.+)')\ncategory_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')\nlink_re = re.compile('\\[(.+)\\]\\((http.*)\\)'\n\n# Type aliases\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]",
      "successors": [
        {
          "id": 3,
          "label": "if __name__ == '__main__':\n    num_args = len(sys.argv)\n\n    if num_args < 2:\n        print('No .md file passed (file should contain Markdown table syntax)')\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename)",
          "successors": []
        }
      ]
    }
  ]
}