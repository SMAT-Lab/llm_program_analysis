{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 436,
  "functions": [
    {
      "name": "get_image",
      "type": "function",
      "start_line": 42,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_image():\n    url = faker.image_url()\n    while \"placekitten.com\" in url:\n        url = faker.image_url()\n    return url",
      "blocks": [
        {
          "id": 1,
          "label": "def get_image():\nurl = faker.image_url()",
          "successors": [
            {
              "id": 3,
              "label": "while \"placekitten.com\" in url:",
              "successors": [
                {
                  "id": 4,
                  "label": "    url = faker.image_url()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while \"placekitten.com\" in url:",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "return url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 49,
      "end_line": 432,
      "functions": [],
      "classes": [],
      "simplified_code": "async def main():\n    db = Prisma()\n    await db.connect()\n\n    # Insert Users\n    print(f\"Inserting {NUM_USERS} users\")\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)\n\n    # Insert AgentBlocks\n    agent_blocks = []\n    print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)\n\n    # Insert AgentGraphs\n    agent_graphs = []\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")\n    for user in users:\n        for _ in range(\n            random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)\n        ):  # Adjust the range to create more graphs per user if desired\n            graph = await db.agentgraph.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"isActive\": True,\n                    \"isTemplate\": False,\n                }\n            )\n            agent_graphs.append(graph)\n\n    # Insert AgentNodes\n    agent_nodes = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\"\n    )\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):  # Create 5 AgentNodes per graph\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(\n                data={\n                    \"agentBlockId\": block.id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": \"{}\",\n                    \"metadata\": \"{}\",\n                }\n            )\n            agent_nodes.append(node)\n\n    # Insert AgentPresets\n    agent_presets = []\n    print(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):  # Create 1 AgentPreset per user\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"isActive\": True,\n                }\n            )\n            agent_presets.append(preset)\n\n    # Insert UserAgents\n    user_agents = []\n    print(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):  # Create 1 UserAgent per user\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(\n                data={\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"agentPresetId\": preset.id,\n                    \"isFavorite\": random.choice([True, False]),\n                    \"isCreatedByUser\": random.choice([True, False]),\n                    \"isArchived\": random.choice([True, False]),\n                    \"isDeleted\": random.choice([True, False]),\n                }\n            )\n            user_agents.append(user_agent)\n\n    # Insert AgentGraphExecutions\n    # Insert AgentGraphExecutions\n    agent_graph_executions = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\"\n    )\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(\n            MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH\n        )\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = (\n                random.choice(matching_presets)\n                if matching_presets and random.random() < 0.5\n                else None\n            )\n\n            graph_execution_data.append(\n                {\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"userId\": user.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"startedAt\": faker.date_time_this_year(),\n                    \"agentPresetId\": preset.id if preset else None,\n                }\n            )\n\n    agent_graph_executions = await db.agentgraphexecution.create_many(\n        data=graph_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n\n    # Insert AgentNodeExecutions\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\"\n    )\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [\n            node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n        ]\n        for node in nodes:\n            node_execution_data.append(\n                {\n                    \"agentGraphExecutionId\": execution.id,\n                    \"agentNodeId\": node.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"addedTime\": datetime.now(),\n                }\n            )\n\n    agent_node_executions = await db.agentnodeexecution.create_many(\n        data=node_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_node_executions = await db.agentnodeexecution.find_many()\n\n    # Insert AgentNodeExecutionInputOutput\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\"\n    )\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        # Input data\n        input_output_data.append(\n            {\n                \"name\": \"input1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByInputExecId\": node_execution.id,\n            }\n        )\n        # Output data\n        input_output_data.append(\n            {\n                \"name\": \"output1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByOutputExecId\": node_execution.id,\n            }\n        )\n\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n\n    # Insert AgentNodeLinks\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(\n                data={\n                    \"agentNodeSourceId\": source_node.id,\n                    \"sourceName\": \"output1\",\n                    \"agentNodeSinkId\": sink_node.id,\n                    \"sinkName\": \"input1\",\n                    \"isStatic\": False,\n                }\n            )\n\n    # Insert AnalyticsDetails\n    print(f\"Inserting {NUM_USERS} analytics details\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(\n                data={\n                    \"userId\": user.id,\n                    \"type\": faker.word(),\n                    \"data\": prisma.Json({}),\n                    \"dataIndex\": faker.word(),\n                }\n            )\n\n    # Insert AnalyticsMetrics\n    print(f\"Inserting {NUM_USERS} analytics metrics\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(\n                data={\n                    \"userId\": user.id,\n                    \"analyticMetric\": faker.word(),\n                    \"value\": random.uniform(0, 100),\n                    \"dataString\": faker.word(),\n                }\n            )\n\n    # Insert CreditTransaction (formerly UserBlockCredit)\n    print(f\"Inserting {NUM_USERS} credit transactions\")\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(\n                data={\n                    \"transactionKey\": str(faker.uuid4()),\n                    \"userId\": user.id,\n                    \"blockId\": block.id,\n                    \"amount\": random.randint(1, 100),\n                    \"type\": (\n                        prisma.enums.CreditTransactionType.TOP_UP\n                        if random.random() < 0.5\n                        else prisma.enums.CreditTransactionType.USAGE\n                    ),\n                    \"metadata\": prisma.Json({}),\n                }\n            )\n\n    # Insert Profiles\n    profiles = []\n    print(f\"Inserting {NUM_USERS} profiles\")\n    for user in users:\n        profile = await db.profile.create(\n            data={\n                \"userId\": user.id,\n                \"name\": user.name or faker.name(),\n                \"username\": faker.unique.user_name(),\n                \"description\": faker.text(),\n                \"links\": [faker.url() for _ in range(3)],\n                \"avatarUrl\": get_image(),\n            }\n        )\n        profiles.append(profile)\n\n    # Insert StoreListings\n    store_listings = []\n    print(f\"Inserting {NUM_USERS} store listings\")\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"owningUserId\": user.id,\n                \"isApproved\": random.choice([True, False]),\n            }\n        )\n        store_listings.append(listing)\n\n    # Insert StoreListingVersions\n    store_listing_versions = []\n    print(f\"Inserting {NUM_USERS} store listing versions\")\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"slug\": faker.slug(),\n                \"name\": graph.name or faker.sentence(nb_words=3),\n                \"subHeading\": faker.sentence(),\n                \"videoUrl\": faker.url(),\n                \"imageUrls\": [get_image() for _ in range(3)],\n                \"description\": faker.text(),\n                \"categories\": [faker.word() for _ in range(3)],\n                \"isFeatured\": random.choice([True, False]),\n                \"isAvailable\": True,\n                \"isApproved\": random.choice([True, False]),\n                \"storeListingId\": listing.id,\n            }\n        )\n        store_listing_versions.append(version)\n\n    # Insert StoreListingReviews\n    print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\n    for version in store_listing_versions:\n        # Create a copy of users list and shuffle it to avoid duplicates\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n\n        # Limit number of reviews to available unique reviewers\n        num_reviews = min(\n            random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n            len(available_reviewers),\n        )\n\n        # Take only the first num_reviews reviewers\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(\n                data={\n                    \"storeListingVersionId\": version.id,\n                    \"reviewByUserId\": reviewer.id,\n                    \"score\": random.randint(1, 5),\n                    \"comments\": faker.text(),\n                }\n            )\n\n    # Insert StoreListingSubmissions\n    print(f\"Inserting {NUM_USERS} store listing submissions\")\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice(\n            [\n                prisma.enums.SubmissionStatus.PENDING,\n                prisma.enums.SubmissionStatus.APPROVED,\n                prisma.enums.SubmissionStatus.REJECTED,\n            ]\n        )\n        await db.storelistingsubmission.create(\n            data={\n                \"storeListingId\": listing.id,\n                \"storeListingVersionId\": version.id,\n                \"reviewerId\": reviewer.id,\n                \"Status\": status,\n                \"reviewComments\": faker.text(),\n            }\n        )\n\n    # Insert APIKeys\n    print(f\"Inserting {NUM_USERS} api keys\")\n    for user in users:\n        await db.apikey.create(\n            data={\n                \"name\": faker.word(),\n                \"prefix\": str(faker.uuid4())[:8],\n                \"postfix\": str(faker.uuid4())[-8:],\n                \"key\": str(faker.sha256()),\n                \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n                \"permissions\": [\n                    prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n                    prisma.enums.APIKeyPermission.READ_GRAPH,\n                ],\n                \"description\": faker.text(),\n                \"userId\": user.id,\n            }\n        )\n\n    await db.disconnect()",
      "blocks": [
        {
          "id": 1,
          "label": "async def main():\ndb = Prisma()\nawait db.connect()",
          "successors": [
            {
              "id": 3,
              "label": "print(f\"Inserting {NUM_USERS} users\")\nusers = []",
              "successors": [
                {
                  "id": 4,
                  "label": "for _ in range(NUM_USERS):",
                  "successors": [
                    {
                      "id": 5,
                      "label": "user = await db.user.create(\n    data={\n        \"id\": str(faker.uuid4()),\n        \"email\": faker.unique.email(),\n        \"name\": faker.name(),\n        \"metadata\": prisma.Json({}),\n        \"integrations\": \"\",\n    }\n)\nusers.append(user)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "agent_blocks = []\nprint(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")",
                  "successors": [
                    {
                      "id": 7,
                      "label": "for _ in range(NUM_AGENT_BLOCKS):",
                      "successors": [
                        {
                          "id": 8,
                          "label": "block = await db.agentblock.create(\n    data={\n        \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n        \"inputSchema\": \"{}\",\n        \"outputSchema\": \"{}\",\n    }\n)\nagent_blocks.append(block)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "agent_graphs = []\nprint(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")",
                      "successors": [
                        {
                          "id": 10,
                          "label": "for user in users:",
                          "successors": [
                            {
                              "id": 11,
                              "label": "for _ in range(random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)):\n    graph = await db.agentgraph.create(\n        data={\n            \"name\": faker.sentence(nb_words=3),\n            \"description\": faker.text(max_nb_chars=200),\n            \"userId\": user.id,\n            \"isActive\": True,\n            \"isTemplate\": False,\n        }\n    )\n    agent_graphs.append(graph)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "label": "agent_nodes = []\nprint(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\")",
                          "successors": [
                            {
                              "id": 13,
                              "label": "for graph in agent_graphs:",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\nfor _ in range(num_nodes):\n    block = random.choice(agent_blocks)\n    node = await db.agentnode.create(\n        data={\n            \"agentBlockId\": block.id,\n            \"agentGraphId\": graph.id,\n            \"agentGraphVersion\": graph.version,\n            \"constantInput\": \"{}\",\n            \"metadata\": \"{}\",\n        }\n    )\n    agent_nodes.append(node)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 15,
                              "label": "agent_presets = []\nprint(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "for user in users:",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\nfor _ in range(num_presets):\n    graph = random.choice(agent_graphs)\n    preset = await db.agentpreset.create(\n        data={\n            \"name\": faker.sentence(nb_words=3),\n            \"description\": faker.text(max_nb_chars=200),\n            \"userId\": user.id,\n            \"agentId\": graph.id,\n            \"agentVersion\": graph.version,\n            \"isActive\": True,\n        }\n    )\n    agent_presets.append(preset)",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 18,
                                  "label": "user_agents = []\nprint(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")",
                                  "successors": [
                                    {
                                      "id": 19,
                                      "label": "for user in users:",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\nfor _ in range(num_agents):\n    graph = random.choice(agent_graphs)\n    preset = random.choice(agent_presets)\n    user_agent = await db.useragent.create(\n        data={\n            \"userId\": user.id,\n            \"agentId\": graph.id,\n            \"agentVersion\": graph.version,\n            \"agentPresetId\": preset.id,\n            \"isFavorite\": random.choice([True, False]),\n            \"isCreatedByUser\": random.choice([True, False]),\n            \"isArchived\": random.choice([True, False]),\n            \"isDeleted\": random.choice([True, False]),\n        }\n    )\n    user_agents.append(user_agent)",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 21,
                                      "label": "agent_graph_executions = []\nprint(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\")\ngraph_execution_data = []",
                                      "successors": [
                                        {
                                          "id": 22,
                                          "label": "for graph in agent_graphs:",
                                          "successors": [
                                            {
                                              "id": 23,
                                              "label": "user = random.choice(users)\nnum_executions = random.randint(MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH)\nfor _ in range(num_executions):\n    matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n    preset = (\n        random.choice(matching_presets)\n        if matching_presets and random.random() < 0.5\n        else None\n    )\n\n    graph_execution_data.append(\n        {\n            \"agentGraphId\": graph.id,\n            \"agentGraphVersion\": graph.version,\n            \"userId\": user.id,\n            \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n            \"startedAt\": faker.date_time_this_year(),\n            \"agentPresetId\": preset.id if preset else None,\n        }\n    )",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 24,
                                          "label": "agent_graph_executions = await db.agentgraphexecution.create_many(\n    data=graph_execution_data\n)\nagent_graph_executions = await db.agentgraphexecution.find_many()\nprint(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\")\nnode_execution_data = []",
                                          "successors": [
                                            {
                                              "id": 26,
                                              "label": "for execution in agent_graph_executions:",
                                              "successors": [
                                                {
                                                  "id": 27,
                                                  "label": "nodes = [\n    node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n]\nfor node in nodes:\n    node_execution_data.append(\n        {\n            \"agentGraphExecutionId\": execution.id,\n            \"agentNodeId\": node.id,\n            \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n            \"addedTime\": datetime.now(),\n        }\n    )",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 28,
                                              "label": "agent_node_executions = await db.agentnodeexecution.create_many(data=node_execution_data)\nagent_node_executions = await db.agentnodeexecution.find_many()\nprint(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\")\ninput_output_data = []",
                                              "successors": [
                                                {
                                                  "id": 30,
                                                  "label": "for node_execution in agent_node_executions:",
                                                  "successors": [
                                                    {
                                                      "id": 31,
                                                      "label": "input_output_data.append(\n    {\n        \"name\": \"input1\",\n        \"data\": \"{}\",\n        \"time\": datetime.now(),\n        \"referencedByInputExecId\": node_execution.id,\n    }\n)\ninput_output_data.append(\n    {\n        \"name\": \"output1\",\n        \"data\": \"{}\",\n        \"time\": datetime.now(),\n        \"referencedByOutputExecId\": node_execution.id,\n    }\n)",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 32,
                                                  "label": "await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)",
                                                  "successors": [
                                                    {
                                                      "id": 33,
                                                      "label": "print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\nfor graph in agent_graphs:\nnodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\nif len(nodes) >= 2:\n    source_node = nodes[0]\n    sink_node = nodes[1]\n    await db.agentnodelink.create(\n        data={\n            \"agentNodeSourceId\": source_node.id,\n            \"sourceName\": \"output1\",\n            \"agentNodeSinkId\": sink_node.id,\n            \"sinkName\": \"input1\",\n            \"isStatic\": False,\n        }\n    )",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 35,
                                                      "label": "print(f\"Inserting {NUM_USERS} analytics details\")\nfor user in users:",
                                                      "successors": [
                                                        {
                                                          "id": 36,
                                                          "label": "for _ in range(1):\n    await db.analyticsdetails.create(\n        data={\n            \"userId\": user.id,\n            \"type\": faker.word(),\n            \"data\": prisma.Json({}),\n            \"dataIndex\": faker.word(),\n        }\n    )",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 37,
                                                      "label": "print(f\"Inserting {NUM_USERS} analytics metrics\")\nfor user in users:",
                                                      "successors": [
                                                        {
                                                          "id": 38,
                                                          "label": "for _ in range(1):\n    await db.analyticsmetrics.create(\n        data={\n            \"userId\": user.id,\n            \"analyticMetric\": faker.word(),\n            \"value\": random.uniform(0, 100),\n            \"dataString\": faker.word(),\n        }\n    )",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 39,
                                                      "label": "print(f\"Inserting {NUM_USERS} credit transactions\")\nfor user in users:",
                                                      "successors": [
                                                        {
                                                          "id": 40,
                                                          "label": "for _ in range(1):\n    block = random.choice(agent_blocks)\n    await db.credittransaction.create(\n        data={\n            \"transactionKey\": str(faker.uuid4()),\n            \"userId\": user.id,\n            \"blockId\": block.id,\n            \"amount\": random.randint(1, 100),\n            \"type\": (\n                prisma.enums.CreditTransactionType.TOP_UP\n                if random.random() < 0.5\n                else prisma.enums.CreditTransactionType.USAGE\n            ),\n            \"metadata\": prisma.Json({}),\n        }\n    )",
                                                          "successors": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 41,
                                                      "label": "profiles = []\nprint(f\"Inserting {NUM_USERS} profiles\")\nfor user in users:\nprofile = await db.profile.create(\n    data={\n        \"userId\": user.id,\n        \"name\": user.name or faker.name(),\n        \"username\": faker.unique.user_name(),\n        \"description\": faker.text(),\n        \"links\": [faker.url() for _ in range(3)],\n        \"avatarUrl\": get_image(),\n    }\n)\nprofiles.append(profile)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 43,
                                                      "label": "store_listings = []\nprint(f\"Inserting {NUM_USERS} store listings\")\nfor graph in agent_graphs:\nuser = random.choice(users)\nlisting = await db.storelisting.create(\n    data={\n        \"agentId\": graph.id,\n        \"agentVersion\": graph.version,\n        \"owningUserId\": user.id,\n        \"isApproved\": random.choice([True, False]),\n    }\n)\nstore_listings.append(listing)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 45,
                                                      "label": "store_listing_versions = []\nprint(f\"Inserting {NUM_USERS} store listing versions\")\nfor listing in store_listings:\ngraph = [g for g in agent_graphs if g.id == listing.agentId][0]\nversion = await db.storelistingversion.create(\n    data={\n        \"agentId\": graph.id,\n        \"agentVersion\": graph.version,\n        \"slug\": faker.slug(),\n        \"name\": graph.name or faker.sentence(nb_words=3),\n        \"subHeading\": faker.sentence(),\n        \"videoUrl\": faker.url(),\n        \"imageUrls\": [get_image() for _ in range(3)],\n        \"description\": faker.text(),\n        \"categories\": [faker.word() for _ in range(3)],\n        \"isFeatured\": random.choice([True, False]),\n        \"isAvailable\": True,\n        \"isApproved\": random.choice([True, False]),\n        \"storeListingId\": listing.id,\n    }\n)\nstore_listing_versions.append(version)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 47,
                                                      "label": "print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\nfor version in store_listing_versions:\navailable_reviewers = users.copy()\nrandom.shuffle(available_reviewers)\nnum_reviews = min(\n    random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n    len(available_reviewers),\n)\nfor reviewer in available_reviewers[:num_reviews]:\n    await db.storelistingreview.create(\n        data={\n            \"storeListingVersionId\": version.id,\n            \"reviewByUserId\": reviewer.id,\n            \"score\": random.randint(1, 5),\n            \"comments\": faker.text(),\n        }\n    )",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 49,
                                                      "label": "print(f\"Inserting {NUM_USERS} store listing submissions\")\nfor listing in store_listings:\nversion = random.choice(store_listing_versions)\nreviewer = random.choice(users)\nstatus: prisma.enums.SubmissionStatus = random.choice(\n    [\n        prisma.enums.SubmissionStatus.PENDING,\n        prisma.enums.SubmissionStatus.APPROVED,\n        prisma.enums.SubmissionStatus.REJECTED,\n    ]\n)\nawait db.storelistingsubmission.create(\n    data={\n        \"storeListingId\": listing.id,\n        \"storeListingVersionId\": version.id,\n        \"reviewerId\": reviewer.id,\n        \"Status\": status,\n        \"reviewComments\": faker.text(),\n    }\n)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 51,
                                                      "label": "print(f\"Inserting {NUM_USERS} api keys\")\nfor user in users:\nawait db.apikey.create(\n    data={\n        \"name\": faker.word(),\n        \"prefix\": str(faker.uuid4())[:8],\n        \"postfix\": str(faker.uuid4())[-8:],\n        \"key\": str(faker.sha256()),\n        \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n        \"permissions\": [\n            prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n            prisma.enums.APIKeyPermission.READ_GRAPH,\n        ],\n        \"description\": faker.text(),\n        \"userId\": user.id,\n    }\n)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 53,
                                                      "label": "await db.disconnect()",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import asyncio\nimport random\nfrom datetime import datetime\n\nimport prisma.enums\nfrom faker import Faker\nfrom prisma import Prisma\n\nfaker = Faker()\n\n# Constants for data generation limits\n\n# Base entities\nNUM_USERS = 100  # Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n\n# Per-user entities\nMIN_GRAPHS_PER_USER = 1  # Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)\n\n# Per-graph entities\nMIN_NODES_PER_GRAPH = 2  # Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)\n\n# Additional per-user entities\nMIN_PRESETS_PER_USER = 1  # Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)\nMIN_AGENTS_PER_USER = 1  # Each user will have between 1-2 agents\nMAX_AGENTS_PER_USER = 10  # Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)\n\n# Execution and review records\nMIN_EXECUTIONS_PER_GRAPH = 1  # Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n)\nMIN_REVIEWS_PER_VERSION = 1  # Each version will have between 1-3 reviews\nMAX_REVIEWS_PER_VERSION = 5  # Total reviews depends on number of versions created\n\n\n    return url\n\n\n    await db.disconnect()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport random\nfrom datetime import datetime\n\nimport prisma.enums\nfrom faker import Faker\nfrom prisma import Prisma\n\nfaker = Faker()\n\n# Constants for data generation limits\n\n# Base entities\nNUM_USERS = 100  # Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n\n# Per-user entities\nMIN_GRAPHS_PER_USER = 1  # Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)\n\n# Per-graph entities\nMIN_NODES_PER_GRAPH = 2  # Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)\n\n# Additional per-user entities\nMIN_PRESETS_PER_USER = 1  # Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)\nMIN_AGENTS_PER_USER = 1  # Each user will have between 1-2 agents\nMAX_AGENTS_PER_USER = 10  # Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)\n\n# Execution and review records\nMIN_EXECUTIONS_PER_GRAPH = 1  # Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n)\nMIN_REVIEWS_PER_VERSION = 1  # Each version will have between 1-3 reviews\nMAX_REVIEWS_PER_VERSION = 5  # Total reviews depends on number of versions created\n\n\n    return url\n\n\n    await db.disconnect()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "successors": []
    }
  ]
}