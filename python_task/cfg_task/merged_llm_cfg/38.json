{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 746,
  "functions": [
    {
      "name": "get_node",
      "type": "function",
      "start_line": 430,
      "end_line": 435,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_node(node_id: str) -> NodeModel:\n    node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )\n    return NodeModel.from_db(node)",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_node(node_id: str) -> NodeModel:\nnode = await AgentNode.prisma().find_unique_or_raise(where={\"id\": node_id}, include=AGENT_NODE_INCLUDE,)\nreturn NodeModel.from_db(node)",
          "successors": []
        }
      ]
    },
    {
      "name": "set_node_webhook",
      "type": "function",
      "start_line": 438,
      "end_line": 450,
      "functions": [],
      "classes": [],
      "simplified_code": "async def set_node_webhook(node_id: str, webhook_id: str | None) -> NodeModel:\n    node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )\n    if not node:\n        raise ValueError(f\"Node #{node_id} not found\")\n    return NodeModel.from_db(node)",
      "blocks": [
        {
          "id": 1,
          "label": "async def set_node_webhook(node_id: str, webhook_id: str | None) -> NodeModel:\nnode = await AgentNode.prisma().update(where={\"id\": node_id}, data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )\nif not node:\nraise ValueError(f\"Node #{node_id} not found\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "return NodeModel.from_db(node)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graphs",
      "type": "function",
      "start_line": 453,
      "end_line": 490,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graphs(\n    user_id: str,\n    filter_by: Literal[\"active\", \"template\"] | None = \"active\",\n) -> list[GraphModel]:\n    \"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\"userId\": user_id}\n\n    if filter_by == \"active\":\n        where_clause[\"isActive\"] = True\n    elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True\n\n    graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    graph_models = []\n    for graph in graphs:\n        try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue\n\n    return graph_models",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_graphs(user_id: str, filter_by: Literal[\"active\", \"template\"] | None = \"active\") -> list[GraphModel]:\nwhere_clause: AgentGraphWhereInput = {\"userId\": user_id}\nif filter_by == \"active\":\nwhere_clause[\"isActive\"] = True",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "elif filter_by == \"template\":",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "graphs = await AgentGraph.prisma().find_many(where=where_clause, distinct=[\"id\"], order={\"version\": \"desc\"}, include=AGENT_GRAPH_INCLUDE)\ngraph_models = []",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "for graph in graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "except Exception as e:\nlogger.error(f\"Error processing graph {graph.id}: {e}\")\ncontinue",
          "successors": [
            8
          ]
        }
      ]
    },
    {
      "name": "get_executions",
      "type": "function",
      "start_line": 493,
      "end_line": 498,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_executions(user_id: str) -> list[GraphExecution]:\n    executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )\n    return [GraphExecution.from_db(execution) for execution in executions]",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_executions(user_id: str) -> list[GraphExecution]:\nexecutions = await AgentGraphExecution.prisma().find_many(where={\"userId\": user_id}, order={\"createdAt\": \"desc\"},)\nreturn [GraphExecution.from_db(execution) for execution in executions]",
          "successors": []
        }
      ]
    },
    {
      "name": "get_execution",
      "type": "function",
      "start_line": 501,
      "end_line": 505,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_execution(user_id: str, execution_id: str) -> GraphExecution | None:\n    execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )\n    return GraphExecution.from_db(execution) if execution else None",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_execution(user_id: str, execution_id: str) -> GraphExecution | None:\nexecution = await AgentGraphExecution.prisma().find_first(where={\"id\": execution_id, \"userId\": user_id})\nreturn GraphExecution.from_db(execution) if execution else None",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph",
      "type": "function",
      "start_line": 508,
      "end_line": 539,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graph(\n    graph_id: str,\n    version: int | None = None,\n    template: bool = False,\n    user_id: str | None = None,\n    for_export: bool = False,\n) -> GraphModel | None:\n    \"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }\n    if version is not None:\n        where_clause[\"version\"] = version\n    elif not template:\n        where_clause[\"isActive\"] = True\n\n    # TODO: Fix hack workaround to get adding store agents to work\n    if user_id is not None and not template:\n        where_clause[\"userId\"] = user_id\n\n    graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )\n    return GraphModel.from_db(graph, for_export) if graph else None",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_graph(...):\nwhere_clause: AgentGraphWhereInput = {\"id\": graph_id,}\nif version is not None:\nwhere_clause[\"version\"] = version",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "elif not template:",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "where_clause[\"isActive\"] = True\nif user_id is not None and not template:\nwhere_clause[\"userId\"] = user_id",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "graph = await AgentGraph.prisma().find_first(where=where_clause, include=AGENT_GRAPH_INCLUDE, order={\"version\": \"desc\"},)\nreturn GraphModel.from_db(graph, for_export) if graph else None",
          "successors": []
        }
      ]
    },
    {
      "name": "set_graph_active_version",
      "type": "function",
      "start_line": 542,
      "end_line": 564,
      "functions": [],
      "classes": [],
      "simplified_code": "async def set_graph_active_version(graph_id: str, version: int, user_id: str) -> None:\n    # Activate the requested version if it exists and is owned by the user.\n    updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )\n    if updated_count == 0:\n        raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")\n\n    # Deactivate all other versions.\n    await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def set_graph_active_version(graph_id: str, version: int, user_id: str) -> None:\nupdated_count = await AgentGraph.prisma().update_many(data={\"isActive\": True}, where={\"id\": graph_id, \"version\": version, \"userId\": user_id,})\nif updated_count == 0:\nraise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "await AgentGraph.prisma().update_many(data={\"isActive\": False}, where={\"id\": graph_id, \"version\": {\"not\": version}, \"userId\": user_id, \"isActive\": True,})",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_all_versions",
      "type": "function",
      "start_line": 567,
      "end_line": 577,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_graph_all_versions(graph_id: str, user_id: str) -> list[GraphModel]:\n    graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    if not graph_versions:\n        return []\n\n    return [GraphModel.from_db(graph) for graph in graph_versions]",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_graph_all_versions(graph_id: str, user_id: str) -> list[GraphModel]:\ngraph_versions = await AgentGraph.prisma().find_many(where={\"id\": graph_id, \"userId\": user_id}, order={\"version\": \"desc\"}, include=AGENT_GRAPH_INCLUDE,)\nif not graph_versions:\nreturn []",
          "successors": []
        },
        {
          "id": 5,
          "label": "return [GraphModel.from_db(graph) for graph in graph_versions]",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_graph",
      "type": "function",
      "start_line": 580,
      "end_line": 586,
      "functions": [],
      "classes": [],
      "simplified_code": "async def delete_graph(graph_id: str, user_id: str) -> int:\n    entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )\n    if entries_count:\n        logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")\n    return entries_count",
      "blocks": [
        {
          "id": 1,
          "label": "entries_count = await AgentGraph.prisma().delete_many(where={\"id\": graph_id, \"userId\": user_id})\nif entries_count:\nlogger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return entries_count",
          "successors": []
        }
      ]
    },
    {
      "name": "create_graph",
      "type": "function",
      "start_line": 589,
      "end_line": 598,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_graph(graph: Graph, user_id: str) -> GraphModel:\n    async with transaction() as tx:\n        await __create_graph(tx, graph, user_id)\n\n    if created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    ):\n        return created_graph\n\n    raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_graph(graph: Graph, user_id: str) -> GraphModel:\nasync with transaction() as tx:\nawait __create_graph(tx, graph, user_id)\nif created_graph := await get_graph(graph.id, graph.version, graph.is_template, user_id=user_id):\nreturn created_graph",
          "successors": []
        },
        {
          "id": 6,
          "label": "raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
          "successors": []
        }
      ]
    },
    {
      "name": "__create_graph",
      "type": "function",
      "start_line": 601,
      "end_line": 644,
      "functions": [],
      "classes": [],
      "simplified_code": "async def __create_graph(tx, graph: Graph, user_id: str):\n    await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "async def __create_graph(tx, graph: Graph, user_id: str):\nawait AgentGraph.prisma(tx).create(data={...})\nawait asyncio.gather(*[AgentNode.prisma(tx).create({...}) for node in graph.nodes])\nawait asyncio.gather(*[AgentNodeLink.prisma(tx).create({...}) for link in graph.links])",
          "successors": []
        }
      ]
    },
    {
      "name": "make_graph_model",
      "type": "function",
      "start_line": 650,
      "end_line": 673,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_graph_model(creatable_graph: Graph, user_id: str) -> GraphModel:\n    \"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"\n    # Create a new Graph object, inheriting properties from CreatableGraph\n    return GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def make_graph_model(creatable_graph: Graph, user_id: str) -> GraphModel:\nreturn GraphModel(**creatable_graph.model_dump(exclude={\"nodes\"}), user_id=user_id, nodes=[NodeModel(**creatable_node.model_dump(), graph_id=creatable_graph.id, graph_version=creatable_graph.version) for creatable_node in creatable_graph.nodes])",
          "successors": []
        }
      ]
    },
    {
      "name": "fix_llm_provider_credentials",
      "type": "function",
      "start_line": 676,
      "end_line": 746,
      "functions": [],
      "classes": [],
      "simplified_code": "async def fix_llm_provider_credentials():\n    \"\"\"Fix node credentials with provider `llm`\"\"\"\n    from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n    from .user import get_user_integrations\n\n    store = IntegrationCredentialsStore()\n\n    broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )\n    logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")\n\n    user_id: str = \"\"\n    user_integrations = None\n    for node in broken_nodes:\n        if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def fix_llm_provider_credentials():\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom .user import get_user_integrations\nstore = IntegrationCredentialsStore()\nbroken_nodes = await prisma.get_client().query_raw(...)\nlogger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")\nuser_id: str = \"\"\nuser_integrations = None",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "for node in broken_nodes:\nif node[\"user_id\"] != user_id:\nuser_id = node[\"user_id\"]",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "user_integrations = await get_user_integrations(user_id)\nelif not user_integrations:\nraise RuntimeError(f\"Impossible state while processing node {node}\")",
          "successors": []
        },
        {
          "id": 15,
          "label": "node_id: str = node[\"node_id\"]\nnode_preset_input: dict = json.loads(node[\"node_preset_input\"])",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "credentials_meta: dict = node_preset_input[\"credentials\"]\ncredentials = next((c for c in user_integrations.credentials if c.id == credentials_meta[\"id\"]), None)\nif not credentials:",
          "successors": [
            9,
            20
          ]
        },
        {
          "id": 20,
          "label": "if credentials.type != \"api_key\":\nlogger.warning(f\"User {user_id} credentials {credentials.id} with provider 'llm' has invalid type '{credentials.type}'\")",
          "successors": [
            9
          ]
        },
        {
          "id": 22,
          "label": "api_key = credentials.api_key.get_secret_value()\nif api_key.startswith(\"sk-ant-api03-\"):\ncredentials.provider = credentials_meta[\"provider\"] = \"anthropic\"",
          "successors": [
            26
          ]
        },
        {
          "id": 25,
          "label": "elif api_key.startswith(\"sk-\"):",
          "successors": [
            26,
            27
          ]
        },
        {
          "id": 26,
          "label": "credentials.provider = credentials_meta[\"provider\"] = \"openai\"",
          "successors": [
            28
          ]
        },
        {
          "id": 27,
          "label": "elif api_key.startswith(\"gsk_\"):",
          "successors": [
            28,
            29
          ]
        },
        {
          "id": 28,
          "label": "credentials.provider = credentials_meta[\"provider\"] = \"groq\"",
          "successors": [
            30
          ]
        },
        {
          "id": 29,
          "label": "else:",
          "successors": [
            30
          ]
        },
        {
          "id": 30,
          "label": "logger.warning(f\"Could not identify provider from key prefix {api_key[:13]}*****\")",
          "successors": [
            9
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Link",
      "type": "class",
      "start_line": 26,
      "end_line": 45,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 34,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def from_db(link: AgentNodeLink):\nreturn Link(id=link.id, source_name=link.sourceName, source_id=link.agentNodeSourceId, sink_name=link.sinkName, sink_id=link.agentNodeSinkId, is_static=link.isStatic)",
              "successors": []
            }
          ]
        },
        {
          "name": "__hash__",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __hash__(self):\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
          "blocks": [
            {
              "id": 1,
              "label": "def __hash__(self):\nreturn hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Link(BaseDbModel):\n    source_id: str\n    sink_id: str\n    source_name: str\n    sink_name: str\n    is_static: bool = False\n\n    @staticmethod\n        )\n\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
      "blocks": [
        {
          "id": 1,
          "label": "class Link(BaseDbModel):\nsource_id: str\nsink_id: str\nsource_name: str\nsink_name: str\nis_static: bool = False\n@staticmethod\nreturn hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
          "successors": []
        }
      ]
    },
    {
      "name": "Node",
      "type": "class",
      "start_line": 48,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "class Node(BaseDbModel):\n    block_id: str\n    input_default: BlockInput = {}  # dict[input_name, default_value]\n    metadata: dict[str, Any] = {}\n    input_links: list[Link] = []\n    output_links: list[Link] = []\n\n    webhook_id: Optional[str] = None",
      "blocks": [
        {
          "id": 1,
          "label": "class Node(BaseDbModel):\nblock_id: str\ninput_default: BlockInput = {}\nmetadata: dict[str, Any] = {}\ninput_links: list[Link] = []\noutput_links: list[Link] = []\nwebhook_id: Optional[str] = None",
          "successors": []
        }
      ]
    },
    {
      "name": "NodeModel",
      "type": "class",
      "start_line": 58,
      "end_line": 96,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 65,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj",
          "blocks": [
            {
              "id": 1,
              "label": "if not node.AgentBlock:\nraise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "obj = NodeModel(\n id=node.id,\n block_id=node.AgentBlock.id,\n input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n graph_id=node.agentGraphId,\n graph_version=node.agentGraphVersion,\n webhook_id=node.webhookId,\n webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n)\nobj.input_links = [Link.from_db(link) for link in node.Input or []]\nobj.output_links = [Link.from_db(link) for link in node.Output or []]\nreturn obj",
              "successors": []
            }
          ]
        },
        {
          "name": "is_triggered_by_event_type",
          "type": "function",
          "start_line": 82,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    def is_triggered_by_event_type(self, event_type: str) -> bool:\n        if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
          "blocks": [
            {
              "id": 1,
              "label": "if not (block := get_block(self.block_id)):\nraise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "if not block.webhook_config:\nraise TypeError(\"This method can't be used on non-webhook blocks\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "if not block.webhook_config.event_filter_input:\nreturn True",
              "successors": []
            },
            {
              "id": 7,
              "label": "event_filter = self.input_default.get(block.webhook_config.event_filter_input)\nif not event_filter:\nraise ValueError(f\"Event filter is not configured on node #{self.id}\")",
              "successors": []
            },
            {
              "id": 10,
              "label": "return event_type in [block.webhook_config.event_format.format(event=k) for k in event_filter if event_filter[k] is True]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class NodeModel(Node):\n    graph_id: str\n    graph_version: int\n\n    webhook: Optional[Webhook] = None\n\n    @staticmethod\n        return obj\n\n        ]",
      "blocks": [
        {
          "id": 1,
          "label": "class NodeModel(Node):\ngraph_id: str\ngraph_version: int\nwebhook: Optional[Webhook] = None\n@staticmethod\nreturn obj",
          "successors": []
        }
      ]
    },
    {
      "name": "GraphExecution",
      "type": "class",
      "start_line": 103,
      "end_line": 139,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 114,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "now = datetime.now(timezone.utc)\nstart_time = execution.startedAt or execution.createdAt\nend_time = execution.updatedAt or now\nduration = (end_time - start_time).total_seconds()\ntotal_run_time = duration\ntry:\nstats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "except ValueError:",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "stats = {}\nduration = stats.get(\"walltime\", duration)\ntotal_run_time = stats.get(\"nodes_walltime\", total_run_time)\nreturn GraphExecution(...)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class GraphExecution(BaseDbModel):\n    execution_id: str\n    started_at: datetime\n    ended_at: datetime\n    duration: float\n    total_run_time: float\n    status: ExecutionStatus\n    graph_id: str\n    graph_version: int\n\n    @staticmethod\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class GraphExecution(BaseDbModel):\nexecution_id: str\nstarted_at: datetime\nended_at: datetime\nduration: float\ntotal_run_time: float\nstatus: ExecutionStatus\ngraph_id: str\ngraph_version: int\n@staticmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "Graph",
      "type": "class",
      "start_line": 142,
      "end_line": 204,
      "functions": [
        {
          "name": "input_schema",
          "type": "function",
          "start_line": 153,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": "    def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def input_schema(self) -> dict[str, Any]:\nreturn self._generate_schema(AgentInputBlock.Input, [node.input_default for node in self.nodes if (b := get_block(node.block_id)) and b.block_type == BlockType.INPUT and \"name\" in node.input_default],)",
              "successors": []
            }
          ]
        },
        {
          "name": "output_schema",
          "type": "function",
          "start_line": 167,
          "end_line": 177,
          "functions": [],
          "classes": [],
          "simplified_code": "    def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def output_schema(self) -> dict[str, Any]:\nreturn self._generate_schema(AgentOutputBlock.Input, [node.input_default for node in self.nodes if (b := get_block(node.block_id)) and b.block_type == BlockType.OUTPUT and \"name\" in node.input_default],)",
              "successors": []
            }
          ]
        },
        {
          "name": "_generate_schema",
          "type": "function",
          "start_line": 180,
          "end_line": 204,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "def _generate_schema(type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input], data: list[dict]) -> dict[str, Any]:\nprops = []",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for p in data:\ntry:\nprops.append(type_class(**p))\nexcept Exception as e:",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
              "successors": [
                3
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Graph(BaseDbModel):\n    version: int = 1\n    is_active: bool = True\n    is_template: bool = False\n    name: str\n    description: str\n    nodes: list[Node] = []\n    links: list[Link] = []\n\n    @computed_field\n    @property\n        )\n\n    @computed_field\n    @property\n        )\n\n    @staticmethod\n        }",
      "blocks": [
        {
          "id": 1,
          "label": "class Graph(BaseDbModel):\nversion: int = 1\nis_active: bool = True\nis_template: bool = False\nname: str\ndescription: str\nnodes: list[Node] = []\nlinks: list[Link] = []\n@computed_field\n@property\n)\n@computed_field\n@property\n)\n@staticmethod\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "GraphModel",
      "type": "class",
      "start_line": 207,
      "end_line": 409,
      "functions": [
        {
          "name": "starting_nodes",
          "type": "function",
          "start_line": 212,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": "    def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
          "blocks": [
            {
              "id": 1,
              "label": "outbound_nodes = {link.sink_id for link in self.links}\ninput_nodes = {v.id for v in self.nodes if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT}\nreturn [node for node in self.nodes if node.id not in outbound_nodes or node.id in input_nodes]",
              "successors": []
            }
          ]
        },
        {
          "name": "reassign_ids",
          "type": "function",
          "start_line": 225,
          "end_line": 252,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reassign_ids(self, user_id: str, reassign_graph_id: bool = False):\n        \"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()",
          "blocks": [
            {
              "id": 1,
              "label": "id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\nif reassign_graph_id:\nself.id = str(uuid.uuid4())",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "for node in self.nodes:\nnode.id = id_map[node.id]\nfor link in self.links:\nlink.source_id = id_map[link.source_id]\nlink.sink_id = id_map[link.sink_id]",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "for node in self.nodes:\nif node.block_id != AgentExecutorBlock().id:\ncontinue",
              "successors": [
                9
              ]
            },
            {
              "id": 12,
              "label": "node.input_default[\"user_id\"] = user_id\nnode.input_default.setdefault(\"data\", {})\nself.validate_graph()",
              "successors": []
            }
          ]
        },
        {
          "name": "validate_graph",
          "type": "function",
          "start_line": 254,
          "end_line": 409,
          "functions": [
            {
              "name": "sanitize",
              "type": "function",
              "start_line": 255,
              "end_line": 256,
              "functions": [],
              "classes": [],
              "simplified_code": "        def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
              "blocks": [
                {
                  "id": 1,
                  "label": "def sanitize(name):\nreturn name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
                  "successors": []
                }
              ]
            },
            {
              "name": "has_value",
              "type": "function",
              "start_line": 295,
              "end_line": 301,
              "functions": [],
              "classes": [],
              "simplified_code": "            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)",
              "blocks": [
                {
                  "id": 1,
                  "label": "def has_value(name):\nreturn (node is not None and name in node.input_default and node.input_default[name] is not None and str(node.input_default[name]).strip() != '') or (name in input_schema and input_schema[name].default is not None)",
                  "successors": []
                }
              ]
            },
            {
              "name": "is_static_output_block",
              "type": "function",
              "start_line": 324,
              "end_line": 327,
              "functions": [],
              "classes": [],
              "simplified_code": "        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False",
              "blocks": [
                {
                  "id": 1,
                  "label": "def is_static_output_block(nid: str) -> bool:\nbid = node_map[nid].block_id\nb = get_block(bid)\nreturn b.static_output if b else False",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def validate_graph(self, for_run: bool = False):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.\n\n    @staticmethod\n    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )\n\n    @staticmethod\n    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node\n",
          "blocks": [
            {
              "id": 1,
              "label": "def validate_graph(self, for_run: bool = False):\ninput_links = defaultdict(list)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for link in self.links:\ninput_links[link.sink_id].append(link)",
              "successors": [
                3
              ]
            }
          ]
        },
        {
          "name": "from_db",
          "type": "function",
          "start_line": 371,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def from_db(graph: AgentGraph, for_export: bool = False):\nreturn GraphModel(id=graph.id, user_id=graph.userId, version=graph.version, is_active=graph.isActive, is_template=graph.isTemplate, name=graph.name or \"\", description=graph.description or \"\", nodes=[NodeModel.from_db(GraphModel._process_node(node, for_export)) for node in graph.AgentNodes or []], links=list({Link.from_db(link) for node in graph.AgentNodes or [] for link in (node.Input or []) + (node.Output or [])}),)",
              "successors": []
            }
          ]
        },
        {
          "name": "_process_node",
          "type": "function",
          "start_line": 394,
          "end_line": 408,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node",
          "blocks": [
            {
              "id": 1,
              "label": "if for_export:\nif node.constantInput:\nconstant_input = json.loads(node.constantInput, target_type=dict[str, Any])\nconstant_input = GraphModel._hide_node_input_credentials(constant_input)\nnode.constantInput = json.dumps(constant_input)",
              "successors": [
                5
              ]
            },
            {
              "id": 3,
              "label": "return node",
              "successors": []
            },
            {
              "id": 5,
              "label": "node.webhookId = None; node.Webhook = None",
              "successors": [
                3
              ]
            }
          ]
        },
        {
          "name": "_hide_node_input_credentials",
          "type": "function",
          "start_line": 411,
          "end_line": 424,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
          "blocks": [
            {
              "id": 1,
              "label": "sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\nresult = {}",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for key, value in input_data.items():\nif isinstance(value, dict):\nresult[key] = GraphModel._hide_node_input_credentials(value)",
              "successors": [
                8
              ]
            },
            {
              "id": 6,
              "label": "elif isinstance(value, str) and any(sensitive_key in key.lower() for sensitive_key in sensitive_keys):\ncontinue",
              "successors": [
                3
              ]
            },
            {
              "id": 8,
              "label": "else:",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "result[key] = value",
              "successors": [
                3
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class GraphModel(Graph):\n    user_id: str\n    nodes: list[NodeModel] = []  # type: ignore\n\n    @property\n        ]\n\n        self.validate_graph()\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GraphModel(Graph):\nuser_id: str\nnodes: list[NodeModel] = []\n@property\ndef validate_graph(self):\nif not self.nodes:\nraise ValueError('Graph must have at least one node')",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "for node in self.nodes:\nif not node.validate():",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "self.validate_graph()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import asyncio\nimport logging\nimport uuid\nfrom collections import defaultdict\nfrom datetime import datetime, timezone\nfrom typing import Any, Literal, Optional, Type\n\nimport prisma\nfrom prisma.models import AgentGraph, AgentGraphExecution, AgentNode, AgentNodeLink\nfrom prisma.types import AgentGraphWhereInput\nfrom pydantic.fields import computed_field\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock\nfrom backend.util import json\n\nfrom .block import BlockInput, BlockType, get_block, get_blocks\nfrom .db import BaseDbModel, transaction\nfrom .execution import ExecutionStatus\nfrom .includes import AGENT_GRAPH_INCLUDE, AGENT_NODE_INCLUDE\nfrom .integrations import Webhook\n\nlogger = logging.getLogger(__name__)\n\n\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))\n\n\n    webhook_id: Optional[str] = None\n\n\n        ]\n\n\n# Fix 2-way reference Node <-> Webhook\nWebhook.model_rebuild()\n\n\n        )\n\n\n        }\n\n\n\n    @staticmethod\n    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result\n\n\n# --------------------- CRUD functions --------------------- #\n\n\n    return NodeModel.from_db(node)\n\n\n    return NodeModel.from_db(node)\n\n\n    return graph_models\n\n\n    return [GraphExecution.from_db(execution) for execution in executions]\n\n\n    return GraphExecution.from_db(execution) if execution else None\n\n\n    return GraphModel.from_db(graph, for_export) if graph else None\n\n\n    )\n\n\n    return [GraphModel.from_db(graph) for graph in graph_versions]\n\n\n    return entries_count\n\n\n    raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\n    )\n\n\n# ------------------------ UTILITIES ------------------------ #\n\n\n    )\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import statements\nlogger = logging.getLogger(__name__)\nreturn hash((self.source_id, self.sink_id, self.source_name, self.sink_name))\nwebhook_id: Optional[str] = None\nWebhook.model_rebuild()\n@staticmethod\ndef _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\nsensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\nresult = {}",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "for key, value in input_data.items():\nif isinstance(value, dict):\nresult[key] = GraphModel._hide_node_input_credentials(value)",
      "successors": [
        10
      ]
    },
    {
      "id": 13,
      "label": "elif isinstance(value, str) and any(sensitive_key in key.lower() for sensitive_key in sensitive_keys):",
      "successors": [
        10
      ]
    },
    {
      "id": 14,
      "label": "else:\nresult[key] = value",
      "successors": [
        10
      ]
    }
  ]
}