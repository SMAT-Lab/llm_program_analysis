{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 116,
  "functions": [
    {
      "name": "get_environment_variables",
      "type": "function",
      "start_line": 11,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)",
      "blocks": [
        {
          "id": 1,
          "label": "def get_environment_variables() -> Tuple[str, str, str, str, str]:",
          "successors": [
            {
              "id": 2,
              "label": "try:\nwith open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:",
              "successors": [
                {
                  "id": 4,
                  "label": "event = json.load(f)\nif \"pull_request\" in event:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "sha = event[\"pull_request\"][\"head\"][\"sha\"]\nreturn (\n    os.environ[\"GITHUB_API_URL\"],\n    os.environ[\"GITHUB_REPOSITORY\"],\n    sha,\n    os.environ[\"GITHUB_TOKEN\"],\n    os.environ[\"GITHUB_RUN_ID\"],\n)",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "sha = os.environ[\"GITHUB_SHA\"]\nreturn (\n    os.environ[\"GITHUB_API_URL\"],\n    os.environ[\"GITHUB_REPOSITORY\"],\n    sha,\n    os.environ[\"GITHUB_TOKEN\"],\n    os.environ[\"GITHUB_RUN_ID\"],\n)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "label": "except KeyError as e:\nprint(f\"Error: Missing required environment variable or event data: {e}\")",
              "successors": [
                {
                  "id": 11,
                  "label": "sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "make_api_request",
      "type": "function",
      "start_line": 35,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)",
      "blocks": [
        {
          "id": 1,
          "label": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "try:",
              "successors": [
                {
                  "id": 4,
                  "label": "    print(\"Making API request to:\", url)\n    response = requests.get(url, headers=headers, timeout=10)\n    response.raise_for_status()\n    return response.json()",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "except requests.RequestException as e:\n    print(f\"Error: API request failed. {e}\")\n    sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "process_check_runs",
      "type": "function",
      "start_line": 47,
      "end_line": 72,
      "functions": [],
      "classes": [],
      "simplified_code": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n\n    return runs_in_progress, all_others_passed",
      "blocks": [
        {
          "id": 1,
          "label": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n\"\"\"Process check runs and return their status.\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "runs_in_progress = False\nall_others_passed = True",
              "successors": [
                {
                  "id": 4,
                  "label": "for run in check_runs:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if str(run[\"name\"]) != \"Check PR Status\":\nstatus = run[\"status\"]\nconclusion = run[\"conclusion\"]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if status == \"completed\":",
                          "successors": [
                            {
                              "id": 8,
                              "label": "if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\nall_others_passed = False\nprint(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "return runs_in_progress, all_others_passed",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "return runs_in_progress, all_others_passed",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "runs_in_progress = True\nprint(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\nall_others_passed = False\nreturn runs_in_progress, all_others_passed",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")\nreturn runs_in_progress, all_others_passed",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 14,
                  "label": "return runs_in_progress, all_others_passed",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 75,
      "end_line": 112,
      "functions": [],
      "classes": [],
      "simplified_code": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n\n    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n\n        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)\n\n    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
      "blocks": [
        {
          "id": 1,
          "label": "api_url, repo, sha, github_token, current_run_id = get_environment_variables()\nendpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\nheaders = {\n    \"Accept\": \"application/vnd.github.v3+json\",\n}",
          "successors": [
            {
              "id": 3,
              "label": "if github_token:",
              "successors": [
                {
                  "id": 4,
                  "label": "    headers[\"Authorization\"] = f\"token {github_token}\"\nprint(f\"Current run ID: {current_run_id}\")",
                  "successors": [
                    {
                      "id": 6,
                      "label": "while True:",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    data = make_api_request(endpoint, headers)\n    check_runs = data[\"check_runs\"]\n    print(\"Processing check runs...\")\n    print(check_runs)\n    runs_in_progress, all_others_passed = process_check_runs(check_runs)\n    if not runs_in_progress:\n        break\n    print(\n        \"Some check runs are still in progress. \"\n        f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n    )\n    time.sleep(CHECK_INTERVAL)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if all_others_passed:\n    print(\"All other completed check runs have passed. This check passes.\")\n    sys.exit(0)\nelse:\n    print(\"Some check runs have failed or have not completed. This check fails.\")\n    sys.exit(1)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "print(f\"Current run ID: {current_run_id}\")",
                  "successors": [
                    {
                      "id": 6,
                      "label": "while True:",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    data = make_api_request(endpoint, headers)\n    check_runs = data[\"check_runs\"]\n    print(\"Processing check runs...\")\n    print(check_runs)\n    runs_in_progress, all_others_passed = process_check_runs(check_runs)\n    if not runs_in_progress:\n        break\n    print(\n        \"Some check runs are still in progress. \"\n        f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n    )\n    time.sleep(CHECK_INTERVAL)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if all_others_passed:\n    print(\"All other completed check runs have passed. This check passes.\")\n    sys.exit(0)\nelse:\n    print(\"Some check runs have failed or have not completed. This check fails.\")\n    sys.exit(1)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\n\nCHECK_INTERVAL = 30\n\n\n        sys.exit(1)\n\n\n        sys.exit(1)\n\n\n    return runs_in_progress, all_others_passed\n\n\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\n\nCHECK_INTERVAL = 30\n\n\ndef main():\nsys.exit(1)",
      "successors": []
    }
  ]
}