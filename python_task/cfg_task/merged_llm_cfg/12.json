{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 701,
  "functions": [],
  "classes": [
    {
      "name": "GithubListTagsBlock",
      "type": "class",
      "start_line": 18,
      "end_line": 97,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 36,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n            description=\"This block lists all tags for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListTagsBlock.Input,\n            output_schema=GithubListTagsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"tag\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_tags\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\n    super().__init__(\n        id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n        description=\"This block lists all tags for a specified GitHub repository.\",\n        categories={BlockCategory.DEVELOPER_TOOLS},\n        input_schema=GithubListTagsBlock.Input,\n        output_schema=GithubListTagsBlock.Output,\n        test_input={\n            \"repo_url\": \"https://github.com/owner/repo\",\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n        },\n        test_credentials=TEST_CREDENTIALS,\n        test_output=[\n            (\n                \"tag\",\n                {\n                    \"name\": \"v1.0.0\",\n                    \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                },\n            )\n        ],\n        test_mock={\n            \"list_tags\": lambda *args, **kwargs: [\n                {\n                    \"name\": \"v1.0.0\",\n                    \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                }\n            ]\n        },\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_tags",
          "type": "function",
          "start_line": 68,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]\n        return tags",
          "blocks": [
            {
              "id": 1,
              "label": "def list_tags(credentials: GithubCredentials, repo_url: str) -> list[Output.TagItem]:\napi = get_api(credentials)\ntags_url = repo_url + \"/tags\"\nresponse = api.get(tags_url)\ndata = response.json()\nrepo_path = repo_url.replace(\"https://github.com/\", \"\")\ntags: list[GithubListTagsBlock.Output.TagItem] = [\n    {\n        \"name\": tag[\"name\"],\n        \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\"\n    }\n    for tag in data\n]\nreturn tags",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 85,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"tag\", tag) for tag in tags)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\ntags = self.list_tags(credentials, input_data.repo_url)",
              "successors": [
                {
                  "id": 3,
                  "label": "yield from (('tag', tag) for tag in tags)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    repo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 26,
          "end_line": 34,
          "functions": [],
          "classes": [
            {
              "name": "TagItem",
              "type": "class",
              "start_line": 27,
              "end_line": 29,
              "functions": [],
              "classes": [],
              "simplified_code": "        class TagItem(TypedDict):\n            name: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class TagItem(TypedDict):\n    name: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing tags failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nurl: str",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubListTagsBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if listing tags failed\")\n\n        )\n\n    @staticmethod\n        return tags\n\n        yield from ((\"tag\", tag) for tag in tags)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListTagsBlock(Block):\n    error: str = SchemaField(description=\"Error message if listing tags failed\")",
          "successors": [
            {
              "id": 3,
              "label": "    @staticmethod\n        return tags",
              "successors": [
                {
                  "id": 5,
                  "label": "        yield from ((\"tag\", tag) for tag in tags)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListBranchesBlock",
      "type": "class",
      "start_line": 99,
      "end_line": 179,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 118,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n    description=\"This block lists all branches for a specified GitHub repository.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubListBranchesBlock.Input,\n    output_schema=GithubListBranchesBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\n            \"branch\",\n            {\n                \"name\": \"main\",\n                \"url\": \"https://github.com/owner/repo/tree/main\",\n            },\n        )\n    ],\n    test_mock={\n        \"list_branches\": lambda *args, **kwargs: [\n            {\n                \"name\": \"main\",\n                \"url\": \"https://github.com/owner/repo/tree/main\",\n            }\n        ]\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_branches",
          "type": "function",
          "start_line": 150,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n        api = get_api(credentials)\n        branches_url = repo_url + \"/branches\"\n        response = api.get(branches_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n        return branches",
          "blocks": [
            {
              "id": 1,
              "label": "def list_branches(credentials: GithubCredentials, repo_url: str) -> list[Output.BranchItem]:\napi = get_api(credentials)\nbranches_url = repo_url + \"/branches\"\nresponse = api.get(branches_url)\ndata = response.json()\nrepo_path = repo_url.replace(\"https://github.com/\", \"\")",
              "successors": [
                {
                  "id": 3,
                  "label": "branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n    {\n        \"name\": branch[\"name\"],\n        \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\"\n    }\n    for branch in data\n]\nreturn branches",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 167,
          "end_line": 178,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"branch\", branch) for branch in branches)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n    self,\n    input_data: Input,\n    *,\n    credentials: GithubCredentials,\n    **kwargs,\n) -> BlockOutput:\nbranches = self.list_branches(\n    credentials,\n    input_data.repo_url,\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "yield from ((\"branch\", branch) for branch in branches)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 100,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n    repo_url: str = SchemaField(\n        description=\"URL of the GitHub repository\",\n        placeholder=\"https://github.com/owner/repo\",\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 107,
          "end_line": 116,
          "functions": [],
          "classes": [
            {
              "name": "BranchItem",
              "type": "class",
              "start_line": 108,
              "end_line": 110,
              "functions": [],
              "classes": [],
              "simplified_code": "        class BranchItem(TypedDict):\n            name: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class BranchItem(TypedDict):\n    name: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        branch: BranchItem = SchemaField(\n            title=\"Branch\",\n            description=\"Branches with their name and file tree browser URL\",\n        )\n        error: str = SchemaField(description=\"Error message if listing branches failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    url: str",
              "successors": [
                {
                  "id": 3,
                  "label": "branch: BranchItem = SchemaField(title=\"Branch\", description=\"Branches with their name and file tree browser URL\")\nerror: str = SchemaField(description=\"Error message if listing branches failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubListBranchesBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if listing branches failed\")\n\n        )\n\n    @staticmethod\n        return branches\n\n        yield from ((\"branch\", branch) for branch in branches)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListBranchesBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "error: str = SchemaField(description=\"Error message if listing branches failed\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "@staticmethod",
              "successors": [
                {
                  "id": 4,
                  "label": "return branches",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "yield from ((\"branch\", branch) for branch in branches)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListDiscussionsBlock",
      "type": "class",
      "start_line": 181,
      "end_line": 280,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 204,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n    description=\"This block lists recent discussions for a specified GitHub repository.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubListDiscussionsBlock.Input,\n    output_schema=GithubListDiscussionsBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"num_discussions\": 3,\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\n            \"discussion\",\n            {\n                \"title\": \"Discussion 1\",\n                \"url\": \"https://github.com/owner/repo/discussions/1\",\n            },\n        )\n    ],\n    test_mock={\n        \"list_discussions\": lambda *args, **kwargs: [\n            {\n                \"title\": \"Discussion 1\",\n                \"url\": \"https://github.com/owner/repo/discussions/1\",\n            }\n        ]\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_discussions",
          "type": "function",
          "start_line": 237,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n        api = get_api(credentials)\n        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n        data = response.json()\n        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n        return discussions",
          "blocks": [
            {
              "id": 1,
              "label": "def list_discussions(\n    credentials: GithubCredentials, repo_url: str, num_discussions: int\n) -> list[Output.DiscussionItem]:\napi = get_api(credentials)",
              "successors": [
                {
                  "id": 3,
                  "label": "repo_path = repo_url.replace(\"https://github.com/\", \"\")\nowner, repo = repo_path.split(\"/\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\nvariables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "response = api.post(\n    \"https://api.github.com/graphql\",\n    json={\"query\": query, \"variables\": variables},\n)\ndata = response.json()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n    {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n    for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n]\nreturn discussions",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 268,
          "end_line": 278,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )\n        yield from ((\"discussion\", discussion) for discussion in discussions)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\ndiscussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "yield from ((\"discussion\", discussion) for discussion in discussions)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 182,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n    repo_url: str = SchemaField(\n        description=\"URL of the GitHub repository\",\n        placeholder=\"https://github.com/owner/repo\",\n    )\n    num_discussions: int = SchemaField(\n        description=\"Number of discussions to fetch\", default=5\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 192,
          "end_line": 202,
          "functions": [],
          "classes": [
            {
              "name": "DiscussionItem",
              "type": "class",
              "start_line": 193,
              "end_line": 195,
              "functions": [],
              "classes": [],
              "simplified_code": "        class DiscussionItem(TypedDict):\n            title: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class DiscussionItem(TypedDict):\n    title: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nurl: str",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubListDiscussionsBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return discussions\n\n        yield from ((\"discussion\", discussion) for discussion in discussions)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListDiscussionsBlock(Block):\n@staticmethod",
          "successors": [
            {
              "id": 3,
              "label": "return discussions",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubListReleasesBlock",
      "type": "class",
      "start_line": 281,
      "end_line": 357,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 300,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n    description=\"This block lists all releases for a specified GitHub repository.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubListReleasesBlock.Input,\n    output_schema=GithubListReleasesBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\n            \"release\",\n            {\n                \"name\": \"v1.0.0\",\n                \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n            },\n        )\n    ],\n    test_mock={\n        \"list_releases\": lambda *args, **kwargs: [\n            {\n                \"name\": \"v1.0.0\",\n                \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n            }\n        ]\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_releases",
          "type": "function",
          "start_line": 332,
          "end_line": 342,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_releases(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.ReleaseItem]:\n        api = get_api(credentials)\n        releases_url = repo_url + \"/releases\"\n        response = api.get(releases_url)\n        data = response.json()\n        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n        ]\n        return releases",
          "blocks": [
            {
              "id": 1,
              "label": "def list_releases( credentials: GithubCredentials, repo_url: str ) -> list[Output.ReleaseItem]:\napi = get_api(credentials)",
              "successors": [
                {
                  "id": 3,
                  "label": "releases_url = repo_url + \"/releases\"\nresponse = api.get(releases_url)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "data = response.json()\nreleases: list[GithubListReleasesBlock.Output.ReleaseItem] = [ {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data ]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return releases",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 344,
          "end_line": 355,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"release\", release) for release in releases)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nreleases = self.list_releases(credentials, input_data.repo_url)",
              "successors": [
                {
                  "id": 3,
                  "label": "yield from ((\"release\", release) for release in releases)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 282,
          "end_line": 287,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n    repo_url: str = SchemaField(\n        description=\"URL of the GitHub repository\",\n        placeholder=\"https://github.com/owner/repo\",\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 289,
          "end_line": 298,
          "functions": [],
          "classes": [
            {
              "name": "ReleaseItem",
              "type": "class",
              "start_line": 290,
              "end_line": 292,
              "functions": [],
              "classes": [],
              "simplified_code": "        class ReleaseItem(TypedDict):\n            name: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class ReleaseItem(TypedDict):",
                  "successors": [
                    {
                      "id": 2,
                      "label": "    name: str",
                      "successors": []
                    },
                    {
                      "id": 3,
                      "label": "    url: str",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n        error: str = SchemaField(description=\"Error message if listing releases failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    url: str\nrelease: ReleaseItem = SchemaField(\n    title=\"Release\",\n    description=\"Releases with their name and file tree browser URL\",\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "error: str = SchemaField(description=\"Error message if listing releases failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubListReleasesBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if listing releases failed\")\n\n        )\n\n    @staticmethod\n        return releases\n\n        yield from ((\"release\", release) for release in releases)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListReleasesBlock(Block):\n)",
          "successors": [
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if listing releases failed\")\n)",
              "successors": [
                {
                  "id": 5,
                  "label": "@staticmethod\nreturn releases",
                  "successors": [
                    {
                      "id": 7,
                      "label": "yield from ((\"release\", release) for release in releases)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GithubReadFileBlock",
      "type": "class",
      "start_line": 358,
      "end_line": 444,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 385,
          "end_line": 405,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n    description=\"This block reads the content of a specified file from a GitHub repository.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubReadFileBlock.Input,\n    output_schema=GithubReadFileBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"file_path\": \"path/to/file\",\n        \"branch\": \"master\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n        (\"text_content\", \"File content\"),\n        (\"size\", 13),\n    ],\n    test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "read_file",
          "type": "function",
          "start_line": 408,
          "end_line": 425,
          "functions": [],
          "classes": [],
          "simplified_code": "    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()\n\n        if isinstance(content, list):\n            # Multiple entries of different types exist at this path\n            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file\n\n        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")\n\n        return content[\"content\"], content[\"size\"]",
          "blocks": [
            {
              "id": 1,
              "label": "def read_file(credentials: GithubCredentials, repo_url: str, file_path: str, branch: str) -> tuple[str, int]:\napi = get_api(credentials)\ncontent_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\nresponse = api.get(content_url)\ncontent = response.json()",
              "successors": [
                {
                  "id": 3,
                  "label": "if isinstance(content, list):\nif not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n    raise TypeError(\"Not a file\")\ncontent = file",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "if content[\"type\"] != \"file\":\n    raise TypeError(\"Not a file\")",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "return content[\"content\"], content[\"size\"]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 427,
          "end_line": 442,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n        yield \"raw_content\", raw_content\n        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")\n        yield \"size\", size",
          "blocks": [
            {
              "id": 1,
              "label": "def run( self, input_data: Input, *, credentials: GithubCredentials, **kwargs, ) -> BlockOutput:\n    raw_content, size = self.read_file( credentials, input_data.repo_url, input_data.file_path.lstrip(\"/\"), input_data.branch, )",
              "successors": [
                {
                  "id": 3,
                  "label": "    yield \"raw_content\", raw_content\n    yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    yield \"size\", size",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 359,
          "end_line": 373,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        file_path: str = SchemaField(\n            description=\"Path to the file in the repository\",\n            placeholder=\"path/to/file\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch to read from\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "repo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "file_path: str = SchemaField(description=\"Path to the file in the repository\", placeholder=\"path/to/file\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "branch: str = SchemaField(description=\"Branch to read from\", placeholder=\"branch_name\", default=\"master\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 375,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n        error: str = SchemaField(description=\"Error message if the file reading failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ntext_content: str = SchemaField(\n    description=\"Content of the file (decoded as UTF-8 text)\"\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "raw_content: str = SchemaField(\n    description=\"Raw base64-encoded content of the file\"\n)\nsize: int = SchemaField(description=\"The size of the file (in bytes)\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "error: str = SchemaField(description=\"Error message if the file reading failed\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubReadFileBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the file reading failed\")\n\n        )\n\n    @staticmethod\n        return content[\"content\"], content[\"size\"]\n\n        yield \"size\", size\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubReadFileBlock(Block):\nerror: str = SchemaField(description=\"Error message if the file reading failed\")",
          "successors": [
            {
              "id": 3,
              "label": "@staticmethod\nreturn content[\"content\"], content[\"size\"]",
              "successors": [
                {
                  "id": 5,
                  "label": "yield \"size\", size",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GithubReadFolderBlock",
      "type": "class",
      "start_line": 445,
      "end_line": 565,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 478,
          "end_line": 515,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n    description=\"This block reads the content of a specified folder from a GitHub repository.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubReadFolderBlock.Input,\n    output_schema=GithubReadFolderBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"folder_path\": \"path/to/folder\",\n        \"branch\": \"master\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\n            \"file\",\n            {\n                \"name\": \"file1.txt\",\n                \"path\": \"path/to/folder/file1.txt\",\n                \"size\": 1337,\n            },\n        ),\n        (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n    ],\n    test_mock={\n        \"read_folder\": lambda *args, **kwargs: (\n            [\n                {\n                    \"name\": \"file1.txt\",\n                    \"path\": \"path/to/folder/file1.txt\",\n                    \"size\": 1337,\n                }\n            ],\n            [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n        )\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "read_folder",
          "type": "function",
          "start_line": 518,
          "end_line": 547,
          "functions": [],
          "classes": [],
          "simplified_code": "    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n\n        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")\n\n        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]\n\n        return files, dirs",
          "blocks": [
            {
              "id": 1,
              "label": "def read_folder(\n    credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n    api = get_api(credentials)\n    contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n    response = api.get(contents_url)\n    content = response.json()\nif not isinstance(content, list):\n    raise TypeError(\"Not a folder\")",
              "successors": [
                {
                  "id": 3,
                  "label": "files = [\n    GithubReadFolderBlock.Output.FileEntry(\n        name=entry[\"name\"],\n        path=entry[\"path\"],\n        size=entry[\"size\"],\n    )\n    for entry in content\n    if entry[\"type\"] == \"file\"\n]\ndirs = [\n    GithubReadFolderBlock.Output.DirEntry(\n        name=entry[\"name\"],\n        path=entry[\"path\"],\n    )\n    for entry in content\n    if entry[\"type\"] == \"dir\"\n]",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return files, dirs",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 549,
          "end_line": 563,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n        yield from ((\"file\", file) for file in files)\n        yield from ((\"dir\", dir) for dir in dirs)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nfiles, dirs = self.read_folder(credentials, input_data.repo_url, input_data.folder_path.lstrip(\"/\"), input_data.branch)",
              "successors": [
                {
                  "id": 3,
                  "label": "yield from ((\"file\", file) for file in files)\nyield from ((\"dir\", dir) for dir in dirs)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 446,
          "end_line": 460,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    repo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\")\n    folder_path: str = SchemaField(description=\"Path to the folder in the repository\", placeholder=\"path/to/folder\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    branch: str = SchemaField(description=\"Branch name to read from (defaults to master)\", placeholder=\"branch_name\", default=\"master\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 462,
          "end_line": 476,
          "functions": [],
          "classes": [
            {
              "name": "DirEntry",
              "type": "class",
              "start_line": 463,
              "end_line": 465,
              "functions": [],
              "classes": [],
              "simplified_code": "        class DirEntry(TypedDict):\n            name: str\n            path: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class DirEntry(TypedDict):\n    name: str\n    path: str",
                  "successors": []
                }
              ]
            },
            {
              "name": "FileEntry",
              "type": "class",
              "start_line": 467,
              "end_line": 470,
              "functions": [],
              "classes": [],
              "simplified_code": "        class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int",
              "blocks": [
                {
                  "id": 1,
                  "label": "class FileEntry(TypedDict):\n    name: str\n    path: str\n    size: int",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            path: str\n\n            size: int\n\n        file: FileEntry = SchemaField(description=\"Files in the folder\")\n        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    path: str",
              "successors": [
                {
                  "id": 3,
                  "label": "    size: int\nfile: FileEntry = SchemaField(description=\"Files in the folder\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "dir: DirEntry = SchemaField(description=\"Directories in the folder\")\nerror: str = SchemaField(description=\"Error message if reading the folder failed\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubReadFolderBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return files, dirs\n\n        yield from ((\"dir\", dir) for dir in dirs)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubReadFolderBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "",
              "successors": []
            },
            {
              "id": 3,
              "label": "",
              "successors": []
            },
            {
              "id": 4,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubMakeBranchBlock",
      "type": "class",
      "start_line": 566,
      "end_line": 642,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 588,
          "end_line": 606,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n    description=\"This block creates a new branch from a specified source branch.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubMakeBranchBlock.Input,\n    output_schema=GithubMakeBranchBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"new_branch\": \"new_branch_name\",\n        \"source_branch\": \"source_branch_name\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[(\"status\", \"Branch created successfully\")],\n    test_mock={\n        \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "create_branch",
          "type": "function",
          "start_line": 609,
          "end_line": 625,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]\n\n        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n        return \"Branch created successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "def create_branch(\n    credentials: GithubCredentials,\n    repo_url: str,\n    new_branch: str,\n    source_branch: str,\n) -> str:\n    api = get_api(credentials)",
              "successors": [
                {
                  "id": 3,
                  "label": "    ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n    response = api.get(ref_url)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    sha = response.json()[\"object\"][\"sha\"]\n    create_ref_url = repo_url + \"/git/refs\"",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n    response = api.post(create_ref_url, json=data)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    return \"Branch created successfully\"",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 627,
          "end_line": 640,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n        yield \"status\", status",
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n    self,\n    input_data: Input,\n    *,\n    credentials: GithubCredentials,\n    **kwargs,\n) -> BlockOutput:\nstatus = self.create_branch(\n    credentials,\n    input_data.repo_url,\n    input_data.new_branch,\n    input_data.source_branch,\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "yield \"status\", status",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 567,
          "end_line": 580,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    repo_url: str = SchemaField(\n        description=\"URL of the GitHub repository\",\n        placeholder=\"https://github.com/owner/repo\",\n    )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    new_branch: str = SchemaField(\n        description=\"Name of the new branch\",\n        placeholder=\"new_branch_name\",\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    source_branch: str = SchemaField(\n        description=\"Name of the source branch\",\n        placeholder=\"source_branch_name\",\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 582,
          "end_line": 586,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    status: str = SchemaField(description=\"Status of the branch creation operation\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    error: str = SchemaField(description=\"Error message if the branch creation failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubMakeBranchBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Branch created successfully\"\n\n        yield \"status\", status\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubMakeBranchBlock(Block):\n@staticmethod",
          "successors": [
            {
              "id": 3,
              "label": "return \"Branch created successfully\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubDeleteBranchBlock",
      "type": "class",
      "start_line": 643,
      "end_line": 701,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 661,
          "end_line": 678,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n    description=\"This block deletes a specified branch.\",\n    categories={BlockCategory.DEVELOPER_TOOLS},\n    input_schema=GithubDeleteBranchBlock.Input,\n    output_schema=GithubDeleteBranchBlock.Output,\n    test_input={\n        \"repo_url\": \"https://github.com/owner/repo\",\n        \"branch\": \"branch_name\",\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[(\"status\", \"Branch deleted successfully\")],\n    test_mock={\n        \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "delete_branch",
          "type": "function",
          "start_line": 681,
          "end_line": 687,
          "functions": [],
          "classes": [],
          "simplified_code": "    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)\n        return \"Branch deleted successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "def delete_branch(\n    credentials: GithubCredentials, repo_url: str, branch: str\n) -> str:\napi = get_api(credentials)\nref_url = repo_url + f\"/git/refs/heads/{branch}\"\napi.delete(ref_url)\nreturn \"Branch deleted successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 689,
          "end_line": 700,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\nstatus = self.delete_branch(credentials, input_data.repo_url, input_data.branch)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 644,
          "end_line": 653,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    repo_url: str = SchemaField(\n        description=\"URL of the GitHub repository\",\n        placeholder=\"https://github.com/owner/repo\",\n    )\n    branch: str = SchemaField(\n        description=\"Name of the branch to delete\",\n        placeholder=\"branch_name\",\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 655,
          "end_line": 659,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    status: str = SchemaField(description=\"Status of the branch deletion operation\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    error: str = SchemaField(description=\"Error message if the branch deletion failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GithubDeleteBranchBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Branch deleted successfully\"\n\n        )\n        yield \"status\", status",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubDeleteBranchBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "@staticmethod\nreturn \"Branch deleted successfully\"",
              "successors": []
            },
            {
              "id": 4,
              "label": "yield \"status\", status",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import base64\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n\n\n\n\n\n\n\n\n\n        yield \"status\", status",
  "blocks": [
    {
      "id": 1,
      "label": "import base64\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    yield \"status\", status",
      "successors": []
    }
  ]
}