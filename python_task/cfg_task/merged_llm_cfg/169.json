{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 110,
  "functions": [],
  "classes": [
    {
      "name": "CodeExtractionBlock",
      "type": "class",
      "start_line": 7,
      "end_line": 110,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...) # truncated for readability",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 52,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n        # Extract code for each language\n        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text",
          "blocks": [
            {
              "id": 1,
              "label": "language_aliases = {...}",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for canonical_name, aliases in language_aliases.items():\ncode = \"\"",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "for alias in aliases:\ncode_for_alias = self.extract_code(input_data.text, alias)\nif code_for_alias:\ncode = code + \"\\n\\n\" + code_for_alias if code else code_for_alias",
              "successors": [
                9
              ]
            },
            {
              "id": 8,
              "label": "pass  # No operation if code_for_alias is empty",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "# End of inner for loop",
              "successors": [
                4
              ]
            },
            {
              "id": 12,
              "label": "# End of outer for loop",
              "successors": [
                2,
                13
              ]
            },
            {
              "id": 13,
              "label": "pattern = r\"...\"\nremaining_text = re.sub(pattern, \"\", input_data.text).strip()\nremaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\nif remaining_text:\nyield \"remaining_text\", remaining_text",
              "successors": [
                18
              ]
            },
            {
              "id": 18,
              "label": "# End of function",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_code",
          "type": "function",
          "start_line": 102,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
          "blocks": [
            {
              "id": 1,
              "label": "language = re.escape(language)\npattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\nmatches = pattern.finditer(text)\ncode_blocks = [match.group(1).strip() for match in matches]\nreturn \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ntext: str = SchemaField(description=\"Text containing code blocks to extract (e.g., AI response)\", placeholder=\"Enter text containing code blocks\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 14,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nhtml: str = SchemaField(description=\"Extracted HTML code\")\ncss: str = SchemaField(description=\"Extracted CSS code\")\njavascript: str = SchemaField(description=\"Extracted JavaScript code\")\npython: str = SchemaField(description=\"Extracted Python code\")\nsql: str = SchemaField(description=\"Extracted SQL code\")\njava: str = SchemaField(description=\"Extracted Java code\")\ncpp: str = SchemaField(description=\"Extracted C++ code\")\ncsharp: str = SchemaField(description=\"Extracted C# code\")\njson_code: str = SchemaField(description=\"Extracted JSON code\")\nbash: str = SchemaField(description=\"Extracted Bash code\")\nphp: str = SchemaField(description=\"Extracted PHP code\")\nruby: str = SchemaField(description=\"Extracted Ruby code\")\nyaml: str = SchemaField(description=\"Extracted YAML code\")\nmarkdown: str = SchemaField(description=\"Extracted Markdown code\")\ntypescript: str = SchemaField(description=\"Extracted TypeScript code\")\nxml: str = SchemaField(description=\"Extracted XML code\")\nremaining_text: str = SchemaField(description=\"Remaining text after code extraction\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class CodeExtractionBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"remaining_text\", remaining_text\n\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
      "blocks": [
        {
          "id": 1,
          "label": "class CodeExtractionBlock(Block):\n)\n)\n)\nyield 'remaining_text', remaining_text\nreturn '\\n\\n'.join(code_blocks) if code_blocks else ''",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import re\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
  "blocks": [
    {
      "id": 1,
      "label": "import re\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nreturn \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
      "successors": []
    }
  ]
}