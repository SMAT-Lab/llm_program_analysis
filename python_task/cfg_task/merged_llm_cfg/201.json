{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [
    {
      "name": "get_bounds",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest",
      "blocks": [
        {
          "id": 1,
          "label": "lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\nhighest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\nreturn lowest, highest",
          "successors": []
        }
      ]
    },
    {
      "name": "show_frequency_response",
      "type": "function",
      "start_line": 38,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()",
      "blocks": [
        {
          "id": 1,
          "label": "size = 512\ninputs = [1] + [0] * (size - 1)\noutputs = [filter_type.process(item) for item in inputs]\nfiller = [0] * (samplerate - size)\noutputs += filler\nfft_out = np.abs(np.fft.fft(outputs))\nfft_db = 20 * np.log10(fft_out)\nplt.xlim(24, samplerate / 2 - 1)\nplt.xlabel(\"Frequency (Hz)\")\nplt.xscale(\"log\")\nbounds = get_bounds(fft_db, samplerate)\nplt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\nplt.ylabel(\"Gain (dB)\")\nplt.plot(fft_db)\nplt.show()",
          "successors": []
        }
      ]
    },
    {
      "name": "show_phase_response",
      "type": "function",
      "start_line": 70,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "simplified_code": "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
      "blocks": [
        {
          "id": 1,
          "label": "size = 512\ninputs = [1] + [0] * (size - 1)\noutputs = [filter_type.process(item) for item in inputs]\nfiller = [0] * (samplerate - size)\noutputs += filler\nfft_out = np.angle(np.fft.fft(outputs))\nplt.xlim(24, samplerate / 2 - 1)\nplt.xlabel(\"Frequency (Hz)\")\nplt.xscale(\"log\")\nplt.ylim(-2 * pi, 2 * pi)\nplt.ylabel(\"Phase shift (Radians)\")\nplt.plot(np.unwrap(fft_out, -2 * pi))\nplt.show()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "FilterType",
      "type": "class",
      "start_line": 11,
      "end_line": 19,
      "functions": [
        {
          "name": "process",
          "type": "function",
          "start_line": 13,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
          "blocks": [
            {
              "id": 1,
              "label": "def process(self, sample: float) -> float:\n\"\"\"\\nCalculate y[n]\\n\\n>>> issubclass(FilterType, Protocol)\\nTrue\\n\"\"\"",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class FilterType(Protocol):\n    @abstractmethod\n        \"\"\"",
      "blocks": [
        {
          "id": 1,
          "label": "class FilterType(Protocol):\n@abstractmethod\npass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from __future__ import annotations\n\nfrom abc import abstractmethod\nfrom math import pi\nfrom typing import Protocol\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n        \"\"\"\n\n\n    return lowest, highest\n\n\n    plt.show()\n\n\n    plt.show()",
  "blocks": [
    {
      "id": 1,
      "label": "from __future__ import annotations\nfrom abc import abstractmethod\nfrom math import pi\nfrom typing import Protocol\nimport matplotlib.pyplot as plt\nimport numpy as np",
      "successors": []
    }
  ]
}