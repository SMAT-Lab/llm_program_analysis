{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 39,
  "functions": [
    {
      "name": "test_agent_schedule",
      "type": "function",
      "start_line": 12,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_agent_schedule(server: SpinTestServer):\n    await db.connect()\n    test_user = await create_test_user()\n    test_graph = await server.agent_server.test_create_graph(\n        create_graph=CreateGraph(graph=create_test_graph()),\n        user_id=test_user.id,\n    )\n\n    scheduler = get_service_client(ExecutionScheduler)\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 0\n\n    schedule = scheduler.add_execution_schedule(\n        graph_id=test_graph.id,\n        user_id=test_user.id,\n        graph_version=1,\n        cron=\"0 0 * * *\",\n        input_data={\"input\": \"data\"},\n    )\n    assert schedule\n\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 1\n    assert schedules[0].cron == \"0 0 * * *\"\n\n    scheduler.delete_schedule(schedule.id, user_id=test_user.id)\n    schedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)\n    assert len(schedules) == 0",
      "blocks": [
        {
          "id": 1,
          "label": "await db.connect()\ntest_user = await create_test_user()\ntest_graph = await server.agent_server.test_create_graph(create_graph=CreateGraph(graph=create_test_graph()), user_id=test_user.id)\nscheduler = get_service_client(ExecutionScheduler)\nschedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\nassert len(schedules) == 0\nschedule = scheduler.add_execution_schedule(graph_id=test_graph.id, user_id=test_user.id, graph_version=1, cron='0 0 * * *', input_data={'input': 'data'})\nassert schedule\nschedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\nassert len(schedules) == 1\nassert schedules[0].cron == '0 0 * * *'\nscheduler.delete_schedule(schedule.id, user_id=test_user.id)\nschedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)\nassert len(schedules) == 0",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\n\nfrom backend.data import db\nfrom backend.executor import ExecutionScheduler\nfrom backend.server.model import CreateGraph\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.service import get_service_client\nfrom backend.util.test import SpinTestServer\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert len(schedules) == 0",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\nfrom backend.data import db\nfrom backend.executor import ExecutionScheduler\nfrom backend.server.model import CreateGraph\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.service import get_service_client\nfrom backend.util.test import SpinTestServer\n@pytest.mark.asyncio(scope=\"session\")\nasync def test_scheduler():\nserver = SpinTestServer()\nawait server.start()\ndb.init()\nuser = await create_test_user()\nawait create_test_graph(user.id)\nscheduler = ExecutionScheduler()\nschedules = await scheduler.get_schedules()\nassert len(schedules) == 0",
      "successors": []
    }
  ]
}