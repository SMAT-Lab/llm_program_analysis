{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 1125,
  "functions": [
    {
      "name": "AICredentialsField",
      "type": "function",
      "start_line": 56,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": "def AICredentialsField() -> AICredentials:\n    return CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def AICredentialsField() -> AICredentials:\nreturn CredentialsField(description=\"API key for the LLM provider.\", discriminator=\"model\", discriminator_mapping={model.value: model.metadata.provider for model in LlmModel})",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ModelMetadata",
      "type": "class",
      "start_line": 66,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "class ModelMetadata(NamedTuple):\n    provider: str\n    context_window: int",
      "blocks": [
        {
          "id": 1,
          "label": "class ModelMetadata(NamedTuple):\nprovider: str\ncontext_window: int",
          "successors": []
        }
      ]
    },
    {
      "name": "LlmModelMeta",
      "type": "class",
      "start_line": 71,
      "end_line": 87,
      "functions": [
        {
          "name": "__members__",
          "type": "function",
          "start_line": 73,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
          "blocks": [
            {
              "id": 1,
              "label": "if Settings().config.behave_as == BehaveAs.LOCAL:\nmembers = super().__members__\nreturn members",
              "successors": []
            },
            {
              "id": 3,
              "label": "removed_providers = ['ollama']\nexisting_members = super().__members__\nmembers = {name: member\nfor name, member in existing_members.items()\nif LlmModel[name].provider not in removed_providers}\nreturn MappingProxyType(members)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class LlmModelMeta(EnumMeta):\n    @property\n            return MappingProxyType(members)",
      "blocks": [
        {
          "id": 1,
          "label": "class LlmModelMeta(EnumMeta):\n@property\nreturn MappingProxyType(members)",
          "successors": []
        }
      ]
    },
    {
      "name": "LlmModel",
      "type": "class",
      "start_line": 90,
      "end_line": 191,
      "functions": [
        {
          "name": "metadata",
          "type": "function",
          "start_line": 136,
          "end_line": 137,
          "functions": [],
          "classes": [],
          "simplified_code": "    def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]",
          "blocks": [
            {
              "id": 1,
              "label": "def metadata(self) -> ModelMetadata:\nreturn MODEL_METADATA[self]",
              "successors": []
            }
          ]
        },
        {
          "name": "provider",
          "type": "function",
          "start_line": 140,
          "end_line": 141,
          "functions": [],
          "classes": [],
          "simplified_code": "    def provider(self) -> str:\n        return self.metadata.provider",
          "blocks": [
            {
              "id": 1,
              "label": "def provider(self) -> str:\nreturn self.metadata.provider",
              "successors": []
            }
          ]
        },
        {
          "name": "context_window",
          "type": "function",
          "start_line": 144,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": "    def context_window(self) -> int:\n        return self.metadata.context_window",
          "blocks": [
            {
              "id": 1,
              "label": "def context_window(self) -> int:\nreturn self.metadata.context_window",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class LlmModel(str, Enum, metaclass=LlmModelMeta):\n    # OpenAI models\n    O1_PREVIEW = \"o1-preview\"\n    O1_MINI = \"o1-mini\"\n    GPT4O_MINI = \"gpt-4o-mini\"\n    GPT4O = \"gpt-4o\"\n    GPT4_TURBO = \"gpt-4-turbo\"\n    GPT3_5_TURBO = \"gpt-3.5-turbo\"\n    # Anthropic models\n    CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"\n    CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"\n    # Groq models\n    LLAMA3_8B = \"llama3-8b-8192\"\n    LLAMA3_70B = \"llama3-70b-8192\"\n    MIXTRAL_8X7B = \"mixtral-8x7b-32768\"\n    GEMMA_7B = \"gemma-7b-it\"\n    GEMMA2_9B = \"gemma2-9b-it\"\n    # New Groq models (Preview)\n    LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"\n    LLAMA3_1_70B = \"llama-3.1-70b-versatile\"\n    LLAMA3_1_8B = \"llama-3.1-8b-instant\"\n    # Ollama models\n    OLLAMA_LLAMA3_8B = \"llama3\"\n    OLLAMA_LLAMA3_405B = \"llama3.1:405b\"\n    OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"\n    # OpenRouter models\n    GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"\n    GROK_BETA = \"x-ai/grok-beta\"\n    MISTRAL_NEMO = \"mistralai/mistral-nemo\"\n    COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"\n    COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"\n    EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"\n    DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"\n    PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )\n    QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"\n    AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"\n    AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"\n    AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"\n    MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"\n    GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"\n\n    @property\n        return MODEL_METADATA[self]\n\n    @property\n        return self.metadata.provider\n\n    @property\n        return self.metadata.context_window\n\n\nMODEL_METADATA = {\n    LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000),\n    LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000),\n    LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4O: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385),\n    LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192),\n    LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768),\n    LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192),\n    LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192),\n    # Limited to 16k during preview\n    LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072),\n    LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072),\n    LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768),\n    LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192),\n    LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192),\n    LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192),\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    ),\n    LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000),\n}\n\nfor model in LlmModel:\n    if model not in MODEL_METADATA:\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class LlmModel(str, Enum, metaclass=LlmModelMeta):\n['O1_PREVIEW = \"o1-preview\"', 'O1_MINI = \"o1-mini\"', 'GPT4O_MINI = \"gpt-4o-mini\"', 'GPT4O = \"gpt-4o\"', 'GPT4_TURBO = \"gpt-4-turbo\"', 'GPT3_5_TURBO = \"gpt-3.5-turbo\"', 'CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"', 'CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"', 'LLAMA3_8B = \"llama3-8b-8192\"', 'LLAMA3_70B = \"llama3-70b-8192\"', 'MIXTRAL_8X7B = \"mixtral-8x7b-32768\"', 'GEMMA_7B = \"gemma-7b-it\"', 'GEMMA2_9B = \"gemma2-9b-it\"', 'LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"', 'LLAMA3_1_70B = \"llama-3.1-70b-versatile\"', 'LLAMA3_1_8B = \"llama-3.1-8b-instant\"', 'OLLAMA_LLAMA3_8B = \"llama3\"', 'OLLAMA_LLAMA3_405B = \"llama3.1:405b\"', 'OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"', 'GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"', 'GROK_BETA = \"x-ai/grok-beta\"', 'MISTRAL_NEMO = \"mistralai/mistral-nemo\"', 'COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"', 'COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"', 'EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"', 'DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"', 'PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = \"perplexity/llama-3.1-sonar-large-128k-online\"', 'QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"', 'NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"', 'NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"', 'AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"', 'AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"', 'AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"', 'MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"', 'GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"']\n@property\nreturn MODEL_METADATA[self]\n@property\nreturn self.metadata.provider\n@property\nreturn self.metadata.context_window\nMODEL_METADATA = {...}\nfor model in LlmModel:\nif model not in MODEL_METADATA:\nraise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "MessageRole",
      "type": "class",
      "start_line": 194,
      "end_line": 197,
      "functions": [],
      "classes": [],
      "simplified_code": "class MessageRole(str, Enum):\n    SYSTEM = \"system\"\n    USER = \"user\"\n    ASSISTANT = \"assistant\"",
      "blocks": [
        {
          "id": 1,
          "label": "class MessageRole(str, Enum):\nSYSTEM = \"system\"\nUSER = \"user\"\nASSISTANT = \"assistant\"",
          "successors": []
        }
      ]
    },
    {
      "name": "Message",
      "type": "class",
      "start_line": 200,
      "end_line": 202,
      "functions": [],
      "classes": [],
      "simplified_code": "class Message(BlockSchema):\n    role: MessageRole\n    content: str",
      "blocks": [
        {
          "id": 1,
          "label": "class Message(BlockSchema):\nrole: MessageRole\ncontent: str",
          "successors": []
        }
      ]
    },
    {
      "name": "AIStructuredResponseGeneratorBlock",
      "type": "class",
      "start_line": 205,
      "end_line": 552,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 257,
          "end_line": 287,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\", description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\", categories={BlockCategory.AI}, input_schema=AIStructuredResponseGeneratorBlock.Input, output_schema=AIStructuredResponseGeneratorBlock.Output, test_input={\"model\": LlmModel.GPT4_TURBO, \"credentials\": TEST_CREDENTIALS_INPUT, \"expected_format\": {\"key1\": \"value1\", \"key2\": \"value2\"}, \"prompt\": \"User prompt\"}, test_credentials=TEST_CREDENTIALS, test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}), test_mock={\"llm_call\": lambda *args, **kwargs: (json.dumps({\"key1\": \"key1Value\", \"key2\": \"key2Value\"}), 0, 0)})",
              "successors": []
            }
          ]
        },
        {
          "name": "llm_call",
          "type": "function",
          "start_line": 290,
          "end_line": 437,
          "functions": [],
          "classes": [],
          "simplified_code": "    def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
          "blocks": [
            {
              "id": 1,
              "label": "provider = llm_model.metadata.provider\nif provider == \"openai\":\noai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\nresponse_format = None\nif llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\nsys_messages = [p['content'] for p in prompt if p['role'] == 'system']",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "usr_messages = [p['content'] for p in prompt if p['role'] != 'system']\nprompt = [{'role': 'user', 'content': '\\n'.join(sys_messages)}, {'role': 'user', 'content': '\\n'.join(usr_messages)}]",
              "successors": [
                13
              ]
            },
            {
              "id": 9,
              "label": "elif json_format:\nresponse_format = {'type': 'json_object'}",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "elif provider == \"anthropic\":\nsystem_messages = [p['content'] for p in prompt if p['role'] == 'system']\nsysprompt = ' '.join(system_messages)\nmessages = []\nlast_role = None",
              "successors": [
                18
              ]
            },
            {
              "id": 18,
              "label": "for p in prompt:\nif p['role'] in ['user', 'assistant']:\nif p['role'] != last_role:\n    messages.append({'role': p['role'], 'content': p['content']})\n    last_role = p['role']\nelse:\n    messages[-1]['content'] += '\\n' + p['content']",
              "successors": [
                18
              ]
            },
            {
              "id": 21,
              "label": "client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())",
              "successors": [
                22
              ]
            },
            {
              "id": 22,
              "label": "try:\nresp = client.messages.create(model=llm_model.value, system=sysprompt, messages=messages, max_tokens=max_tokens or 8192)\nif not resp.content:\nraise ValueError('No content returned from Anthropic.')",
              "successors": []
            },
            {
              "id": 26,
              "label": "return ((resp.content[0].name if isinstance(resp.content[0], anthropic.types.ToolUseBlock) else resp.content[0].text), resp.usage.input_tokens, resp.usage.output_tokens)",
              "successors": []
            },
            {
              "id": 28,
              "label": "error_message = f\"Anthropic API error: {str(e)}\"\nlogger.error(error_message)\nraise ValueError(error_message)",
              "successors": []
            },
            {
              "id": 31,
              "label": "elif provider == \"groq\":\nclient = Groq(api_key=credentials.api_key.get_secret_value())\nresponse_format = {'type': 'json_object'} if json_format else None\nresponse = client.chat.completions.create(model=llm_model.value, messages=prompt, response_format=response_format, max_tokens=max_tokens)\nreturn (response.choices[0].message.content or '', response.usage.prompt_tokens if response.usage else 0, response.usage.completion_tokens if response.usage else 0)",
              "successors": []
            },
            {
              "id": 41,
              "label": "return (response.get(\"response\") or '', response.get(\"prompt_eval_count\") or 0, response.get(\"eval_count\") or 0)",
              "successors": []
            },
            {
              "id": 49,
              "label": "raise ValueError(f\"Unsupported LLM provider: {provider}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 439,
          "end_line": 552,
          "functions": [],
          "classes": [
            {
              "name": "Input",
              "type": "class",
              "start_line": 206,
              "end_line": 250,
              "functions": [],
              "classes": [],
              "simplified_code": "    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n",
              "blocks": [
                {
                  "id": 1,
                  "label": "class Input(BlockSchema):\nprompt: str = SchemaField(...)\nexpected_format: dict[str, str] = SchemaField(...)\nmodel: LlmModel = SchemaField(...)\ncredentials: AICredentials = AICredentialsField()\nsys_prompt: str = SchemaField(...)\nconversation_history: list[Message] = SchemaField(...)\nretry: int = SchemaField(...)\nprompt_values: dict[str, str] = SchemaField(...)\nmax_tokens: int | None = SchemaField(...)\nollama_host: str = SchemaField(...)",
                  "successors": []
                }
              ]
            },
            {
              "name": "Output",
              "type": "class",
              "start_line": 251,
              "end_line": 255,
              "functions": [],
              "classes": [],
              "simplified_code": "    class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "blocks": [
                {
                  "id": 1,
                  "label": "class Output(BlockSchema):\nresponse: dict[str, Any] = SchemaField(description=\"The response object generated by the language model.\")\nerror: str = SchemaField(description=\"Error message if the API call failed.\")",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)",
          "blocks": [
            {
              "id": 1,
              "label": "logger.debug(f\"Calling LLM with input data: {input_data}\"); prompt = [p.model_dump() for p in input_data.conversation_history]\ndef trim_prompt(s: str) -> str: lines = s.strip().split(\"\\n\") return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\nvalues = input_data.prompt_values; if values:\ninput_data.prompt = input_data.prompt.format(**values); input_data.sys_prompt = input_data.sys_prompt.format(**values)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if input_data.sys_prompt:\nprompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "if input_data.expected_format:\nexpected_format = [ f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items() ]; format_prompt = \",\\n  \".join(expected_format); sys_prompt = trim_prompt( f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\") prompt.append({\"role\": \"system\", \"content\": sys_prompt})",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "if input_data.prompt:\nprompt.append({\"role\": \"user\", \"content\": input_data.prompt})",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "def parse_response(resp: str) -> tuple[dict[str, Any], str | None]: try: parsed = json.loads(resp) if not isinstance(parsed, dict): return {}, f\"Expected a dictionary, but got {type(parsed)}\" miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys()) if miss_keys: return parsed, f\"Missing keys: {miss_keys}\" return parsed, None except JSONDecodeError as e: return {}, f\"JSON decode error: {e}\"\nlogger.info(f\"LLM request: {prompt}\"); retry_prompt = \"\"; llm_model = input_data.model",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "for retry_count in range(input_data.retry):\ntry:\nresponse_text, input_token, output_token = self.llm_call( credentials=credentials, llm_model=llm_model, prompt=prompt, json_format=bool(input_data.expected_format), ollama_host=input_data.ollama_host, max_tokens=input_data.max_tokens, )\nself.merge_stats({ \"input_token_count\": input_token, \"output_token_count\": output_token, }); logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\nif input_data.expected_format:\nparsed_dict, parsed_error = parse_response(response_text)\nif not parsed_error:\nyield \"response\", { k: ( json.loads(v) if isinstance(v, str) and v.startswith(\"[\") and v.endswith(\"]\") else (\", \".join(v) if isinstance(v, list) else v) ) for k, v in parsed_dict.items() }; return",
              "successors": []
            },
            {
              "id": 21,
              "label": "else: yield \"response\", {\"response\": response_text}; return",
              "successors": []
            },
            {
              "id": 26,
              "label": "finally: self.merge_stats({ \"llm_call_count\": retry_count + 1, \"llm_retry_count\": retry_count, })",
              "successors": [
                13
              ]
            },
            {
              "id": 27,
              "label": "raise RuntimeError(retry_prompt)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class AIStructuredResponseGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n        )\n\n    @staticmethod\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")\n\n        raise RuntimeError(retry_prompt)",
      "blocks": [
        {
          "id": 1,
          "label": "class AIStructuredResponseGeneratorBlock(Block):\nclass Input(BlockSchema):\nprompt: str = SchemaField(...)\nexpected_format: dict[str, str] = SchemaField(...)\nmodel: LlmModel = SchemaField(...)\ncredentials: AICredentials = AICredentialsField()\nsys_prompt: str = SchemaField(...)\nconversation_history: list[Message] = SchemaField(...)\nretry: int = SchemaField(...)\nprompt_values: dict[str, str] = SchemaField(...)\nmax_tokens: int | None = SchemaField(...)\nollama_host: str = SchemaField(...)\nclass Output(BlockSchema):\nresponse: dict[str, Any] = SchemaField(...)\nerror: str = SchemaField(...)\n@staticmethod\nraise ValueError(f\"Unsupported LLM provider: {provider}\")\nraise RuntimeError(retry_prompt)",
          "successors": []
        }
      ]
    },
    {
      "name": "AITextGeneratorBlock",
      "type": "class",
      "start_line": 555,
      "end_line": 632,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 598,
          "end_line": 612,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\", description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\", categories={BlockCategory.AI}, input_schema=AITextGeneratorBlock.Input, output_schema=AITextGeneratorBlock.Output, test_input={\"prompt\": \"User prompt\", \"credentials\": TEST_CREDENTIALS_INPUT,}, test_credentials=TEST_CREDENTIALS, test_output=(\"response\", \"Response text\"), test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},)",
              "successors": []
            }
          ]
        },
        {
          "name": "llm_call",
          "type": "function",
          "start_line": 614,
          "end_line": 622,
          "functions": [],
          "classes": [],
          "simplified_code": "    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
          "blocks": [
            {
              "id": 1,
              "label": "block = AIStructuredResponseGeneratorBlock()\nresponse = block.run_once(input_data, \"response\", credentials=credentials)\nself.merge_stats(block.execution_stats)\nreturn response[\"response\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 624,
          "end_line": 631,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)",
          "blocks": [
            {
              "id": 1,
              "label": "object_input_data = AIStructuredResponseGeneratorBlock.Input(**{attr: getattr(input_data, attr) for attr in input_data.model_fields}, expected_format={})\nyield \"response\", self.llm_call(object_input_data, credentials)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 556,
          "end_line": 590,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nprompt: str = SchemaField(...)\nmodel: LlmModel = SchemaField(...)\ncredentials: AICredentials = AICredentialsField()\nsys_prompt: str = SchemaField(...)\nretry: int = SchemaField(...)\nprompt_values: dict[str, str] = SchemaField(...)\nollama_host: str = SchemaField(...)\nmax_tokens: int | None = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 592,
          "end_line": 596,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresponse: str = SchemaField(description=\"The response generated by the language model.\")\nerror: str = SchemaField(description=\"Error message if the API call failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AITextGeneratorBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n        )\n\n        return response[\"response\"]\n\n        yield \"response\", self.llm_call(object_input_data, credentials)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class AITextGeneratorBlock(Block):\nerror: str = SchemaField(description=\"Error message if the API call failed.\")\nreturn response[\"response\"]\nyield \"response\", self.llm_call(object_input_data, credentials)",
          "successors": []
        }
      ]
    },
    {
      "name": "SummaryStyle",
      "type": "class",
      "start_line": 634,
      "end_line": 638,
      "functions": [],
      "classes": [],
      "simplified_code": "class SummaryStyle(Enum):\n    CONCISE = \"concise\"\n    DETAILED = \"detailed\"\n    BULLET_POINTS = \"bullet points\"\n    NUMBERED_LIST = \"numbered list\"",
      "blocks": [
        {
          "id": 1,
          "label": "class SummaryStyle(Enum):\nCONCISE = \"concise\"\nDETAILED = \"detailed\"\nBULLET_POINTS = \"bullet points\"\nNUMBERED_LIST = \"numbered list\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AITextSummarizerBlock",
      "type": "class",
      "start_line": 641,
      "end_line": 801,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 686,
          "end_line": 706,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 708,
          "end_line": 712,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        for output in self._run(input_data, credentials):\n            yield output",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for output in self._run(input_data, credentials):\nyield output",
              "successors": [
                2
              ]
            }
          ]
        },
        {
          "name": "_run",
          "type": "function",
          "start_line": 714,
          "end_line": 725,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary",
          "blocks": [
            {
              "id": 1,
              "label": "chunks = self._split_text(input_data.text, input_data.max_tokens, input_data.chunk_overlap)\nsummaries = []",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for chunk in chunks:\nchunk_summary = self._summarize_chunk(chunk, input_data, credentials)\nsummaries.append(chunk_summary)",
              "successors": [
                3
              ]
            },
            {
              "id": 6,
              "label": "final_summary = self._combine_summaries(summaries, input_data, credentials)\nyield 'summary', final_summary",
              "successors": []
            }
          ]
        },
        {
          "name": "_split_text",
          "type": "function",
          "start_line": 728,
          "end_line": 737,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks",
          "blocks": [
            {
              "id": 1,
              "label": "def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\nwords = text.split()\nchunks = []\nchunk_size = max_tokens - overlap",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "for i in range(0, len(words), chunk_size):\nchunk = \" \".join(words[i : i + max_tokens])\nchunks.append(chunk)",
              "successors": [
                5
              ]
            },
            {
              "id": 8,
              "label": "return chunks",
              "successors": []
            }
          ]
        },
        {
          "name": "llm_call",
          "type": "function",
          "start_line": 739,
          "end_line": 747,
          "functions": [],
          "classes": [],
          "simplified_code": "    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response",
          "blocks": [
            {
              "id": 1,
              "label": "block = AIStructuredResponseGeneratorBlock()\nresponse = block.run_once(input_data, \"response\", credentials=credentials)\nself.merge_stats(block.execution_stats)\nreturn response",
              "successors": []
            }
          ]
        },
        {
          "name": "_summarize_chunk",
          "type": "function",
          "start_line": 749,
          "end_line": 764,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _summarize_chunk(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]",
          "blocks": [
            {
              "id": 1,
              "label": "prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\nllm_response = self.llm_call(AIStructuredResponseGeneratorBlock.Input(prompt=prompt, credentials=input_data.credentials, model=input_data.model, expected_format={\"summary\": \"The summary of the given text.\"},), credentials=credentials,)\nreturn llm_response[\"summary\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "_combine_summaries",
          "type": "function",
          "start_line": 766,
          "end_line": 800,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _combine_summaries(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
          "blocks": [
            {
              "id": 1,
              "label": "combined_text = '\\n\\n'.join(summaries)\nif len(combined_text.split()) <= input_data.max_tokens:\nprompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\nllm_response = self.llm_call(\n    AIStructuredResponseGeneratorBlock.Input(\n        prompt=prompt,\n        credentials=input_data.credentials,\n        model=input_data.model,\n        expected_format={\n            \"final_summary\": \"The final summary of all provided summaries.\"\n        },\n    ),\n    credentials=credentials,\n)\nreturn llm_response[\"final_summary\"]",
              "successors": []
            },
            {
              "id": 5,
              "label": "return self._run(\n    AITextSummarizerBlock.Input(\n        text=combined_text,\n        credentials=input_data.credentials,\n        model=input_data.model,\n        max_tokens=input_data.max_tokens,\n        chunk_overlap=input_data.chunk_overlap,\n    ),\n    credentials=credentials,\n).send(None)[1]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 642,
          "end_line": 680,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ntext: str = SchemaField(description=\"The text to summarize.\", placeholder=\"Enter the text to summarize here...\")\nmodel: LlmModel = SchemaField(title=\"LLM Model\", default=LlmModel.GPT4_TURBO, description=\"The language model to use for summarizing the text.\")\nfocus: str = SchemaField(title=\"Focus\", default=\"general information\", description=\"The topic to focus on in the summary\")\nstyle: SummaryStyle = SchemaField(title=\"Summary Style\", default=SummaryStyle.CONCISE, description=\"The style of the summary to generate.\")\ncredentials: AICredentials = AICredentialsField()\nmax_tokens: int = SchemaField(title=\"Max Tokens\", default=4096, description=\"The maximum number of tokens to generate in the chat completion.\", ge=1)\nchunk_overlap: int = SchemaField(title=\"Chunk Overlap\", default=100, description=\"The number of overlapping tokens between chunks to maintain context.\", ge=0)\nollama_host: str = SchemaField(advanced=True, default=\"localhost:11434\", description=\"Ollama host for local models\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 682,
          "end_line": 684,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nsummary: str = SchemaField(description=\"The final summary of the text.\")\nerror: str = SchemaField(description=\"Error message if the API call failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AITextSummarizerBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n        )\n\n            yield output\n\n        yield \"summary\", final_summary\n\n    @staticmethod\n        return chunks\n\n        return response\n\n        return llm_response[\"summary\"]\n\n            ]  # Get the first yielded value\n",
      "blocks": [
        {
          "id": 1,
          "label": "class AITextSummarizerBlock(Block):\nerror: str = SchemaField(description=\"Error message if the API call failed.\")\nyield output\nyield \"summary\", final_summary\n@staticmethod\nreturn chunks\nreturn response\nreturn llm_response[\"summary\"]\n]  # Get the first yielded value",
          "successors": []
        }
      ]
    },
    {
      "name": "AIConversationBlock",
      "type": "class",
      "start_line": 803,
      "end_line": 887,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 831,
          "end_line": 859,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "llm_call",
          "type": "function",
          "start_line": 861,
          "end_line": 869,
          "functions": [],
          "classes": [],
          "simplified_code": "    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
          "blocks": [
            {
              "id": 1,
              "label": "block = AIStructuredResponseGeneratorBlock()\nresponse = block.run_once(input_data, \"response\", credentials=credentials)\nself.merge_stats(block.execution_stats)\nreturn response[\"response\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 871,
          "end_line": 886,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\nresponse = self.llm_call(AIStructuredResponseGeneratorBlock.Input(prompt=\"\", credentials=input_data.credentials, model=input_data.model, conversation_history=input_data.messages, max_tokens=input_data.max_tokens, expected_format={}), credentials=credentials)\nyield \"response\", response",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 804,
          "end_line": 823,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nmessages: List[Message] = SchemaField(description=\"List of messages in the conversation.\", min_length=1)\nmodel: LlmModel = SchemaField(title=\"LLM Model\", default=LlmModel.GPT4_TURBO, description=\"The language model to use for the conversation.\")\ncredentials: AICredentials = AICredentialsField()\nmax_tokens: int | None = SchemaField(advanced=True, default=None, description=\"The maximum number of tokens to generate in the chat completion.\")\nollama_host: str = SchemaField(advanced=True, default=\"localhost:11434\", description=\"Ollama host for local  models\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 825,
          "end_line": 829,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresponse: str = SchemaField(description=\"The model's response to the conversation.\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIConversationBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n        )\n\n        return response[\"response\"]\n\n        yield \"response\", response\n",
      "blocks": [
        {
          "id": 1,
          "label": "class AIConversationBlock(Block):\nerror: str = SchemaField(description=\"Error message if the API call failed.\")\nreturn response[\"response\"]\nyield \"response\", response",
          "successors": []
        }
      ]
    },
    {
      "name": "AIListGeneratorBlock",
      "type": "class",
      "start_line": 889,
      "end_line": 1125,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 936,
          "end_line": 974,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n    description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n    categories={BlockCategory.AI, BlockCategory.TEXT},\n    input_schema=AIListGeneratorBlock.Input,\n    output_schema=AIListGeneratorBlock.Output,\n    test_input={\n        \"focus\": \"planets\",\n        \"source_data\": (\n            \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n            \"while Kharon-9 is a harsh desert planet with underground cities. \"\n            \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n            \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n            \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n            \"fictional worlds.\"\n        ),\n        \"model\": LlmModel.GPT4_TURBO,\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n        \"max_retries\": 3,\n    },\n    test_credentials=TEST_CREDENTIALS,\n    test_output=[\n        (\n            \"generated_list\",\n            [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n        ),\n        (\"list_item\", \"Zylora Prime\"),\n        (\"list_item\", \"Kharon-9\"),\n        (\"list_item\", \"Vortexia\"),\n        (\"list_item\", \"Oceara\"),\n        (\"list_item\", \"Draknos\"),\n    ],\n    test_mock={\n        \"llm_call\": lambda input_data, credentials: {\n            \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n        },\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "llm_call",
          "type": "function",
          "start_line": 977,
          "end_line": 983,
          "functions": [],
          "classes": [],
          "simplified_code": "    def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response",
          "blocks": [
            {
              "id": 1,
              "label": "def llm_call( input_data: AIStructuredResponseGeneratorBlock.Input, credentials: APIKeyCredentials, ) -> dict[str, str]:\nllm_block = AIStructuredResponseGeneratorBlock()\nresponse = llm_block.run_once(input_data, \"response\", credentials=credentials)\nreturn response",
              "successors": []
            }
          ]
        },
        {
          "name": "string_to_list",
          "type": "function",
          "start_line": 986,
          "end_line": 1002,
          "functions": [],
          "classes": [],
          "simplified_code": "    def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
          "blocks": [
            {
              "id": 1,
              "label": "logger.debug(f\"Converting string to list. Input string: {string}\")\ntry:\npython_list = ast.literal_eval(string)\nif isinstance(python_list, list):\nlogger.debug(f\"Successfully converted string to list: {python_list}\"); return python_list",
              "successors": []
            },
            {
              "id": 6,
              "label": "logger.error(f\"The provided string '{string}' is not a valid list\")\nraise ValueError(f\"The provided string '{string}' is not a valid list.\")",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 1004,
          "end_line": 1125,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
          "blocks": [
            {
              "id": 1,
              "label": "logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\napi_key_check = credentials.api_key.get_secret_value()\nif not api_key_check:\nraise ValueError(\"No LLM API key provided.\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "sys_prompt = \"\"\"You are a Python list generator...\"\"\"\nif input_data.focus:\nprompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"",
              "successors": [
                11
              ]
            },
            {
              "id": 8,
              "label": "if input_data.source_data:\nprompt = \"Extract the main focus of the source data to a list. i.e if the source data is a news website...\"",
              "successors": [
                11
              ]
            },
            {
              "id": 10,
              "label": "prompt = \"Generate a random list.\"",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "if input_data.source_data:\nprompt += f\"\\n\\nUse the following source data to generate the list from:...\"",
              "successors": [
                14
              ]
            },
            {
              "id": 13,
              "label": "prompt += \"\\n\\nInvent the data to generate the list from.\"",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "for attempt in range(input_data.max_retries):\ntry:\nlogger.debug(\"Calling LLM\")\nllm_response = self.llm_call(...)\nlogger.debug(f\"LLM response: {llm_response}\")\nresponse_string = llm_response[\"response\"]\nlogger.debug(f\"Response string: {response_string}\")\nlogger.debug(\"Converting string to Python list\")\nparsed_list = self.string_to_list(response_string)\nlogger.debug(f\"Parsed list: {parsed_list}\")\nyield \"generated_list\", parsed_list\nfor item in parsed_list:\n                    yield \"list_item\", item\n                return",
              "successors": []
            },
            {
              "id": 25,
              "label": "except Exception as e:\nlogger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")",
              "successors": [
                27
              ]
            },
            {
              "id": 27,
              "label": "if attempt == input_data.max_retries - 1:\nraise RuntimeError(...)",
              "successors": []
            },
            {
              "id": 30,
              "label": "prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt...\"\"\"",
              "successors": [
                14
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 890,
          "end_line": 925,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nfocus: str | None = SchemaField(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "source_data: str | None = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "model: LlmModel = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "credentials: AICredentials = AICredentialsField()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "max_retries: int = SchemaField(...)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "max_tokens: int | None = SchemaField(...)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "ollama_host: str = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 927,
          "end_line": 934,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\ngenerated_list: List[str] = SchemaField(description=\"The generated list.\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "list_item: str = SchemaField(description=\"Each individual item in the list.\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if the list generation failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIListGeneratorBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return response\n\n    @staticmethod\n            raise ValueError(\"Invalid list format. Could not convert to list.\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
      "blocks": [
        {
          "id": 1,
          "label": "class AIListGeneratorBlock(Block):\ndef run(self, input):\nresponse = input.get('response', [])\nif not isinstance(response, list):\ntry:\nresponse = list(response)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "except:\nraise ValueError(\"Invalid list format. Could not convert to list.\")\nlogger.debug(\"AIListGeneratorBlock.run completed\")",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import ast\nimport logging\nfrom enum import Enum, EnumMeta\nfrom json import JSONDecodeError\nfrom types import MappingProxyType\nfrom typing import TYPE_CHECKING, Any, List, Literal, NamedTuple\n\nfrom pydantic import SecretStr\n\nfrom backend.integrations.providers import ProviderName\n\nif TYPE_CHECKING:\n    from enum import _EnumMemberT\n\nimport anthropic\nimport ollama\nimport openai\nfrom groq import Groq\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.util import json\nfrom backend.util.settings import BehaveAs, Settings\n\nlogger = logging.getLogger(__name__)\n\nLLMProviderName = Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]\nAICredentials = CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n\n\n    )\n\n\n    context_window: int\n\n\n            return MappingProxyType(members)\n\n\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")\n\n\n    ASSISTANT = \"assistant\"\n\n\n    content: str\n\n\n        raise RuntimeError(retry_prompt)\n\n\n\n\n    NUMBERED_LIST = \"numbered list\"\n\n\n\n\n\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
  "blocks": [
    {
      "id": 1,
      "label": "import ast\nimport logging\nfrom enum import Enum, EnumMeta\nfrom json import JSONDecodeError\nfrom types import MappingProxyType\nfrom typing import TYPE_CHECKING, Any, List, Literal, NamedTuple\n\nfrom pydantic import SecretStr\n\nfrom backend.integrations.providers import ProviderName\nif TYPE_CHECKING:\nfrom enum import _EnumMemberT",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import anthropic\nimport ollama\nimport openai\nfrom groq import Groq\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.util import json\nfrom backend.util.settings import BehaveAs, Settings\nlogger = logging.getLogger(__name__)\nLLMProviderName = Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]\nAICredentials = CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\nraise RuntimeError(retry_prompt)\nlogger.debug(\"AIListGeneratorBlock.run completed\")",
      "successors": []
    }
  ]
}