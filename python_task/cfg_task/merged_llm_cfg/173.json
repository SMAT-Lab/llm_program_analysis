{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 77,
  "functions": [],
  "classes": [
    {
      "name": "SalesRanker",
      "type": "class",
      "start_line": 6,
      "end_line": 73,
      "functions": [
        {
          "name": "within_past_week",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...",
          "blocks": [
            {
              "id": 1,
              "label": "def within_past_week(self, timestamp):\n\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"",
              "successors": []
            }
          ]
        },
        {
          "name": "mapper",
          "type": "function",
          "start_line": 12,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity",
          "blocks": [
            {
              "id": 1,
              "label": "timestamp, product_id, category, quantity = line.split('\\t')\nif self.within_past_week(timestamp):\nyield (category, product_id), quantity",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "end",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer",
          "type": "function",
          "start_line": 28,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)",
          "blocks": [
            {
              "id": 1,
              "label": "def reducer(self, key, values):\nyield key, sum(values)",
              "successors": []
            }
          ]
        },
        {
          "name": "mapper_sort",
          "type": "function",
          "start_line": 39,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id",
          "blocks": [
            {
              "id": 1,
              "label": "category, product_id = key\nquantity = value\nyield (category, quantity), product_id",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer_identity",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    def reducer_identity(self, key, value):\n        yield key, value",
          "blocks": [
            {
              "id": 1,
              "label": "def reducer_identity(self, key, value):\nyield key, value",
              "successors": []
            }
          ]
        },
        {
          "name": "steps",
          "type": "function",
          "start_line": 66,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
          "blocks": [
            {
              "id": 1,
              "label": "def steps(self):\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer), self.mr(mapper=self.mapper_sort, reducer=self.reducer_identity)]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class SalesRanker(MRJob):\n\n        ...\n\n            yield (category, product_id), quantity\n\n        yield key, sum(values)\n\n        yield (category, quantity), product_id\n\n        yield key, value\n\n        ]",
      "blocks": [
        {
          "id": 1,
          "label": "class SalesRanker(MRJob):\nyield (category, product_id), quantity\nyield key, sum(values)\nyield (category, quantity), product_id\nyield key, value",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\n        ]\n\n\nif __name__ == '__main__':\n    SalesRanker.run()",
  "blocks": [
    {
      "id": 1,
      "label": "from mrjob.job import MRJob\nif __name__ == '__main__':\nSalesRanker.run()",
      "successors": []
    }
  ]
}