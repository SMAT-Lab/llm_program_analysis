{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 167,
  "functions": [
    {
      "name": "get_client",
      "type": "function",
      "start_line": 22,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
      "blocks": [
        {
          "id": 1,
          "label": "def get_client() -> LDClient:\nreturn ldclient.get()",
          "successors": []
        }
      ]
    },
    {
      "name": "initialize_launchdarkly",
      "type": "function",
      "start_line": 27,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")",
      "blocks": [
        {
          "id": 1,
          "label": "sdk_key = SETTINGS.launch_darkly_sdk_key\nlogger.debug(f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\")\nif not sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn",
          "successors": []
        },
        {
          "id": 5,
          "label": "config = Config(sdk_key)\nldclient.set_config(config)\nif ldclient.get().is_initialized():\nlogger.info(\"LaunchDarkly client initialized successfully\")",
          "successors": []
        },
        {
          "id": 8,
          "label": "logger.error(\"LaunchDarkly client failed to initialize\")",
          "successors": []
        }
      ]
    },
    {
      "name": "shutdown_launchdarkly",
      "type": "function",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
      "blocks": [
        {
          "id": 1,
          "label": "def shutdown_launchdarkly() -> None:\nif ldclient.get().is_initialized():\nldclient.get().close()\nlogger.info(\"LaunchDarkly client closed successfully\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "create_context",
      "type": "function",
      "start_line": 53,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n    if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()",
      "blocks": [
        {
          "id": 1,
          "label": "builder = Context.builder(str(user_id)).kind(\"user\")\nif additional_attributes:",
          "successors": [
            3,
            5
          ]
        },
        {
          "id": 3,
          "label": "for key, value in additional_attributes.items():\nbuilder.set(key, value)",
          "successors": [
            3
          ]
        },
        {
          "id": 5,
          "label": "return builder.build()",
          "successors": []
        }
      ]
    },
    {
      "name": "feature_flag",
      "type": "function",
      "start_line": 64,
      "end_line": 133,
      "functions": [
        {
          "name": "decorator",
          "type": "function",
          "start_line": 74,
          "end_line": 133,
          "functions": [
            {
              "name": "async_wrapper",
              "type": "function",
              "start_line": 78,
              "end_line": 103,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n",
              "blocks": [
                {
                  "id": 1,
                  "label": "async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\ntry:\nuser_id = kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")",
                  "successors": [
                    16
                  ]
                },
                {
                  "id": 6,
                  "label": "if not get_client().is_initialized():\nlogger.warning(f\"LaunchDarkly not initialized, using default={default}\")\nis_enabled = default",
                  "successors": [
                    10
                  ]
                },
                {
                  "id": 9,
                  "label": "context = create_context(str(user_id))",
                  "successors": [
                    10
                  ]
                },
                {
                  "id": 10,
                  "label": "is_enabled = get_client().variation(flag_key, context, default)\nif not is_enabled:\nraise HTTPException(status_code=404, detail=\"Feature not available\")",
                  "successors": [
                    16
                  ]
                },
                {
                  "id": 13,
                  "label": "result = func(*args, **kwargs)\nif asyncio.iscoroutine(result):\nreturn await result",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "return cast(T, result)",
                  "successors": []
                }
              ]
            },
            {
              "name": "sync_wrapper",
              "type": "function",
              "start_line": 105,
              "end_line": 127,
              "functions": [],
              "classes": [],
              "simplified_code": "        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n",
              "blocks": [
                {
                  "id": 1,
                  "label": "try:\nuser_id = kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")",
                  "successors": [
                    6
                  ]
                },
                {
                  "id": 4,
                  "label": "if not get_client().is_initialized():\nlogger.warning(\n    f\"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled = default",
                  "successors": [
                    8
                  ]
                },
                {
                  "id": 6,
                  "label": "except Exception as e:\n    logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n    raise",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "context = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)",
                  "successors": [
                    8
                  ]
                },
                {
                  "id": 8,
                  "label": "if not is_enabled:\nraise HTTPException(status_code=404, detail=\"Feature not available\")",
                  "successors": [
                    6
                  ]
                },
                {
                  "id": 10,
                  "label": "return cast(T, func(*args, **kwargs))",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n\n        @wraps(func)\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator",
          "blocks": [
            {
              "id": 1,
              "label": "def decorator(func: Callable[P, Union[T, Awaitable[T]]]) -> Callable[P, Union[T, Awaitable[T]]]:\n@wraps(func)\nreturn cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    return decorator",
      "blocks": [
        {
          "id": 1,
          "label": "def feature_flag(flag_key: str, default: bool = False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n\"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\nreturn decorator",
          "successors": []
        }
      ]
    },
    {
      "name": "percentage_rollout",
      "type": "function",
      "start_line": 136,
      "end_line": 143,
      "functions": [],
      "classes": [],
      "simplified_code": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
      "blocks": [
        {
          "id": 1,
          "label": "def percentage_rollout(flag_key: str, default: bool = False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n\"\"\"Decorator for percentage-based rollouts.\"\"\"\nreturn feature_flag(flag_key, default)",
          "successors": []
        }
      ]
    },
    {
      "name": "beta_feature",
      "type": "function",
      "start_line": 146,
      "end_line": 154,
      "functions": [],
      "classes": [],
      "simplified_code": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)",
      "blocks": [
        {
          "id": 1,
          "label": "def beta_feature(flag_key: Optional[str] = None, unauthorized_response: Any = {'message': 'Not available in beta'}) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\nactual_key = f'beta-{flag_key}' if flag_key else 'beta'\nreturn feature_flag(actual_key, False)",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_flag_variation",
      "type": "function",
      "start_line": 158,
      "end_line": 167,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
      "blocks": [
        {
          "id": 1,
          "label": "original_variation = get_client().variation\nget_client().variation = lambda key, context, default: (return_value if key == flag_key else original_variation(key, context, default))\ntry: yield\nfinally: get_client().variation = original_variation",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\n\n    return ldclient.get()\n\n\n        logger.error(\"LaunchDarkly client failed to initialize\")\n\n\n        logger.info(\"LaunchDarkly client closed successfully\")\n\n\n    return builder.build()\n\n\n    return decorator\n\n\n    return feature_flag(flag_key, default)\n\n\n    return feature_flag(actual_key, False)\n\n\n@contextlib.contextmanager\n        get_client().variation = original_variation",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nldclient.get()\nlogger.error(\"LaunchDarkly client failed to initialize\")\nlogger.info(\"LaunchDarkly client closed successfully\")\nbuilder.build()\ndecorator\nfeature_flag(flag_key, default)\nfeature_flag(actual_key, False)\n@contextlib.contextmanager\n        get_client().variation = original_variation",
      "successors": []
    }
  ]
}