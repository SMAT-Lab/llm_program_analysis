{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 67,
  "functions": [
    {
      "name": "_start_measurement",
      "type": "function",
      "start_line": 15,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]",
      "blocks": [
        {
          "id": 1,
          "label": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]",
          "successors": []
        }
      ]
    },
    {
      "name": "_end_measurement",
      "type": "function",
      "start_line": 19,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
      "blocks": [
        {
          "id": 1,
          "label": "end_wall_time = time.time()\nend_cpu_time = os.times()[0] + os.times()[1]",
          "successors": [
            {
              "id": 3,
              "label": "return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "time_measured",
      "type": "function",
      "start_line": 33,
      "end_line": 50,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 39,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result",
          "blocks": [
            {
              "id": 1,
              "label": "start_wall_time, start_cpu_time = _start_measurement()\ntry:",
              "successors": [
                {
                  "id": 3,
                  "label": "result = func(*args, **kwargs)\nreturn timing_info, result",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "finally:\nwall_duration, cpu_duration = _end_measurement(start_wall_time, start_cpu_time)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\nreturn timing_info, result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\n        return timing_info, result\n\n    return wrapper",
      "blocks": [
        {
          "id": 1,
          "label": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n\"\"\"\nDecorator to measure the time taken by a function to execute.\n\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "@functools.wraps(func)",
              "successors": [
                {
                  "id": 4,
                  "label": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\nstart_time = time.monotonic()",
                  "successors": [
                    {
                      "id": 6,
                      "label": "result = func(*args, **kwargs)\nend_time = time.monotonic()",
                      "successors": [
                        {
                          "id": 8,
                          "label": "elapsed_time = end_time - start_time\ntiming_info = TimingInfo(start_time, end_time, elapsed_time)",
                          "successors": [
                            {
                              "id": 10,
                              "label": "return timing_info, result",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "return wrapper",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "error_logged",
      "type": "function",
      "start_line": 53,
      "end_line": 67,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 59,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
          "blocks": [
            {
              "id": 1,
              "label": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\ntry:",
              "successors": [
                {
                  "id": 3,
                  "label": "    return func(*args, **kwargs)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception as e:\n    logger.exception(f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n            )\n\n    return wrapper",
      "blocks": [
        {
          "id": 1,
          "label": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n\"\"\"\\nDecorator to suppress and log any exceptions raised by a function.\\n\"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "@functools.wraps(func)\ndef wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:",
              "successors": [
                {
                  "id": 5,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return func(*args, **kwargs)\nreturn wrapper",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "except Exception as e:\nlogger.error(\"An error occurred: %s\", e)\nreturn None",
                      "successors": [
                        {
                          "id": 9,
                          "label": "return wrapper",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "TimingInfo",
      "type": "class",
      "start_line": 10,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float",
      "blocks": [
        {
          "id": 1,
          "label": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\n\nfrom pydantic import BaseModel\n\n\n    wall_time: float\n\n\n    return time.time(), os.times()[0] + os.times()[1]\n\n\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\n\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\nlogger = logging.getLogger(__name__)\n\n\n    return wrapper\n\n\n    return wrapper",
  "blocks": [
    {
      "id": 1,
      "label": "import functools\nimport logging",
      "successors": [
        {
          "id": 3,
          "label": "import os\nimport time",
          "successors": [
            {
              "id": 5,
              "label": "from typing import Callable, ParamSpec, Tuple, TypeVar\nfrom pydantic import BaseModel",
              "successors": [
                {
                  "id": 7,
                  "label": "def timer() -> Tuple[float, float]:\n    start_wall_time, start_cpu_time = time.time(), os.times()[0] + os.times()[1]",
                  "successors": [
                    {
                      "id": 9,
                      "label": "    def decorator(func: Callable[P, T]) -> Callable[P, T]:",
                      "successors": [
                        {
                          "id": 10,
                          "label": "        def wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
                          "successors": [
                            {
                              "id": 11,
                              "label": "            result = func(*args, **kwargs)",
                              "successors": []
                            },
                            {
                              "id": 12,
                              "label": "            end_wall_time, end_cpu_time = time.time(), os.times()[0] + os.times()[1]",
                              "successors": []
                            },
                            {
                              "id": 13,
                              "label": "            logger.info(\"Elapsed wall time: %f\", end_wall_time - start_wall_time)",
                              "successors": []
                            },
                            {
                              "id": 14,
                              "label": "            logger.info(\"Elapsed CPU time: %f\", end_cpu_time - start_cpu_time)",
                              "successors": []
                            },
                            {
                              "id": 15,
                              "label": "            return result",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 16,
                          "label": "        return wrapper",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "    return decorator",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 18,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}