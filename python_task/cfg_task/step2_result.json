{
  "name": "example_script",
  "type": "CFG",
  "code": "from enum import Enum\nfrom typing import Any, Dict, Literal, Optional\n\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"ideogram\",\n    api_key=SecretStr(\"mock-ideogram-api-key\"),\n    title=\"Mock Ideogram API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\nclass IdeogramModelName(str, Enum):\n    V2 = \"V_2\"\n    V1 = \"V_1\"\n    V1_TURBO = \"V_1_TURBO\"\n    V2_TURBO = \"V_2_TURBO\"\n\n\nclass MagicPromptOption(str, Enum):\n    AUTO = \"AUTO\"\n    ON = \"ON\"\n    OFF = \"OFF\"\n\n\nclass StyleType(str, Enum):\n    AUTO = \"AUTO\"\n    GENERAL = \"GENERAL\"\n    REALISTIC = \"REALISTIC\"\n    DESIGN = \"DESIGN\"\n    RENDER_3D = \"RENDER_3D\"\n    ANIME = \"ANIME\"\n\n\nclass ColorPalettePreset(str, Enum):\n    NONE = \"NONE\"\n    EMBER = \"EMBER\"\n    FRESH = \"FRESH\"\n    JUNGLE = \"JUNGLE\"\n    MAGIC = \"MAGIC\"\n    MELON = \"MELON\"\n    MOSAIC = \"MOSAIC\"\n    PASTEL = \"PASTEL\"\n    ULTRAMARINE = \"ULTRAMARINE\"\n\n\nclass AspectRatio(str, Enum):\n    ASPECT_10_16 = \"ASPECT_10_16\"\n    ASPECT_16_10 = \"ASPECT_16_10\"\n    ASPECT_9_16 = \"ASPECT_9_16\"\n    ASPECT_16_9 = \"ASPECT_16_9\"\n    ASPECT_3_2 = \"ASPECT_3_2\"\n    ASPECT_2_3 = \"ASPECT_2_3\"\n    ASPECT_4_3 = \"ASPECT_4_3\"\n    ASPECT_3_4 = \"ASPECT_3_4\"\n    ASPECT_1_1 = \"ASPECT_1_1\"\n    ASPECT_1_3 = \"ASPECT_1_3\"\n    ASPECT_3_1 = \"ASPECT_3_1\"\n\n\nclass UpscaleOption(str, Enum):\n    AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\"\n\n\nclass IdeogramModelBlock(Block):\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        ideogram_model_name: IdeogramModelName = SchemaField(\n            description=\"The name of the Image Generation Model, e.g., V_2\",\n            default=IdeogramModelName.V2,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        aspect_ratio: AspectRatio = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=AspectRatio.ASPECT_1_1,\n            title=\"Aspect Ratio\",\n            advanced=False,\n        )\n        upscale: UpscaleOption = SchemaField(\n            description=\"Upscale the generated image\",\n            default=UpscaleOption.NO_UPSCALE,\n            title=\"Upscale Image\",\n            advanced=False,\n        )\n        magic_prompt_option: MagicPromptOption = SchemaField(\n            description=\"Whether to use MagicPrompt for enhancing the request\",\n            default=MagicPromptOption.AUTO,\n            title=\"Magic Prompt Option\",\n            advanced=True,\n        )\n        seed: Optional[int] = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n            advanced=True,\n        )\n        style_type: StyleType = SchemaField(\n            description=\"Style type to apply, applicable for V_2 and above\",\n            default=StyleType.AUTO,\n            title=\"Style Type\",\n            advanced=True,\n        )\n        negative_prompt: Optional[str] = SchemaField(\n            description=\"Description of what to exclude from the image\",\n            default=None,\n            title=\"Negative Prompt\",\n            advanced=True,\n        )\n        color_palette_name: ColorPalettePreset = SchemaField(\n            description=\"Color palette preset name, choose 'None' to skip\",\n            default=ColorPalettePreset.NONE,\n            title=\"Color Palette Preset\",\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated image URL\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        seed = input_data.seed\n\n        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )\n\n        # Step 2: Upscale the image if requested\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:\n            result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )\n\n        yield \"result\", result\n\n    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):\n        url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }\n\n        if seed is not None:\n            data[\"image_request\"][\"seed\"] = seed\n\n        if negative_prompt:\n            data[\"image_request\"][\"negative_prompt\"] = negative_prompt\n\n        if color_palette_name != \"NONE\":\n            data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}\n\n        try:\n            response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]\n        except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")\n\n    def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }\n\n        try:\n            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n\n            return response.json()[\"data\"][0][\"url\"]\n\n        except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
  "functions": [],
  "classes": [
    {
      "name": "IdeogramModelName",
      "type": "class",
      "code": "class IdeogramModelName(str, Enum):\n    V2 = \"V_2\"\n    V1 = \"V_1\"\n    V1_TURBO = \"V_1_TURBO\"\n    V2_TURBO = \"V_2_TURBO\"",
      "functions": [],
      "simplified_code": "class IdeogramModelName(str, Enum):\n    V2 = \"V_2\"\n    V1 = \"V_1\"\n    V1_TURBO = \"V_1_TURBO\"\n    V2_TURBO = \"V_2_TURBO\""
    },
    {
      "name": "MagicPromptOption",
      "type": "class",
      "code": "class MagicPromptOption(str, Enum):\n    AUTO = \"AUTO\"\n    ON = \"ON\"\n    OFF = \"OFF\"",
      "functions": [],
      "simplified_code": "class MagicPromptOption(str, Enum):\n    AUTO = \"AUTO\"\n    ON = \"ON\"\n    OFF = \"OFF\""
    },
    {
      "name": "StyleType",
      "type": "class",
      "code": "class StyleType(str, Enum):\n    AUTO = \"AUTO\"\n    GENERAL = \"GENERAL\"\n    REALISTIC = \"REALISTIC\"\n    DESIGN = \"DESIGN\"\n    RENDER_3D = \"RENDER_3D\"\n    ANIME = \"ANIME\"",
      "functions": [],
      "simplified_code": "class StyleType(str, Enum):\n    AUTO = \"AUTO\"\n    GENERAL = \"GENERAL\"\n    REALISTIC = \"REALISTIC\"\n    DESIGN = \"DESIGN\"\n    RENDER_3D = \"RENDER_3D\"\n    ANIME = \"ANIME\""
    },
    {
      "name": "ColorPalettePreset",
      "type": "class",
      "code": "class ColorPalettePreset(str, Enum):\n    NONE = \"NONE\"\n    EMBER = \"EMBER\"\n    FRESH = \"FRESH\"\n    JUNGLE = \"JUNGLE\"\n    MAGIC = \"MAGIC\"\n    MELON = \"MELON\"\n    MOSAIC = \"MOSAIC\"\n    PASTEL = \"PASTEL\"\n    ULTRAMARINE = \"ULTRAMARINE\"",
      "functions": [],
      "simplified_code": "class ColorPalettePreset(str, Enum):\n    NONE = \"NONE\"\n    EMBER = \"EMBER\"\n    FRESH = \"FRESH\"\n    JUNGLE = \"JUNGLE\"\n    MAGIC = \"MAGIC\"\n    MELON = \"MELON\"\n    MOSAIC = \"MOSAIC\"\n    PASTEL = \"PASTEL\"\n    ULTRAMARINE = \"ULTRAMARINE\""
    },
    {
      "name": "AspectRatio",
      "type": "class",
      "code": "class AspectRatio(str, Enum):\n    ASPECT_10_16 = \"ASPECT_10_16\"\n    ASPECT_16_10 = \"ASPECT_16_10\"\n    ASPECT_9_16 = \"ASPECT_9_16\"\n    ASPECT_16_9 = \"ASPECT_16_9\"\n    ASPECT_3_2 = \"ASPECT_3_2\"\n    ASPECT_2_3 = \"ASPECT_2_3\"\n    ASPECT_4_3 = \"ASPECT_4_3\"\n    ASPECT_3_4 = \"ASPECT_3_4\"\n    ASPECT_1_1 = \"ASPECT_1_1\"\n    ASPECT_1_3 = \"ASPECT_1_3\"\n    ASPECT_3_1 = \"ASPECT_3_1\"",
      "functions": [],
      "simplified_code": "class AspectRatio(str, Enum):\n    ASPECT_10_16 = \"ASPECT_10_16\"\n    ASPECT_16_10 = \"ASPECT_16_10\"\n    ASPECT_9_16 = \"ASPECT_9_16\"\n    ASPECT_16_9 = \"ASPECT_16_9\"\n    ASPECT_3_2 = \"ASPECT_3_2\"\n    ASPECT_2_3 = \"ASPECT_2_3\"\n    ASPECT_4_3 = \"ASPECT_4_3\"\n    ASPECT_3_4 = \"ASPECT_3_4\"\n    ASPECT_1_1 = \"ASPECT_1_1\"\n    ASPECT_1_3 = \"ASPECT_1_3\"\n    ASPECT_3_1 = \"ASPECT_3_1\""
    },
    {
      "name": "UpscaleOption",
      "type": "class",
      "code": "class UpscaleOption(str, Enum):\n    AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\"",
      "functions": [],
      "simplified_code": "class UpscaleOption(str, Enum):\n    AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\""
    },
    {
      "name": "IdeogramModelBlock",
      "type": "class",
      "code": "class IdeogramModelBlock(Block):\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        ideogram_model_name: IdeogramModelName = SchemaField(\n            description=\"The name of the Image Generation Model, e.g., V_2\",\n            default=IdeogramModelName.V2,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        aspect_ratio: AspectRatio = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=AspectRatio.ASPECT_1_1,\n            title=\"Aspect Ratio\",\n            advanced=False,\n        )\n        upscale: UpscaleOption = SchemaField(\n            description=\"Upscale the generated image\",\n            default=UpscaleOption.NO_UPSCALE,\n            title=\"Upscale Image\",\n            advanced=False,\n        )\n        magic_prompt_option: MagicPromptOption = SchemaField(\n            description=\"Whether to use MagicPrompt for enhancing the request\",\n            default=MagicPromptOption.AUTO,\n            title=\"Magic Prompt Option\",\n            advanced=True,\n        )\n        seed: Optional[int] = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n            advanced=True,\n        )\n        style_type: StyleType = SchemaField(\n            description=\"Style type to apply, applicable for V_2 and above\",\n            default=StyleType.AUTO,\n            title=\"Style Type\",\n            advanced=True,\n        )\n        negative_prompt: Optional[str] = SchemaField(\n            description=\"Description of what to exclude from the image\",\n            default=None,\n            title=\"Negative Prompt\",\n            advanced=True,\n        )\n        color_palette_name: ColorPalettePreset = SchemaField(\n            description=\"Color palette preset name, choose 'None' to skip\",\n            default=ColorPalettePreset.NONE,\n            title=\"Color Palette Preset\",\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated image URL\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        seed = input_data.seed\n\n        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )\n\n        # Step 2: Upscale the image if requested\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:\n            result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )\n\n        yield \"result\", result\n\n    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):\n        url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }\n\n        if seed is not None:\n            data[\"image_request\"][\"seed\"] = seed\n\n        if negative_prompt:\n            data[\"image_request\"][\"negative_prompt\"] = negative_prompt\n\n        if color_palette_name != \"NONE\":\n            data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}\n\n        try:\n            response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]\n        except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")\n\n    def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }\n\n        try:\n            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n\n            return response.json()[\"data\"][0][\"url\"]\n\n        except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "code": "def __init__(self):\n    super().__init__(\n        id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n        description=\"This block runs Ideogram models with both simple and advanced settings.\",\n        categories={BlockCategory.AI},\n        input_schema=IdeogramModelBlock.Input,\n        output_schema=IdeogramModelBlock.Output,\n        test_input={\n            \"ideogram_model_name\": IdeogramModelName.V2,\n            \"prompt\": \"A futuristic cityscape at sunset\",\n            \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n            \"upscale\": UpscaleOption.NO_UPSCALE,\n            \"magic_prompt_option\": MagicPromptOption.AUTO,\n            \"seed\": None,\n            \"style_type\": StyleType.AUTO,\n            \"negative_prompt\": None,\n            \"color_palette_name\": ColorPalettePreset.NONE,\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n        },\n        test_output=[\n            (\n                \"result\",\n                \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n            ),\n        ],\n        test_mock={\n            \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n            \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n        },\n        test_credentials=TEST_CREDENTIALS,\n    )",
          "functions": [],
          "classes": [],
          "simplified_code": "def __init__(self):\n    super().__init__(\n        id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n        description=\"This block runs Ideogram models with both simple and advanced settings.\",\n        categories={BlockCategory.AI},\n        input_schema=IdeogramModelBlock.Input,\n        output_schema=IdeogramModelBlock.Output,\n        test_input={\n            \"ideogram_model_name\": IdeogramModelName.V2,\n            \"prompt\": \"A futuristic cityscape at sunset\",\n            \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n            \"upscale\": UpscaleOption.NO_UPSCALE,\n            \"magic_prompt_option\": MagicPromptOption.AUTO,\n            \"seed\": None,\n            \"style_type\": StyleType.AUTO,\n            \"negative_prompt\": None,\n            \"color_palette_name\": ColorPalettePreset.NONE,\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n        },\n        test_output=[\n            (\n                \"result\",\n                \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n            ),\n        ],\n        test_mock={\n            \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n            \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n        },\n        test_credentials=TEST_CREDENTIALS,\n    )"
        },
        {
          "name": "run",
          "type": "function",
          "code": "def run(\n    self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n) -> BlockOutput:\n    seed = input_data.seed\n\n    # Step 1: Generate the image\n    result = self.run_model(\n        api_key=credentials.api_key,\n        model_name=input_data.ideogram_model_name.value,\n        prompt=input_data.prompt,\n        seed=seed,\n        aspect_ratio=input_data.aspect_ratio.value,\n        magic_prompt_option=input_data.magic_prompt_option.value,\n        style_type=input_data.style_type.value,\n        negative_prompt=input_data.negative_prompt,\n        color_palette_name=input_data.color_palette_name.value,\n    )\n\n    # Step 2: Upscale the image if requested\n    if input_data.upscale == UpscaleOption.AI_UPSCALE:\n        result = self.upscale_image(\n            api_key=credentials.api_key,\n            image_url=result,\n        )\n\n    yield \"result\", result",
          "functions": [],
          "classes": [],
          "simplified_code": "def run(\n    self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n) -> BlockOutput:\n    seed = input_data.seed\n\n    # Step 1: Generate the image\n    result = self.run_model(\n        api_key=credentials.api_key,\n        model_name=input_data.ideogram_model_name.value,\n        prompt=input_data.prompt,\n        seed=seed,\n        aspect_ratio=input_data.aspect_ratio.value,\n        magic_prompt_option=input_data.magic_prompt_option.value,\n        style_type=input_data.style_type.value,\n        negative_prompt=input_data.negative_prompt,\n        color_palette_name=input_data.color_palette_name.value,\n    )\n\n    # Step 2: Upscale the image if requested\n    if input_data.upscale == UpscaleOption.AI_UPSCALE:\n        result = self.upscale_image(\n            api_key=credentials.api_key,\n            image_url=result,\n        )\n\n    yield \"result\", result"
        },
        {
          "name": "run_model",
          "type": "function",
          "code": "def run_model(\n    self,\n    api_key: SecretStr,\n    model_name: str,\n    prompt: str,\n    seed: Optional[int],\n    aspect_ratio: str,\n    magic_prompt_option: str,\n    style_type: str,\n    negative_prompt: Optional[str],\n    color_palette_name: str,\n):\n    url = \"https://api.ideogram.ai/generate\"\n    headers = {\n        \"Api-Key\": api_key.get_secret_value(),\n        \"Content-Type\": \"application/json\",\n    }\n\n    data: Dict[str, Any] = {\n        \"image_request\": {\n            \"prompt\": prompt,\n            \"model\": model_name,\n            \"aspect_ratio\": aspect_ratio,\n            \"magic_prompt_option\": magic_prompt_option,\n            \"style_type\": style_type,\n        }\n    }\n\n    if seed is not None:\n        data[\"image_request\"][\"seed\"] = seed\n\n    if negative_prompt:\n        data[\"image_request\"][\"negative_prompt\"] = negative_prompt\n\n    if color_palette_name != \"NONE\":\n        data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}\n\n    try:\n        response = requests.post(url, json=data, headers=headers)\n        return response.json()[\"data\"][0][\"url\"]\n    except RequestException as e:\n        raise Exception(f\"Failed to fetch image: {str(e)}\")",
          "functions": [],
          "classes": [],
          "simplified_code": "def run_model(\n    self,\n    api_key: SecretStr,\n    model_name: str,\n    prompt: str,\n    seed: Optional[int],\n    aspect_ratio: str,\n    magic_prompt_option: str,\n    style_type: str,\n    negative_prompt: Optional[str],\n    color_palette_name: str,\n):\n    url = \"https://api.ideogram.ai/generate\"\n    headers = {\n        \"Api-Key\": api_key.get_secret_value(),\n        \"Content-Type\": \"application/json\",\n    }\n\n    data: Dict[str, Any] = {\n        \"image_request\": {\n            \"prompt\": prompt,\n            \"model\": model_name,\n            \"aspect_ratio\": aspect_ratio,\n            \"magic_prompt_option\": magic_prompt_option,\n            \"style_type\": style_type,\n        }\n    }\n\n    if seed is not None:\n        data[\"image_request\"][\"seed\"] = seed\n\n    if negative_prompt:\n        data[\"image_request\"][\"negative_prompt\"] = negative_prompt\n\n    if color_palette_name != \"NONE\":\n        data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}\n\n    try:\n        response = requests.post(url, json=data, headers=headers)\n        return response.json()[\"data\"][0][\"url\"]\n    except RequestException as e:\n        raise Exception(f\"Failed to fetch image: {str(e)}\")"
        },
        {
          "name": "upscale_image",
          "type": "function",
          "code": "def upscale_image(self, api_key: SecretStr, image_url: str):\n    url = \"https://api.ideogram.ai/upscale\"\n    headers = {\n        \"Api-Key\": api_key.get_secret_value(),\n    }\n\n    try:\n        # Step 1: Download the image from the provided URL\n        image_response = requests.get(image_url)\n\n        # Step 2: Send the downloaded image to the upscale API\n        files = {\n            \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n        }\n\n        response = requests.post(\n            url,\n            headers=headers,\n            data={\n                \"image_request\": \"{}\",  # Empty JSON object\n            },\n            files=files,\n        )\n\n        return response.json()[\"data\"][0][\"url\"]\n\n    except RequestException as e:\n        raise Exception(f\"Failed to upscale image: {str(e)}\")",
          "functions": [],
          "classes": [],
          "simplified_code": "def upscale_image(self, api_key: SecretStr, image_url: str):\n    url = \"https://api.ideogram.ai/upscale\"\n    headers = {\n        \"Api-Key\": api_key.get_secret_value(),\n    }\n\n    try:\n        # Step 1: Download the image from the provided URL\n        image_response = requests.get(image_url)\n\n        # Step 2: Send the downloaded image to the upscale API\n        files = {\n            \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n        }\n\n        response = requests.post(\n            url,\n            headers=headers,\n            data={\n                \"image_request\": \"{}\",  # Empty JSON object\n            },\n            files=files,\n        )\n\n        return response.json()[\"data\"][0][\"url\"]\n\n    except RequestException as e:\n        raise Exception(f\"Failed to upscale image: {str(e)}\")"
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "code": "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[\n        Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n    )\n    prompt: str = SchemaField(\n        description=\"Text prompt for image generation\",\n        placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n        title=\"Prompt\",\n    )\n    ideogram_model_name: IdeogramModelName = SchemaField(\n        description=\"The name of the Image Generation Model, e.g., V_2\",\n        default=IdeogramModelName.V2,\n        title=\"Image Generation Model\",\n        advanced=False,\n    )\n    aspect_ratio: AspectRatio = SchemaField(\n        description=\"Aspect ratio for the generated image\",\n        default=AspectRatio.ASPECT_1_1,\n        title=\"Aspect Ratio\",\n        advanced=False,\n    )\n    upscale: UpscaleOption = SchemaField(\n        description=\"Upscale the generated image\",\n        default=UpscaleOption.NO_UPSCALE,\n        title=\"Upscale Image\",\n        advanced=False,\n    )\n    magic_prompt_option: MagicPromptOption = SchemaField(\n        description=\"Whether to use MagicPrompt for enhancing the request\",\n        default=MagicPromptOption.AUTO,\n        title=\"Magic Prompt Option\",\n        advanced=True,\n    )\n    seed: Optional[int] = SchemaField(\n        description=\"Random seed. Set for reproducible generation\",\n        default=None,\n        title=\"Seed\",\n        advanced=True,\n    )\n    style_type: StyleType = SchemaField(\n        description=\"Style type to apply, applicable for V_2 and above\",\n        default=StyleType.AUTO,\n        title=\"Style Type\",\n        advanced=True,\n    )\n    negative_prompt: Optional[str] = SchemaField(\n        description=\"Description of what to exclude from the image\",\n        default=None,\n        title=\"Negative Prompt\",\n        advanced=True,\n    )\n    color_palette_name: ColorPalettePreset = SchemaField(\n        description=\"Color palette preset name, choose 'None' to skip\",\n        default=ColorPalettePreset.NONE,\n        title=\"Color Palette Preset\",\n        advanced=True,\n    )",
          "functions": [],
          "classes": [],
          "simplified_code": "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[\n        Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n    )\n    prompt: str = SchemaField(\n        description=\"Text prompt for image generation\",\n        placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n        title=\"Prompt\",\n    )\n    ideogram_model_name: IdeogramModelName = SchemaField(\n        description=\"The name of the Image Generation Model, e.g., V_2\",\n        default=IdeogramModelName.V2,\n        title=\"Image Generation Model\",\n        advanced=False,\n    )\n    aspect_ratio: AspectRatio = SchemaField(\n        description=\"Aspect ratio for the generated image\",\n        default=AspectRatio.ASPECT_1_1,\n        title=\"Aspect Ratio\",\n        advanced=False,\n    )\n    upscale: UpscaleOption = SchemaField(\n        description=\"Upscale the generated image\",\n        default=UpscaleOption.NO_UPSCALE,\n        title=\"Upscale Image\",\n        advanced=False,\n    )\n    magic_prompt_option: MagicPromptOption = SchemaField(\n        description=\"Whether to use MagicPrompt for enhancing the request\",\n        default=MagicPromptOption.AUTO,\n        title=\"Magic Prompt Option\",\n        advanced=True,\n    )\n    seed: Optional[int] = SchemaField(\n        description=\"Random seed. Set for reproducible generation\",\n        default=None,\n        title=\"Seed\",\n        advanced=True,\n    )\n    style_type: StyleType = SchemaField(\n        description=\"Style type to apply, applicable for V_2 and above\",\n        default=StyleType.AUTO,\n        title=\"Style Type\",\n        advanced=True,\n    )\n    negative_prompt: Optional[str] = SchemaField(\n        description=\"Description of what to exclude from the image\",\n        default=None,\n        title=\"Negative Prompt\",\n        advanced=True,\n    )\n    color_palette_name: ColorPalettePreset = SchemaField(\n        description=\"Color palette preset name, choose 'None' to skip\",\n        default=ColorPalettePreset.NONE,\n        title=\"Color Palette Preset\",\n        advanced=True,\n    )"
        },
        {
          "name": "Output",
          "type": "class",
          "code": "class Output(BlockSchema):\n    result: str = SchemaField(description=\"Generated image URL\")\n    error: str = SchemaField(description=\"Error message if the model run failed\")",
          "functions": [],
          "classes": [],
          "simplified_code": "class Output(BlockSchema):\n    result: str = SchemaField(description=\"Generated image URL\")\n    error: str = SchemaField(description=\"Error message if the model run failed\")"
        }
      ],
      "simplified_code": "class IdeogramModelBlock(Block):\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        ideogram_model_name: IdeogramModelName = SchemaField(\n            description=\"The name of the Image Generation Model, e.g., V_2\",\n            default=IdeogramModelName.V2,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        aspect_ratio: AspectRatio = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=AspectRatio.ASPECT_1_1,\n            title=\"Aspect Ratio\",\n            advanced=False,\n        )\n        upscale: UpscaleOption = SchemaField(\n            description=\"Upscale the generated image\",\n            default=UpscaleOption.NO_UPSCALE,\n            title=\"Upscale Image\",\n            advanced=False,\n        )\n        magic_prompt_option: MagicPromptOption = SchemaField(\n            description=\"Whether to use MagicPrompt for enhancing the request\",\n            default=MagicPromptOption.AUTO,\n            title=\"Magic Prompt Option\",\n            advanced=True,\n        )\n        seed: Optional[int] = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n            advanced=True,\n        )\n        style_type: StyleType = SchemaField(\n            description=\"Style type to apply, applicable for V_2 and above\",\n            default=StyleType.AUTO,\n            title=\"Style Type\",\n            advanced=True,\n        )\n        negative_prompt: Optional[str] = SchemaField(\n            description=\"Description of what to exclude from the image\",\n            default=None,\n            title=\"Negative Prompt\",\n            advanced=True,\n        )\n        color_palette_name: ColorPalettePreset = SchemaField(\n            description=\"Color palette preset name, choose 'None' to skip\",\n            default=ColorPalettePreset.NONE,\n            title=\"Color Palette Preset\",\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated image URL\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        seed = input_data.seed\n\n        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )\n\n        # Step 2: Upscale the image if requested\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:\n            result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )\n\n        yield \"result\", result\n\n    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):\n        url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }\n\n        if seed is not None:\n            data[\"image_request\"][\"seed\"] = seed\n\n        if negative_prompt:\n            data[\"image_request\"][\"negative_prompt\"] = negative_prompt\n\n        if color_palette_name != \"NONE\":\n            data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}\n\n        try:\n            response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]\n        except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")\n\n    def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }\n\n        try:\n            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n\n            return response.json()[\"data\"][0][\"url\"]\n\n        except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")"
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Any, Dict, Literal, Optional\n\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"ideogram\",\n    api_key=SecretStr(\"mock-ideogram-api-key\"),\n    title=\"Mock Ideogram API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
}