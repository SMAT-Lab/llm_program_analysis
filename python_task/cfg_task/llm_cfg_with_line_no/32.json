{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 552,
  "functions": [
    {
      "name": "override_auth_middleware",
      "type": "function",
      "start_line": 19,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "def override_auth_middleware():"
        },
        {
          "lineno": 20,
          "line": "    \"\"\"Override auth middleware for testing\"\"\""
        },
        {
          "lineno": 21,
          "line": "    return {\"sub\": \"test-user-id\"}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 19,
          "end_line": 21,
          "label": "def override_auth_middleware():\n    \"\"\"Override auth middleware for testing\"\"\"\n    return {\"sub\": \"test-user-id\"}",
          "successors": []
        }
      ]
    },
    {
      "name": "override_get_user_id",
      "type": "function",
      "start_line": 24,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "def override_get_user_id():"
        },
        {
          "lineno": 25,
          "line": "    \"\"\"Override get_user_id for testing\"\"\""
        },
        {
          "lineno": 26,
          "line": "    return \"test-user-id\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 24,
          "end_line": 26,
          "label": "def override_get_user_id():\n    \"\"\"Override get_user_id for testing\"\"\"\n    return \"test-user-id\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_get_agents_defaults",
      "type": "function",
      "start_line": 35,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "def test_get_agents_defaults(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 36,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 37,
          "line": "        agents=[],"
        },
        {
          "lineno": 38,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 39,
          "line": "            current_page=0,"
        },
        {
          "lineno": 40,
          "line": "            total_items=0,"
        },
        {
          "lineno": 41,
          "line": "            total_pages=0,"
        },
        {
          "lineno": 42,
          "line": "            page_size=10,"
        },
        {
          "lineno": 43,
          "line": "        ),"
        },
        {
          "lineno": 44,
          "line": "    )"
        },
        {
          "lineno": 45,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 46,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 47,
          "line": "    response = client.get(\"/agents\")"
        },
        {
          "lineno": 48,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 50,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 51,
          "line": "        response.json()"
        },
        {
          "lineno": 52,
          "line": "    )"
        },
        {
          "lineno": 53,
          "line": "    assert data.pagination.total_pages == 0"
        },
        {
          "lineno": 54,
          "line": "    assert data.agents == []"
        },
        {
          "lineno": 55,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 56,
          "line": "        featured=False,"
        },
        {
          "lineno": 57,
          "line": "        creator=None,"
        },
        {
          "lineno": 58,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 59,
          "line": "        search_query=None,"
        },
        {
          "lineno": 60,
          "line": "        category=None,"
        },
        {
          "lineno": 61,
          "line": "        page=1,"
        },
        {
          "lineno": 62,
          "line": "        page_size=20,"
        },
        {
          "lineno": 63,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 35,
          "end_line": 47,
          "label": "def test_get_agents_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents\")",
          "successors": [
            {
              "id": 2,
              "start_line": 48,
              "end_line": 54,
              "label": "assert response.status_code == 200\n\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)\nassert data.pagination.total_pages == 0\nassert data.agents == []",
              "successors": [
                {
                  "id": 3,
                  "start_line": 55,
                  "end_line": 63,
                  "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=None,\n    search_query=None,\n    category=None,\n    page=1,\n    page_size=20,\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_featured",
      "type": "function",
      "start_line": 66,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 66,
          "line": "def test_get_agents_featured(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 67,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 68,
          "line": "        agents=["
        },
        {
          "lineno": 69,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 70,
          "line": "                slug=\"featured-agent\","
        },
        {
          "lineno": 71,
          "line": "                agent_name=\"Featured Agent\","
        },
        {
          "lineno": 72,
          "line": "                agent_image=\"featured.jpg\","
        },
        {
          "lineno": 73,
          "line": "                creator=\"creator1\","
        },
        {
          "lineno": 74,
          "line": "                creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 75,
          "line": "                sub_heading=\"Featured agent subheading\","
        },
        {
          "lineno": 76,
          "line": "                description=\"Featured agent description\","
        },
        {
          "lineno": 77,
          "line": "                runs=100,"
        },
        {
          "lineno": 78,
          "line": "                rating=4.5,"
        },
        {
          "lineno": 79,
          "line": "            )"
        },
        {
          "lineno": 80,
          "line": "        ],"
        },
        {
          "lineno": 81,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 82,
          "line": "            current_page=1,"
        },
        {
          "lineno": 83,
          "line": "            total_items=1,"
        },
        {
          "lineno": 84,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 85,
          "line": "            page_size=20,"
        },
        {
          "lineno": 86,
          "line": "        ),"
        },
        {
          "lineno": 87,
          "line": "    )"
        },
        {
          "lineno": 88,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 89,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 90,
          "line": "    response = client.get(\"/agents?featured=true\")"
        },
        {
          "lineno": 91,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 92,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 93,
          "line": "        response.json()"
        },
        {
          "lineno": 94,
          "line": "    )"
        },
        {
          "lineno": 95,
          "line": "    assert len(data.agents) == 1"
        },
        {
          "lineno": 96,
          "line": "    assert data.agents[0].slug == \"featured-agent\""
        },
        {
          "lineno": 97,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 98,
          "line": "        featured=True,"
        },
        {
          "lineno": 99,
          "line": "        creator=None,"
        },
        {
          "lineno": 100,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 101,
          "line": "        search_query=None,"
        },
        {
          "lineno": 102,
          "line": "        category=None,"
        },
        {
          "lineno": 103,
          "line": "        page=1,"
        },
        {
          "lineno": 104,
          "line": "        page_size=20,"
        },
        {
          "lineno": 105,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 66,
          "end_line": 87,
          "label": "def test_get_agents_featured(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"featured-agent\",\n                agent_name=\"Featured Agent\",\n                agent_image=\"featured.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Featured agent subheading\",\n                description=\"Featured agent description\",\n                runs=100,\n                rating=4.5,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 88,
              "end_line": 89,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 90,
                  "end_line": 91,
                  "label": "response = client.get(\"/agents?featured=true\")\n    assert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 92,
                      "end_line": 94,
                      "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 95,
                          "end_line": 96,
                          "label": "assert len(data.agents) == 1\n    assert data.agents[0].slug == \"featured-agent\"",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 97,
                              "end_line": 105,
                              "label": "mock_db_call.assert_called_once_with(\n        featured=True,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_by_creator",
      "type": "function",
      "start_line": 108,
      "end_line": 147,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 108,
          "line": "def test_get_agents_by_creator(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 109,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 110,
          "line": "        agents=["
        },
        {
          "lineno": 111,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 112,
          "line": "                slug=\"creator-agent\","
        },
        {
          "lineno": 113,
          "line": "                agent_name=\"Creator Agent\","
        },
        {
          "lineno": 114,
          "line": "                agent_image=\"agent.jpg\","
        },
        {
          "lineno": 115,
          "line": "                creator=\"specific-creator\","
        },
        {
          "lineno": 116,
          "line": "                creator_avatar=\"avatar.jpg\","
        },
        {
          "lineno": 117,
          "line": "                sub_heading=\"Creator agent subheading\","
        },
        {
          "lineno": 118,
          "line": "                description=\"Creator agent description\","
        },
        {
          "lineno": 119,
          "line": "                runs=50,"
        },
        {
          "lineno": 120,
          "line": "                rating=4.0,"
        },
        {
          "lineno": 121,
          "line": "            )"
        },
        {
          "lineno": 122,
          "line": "        ],"
        },
        {
          "lineno": 123,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 124,
          "line": "            current_page=1,"
        },
        {
          "lineno": 125,
          "line": "            total_items=1,"
        },
        {
          "lineno": 126,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 127,
          "line": "            page_size=20,"
        },
        {
          "lineno": 128,
          "line": "        ),"
        },
        {
          "lineno": 129,
          "line": "    )"
        },
        {
          "lineno": 130,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 131,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 132,
          "line": "    response = client.get(\"/agents?creator=specific-creator\")"
        },
        {
          "lineno": 133,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 134,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 135,
          "line": "        response.json()"
        },
        {
          "lineno": 136,
          "line": "    )"
        },
        {
          "lineno": 137,
          "line": "    assert len(data.agents) == 1"
        },
        {
          "lineno": 138,
          "line": "    assert data.agents[0].creator == \"specific-creator\""
        },
        {
          "lineno": 139,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 140,
          "line": "        featured=False,"
        },
        {
          "lineno": 141,
          "line": "        creator=\"specific-creator\","
        },
        {
          "lineno": 142,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 143,
          "line": "        search_query=None,"
        },
        {
          "lineno": 144,
          "line": "        category=None,"
        },
        {
          "lineno": 145,
          "line": "        page=1,"
        },
        {
          "lineno": 146,
          "line": "        page_size=20,"
        },
        {
          "lineno": 147,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 108,
          "end_line": 129,
          "label": "def test_get_agents_by_creator(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"creator-agent\",\n                agent_name=\"Creator Agent\",\n                agent_image=\"agent.jpg\",\n                creator=\"specific-creator\",\n                creator_avatar=\"avatar.jpg\",\n                sub_heading=\"Creator agent subheading\",\n                description=\"Creator agent description\",\n                runs=50,\n                rating=4.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 130,
              "end_line": 131,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 132,
                  "end_line": 138,
                  "label": "response = client.get(\"/agents?creator=specific-creator\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].creator == \"specific-creator\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 139,
                      "end_line": 147,
                      "label": "mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=\"specific-creator\",\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_sorted",
      "type": "function",
      "start_line": 150,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 150,
          "line": "def test_get_agents_sorted(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 151,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 152,
          "line": "        agents=["
        },
        {
          "lineno": 153,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 154,
          "line": "                slug=\"top-agent\","
        },
        {
          "lineno": 155,
          "line": "                agent_name=\"Top Agent\","
        },
        {
          "lineno": 156,
          "line": "                agent_image=\"top.jpg\","
        },
        {
          "lineno": 157,
          "line": "                creator=\"creator1\","
        },
        {
          "lineno": 158,
          "line": "                creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 159,
          "line": "                sub_heading=\"Top agent subheading\","
        },
        {
          "lineno": 160,
          "line": "                description=\"Top agent description\","
        },
        {
          "lineno": 161,
          "line": "                runs=1000,"
        },
        {
          "lineno": 162,
          "line": "                rating=5.0,"
        },
        {
          "lineno": 163,
          "line": "            )"
        },
        {
          "lineno": 164,
          "line": "        ],"
        },
        {
          "lineno": 165,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 166,
          "line": "            current_page=1,"
        },
        {
          "lineno": 167,
          "line": "            total_items=1,"
        },
        {
          "lineno": 168,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 169,
          "line": "            page_size=20,"
        },
        {
          "lineno": 170,
          "line": "        ),"
        },
        {
          "lineno": 171,
          "line": "    )"
        },
        {
          "lineno": 172,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 173,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 174,
          "line": "    response = client.get(\"/agents?sorted_by=runs\")"
        },
        {
          "lineno": 175,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 176,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 177,
          "line": "        response.json()"
        },
        {
          "lineno": 178,
          "line": "    )"
        },
        {
          "lineno": 179,
          "line": "    assert len(data.agents) == 1"
        },
        {
          "lineno": 180,
          "line": "    assert data.agents[0].runs == 1000"
        },
        {
          "lineno": 181,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 182,
          "line": "        featured=False,"
        },
        {
          "lineno": 183,
          "line": "        creator=None,"
        },
        {
          "lineno": 184,
          "line": "        sorted_by=\"runs\","
        },
        {
          "lineno": 185,
          "line": "        search_query=None,"
        },
        {
          "lineno": 186,
          "line": "        category=None,"
        },
        {
          "lineno": 187,
          "line": "        page=1,"
        },
        {
          "lineno": 188,
          "line": "        page_size=20,"
        },
        {
          "lineno": 189,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 150,
          "end_line": 171,
          "label": "def test_get_agents_sorted(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"top-agent\",\n                agent_name=\"Top Agent\",\n                agent_image=\"top.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Top agent subheading\",\n                description=\"Top agent description\",\n                runs=1000,\n                rating=5.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 172,
              "end_line": 173,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 174,
                  "end_line": 175,
                  "label": "response = client.get(\"/agents?sorted_by=runs\")\nassert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 176,
                      "end_line": 178,
                      "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 179,
                          "end_line": 180,
                          "label": "assert len(data.agents) == 1\nassert data.agents[0].runs == 1000",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 181,
                              "end_line": 189,
                              "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=\"runs\",\n    search_query=None,\n    category=None,\n    page=1,\n    page_size=20,\n)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_search",
      "type": "function",
      "start_line": 192,
      "end_line": 231,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 192,
          "line": "def test_get_agents_search(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 193,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 194,
          "line": "        agents=["
        },
        {
          "lineno": 195,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 196,
          "line": "                slug=\"search-agent\","
        },
        {
          "lineno": 197,
          "line": "                agent_name=\"Search Agent\","
        },
        {
          "lineno": 198,
          "line": "                agent_image=\"search.jpg\","
        },
        {
          "lineno": 199,
          "line": "                creator=\"creator1\","
        },
        {
          "lineno": 200,
          "line": "                creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 201,
          "line": "                sub_heading=\"Search agent subheading\","
        },
        {
          "lineno": 202,
          "line": "                description=\"Specific search term description\","
        },
        {
          "lineno": 203,
          "line": "                runs=75,"
        },
        {
          "lineno": 204,
          "line": "                rating=4.2,"
        },
        {
          "lineno": 205,
          "line": "            )"
        },
        {
          "lineno": 206,
          "line": "        ],"
        },
        {
          "lineno": 207,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 208,
          "line": "            current_page=1,"
        },
        {
          "lineno": 209,
          "line": "            total_items=1,"
        },
        {
          "lineno": 210,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 211,
          "line": "            page_size=20,"
        },
        {
          "lineno": 212,
          "line": "        ),"
        },
        {
          "lineno": 213,
          "line": "    )"
        },
        {
          "lineno": 214,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 215,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 216,
          "line": "    response = client.get(\"/agents?search_query=specific\")"
        },
        {
          "lineno": 217,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 218,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 219,
          "line": "        response.json()"
        },
        {
          "lineno": 220,
          "line": "    )"
        },
        {
          "lineno": 221,
          "line": "    assert len(data.agents) == 1"
        },
        {
          "lineno": 222,
          "line": "    assert \"specific\" in data.agents[0].description.lower()"
        },
        {
          "lineno": 223,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 224,
          "line": "        featured=False,"
        },
        {
          "lineno": 225,
          "line": "        creator=None,"
        },
        {
          "lineno": 226,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 227,
          "line": "        search_query=\"specific\","
        },
        {
          "lineno": 228,
          "line": "        category=None,"
        },
        {
          "lineno": 229,
          "line": "        page=1,"
        },
        {
          "lineno": 230,
          "line": "        page_size=20,"
        },
        {
          "lineno": 231,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 192,
          "end_line": 213,
          "label": "def test_get_agents_search(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"search-agent\",\n                agent_name=\"Search Agent\",\n                agent_image=\"search.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Search agent subheading\",\n                description=\"Specific search term description\",\n                runs=75,\n                rating=4.2,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 214,
              "end_line": 215,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 216,
                  "end_line": 222,
                  "label": "response = client.get(\"/agents?search_query=specific\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert \"specific\" in data.agents[0].description.lower()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 223,
                      "end_line": 231,
                      "label": "mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=\"specific\",\n        category=None,\n        page=1,\n        page_size=20,\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_category",
      "type": "function",
      "start_line": 234,
      "end_line": 272,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 234,
          "line": "def test_get_agents_category(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 235,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 236,
          "line": "        agents=["
        },
        {
          "lineno": 237,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 238,
          "line": "                slug=\"category-agent\","
        },
        {
          "lineno": 239,
          "line": "                agent_name=\"Category Agent\","
        },
        {
          "lineno": 240,
          "line": "                agent_image=\"category.jpg\","
        },
        {
          "lineno": 241,
          "line": "                creator=\"creator1\","
        },
        {
          "lineno": 242,
          "line": "                creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 243,
          "line": "                sub_heading=\"Category agent subheading\","
        },
        {
          "lineno": 244,
          "line": "                description=\"Category agent description\","
        },
        {
          "lineno": 245,
          "line": "                runs=60,"
        },
        {
          "lineno": 246,
          "line": "                rating=4.1,"
        },
        {
          "lineno": 247,
          "line": "            )"
        },
        {
          "lineno": 248,
          "line": "        ],"
        },
        {
          "lineno": 249,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 250,
          "line": "            current_page=1,"
        },
        {
          "lineno": 251,
          "line": "            total_items=1,"
        },
        {
          "lineno": 252,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 253,
          "line": "            page_size=20,"
        },
        {
          "lineno": 254,
          "line": "        ),"
        },
        {
          "lineno": 255,
          "line": "    )"
        },
        {
          "lineno": 256,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 257,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 258,
          "line": "    response = client.get(\"/agents?category=test-category\")"
        },
        {
          "lineno": 259,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 260,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 261,
          "line": "        response.json()"
        },
        {
          "lineno": 262,
          "line": "    )"
        },
        {
          "lineno": 263,
          "line": "    assert len(data.agents) == 1"
        },
        {
          "lineno": 264,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 265,
          "line": "        featured=False,"
        },
        {
          "lineno": 266,
          "line": "        creator=None,"
        },
        {
          "lineno": 267,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 268,
          "line": "        search_query=None,"
        },
        {
          "lineno": 269,
          "line": "        category=\"test-category\","
        },
        {
          "lineno": 270,
          "line": "        page=1,"
        },
        {
          "lineno": 271,
          "line": "        page_size=20,"
        },
        {
          "lineno": 272,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 234,
          "end_line": 255,
          "label": "def test_get_agents_category(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"category-agent\",\n                agent_name=\"Category Agent\",\n                agent_image=\"category.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Category agent subheading\",\n                description=\"Category agent description\",\n                runs=60,\n                rating=4.1,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 256,
              "end_line": 257,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 258,
                  "end_line": 263,
                  "label": "response = client.get(\"/agents?category=test-category\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 264,
                      "end_line": 272,
                      "label": "mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=\"test-category\",\n        page=1,\n        page_size=20,\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_pagination",
      "type": "function",
      "start_line": 275,
      "end_line": 316,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 275,
          "line": "def test_get_agents_pagination(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 276,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentsResponse("
        },
        {
          "lineno": 277,
          "line": "        agents=["
        },
        {
          "lineno": 278,
          "line": "            backend.server.v2.store.model.StoreAgent("
        },
        {
          "lineno": 279,
          "line": "                slug=f\"agent-{i}\","
        },
        {
          "lineno": 280,
          "line": "                agent_name=f\"Agent {i}\","
        },
        {
          "lineno": 281,
          "line": "                agent_image=f\"agent{i}.jpg\","
        },
        {
          "lineno": 282,
          "line": "                creator=\"creator1\","
        },
        {
          "lineno": 283,
          "line": "                creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 284,
          "line": "                sub_heading=f\"Agent {i} subheading\","
        },
        {
          "lineno": 285,
          "line": "                description=f\"Agent {i} description\","
        },
        {
          "lineno": 286,
          "line": "                runs=i * 10,"
        },
        {
          "lineno": 287,
          "line": "                rating=4.0,"
        },
        {
          "lineno": 288,
          "line": "            )"
        },
        {
          "lineno": 289,
          "line": "            for i in range(5)"
        },
        {
          "lineno": 290,
          "line": "        ],"
        },
        {
          "lineno": 291,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 292,
          "line": "            current_page=2,"
        },
        {
          "lineno": 293,
          "line": "            total_items=15,"
        },
        {
          "lineno": 294,
          "line": "            total_pages=3,"
        },
        {
          "lineno": 295,
          "line": "            page_size=5,"
        },
        {
          "lineno": 296,
          "line": "        ),"
        },
        {
          "lineno": 297,
          "line": "    )"
        },
        {
          "lineno": 298,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 299,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 300,
          "line": "    response = client.get(\"/agents?page=2&page_size=5\")"
        },
        {
          "lineno": 301,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 302,
          "line": "    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate("
        },
        {
          "lineno": 303,
          "line": "        response.json()"
        },
        {
          "lineno": 304,
          "line": "    )"
        },
        {
          "lineno": 305,
          "line": "    assert len(data.agents) == 5"
        },
        {
          "lineno": 306,
          "line": "    assert data.pagination.current_page == 2"
        },
        {
          "lineno": 307,
          "line": "    assert data.pagination.page_size == 5"
        },
        {
          "lineno": 308,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 309,
          "line": "        featured=False,"
        },
        {
          "lineno": 310,
          "line": "        creator=None,"
        },
        {
          "lineno": 311,
          "line": "        sorted_by=None,"
        },
        {
          "lineno": 312,
          "line": "        search_query=None,"
        },
        {
          "lineno": 313,
          "line": "        category=None,"
        },
        {
          "lineno": 314,
          "line": "        page=2,"
        },
        {
          "lineno": 315,
          "line": "        page_size=5,"
        },
        {
          "lineno": 316,
          "line": "    )"
        }
      ],
      "blocks": []
    },
    {
      "name": "test_get_agents_malformed_request",
      "type": "function",
      "start_line": 319,
      "end_line": 334,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 319,
          "line": "def test_get_agents_malformed_request(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 320,
          "line": "    # Test with invalid page number"
        },
        {
          "lineno": 321,
          "line": "    response = client.get(\"/agents?page=-1\")"
        },
        {
          "lineno": 322,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 323,
          "line": ""
        },
        {
          "lineno": 324,
          "line": "    # Test with invalid page size"
        },
        {
          "lineno": 325,
          "line": "    response = client.get(\"/agents?page_size=0\")"
        },
        {
          "lineno": 326,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 327,
          "line": ""
        },
        {
          "lineno": 328,
          "line": "    # Test with non-numeric values"
        },
        {
          "lineno": 329,
          "line": "    response = client.get(\"/agents?page=abc&page_size=def\")"
        },
        {
          "lineno": 330,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 331,
          "line": ""
        },
        {
          "lineno": 332,
          "line": "    # Verify no DB calls were made"
        },
        {
          "lineno": 333,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
        },
        {
          "lineno": 334,
          "line": "    mock_db_call.assert_not_called()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 319,
          "end_line": 320,
          "label": "def test_get_agents_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number",
          "successors": [
            {
              "id": 2,
              "start_line": 321,
              "end_line": 322,
              "label": "response = client.get(\"/agents?page=-1\")\n    assert response.status_code == 422",
              "successors": [
                {
                  "id": 3,
                  "start_line": 324,
                  "end_line": 325,
                  "label": "# Test with invalid page size\n    response = client.get(\"/agents?page_size=0\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 326,
                      "end_line": 326,
                      "label": "assert response.status_code == 422",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 328,
                          "end_line": 329,
                          "label": "# Test with non-numeric values\n    response = client.get(\"/agents?page=abc&page_size=def\")",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 330,
                              "end_line": 330,
                              "label": "assert response.status_code == 422",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 332,
                                  "end_line": 334,
                                  "label": "# Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.assert_not_called()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agent_details",
      "type": "function",
      "start_line": 337,
      "end_line": 365,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 337,
          "line": "def test_get_agent_details(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 338,
          "line": "    mocked_value = backend.server.v2.store.model.StoreAgentDetails("
        },
        {
          "lineno": 339,
          "line": "        store_listing_version_id=\"test-version-id\","
        },
        {
          "lineno": 340,
          "line": "        slug=\"test-agent\","
        },
        {
          "lineno": 341,
          "line": "        agent_name=\"Test Agent\","
        },
        {
          "lineno": 342,
          "line": "        agent_video=\"video.mp4\","
        },
        {
          "lineno": 343,
          "line": "        agent_image=[\"image1.jpg\", \"image2.jpg\"],"
        },
        {
          "lineno": 344,
          "line": "        creator=\"creator1\","
        },
        {
          "lineno": 345,
          "line": "        creator_avatar=\"avatar1.jpg\","
        },
        {
          "lineno": 346,
          "line": "        sub_heading=\"Test agent subheading\","
        },
        {
          "lineno": 347,
          "line": "        description=\"Test agent description\","
        },
        {
          "lineno": 348,
          "line": "        categories=[\"category1\", \"category2\"],"
        },
        {
          "lineno": 349,
          "line": "        runs=100,"
        },
        {
          "lineno": 350,
          "line": "        rating=4.5,"
        },
        {
          "lineno": 351,
          "line": "        versions=[\"1.0.0\", \"1.1.0\"],"
        },
        {
          "lineno": 352,
          "line": "        last_updated=datetime.datetime.now(),"
        },
        {
          "lineno": 353,
          "line": "    )"
        },
        {
          "lineno": 354,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")"
        },
        {
          "lineno": 355,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 356,
          "line": ""
        },
        {
          "lineno": 357,
          "line": "    response = client.get(\"/agents/creator1/test-agent\")"
        },
        {
          "lineno": 358,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 359,
          "line": ""
        },
        {
          "lineno": 360,
          "line": "    data = backend.server.v2.store.model.StoreAgentDetails.model_validate("
        },
        {
          "lineno": 361,
          "line": "        response.json()"
        },
        {
          "lineno": 362,
          "line": "    )"
        },
        {
          "lineno": 363,
          "line": "    assert data.agent_name == \"Test Agent\""
        },
        {
          "lineno": 364,
          "line": "    assert data.creator == \"creator1\""
        },
        {
          "lineno": 365,
          "line": "    mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 337,
          "end_line": 353,
          "label": "def test_get_agent_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentDetails(\n        store_listing_version_id=\"test-version-id\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image1.jpg\", \"image2.jpg\"],\n        creator=\"creator1\",\n        creator_avatar=\"avatar1.jpg\",\n        sub_heading=\"Test agent subheading\",\n        description=\"Test agent description\",\n        categories=[\"category1\", \"category2\"],\n        runs=100,\n        rating=4.5,\n        versions=[\"1.0.0\", \"1.1.0\"],\n        last_updated=datetime.datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 354,
              "end_line": 355,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\nmock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 357,
                  "end_line": 358,
                  "label": "response = client.get(\"/agents/creator1/test-agent\")\nassert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 360,
                      "end_line": 365,
                      "label": "data = backend.server.v2.store.model.StoreAgentDetails.model_validate(\n    response.json()\n)\nassert data.agent_name == \"Test Agent\"\nassert data.creator == \"creator1\"\nmock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creators_defaults",
      "type": "function",
      "start_line": 368,
      "end_line": 391,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 368,
          "line": "def test_get_creators_defaults(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 369,
          "line": "    mocked_value = backend.server.v2.store.model.CreatorsResponse("
        },
        {
          "lineno": 370,
          "line": "        creators=[],"
        },
        {
          "lineno": 371,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 372,
          "line": "            current_page=0,"
        },
        {
          "lineno": 373,
          "line": "            total_items=0,"
        },
        {
          "lineno": 374,
          "line": "            total_pages=0,"
        },
        {
          "lineno": 375,
          "line": "            page_size=10,"
        },
        {
          "lineno": 376,
          "line": "        ),"
        },
        {
          "lineno": 377,
          "line": "    )"
        },
        {
          "lineno": 378,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")"
        },
        {
          "lineno": 379,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 380,
          "line": ""
        },
        {
          "lineno": 381,
          "line": "    response = client.get(\"/creators\")"
        },
        {
          "lineno": 382,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 383,
          "line": ""
        },
        {
          "lineno": 384,
          "line": "    data = backend.server.v2.store.model.CreatorsResponse.model_validate("
        },
        {
          "lineno": 385,
          "line": "        response.json()"
        },
        {
          "lineno": 386,
          "line": "    )"
        },
        {
          "lineno": 387,
          "line": "    assert data.pagination.total_pages == 0"
        },
        {
          "lineno": 388,
          "line": "    assert data.creators == []"
        },
        {
          "lineno": 389,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 390,
          "line": "        featured=False, search_query=None, sorted_by=None, page=1, page_size=20"
        },
        {
          "lineno": 391,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 368,
          "end_line": 391,
          "label": "def test_get_creators_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creators\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.total_pages == 0\n    assert data.creators == []\n    mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=1, page_size=20\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "test_get_creators_pagination",
      "type": "function",
      "start_line": 394,
      "end_line": 430,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 394,
          "line": "def test_get_creators_pagination(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 395,
          "line": "    mocked_value = backend.server.v2.store.model.CreatorsResponse("
        },
        {
          "lineno": 396,
          "line": "        creators=["
        },
        {
          "lineno": 397,
          "line": "            backend.server.v2.store.model.Creator("
        },
        {
          "lineno": 398,
          "line": "                name=f\"Creator {i}\","
        },
        {
          "lineno": 399,
          "line": "                username=f\"creator{i}\","
        },
        {
          "lineno": 400,
          "line": "                description=f\"Creator {i} description\","
        },
        {
          "lineno": 401,
          "line": "                avatar_url=f\"avatar{i}.jpg\","
        },
        {
          "lineno": 402,
          "line": "                num_agents=1,"
        },
        {
          "lineno": 403,
          "line": "                agent_rating=4.5,"
        },
        {
          "lineno": 404,
          "line": "                agent_runs=100,"
        },
        {
          "lineno": 405,
          "line": "                is_featured=False,"
        },
        {
          "lineno": 406,
          "line": "            )"
        },
        {
          "lineno": 407,
          "line": "            for i in range(5)"
        },
        {
          "lineno": 408,
          "line": "        ],"
        },
        {
          "lineno": 409,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 410,
          "line": "            current_page=2,"
        },
        {
          "lineno": 411,
          "line": "            total_items=15,"
        },
        {
          "lineno": 412,
          "line": "            total_pages=3,"
        },
        {
          "lineno": 413,
          "line": "            page_size=5,"
        },
        {
          "lineno": 414,
          "line": "        ),"
        },
        {
          "lineno": 415,
          "line": "    )"
        },
        {
          "lineno": 416,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")"
        },
        {
          "lineno": 417,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 418,
          "line": ""
        },
        {
          "lineno": 419,
          "line": "    response = client.get(\"/creators?page=2&page_size=5\")"
        },
        {
          "lineno": 420,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 421,
          "line": ""
        },
        {
          "lineno": 422,
          "line": "    data = backend.server.v2.store.model.CreatorsResponse.model_validate("
        },
        {
          "lineno": 423,
          "line": "        response.json()"
        },
        {
          "lineno": 424,
          "line": "    )"
        },
        {
          "lineno": 425,
          "line": "    assert len(data.creators) == 5"
        },
        {
          "lineno": 426,
          "line": "    assert data.pagination.current_page == 2"
        },
        {
          "lineno": 427,
          "line": "    assert data.pagination.page_size == 5"
        },
        {
          "lineno": 428,
          "line": "    mock_db_call.assert_called_once_with("
        },
        {
          "lineno": 429,
          "line": "        featured=False, search_query=None, sorted_by=None, page=2, page_size=5"
        },
        {
          "lineno": 430,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 394,
          "end_line": 415,
          "label": "def test_get_creators_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[\n            backend.server.v2.store.model.Creator(\n                name=f\"Creator {i}\",\n                username=f\"creator{i}\",\n                description=f\"Creator {i} description\",\n                avatar_url=f\"avatar{i}.jpg\",\n                num_agents=1,\n                agent_rating=4.5,\n                agent_runs=100,\n                is_featured=False,\n            )\n            for i in range(5)\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=15,\n            total_pages=3,\n            page_size=5,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 416,
              "end_line": 417,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 419,
                  "end_line": 420,
                  "label": "response = client.get(\"/creators?page=2&page_size=5\")\n    assert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 422,
                      "end_line": 427,
                      "label": "data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.creators) == 5\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 428,
                          "end_line": 430,
                          "label": "mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=2, page_size=5\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creators_malformed_request",
      "type": "function",
      "start_line": 433,
      "end_line": 448,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 433,
          "line": "def test_get_creators_malformed_request(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 434,
          "line": "    # Test with invalid page number"
        },
        {
          "lineno": 435,
          "line": "    response = client.get(\"/creators?page=-1\")"
        },
        {
          "lineno": 436,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 437,
          "line": ""
        },
        {
          "lineno": 438,
          "line": "    # Test with invalid page size"
        },
        {
          "lineno": 439,
          "line": "    response = client.get(\"/creators?page_size=0\")"
        },
        {
          "lineno": 440,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 441,
          "line": ""
        },
        {
          "lineno": 442,
          "line": "    # Test with non-numeric values"
        },
        {
          "lineno": 443,
          "line": "    response = client.get(\"/creators?page=abc&page_size=def\")"
        },
        {
          "lineno": 444,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 445,
          "line": ""
        },
        {
          "lineno": 446,
          "line": "    # Verify no DB calls were made"
        },
        {
          "lineno": 447,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")"
        },
        {
          "lineno": 448,
          "line": "    mock_db_call.assert_not_called()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 433,
          "end_line": 433,
          "label": "def test_get_creators_malformed_request(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "start_line": 434,
              "end_line": 440,
              "label": "    # Test with invalid page number\n    response = client.get(\"/creators?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/creators?page_size=0\")\n    assert response.status_code == 422\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 442,
                  "end_line": 444,
                  "label": "    # Test with non-numeric values\n    response = client.get(\"/creators?page=abc&page_size=def\")\n    assert response.status_code == 422\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 446,
                      "end_line": 448,
                      "label": "    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.assert_not_called()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creator_details",
      "type": "function",
      "start_line": 451,
      "end_line": 471,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 451,
          "line": "def test_get_creator_details(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 452,
          "line": "    mocked_value = backend.server.v2.store.model.CreatorDetails("
        },
        {
          "lineno": 453,
          "line": "        name=\"Test User\","
        },
        {
          "lineno": 454,
          "line": "        username=\"creator1\","
        },
        {
          "lineno": 455,
          "line": "        description=\"Test creator description\","
        },
        {
          "lineno": 456,
          "line": "        links=[\"link1.com\", \"link2.com\"],"
        },
        {
          "lineno": 457,
          "line": "        avatar_url=\"avatar.jpg\","
        },
        {
          "lineno": 458,
          "line": "        agent_rating=4.8,"
        },
        {
          "lineno": 459,
          "line": "        agent_runs=1000,"
        },
        {
          "lineno": 460,
          "line": "        top_categories=[\"category1\", \"category2\"],"
        },
        {
          "lineno": 461,
          "line": "    )"
        },
        {
          "lineno": 462,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")"
        },
        {
          "lineno": 463,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 464,
          "line": ""
        },
        {
          "lineno": 465,
          "line": "    response = client.get(\"/creator/creator1\")"
        },
        {
          "lineno": 466,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 467,
          "line": ""
        },
        {
          "lineno": 468,
          "line": "    data = backend.server.v2.store.model.CreatorDetails.model_validate(response.json())"
        },
        {
          "lineno": 469,
          "line": "    assert data.username == \"creator1\""
        },
        {
          "lineno": 470,
          "line": "    assert data.name == \"Test User\""
        },
        {
          "lineno": 471,
          "line": "    mock_db_call.assert_called_once_with(username=\"creator1\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 451,
          "end_line": 471,
          "label": "def test_get_creator_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorDetails(\n        name=\"Test User\",\n        username=\"creator1\",\n        description=\"Test creator description\",\n        links=[\"link1.com\", \"link2.com\"],\n        avatar_url=\"avatar.jpg\",\n        agent_rating=4.8,\n        agent_runs=1000,\n        top_categories=[\"category1\", \"category2\"],\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creator/creator1\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorDetails.model_validate(response.json())\n    assert data.username == \"creator1\"\n    assert data.name == \"Test User\"\n    mock_db_call.assert_called_once_with(username=\"creator1\")",
          "successors": []
        }
      ]
    },
    {
      "name": "test_get_submissions_success",
      "type": "function",
      "start_line": 474,
      "end_line": 510,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 474,
          "line": "def test_get_submissions_success(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 475,
          "line": "    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse("
        },
        {
          "lineno": 476,
          "line": "        submissions=["
        },
        {
          "lineno": 477,
          "line": "            backend.server.v2.store.model.StoreSubmission("
        },
        {
          "lineno": 478,
          "line": "                name=\"Test Agent\","
        },
        {
          "lineno": 479,
          "line": "                description=\"Test agent description\","
        },
        {
          "lineno": 480,
          "line": "                image_urls=[\"test.jpg\"],"
        },
        {
          "lineno": 481,
          "line": "                date_submitted=datetime.datetime.now(),"
        },
        {
          "lineno": 482,
          "line": "                status=prisma.enums.SubmissionStatus.APPROVED,"
        },
        {
          "lineno": 483,
          "line": "                runs=50,"
        },
        {
          "lineno": 484,
          "line": "                rating=4.2,"
        },
        {
          "lineno": 485,
          "line": "                agent_id=\"test-agent-id\","
        },
        {
          "lineno": 486,
          "line": "                agent_version=1,"
        },
        {
          "lineno": 487,
          "line": "                sub_heading=\"Test agent subheading\","
        },
        {
          "lineno": 488,
          "line": "                slug=\"test-agent\","
        },
        {
          "lineno": 489,
          "line": "            )"
        },
        {
          "lineno": 490,
          "line": "        ],"
        },
        {
          "lineno": 491,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 492,
          "line": "            current_page=1,"
        },
        {
          "lineno": 493,
          "line": "            total_items=1,"
        },
        {
          "lineno": 494,
          "line": "            total_pages=1,"
        },
        {
          "lineno": 495,
          "line": "            page_size=20,"
        },
        {
          "lineno": 496,
          "line": "        ),"
        },
        {
          "lineno": 497,
          "line": "    )"
        },
        {
          "lineno": 498,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")"
        },
        {
          "lineno": 499,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 500,
          "line": ""
        },
        {
          "lineno": 501,
          "line": "    response = client.get(\"/submissions\")"
        },
        {
          "lineno": 502,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 503,
          "line": ""
        },
        {
          "lineno": 504,
          "line": "    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate("
        },
        {
          "lineno": 505,
          "line": "        response.json()"
        },
        {
          "lineno": 506,
          "line": "    )"
        },
        {
          "lineno": 507,
          "line": "    assert len(data.submissions) == 1"
        },
        {
          "lineno": 508,
          "line": "    assert data.submissions[0].name == \"Test Agent\""
        },
        {
          "lineno": 509,
          "line": "    assert data.pagination.current_page == 1"
        },
        {
          "lineno": 510,
          "line": "    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 474,
          "end_line": 499,
          "label": "def test_get_submissions_success(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[\n            backend.server.v2.store.model.StoreSubmission(\n                name=\"Test Agent\",\n                description=\"Test agent description\",\n                image_urls=[\"test.jpg\"],\n                date_submitted=datetime.datetime.now(),\n                status=prisma.enums.SubmissionStatus.APPROVED,\n                runs=50,\n                rating=4.2,\n                agent_id=\"test-agent-id\",\n                agent_version=1,\n                sub_heading=\"Test agent subheading\",\n                slug=\"test-agent\",\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value",
          "successors": [
            {
              "id": 2,
              "start_line": 501,
              "end_line": 502,
              "label": "response = client.get(\"/submissions\")\n    assert response.status_code == 200",
              "successors": [
                {
                  "id": 3,
                  "start_line": 504,
                  "end_line": 510,
                  "label": "data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.submissions) == 1\n    assert data.submissions[0].name == \"Test Agent\"\n    assert data.pagination.current_page == 1\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_submissions_pagination",
      "type": "function",
      "start_line": 513,
      "end_line": 534,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 513,
          "line": "def test_get_submissions_pagination(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 514,
          "line": "    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse("
        },
        {
          "lineno": 515,
          "line": "        submissions=[],"
        },
        {
          "lineno": 516,
          "line": "        pagination=backend.server.v2.store.model.Pagination("
        },
        {
          "lineno": 517,
          "line": "            current_page=2,"
        },
        {
          "lineno": 518,
          "line": "            total_items=10,"
        },
        {
          "lineno": 519,
          "line": "            total_pages=2,"
        },
        {
          "lineno": 520,
          "line": "            page_size=5,"
        },
        {
          "lineno": 521,
          "line": "        ),"
        },
        {
          "lineno": 522,
          "line": "    )"
        },
        {
          "lineno": 523,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")"
        },
        {
          "lineno": 524,
          "line": "    mock_db_call.return_value = mocked_value"
        },
        {
          "lineno": 525,
          "line": ""
        },
        {
          "lineno": 526,
          "line": "    response = client.get(\"/submissions?page=2&page_size=5\")"
        },
        {
          "lineno": 527,
          "line": "    assert response.status_code == 200"
        },
        {
          "lineno": 528,
          "line": ""
        },
        {
          "lineno": 529,
          "line": "    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate("
        },
        {
          "lineno": 530,
          "line": "        response.json()"
        },
        {
          "lineno": 531,
          "line": "    )"
        },
        {
          "lineno": 532,
          "line": "    assert data.pagination.current_page == 2"
        },
        {
          "lineno": 533,
          "line": "    assert data.pagination.page_size == 5"
        },
        {
          "lineno": 534,
          "line": "    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 513,
          "end_line": 522,
          "label": "def test_get_submissions_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=10,\n            total_pages=2,\n            page_size=5,\n        ),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 523,
              "end_line": 524,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 526,
                  "end_line": 527,
                  "label": "response = client.get(\"/submissions?page=2&page_size=5\")\n    assert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 529,
                      "end_line": 534,
                      "label": "data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_submissions_malformed_request",
      "type": "function",
      "start_line": 537,
      "end_line": 552,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 537,
          "line": "def test_get_submissions_malformed_request(mocker: pytest_mock.MockFixture):"
        },
        {
          "lineno": 538,
          "line": "    # Test with invalid page number"
        },
        {
          "lineno": 539,
          "line": "    response = client.get(\"/submissions?page=-1\")"
        },
        {
          "lineno": 540,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 541,
          "line": ""
        },
        {
          "lineno": 542,
          "line": "    # Test with invalid page size"
        },
        {
          "lineno": 543,
          "line": "    response = client.get(\"/submissions?page_size=0\")"
        },
        {
          "lineno": 544,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 545,
          "line": ""
        },
        {
          "lineno": 546,
          "line": "    # Test with non-numeric values"
        },
        {
          "lineno": 547,
          "line": "    response = client.get(\"/submissions?page=abc&page_size=def\")"
        },
        {
          "lineno": 548,
          "line": "    assert response.status_code == 422"
        },
        {
          "lineno": 549,
          "line": ""
        },
        {
          "lineno": 550,
          "line": "    # Verify no DB calls were made"
        },
        {
          "lineno": 551,
          "line": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")"
        },
        {
          "lineno": 552,
          "line": "    mock_db_call.assert_not_called()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 537,
          "end_line": 537,
          "label": "def test_get_submissions_malformed_request(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "start_line": 538,
              "end_line": 540,
              "label": "# Test with invalid page number\n    response = client.get(\"/submissions?page=-1\")\n    assert response.status_code == 422",
              "successors": [
                {
                  "id": 3,
                  "start_line": 542,
                  "end_line": 544,
                  "label": "# Test with invalid page size\n    response = client.get(\"/submissions?page_size=0\")\n    assert response.status_code == 422",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 546,
                      "end_line": 548,
                      "label": "# Test with non-numeric values\n    response = client.get(\"/submissions?page=abc&page_size=def\")\n    assert response.status_code == 422",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 550,
                          "end_line": 552,
                          "label": "# Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.assert_not_called()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import datetime"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import autogpt_libs.auth.depends"
    },
    {
      "lineno": 4,
      "line": "import autogpt_libs.auth.middleware"
    },
    {
      "lineno": 5,
      "line": "import fastapi"
    },
    {
      "lineno": 6,
      "line": "import fastapi.testclient"
    },
    {
      "lineno": 7,
      "line": "import prisma.enums"
    },
    {
      "lineno": 8,
      "line": "import pytest_mock"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "import backend.server.v2.store.model"
    },
    {
      "lineno": 11,
      "line": "import backend.server.v2.store.routes"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "app = fastapi.FastAPI()"
    },
    {
      "lineno": 14,
      "line": "app.include_router(backend.server.v2.store.routes.router)"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "client = fastapi.testclient.TestClient(app)"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": "app.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware] = ("
    },
    {
      "lineno": 30,
      "line": "    override_auth_middleware"
    },
    {
      "lineno": 31,
      "line": ")"
    },
    {
      "lineno": 32,
      "line": "app.dependency_overrides[autogpt_libs.auth.depends.get_user_id] = override_get_user_id"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 65,
      "line": ""
    },
    {
      "lineno": 106,
      "line": ""
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 148,
      "line": ""
    },
    {
      "lineno": 149,
      "line": ""
    },
    {
      "lineno": 190,
      "line": ""
    },
    {
      "lineno": 191,
      "line": ""
    },
    {
      "lineno": 232,
      "line": ""
    },
    {
      "lineno": 233,
      "line": ""
    },
    {
      "lineno": 273,
      "line": ""
    },
    {
      "lineno": 274,
      "line": ""
    },
    {
      "lineno": 317,
      "line": ""
    },
    {
      "lineno": 318,
      "line": ""
    },
    {
      "lineno": 335,
      "line": ""
    },
    {
      "lineno": 336,
      "line": ""
    },
    {
      "lineno": 366,
      "line": ""
    },
    {
      "lineno": 367,
      "line": ""
    },
    {
      "lineno": 392,
      "line": ""
    },
    {
      "lineno": 393,
      "line": ""
    },
    {
      "lineno": 431,
      "line": ""
    },
    {
      "lineno": 432,
      "line": ""
    },
    {
      "lineno": 449,
      "line": ""
    },
    {
      "lineno": 450,
      "line": ""
    },
    {
      "lineno": 472,
      "line": ""
    },
    {
      "lineno": 473,
      "line": ""
    },
    {
      "lineno": 511,
      "line": ""
    },
    {
      "lineno": 512,
      "line": ""
    },
    {
      "lineno": 535,
      "line": ""
    },
    {
      "lineno": 536,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import datetime",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 8,
          "label": "import autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock",
          "successors": [
            {
              "id": 3,
              "start_line": 10,
              "end_line": 11,
              "label": "import backend.server.v2.store.model\nimport backend.server.v2.store.routes",
              "successors": [
                {
                  "id": 4,
                  "start_line": 13,
                  "end_line": 14,
                  "label": "app = fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "client = fastapi.testclient.TestClient(app)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 29,
                          "end_line": 32,
                          "label": "app.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware] = (\n    override_auth_middleware\n)\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id] = override_get_user_id",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}