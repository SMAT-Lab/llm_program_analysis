{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [
    {
      "name": "binary_xor",
      "type": "function",
      "start_line": 4,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def binary_xor(a: int, b: int) -> str:"
        },
        {
          "lineno": 5,
          "line": "    \"\"\""
        },
        {
          "lineno": 6,
          "line": "    Take in 2 integers, convert them to binary,"
        },
        {
          "lineno": 7,
          "line": "    return a binary number that is the"
        },
        {
          "lineno": 8,
          "line": "    result of a binary xor operation on the integers provided."
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 10,
          "line": "    >>> binary_xor(25, 32)"
        },
        {
          "lineno": 11,
          "line": "    '0b111001'"
        },
        {
          "lineno": 12,
          "line": "    >>> binary_xor(37, 50)"
        },
        {
          "lineno": 13,
          "line": "    '0b010111'"
        },
        {
          "lineno": 14,
          "line": "    >>> binary_xor(21, 30)"
        },
        {
          "lineno": 15,
          "line": "    '0b01011'"
        },
        {
          "lineno": 16,
          "line": "    >>> binary_xor(58, 73)"
        },
        {
          "lineno": 17,
          "line": "    '0b1110011'"
        },
        {
          "lineno": 18,
          "line": "    >>> binary_xor(0, 255)"
        },
        {
          "lineno": 19,
          "line": "    '0b11111111'"
        },
        {
          "lineno": 20,
          "line": "    >>> binary_xor(256, 256)"
        },
        {
          "lineno": 21,
          "line": "    '0b000000000'"
        },
        {
          "lineno": 22,
          "line": "    >>> binary_xor(0, -1)"
        },
        {
          "lineno": 23,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 24,
          "line": "        ..."
        },
        {
          "lineno": 25,
          "line": "    ValueError: the value of both inputs must be positive"
        },
        {
          "lineno": 26,
          "line": "    >>> binary_xor(0, 1.1)"
        },
        {
          "lineno": 27,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 28,
          "line": "        ..."
        },
        {
          "lineno": 29,
          "line": "    TypeError: 'float' object cannot be interpreted as an integer"
        },
        {
          "lineno": 30,
          "line": "    >>> binary_xor(\"0\", \"1\")"
        },
        {
          "lineno": 31,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 32,
          "line": "        ..."
        },
        {
          "lineno": 33,
          "line": "    TypeError: '<' not supported between instances of 'str' and 'int'"
        },
        {
          "lineno": 34,
          "line": "    \"\"\""
        },
        {
          "lineno": 35,
          "line": "    if a < 0 or b < 0:"
        },
        {
          "lineno": 36,
          "line": "        raise ValueError(\"the value of both inputs must be positive\")"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    a_binary = str(bin(a))[2:]  # remove the leading \"0b\""
        },
        {
          "lineno": 39,
          "line": "    b_binary = str(bin(b))[2:]  # remove the leading \"0b\""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "    max_len = max(len(a_binary), len(b_binary))"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    return \"0b\" + \"\".join("
        },
        {
          "lineno": 44,
          "line": "        str(int(char_a != char_b))"
        },
        {
          "lineno": 45,
          "line": "        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))"
        },
        {
          "lineno": 46,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 34,
          "label": "def binary_xor(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary xor operation on the integers provided.\n\n    >>> binary_xor(25, 32)\n    '0b111001'\n    >>> binary_xor(37, 50)\n    '0b010111'\n    >>> binary_xor(21, 30)\n    '0b01011'\n    >>> binary_xor(58, 73)\n    '0b1110011'\n    >>> binary_xor(0, 255)\n    '0b11111111'\n    >>> binary_xor(256, 256)\n    '0b000000000'\n    >>> binary_xor(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_xor(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_xor(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 35,
              "end_line": 36,
              "label": "if a < 0 or b < 0:\n    raise ValueError(\"the value of both inputs must be positive\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 38,
                  "end_line": 39,
                  "label": "a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\nb_binary = str(bin(b))[2:]  # remove the leading \"0b\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 41,
                      "end_line": 41,
                      "label": "max_len = max(len(a_binary), len(b_binary))",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 43,
                          "end_line": 46,
                          "label": "return \"0b\" + \"\".join(\n    str(int(char_a != char_b))\n    for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 49,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 50,
      "line": "    import doctest"
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "start_line": 49,
      "end_line": 49,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 4,
          "start_line": 50,
          "end_line": 50,
          "label": "    import doctest",
          "successors": [
            {
              "id": 5,
              "start_line": 52,
              "end_line": 52,
              "label": "    doctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}