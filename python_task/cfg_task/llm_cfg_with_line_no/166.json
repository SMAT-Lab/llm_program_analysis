{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 529,
  "functions": [],
  "classes": [
    {
      "name": "Attachment",
      "type": "class",
      "start_line": 22,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "class Attachment(BaseModel):"
        },
        {
          "lineno": 23,
          "line": "    filename: str"
        },
        {
          "lineno": 24,
          "line": "    content_type: str"
        },
        {
          "lineno": 25,
          "line": "    size: int"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 25,
          "label": "class Attachment(BaseModel):\n    filename: str\n    content_type: str\n    size: int",
          "successors": []
        }
      ]
    },
    {
      "name": "Email",
      "type": "class",
      "start_line": 29,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "class Email(BaseModel):"
        },
        {
          "lineno": 30,
          "line": "    id: str"
        },
        {
          "lineno": 31,
          "line": "    subject: str"
        },
        {
          "lineno": 32,
          "line": "    snippet: str"
        },
        {
          "lineno": 33,
          "line": "    from_: str"
        },
        {
          "lineno": 34,
          "line": "    to: str"
        },
        {
          "lineno": 35,
          "line": "    date: str"
        },
        {
          "lineno": 36,
          "line": "    body: str = \"\"  # Default to an empty string"
        },
        {
          "lineno": 37,
          "line": "    sizeEstimate: int"
        },
        {
          "lineno": 38,
          "line": "    attachments: List[Attachment]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 29,
          "end_line": 38,
          "label": "class Email(BaseModel):\n    id: str\n    subject: str\n    snippet: str\n    from_: str\n    to: str\n    date: str\n    body: str = \"\"  # Default to an empty string\n    sizeEstimate: int\n    attachments: List[Attachment]",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailReadBlock",
      "type": "class",
      "start_line": 41,
      "end_line": 239,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 66,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 67,
              "line": "        super().__init__("
            },
            {
              "lineno": 68,
              "line": "            id=\"25310c70-b89b-43ba-b25c-4dfa7e2a481c\","
            },
            {
              "lineno": 69,
              "line": "            description=\"This block reads emails from Gmail.\","
            },
            {
              "lineno": 70,
              "line": "            categories={BlockCategory.COMMUNICATION},"
            },
            {
              "lineno": 71,
              "line": "            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,"
            },
            {
              "lineno": 72,
              "line": "            input_schema=GmailReadBlock.Input,"
            },
            {
              "lineno": 73,
              "line": "            output_schema=GmailReadBlock.Output,"
            },
            {
              "lineno": 74,
              "line": "            test_input={"
            },
            {
              "lineno": 75,
              "line": "                \"query\": \"is:unread\","
            },
            {
              "lineno": 76,
              "line": "                \"max_results\": 5,"
            },
            {
              "lineno": 77,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 78,
              "line": "            },"
            },
            {
              "lineno": 79,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 80,
              "line": "            test_output=["
            },
            {
              "lineno": 81,
              "line": "                ("
            },
            {
              "lineno": 82,
              "line": "                    \"email\","
            },
            {
              "lineno": 83,
              "line": "                    {"
            },
            {
              "lineno": 84,
              "line": "                        \"id\": \"1\","
            },
            {
              "lineno": 85,
              "line": "                        \"subject\": \"Test Email\","
            },
            {
              "lineno": 86,
              "line": "                        \"snippet\": \"This is a test email\","
            },
            {
              "lineno": 87,
              "line": "                        \"from_\": \"test@example.com\","
            },
            {
              "lineno": 88,
              "line": "                        \"to\": \"recipient@example.com\","
            },
            {
              "lineno": 89,
              "line": "                        \"date\": \"2024-01-01\","
            },
            {
              "lineno": 90,
              "line": "                        \"body\": \"This is a test email\","
            },
            {
              "lineno": 91,
              "line": "                        \"sizeEstimate\": 100,"
            },
            {
              "lineno": 92,
              "line": "                        \"attachments\": [],"
            },
            {
              "lineno": 93,
              "line": "                    },"
            },
            {
              "lineno": 94,
              "line": "                ),"
            },
            {
              "lineno": 95,
              "line": "                ("
            },
            {
              "lineno": 96,
              "line": "                    \"emails\","
            },
            {
              "lineno": 97,
              "line": "                    ["
            },
            {
              "lineno": 98,
              "line": "                        {"
            },
            {
              "lineno": 99,
              "line": "                            \"id\": \"1\","
            },
            {
              "lineno": 100,
              "line": "                            \"subject\": \"Test Email\","
            },
            {
              "lineno": 101,
              "line": "                            \"snippet\": \"This is a test email\","
            },
            {
              "lineno": 102,
              "line": "                            \"from_\": \"test@example.com\","
            },
            {
              "lineno": 103,
              "line": "                            \"to\": \"recipient@example.com\","
            },
            {
              "lineno": 104,
              "line": "                            \"date\": \"2024-01-01\","
            },
            {
              "lineno": 105,
              "line": "                            \"body\": \"This is a test email\","
            },
            {
              "lineno": 106,
              "line": "                            \"sizeEstimate\": 100,"
            },
            {
              "lineno": 107,
              "line": "                            \"attachments\": [],"
            },
            {
              "lineno": 108,
              "line": "                        }"
            },
            {
              "lineno": 109,
              "line": "                    ],"
            },
            {
              "lineno": 110,
              "line": "                ),"
            },
            {
              "lineno": 111,
              "line": "            ],"
            },
            {
              "lineno": 112,
              "line": "            test_mock={"
            },
            {
              "lineno": 113,
              "line": "                \"_read_emails\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 114,
              "line": "                    {"
            },
            {
              "lineno": 115,
              "line": "                        \"id\": \"1\","
            },
            {
              "lineno": 116,
              "line": "                        \"subject\": \"Test Email\","
            },
            {
              "lineno": 117,
              "line": "                        \"snippet\": \"This is a test email\","
            },
            {
              "lineno": 118,
              "line": "                        \"from_\": \"test@example.com\","
            },
            {
              "lineno": 119,
              "line": "                        \"to\": \"recipient@example.com\","
            },
            {
              "lineno": 120,
              "line": "                        \"date\": \"2024-01-01\","
            },
            {
              "lineno": 121,
              "line": "                        \"body\": \"This is a test email\","
            },
            {
              "lineno": 122,
              "line": "                        \"sizeEstimate\": 100,"
            },
            {
              "lineno": 123,
              "line": "                        \"attachments\": [],"
            },
            {
              "lineno": 124,
              "line": "                    }"
            },
            {
              "lineno": 125,
              "line": "                ],"
            },
            {
              "lineno": 126,
              "line": "                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},"
            },
            {
              "lineno": 127,
              "line": "            },"
            },
            {
              "lineno": 128,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 66,
              "end_line": 128,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"25310c70-b89b-43ba-b25c-4dfa7e2a481c\",\n            description=\"This block reads emails from Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            input_schema=GmailReadBlock.Input,\n            output_schema=GmailReadBlock.Output,\n            test_input={\n                \"query\": \"is:unread\",\n                \"max_results\": 5,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"email\",\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    },\n                ),\n                (\n                    \"emails\",\n                    [\n                        {\n                            \"id\": \"1\",\n                            \"subject\": \"Test Email\",\n                            \"snippet\": \"This is a test email\",\n                            \"from_\": \"test@example.com\",\n                            \"to\": \"recipient@example.com\",\n                            \"date\": \"2024-01-01\",\n                            \"body\": \"This is a test email\",\n                            \"sizeEstimate\": 100,\n                            \"attachments\": [],\n                        }\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_emails\": lambda *args, **kwargs: [\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    }\n                ],\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 130,
          "end_line": 137,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 130,
              "line": "    def run("
            },
            {
              "lineno": 131,
              "line": "        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs"
            },
            {
              "lineno": 132,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 133,
              "line": "        service = self._build_service(credentials, **kwargs)"
            },
            {
              "lineno": 134,
              "line": "        messages = self._read_emails(service, input_data.query, input_data.max_results)"
            },
            {
              "lineno": 135,
              "line": "        for email in messages:"
            },
            {
              "lineno": 136,
              "line": "            yield \"email\", email"
            },
            {
              "lineno": 137,
              "line": "        yield \"emails\", messages"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 130,
              "end_line": 134,
              "label": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = self._build_service(credentials, **kwargs)\n        messages = self._read_emails(service, input_data.query, input_data.max_results)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 135,
                  "end_line": 136,
                  "label": "        for email in messages:\n            yield \"email\", email",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 137,
                      "end_line": 137,
                      "label": "        yield \"emails\", messages",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_build_service",
          "type": "function",
          "start_line": 140,
          "end_line": 157,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 140,
              "line": "    def _build_service(credentials: GoogleCredentials, **kwargs):"
            },
            {
              "lineno": 141,
              "line": "        creds = Credentials("
            },
            {
              "lineno": 142,
              "line": "            token=("
            },
            {
              "lineno": 143,
              "line": "                credentials.access_token.get_secret_value()"
            },
            {
              "lineno": 144,
              "line": "                if credentials.access_token"
            },
            {
              "lineno": 145,
              "line": "                else None"
            },
            {
              "lineno": 146,
              "line": "            ),"
            },
            {
              "lineno": 147,
              "line": "            refresh_token=("
            },
            {
              "lineno": 148,
              "line": "                credentials.refresh_token.get_secret_value()"
            },
            {
              "lineno": 149,
              "line": "                if credentials.refresh_token"
            },
            {
              "lineno": 150,
              "line": "                else None"
            },
            {
              "lineno": 151,
              "line": "            ),"
            },
            {
              "lineno": 152,
              "line": "            token_uri=\"https://oauth2.googleapis.com/token\","
            },
            {
              "lineno": 153,
              "line": "            client_id=kwargs.get(\"client_id\"),"
            },
            {
              "lineno": 154,
              "line": "            client_secret=kwargs.get(\"client_secret\"),"
            },
            {
              "lineno": 155,
              "line": "            scopes=credentials.scopes,"
            },
            {
              "lineno": 156,
              "line": "        )"
            },
            {
              "lineno": 157,
              "line": "        return build(\"gmail\", \"v1\", credentials=creds)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 140,
              "end_line": 156,
              "label": "    def _build_service(credentials: GoogleCredentials, **kwargs):\n        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 157,
                  "end_line": 157,
                  "label": "        return build(\"gmail\", \"v1\", credentials=creds)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_read_emails",
          "type": "function",
          "start_line": 159,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 159,
              "line": "    def _read_emails("
            },
            {
              "lineno": 160,
              "line": "        self, service, query: str | None, max_results: int | None"
            },
            {
              "lineno": 161,
              "line": "    ) -> list[Email]:"
            },
            {
              "lineno": 162,
              "line": "        results = ("
            },
            {
              "lineno": 163,
              "line": "            service.users()"
            },
            {
              "lineno": 164,
              "line": "            .messages()"
            },
            {
              "lineno": 165,
              "line": "            .list(userId=\"me\", q=query or \"\", maxResults=max_results or 10)"
            },
            {
              "lineno": 166,
              "line": "            .execute()"
            },
            {
              "lineno": 167,
              "line": "        )"
            },
            {
              "lineno": 168,
              "line": "        messages = results.get(\"messages\", [])"
            },
            {
              "lineno": 169,
              "line": ""
            },
            {
              "lineno": 170,
              "line": "        email_data = []"
            },
            {
              "lineno": 171,
              "line": "        for message in messages:"
            },
            {
              "lineno": 172,
              "line": "            msg = ("
            },
            {
              "lineno": 173,
              "line": "                service.users()"
            },
            {
              "lineno": 174,
              "line": "                .messages()"
            },
            {
              "lineno": 175,
              "line": "                .get(userId=\"me\", id=message[\"id\"], format=\"full\")"
            },
            {
              "lineno": 176,
              "line": "                .execute()"
            },
            {
              "lineno": 177,
              "line": "            )"
            },
            {
              "lineno": 178,
              "line": ""
            },
            {
              "lineno": 179,
              "line": "            headers = {"
            },
            {
              "lineno": 180,
              "line": "                header[\"name\"].lower(): header[\"value\"]"
            },
            {
              "lineno": 181,
              "line": "                for header in msg[\"payload\"][\"headers\"]"
            },
            {
              "lineno": 182,
              "line": "            }"
            },
            {
              "lineno": 183,
              "line": ""
            },
            {
              "lineno": 184,
              "line": "            attachments = self._get_attachments(service, msg)"
            },
            {
              "lineno": 185,
              "line": ""
            },
            {
              "lineno": 186,
              "line": "            email = Email("
            },
            {
              "lineno": 187,
              "line": "                id=msg[\"id\"],"
            },
            {
              "lineno": 188,
              "line": "                subject=headers.get(\"subject\", \"No Subject\"),"
            },
            {
              "lineno": 189,
              "line": "                snippet=msg[\"snippet\"],"
            },
            {
              "lineno": 190,
              "line": "                from_=parseaddr(headers.get(\"from\", \"\"))[1],"
            },
            {
              "lineno": 191,
              "line": "                to=parseaddr(headers.get(\"to\", \"\"))[1],"
            },
            {
              "lineno": 192,
              "line": "                date=headers.get(\"date\", \"\"),"
            },
            {
              "lineno": 193,
              "line": "                body=self._get_email_body(msg),"
            },
            {
              "lineno": 194,
              "line": "                sizeEstimate=msg[\"sizeEstimate\"],"
            },
            {
              "lineno": 195,
              "line": "                attachments=attachments,"
            },
            {
              "lineno": 196,
              "line": "            )"
            },
            {
              "lineno": 197,
              "line": "            email_data.append(email)"
            },
            {
              "lineno": 198,
              "line": ""
            },
            {
              "lineno": 199,
              "line": "        return email_data"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 159,
              "end_line": 170,
              "label": "def _read_emails(\n        self, service, query: str | None, max_results: int | None\n    ) -> list[Email]:\n        results = (\n            service.users()\n            .messages()\n            .list(userId=\"me\", q=query or \"\", maxResults=max_results or 10)\n            .execute()\n        )\n        messages = results.get(\"messages\", [])\n\n        email_data = []",
              "successors": [
                {
                  "id": 2,
                  "start_line": 171,
                  "end_line": 197,
                  "label": "for message in messages:\n            msg = (\n                service.users()\n                .messages()\n                .get(userId=\"me\", id=message[\"id\"], format=\"full\")\n                .execute()\n            )\n\n            headers = {\n                header[\"name\"].lower(): header[\"value\"]\n                for header in msg[\"payload\"][\"headers\"]\n            }\n\n            attachments = self._get_attachments(service, msg)\n\n            email = Email(\n                id=msg[\"id\"],\n                subject=headers.get(\"subject\", \"No Subject\"),\n                snippet=msg[\"snippet\"],\n                from_=parseaddr(headers.get(\"from\", \"\"))[1],\n                to=parseaddr(headers.get(\"to\", \"\"))[1],\n                date=headers.get(\"date\", \"\"),\n                body=self._get_email_body(msg),\n                sizeEstimate=msg[\"sizeEstimate\"],\n                attachments=attachments,\n            )\n            email_data.append(email)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 199,
                      "end_line": 199,
                      "label": "return email_data",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_get_email_body",
          "type": "function",
          "start_line": 201,
          "end_line": 213,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 201,
              "line": "    def _get_email_body(self, msg):"
            },
            {
              "lineno": 202,
              "line": "        if \"parts\" in msg[\"payload\"]:"
            },
            {
              "lineno": 203,
              "line": "            for part in msg[\"payload\"][\"parts\"]:"
            },
            {
              "lineno": 204,
              "line": "                if part[\"mimeType\"] == \"text/plain\":"
            },
            {
              "lineno": 205,
              "line": "                    return base64.urlsafe_b64decode(part[\"body\"][\"data\"]).decode("
            },
            {
              "lineno": 206,
              "line": "                        \"utf-8\""
            },
            {
              "lineno": 207,
              "line": "                    )"
            },
            {
              "lineno": 208,
              "line": "        elif msg[\"payload\"][\"mimeType\"] == \"text/plain\":"
            },
            {
              "lineno": 209,
              "line": "            return base64.urlsafe_b64decode(msg[\"payload\"][\"body\"][\"data\"]).decode("
            },
            {
              "lineno": 210,
              "line": "                \"utf-8\""
            },
            {
              "lineno": 211,
              "line": "            )"
            },
            {
              "lineno": 212,
              "line": ""
            },
            {
              "lineno": 213,
              "line": "        return \"This email does not contain a text body.\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 201,
              "end_line": 201,
              "label": "    def _get_email_body(self, msg):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 202,
                  "end_line": 202,
                  "label": "        if \"parts\" in msg[\"payload\"]:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 203,
                      "end_line": 203,
                      "label": "            for part in msg[\"payload\"][\"parts\"]:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 204,
                          "end_line": 204,
                          "label": "                if part[\"mimeType\"] == \"text/plain\":",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 205,
                              "end_line": 207,
                              "label": "                    return base64.urlsafe_b64decode(part[\"body\"][\"data\"]).decode(\n                        \"utf-8\"\n                    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 208,
                      "end_line": 208,
                      "label": "        elif msg[\"payload\"][\"mimeType\"] == \"text/plain\":",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 209,
                          "end_line": 211,
                          "label": "            return base64.urlsafe_b64decode(msg[\"payload\"][\"body\"][\"data\"]).decode(\n                \"utf-8\"\n            )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 213,
                      "end_line": 213,
                      "label": "        return \"This email does not contain a text body.\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_get_attachments",
          "type": "function",
          "start_line": 215,
          "end_line": 227,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 215,
              "line": "    def _get_attachments(self, service, message):"
            },
            {
              "lineno": 216,
              "line": "        attachments = []"
            },
            {
              "lineno": 217,
              "line": "        if \"parts\" in message[\"payload\"]:"
            },
            {
              "lineno": 218,
              "line": "            for part in message[\"payload\"][\"parts\"]:"
            },
            {
              "lineno": 219,
              "line": "                if part[\"filename\"]:"
            },
            {
              "lineno": 220,
              "line": "                    attachment = Attachment("
            },
            {
              "lineno": 221,
              "line": "                        filename=part[\"filename\"],"
            },
            {
              "lineno": 222,
              "line": "                        content_type=part[\"mimeType\"],"
            },
            {
              "lineno": 223,
              "line": "                        size=int(part[\"body\"].get(\"size\", 0)),"
            },
            {
              "lineno": 224,
              "line": "                        attachment_id=part[\"body\"][\"attachmentId\"],"
            },
            {
              "lineno": 225,
              "line": "                    )"
            },
            {
              "lineno": 226,
              "line": "                    attachments.append(attachment)"
            },
            {
              "lineno": 227,
              "line": "        return attachments"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 215,
              "end_line": 216,
              "label": "    def _get_attachments(self, service, message):\n        attachments = []",
              "successors": [
                {
                  "id": 2,
                  "start_line": 217,
                  "end_line": 217,
                  "label": "        if \"parts\" in message[\"payload\"]:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 218,
                      "end_line": 226,
                      "label": "            for part in message[\"payload\"][\"parts\"]:\n                if part[\"filename\"]:\n                    attachment = Attachment(\n                        filename=part[\"filename\"],\n                        content_type=part[\"mimeType\"],\n                        size=int(part[\"body\"].get(\"size\", 0)),\n                        attachment_id=part[\"body\"][\"attachmentId\"],\n                    )\n                    attachments.append(attachment)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 227,
                  "end_line": 227,
                  "label": "        return attachments",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "download_attachment",
          "type": "function",
          "start_line": 230,
          "end_line": 239,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 230,
              "line": "    def download_attachment(self, service, message_id: str, attachment_id: str):"
            },
            {
              "lineno": 231,
              "line": "        attachment = ("
            },
            {
              "lineno": 232,
              "line": "            service.users()"
            },
            {
              "lineno": 233,
              "line": "            .messages()"
            },
            {
              "lineno": 234,
              "line": "            .attachments()"
            },
            {
              "lineno": 235,
              "line": "            .get(userId=\"me\", messageId=message_id, id=attachment_id)"
            },
            {
              "lineno": 236,
              "line": "            .execute()"
            },
            {
              "lineno": 237,
              "line": "        )"
            },
            {
              "lineno": 238,
              "line": "        file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))"
            },
            {
              "lineno": 239,
              "line": "        return file_data"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 230,
              "end_line": 239,
              "label": "    def download_attachment(self, service, message_id: str, attachment_id: str):\n        attachment = (\n            service.users()\n            .messages()\n            .attachments()\n            .get(userId=\"me\", messageId=message_id, id=attachment_id)\n            .execute()\n        )\n        file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))\n        return file_data",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 42,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 43,
              "line": "        credentials: GoogleCredentialsInput = GoogleCredentialsField("
            },
            {
              "lineno": 44,
              "line": "            [\"https://www.googleapis.com/auth/gmail.readonly\"]"
            },
            {
              "lineno": 45,
              "line": "        )"
            },
            {
              "lineno": 46,
              "line": "        query: str = SchemaField("
            },
            {
              "lineno": 47,
              "line": "            description=\"Search query for reading emails\","
            },
            {
              "lineno": 48,
              "line": "            default=\"is:unread\","
            },
            {
              "lineno": 49,
              "line": "        )"
            },
            {
              "lineno": 50,
              "line": "        max_results: int = SchemaField("
            },
            {
              "lineno": 51,
              "line": "            description=\"Maximum number of emails to retrieve\","
            },
            {
              "lineno": 52,
              "line": "            default=10,"
            },
            {
              "lineno": 53,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 53,
              "label": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.readonly\"]\n        )\n        query: str = SchemaField(\n            description=\"Search query for reading emails\",\n            default=\"is:unread\",\n        )\n        max_results: int = SchemaField(\n            description=\"Maximum number of emails to retrieve\",\n            default=10,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 55,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 56,
              "line": "        email: Email = SchemaField("
            },
            {
              "lineno": 57,
              "line": "            description=\"Email data\","
            },
            {
              "lineno": 58,
              "line": "        )"
            },
            {
              "lineno": 59,
              "line": "        emails: list[Email] = SchemaField("
            },
            {
              "lineno": 60,
              "line": "            description=\"List of email data\","
            },
            {
              "lineno": 61,
              "line": "        )"
            },
            {
              "lineno": 62,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 63,
              "line": "            description=\"Error message if any\","
            },
            {
              "lineno": 64,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 64,
              "label": "    class Output(BlockSchema):\n        email: Email = SchemaField(\n            description=\"Email data\",\n        )\n        emails: list[Email] = SchemaField(\n            description=\"List of email data\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 41,
          "line": "class GmailReadBlock(Block):"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 129,
          "line": ""
        },
        {
          "lineno": 138,
          "line": ""
        },
        {
          "lineno": 139,
          "line": "    @staticmethod"
        },
        {
          "lineno": 158,
          "line": ""
        },
        {
          "lineno": 200,
          "line": ""
        },
        {
          "lineno": 214,
          "line": ""
        },
        {
          "lineno": 228,
          "line": ""
        },
        {
          "lineno": 229,
          "line": "    # Add a new method to download attachment content"
        }
      ],
      "blocks": []
    },
    {
      "name": "GmailSendBlock",
      "type": "class",
      "start_line": 242,
      "end_line": 314,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 265,
          "end_line": 286,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 265,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 266,
              "line": "        super().__init__("
            },
            {
              "lineno": 267,
              "line": "            id=\"6c27abc2-e51d-499e-a85f-5a0041ba94f0\","
            },
            {
              "lineno": 268,
              "line": "            description=\"This block sends an email using Gmail.\","
            },
            {
              "lineno": 269,
              "line": "            categories={BlockCategory.COMMUNICATION},"
            },
            {
              "lineno": 270,
              "line": "            input_schema=GmailSendBlock.Input,"
            },
            {
              "lineno": 271,
              "line": "            output_schema=GmailSendBlock.Output,"
            },
            {
              "lineno": 272,
              "line": "            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,"
            },
            {
              "lineno": 273,
              "line": "            test_input={"
            },
            {
              "lineno": 274,
              "line": "                \"to\": \"recipient@example.com\","
            },
            {
              "lineno": 275,
              "line": "                \"subject\": \"Test Email\","
            },
            {
              "lineno": 276,
              "line": "                \"body\": \"This is a test email sent from GmailSendBlock.\","
            },
            {
              "lineno": 277,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 278,
              "line": "            },"
            },
            {
              "lineno": 279,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 280,
              "line": "            test_output=["
            },
            {
              "lineno": 281,
              "line": "                (\"result\", {\"id\": \"1\", \"status\": \"sent\"}),"
            },
            {
              "lineno": 282,
              "line": "            ],"
            },
            {
              "lineno": 283,
              "line": "            test_mock={"
            },
            {
              "lineno": 284,
              "line": "                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},"
            },
            {
              "lineno": 285,
              "line": "            },"
            },
            {
              "lineno": 286,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 265,
              "end_line": 286,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"6c27abc2-e51d-499e-a85f-5a0041ba94f0\",\n            description=\"This block sends an email using Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailSendBlock.Input,\n            output_schema=GmailSendBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"to\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email sent from GmailSendBlock.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"result\", {\"id\": \"1\", \"status\": \"sent\"}),\n            ],\n            test_mock={\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 288,
          "end_line": 295,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 288,
              "line": "    def run("
            },
            {
              "lineno": 289,
              "line": "        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs"
            },
            {
              "lineno": 290,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 291,
              "line": "        service = GmailReadBlock._build_service(credentials, **kwargs)"
            },
            {
              "lineno": 292,
              "line": "        send_result = self._send_email("
            },
            {
              "lineno": 293,
              "line": "            service, input_data.to, input_data.subject, input_data.body"
            },
            {
              "lineno": 294,
              "line": "        )"
            },
            {
              "lineno": 295,
              "line": "        yield \"result\", send_result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 288,
              "end_line": 290,
              "label": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 291,
                  "end_line": 295,
                  "label": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n        send_result = self._send_email(\n            service, input_data.to, input_data.subject, input_data.body\n        )\n        yield \"result\", send_result",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_send_email",
          "type": "function",
          "start_line": 297,
          "end_line": 304,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 297,
              "line": "    def _send_email(self, service, to: str, subject: str, body: str) -> dict:"
            },
            {
              "lineno": 298,
              "line": "        if not to or not subject or not body:"
            },
            {
              "lineno": 299,
              "line": "            raise ValueError(\"To, subject, and body are required for sending an email\")"
            },
            {
              "lineno": 300,
              "line": "        message = self._create_message(to, subject, body)"
            },
            {
              "lineno": 301,
              "line": "        sent_message = ("
            },
            {
              "lineno": 302,
              "line": "            service.users().messages().send(userId=\"me\", body=message).execute()"
            },
            {
              "lineno": 303,
              "line": "        )"
            },
            {
              "lineno": 304,
              "line": "        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 297,
              "end_line": 298,
              "label": "    def _send_email(self, service, to: str, subject: str, body: str) -> dict:\n        if not to or not subject or not body:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 299,
                  "end_line": 299,
                  "label": "            raise ValueError(\"To, subject, and body are required for sending an email\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 300,
                  "end_line": 304,
                  "label": "        message = self._create_message(to, subject, body)\n        sent_message = (\n            service.users().messages().send(userId=\"me\", body=message).execute()\n        )\n        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_create_message",
          "type": "function",
          "start_line": 306,
          "end_line": 314,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 306,
              "line": "    def _create_message(self, to: str, subject: str, body: str) -> dict:"
            },
            {
              "lineno": 307,
              "line": "        import base64"
            },
            {
              "lineno": 308,
              "line": "        from email.mime.text import MIMEText"
            },
            {
              "lineno": 309,
              "line": ""
            },
            {
              "lineno": 310,
              "line": "        message = MIMEText(body)"
            },
            {
              "lineno": 311,
              "line": "        message[\"to\"] = to"
            },
            {
              "lineno": 312,
              "line": "        message[\"subject\"] = subject"
            },
            {
              "lineno": 313,
              "line": "        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode(\"utf-8\")"
            },
            {
              "lineno": 314,
              "line": "        return {\"raw\": raw_message}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 306,
              "end_line": 314,
              "label": "def _create_message(self, to: str, subject: str, body: str) -> dict:\n    import base64\n    from email.mime.text import MIMEText\n\n    message = MIMEText(body)\n    message[\"to\"] = to\n    message[\"subject\"] = subject\n    raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode(\"utf-8\")\n    return {\"raw\": raw_message}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 243,
          "end_line": 255,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 243,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 244,
              "line": "        credentials: GoogleCredentialsInput = GoogleCredentialsField("
            },
            {
              "lineno": 245,
              "line": "            [\"https://www.googleapis.com/auth/gmail.send\"]"
            },
            {
              "lineno": 246,
              "line": "        )"
            },
            {
              "lineno": 247,
              "line": "        to: str = SchemaField("
            },
            {
              "lineno": 248,
              "line": "            description=\"Recipient email address\","
            },
            {
              "lineno": 249,
              "line": "        )"
            },
            {
              "lineno": 250,
              "line": "        subject: str = SchemaField("
            },
            {
              "lineno": 251,
              "line": "            description=\"Email subject\","
            },
            {
              "lineno": 252,
              "line": "        )"
            },
            {
              "lineno": 253,
              "line": "        body: str = SchemaField("
            },
            {
              "lineno": 254,
              "line": "            description=\"Email body\","
            },
            {
              "lineno": 255,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 243,
              "end_line": 255,
              "label": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.send\"]\n        )\n        to: str = SchemaField(\n            description=\"Recipient email address\",\n        )\n        subject: str = SchemaField(\n            description=\"Email subject\",\n        )\n        body: str = SchemaField(\n            description=\"Email body\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 257,
          "end_line": 263,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 257,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 258,
              "line": "        result: dict = SchemaField("
            },
            {
              "lineno": 259,
              "line": "            description=\"Send confirmation\","
            },
            {
              "lineno": 260,
              "line": "        )"
            },
            {
              "lineno": 261,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 262,
              "line": "            description=\"Error message if any\","
            },
            {
              "lineno": 263,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 257,
              "end_line": 263,
              "label": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Send confirmation\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 242,
          "line": "class GmailSendBlock(Block):"
        },
        {
          "lineno": 256,
          "line": ""
        },
        {
          "lineno": 264,
          "line": ""
        },
        {
          "lineno": 287,
          "line": ""
        },
        {
          "lineno": 296,
          "line": ""
        },
        {
          "lineno": 305,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 242,
          "end_line": 242,
          "label": "class GmailSendBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 256,
          "end_line": 256,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 264,
          "end_line": 264,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 287,
          "end_line": 287,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 296,
          "end_line": 296,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 305,
          "end_line": 305,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailListLabelsBlock",
      "type": "class",
      "start_line": 317,
      "end_line": 370,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 331,
          "end_line": 358,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 331,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 332,
              "line": "        super().__init__("
            },
            {
              "lineno": 333,
              "line": "            id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\","
            },
            {
              "lineno": 334,
              "line": "            description=\"This block lists all labels in Gmail.\","
            },
            {
              "lineno": 335,
              "line": "            categories={BlockCategory.COMMUNICATION},"
            },
            {
              "lineno": 336,
              "line": "            input_schema=GmailListLabelsBlock.Input,"
            },
            {
              "lineno": 337,
              "line": "            output_schema=GmailListLabelsBlock.Output,"
            },
            {
              "lineno": 338,
              "line": "            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,"
            },
            {
              "lineno": 339,
              "line": "            test_input={"
            },
            {
              "lineno": 340,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 341,
              "line": "            },"
            },
            {
              "lineno": 342,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 343,
              "line": "            test_output=["
            },
            {
              "lineno": 344,
              "line": "                ("
            },
            {
              "lineno": 345,
              "line": "                    \"result\","
            },
            {
              "lineno": 346,
              "line": "                    ["
            },
            {
              "lineno": 347,
              "line": "                        {\"id\": \"Label_1\", \"name\": \"Important\"},"
            },
            {
              "lineno": 348,
              "line": "                        {\"id\": \"Label_2\", \"name\": \"Work\"},"
            },
            {
              "lineno": 349,
              "line": "                    ],"
            },
            {
              "lineno": 350,
              "line": "                ),"
            },
            {
              "lineno": 351,
              "line": "            ],"
            },
            {
              "lineno": 352,
              "line": "            test_mock={"
            },
            {
              "lineno": 353,
              "line": "                \"_list_labels\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 354,
              "line": "                    {\"id\": \"Label_1\", \"name\": \"Important\"},"
            },
            {
              "lineno": 355,
              "line": "                    {\"id\": \"Label_2\", \"name\": \"Work\"},"
            },
            {
              "lineno": 356,
              "line": "                ],"
            },
            {
              "lineno": 357,
              "line": "            },"
            },
            {
              "lineno": 358,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 331,
              "end_line": 358,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\",\n            description=\"This block lists all labels in Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailListLabelsBlock.Input,\n            output_schema=GmailListLabelsBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        {\"id\": \"Label_1\", \"name\": \"Important\"},\n                        {\"id\": \"Label_2\", \"name\": \"Work\"},\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_list_labels\": lambda *args, **kwargs: [\n                    {\"id\": \"Label_1\", \"name\": \"Important\"},\n                    {\"id\": \"Label_2\", \"name\": \"Work\"},\n                ],\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 360,
          "end_line": 365,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 360,
              "line": "    def run("
            },
            {
              "lineno": 361,
              "line": "        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs"
            },
            {
              "lineno": 362,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 363,
              "line": "        service = GmailReadBlock._build_service(credentials, **kwargs)"
            },
            {
              "lineno": 364,
              "line": "        labels = self._list_labels(service)"
            },
            {
              "lineno": 365,
              "line": "        yield \"result\", labels"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 360,
              "end_line": 365,
              "label": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        labels = self._list_labels(service)\n        yield \"result\", labels",
              "successors": []
            }
          ]
        },
        {
          "name": "_list_labels",
          "type": "function",
          "start_line": 367,
          "end_line": 370,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 367,
              "line": "    def _list_labels(self, service) -> list[dict]:"
            },
            {
              "lineno": 368,
              "line": "        results = service.users().labels().list(userId=\"me\").execute()"
            },
            {
              "lineno": 369,
              "line": "        labels = results.get(\"labels\", [])"
            },
            {
              "lineno": 370,
              "line": "        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 367,
              "end_line": 368,
              "label": "    def _list_labels(self, service) -> list[dict]:\n        results = service.users().labels().list(userId=\"me\").execute()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 369,
                  "end_line": 369,
                  "label": "        labels = results.get(\"labels\", [])",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 370,
                      "end_line": 370,
                      "label": "        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 318,
          "end_line": 321,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 318,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 319,
              "line": "        credentials: GoogleCredentialsInput = GoogleCredentialsField("
            },
            {
              "lineno": 320,
              "line": "            [\"https://www.googleapis.com/auth/gmail.labels\"]"
            },
            {
              "lineno": 321,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 318,
              "end_line": 321,
              "label": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.labels\"]\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 323,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 323,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 324,
              "line": "        result: list[dict] = SchemaField("
            },
            {
              "lineno": 325,
              "line": "            description=\"List of labels\","
            },
            {
              "lineno": 326,
              "line": "        )"
            },
            {
              "lineno": 327,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 328,
              "line": "            description=\"Error message if any\","
            },
            {
              "lineno": 329,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 323,
              "end_line": 329,
              "label": "    class Output(BlockSchema):\n        result: list[dict] = SchemaField(\n            description=\"List of labels\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 317,
          "line": "class GmailListLabelsBlock(Block):"
        },
        {
          "lineno": 322,
          "line": ""
        },
        {
          "lineno": 330,
          "line": ""
        },
        {
          "lineno": 359,
          "line": ""
        },
        {
          "lineno": 366,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GmailAddLabelBlock",
      "type": "class",
      "start_line": 373,
      "end_line": 453,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 393,
          "end_line": 419,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 393,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 394,
              "line": "        super().__init__("
            },
            {
              "lineno": 395,
              "line": "            id=\"f884b2fb-04f4-4265-9658-14f433926ac9\","
            },
            {
              "lineno": 396,
              "line": "            description=\"This block adds a label to a Gmail message.\","
            },
            {
              "lineno": 397,
              "line": "            categories={BlockCategory.COMMUNICATION},"
            },
            {
              "lineno": 398,
              "line": "            input_schema=GmailAddLabelBlock.Input,"
            },
            {
              "lineno": 399,
              "line": "            output_schema=GmailAddLabelBlock.Output,"
            },
            {
              "lineno": 400,
              "line": "            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,"
            },
            {
              "lineno": 401,
              "line": "            test_input={"
            },
            {
              "lineno": 402,
              "line": "                \"message_id\": \"12345\","
            },
            {
              "lineno": 403,
              "line": "                \"label_name\": \"Important\","
            },
            {
              "lineno": 404,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 405,
              "line": "            },"
            },
            {
              "lineno": 406,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 407,
              "line": "            test_output=["
            },
            {
              "lineno": 408,
              "line": "                ("
            },
            {
              "lineno": 409,
              "line": "                    \"result\","
            },
            {
              "lineno": 410,
              "line": "                    {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"},"
            },
            {
              "lineno": 411,
              "line": "                ),"
            },
            {
              "lineno": 412,
              "line": "            ],"
            },
            {
              "lineno": 413,
              "line": "            test_mock={"
            },
            {
              "lineno": 414,
              "line": "                \"_add_label\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 415,
              "line": "                    \"status\": \"Label added successfully\","
            },
            {
              "lineno": 416,
              "line": "                    \"label_id\": \"Label_1\","
            },
            {
              "lineno": 417,
              "line": "                },"
            },
            {
              "lineno": 418,
              "line": "            },"
            },
            {
              "lineno": 419,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 393,
              "end_line": 419,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f884b2fb-04f4-4265-9658-14f433926ac9\",\n            description=\"This block adds a label to a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailAddLabelBlock.Input,\n            output_schema=GmailAddLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_add_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label added successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 421,
          "end_line": 426,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 421,
              "line": "    def run("
            },
            {
              "lineno": 422,
              "line": "        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs"
            },
            {
              "lineno": 423,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 424,
              "line": "        service = GmailReadBlock._build_service(credentials, **kwargs)"
            },
            {
              "lineno": 425,
              "line": "        result = self._add_label(service, input_data.message_id, input_data.label_name)"
            },
            {
              "lineno": 426,
              "line": "        yield \"result\", result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 421,
              "end_line": 426,
              "label": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._add_label(service, input_data.message_id, input_data.label_name)\n        yield \"result\", result",
              "successors": []
            }
          ]
        },
        {
          "name": "_add_label",
          "type": "function",
          "start_line": 428,
          "end_line": 433,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 428,
              "line": "    def _add_label(self, service, message_id: str, label_name: str) -> dict:"
            },
            {
              "lineno": 429,
              "line": "        label_id = self._get_or_create_label(service, label_name)"
            },
            {
              "lineno": 430,
              "line": "        service.users().messages().modify("
            },
            {
              "lineno": 431,
              "line": "            userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}"
            },
            {
              "lineno": 432,
              "line": "        ).execute()"
            },
            {
              "lineno": 433,
              "line": "        return {\"status\": \"Label added successfully\", \"label_id\": label_id}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 428,
              "end_line": 433,
              "label": "    def _add_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_or_create_label(service, label_name)\n        service.users().messages().modify(\n            userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}\n        ).execute()\n        return {\"status\": \"Label added successfully\", \"label_id\": label_id}",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_or_create_label",
          "type": "function",
          "start_line": 435,
          "end_line": 445,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 435,
              "line": "    def _get_or_create_label(self, service, label_name: str) -> str:"
            },
            {
              "lineno": 436,
              "line": "        label_id = self._get_label_id(service, label_name)"
            },
            {
              "lineno": 437,
              "line": "        if not label_id:"
            },
            {
              "lineno": 438,
              "line": "            label = ("
            },
            {
              "lineno": 439,
              "line": "                service.users()"
            },
            {
              "lineno": 440,
              "line": "                .labels()"
            },
            {
              "lineno": 441,
              "line": "                .create(userId=\"me\", body={\"name\": label_name})"
            },
            {
              "lineno": 442,
              "line": "                .execute()"
            },
            {
              "lineno": 443,
              "line": "            )"
            },
            {
              "lineno": 444,
              "line": "            label_id = label[\"id\"]"
            },
            {
              "lineno": 445,
              "line": "        return label_id"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 435,
              "end_line": 436,
              "label": "    def _get_or_create_label(self, service, label_name: str) -> str:\n        label_id = self._get_label_id(service, label_name)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 437,
                  "end_line": 444,
                  "label": "        if not label_id:\n            label = (\n                service.users()\n                .labels()\n                .create(userId=\"me\", body={\"name\": label_name})\n                .execute()\n            )\n            label_id = label[\"id\"]",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 445,
              "end_line": 445,
              "label": "        return label_id",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_label_id",
          "type": "function",
          "start_line": 447,
          "end_line": 453,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 447,
              "line": "    def _get_label_id(self, service, label_name: str) -> str | None:"
            },
            {
              "lineno": 448,
              "line": "        results = service.users().labels().list(userId=\"me\").execute()"
            },
            {
              "lineno": 449,
              "line": "        labels = results.get(\"labels\", [])"
            },
            {
              "lineno": 450,
              "line": "        for label in labels:"
            },
            {
              "lineno": 451,
              "line": "            if label[\"name\"] == label_name:"
            },
            {
              "lineno": 452,
              "line": "                return label[\"id\"]"
            },
            {
              "lineno": 453,
              "line": "        return None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 447,
              "end_line": 449,
              "label": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])",
              "successors": [
                {
                  "id": 2,
                  "start_line": 450,
                  "end_line": 450,
                  "label": "        for label in labels:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 451,
                      "end_line": 452,
                      "label": "            if label[\"name\"] == label_name:\n                return label[\"id\"]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 453,
                  "end_line": 453,
                  "label": "        return None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 374,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 374,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 375,
              "line": "        credentials: GoogleCredentialsInput = GoogleCredentialsField("
            },
            {
              "lineno": 376,
              "line": "            [\"https://www.googleapis.com/auth/gmail.modify\"]"
            },
            {
              "lineno": 377,
              "line": "        )"
            },
            {
              "lineno": 378,
              "line": "        message_id: str = SchemaField("
            },
            {
              "lineno": 379,
              "line": "            description=\"Message ID to add label to\","
            },
            {
              "lineno": 380,
              "line": "        )"
            },
            {
              "lineno": 381,
              "line": "        label_name: str = SchemaField("
            },
            {
              "lineno": 382,
              "line": "            description=\"Label name to add\","
            },
            {
              "lineno": 383,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 374,
              "end_line": 383,
              "label": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n        message_id: str = SchemaField(\n            description=\"Message ID to add label to\",\n        )\n        label_name: str = SchemaField(\n            description=\"Label name to add\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 385,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 385,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 386,
              "line": "        result: dict = SchemaField("
            },
            {
              "lineno": 387,
              "line": "            description=\"Label addition result\","
            },
            {
              "lineno": 388,
              "line": "        )"
            },
            {
              "lineno": 389,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 390,
              "line": "            description=\"Error message if any\","
            },
            {
              "lineno": 391,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 385,
              "end_line": 391,
              "label": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label addition result\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 373,
          "line": "class GmailAddLabelBlock(Block):"
        },
        {
          "lineno": 384,
          "line": ""
        },
        {
          "lineno": 392,
          "line": ""
        },
        {
          "lineno": 420,
          "line": ""
        },
        {
          "lineno": 427,
          "line": ""
        },
        {
          "lineno": 434,
          "line": ""
        },
        {
          "lineno": 446,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 373,
          "end_line": 373,
          "label": "class GmailAddLabelBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 384,
          "end_line": 384,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 392,
          "end_line": 392,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 420,
          "end_line": 420,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 427,
          "end_line": 427,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 434,
          "end_line": 434,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 446,
          "end_line": 446,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailRemoveLabelBlock",
      "type": "class",
      "start_line": 456,
      "end_line": 529,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 476,
          "end_line": 502,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 476,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 477,
              "line": "        super().__init__("
            },
            {
              "lineno": 478,
              "line": "            id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\","
            },
            {
              "lineno": 479,
              "line": "            description=\"This block removes a label from a Gmail message.\","
            },
            {
              "lineno": 480,
              "line": "            categories={BlockCategory.COMMUNICATION},"
            },
            {
              "lineno": 481,
              "line": "            input_schema=GmailRemoveLabelBlock.Input,"
            },
            {
              "lineno": 482,
              "line": "            output_schema=GmailRemoveLabelBlock.Output,"
            },
            {
              "lineno": 483,
              "line": "            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,"
            },
            {
              "lineno": 484,
              "line": "            test_input={"
            },
            {
              "lineno": 485,
              "line": "                \"message_id\": \"12345\","
            },
            {
              "lineno": 486,
              "line": "                \"label_name\": \"Important\","
            },
            {
              "lineno": 487,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 488,
              "line": "            },"
            },
            {
              "lineno": 489,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 490,
              "line": "            test_output=["
            },
            {
              "lineno": 491,
              "line": "                ("
            },
            {
              "lineno": 492,
              "line": "                    \"result\","
            },
            {
              "lineno": 493,
              "line": "                    {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},"
            },
            {
              "lineno": 494,
              "line": "                ),"
            },
            {
              "lineno": 495,
              "line": "            ],"
            },
            {
              "lineno": 496,
              "line": "            test_mock={"
            },
            {
              "lineno": 497,
              "line": "                \"_remove_label\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 498,
              "line": "                    \"status\": \"Label removed successfully\","
            },
            {
              "lineno": 499,
              "line": "                    \"label_id\": \"Label_1\","
            },
            {
              "lineno": 500,
              "line": "                },"
            },
            {
              "lineno": 501,
              "line": "            },"
            },
            {
              "lineno": 502,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 476,
              "end_line": 502,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\",\n            description=\"This block removes a label from a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailRemoveLabelBlock.Input,\n            output_schema=GmailRemoveLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_remove_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label removed successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 504,
          "end_line": 511,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 504,
              "line": "    def run("
            },
            {
              "lineno": 505,
              "line": "        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs"
            },
            {
              "lineno": 506,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 507,
              "line": "        service = GmailReadBlock._build_service(credentials, **kwargs)"
            },
            {
              "lineno": 508,
              "line": "        result = self._remove_label("
            },
            {
              "lineno": 509,
              "line": "            service, input_data.message_id, input_data.label_name"
            },
            {
              "lineno": 510,
              "line": "        )"
            },
            {
              "lineno": 511,
              "line": "        yield \"result\", result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 504,
              "end_line": 506,
              "label": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 507,
                  "end_line": 510,
                  "label": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._remove_label(\n            service, input_data.message_id, input_data.label_name\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 511,
                      "end_line": 511,
                      "label": "        yield \"result\", result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_remove_label",
          "type": "function",
          "start_line": 513,
          "end_line": 521,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 513,
              "line": "    def _remove_label(self, service, message_id: str, label_name: str) -> dict:"
            },
            {
              "lineno": 514,
              "line": "        label_id = self._get_label_id(service, label_name)"
            },
            {
              "lineno": 515,
              "line": "        if label_id:"
            },
            {
              "lineno": 516,
              "line": "            service.users().messages().modify("
            },
            {
              "lineno": 517,
              "line": "                userId=\"me\", id=message_id, body={\"removeLabelIds\": [label_id]}"
            },
            {
              "lineno": 518,
              "line": "            ).execute()"
            },
            {
              "lineno": 519,
              "line": "            return {\"status\": \"Label removed successfully\", \"label_id\": label_id}"
            },
            {
              "lineno": 520,
              "line": "        else:"
            },
            {
              "lineno": 521,
              "line": "            return {\"status\": \"Label not found\", \"label_name\": label_name}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 513,
              "end_line": 514,
              "label": "    def _remove_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_label_id(service, label_name)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 515,
                  "end_line": 515,
                  "label": "        if label_id:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 516,
                      "end_line": 519,
                      "label": "            service.users().messages().modify(\n                userId=\"me\", id=message_id, body={\"removeLabelIds\": [label_id]}\n            ).execute()\n            return {\"status\": \"Label removed successfully\", \"label_id\": label_id}",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 520,
                      "end_line": 521,
                      "label": "        else:\n            return {\"status\": \"Label not found\", \"label_name\": label_name}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_get_label_id",
          "type": "function",
          "start_line": 523,
          "end_line": 529,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 523,
              "line": "    def _get_label_id(self, service, label_name: str) -> str | None:"
            },
            {
              "lineno": 524,
              "line": "        results = service.users().labels().list(userId=\"me\").execute()"
            },
            {
              "lineno": 525,
              "line": "        labels = results.get(\"labels\", [])"
            },
            {
              "lineno": 526,
              "line": "        for label in labels:"
            },
            {
              "lineno": 527,
              "line": "            if label[\"name\"] == label_name:"
            },
            {
              "lineno": 528,
              "line": "                return label[\"id\"]"
            },
            {
              "lineno": 529,
              "line": "        return None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 523,
              "end_line": 525,
              "label": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])",
              "successors": [
                {
                  "id": 2,
                  "start_line": 526,
                  "end_line": 528,
                  "label": "        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 529,
                      "end_line": 529,
                      "label": "        return None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 457,
          "end_line": 466,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 457,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 458,
              "line": "        credentials: GoogleCredentialsInput = GoogleCredentialsField("
            },
            {
              "lineno": 459,
              "line": "            [\"https://www.googleapis.com/auth/gmail.modify\"]"
            },
            {
              "lineno": 460,
              "line": "        )"
            },
            {
              "lineno": 461,
              "line": "        message_id: str = SchemaField("
            },
            {
              "lineno": 462,
              "line": "            description=\"Message ID to remove label from\","
            },
            {
              "lineno": 463,
              "line": "        )"
            },
            {
              "lineno": 464,
              "line": "        label_name: str = SchemaField("
            },
            {
              "lineno": 465,
              "line": "            description=\"Label name to remove\","
            },
            {
              "lineno": 466,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 457,
              "end_line": 466,
              "label": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n        message_id: str = SchemaField(\n            description=\"Message ID to remove label from\",\n        )\n        label_name: str = SchemaField(\n            description=\"Label name to remove\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 468,
          "end_line": 474,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 468,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 469,
              "line": "        result: dict = SchemaField("
            },
            {
              "lineno": 470,
              "line": "            description=\"Label removal result\","
            },
            {
              "lineno": 471,
              "line": "        )"
            },
            {
              "lineno": 472,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 473,
              "line": "            description=\"Error message if any\","
            },
            {
              "lineno": 474,
              "line": "        )"
            }
          ],
          "blocks": []
        }
      ],
      "simplified_code": [
        {
          "lineno": 456,
          "line": "class GmailRemoveLabelBlock(Block):"
        },
        {
          "lineno": 467,
          "line": ""
        },
        {
          "lineno": 475,
          "line": ""
        },
        {
          "lineno": 503,
          "line": ""
        },
        {
          "lineno": 512,
          "line": ""
        },
        {
          "lineno": 522,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 456,
          "end_line": 456,
          "label": "class GmailRemoveLabelBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 467,
          "end_line": 467,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 475,
          "end_line": 475,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 503,
          "end_line": 503,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 512,
          "end_line": 512,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 522,
          "end_line": 522,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import base64"
    },
    {
      "lineno": 2,
      "line": "from email.utils import parseaddr"
    },
    {
      "lineno": 3,
      "line": "from typing import List"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from google.oauth2.credentials import Credentials"
    },
    {
      "lineno": 6,
      "line": "from googleapiclient.discovery import build"
    },
    {
      "lineno": 7,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "from ._auth import ("
    },
    {
      "lineno": 13,
      "line": "    GOOGLE_OAUTH_IS_CONFIGURED,"
    },
    {
      "lineno": 14,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 15,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 16,
      "line": "    GoogleCredentials,"
    },
    {
      "lineno": 17,
      "line": "    GoogleCredentialsField,"
    },
    {
      "lineno": 18,
      "line": "    GoogleCredentialsInput,"
    },
    {
      "lineno": 19,
      "line": ")"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 26,
      "line": "    attachment_id: str"
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 240,
      "line": ""
    },
    {
      "lineno": 241,
      "line": ""
    },
    {
      "lineno": 315,
      "line": ""
    },
    {
      "lineno": 316,
      "line": ""
    },
    {
      "lineno": 371,
      "line": ""
    },
    {
      "lineno": 372,
      "line": ""
    },
    {
      "lineno": 454,
      "line": ""
    },
    {
      "lineno": 455,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import base64\nfrom email.utils import parseaddr",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "from typing import List",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 5,
          "end_line": 7,
          "label": "from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom pydantic import BaseModel",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 9,
          "end_line": 10,
          "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 12,
          "end_line": 19,
          "label": "from ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput\n)",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 26,
          "end_line": 26,
          "label": "attachment_id: str",
          "successors": []
        }
      ]
    }
  ]
}