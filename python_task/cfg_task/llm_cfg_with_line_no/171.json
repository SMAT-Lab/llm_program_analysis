{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 276,
  "functions": [
    {
      "name": "expose",
      "type": "function",
      "start_line": 51,
      "end_line": 70,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 60,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 60,
              "line": "    def wrapper(*args, **kwargs):"
            },
            {
              "lineno": 61,
              "line": "        try:"
            },
            {
              "lineno": 62,
              "line": "            return func(*args, **kwargs)"
            },
            {
              "lineno": 63,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 64,
              "line": "            msg = f\"Error in {func.__name__}: {e.__str__()}\""
            },
            {
              "lineno": 65,
              "line": "            logger.exception(msg)"
            },
            {
              "lineno": 66,
              "line": "            raise"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 60,
              "end_line": 60,
              "label": "    def wrapper(*args, **kwargs):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 61,
                  "end_line": 62,
                  "label": "        try:\n            return func(*args, **kwargs)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 63,
                      "end_line": 66,
                      "label": "        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "def expose(func: C) -> C:"
        },
        {
          "lineno": 52,
          "line": "    \"\"\""
        },
        {
          "lineno": 53,
          "line": "    Decorator to mark a method or class to be exposed for remote calls."
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    ## ⚠️ Gotcha"
        },
        {
          "lineno": 56,
          "line": "    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*."
        },
        {
          "lineno": 57,
          "line": "    Any other passed or returned class objects are converted to dictionaries by Pyro."
        },
        {
          "lineno": 58,
          "line": "    \"\"\""
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    register_pydantic_serializers(func)"
        },
        {
          "lineno": 69,
          "line": ""
        },
        {
          "lineno": 70,
          "line": "    return pyro.expose(wrapper)  # type: ignore"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 51,
          "end_line": 57,
          "label": "def expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 68,
              "end_line": 68,
              "label": "register_pydantic_serializers(func)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 70,
                  "end_line": 70,
                  "label": "return pyro.expose(wrapper)  # type: ignore",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "register_pydantic_serializers",
      "type": "function",
      "start_line": 73,
      "end_line": 89,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 73,
          "line": "def register_pydantic_serializers(func: Callable):"
        },
        {
          "lineno": 74,
          "line": "    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\""
        },
        {
          "lineno": 75,
          "line": "    for name, annotation in func.__annotations__.items():"
        },
        {
          "lineno": 76,
          "line": "        try:"
        },
        {
          "lineno": 77,
          "line": "            pydantic_types = _pydantic_models_from_type_annotation(annotation)"
        },
        {
          "lineno": 78,
          "line": "        except Exception as e:"
        },
        {
          "lineno": 79,
          "line": "            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")"
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 81,
          "line": "        for model in pydantic_types:"
        },
        {
          "lineno": 82,
          "line": "            logger.debug("
        },
        {
          "lineno": 83,
          "line": "                f\"Registering Pyro (de)serializers for {func.__name__} annotation \""
        },
        {
          "lineno": 84,
          "line": "                f\"'{name}': {model.__qualname__}\""
        },
        {
          "lineno": 85,
          "line": "            )"
        },
        {
          "lineno": 86,
          "line": "            pyro.register_class_to_dict(model, _make_custom_serializer(model))"
        },
        {
          "lineno": 87,
          "line": "            pyro.register_dict_to_class("
        },
        {
          "lineno": 88,
          "line": "                model.__qualname__, _make_custom_deserializer(model)"
        },
        {
          "lineno": 89,
          "line": "            )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 73,
          "end_line": 75,
          "label": "def register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():",
          "successors": [
            {
              "id": 2,
              "start_line": 76,
              "end_line": 77,
              "label": "try:\n    pydantic_types = _pydantic_models_from_type_annotation(annotation)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 81,
                  "end_line": 89,
                  "label": "for model in pydantic_types:\n    logger.debug(\n        f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n        f\"'{name}': {model.__qualname__}\"\n    )\n    pyro.register_class_to_dict(model, _make_custom_serializer(model))\n    pyro.register_dict_to_class(\n        model.__qualname__, _make_custom_deserializer(model)\n    )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 78,
              "end_line": 79,
              "label": "except Exception as e:\n    raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "_make_custom_serializer",
      "type": "function",
      "start_line": 92,
      "end_line": 101,
      "functions": [
        {
          "name": "custom_class_to_dict",
          "type": "function",
          "start_line": 93,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    def custom_class_to_dict(obj):"
            },
            {
              "lineno": 94,
              "line": "        data = {"
            },
            {
              "lineno": 95,
              "line": "            \"__class__\": obj.__class__.__qualname__,"
            },
            {
              "lineno": 96,
              "line": "            **obj.model_dump(),"
            },
            {
              "lineno": 97,
              "line": "        }"
            },
            {
              "lineno": 98,
              "line": "        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")"
            },
            {
              "lineno": 99,
              "line": "        return data"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 93,
              "end_line": 99,
              "label": "    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 92,
          "line": "def _make_custom_serializer(model: Type[BaseModel]):"
        },
        {
          "lineno": 100,
          "line": ""
        },
        {
          "lineno": 101,
          "line": "    return custom_class_to_dict"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 92,
          "end_line": 101,
          "label": "def _make_custom_serializer(model: Type[BaseModel]):\n\n    return custom_class_to_dict",
          "successors": []
        }
      ]
    },
    {
      "name": "_make_custom_deserializer",
      "type": "function",
      "start_line": 104,
      "end_line": 109,
      "functions": [
        {
          "name": "custom_dict_to_class",
          "type": "function",
          "start_line": 105,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 105,
              "line": "    def custom_dict_to_class(qualname, data: dict):"
            },
            {
              "lineno": 106,
              "line": "        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")"
            },
            {
              "lineno": 107,
              "line": "        return model(**data)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 105,
              "end_line": 107,
              "label": "    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 104,
          "line": "def _make_custom_deserializer(model: Type[BaseModel]):"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    return custom_dict_to_class"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 104,
          "end_line": 109,
          "label": "def _make_custom_deserializer(model: Type[BaseModel]):\n\n    return custom_dict_to_class",
          "successors": []
        }
      ]
    },
    {
      "name": "close_service_client",
      "type": "function",
      "start_line": 203,
      "end_line": 207,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 203,
          "line": "def close_service_client(client: AppService) -> None:"
        },
        {
          "lineno": 204,
          "line": "    if isinstance(client, PyroClient):"
        },
        {
          "lineno": 205,
          "line": "        client.proxy._pyroRelease()"
        },
        {
          "lineno": 206,
          "line": "    else:"
        },
        {
          "lineno": 207,
          "line": "        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 203,
          "end_line": 203,
          "label": "def close_service_client(client: AppService) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 204,
              "end_line": 205,
              "label": "if isinstance(client, PyroClient):\n    client.proxy._pyroRelease()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 206,
                  "end_line": 207,
                  "label": "else:\n    raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_service_client",
      "type": "function",
      "start_line": 210,
      "end_line": 228,
      "functions": [],
      "classes": [
        {
          "name": "DynamicClient",
          "type": "class",
          "start_line": 213,
          "end_line": 228,
          "functions": [
            {
              "name": "__init__",
              "type": "function",
              "start_line": 215,
              "end_line": 222,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 215,
                  "line": "        def __init__(self):"
                },
                {
                  "lineno": 216,
                  "line": "            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)"
                },
                {
                  "lineno": 217,
                  "line": "            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\""
                },
                {
                  "lineno": 218,
                  "line": "            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")"
                },
                {
                  "lineno": 219,
                  "line": "            self.proxy = Pyro5.api.Proxy(uri)"
                },
                {
                  "lineno": 220,
                  "line": "            # Attempt to bind to ensure the connection is established"
                },
                {
                  "lineno": 221,
                  "line": "            self.proxy._pyroBind()"
                },
                {
                  "lineno": 222,
                  "line": "            logger.debug(f\"Successfully connected to service [{service_name}]\")"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 215,
                  "end_line": 222,
                  "label": "        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                  "successors": []
                }
              ]
            },
            {
              "name": "__getattr__",
              "type": "function",
              "start_line": 224,
              "end_line": 226,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 224,
                  "line": "        def __getattr__(self, name: str) -> Callable[..., Any]:"
                },
                {
                  "lineno": 225,
                  "line": "            res = getattr(self.proxy, name)"
                },
                {
                  "lineno": 226,
                  "line": "            return res"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 224,
                  "end_line": 226,
                  "label": "        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 213,
              "line": "    class DynamicClient(PyroClient):"
            },
            {
              "lineno": 214,
              "line": "        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")"
            },
            {
              "lineno": 223,
              "line": ""
            },
            {
              "lineno": 227,
              "line": ""
            },
            {
              "lineno": 228,
              "line": "    return cast(AS, DynamicClient())"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 213,
              "end_line": 214,
              "label": "    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")",
              "successors": [
                {
                  "id": 2,
                  "start_line": 228,
                  "end_line": 228,
                  "label": "    return cast(AS, DynamicClient())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 210,
          "line": "def get_service_client(service_type: Type[AS]) -> AS:"
        },
        {
          "lineno": 211,
          "line": "    service_name = service_type.service_name"
        },
        {
          "lineno": 212,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 210,
          "end_line": 211,
          "label": "def get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name",
          "successors": []
        }
      ]
    },
    {
      "name": "_pydantic_models_from_type_annotation",
      "type": "function",
      "start_line": 234,
      "end_line": 276,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 234,
          "line": "def _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:"
        },
        {
          "lineno": 235,
          "line": "    # Peel Annotated parameters"
        },
        {
          "lineno": 236,
          "line": "    if (origin := get_origin(annotation)) and origin is Annotated:"
        },
        {
          "lineno": 237,
          "line": "        annotation = get_args(annotation)[0]"
        },
        {
          "lineno": 238,
          "line": ""
        },
        {
          "lineno": 239,
          "line": "    origin = get_origin(annotation)"
        },
        {
          "lineno": 240,
          "line": "    args = get_args(annotation)"
        },
        {
          "lineno": 241,
          "line": ""
        },
        {
          "lineno": 242,
          "line": "    if origin in ("
        },
        {
          "lineno": 243,
          "line": "        Union,"
        },
        {
          "lineno": 244,
          "line": "        UnionType,"
        },
        {
          "lineno": 245,
          "line": "        list,"
        },
        {
          "lineno": 246,
          "line": "        List,"
        },
        {
          "lineno": 247,
          "line": "        tuple,"
        },
        {
          "lineno": 248,
          "line": "        Tuple,"
        },
        {
          "lineno": 249,
          "line": "        set,"
        },
        {
          "lineno": 250,
          "line": "        Set,"
        },
        {
          "lineno": 251,
          "line": "        frozenset,"
        },
        {
          "lineno": 252,
          "line": "        FrozenSet,"
        },
        {
          "lineno": 253,
          "line": "    ):"
        },
        {
          "lineno": 254,
          "line": "        for arg in args:"
        },
        {
          "lineno": 255,
          "line": "            yield from _pydantic_models_from_type_annotation(arg)"
        },
        {
          "lineno": 256,
          "line": "    elif origin in (dict, Dict):"
        },
        {
          "lineno": 257,
          "line": "        key_type, value_type = args"
        },
        {
          "lineno": 258,
          "line": "        yield from _pydantic_models_from_type_annotation(key_type)"
        },
        {
          "lineno": 259,
          "line": "        yield from _pydantic_models_from_type_annotation(value_type)"
        },
        {
          "lineno": 260,
          "line": "    elif origin in (Awaitable, Coroutine):"
        },
        {
          "lineno": 261,
          "line": "        # For coroutines and awaitables, check the return type"
        },
        {
          "lineno": 262,
          "line": "        return_type = args[-1]"
        },
        {
          "lineno": 263,
          "line": "        yield from _pydantic_models_from_type_annotation(return_type)"
        },
        {
          "lineno": 264,
          "line": "    else:"
        },
        {
          "lineno": 265,
          "line": "        annotype = annotation if origin is None else origin"
        },
        {
          "lineno": 266,
          "line": ""
        },
        {
          "lineno": 267,
          "line": "        # Exclude generic types and aliases"
        },
        {
          "lineno": 268,
          "line": "        if ("
        },
        {
          "lineno": 269,
          "line": "            annotype is not None"
        },
        {
          "lineno": 270,
          "line": "            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))"
        },
        {
          "lineno": 271,
          "line": "            and isinstance(annotype, type)"
        },
        {
          "lineno": 272,
          "line": "        ):"
        },
        {
          "lineno": 273,
          "line": "            if issubclass(annotype, BaseModel):"
        },
        {
          "lineno": 274,
          "line": "                yield annotype"
        },
        {
          "lineno": 275,
          "line": "            elif annotype not in builtin_types and not issubclass(annotype, Enum):"
        },
        {
          "lineno": 276,
          "line": "                raise TypeError(f\"Unsupported type encountered: {annotype}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 234,
          "end_line": 236,
          "label": "def _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:",
          "successors": [
            {
              "id": 2,
              "start_line": 237,
              "end_line": 237,
              "label": "annotation = get_args(annotation)[0]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 239,
                  "end_line": 240,
                  "label": "origin = get_origin(annotation)\nargs = get_args(annotation)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 242,
                      "end_line": 253,
                      "label": "if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 254,
                          "end_line": 255,
                          "label": "for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)",
                          "successors": [
                            {
                              "id": 3,
                              "start_line": 239,
                              "end_line": 240,
                              "label": "origin = get_origin(annotation)\nargs = get_args(annotation)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 256,
                          "end_line": 259,
                          "label": "elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 264,
                              "end_line": 275,
                              "label": "else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 260,
                          "end_line": 263,
                          "label": "elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 264,
                              "end_line": 275,
                              "label": "else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 264,
                      "end_line": 275,
                      "label": "else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AppService",
      "type": "class",
      "start_line": 112,
      "end_line": 190,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 118,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 119,
              "line": "        self.uri = None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 118,
              "end_line": 118,
              "label": "    def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 119,
                  "end_line": 119,
                  "label": "        self.uri = None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get_port",
          "type": "function",
          "start_line": 123,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 123,
              "line": "    def get_port(cls) -> int:"
            },
            {
              "lineno": 124,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 123,
              "end_line": 123,
              "label": "    def get_port(cls) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 124,
                  "end_line": 124,
                  "label": "        pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get_host",
          "type": "function",
          "start_line": 127,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 127,
              "line": "    def get_host(cls) -> str:"
            },
            {
              "lineno": 128,
              "line": "        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 127,
              "end_line": 128,
              "label": "    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
              "successors": []
            }
          ]
        },
        {
          "name": "run_service",
          "type": "function",
          "start_line": 130,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 130,
              "line": "    def run_service(self) -> None:"
            },
            {
              "lineno": 131,
              "line": "        while True:"
            },
            {
              "lineno": 132,
              "line": "            time.sleep(10)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 130,
              "end_line": 130,
              "label": "    def run_service(self) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 131,
                  "end_line": 132,
                  "label": "        while True:\n            time.sleep(10)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 131,
                      "end_line": 131,
                      "label": "        while True:",
                      "successors": [
                        {
                          "id": 2,
                          "start_line": 131,
                          "end_line": 132,
                          "label": "        while True:\n            time.sleep(10)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "__run_async",
          "type": "function",
          "start_line": 134,
          "end_line": 135,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 134,
              "line": "    def __run_async(self, coro: Coroutine[Any, Any, T]):"
            },
            {
              "lineno": 135,
              "line": "        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 134,
              "end_line": 135,
              "label": "    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
              "successors": []
            }
          ]
        },
        {
          "name": "run_and_wait",
          "type": "function",
          "start_line": 137,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 137,
              "line": "    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:"
            },
            {
              "lineno": 138,
              "line": "        future = self.__run_async(coro)"
            },
            {
              "lineno": 139,
              "line": "        return future.result()"
            }
          ],
          "blocks": []
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 141,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 141,
              "line": "    def run(self):"
            },
            {
              "lineno": 142,
              "line": "        self.shared_event_loop = asyncio.get_event_loop()"
            },
            {
              "lineno": 143,
              "line": "        if self.use_db:"
            },
            {
              "lineno": 144,
              "line": "            self.shared_event_loop.run_until_complete(db.connect())"
            },
            {
              "lineno": 145,
              "line": "        if self.use_redis:"
            },
            {
              "lineno": 146,
              "line": "            redis.connect()"
            },
            {
              "lineno": 147,
              "line": "        if self.use_supabase:"
            },
            {
              "lineno": 148,
              "line": "            from supabase import create_client"
            },
            {
              "lineno": 149,
              "line": ""
            },
            {
              "lineno": 150,
              "line": "            secrets = Secrets()"
            },
            {
              "lineno": 151,
              "line": "            self.supabase = create_client("
            },
            {
              "lineno": 152,
              "line": "                secrets.supabase_url, secrets.supabase_service_role_key"
            },
            {
              "lineno": 153,
              "line": "            )"
            },
            {
              "lineno": 154,
              "line": ""
            },
            {
              "lineno": 155,
              "line": "        # Initialize the async loop."
            },
            {
              "lineno": 156,
              "line": "        async_thread = threading.Thread(target=self.__start_async_loop)"
            },
            {
              "lineno": 157,
              "line": "        async_thread.daemon = True"
            },
            {
              "lineno": 158,
              "line": "        async_thread.start()"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "        # Initialize pyro service"
            },
            {
              "lineno": 161,
              "line": "        daemon_thread = threading.Thread(target=self.__start_pyro)"
            },
            {
              "lineno": 162,
              "line": "        daemon_thread.daemon = True"
            },
            {
              "lineno": 163,
              "line": "        daemon_thread.start()"
            },
            {
              "lineno": 164,
              "line": ""
            },
            {
              "lineno": 165,
              "line": "        # Run the main service (if it's not implemented, just sleep)."
            },
            {
              "lineno": 166,
              "line": "        self.run_service()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 141,
              "end_line": 142,
              "label": "    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 143,
                  "end_line": 144,
                  "label": "        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 145,
                  "end_line": 146,
                  "label": "        if self.use_redis:\n            redis.connect()",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 147,
                  "end_line": 153,
                  "label": "        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 155,
                  "end_line": 158,
                  "label": "        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 160,
                  "end_line": 163,
                  "label": "        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()",
                  "successors": []
                },
                {
                  "id": 7,
                  "start_line": 165,
                  "end_line": 166,
                  "label": "        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "cleanup",
          "type": "function",
          "start_line": 168,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 168,
              "line": "    def cleanup(self):"
            },
            {
              "lineno": 169,
              "line": "        if self.use_db:"
            },
            {
              "lineno": 170,
              "line": "            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")"
            },
            {
              "lineno": 171,
              "line": "            self.run_and_wait(db.disconnect())"
            },
            {
              "lineno": 172,
              "line": "        if self.use_redis:"
            },
            {
              "lineno": 173,
              "line": "            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")"
            },
            {
              "lineno": 174,
              "line": "            redis.disconnect()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 168,
              "end_line": 168,
              "label": "    def cleanup(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 169,
                  "end_line": 170,
                  "label": "        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \\\\u23f3 Disconnecting DB...\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 171,
                      "end_line": 171,
                      "label": "            self.run_and_wait(db.disconnect())",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 172,
                          "end_line": 173,
                          "label": "        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \\\\u23f3 Disconnecting Redis...\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 174,
                              "end_line": 174,
                              "label": "            redis.disconnect()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "__start_pyro",
          "type": "function",
          "start_line": 177,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 177,
              "line": "    def __start_pyro(self):"
            },
            {
              "lineno": 178,
              "line": "        maximum_connection_thread_count = max("
            },
            {
              "lineno": 179,
              "line": "            Pyro5.config.THREADPOOL_SIZE,"
            },
            {
              "lineno": 180,
              "line": "            config.num_node_workers * config.num_graph_workers,"
            },
            {
              "lineno": 181,
              "line": "        )"
            },
            {
              "lineno": 182,
              "line": ""
            },
            {
              "lineno": 183,
              "line": "        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore"
            },
            {
              "lineno": 184,
              "line": "        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())"
            },
            {
              "lineno": 185,
              "line": "        self.uri = daemon.register(self, objectId=self.service_name)"
            },
            {
              "lineno": 186,
              "line": "        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")"
            },
            {
              "lineno": 187,
              "line": "        daemon.requestLoop()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 177,
              "end_line": 177,
              "label": "    def __start_pyro(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 178,
                  "end_line": 181,
                  "label": "        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 183,
                      "end_line": 187,
                      "label": "        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "__start_async_loop",
          "type": "function",
          "start_line": 189,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 189,
              "line": "    def __start_async_loop(self):"
            },
            {
              "lineno": 190,
              "line": "        self.shared_event_loop.run_forever()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 189,
              "end_line": 190,
              "label": "    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 112,
          "line": "class AppService(AppProcess, ABC):"
        },
        {
          "lineno": 113,
          "line": "    shared_event_loop: asyncio.AbstractEventLoop"
        },
        {
          "lineno": 114,
          "line": "    use_db: bool = False"
        },
        {
          "lineno": 115,
          "line": "    use_redis: bool = False"
        },
        {
          "lineno": 116,
          "line": "    use_supabase: bool = False"
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 121,
          "line": "    @classmethod"
        },
        {
          "lineno": 122,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 126,
          "line": "    @classmethod"
        },
        {
          "lineno": 129,
          "line": ""
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 136,
          "line": ""
        },
        {
          "lineno": 140,
          "line": ""
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 175,
          "line": ""
        },
        {
          "lineno": 176,
          "line": "    @conn_retry(\"Pyro\", \"Starting Pyro Service\")"
        },
        {
          "lineno": 188,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 112,
          "end_line": 116,
          "label": "class AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False",
          "successors": [
            {
              "id": 2,
              "start_line": 121,
              "end_line": 122,
              "label": "@classmethod\n    @abstractmethod",
              "successors": [
                {
                  "id": 3,
                  "start_line": 126,
                  "end_line": 126,
                  "label": "@classmethod",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 176,
                  "end_line": 176,
                  "label": "@conn_retry(\"Pyro\", \"Starting Pyro Service\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "PyroClient",
      "type": "class",
      "start_line": 199,
      "end_line": 200,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 199,
          "line": "class PyroClient:"
        },
        {
          "lineno": 200,
          "line": "    proxy: Pyro5.api.Proxy"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 199,
          "end_line": 202,
          "label": "class PyroClient:\n    proxy: Pyro5.api.Proxy\n    def __init__(self):\n        self.proxy = None",
          "successors": [
            {
              "id": 2,
              "start_line": 203,
              "end_line": 204,
              "label": "def connect(self, uri):\n    try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 205,
                  "end_line": 206,
                  "label": "self.proxy = Pyro5.api.Proxy(uri)\n        self.proxy.connect()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 207,
                      "end_line": 207,
                      "label": "except Pyro5.errors.CommunicationError:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 208,
                          "end_line": 209,
                          "label": "print('Failed to connect to Pyro server.')\n        return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 210,
              "end_line": 211,
              "label": "def send_message(self, message):\n    if self.proxy:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 212,
                  "end_line": 212,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 213,
                      "end_line": 214,
                      "label": "self.proxy.send(message)\n        except Exception as e:",
                      "successors": [
                        {
                          "id": 9,
                          "start_line": 215,
                          "end_line": 216,
                          "label": "print(f'An error occurred: {e}')\n            return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 217,
                  "end_line": 217,
                  "label": "else:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 218,
                      "end_line": 218,
                      "label": "print('Not connected to Pyro server.')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import builtins"
    },
    {
      "lineno": 3,
      "line": "import logging"
    },
    {
      "lineno": 4,
      "line": "import os"
    },
    {
      "lineno": 5,
      "line": "import threading"
    },
    {
      "lineno": 6,
      "line": "import time"
    },
    {
      "lineno": 7,
      "line": "import typing"
    },
    {
      "lineno": 8,
      "line": "from abc import ABC, abstractmethod"
    },
    {
      "lineno": 9,
      "line": "from enum import Enum"
    },
    {
      "lineno": 10,
      "line": "from types import NoneType, UnionType"
    },
    {
      "lineno": 11,
      "line": "from typing import ("
    },
    {
      "lineno": 12,
      "line": "    Annotated,"
    },
    {
      "lineno": 13,
      "line": "    Any,"
    },
    {
      "lineno": 14,
      "line": "    Awaitable,"
    },
    {
      "lineno": 15,
      "line": "    Callable,"
    },
    {
      "lineno": 16,
      "line": "    Coroutine,"
    },
    {
      "lineno": 17,
      "line": "    Dict,"
    },
    {
      "lineno": 18,
      "line": "    FrozenSet,"
    },
    {
      "lineno": 19,
      "line": "    Iterator,"
    },
    {
      "lineno": 20,
      "line": "    List,"
    },
    {
      "lineno": 21,
      "line": "    Set,"
    },
    {
      "lineno": 22,
      "line": "    Tuple,"
    },
    {
      "lineno": 23,
      "line": "    Type,"
    },
    {
      "lineno": 24,
      "line": "    TypeVar,"
    },
    {
      "lineno": 25,
      "line": "    Union,"
    },
    {
      "lineno": 26,
      "line": "    cast,"
    },
    {
      "lineno": 27,
      "line": "    get_args,"
    },
    {
      "lineno": 28,
      "line": "    get_origin,"
    },
    {
      "lineno": 29,
      "line": ")"
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": "import Pyro5.api"
    },
    {
      "lineno": 32,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 33,
      "line": "from Pyro5 import api as pyro"
    },
    {
      "lineno": 34,
      "line": "from Pyro5 import config as pyro_config"
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": "from backend.data import db, redis"
    },
    {
      "lineno": 37,
      "line": "from backend.util.process import AppProcess"
    },
    {
      "lineno": 38,
      "line": "from backend.util.retry import conn_retry"
    },
    {
      "lineno": 39,
      "line": "from backend.util.settings import Config, Secrets"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 42,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 43,
      "line": "C = TypeVar(\"C\", bound=Callable)"
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": "config = Config()"
    },
    {
      "lineno": 46,
      "line": "pyro_host = config.pyro_host"
    },
    {
      "lineno": 47,
      "line": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore"
    },
    {
      "lineno": 48,
      "line": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore"
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 103,
      "line": ""
    },
    {
      "lineno": 110,
      "line": ""
    },
    {
      "lineno": 111,
      "line": ""
    },
    {
      "lineno": 191,
      "line": ""
    },
    {
      "lineno": 192,
      "line": ""
    },
    {
      "lineno": 193,
      "line": "# --------- UTILITIES --------- #"
    },
    {
      "lineno": 194,
      "line": ""
    },
    {
      "lineno": 195,
      "line": ""
    },
    {
      "lineno": 196,
      "line": "AS = TypeVar(\"AS\", bound=AppService)"
    },
    {
      "lineno": 197,
      "line": ""
    },
    {
      "lineno": 198,
      "line": ""
    },
    {
      "lineno": 201,
      "line": ""
    },
    {
      "lineno": 202,
      "line": ""
    },
    {
      "lineno": 208,
      "line": ""
    },
    {
      "lineno": 209,
      "line": ""
    },
    {
      "lineno": 229,
      "line": ""
    },
    {
      "lineno": 230,
      "line": ""
    },
    {
      "lineno": 231,
      "line": "builtin_types = [*vars(builtins).values(), NoneType, Enum]"
    },
    {
      "lineno": 232,
      "line": ""
    },
    {
      "lineno": 233,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 194,
      "label": "import asyncio\nimport builtins\nimport logging\nimport os\nimport threading\nimport time\nimport typing\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom types import NoneType, UnionType\nfrom typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)\nimport Pyro5.api\nfrom pydantic import BaseModel\nfrom Pyro5 import api as pyro\nfrom Pyro5 import config as pyro_config\nfrom backend.data import db, redis\nfrom backend.util.process import AppProcess\nfrom backend.util.retry import conn_retry\nfrom backend.util.settings import Config, Secrets\nlogger = logging.getLogger(__name__)\nT = TypeVar(\"T\")\nC = TypeVar(\"C\", bound=Callable)\nconfig = Config()\npyro_host = config.pyro_host\npyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore\npyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore\n# --------- UTILITIES --------- #",
      "successors": [
        {
          "id": 2,
          "start_line": 196,
          "end_line": 196,
          "label": "AS = TypeVar(\"AS\", bound=AppService)",
          "successors": [
            {
              "id": 3,
              "start_line": 231,
              "end_line": 231,
              "label": "builtin_types = [*vars(builtins).values(), NoneType, Enum]",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}