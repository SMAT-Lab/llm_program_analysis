{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 82,
  "functions": [
    {
      "name": "combination_lists",
      "type": "function",
      "start_line": 13,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "def combination_lists(n: int, k: int) -> list[list[int]]:"
        },
        {
          "lineno": 14,
          "line": "    \"\"\""
        },
        {
          "lineno": 15,
          "line": "    >>> combination_lists(n=4, k=2)"
        },
        {
          "lineno": 16,
          "line": "    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]"
        },
        {
          "lineno": 17,
          "line": "    \"\"\""
        },
        {
          "lineno": 18,
          "line": "    return [list(x) for x in combinations(range(1, n + 1), k)]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 18,
          "label": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
          "successors": []
        }
      ]
    },
    {
      "name": "generate_all_combinations",
      "type": "function",
      "start_line": 21,
      "end_line": 49,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:"
        },
        {
          "lineno": 22,
          "line": "    \"\"\""
        },
        {
          "lineno": 23,
          "line": "    >>> generate_all_combinations(n=4, k=2)"
        },
        {
          "lineno": 24,
          "line": "    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]"
        },
        {
          "lineno": 25,
          "line": "    >>> generate_all_combinations(n=0, k=0)"
        },
        {
          "lineno": 26,
          "line": "    [[]]"
        },
        {
          "lineno": 27,
          "line": "    >>> generate_all_combinations(n=10, k=-1)"
        },
        {
          "lineno": 28,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 29,
          "line": "        ..."
        },
        {
          "lineno": 30,
          "line": "    ValueError: k must not be negative"
        },
        {
          "lineno": 31,
          "line": "    >>> generate_all_combinations(n=-1, k=10)"
        },
        {
          "lineno": 32,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 33,
          "line": "        ..."
        },
        {
          "lineno": 34,
          "line": "    ValueError: n must not be negative"
        },
        {
          "lineno": 35,
          "line": "    >>> generate_all_combinations(n=5, k=4)"
        },
        {
          "lineno": 36,
          "line": "    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]"
        },
        {
          "lineno": 37,
          "line": "    >>> from itertools import combinations"
        },
        {
          "lineno": 38,
          "line": "    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)"
        },
        {
          "lineno": 39,
          "line": "    ...     for n in range(1, 6) for k in range(1, 6))"
        },
        {
          "lineno": 40,
          "line": "    True"
        },
        {
          "lineno": 41,
          "line": "    \"\"\""
        },
        {
          "lineno": 42,
          "line": "    if k < 0:"
        },
        {
          "lineno": 43,
          "line": "        raise ValueError(\"k must not be negative\")"
        },
        {
          "lineno": 44,
          "line": "    if n < 0:"
        },
        {
          "lineno": 45,
          "line": "        raise ValueError(\"n must not be negative\")"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    result: list[list[int]] = []"
        },
        {
          "lineno": 48,
          "line": "    create_all_state(1, n, k, [], result)"
        },
        {
          "lineno": 49,
          "line": "    return result"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 41,
          "label": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 42,
              "end_line": 43,
              "label": "if k < 0:\n    raise ValueError(\"k must not be negative\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 44,
                  "end_line": 45,
                  "label": "if n < 0:\n    raise ValueError(\"n must not be negative\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 47,
                      "end_line": 48,
                      "label": "result: list[list[int]] = []\ncreate_all_state(1, n, k, [], result)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 49,
                          "end_line": 49,
                          "label": "return result",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_all_state",
      "type": "function",
      "start_line": 52,
      "end_line": 66,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 52,
          "line": "def create_all_state("
        },
        {
          "lineno": 53,
          "line": "    increment: int,"
        },
        {
          "lineno": 54,
          "line": "    total_number: int,"
        },
        {
          "lineno": 55,
          "line": "    level: int,"
        },
        {
          "lineno": 56,
          "line": "    current_list: list[int],"
        },
        {
          "lineno": 57,
          "line": "    total_list: list[list[int]],"
        },
        {
          "lineno": 58,
          "line": ") -> None:"
        },
        {
          "lineno": 59,
          "line": "    if level == 0:"
        },
        {
          "lineno": 60,
          "line": "        total_list.append(current_list[:])"
        },
        {
          "lineno": 61,
          "line": "        return"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    for i in range(increment, total_number - level + 2):"
        },
        {
          "lineno": 64,
          "line": "        current_list.append(i)"
        },
        {
          "lineno": 65,
          "line": "        create_all_state(i + 1, total_number, level - 1, current_list, total_list)"
        },
        {
          "lineno": 66,
          "line": "        current_list.pop()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 52,
          "end_line": 58,
          "label": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 59,
              "end_line": 61,
              "label": "if level == 0:\n    total_list.append(current_list[:])\n    return",
              "successors": [
                {
                  "id": 3,
                  "start_line": 63,
                  "end_line": 66,
                  "label": "for i in range(increment, total_number - level + 2):\n    current_list.append(i)\n    create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n    current_list.pop()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "In this problem, we want to determine all possible combinations of k"
    },
    {
      "lineno": 3,
      "line": "numbers out of 1 ... n. We use backtracking to solve this problem."
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "Time complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),"
    },
    {
      "lineno": 6,
      "line": "\"\"\""
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from itertools import combinations"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 69,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 70,
      "line": "    from doctest import testmod"
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 72,
      "line": "    testmod()"
    },
    {
      "lineno": 73,
      "line": "    print(generate_all_combinations(n=4, k=2))"
    },
    {
      "lineno": 74,
      "line": "    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))"
    },
    {
      "lineno": 75,
      "line": "    for n, k in tests:"
    },
    {
      "lineno": 76,
      "line": "        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))"
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 78,
      "line": "    print(\"Benchmark:\")"
    },
    {
      "lineno": 79,
      "line": "    from timeit import timeit"
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": "    for func in (\"combination_lists\", \"generate_all_combinations\"):"
    },
    {
      "lineno": 82,
      "line": "        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 10,
          "label": "from __future__ import annotations\n\nfrom itertools import combinations",
          "successors": [
            {
              "id": 3,
              "start_line": 69,
              "end_line": 69,
              "label": "if __name__ == \"__main__\":",
              "successors": [
                {
                  "id": 4,
                  "start_line": 70,
                  "end_line": 74,
                  "label": "from doctest import testmod\n\ntestmod()\nprint(generate_all_combinations(n=4, k=2))\ntests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 75,
                      "end_line": 76,
                      "label": "for n, k in tests:\n    print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 78,
                          "end_line": 79,
                          "label": "print(\"Benchmark:\")\nfrom timeit import timeit",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 81,
                              "end_line": 82,
                              "label": "for func in (\"combination_lists\", \"generate_all_combinations\"):\n    print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}