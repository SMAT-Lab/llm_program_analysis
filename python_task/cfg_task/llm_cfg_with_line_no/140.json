{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 193,
  "functions": [
    {
      "name": "__convert_list",
      "type": "function",
      "start_line": 9,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "def __convert_list(value: Any) -> list:"
        },
        {
          "lineno": 10,
          "line": "    if isinstance(value, (list, tuple, set)):"
        },
        {
          "lineno": 11,
          "line": "        return list(value)"
        },
        {
          "lineno": 12,
          "line": "    elif isinstance(value, dict):"
        },
        {
          "lineno": 13,
          "line": "        return list(value.items())"
        },
        {
          "lineno": 14,
          "line": "    elif isinstance(value, str):"
        },
        {
          "lineno": 15,
          "line": "        value = value.strip()"
        },
        {
          "lineno": 16,
          "line": "        if value.startswith(\"[\") and value.endswith(\"]\"):"
        },
        {
          "lineno": 17,
          "line": "            try:"
        },
        {
          "lineno": 18,
          "line": "                return json.loads(value)"
        },
        {
          "lineno": 19,
          "line": "            except json.JSONDecodeError:"
        },
        {
          "lineno": 20,
          "line": "                return [value]"
        },
        {
          "lineno": 21,
          "line": "        else:"
        },
        {
          "lineno": 22,
          "line": "            return [value]"
        },
        {
          "lineno": 23,
          "line": "    else:"
        },
        {
          "lineno": 24,
          "line": "        return [value]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 9,
          "label": "def __convert_list(value: Any) -> list:",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "if isinstance(value, (list, tuple, set)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "return list(value)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "elif isinstance(value, dict):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "return list(value.items())",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "elif isinstance(value, str):",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "value = value.strip()",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "if value.startswith(\"[\") and value.endswith(\"]\"):",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "try:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 18,
                                      "end_line": 18,
                                      "label": "return json.loads(value)",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 19,
                                      "end_line": 19,
                                      "label": "except json.JSONDecodeError:",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 20,
                                          "end_line": 20,
                                          "label": "return [value]",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "start_line": 21,
                                  "end_line": 21,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "start_line": 22,
                                      "end_line": 22,
                                      "label": "return [value]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "start_line": 23,
                      "end_line": 23,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 16,
                          "start_line": 24,
                          "end_line": 24,
                          "label": "return [value]",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_dict",
      "type": "function",
      "start_line": 27,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "def __convert_dict(value: Any) -> dict:"
        },
        {
          "lineno": 28,
          "line": "    if isinstance(value, str):"
        },
        {
          "lineno": 29,
          "line": "        try:"
        },
        {
          "lineno": 30,
          "line": "            result = json.loads(value)"
        },
        {
          "lineno": 31,
          "line": "            if isinstance(result, dict):"
        },
        {
          "lineno": 32,
          "line": "                return result"
        },
        {
          "lineno": 33,
          "line": "            else:"
        },
        {
          "lineno": 34,
          "line": "                return {\"value\": result}"
        },
        {
          "lineno": 35,
          "line": "        except json.JSONDecodeError:"
        },
        {
          "lineno": 36,
          "line": "            return {\"value\": value}  # Fallback conversion"
        },
        {
          "lineno": 37,
          "line": "    elif isinstance(value, list):"
        },
        {
          "lineno": 38,
          "line": "        return {i: value[i] for i in range(len(value))}"
        },
        {
          "lineno": 39,
          "line": "    elif isinstance(value, tuple):"
        },
        {
          "lineno": 40,
          "line": "        return {i: value[i] for i in range(len(value))}"
        },
        {
          "lineno": 41,
          "line": "    elif isinstance(value, dict):"
        },
        {
          "lineno": 42,
          "line": "        return value"
        },
        {
          "lineno": 43,
          "line": "    else:"
        },
        {
          "lineno": 44,
          "line": "        return {\"value\": value}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 27,
          "end_line": 27,
          "label": "def __convert_dict(value: Any) -> dict:",
          "successors": [
            {
              "id": 2,
              "start_line": 28,
              "end_line": 28,
              "label": "if isinstance(value, str):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 29,
                  "end_line": 29,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 30,
                      "end_line": 31,
                      "label": "result = json.loads(value)\nif isinstance(result, dict):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 32,
                          "end_line": 32,
                          "label": "return result",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 33,
                          "end_line": 34,
                          "label": "else:\nreturn {\"value\": result}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 35,
                      "end_line": 36,
                      "label": "except json.JSONDecodeError:\nreturn {\"value\": value}  # Fallback conversion",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 37,
              "end_line": 37,
              "label": "elif isinstance(value, list):",
              "successors": [
                {
                  "id": 9,
                  "start_line": 38,
                  "end_line": 38,
                  "label": "return {i: value[i] for i in range(len(value))}",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "start_line": 39,
              "end_line": 39,
              "label": "elif isinstance(value, tuple):",
              "successors": [
                {
                  "id": 11,
                  "start_line": 40,
                  "end_line": 40,
                  "label": "return {i: value[i] for i in range(len(value))}",
                  "successors": []
                }
              ]
            },
            {
              "id": 12,
              "start_line": 41,
              "end_line": 41,
              "label": "elif isinstance(value, dict):",
              "successors": [
                {
                  "id": 13,
                  "start_line": 42,
                  "end_line": 42,
                  "label": "return value",
                  "successors": []
                }
              ]
            },
            {
              "id": 14,
              "start_line": 43,
              "end_line": 43,
              "label": "else:",
              "successors": [
                {
                  "id": 15,
                  "start_line": 44,
                  "end_line": 44,
                  "label": "return {\"value\": value}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_tuple",
      "type": "function",
      "start_line": 47,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 47,
          "line": "def __convert_tuple(value: Any) -> tuple:"
        },
        {
          "lineno": 48,
          "line": "    if isinstance(value, (str, list, set)):"
        },
        {
          "lineno": 49,
          "line": "        return tuple(value)"
        },
        {
          "lineno": 50,
          "line": "    elif isinstance(value, dict):"
        },
        {
          "lineno": 51,
          "line": "        return tuple(value.items())"
        },
        {
          "lineno": 52,
          "line": "    elif isinstance(value, (int, float, bool)):"
        },
        {
          "lineno": 53,
          "line": "        return (value,)"
        },
        {
          "lineno": 54,
          "line": "    elif isinstance(value, tuple):"
        },
        {
          "lineno": 55,
          "line": "        return value"
        },
        {
          "lineno": 56,
          "line": "    else:"
        },
        {
          "lineno": 57,
          "line": "        return (value,)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 47,
          "end_line": 47,
          "label": "def __convert_tuple(value: Any) -> tuple:",
          "successors": [
            {
              "id": 2,
              "start_line": 48,
              "end_line": 49,
              "label": "if isinstance(value, (str, list, set)):\n    return tuple(value)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 50,
              "end_line": 51,
              "label": "elif isinstance(value, dict):\n    return tuple(value.items())",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 52,
              "end_line": 53,
              "label": "elif isinstance(value, (int, float, bool)):\n    return (value,)",
              "successors": []
            },
            {
              "id": 5,
              "start_line": 54,
              "end_line": 55,
              "label": "elif isinstance(value, tuple):\n    return value",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 56,
              "end_line": 57,
              "label": "else:\n    return (value,)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_set",
      "type": "function",
      "start_line": 60,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "def __convert_set(value: Any) -> set:"
        },
        {
          "lineno": 61,
          "line": "    if isinstance(value, (str, list, tuple)):"
        },
        {
          "lineno": 62,
          "line": "        return set(value)"
        },
        {
          "lineno": 63,
          "line": "    elif isinstance(value, dict):"
        },
        {
          "lineno": 64,
          "line": "        return set(value.items())"
        },
        {
          "lineno": 65,
          "line": "    elif isinstance(value, set):"
        },
        {
          "lineno": 66,
          "line": "        return value"
        },
        {
          "lineno": 67,
          "line": "    else:"
        },
        {
          "lineno": 68,
          "line": "        return {value}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 60,
          "end_line": 60,
          "label": "def __convert_set(value: Any) -> set:",
          "successors": [
            {
              "id": 2,
              "start_line": 61,
              "end_line": 62,
              "label": "if isinstance(value, (str, list, tuple)):\n        return set(value)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "elif isinstance(value, dict):\n        return set(value.items())",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 65,
                      "end_line": 66,
                      "label": "elif isinstance(value, set):\n        return value",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 67,
                          "end_line": 68,
                          "label": "else:\n        return {value}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_str",
      "type": "function",
      "start_line": 71,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 71,
          "line": "def __convert_str(value: Any) -> str:"
        },
        {
          "lineno": 72,
          "line": "    if isinstance(value, str):"
        },
        {
          "lineno": 73,
          "line": "        return value"
        },
        {
          "lineno": 74,
          "line": "    else:"
        },
        {
          "lineno": 75,
          "line": "        return json.dumps(value)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 71,
          "end_line": 71,
          "label": "def __convert_str(value: Any) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 72,
              "end_line": 73,
              "label": "if isinstance(value, str):\n    return value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 74,
                  "end_line": 75,
                  "label": "else:\n    return json.dumps(value)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_num",
      "type": "function",
      "start_line": 81,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 81,
          "line": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:"
        },
        {
          "lineno": 82,
          "line": "    if isinstance(value, (list, dict, tuple, set)):"
        },
        {
          "lineno": 83,
          "line": "        return num_type(len(value))"
        },
        {
          "lineno": 84,
          "line": "    elif isinstance(value, num_type):"
        },
        {
          "lineno": 85,
          "line": "        return value"
        },
        {
          "lineno": 86,
          "line": "    else:"
        },
        {
          "lineno": 87,
          "line": "        try:"
        },
        {
          "lineno": 88,
          "line": "            return num_type(float(value))"
        },
        {
          "lineno": 89,
          "line": "        except (ValueError, TypeError):"
        },
        {
          "lineno": 90,
          "line": "            return num_type(0)  # Fallback conversion"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 81,
          "end_line": 81,
          "label": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:",
          "successors": [
            {
              "id": 2,
              "start_line": 82,
              "end_line": 83,
              "label": "if isinstance(value, (list, dict, tuple, set)):\n    return num_type(len(value))",
              "successors": [
                {
                  "id": 3,
                  "start_line": 84,
                  "end_line": 85,
                  "label": "elif isinstance(value, num_type):\n    return value",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 86,
                      "end_line": 90,
                      "label": "else:\n    try:\n        return num_type(float(value))\n    except (ValueError, TypeError):\n        return num_type(0)  # Fallback conversion",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "__convert_bool",
      "type": "function",
      "start_line": 93,
      "end_line": 102,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 93,
          "line": "def __convert_bool(value: Any) -> bool:"
        },
        {
          "lineno": 94,
          "line": "    if isinstance(value, bool):"
        },
        {
          "lineno": 95,
          "line": "        return value"
        },
        {
          "lineno": 96,
          "line": "    elif isinstance(value, str):"
        },
        {
          "lineno": 97,
          "line": "        if value.lower() in [\"true\", \"1\"]:"
        },
        {
          "lineno": 98,
          "line": "            return True"
        },
        {
          "lineno": 99,
          "line": "        else:"
        },
        {
          "lineno": 100,
          "line": "            return False"
        },
        {
          "lineno": 101,
          "line": "    else:"
        },
        {
          "lineno": 102,
          "line": "        return bool(value)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 93,
          "end_line": 93,
          "label": "def __convert_bool(value: Any) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 94,
              "end_line": 95,
              "label": "if isinstance(value, bool):\n    return value",
              "successors": [
                {
                  "id": 3,
                  "start_line": 96,
                  "end_line": 100,
                  "label": "elif isinstance(value, str):\n    if value.lower() in [\"true\", \"1\"]:\n        return True\n    else:\n        return False",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 101,
                      "end_line": 102,
                      "label": "else:\n    return bool(value)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "_try_convert",
      "type": "function",
      "start_line": 105,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 105,
          "line": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:"
        },
        {
          "lineno": 106,
          "line": "    origin = get_origin(target_type)"
        },
        {
          "lineno": 107,
          "line": "    args = get_args(target_type)"
        },
        {
          "lineno": 108,
          "line": "    if origin is None:"
        },
        {
          "lineno": 109,
          "line": "        origin = target_type"
        },
        {
          "lineno": 110,
          "line": "    if origin not in [list, dict, tuple, str, set, int, float, bool]:"
        },
        {
          "lineno": 111,
          "line": "        return value"
        },
        {
          "lineno": 112,
          "line": ""
        },
        {
          "lineno": 113,
          "line": "    # Handle the case when value is already of the target type"
        },
        {
          "lineno": 114,
          "line": "    if isinstance(value, origin):"
        },
        {
          "lineno": 115,
          "line": "        if not args:"
        },
        {
          "lineno": 116,
          "line": "            return value"
        },
        {
          "lineno": 117,
          "line": "        else:"
        },
        {
          "lineno": 118,
          "line": "            # Need to convert elements"
        },
        {
          "lineno": 119,
          "line": "            if origin is list:"
        },
        {
          "lineno": 120,
          "line": "                return [convert(v, args[0]) for v in value]"
        },
        {
          "lineno": 121,
          "line": "            elif origin is tuple:"
        },
        {
          "lineno": 122,
          "line": "                # Tuples can have multiple types"
        },
        {
          "lineno": 123,
          "line": "                if len(args) == 1:"
        },
        {
          "lineno": 124,
          "line": "                    return tuple(convert(v, args[0]) for v in value)"
        },
        {
          "lineno": 125,
          "line": "                else:"
        },
        {
          "lineno": 126,
          "line": "                    return tuple(convert(v, t) for v, t in zip(value, args))"
        },
        {
          "lineno": 127,
          "line": "            elif origin is dict:"
        },
        {
          "lineno": 128,
          "line": "                key_type, val_type = args"
        },
        {
          "lineno": 129,
          "line": "                return {"
        },
        {
          "lineno": 130,
          "line": "                    convert(k, key_type): convert(v, val_type) for k, v in value.items()"
        },
        {
          "lineno": 131,
          "line": "                }"
        },
        {
          "lineno": 132,
          "line": "            elif origin is set:"
        },
        {
          "lineno": 133,
          "line": "                return {convert(v, args[0]) for v in value}"
        },
        {
          "lineno": 134,
          "line": "            else:"
        },
        {
          "lineno": 135,
          "line": "                return value"
        },
        {
          "lineno": 136,
          "line": "    elif raise_on_mismatch:"
        },
        {
          "lineno": 137,
          "line": "        raise TypeError(f\"Value {value} is not of expected type {target_type}\")"
        },
        {
          "lineno": 138,
          "line": "    else:"
        },
        {
          "lineno": 139,
          "line": "        # Need to convert value to the origin type"
        },
        {
          "lineno": 140,
          "line": "        if origin is list:"
        },
        {
          "lineno": 141,
          "line": "            value = __convert_list(value)"
        },
        {
          "lineno": 142,
          "line": "            if args:"
        },
        {
          "lineno": 143,
          "line": "                return [convert(v, args[0]) for v in value]"
        },
        {
          "lineno": 144,
          "line": "            else:"
        },
        {
          "lineno": 145,
          "line": "                return value"
        },
        {
          "lineno": 146,
          "line": "        elif origin is dict:"
        },
        {
          "lineno": 147,
          "line": "            value = __convert_dict(value)"
        },
        {
          "lineno": 148,
          "line": "            if args:"
        },
        {
          "lineno": 149,
          "line": "                key_type, val_type = args"
        },
        {
          "lineno": 150,
          "line": "                return {"
        },
        {
          "lineno": 151,
          "line": "                    convert(k, key_type): convert(v, val_type) for k, v in value.items()"
        },
        {
          "lineno": 152,
          "line": "                }"
        },
        {
          "lineno": 153,
          "line": "            else:"
        },
        {
          "lineno": 154,
          "line": "                return value"
        },
        {
          "lineno": 155,
          "line": "        elif origin is tuple:"
        },
        {
          "lineno": 156,
          "line": "            value = __convert_tuple(value)"
        },
        {
          "lineno": 157,
          "line": "            if args:"
        },
        {
          "lineno": 158,
          "line": "                if len(args) == 1:"
        },
        {
          "lineno": 159,
          "line": "                    return tuple(convert(v, args[0]) for v in value)"
        },
        {
          "lineno": 160,
          "line": "                else:"
        },
        {
          "lineno": 161,
          "line": "                    return tuple(convert(v, t) for v, t in zip(value, args))"
        },
        {
          "lineno": 162,
          "line": "            else:"
        },
        {
          "lineno": 163,
          "line": "                return value"
        },
        {
          "lineno": 164,
          "line": "        elif origin is str:"
        },
        {
          "lineno": 165,
          "line": "            return __convert_str(value)"
        },
        {
          "lineno": 166,
          "line": "        elif origin is set:"
        },
        {
          "lineno": 167,
          "line": "            value = __convert_set(value)"
        },
        {
          "lineno": 168,
          "line": "            if args:"
        },
        {
          "lineno": 169,
          "line": "                return {convert(v, args[0]) for v in value}"
        },
        {
          "lineno": 170,
          "line": "            else:"
        },
        {
          "lineno": 171,
          "line": "                return value"
        },
        {
          "lineno": 172,
          "line": "        elif origin is int:"
        },
        {
          "lineno": 173,
          "line": "            return __convert_num(value, int)"
        },
        {
          "lineno": 174,
          "line": "        elif origin is float:"
        },
        {
          "lineno": 175,
          "line": "            return __convert_num(value, float)"
        },
        {
          "lineno": 176,
          "line": "        elif origin is bool:"
        },
        {
          "lineno": 177,
          "line": "            return __convert_bool(value)"
        },
        {
          "lineno": 178,
          "line": "        else:"
        },
        {
          "lineno": 179,
          "line": "            return value"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 105,
          "end_line": 107,
          "label": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)",
          "successors": [
            {
              "id": 2,
              "start_line": 108,
              "end_line": 109,
              "label": "if origin is None:\n    origin = target_type",
              "successors": [
                {
                  "id": 3,
                  "start_line": 110,
                  "end_line": 111,
                  "label": "if origin not in [list, dict, tuple, str, set, int, float, bool]:\n    return value",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 114,
                  "end_line": 115,
                  "label": "if isinstance(value, origin):\n    if not args:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 116,
                      "end_line": 116,
                      "label": "return value",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 117,
                      "end_line": 120,
                      "label": "else:\n    # Need to convert elements\n    if origin is list:\n        return [convert(v, args[0]) for v in value]",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 121,
                          "end_line": 126,
                          "label": "elif origin is tuple:\n    # Tuples can have multiple types\n    if len(args) == 1:\n        return tuple(convert(v, args[0]) for v in value)\n    else:\n        return tuple(convert(v, t) for v, t in zip(value, args))",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 127,
                              "end_line": 131,
                              "label": "elif origin is dict:\n    key_type, val_type = args\n    return {\n        convert(k, key_type): convert(v, val_type) for k, v in value.items()\n    }",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 132,
                                  "end_line": 133,
                                  "label": "elif origin is set:\n    return {convert(v, args[0]) for v in value}",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 134,
                                      "end_line": 135,
                                      "label": "else:\n    return value",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "start_line": 136,
                  "end_line": 137,
                  "label": "elif raise_on_mismatch:\n    raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                  "successors": []
                },
                {
                  "id": 12,
                  "start_line": 138,
                  "end_line": 139,
                  "label": "else:\n    # Need to convert value to the origin type",
                  "successors": [
                    {
                      "id": 13,
                      "start_line": 140,
                      "end_line": 145,
                      "label": "if origin is list:\n    value = __convert_list(value)\n    if args:\n        return [convert(v, args[0]) for v in value]\n    else:\n        return value",
                      "successors": [
                        {
                          "id": 14,
                          "start_line": 146,
                          "end_line": 154,
                          "label": "elif origin is dict:\n    value = __convert_dict(value)\n    if args:\n        key_type, val_type = args\n        return {\n            convert(k, key_type): convert(v, val_type) for k, v in value.items()\n        }\n    else:\n        return value",
                          "successors": [
                            {
                              "id": 15,
                              "start_line": 155,
                              "end_line": 163,
                              "label": "elif origin is tuple:\n    value = __convert_tuple(value)\n    if args:\n        if len(args) == 1:\n            return tuple(convert(v, args[0]) for v in value)\n        else:\n            return tuple(convert(v, t) for v, t in zip(value, args))\n    else:\n        return value",
                              "successors": [
                                {
                                  "id": 16,
                                  "start_line": 164,
                                  "end_line": 165,
                                  "label": "elif origin is str:\n    return __convert_str(value)",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "start_line": 166,
                                      "end_line": 171,
                                      "label": "elif origin is set:\n    value = __convert_set(value)\n    if args:\n        return {convert(v, args[0]) for v in value}\n    else:\n        return value",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "start_line": 172,
                                          "end_line": 173,
                                          "label": "elif origin is int:\n    return __convert_num(value, int)",
                                          "successors": [
                                            {
                                              "id": 19,
                                              "start_line": 174,
                                              "end_line": 175,
                                              "label": "elif origin is float:\n    return __convert_num(value, float)",
                                              "successors": [
                                                {
                                                  "id": 20,
                                                  "start_line": 176,
                                                  "end_line": 177,
                                                  "label": "elif origin is bool:\n    return __convert_bool(value)",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "start_line": 178,
                                                      "end_line": 179,
                                                      "label": "else:\n    return value",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "type_match",
      "type": "function",
      "start_line": 185,
      "end_line": 186,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 185,
          "line": "def type_match(value: Any, target_type: Type[T]) -> T:"
        },
        {
          "lineno": 186,
          "line": "    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 185,
          "end_line": 186,
          "label": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
          "successors": []
        }
      ]
    },
    {
      "name": "convert",
      "type": "function",
      "start_line": 189,
      "end_line": 193,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 189,
          "line": "def convert(value: Any, target_type: Type[T]) -> T:"
        },
        {
          "lineno": 190,
          "line": "    try:"
        },
        {
          "lineno": 191,
          "line": "        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))"
        },
        {
          "lineno": 192,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 193,
          "line": "        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 189,
          "end_line": 189,
          "label": "def convert(value: Any, target_type: Type[T]) -> T:",
          "successors": [
            {
              "id": 2,
              "start_line": 190,
              "end_line": 191,
              "label": "    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
              "successors": [
                {
                  "id": 3,
                  "start_line": 192,
                  "end_line": 193,
                  "label": "    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ConversionError",
      "type": "class",
      "start_line": 5,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "class ConversionError(ValueError):"
        },
        {
          "lineno": 6,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 6,
          "label": "class ConversionError(ValueError):\n    pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, Type, TypeVar, cast, get_args, get_origin"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 78,
      "line": "NUM = TypeVar(\"NUM\", int, float)"
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": ""
    },
    {
      "lineno": 103,
      "line": ""
    },
    {
      "lineno": 104,
      "line": ""
    },
    {
      "lineno": 180,
      "line": ""
    },
    {
      "lineno": 181,
      "line": ""
    },
    {
      "lineno": 182,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 183,
      "line": ""
    },
    {
      "lineno": 184,
      "line": ""
    },
    {
      "lineno": 187,
      "line": ""
    },
    {
      "lineno": 188,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin",
      "successors": [
        {
          "id": 2,
          "start_line": 78,
          "end_line": 78,
          "label": "NUM = TypeVar(\"NUM\", int, float)",
          "successors": [
            {
              "id": 3,
              "start_line": 182,
              "end_line": 182,
              "label": "T = TypeVar(\"T\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}