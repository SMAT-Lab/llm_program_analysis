{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 101,
  "functions": [
    {
      "name": "get_valid_pos",
      "type": "function",
      "start_line": 6,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:"
        },
        {
          "lineno": 7,
          "line": "    \"\"\""
        },
        {
          "lineno": 8,
          "line": "    Find all the valid positions a knight can move to from the current position."
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 10,
          "line": "    >>> get_valid_pos((1, 3), 4)"
        },
        {
          "lineno": 11,
          "line": "    [(2, 1), (0, 1), (3, 2)]"
        },
        {
          "lineno": 12,
          "line": "    \"\"\""
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 14,
          "line": "    y, x = position"
        },
        {
          "lineno": 15,
          "line": "    positions = ["
        },
        {
          "lineno": 16,
          "line": "        (y + 1, x + 2),"
        },
        {
          "lineno": 17,
          "line": "        (y - 1, x + 2),"
        },
        {
          "lineno": 18,
          "line": "        (y + 1, x - 2),"
        },
        {
          "lineno": 19,
          "line": "        (y - 1, x - 2),"
        },
        {
          "lineno": 20,
          "line": "        (y + 2, x + 1),"
        },
        {
          "lineno": 21,
          "line": "        (y + 2, x - 1),"
        },
        {
          "lineno": 22,
          "line": "        (y - 2, x + 1),"
        },
        {
          "lineno": 23,
          "line": "        (y - 2, x - 1),"
        },
        {
          "lineno": 24,
          "line": "    ]"
        },
        {
          "lineno": 25,
          "line": "    permissible_positions = []"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    for inner_position in positions:"
        },
        {
          "lineno": 28,
          "line": "        y_test, x_test = inner_position"
        },
        {
          "lineno": 29,
          "line": "        if 0 <= y_test < n and 0 <= x_test < n:"
        },
        {
          "lineno": 30,
          "line": "            permissible_positions.append(inner_position)"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    return permissible_positions"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 14,
          "label": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 25,
              "label": "positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []",
              "successors": [
                {
                  "id": 3,
                  "start_line": 27,
                  "end_line": 27,
                  "label": "for inner_position in positions:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 28,
                      "end_line": 30,
                      "label": "y_test, x_test = inner_position\nif 0 <= y_test < n and 0 <= x_test < n:\n    permissible_positions.append(inner_position)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 32,
                          "end_line": 32,
                          "label": "return permissible_positions",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 32,
                      "end_line": 32,
                      "label": "return permissible_positions",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "is_complete",
      "type": "function",
      "start_line": 35,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "def is_complete(board: list[list[int]]) -> bool:"
        },
        {
          "lineno": 36,
          "line": "    \"\"\""
        },
        {
          "lineno": 37,
          "line": "    Check if the board (matrix) has been completely filled with non-zero values."
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 39,
          "line": "    >>> is_complete([[1]])"
        },
        {
          "lineno": 40,
          "line": "    True"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    >>> is_complete([[1, 2], [3, 0]])"
        },
        {
          "lineno": 43,
          "line": "    False"
        },
        {
          "lineno": 44,
          "line": "    \"\"\""
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "    return not any(elem == 0 for row in board for elem in row)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 35,
          "end_line": 44,
          "label": "def is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 46,
              "end_line": 46,
              "label": "return not any(elem == 0 for row in board for elem in row)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "open_knight_tour_helper",
      "type": "function",
      "start_line": 49,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 49,
          "line": "def open_knight_tour_helper("
        },
        {
          "lineno": 50,
          "line": "    board: list[list[int]], pos: tuple[int, int], curr: int"
        },
        {
          "lineno": 51,
          "line": ") -> bool:"
        },
        {
          "lineno": 52,
          "line": "    \"\"\""
        },
        {
          "lineno": 53,
          "line": "    Helper function to solve knight tour problem."
        },
        {
          "lineno": 54,
          "line": "    \"\"\""
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    if is_complete(board):"
        },
        {
          "lineno": 57,
          "line": "        return True"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    for position in get_valid_pos(pos, len(board)):"
        },
        {
          "lineno": 60,
          "line": "        y, x = position"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "        if board[y][x] == 0:"
        },
        {
          "lineno": 63,
          "line": "            board[y][x] = curr + 1"
        },
        {
          "lineno": 64,
          "line": "            if open_knight_tour_helper(board, position, curr + 1):"
        },
        {
          "lineno": 65,
          "line": "                return True"
        },
        {
          "lineno": 66,
          "line": "            board[y][x] = 0"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 49,
          "end_line": 56,
          "label": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):",
          "successors": [
            {
              "id": 2,
              "start_line": 57,
              "end_line": 57,
              "label": "return True",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 59,
              "end_line": 67,
              "label": "for position in get_valid_pos(pos, len(board)):\n    y, x = position\n\n    if board[y][x] == 0:\n        board[y][x] = curr + 1\n        if open_knight_tour_helper(board, position, curr + 1):\n            return True\n        board[y][x] = 0",
              "successors": [
                {
                  "id": 4,
                  "start_line": 68,
                  "end_line": 68,
                  "label": "return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "open_knight_tour",
      "type": "function",
      "start_line": 71,
      "end_line": 95,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 71,
          "line": "def open_knight_tour(n: int) -> list[list[int]]:"
        },
        {
          "lineno": 72,
          "line": "    \"\"\""
        },
        {
          "lineno": 73,
          "line": "    Find the solution for the knight tour problem for a board of size n. Raises"
        },
        {
          "lineno": 74,
          "line": "    ValueError if the tour cannot be performed for the given size."
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    >>> open_knight_tour(1)"
        },
        {
          "lineno": 77,
          "line": "    [[1]]"
        },
        {
          "lineno": 78,
          "line": ""
        },
        {
          "lineno": 79,
          "line": "    >>> open_knight_tour(2)"
        },
        {
          "lineno": 80,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 81,
          "line": "        ..."
        },
        {
          "lineno": 82,
          "line": "    ValueError: Open Knight Tour cannot be performed on a board of size 2"
        },
        {
          "lineno": 83,
          "line": "    \"\"\""
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "    board = [[0 for i in range(n)] for j in range(n)]"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "    for i in range(n):"
        },
        {
          "lineno": 88,
          "line": "        for j in range(n):"
        },
        {
          "lineno": 89,
          "line": "            board[i][j] = 1"
        },
        {
          "lineno": 90,
          "line": "            if open_knight_tour_helper(board, (i, j), 1):"
        },
        {
          "lineno": 91,
          "line": "                return board"
        },
        {
          "lineno": 92,
          "line": "            board[i][j] = 0"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\""
        },
        {
          "lineno": 95,
          "line": "    raise ValueError(msg)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 71,
          "end_line": 71,
          "label": "def open_knight_tour(n: int) -> list[list[int]]:",
          "successors": [
            {
              "id": 2,
              "start_line": 72,
              "end_line": 83,
              "label": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 84,
                  "end_line": 85,
                  "label": "    board = [[0 for i in range(n)] for j in range(n)]",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 87,
                      "end_line": 87,
                      "label": "    for i in range(n):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 88,
                          "end_line": 88,
                          "label": "        for j in range(n):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 89,
                              "end_line": 90,
                              "label": "            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 91,
                                  "end_line": 91,
                                  "label": "                return board",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "start_line": 92,
                                  "end_line": 92,
                                  "label": "            board[i][j] = 0",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 87,
                                      "end_line": 87,
                                      "label": "    for i in range(n):",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "start_line": 88,
                                          "end_line": 88,
                                          "label": "        for j in range(n):",
                                          "successors": [
                                            {
                                              "id": 6,
                                              "start_line": 89,
                                              "end_line": 90,
                                              "label": "            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 94,
                  "end_line": 95,
                  "label": "    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 96,
      "line": ""
    },
    {
      "lineno": 97,
      "line": ""
    },
    {
      "lineno": 98,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 99,
      "line": "    import doctest"
    },
    {
      "lineno": 100,
      "line": ""
    },
    {
      "lineno": 101,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "from __future__ import annotations",
          "successors": [
            {
              "id": 3,
              "start_line": 98,
              "end_line": 98,
              "label": "if __name__ == \"__main__\":",
              "successors": [
                {
                  "id": 4,
                  "start_line": 99,
                  "end_line": 99,
                  "label": "import doctest",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 101,
                      "end_line": 101,
                      "label": "doctest.testmod()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}