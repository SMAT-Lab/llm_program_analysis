{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [
    {
      "name": "rate_limit_middleware",
      "type": "function",
      "start_line": 7,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):"
        },
        {
          "lineno": 8,
          "line": "    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\""
        },
        {
          "lineno": 9,
          "line": "    limiter = RateLimiter()"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 11,
          "line": "    if not request.url.path.startswith(\"/api\"):"
        },
        {
          "lineno": 12,
          "line": "        return await call_next(request)"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 14,
          "line": "    api_key = request.headers.get(\"Authorization\")"
        },
        {
          "lineno": 15,
          "line": "    if not api_key:"
        },
        {
          "lineno": 16,
          "line": "        return await call_next(request)"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "    api_key = api_key.replace(\"Bearer \", \"\")"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    if not is_allowed:"
        },
        {
          "lineno": 23,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 24,
          "line": "            status_code=429, detail=\"Rate limit exceeded. Please try again later.\""
        },
        {
          "lineno": 25,
          "line": "        )"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    response = await call_next(request)"
        },
        {
          "lineno": 28,
          "line": "    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)"
        },
        {
          "lineno": 29,
          "line": "    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)"
        },
        {
          "lineno": 30,
          "line": "    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    return response"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 9,
          "label": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "if not request.url.path.startswith(\"/api\"):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "return await call_next(request)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "api_key = request.headers.get(\"Authorization\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "if not api_key:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 16,
                          "end_line": 16,
                          "label": "return await call_next(request)",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 18,
                          "end_line": 20,
                          "label": "api_key = api_key.replace(\"Bearer \", \"\")\n\n    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "if not is_allowed:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 23,
                                  "end_line": 25,
                                  "label": "raise HTTPException(\n            status_code=429, detail=\"Rate limit exceeded. Please try again later.\"\n        )",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "start_line": 27,
                                  "end_line": 30,
                                  "label": "response = await call_next(request)\n    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)\n    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)\n    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 32,
                                      "end_line": 32,
                                      "label": "return response",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from fastapi import HTTPException, Request"
    },
    {
      "lineno": 2,
      "line": "from starlette.middleware.base import RequestResponseEndpoint"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from .limiter import RateLimiter"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 4,
          "label": "from .limiter import RateLimiter",
          "successors": []
        }
      ]
    }
  ]
}