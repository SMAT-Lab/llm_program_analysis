{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "QueryApi",
      "type": "class",
      "start_line": 4,
      "end_line": 23,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 6,
          "end_line": 8,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    def __init__(self, memory_cache, reverse_index_cluster):"
            },
            {
              "lineno": 7,
              "line": "        self.memory_cache = memory_cache"
            },
            {
              "lineno": 8,
              "line": "        self.reverse_index_cluster = reverse_index_cluster"
            }
          ],
          "blocks": []
        },
        {
          "name": "parse_query",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    def parse_query(self, query):"
            },
            {
              "lineno": 11,
              "line": "        \"\"\"Remove markup, break text into terms, deal with typos,"
            },
            {
              "lineno": 12,
              "line": "        normalize capitalization, convert to use boolean operations."
            },
            {
              "lineno": 13,
              "line": "        \"\"\""
            },
            {
              "lineno": 14,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 10,
              "end_line": 10,
              "label": "    def parse_query(self, query):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 14,
                  "label": "        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "process_query",
          "type": "function",
          "start_line": 16,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    def process_query(self, query):"
            },
            {
              "lineno": 17,
              "line": "        query = self.parse_query(query)"
            },
            {
              "lineno": 18,
              "line": "        results = self.memory_cache.get(query)"
            },
            {
              "lineno": 19,
              "line": "        if results is None:"
            },
            {
              "lineno": 20,
              "line": "            results = self.reverse_index_cluster.process_search(query)"
            },
            {
              "lineno": 21,
              "line": "            self.memory_cache.set(query, results)"
            },
            {
              "lineno": 22,
              "line": "        return results"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 18,
              "label": "    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 21,
                  "label": "        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "        return results",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "class QueryApi(object):"
        },
        {
          "lineno": 5,
          "line": ""
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 23,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 4,
          "label": "class QueryApi(object):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 5,
          "end_line": 5,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 9,
          "end_line": 9,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 15,
          "end_line": 15,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 23,
          "end_line": 23,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "Node",
      "type": "class",
      "start_line": 25,
      "end_line": 30,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    def __init__(self, query, results):"
            },
            {
              "lineno": 28,
              "line": "        self.query = query"
            },
            {
              "lineno": 29,
              "line": "        self.results = results"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 27,
              "end_line": 29,
              "label": "    def __init__(self, query, results):\n        self.query = query\n        self.results = results",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "class Node(object):"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 30,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 25,
          "end_line": 25,
          "label": "class Node(object):",
          "successors": []
        }
      ]
    },
    {
      "name": "LinkedList",
      "type": "class",
      "start_line": 32,
      "end_line": 47,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 35,
              "line": "        self.head = None"
            },
            {
              "lineno": 36,
              "line": "        self.tail = None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 36,
              "label": "    def __init__(self):\n        self.head = None\n        self.tail = None",
              "successors": []
            }
          ]
        },
        {
          "name": "move_to_front",
          "type": "function",
          "start_line": 38,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def move_to_front(self, node):"
            },
            {
              "lineno": 39,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 38,
              "end_line": 38,
              "label": "    def move_to_front(self, node):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 39,
                  "end_line": 39,
                  "label": "        ...",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "append_to_front",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def append_to_front(self, node):"
            },
            {
              "lineno": 42,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 41,
              "label": "def append_to_front(self, node):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 42,
                  "end_line": 42,
                  "label": "...",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "remove_from_tail",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def remove_from_tail(self):"
            },
            {
              "lineno": 45,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 44,
              "label": "    def remove_from_tail(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 45,
                  "end_line": 45,
                  "label": "        ...",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 32,
          "line": "class LinkedList(object):"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 32,
          "end_line": 32,
          "label": "class LinkedList(object):",
          "successors": []
        }
      ]
    },
    {
      "name": "Cache",
      "type": "class",
      "start_line": 48,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 50,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    def __init__(self, MAX_SIZE):"
            },
            {
              "lineno": 51,
              "line": "        self.MAX_SIZE = MAX_SIZE"
            },
            {
              "lineno": 52,
              "line": "        self.size = 0"
            },
            {
              "lineno": 53,
              "line": "        self.lookup = {}"
            },
            {
              "lineno": 54,
              "line": "        self.linked_list = LinkedList()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 50,
              "end_line": 54,
              "label": "    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 56,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 56,
              "line": "    def get(self, query):"
            },
            {
              "lineno": 57,
              "line": "        \"\"\"Get the stored query result from the cache."
            },
            {
              "lineno": 58,
              "line": ""
            },
            {
              "lineno": 59,
              "line": "        Accessing a node updates its position to the front of the LRU list."
            },
            {
              "lineno": 60,
              "line": "        \"\"\""
            },
            {
              "lineno": 61,
              "line": "        node = self.lookup[query]"
            },
            {
              "lineno": 62,
              "line": "        if node is None:"
            },
            {
              "lineno": 63,
              "line": "            return None"
            },
            {
              "lineno": 64,
              "line": "        self.linked_list.move_to_front(node)"
            },
            {
              "lineno": 65,
              "line": "        return node.results"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 56,
              "end_line": 61,
              "label": "    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 62,
                  "end_line": 63,
                  "label": "        if node is None:\n            return None",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 64,
                      "end_line": 65,
                      "label": "        self.linked_list.move_to_front(node)\n        return node.results",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 67,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    def set(self, results, query):"
            },
            {
              "lineno": 68,
              "line": "        \"\"\"Set the result for the given query key in the cache."
            },
            {
              "lineno": 69,
              "line": ""
            },
            {
              "lineno": 70,
              "line": "        When updating an entry, updates its position to the front of the LRU list."
            },
            {
              "lineno": 71,
              "line": "        If the entry is new and the cache is at capacity, removes the oldest entry"
            },
            {
              "lineno": 72,
              "line": "        before the new entry is added."
            },
            {
              "lineno": 73,
              "line": "        \"\"\""
            },
            {
              "lineno": 74,
              "line": "        node = self.map[query]"
            },
            {
              "lineno": 75,
              "line": "        if node is not None:"
            },
            {
              "lineno": 76,
              "line": "            # Key exists in cache, update the value"
            },
            {
              "lineno": 77,
              "line": "            node.results = results"
            },
            {
              "lineno": 78,
              "line": "            self.linked_list.move_to_front(node)"
            },
            {
              "lineno": 79,
              "line": "        else:"
            },
            {
              "lineno": 80,
              "line": "            # Key does not exist in cache"
            },
            {
              "lineno": 81,
              "line": "            if self.size == self.MAX_SIZE:"
            },
            {
              "lineno": 82,
              "line": "                # Remove the oldest entry from the linked list and lookup"
            },
            {
              "lineno": 83,
              "line": "                self.lookup.pop(self.linked_list.tail.query, None)"
            },
            {
              "lineno": 84,
              "line": "                self.linked_list.remove_from_tail()"
            },
            {
              "lineno": 85,
              "line": "            else:"
            },
            {
              "lineno": 86,
              "line": "                self.size += 1"
            },
            {
              "lineno": 87,
              "line": "            # Add the new key and value"
            },
            {
              "lineno": 88,
              "line": "            new_node = Node(query, results)"
            },
            {
              "lineno": 89,
              "line": "            self.linked_list.append_to_front(new_node)"
            },
            {
              "lineno": 90,
              "line": "            self.lookup[query] = new_node"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 67,
              "end_line": 74,
              "label": "    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 75,
                  "end_line": 78,
                  "label": "        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 79,
                      "end_line": 90,
                      "label": "        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "class Cache(object):"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 66,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 48,
          "end_line": 48,
          "label": "class Cache(object):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 49,
          "end_line": 49,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 55,
          "end_line": 55,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 66,
          "end_line": 66,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# -*- coding: utf-8 -*-",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 3,
      "label": "\n",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 24,
      "end_line": 24,
      "label": "",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 31,
      "end_line": 31,
      "label": "",
      "successors": []
    }
  ]
}