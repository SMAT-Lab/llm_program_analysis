{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 22,
  "functions": [],
  "classes": [
    {
      "name": "TextFormatter",
      "type": "class",
      "start_line": 7,
      "end_line": 22,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 8,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 9,
              "line": "        # Create a sandboxed environment"
            },
            {
              "lineno": 10,
              "line": "        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)"
            },
            {
              "lineno": 11,
              "line": ""
            },
            {
              "lineno": 12,
              "line": "        # Clear any registered filters, tests, and globals to minimize attack surface"
            },
            {
              "lineno": 13,
              "line": "        self.env.filters.clear()"
            },
            {
              "lineno": 14,
              "line": "        self.env.tests.clear()"
            },
            {
              "lineno": 15,
              "line": "        self.env.globals.clear()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 15,
              "label": "    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()",
              "successors": []
            }
          ]
        },
        {
          "name": "format_string",
          "type": "function",
          "start_line": 17,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    def format_string(self, template_str: str, values=None, **kwargs) -> str:"
            },
            {
              "lineno": 18,
              "line": "        # For python.format compatibility: replace all {...} with {{..}}."
            },
            {
              "lineno": 19,
              "line": "        # But avoid replacing {{...}} to {{{...}}}."
            },
            {
              "lineno": 20,
              "line": "        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)"
            },
            {
              "lineno": 21,
              "line": "        template = self.env.from_string(template_str)"
            },
            {
              "lineno": 22,
              "line": "        return template.render(values or {}, **kwargs)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 21,
              "label": "    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "        return template.render(values or {}, **kwargs)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class TextFormatter:"
        },
        {
          "lineno": 16,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 7,
          "label": "class TextFormatter:",
          "successors": [
            {
              "id": 2,
              "start_line": 16,
              "end_line": 16,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import re"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from jinja2 import BaseLoader"
    },
    {
      "lineno": 4,
      "line": "from jinja2.sandbox import SandboxedEnvironment"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import re",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 4,
      "label": "from jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 5,
      "end_line": 6,
      "label": "",
      "successors": []
    }
  ]
}