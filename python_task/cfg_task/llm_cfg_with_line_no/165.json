{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 45,
  "functions": [
    {
      "name": "ld_client",
      "type": "function",
      "start_line": 8,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "def ld_client(mocker):"
        },
        {
          "lineno": 9,
          "line": "    client = mocker.Mock(spec=LDClient)"
        },
        {
          "lineno": 10,
          "line": "    mocker.patch(\"ldclient.get\", return_value=client)"
        },
        {
          "lineno": 11,
          "line": "    client.is_initialized.return_value = True"
        },
        {
          "lineno": 12,
          "line": "    return client"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 11,
          "label": "def ld_client(mocker):\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 12,
              "label": "    return client",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_feature_flag_enabled",
      "type": "function",
      "start_line": 16,
      "end_line": 25,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 20,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    async def test_function(user_id: str):"
            },
            {
              "lineno": 21,
              "line": "        return \"success\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 20,
              "end_line": 21,
              "label": "    async def test_function(user_id: str):\n        return \"success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "async def test_feature_flag_enabled(ld_client):"
        },
        {
          "lineno": 17,
          "line": "    ld_client.variation.return_value = True"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    @feature_flag(\"test-flag\")"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    result = test_function(user_id=\"test-user\")"
        },
        {
          "lineno": 24,
          "line": "    assert result == \"success\""
        },
        {
          "lineno": 25,
          "line": "    ld_client.variation.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 25,
          "label": "async def test_feature_flag_enabled(ld_client):\n    ld_client.variation.return_value = True\n\n    @feature_flag(\"test-flag\")\n\n    result = test_function(user_id=\"test-user\")\n    assert result == \"success\"\n    ld_client.variation.assert_called_once()",
          "successors": []
        }
      ]
    },
    {
      "name": "test_feature_flag_unauthorized_response",
      "type": "function",
      "start_line": 29,
      "end_line": 37,
      "functions": [
        {
          "name": "test_function",
          "type": "function",
          "start_line": 33,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    async def test_function(user_id: str):"
            },
            {
              "lineno": 34,
              "line": "        return \"success\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 34,
              "label": "async def test_function(user_id: str):\n    return \"success\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "async def test_feature_flag_unauthorized_response(ld_client):"
        },
        {
          "lineno": 30,
          "line": "    ld_client.variation.return_value = False"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    @feature_flag(\"test-flag\")"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    result = test_function(user_id=\"test-user\")"
        },
        {
          "lineno": 37,
          "line": "    assert result == {\"error\": \"disabled\"}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 29,
          "end_line": 30,
          "label": "async def test_feature_flag_unauthorized_response(ld_client):\n    ld_client.variation.return_value = False",
          "successors": [
            {
              "id": 2,
              "start_line": 32,
              "end_line": 32,
              "label": "    @feature_flag(\"test-flag\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 36,
                  "end_line": 37,
                  "label": "    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_mock_flag_variation",
      "type": "function",
      "start_line": 40,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 40,
          "line": "def test_mock_flag_variation(ld_client):"
        },
        {
          "lineno": 41,
          "line": "    with mock_flag_variation(\"test-flag\", True):"
        },
        {
          "lineno": 42,
          "line": "        assert ld_client.variation(\"test-flag\", None, False)"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    with mock_flag_variation(\"test-flag\", False):"
        },
        {
          "lineno": 45,
          "line": "        assert ld_client.variation(\"test-flag\", None, False)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 40,
          "end_line": 40,
          "label": "def test_mock_flag_variation(ld_client):",
          "successors": [
            {
              "id": 2,
              "start_line": 41,
              "end_line": 43,
              "label": "with mock_flag_variation(\"test-flag\", True):\n    assert ld_client.variation(\"test-flag\", None, False)\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 44,
                  "end_line": 45,
                  "label": "with mock_flag_variation(\"test-flag\", False):\n    assert ld_client.variation(\"test-flag\", None, False)"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import pytest"
    },
    {
      "lineno": 2,
      "line": "from ldclient import LDClient"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import pytest\nfrom ldclient import LDClient\n\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation",
      "successors": [
        {
          "id": 2,
          "start_line": 7,
          "end_line": 7,
          "label": "@pytest.fixture",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "start_line": 15,
      "end_line": 15,
      "label": "@pytest.mark.asyncio",
      "successors": [
        {
          "id": 4,
          "start_line": 28,
          "end_line": 28,
          "label": "@pytest.mark.asyncio",
          "successors": []
        }
      ]
    }
  ]
}