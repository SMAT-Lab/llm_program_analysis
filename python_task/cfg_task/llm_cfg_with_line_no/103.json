{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 309,
  "functions": [],
  "classes": [
    {
      "name": "IntegrationCredentialsStore",
      "type": "class",
      "start_line": 110,
      "end_line": 309,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 111,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 111,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 112,
              "line": "        from backend.data.redis import get_redis"
            },
            {
              "lineno": 113,
              "line": ""
            },
            {
              "lineno": 114,
              "line": "        self.locks = RedisKeyedMutex(get_redis())"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 111,
              "end_line": 114,
              "label": "    def __init__(self):\n        from backend.data.redis import get_redis\n        \n        self.locks = RedisKeyedMutex(get_redis())",
              "successors": []
            }
          ]
        },
        {
          "name": "db_manager",
          "type": "function",
          "start_line": 118,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def db_manager(self) -> \"DatabaseManager\":"
            },
            {
              "lineno": 119,
              "line": "        from backend.executor.database import DatabaseManager"
            },
            {
              "lineno": 120,
              "line": "        from backend.util.service import get_service_client"
            },
            {
              "lineno": 121,
              "line": ""
            },
            {
              "lineno": 122,
              "line": "        return get_service_client(DatabaseManager)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 118,
              "end_line": 120,
              "label": "    def db_manager(self) -> \"DatabaseManager\":\n        from backend.executor.database import DatabaseManager\n        from backend.util.service import get_service_client",
              "successors": [
                {
                  "id": 2,
                  "start_line": 122,
                  "end_line": 122,
                  "label": "        return get_service_client(DatabaseManager)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "add_creds",
          "type": "function",
          "start_line": 124,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 124,
              "line": "    def add_creds(self, user_id: str, credentials: Credentials) -> None:"
            },
            {
              "lineno": 125,
              "line": "        with self.locked_user_integrations(user_id):"
            },
            {
              "lineno": 126,
              "line": "            if self.get_creds_by_id(user_id, credentials.id):"
            },
            {
              "lineno": 127,
              "line": "                raise ValueError("
            },
            {
              "lineno": 128,
              "line": "                    f\"Can not re-create existing credentials #{credentials.id} \""
            },
            {
              "lineno": 129,
              "line": "                    f\"for user #{user_id}\""
            },
            {
              "lineno": 130,
              "line": "                )"
            },
            {
              "lineno": 131,
              "line": "            self._set_user_integration_creds("
            },
            {
              "lineno": 132,
              "line": "                user_id, [*self.get_all_creds(user_id), credentials]"
            },
            {
              "lineno": 133,
              "line": "            )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 124,
              "end_line": 124,
              "label": "    def add_creds(self, user_id: str, credentials: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 125,
                  "end_line": 126,
                  "label": "        with self.locked_user_integrations(user_id):\n            if self.get_creds_by_id(user_id, credentials.id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 127,
                      "end_line": 130,
                      "label": "                raise ValueError(\n                    f\"Can not re-create existing credentials #{credentials.id} \"\n                    f\"for user #{user_id}\"\n                )",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 131,
                      "end_line": 133,
                      "label": "            self._set_user_integration_creds(\n                user_id, [*self.get_all_creds(user_id), credentials]\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_all_creds",
          "type": "function",
          "start_line": 135,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 135,
              "line": "    def get_all_creds(self, user_id: str) -> list[Credentials]:"
            },
            {
              "lineno": 136,
              "line": "        users_credentials = self._get_user_integrations(user_id).credentials"
            },
            {
              "lineno": 137,
              "line": "        all_credentials = users_credentials"
            },
            {
              "lineno": 138,
              "line": "        if settings.secrets.revid_api_key:"
            },
            {
              "lineno": 139,
              "line": "            all_credentials.append(revid_credentials)"
            },
            {
              "lineno": 140,
              "line": "        if settings.secrets.ideogram_api_key:"
            },
            {
              "lineno": 141,
              "line": "            all_credentials.append(ideogram_credentials)"
            },
            {
              "lineno": 142,
              "line": "        if settings.secrets.groq_api_key:"
            },
            {
              "lineno": 143,
              "line": "            all_credentials.append(groq_credentials)"
            },
            {
              "lineno": 144,
              "line": "        if settings.secrets.replicate_api_key:"
            },
            {
              "lineno": 145,
              "line": "            all_credentials.append(replicate_credentials)"
            },
            {
              "lineno": 146,
              "line": "        if settings.secrets.openai_api_key:"
            },
            {
              "lineno": 147,
              "line": "            all_credentials.append(openai_credentials)"
            },
            {
              "lineno": 148,
              "line": "        if settings.secrets.anthropic_api_key:"
            },
            {
              "lineno": 149,
              "line": "            all_credentials.append(anthropic_credentials)"
            },
            {
              "lineno": 150,
              "line": "        if settings.secrets.did_api_key:"
            },
            {
              "lineno": 151,
              "line": "            all_credentials.append(did_credentials)"
            },
            {
              "lineno": 152,
              "line": "        if settings.secrets.jina_api_key:"
            },
            {
              "lineno": 153,
              "line": "            all_credentials.append(jina_credentials)"
            },
            {
              "lineno": 154,
              "line": "        if settings.secrets.unreal_speech_api_key:"
            },
            {
              "lineno": 155,
              "line": "            all_credentials.append(unreal_credentials)"
            },
            {
              "lineno": 156,
              "line": "        if settings.secrets.open_router_api_key:"
            },
            {
              "lineno": 157,
              "line": "            all_credentials.append(open_router_credentials)"
            },
            {
              "lineno": 158,
              "line": "        return all_credentials"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 135,
              "end_line": 137,
              "label": "    def get_all_creds(self, user_id: str) -> list[Credentials]:\n        users_credentials = self._get_user_integrations(user_id).credentials\n        all_credentials = users_credentials",
              "successors": [
                {
                  "id": 2,
                  "start_line": 138,
                  "end_line": 139,
                  "label": "        if settings.secrets.revid_api_key:\n            all_credentials.append(revid_credentials)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 140,
                      "end_line": 141,
                      "label": "        if settings.secrets.ideogram_api_key:\n            all_credentials.append(ideogram_credentials)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 142,
                          "end_line": 143,
                          "label": "        if settings.secrets.groq_api_key:\n            all_credentials.append(groq_credentials)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 144,
                              "end_line": 145,
                              "label": "        if settings.secrets.replicate_api_key:\n            all_credentials.append(replicate_credentials)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 146,
                                  "end_line": 147,
                                  "label": "        if settings.secrets.openai_api_key:\n            all_credentials.append(openai_credentials)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 148,
                                      "end_line": 149,
                                      "label": "        if settings.secrets.anthropic_api_key:\n            all_credentials.append(anthropic_credentials)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 150,
                                          "end_line": 151,
                                          "label": "        if settings.secrets.did_api_key:\n            all_credentials.append(did_credentials)",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 152,
                                              "end_line": 153,
                                              "label": "        if settings.secrets.jina_api_key:\n            all_credentials.append(jina_credentials)",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 154,
                                                  "end_line": 155,
                                                  "label": "        if settings.secrets.unreal_speech_api_key:\n            all_credentials.append(unreal_credentials)",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "start_line": 156,
                                                      "end_line": 157,
                                                      "label": "        if settings.secrets.open_router_api_key:\n            all_credentials.append(open_router_credentials)",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "start_line": 158,
                                                          "end_line": 158,
                                                          "label": "        return all_credentials",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_creds_by_id",
          "type": "function",
          "start_line": 160,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 160,
              "line": "    def get_creds_by_id(self, user_id: str, credentials_id: str) -> Credentials | None:"
            },
            {
              "lineno": 161,
              "line": "        all_credentials = self.get_all_creds(user_id)"
            },
            {
              "lineno": 162,
              "line": "        return next((c for c in all_credentials if c.id == credentials_id), None)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 160,
              "end_line": 160,
              "label": "    def get_creds_by_id(self, user_id: str, credentials_id: str) -> Credentials | None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 161,
                  "end_line": 161,
                  "label": "        all_credentials = self.get_all_creds(user_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 162,
                      "end_line": 162,
                      "label": "        return next((c for c in all_credentials if c.id == credentials_id), None)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_creds_by_provider",
          "type": "function",
          "start_line": 164,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 164,
              "line": "    def get_creds_by_provider(self, user_id: str, provider: str) -> list[Credentials]:"
            },
            {
              "lineno": 165,
              "line": "        credentials = self.get_all_creds(user_id)"
            },
            {
              "lineno": 166,
              "line": "        return [c for c in credentials if c.provider == provider]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 164,
              "end_line": 166,
              "label": "    def get_creds_by_provider(self, user_id: str, provider: str) -> list[Credentials]:\n        credentials = self.get_all_creds(user_id)\n        return [c for c in credentials if c.provider == provider]",
              "successors": []
            }
          ]
        },
        {
          "name": "get_authorized_providers",
          "type": "function",
          "start_line": 168,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 168,
              "line": "    def get_authorized_providers(self, user_id: str) -> list[str]:"
            },
            {
              "lineno": 169,
              "line": "        credentials = self.get_all_creds(user_id)"
            },
            {
              "lineno": 170,
              "line": "        return list(set(c.provider for c in credentials))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 168,
              "end_line": 170,
              "label": "    def get_authorized_providers(self, user_id: str) -> list[str]:\n        credentials = self.get_all_creds(user_id)\n        return list(set(c.provider for c in credentials))",
              "successors": []
            }
          ]
        },
        {
          "name": "update_creds",
          "type": "function",
          "start_line": 172,
          "end_line": 204,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 172,
              "line": "    def update_creds(self, user_id: str, updated: Credentials) -> None:"
            },
            {
              "lineno": 173,
              "line": "        with self.locked_user_integrations(user_id):"
            },
            {
              "lineno": 174,
              "line": "            current = self.get_creds_by_id(user_id, updated.id)"
            },
            {
              "lineno": 175,
              "line": "            if not current:"
            },
            {
              "lineno": 176,
              "line": "                raise ValueError("
            },
            {
              "lineno": 177,
              "line": "                    f\"Credentials with ID {updated.id} \""
            },
            {
              "lineno": 178,
              "line": "                    f\"for user with ID {user_id} not found\""
            },
            {
              "lineno": 179,
              "line": "                )"
            },
            {
              "lineno": 180,
              "line": "            if type(current) is not type(updated):"
            },
            {
              "lineno": 181,
              "line": "                raise TypeError("
            },
            {
              "lineno": 182,
              "line": "                    f\"Can not update credentials with ID {updated.id} \""
            },
            {
              "lineno": 183,
              "line": "                    f\"from type {type(current)} \""
            },
            {
              "lineno": 184,
              "line": "                    f\"to type {type(updated)}\""
            },
            {
              "lineno": 185,
              "line": "                )"
            },
            {
              "lineno": 186,
              "line": ""
            },
            {
              "lineno": 187,
              "line": "            # Ensure no scopes are removed when updating credentials"
            },
            {
              "lineno": 188,
              "line": "            if ("
            },
            {
              "lineno": 189,
              "line": "                isinstance(updated, OAuth2Credentials)"
            },
            {
              "lineno": 190,
              "line": "                and isinstance(current, OAuth2Credentials)"
            },
            {
              "lineno": 191,
              "line": "                and not set(updated.scopes).issuperset(current.scopes)"
            },
            {
              "lineno": 192,
              "line": "            ):"
            },
            {
              "lineno": 193,
              "line": "                raise ValueError("
            },
            {
              "lineno": 194,
              "line": "                    f\"Can not update credentials with ID {updated.id} \""
            },
            {
              "lineno": 195,
              "line": "                    f\"and scopes {current.scopes} \""
            },
            {
              "lineno": 196,
              "line": "                    f\"to more restrictive set of scopes {updated.scopes}\""
            },
            {
              "lineno": 197,
              "line": "                )"
            },
            {
              "lineno": 198,
              "line": ""
            },
            {
              "lineno": 199,
              "line": "            # Update the credentials"
            },
            {
              "lineno": 200,
              "line": "            updated_credentials_list = ["
            },
            {
              "lineno": 201,
              "line": "                updated if c.id == updated.id else c"
            },
            {
              "lineno": 202,
              "line": "                for c in self.get_all_creds(user_id)"
            },
            {
              "lineno": 203,
              "line": "            ]"
            },
            {
              "lineno": 204,
              "line": "            self._set_user_integration_creds(user_id, updated_credentials_list)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 172,
              "end_line": 172,
              "label": "    def update_creds(self, user_id: str, updated: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 173,
                  "end_line": 174,
                  "label": "        with self.locked_user_integrations(user_id):\n            current = self.get_creds_by_id(user_id, updated.id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 175,
                      "end_line": 179,
                      "label": "            if not current:\n                raise ValueError(\n                    f\"Credentials with ID {updated.id} \"\n                    f\"for user with ID {user_id} not found\"\n                )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 180,
                          "end_line": 185,
                          "label": "            if type(current) is not type(updated):\n                raise TypeError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"from type {type(current)} \"\n                    f\"to type {type(updated)}\"\n                )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 188,
                              "end_line": 192,
                              "label": "            if (\n                isinstance(updated, OAuth2Credentials)\n                and isinstance(current, OAuth2Credentials)\n                and not set(updated.scopes).issuperset(current.scopes)\n            ):",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 193,
                                  "end_line": 197,
                                  "label": "                raise ValueError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"and scopes {current.scopes} \"\n                    f\"to more restrictive set of scopes {updated.scopes}\"\n                )",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 199,
                                      "end_line": 204,
                                      "label": "            updated_credentials_list = [\n                updated if c.id == updated.id else c\n                for c in self.get_all_creds(user_id)\n            ]\n            self._set_user_integration_creds(user_id, updated_credentials_list)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "delete_creds_by_id",
          "type": "function",
          "start_line": 206,
          "end_line": 211,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 206,
              "line": "    def delete_creds_by_id(self, user_id: str, credentials_id: str) -> None:"
            },
            {
              "lineno": 207,
              "line": "        with self.locked_user_integrations(user_id):"
            },
            {
              "lineno": 208,
              "line": "            filtered_credentials = ["
            },
            {
              "lineno": 209,
              "line": "                c for c in self.get_all_creds(user_id) if c.id != credentials_id"
            },
            {
              "lineno": 210,
              "line": "            ]"
            },
            {
              "lineno": 211,
              "line": "            self._set_user_integration_creds(user_id, filtered_credentials)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 206,
              "end_line": 206,
              "label": "    def delete_creds_by_id(self, user_id: str, credentials_id: str) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 207,
                  "end_line": 210,
                  "label": "        with self.locked_user_integrations(user_id):\n            filtered_credentials = [\n                c for c in self.get_all_creds(user_id) if c.id != credentials_id\n            ]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 211,
                      "end_line": 211,
                      "label": "            self._set_user_integration_creds(user_id, filtered_credentials)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "store_state_token",
          "type": "function",
          "start_line": 213,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 213,
              "line": "    def store_state_token(self, user_id: str, provider: str, scopes: list[str]) -> str:"
            },
            {
              "lineno": 214,
              "line": "        token = secrets.token_urlsafe(32)"
            },
            {
              "lineno": 215,
              "line": "        expires_at = datetime.now(timezone.utc) + timedelta(minutes=10)"
            },
            {
              "lineno": 216,
              "line": ""
            },
            {
              "lineno": 217,
              "line": "        state = OAuthState("
            },
            {
              "lineno": 218,
              "line": "            token=token,"
            },
            {
              "lineno": 219,
              "line": "            provider=provider,"
            },
            {
              "lineno": 220,
              "line": "            expires_at=int(expires_at.timestamp()),"
            },
            {
              "lineno": 221,
              "line": "            scopes=scopes,"
            },
            {
              "lineno": 222,
              "line": "        )"
            },
            {
              "lineno": 223,
              "line": ""
            },
            {
              "lineno": 224,
              "line": "        with self.locked_user_integrations(user_id):"
            },
            {
              "lineno": 225,
              "line": "            user_integrations = self._get_user_integrations(user_id)"
            },
            {
              "lineno": 226,
              "line": "            oauth_states = user_integrations.oauth_states"
            },
            {
              "lineno": 227,
              "line": "            oauth_states.append(state)"
            },
            {
              "lineno": 228,
              "line": "            user_integrations.oauth_states = oauth_states"
            },
            {
              "lineno": 229,
              "line": ""
            },
            {
              "lineno": 230,
              "line": "            self.db_manager.update_user_integrations("
            },
            {
              "lineno": 231,
              "line": "                user_id=user_id, data=user_integrations"
            },
            {
              "lineno": 232,
              "line": "            )"
            },
            {
              "lineno": 233,
              "line": ""
            },
            {
              "lineno": 234,
              "line": "        return token"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 213,
              "end_line": 215,
              "label": "    def store_state_token(self, user_id: str, provider: str, scopes: list[str]) -> str:\n        token = secrets.token_urlsafe(32)\n        expires_at = datetime.now(timezone.utc) + timedelta(minutes=10)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 217,
                  "end_line": 222,
                  "label": "        state = OAuthState(\n            token=token,\n            provider=provider,\n            expires_at=int(expires_at.timestamp()),\n            scopes=scopes,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 224,
                      "end_line": 232,
                      "label": "        with self.locked_user_integrations(user_id):\n            user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n            oauth_states.append(state)\n            user_integrations.oauth_states = oauth_states\n\n            self.db_manager.update_user_integrations(\n                user_id=user_id, data=user_integrations\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 234,
                          "end_line": 234,
                          "label": "        return token",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_any_valid_scopes_from_state_token",
          "type": "function",
          "start_line": 236,
          "end_line": 264,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 236,
              "line": "    def get_any_valid_scopes_from_state_token("
            },
            {
              "lineno": 237,
              "line": "        self, user_id: str, token: str, provider: str"
            },
            {
              "lineno": 238,
              "line": "    ) -> list[str]:"
            },
            {
              "lineno": 239,
              "line": "        \"\"\""
            },
            {
              "lineno": 240,
              "line": "        Get the valid scopes from the OAuth state token. This will return any valid scopes"
            },
            {
              "lineno": 241,
              "line": "        from any OAuth state token for the given provider. If no valid scopes are found,"
            },
            {
              "lineno": 242,
              "line": "        an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT"
            },
            {
              "lineno": 243,
              "line": "        IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING"
            },
            {
              "lineno": 244,
              "line": "        THE CODE FOR TOKENS."
            },
            {
              "lineno": 245,
              "line": "        \"\"\""
            },
            {
              "lineno": 246,
              "line": "        user_integrations = self._get_user_integrations(user_id)"
            },
            {
              "lineno": 247,
              "line": "        oauth_states = user_integrations.oauth_states"
            },
            {
              "lineno": 248,
              "line": ""
            },
            {
              "lineno": 249,
              "line": "        now = datetime.now(timezone.utc)"
            },
            {
              "lineno": 250,
              "line": "        valid_state = next("
            },
            {
              "lineno": 251,
              "line": "            ("
            },
            {
              "lineno": 252,
              "line": "                state"
            },
            {
              "lineno": 253,
              "line": "                for state in oauth_states"
            },
            {
              "lineno": 254,
              "line": "                if state.token == token"
            },
            {
              "lineno": 255,
              "line": "                and state.provider == provider"
            },
            {
              "lineno": 256,
              "line": "                and state.expires_at > now.timestamp()"
            },
            {
              "lineno": 257,
              "line": "            ),"
            },
            {
              "lineno": 258,
              "line": "            None,"
            },
            {
              "lineno": 259,
              "line": "        )"
            },
            {
              "lineno": 260,
              "line": ""
            },
            {
              "lineno": 261,
              "line": "        if valid_state:"
            },
            {
              "lineno": 262,
              "line": "            return valid_state.scopes"
            },
            {
              "lineno": 263,
              "line": ""
            },
            {
              "lineno": 264,
              "line": "        return []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 236,
              "end_line": 264,
              "label": "def get_any_valid_scopes_from_state_token(\n        self, user_id: str, token: str, provider: str\n    ) -> list[str]:\n        \"\"\"\n        Get the valid scopes from the OAuth state token. This will return any valid scopes\n        from any OAuth state token for the given provider. If no valid scopes are found,\n        an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT\n        IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING\n        THE CODE FOR TOKENS.\n        \"\"\"\n        user_integrations = self._get_user_integrations(user_id)\n        oauth_states = user_integrations.oauth_states\n\n        now = datetime.now(timezone.utc)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 250,
                  "end_line": 259,
                  "label": "valid_state = next(\n            (\n                state\n                for state in oauth_states\n                if state.token == token\n                and state.provider == provider\n                and state.expires_at > now.timestamp()\n            ),\n            None,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 261,
                      "end_line": 262,
                      "label": "if valid_state:\n            return valid_state.scopes",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 264,
                      "end_line": 264,
                      "label": "return []",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "verify_state_token",
          "type": "function",
          "start_line": 266,
          "end_line": 290,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 266,
              "line": "    def verify_state_token(self, user_id: str, token: str, provider: str) -> bool:"
            },
            {
              "lineno": 267,
              "line": "        with self.locked_user_integrations(user_id):"
            },
            {
              "lineno": 268,
              "line": "            user_integrations = self._get_user_integrations(user_id)"
            },
            {
              "lineno": 269,
              "line": "            oauth_states = user_integrations.oauth_states"
            },
            {
              "lineno": 270,
              "line": ""
            },
            {
              "lineno": 271,
              "line": "            now = datetime.now(timezone.utc)"
            },
            {
              "lineno": 272,
              "line": "            valid_state = next("
            },
            {
              "lineno": 273,
              "line": "                ("
            },
            {
              "lineno": 274,
              "line": "                    state"
            },
            {
              "lineno": 275,
              "line": "                    for state in oauth_states"
            },
            {
              "lineno": 276,
              "line": "                    if state.token == token"
            },
            {
              "lineno": 277,
              "line": "                    and state.provider == provider"
            },
            {
              "lineno": 278,
              "line": "                    and state.expires_at > now.timestamp()"
            },
            {
              "lineno": 279,
              "line": "                ),"
            },
            {
              "lineno": 280,
              "line": "                None,"
            },
            {
              "lineno": 281,
              "line": "            )"
            },
            {
              "lineno": 282,
              "line": ""
            },
            {
              "lineno": 283,
              "line": "            if valid_state:"
            },
            {
              "lineno": 284,
              "line": "                # Remove the used state"
            },
            {
              "lineno": 285,
              "line": "                oauth_states.remove(valid_state)"
            },
            {
              "lineno": 286,
              "line": "                user_integrations.oauth_states = oauth_states"
            },
            {
              "lineno": 287,
              "line": "                self.db_manager.update_user_integrations(user_id, user_integrations)"
            },
            {
              "lineno": 288,
              "line": "                return True"
            },
            {
              "lineno": 289,
              "line": ""
            },
            {
              "lineno": 290,
              "line": "        return False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 266,
              "end_line": 266,
              "label": "    def verify_state_token(self, user_id: str, token: str, provider: str) -> bool:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 267,
                  "end_line": 267,
                  "label": "        with self.locked_user_integrations(user_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 268,
                      "end_line": 271,
                      "label": "            user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n\n            now = datetime.now(timezone.utc)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 272,
                          "end_line": 281,
                          "label": "            valid_state = next(\n                (\n                    state\n                    for state in oauth_states\n                    if state.token == token\n                    and state.provider == provider\n                    and state.expires_at > now.timestamp()\n                ),\n                None,\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 283,
                              "end_line": 288,
                              "label": "            if valid_state:\n                # Remove the used state\n                oauth_states.remove(valid_state)\n                user_integrations.oauth_states = oauth_states\n                self.db_manager.update_user_integrations(user_id, user_integrations)\n                return True",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 290,
                                  "end_line": 290,
                                  "label": "        return False",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "start_line": 290,
                              "end_line": 290,
                              "label": "        return False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_set_user_integration_creds",
          "type": "function",
          "start_line": 292,
          "end_line": 299,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 292,
              "line": "    def _set_user_integration_creds("
            },
            {
              "lineno": 293,
              "line": "        self, user_id: str, credentials: list[Credentials]"
            },
            {
              "lineno": 294,
              "line": "    ) -> None:"
            },
            {
              "lineno": 295,
              "line": "        integrations = self._get_user_integrations(user_id)"
            },
            {
              "lineno": 296,
              "line": "        # Remove default credentials from the list"
            },
            {
              "lineno": 297,
              "line": "        credentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]"
            },
            {
              "lineno": 298,
              "line": "        integrations.credentials = credentials"
            },
            {
              "lineno": 299,
              "line": "        self.db_manager.update_user_integrations(user_id, integrations)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 292,
              "end_line": 294,
              "label": "    def _set_user_integration_creds(\n        self, user_id: str, credentials: list[Credentials]\n    ) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 295,
                  "end_line": 299,
                  "label": "        integrations = self._get_user_integrations(user_id)\n        # Remove default credentials from the list\n        credentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]\n        integrations.credentials = credentials\n        self.db_manager.update_user_integrations(user_id, integrations)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_get_user_integrations",
          "type": "function",
          "start_line": 301,
          "end_line": 305,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 301,
              "line": "    def _get_user_integrations(self, user_id: str) -> UserIntegrations:"
            },
            {
              "lineno": 302,
              "line": "        integrations: UserIntegrations = self.db_manager.get_user_integrations("
            },
            {
              "lineno": 303,
              "line": "            user_id=user_id"
            },
            {
              "lineno": 304,
              "line": "        )"
            },
            {
              "lineno": 305,
              "line": "        return integrations"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 301,
              "end_line": 305,
              "label": "    def _get_user_integrations(self, user_id: str) -> UserIntegrations:\n        integrations: UserIntegrations = self.db_manager.get_user_integrations(\n            user_id=user_id\n        )\n        return integrations",
              "successors": []
            }
          ]
        },
        {
          "name": "locked_user_integrations",
          "type": "function",
          "start_line": 307,
          "end_line": 309,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 307,
              "line": "    def locked_user_integrations(self, user_id: str):"
            },
            {
              "lineno": 308,
              "line": "        key = (f\"user:{user_id}\", \"integrations\")"
            },
            {
              "lineno": 309,
              "line": "        return self.locks.locked(key)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 307,
              "end_line": 309,
              "label": "    def locked_user_integrations(self, user_id: str):\n        key = (f\"user:{user_id}\", \"integrations\")\n        return self.locks.locked(key)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 110,
          "line": "class IntegrationCredentialsStore:"
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 116,
          "line": "    @property"
        },
        {
          "lineno": 117,
          "line": "    @thread_cached"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 134,
          "line": ""
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 163,
          "line": ""
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 171,
          "line": ""
        },
        {
          "lineno": 205,
          "line": ""
        },
        {
          "lineno": 212,
          "line": ""
        },
        {
          "lineno": 235,
          "line": ""
        },
        {
          "lineno": 265,
          "line": ""
        },
        {
          "lineno": 291,
          "line": ""
        },
        {
          "lineno": 300,
          "line": ""
        },
        {
          "lineno": 306,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 110,
          "end_line": 110,
          "label": "class IntegrationCredentialsStore:",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 115,
          "end_line": 115,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 116,
          "end_line": 116,
          "label": "    @property",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 117,
          "end_line": 117,
          "label": "    @thread_cached",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 123,
          "end_line": 123,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 134,
          "end_line": 134,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 159,
          "end_line": 159,
          "label": "",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 163,
          "end_line": 163,
          "label": "",
          "successors": []
        },
        {
          "id": 9,
          "start_line": 167,
          "end_line": 167,
          "label": "",
          "successors": []
        },
        {
          "id": 10,
          "start_line": 171,
          "end_line": 171,
          "label": "",
          "successors": []
        },
        {
          "id": 11,
          "start_line": 205,
          "end_line": 205,
          "label": "",
          "successors": []
        },
        {
          "id": 12,
          "start_line": 212,
          "end_line": 212,
          "label": "",
          "successors": []
        },
        {
          "id": 13,
          "start_line": 235,
          "end_line": 235,
          "label": "",
          "successors": []
        },
        {
          "id": 14,
          "start_line": 265,
          "end_line": 265,
          "label": "",
          "successors": []
        },
        {
          "id": 15,
          "start_line": 291,
          "end_line": 291,
          "label": "",
          "successors": []
        },
        {
          "id": 16,
          "start_line": 300,
          "end_line": 300,
          "label": "",
          "successors": []
        },
        {
          "id": 17,
          "start_line": 306,
          "end_line": 306,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import secrets"
    },
    {
      "lineno": 2,
      "line": "from datetime import datetime, timedelta, timezone"
    },
    {
      "lineno": 3,
      "line": "from typing import TYPE_CHECKING"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 8,
      "line": "    from backend.executor.database import DatabaseManager"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from autogpt_libs.utils.cache import thread_cached"
    },
    {
      "lineno": 11,
      "line": "from autogpt_libs.utils.synchronize import RedisKeyedMutex"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 14,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 15,
      "line": "    Credentials,"
    },
    {
      "lineno": 16,
      "line": "    OAuth2Credentials,"
    },
    {
      "lineno": 17,
      "line": "    OAuthState,"
    },
    {
      "lineno": 18,
      "line": "    UserIntegrations,"
    },
    {
      "lineno": 19,
      "line": ")"
    },
    {
      "lineno": 20,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "settings = Settings()"
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": "revid_credentials = APIKeyCredentials("
    },
    {
      "lineno": 25,
      "line": "    id=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\","
    },
    {
      "lineno": 26,
      "line": "    provider=\"revid\","
    },
    {
      "lineno": 27,
      "line": "    api_key=SecretStr(settings.secrets.revid_api_key),"
    },
    {
      "lineno": 28,
      "line": "    title=\"Use Credits for Revid\","
    },
    {
      "lineno": 29,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 30,
      "line": ")"
    },
    {
      "lineno": 31,
      "line": "ideogram_credentials = APIKeyCredentials("
    },
    {
      "lineno": 32,
      "line": "    id=\"760f84fc-b270-42de-91f6-08efe1b512d0\","
    },
    {
      "lineno": 33,
      "line": "    provider=\"ideogram\","
    },
    {
      "lineno": 34,
      "line": "    api_key=SecretStr(settings.secrets.ideogram_api_key),"
    },
    {
      "lineno": 35,
      "line": "    title=\"Use Credits for Ideogram\","
    },
    {
      "lineno": 36,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 37,
      "line": ")"
    },
    {
      "lineno": 38,
      "line": "replicate_credentials = APIKeyCredentials("
    },
    {
      "lineno": 39,
      "line": "    id=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\","
    },
    {
      "lineno": 40,
      "line": "    provider=\"replicate\","
    },
    {
      "lineno": 41,
      "line": "    api_key=SecretStr(settings.secrets.replicate_api_key),"
    },
    {
      "lineno": 42,
      "line": "    title=\"Use Credits for Replicate\","
    },
    {
      "lineno": 43,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 44,
      "line": ")"
    },
    {
      "lineno": 45,
      "line": "openai_credentials = APIKeyCredentials("
    },
    {
      "lineno": 46,
      "line": "    id=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\","
    },
    {
      "lineno": 47,
      "line": "    provider=\"openai\","
    },
    {
      "lineno": 48,
      "line": "    api_key=SecretStr(settings.secrets.openai_api_key),"
    },
    {
      "lineno": 49,
      "line": "    title=\"Use Credits for OpenAI\","
    },
    {
      "lineno": 50,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 51,
      "line": ")"
    },
    {
      "lineno": 52,
      "line": "anthropic_credentials = APIKeyCredentials("
    },
    {
      "lineno": 53,
      "line": "    id=\"24e5d942-d9e3-4798-8151-90143ee55629\","
    },
    {
      "lineno": 54,
      "line": "    provider=\"anthropic\","
    },
    {
      "lineno": 55,
      "line": "    api_key=SecretStr(settings.secrets.anthropic_api_key),"
    },
    {
      "lineno": 56,
      "line": "    title=\"Use Credits for Anthropic\","
    },
    {
      "lineno": 57,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 58,
      "line": ")"
    },
    {
      "lineno": 59,
      "line": "groq_credentials = APIKeyCredentials("
    },
    {
      "lineno": 60,
      "line": "    id=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\","
    },
    {
      "lineno": 61,
      "line": "    provider=\"groq\","
    },
    {
      "lineno": 62,
      "line": "    api_key=SecretStr(settings.secrets.groq_api_key),"
    },
    {
      "lineno": 63,
      "line": "    title=\"Use Credits for Groq\","
    },
    {
      "lineno": 64,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 65,
      "line": ")"
    },
    {
      "lineno": 66,
      "line": "did_credentials = APIKeyCredentials("
    },
    {
      "lineno": 67,
      "line": "    id=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\","
    },
    {
      "lineno": 68,
      "line": "    provider=\"d_id\","
    },
    {
      "lineno": 69,
      "line": "    api_key=SecretStr(settings.secrets.did_api_key),"
    },
    {
      "lineno": 70,
      "line": "    title=\"Use Credits for D-ID\","
    },
    {
      "lineno": 71,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 72,
      "line": ")"
    },
    {
      "lineno": 73,
      "line": "jina_credentials = APIKeyCredentials("
    },
    {
      "lineno": 74,
      "line": "    id=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\","
    },
    {
      "lineno": 75,
      "line": "    provider=\"jina\","
    },
    {
      "lineno": 76,
      "line": "    api_key=SecretStr(settings.secrets.jina_api_key),"
    },
    {
      "lineno": 77,
      "line": "    title=\"Use Credits for Jina\","
    },
    {
      "lineno": 78,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 79,
      "line": ")"
    },
    {
      "lineno": 80,
      "line": "unreal_credentials = APIKeyCredentials("
    },
    {
      "lineno": 81,
      "line": "    id=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\","
    },
    {
      "lineno": 82,
      "line": "    provider=\"unreal\","
    },
    {
      "lineno": 83,
      "line": "    api_key=SecretStr(settings.secrets.unreal_speech_api_key),"
    },
    {
      "lineno": 84,
      "line": "    title=\"Use Credits for Unreal\","
    },
    {
      "lineno": 85,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 86,
      "line": ")"
    },
    {
      "lineno": 87,
      "line": "open_router_credentials = APIKeyCredentials("
    },
    {
      "lineno": 88,
      "line": "    id=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\","
    },
    {
      "lineno": 89,
      "line": "    provider=\"open_router\","
    },
    {
      "lineno": 90,
      "line": "    api_key=SecretStr(settings.secrets.open_router_api_key),"
    },
    {
      "lineno": 91,
      "line": "    title=\"Use Credits for Open Router\","
    },
    {
      "lineno": 92,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 93,
      "line": ")"
    },
    {
      "lineno": 94,
      "line": ""
    },
    {
      "lineno": 95,
      "line": ""
    },
    {
      "lineno": 96,
      "line": "DEFAULT_CREDENTIALS = ["
    },
    {
      "lineno": 97,
      "line": "    revid_credentials,"
    },
    {
      "lineno": 98,
      "line": "    ideogram_credentials,"
    },
    {
      "lineno": 99,
      "line": "    replicate_credentials,"
    },
    {
      "lineno": 100,
      "line": "    openai_credentials,"
    },
    {
      "lineno": 101,
      "line": "    anthropic_credentials,"
    },
    {
      "lineno": 102,
      "line": "    groq_credentials,"
    },
    {
      "lineno": 103,
      "line": "    did_credentials,"
    },
    {
      "lineno": 104,
      "line": "    jina_credentials,"
    },
    {
      "lineno": 105,
      "line": "    unreal_credentials,"
    },
    {
      "lineno": 106,
      "line": "    open_router_credentials,"
    },
    {
      "lineno": 107,
      "line": "]"
    },
    {
      "lineno": 108,
      "line": ""
    },
    {
      "lineno": 109,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import secrets\nfrom datetime import datetime, timedelta, timezone\nfrom typing import TYPE_CHECKING\n\nfrom pydantic import SecretStr\n\n",
      "successors": [
        {
          "id": 2,
          "start_line": 7,
          "end_line": 8,
          "label": "if TYPE_CHECKING:\n    from backend.executor.database import DatabaseManager\n",
          "successors": [
            {
              "id": 3,
              "start_line": 10,
              "end_line": 22,
              "label": "from autogpt_libs.utils.cache import thread_cached\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\n\nfrom backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    OAuth2Credentials,\n    OAuthState,\n    UserIntegrations,\n)\nfrom backend.util.settings import Settings\n\nsettings = Settings()\n\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 24,
                  "end_line": 86,
                  "label": "revid_credentials = APIKeyCredentials(\n    id=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\n    provider=\"revid\",\n    api_key=SecretStr(settings.secrets.revid_api_key),\n    title=\"Use Credits for Revid\",\n    expires_at=None,\n)\nideogram_credentials = APIKeyCredentials(\n    id=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\n    provider=\"ideogram\",\n    api_key=SecretStr(settings.secrets.ideogram_api_key),\n    title=\"Use Credits for Ideogram\",\n    expires_at=None,\n)\nreplicate_credentials = APIKeyCredentials(\n    id=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\n    provider=\"replicate\",\n    api_key=SecretStr(settings.secrets.replicate_api_key),\n    title=\"Use Credits for Replicate\",\n    expires_at=None,\n)\nopenai_credentials = APIKeyCredentials(\n    id=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\n    provider=\"openai\",\n    api_key=SecretStr(settings.secrets.openai_api_key),\n    title=\"Use Credits for OpenAI\",\n    expires_at=None,\n)\nanthropic_credentials = APIKeyCredentials(\n    id=\"24e5d942-d9e3-4798-8151-90143ee55629\",\n    provider=\"anthropic\",\n    api_key=SecretStr(settings.secrets.anthropic_api_key),\n    title=\"Use Credits for Anthropic\",\n    expires_at=None,\n)\ngroq_credentials = APIKeyCredentials(\n    id=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\n    provider=\"groq\",\n    api_key=SecretStr(settings.secrets.groq_api_key),\n    title=\"Use Credits for Groq\",\n    expires_at=None,\n)\ndid_credentials = APIKeyCredentials(\n    id=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\n    provider=\"d_id\",\n    api_key=SecretStr(settings.secrets.did_api_key),\n    title=\"Use Credits for D-ID\",\n    expires_at=None,\n)\njina_credentials = APIKeyCredentials(\n    id=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\n    provider=\"jina\",\n    api_key=SecretStr(settings.secrets.jina_api_key),\n    title=\"Use Credits for Jina\",\n    expires_at=None,\n)\nunreal_credentials = APIKeyCredentials(\n    id=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\n    provider=\"unreal\",\n    api_key=SecretStr(settings.secrets.unreal_speech_api_key),\n    title=\"Use Credits for Unreal\",\n    expires_at=None,\n)\nopen_router_credentials = APIKeyCredentials(\n    id=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\n    provider=\"open_router\",\n    api_key=SecretStr(settings.secrets.open_router_api_key),\n    title=\"Use Credits for Open Router\",\n    expires_at=None,\n)\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 96,
                      "end_line": 107,
                      "label": "DEFAULT_CREDENTIALS = [\n    revid_credentials,\n    ideogram_credentials,\n    replicate_credentials,\n    openai_credentials,\n    anthropic_credentials,\n    groq_credentials,\n    did_credentials,\n    jina_credentials,\n    unreal_credentials,\n    open_router_credentials,\n]\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}