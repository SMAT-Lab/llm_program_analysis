{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 87,
  "functions": [],
  "classes": [
    {
      "name": "ContentRetrievalSettings",
      "type": "class",
      "start_line": 15,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "class ContentRetrievalSettings(BaseModel):"
        },
        {
          "lineno": 16,
          "line": "    text: Optional[dict] = SchemaField("
        },
        {
          "lineno": 17,
          "line": "        description=\"Text content settings\","
        },
        {
          "lineno": 18,
          "line": "        default={\"maxCharacters\": 1000, \"includeHtmlTags\": False},"
        },
        {
          "lineno": 19,
          "line": "        advanced=True,"
        },
        {
          "lineno": 20,
          "line": "    )"
        },
        {
          "lineno": 21,
          "line": "    highlights: Optional[dict] = SchemaField("
        },
        {
          "lineno": 22,
          "line": "        description=\"Highlight settings\","
        },
        {
          "lineno": 23,
          "line": "        default={"
        },
        {
          "lineno": 24,
          "line": "            \"numSentences\": 3,"
        },
        {
          "lineno": 25,
          "line": "            \"highlightsPerUrl\": 3,"
        },
        {
          "lineno": 26,
          "line": "            \"query\": \"\","
        },
        {
          "lineno": 27,
          "line": "        },"
        },
        {
          "lineno": 28,
          "line": "        advanced=True,"
        },
        {
          "lineno": 29,
          "line": "    )"
        },
        {
          "lineno": 30,
          "line": "    summary: Optional[dict] = SchemaField("
        },
        {
          "lineno": 31,
          "line": "        description=\"Summary settings\","
        },
        {
          "lineno": 32,
          "line": "        default={\"query\": \"\"},"
        },
        {
          "lineno": 33,
          "line": "        advanced=True,"
        },
        {
          "lineno": 34,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 34,
          "label": "class ContentRetrievalSettings(BaseModel):\n    text: Optional[dict] = SchemaField(\n        description=\"Text content settings\",\n        default={\"maxCharacters\": 1000, \"includeHtmlTags\": False},\n        advanced=True,\n    )\n    highlights: Optional[dict] = SchemaField(\n        description=\"Highlight settings\",\n        default={\n            \"numSentences\": 3,\n            \"highlightsPerUrl\": 3,\n            \"query\": \"\",\n        },\n        advanced=True,\n    )\n    summary: Optional[dict] = SchemaField(\n        description=\"Summary settings\",\n        default={\"query\": \"\"},\n        advanced=True,\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "ExaContentsBlock",
      "type": "class",
      "start_line": 37,
      "end_line": 87,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 56,
              "line": "        super().__init__("
            },
            {
              "lineno": 57,
              "line": "            id=\"c52be83f-f8cd-4180-b243-af35f986b461\","
            },
            {
              "lineno": 58,
              "line": "            description=\"Retrieves document contents using Exa's contents API\","
            },
            {
              "lineno": 59,
              "line": "            categories={BlockCategory.SEARCH},"
            },
            {
              "lineno": 60,
              "line": "            input_schema=ExaContentsBlock.Input,"
            },
            {
              "lineno": 61,
              "line": "            output_schema=ExaContentsBlock.Output,"
            },
            {
              "lineno": 62,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 62,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"c52be83f-f8cd-4180-b243-af35f986b461\",\n            description=\"Retrieves document contents using Exa's contents API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaContentsBlock.Input,\n            output_schema=ExaContentsBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 64,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    def run("
            },
            {
              "lineno": 65,
              "line": "        self, input_data: Input, *, credentials: ExaCredentials, **kwargs"
            },
            {
              "lineno": 66,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 67,
              "line": "        url = \"https://api.exa.ai/contents\""
            },
            {
              "lineno": 68,
              "line": "        headers = {"
            },
            {
              "lineno": 69,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 70,
              "line": "            \"x-api-key\": credentials.api_key.get_secret_value(),"
            },
            {
              "lineno": 71,
              "line": "        }"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        payload = {"
            },
            {
              "lineno": 74,
              "line": "            \"ids\": input_data.ids,"
            },
            {
              "lineno": 75,
              "line": "            \"text\": input_data.contents.text,"
            },
            {
              "lineno": 76,
              "line": "            \"highlights\": input_data.contents.highlights,"
            },
            {
              "lineno": 77,
              "line": "            \"summary\": input_data.contents.summary,"
            },
            {
              "lineno": 78,
              "line": "        }"
            },
            {
              "lineno": 79,
              "line": ""
            },
            {
              "lineno": 80,
              "line": "        try:"
            },
            {
              "lineno": 81,
              "line": "            response = requests.post(url, headers=headers, json=payload)"
            },
            {
              "lineno": 82,
              "line": "            response.raise_for_status()"
            },
            {
              "lineno": 83,
              "line": "            data = response.json()"
            },
            {
              "lineno": 84,
              "line": "            yield \"results\", data.get(\"results\", [])"
            },
            {
              "lineno": 85,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 86,
              "line": "            yield \"error\", str(e)"
            },
            {
              "lineno": 87,
              "line": "            yield \"results\", []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 64,
              "end_line": 79,
              "label": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/contents\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"ids\": input_data.ids,\n            \"text\": input_data.contents.text,\n            \"highlights\": input_data.contents.highlights,\n            \"summary\": input_data.contents.summary,\n        }\n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 80,
                  "end_line": 84,
                  "label": "        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 85,
                      "end_line": 87,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 38,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 39,
              "line": "        credentials: ExaCredentialsInput = ExaCredentialsField()"
            },
            {
              "lineno": 40,
              "line": "        ids: List[str] = SchemaField("
            },
            {
              "lineno": 41,
              "line": "            description=\"Array of document IDs obtained from searches\","
            },
            {
              "lineno": 42,
              "line": "        )"
            },
            {
              "lineno": 43,
              "line": "        contents: ContentRetrievalSettings = SchemaField("
            },
            {
              "lineno": 44,
              "line": "            description=\"Content retrieval settings\","
            },
            {
              "lineno": 45,
              "line": "            default=ContentRetrievalSettings(),"
            },
            {
              "lineno": 46,
              "line": "            advanced=True,"
            },
            {
              "lineno": 47,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 38,
              "end_line": 47,
              "label": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        ids: List[str] = SchemaField(\n            description=\"Array of document IDs obtained from searches\",\n        )\n        contents: ContentRetrievalSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentRetrievalSettings(),\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 50,
              "line": "        results: list = SchemaField("
            },
            {
              "lineno": 51,
              "line": "            description=\"List of document contents\","
            },
            {
              "lineno": 52,
              "line": "            default=[],"
            },
            {
              "lineno": 53,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 53,
              "label": "    class Output(BlockSchema):\n        results: list = SchemaField(\n            description=\"List of document contents\",\n            default=[],\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 37,
          "line": "class ExaContentsBlock(Block):"
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 63,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 37,
          "end_line": 37,
          "label": "class ExaContentsBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 48,
          "end_line": 63,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import List, Optional"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.blocks.exa._auth import ("
    },
    {
      "lineno": 6,
      "line": "    ExaCredentials,"
    },
    {
      "lineno": 7,
      "line": "    ExaCredentialsField,"
    },
    {
      "lineno": 8,
      "line": "    ExaCredentialsInput,"
    },
    {
      "lineno": 9,
      "line": ")"
    },
    {
      "lineno": 10,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 11,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 12,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from typing import List, Optional",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 3,
      "end_line": 3,
      "label": "from pydantic import BaseModel",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 5,
      "end_line": 9,
      "label": "from backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 10,
      "end_line": 10,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 11,
      "end_line": 11,
      "label": "from backend.data.model import SchemaField",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 12,
      "end_line": 12,
      "label": "from backend.util.request import requests",
      "successors": []
    }
  ]
}