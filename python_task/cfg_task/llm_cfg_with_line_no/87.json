{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 170,
  "functions": [
    {
      "name": "create_test_graph",
      "type": "function",
      "start_line": 11,
      "end_line": 141,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "def create_test_graph() -> Graph:"
        },
        {
          "lineno": 12,
          "line": "    \"\"\""
        },
        {
          "lineno": 13,
          "line": "                    subreddit"
        },
        {
          "lineno": 14,
          "line": "                       ||"
        },
        {
          "lineno": 15,
          "line": "                        v"
        },
        {
          "lineno": 16,
          "line": "        GetRedditPostsBlock (post_id, post_title, post_body)"
        },
        {
          "lineno": 17,
          "line": "                  //     ||     \\\\"
        },
        {
          "lineno": 18,
          "line": "              post_id  post_title  post_body"
        },
        {
          "lineno": 19,
          "line": "                 ||       ||        ||"
        },
        {
          "lineno": 20,
          "line": "                 v        v         v"
        },
        {
          "lineno": 21,
          "line": "              FillTextTemplateBlock (format)"
        },
        {
          "lineno": 22,
          "line": "                      ||"
        },
        {
          "lineno": 23,
          "line": "                      v"
        },
        {
          "lineno": 24,
          "line": "            AIStructuredResponseBlock / TextRelevancy"
        },
        {
          "lineno": 25,
          "line": "                 ||       ||       ||"
        },
        {
          "lineno": 26,
          "line": "            post_id  is_relevant  marketing_text"
        },
        {
          "lineno": 27,
          "line": "               ||       ||        ||"
        },
        {
          "lineno": 28,
          "line": "               v        v         v"
        },
        {
          "lineno": 29,
          "line": "                 MatchTextPatternBlock"
        },
        {
          "lineno": 30,
          "line": "                 ||       ||"
        },
        {
          "lineno": 31,
          "line": "              positive  negative"
        },
        {
          "lineno": 32,
          "line": "                ||"
        },
        {
          "lineno": 33,
          "line": "                v"
        },
        {
          "lineno": 34,
          "line": "        PostRedditCommentBlock"
        },
        {
          "lineno": 35,
          "line": "    \"\"\""
        },
        {
          "lineno": 36,
          "line": "    # Hardcoded inputs"
        },
        {
          "lineno": 37,
          "line": "    reddit_get_post_input = {"
        },
        {
          "lineno": 38,
          "line": "        \"post_limit\": 3,"
        },
        {
          "lineno": 39,
          "line": "    }"
        },
        {
          "lineno": 40,
          "line": "    text_formatter_input = {"
        },
        {
          "lineno": 41,
          "line": "        \"format\": \"\"\""
        },
        {
          "lineno": 42,
          "line": "Based on the following post, write your marketing comment:"
        },
        {
          "lineno": 43,
          "line": "* Post ID: {id}"
        },
        {
          "lineno": 44,
          "line": "* Post Subreddit: {subreddit}"
        },
        {
          "lineno": 45,
          "line": "* Post Title: {title}"
        },
        {
          "lineno": 46,
          "line": "* Post Body: {body}\"\"\".strip(),"
        },
        {
          "lineno": 47,
          "line": "    }"
        },
        {
          "lineno": 48,
          "line": "    llm_call_input = {"
        },
        {
          "lineno": 49,
          "line": "        \"sys_prompt\": \"\"\""
        },
        {
          "lineno": 50,
          "line": "You are an expert at marketing."
        },
        {
          "lineno": 51,
          "line": "You have been tasked with picking Reddit posts that are relevant to your product."
        },
        {
          "lineno": 52,
          "line": "The product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model."
        },
        {
          "lineno": 53,
          "line": "You reply the post that you find it relevant to be replied with marketing text."
        },
        {
          "lineno": 54,
          "line": "Make sure to only comment on a relevant post."
        },
        {
          "lineno": 55,
          "line": "\"\"\","
        },
        {
          "lineno": 56,
          "line": "        \"expected_format\": {"
        },
        {
          "lineno": 57,
          "line": "            \"post_id\": \"str, the reddit post id\","
        },
        {
          "lineno": 58,
          "line": "            \"is_relevant\": \"bool, whether the post is relevant for marketing\","
        },
        {
          "lineno": 59,
          "line": "            \"marketing_text\": \"str, marketing text, this is empty on irrelevant posts\","
        },
        {
          "lineno": 60,
          "line": "        },"
        },
        {
          "lineno": 61,
          "line": "    }"
        },
        {
          "lineno": 62,
          "line": "    text_matcher_input = {\"match\": \"true\", \"case_sensitive\": False}"
        },
        {
          "lineno": 63,
          "line": "    reddit_comment_input = {}"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    # Nodes"
        },
        {
          "lineno": 66,
          "line": "    reddit_get_post_node = Node("
        },
        {
          "lineno": 67,
          "line": "        block_id=GetRedditPostsBlock().id,"
        },
        {
          "lineno": 68,
          "line": "        input_default=reddit_get_post_input,"
        },
        {
          "lineno": 69,
          "line": "    )"
        },
        {
          "lineno": 70,
          "line": "    text_formatter_node = Node("
        },
        {
          "lineno": 71,
          "line": "        block_id=FillTextTemplateBlock().id,"
        },
        {
          "lineno": 72,
          "line": "        input_default=text_formatter_input,"
        },
        {
          "lineno": 73,
          "line": "    )"
        },
        {
          "lineno": 74,
          "line": "    llm_call_node = Node("
        },
        {
          "lineno": 75,
          "line": "        block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input"
        },
        {
          "lineno": 76,
          "line": "    )"
        },
        {
          "lineno": 77,
          "line": "    text_matcher_node = Node("
        },
        {
          "lineno": 78,
          "line": "        block_id=MatchTextPatternBlock().id,"
        },
        {
          "lineno": 79,
          "line": "        input_default=text_matcher_input,"
        },
        {
          "lineno": 80,
          "line": "    )"
        },
        {
          "lineno": 81,
          "line": "    reddit_comment_node = Node("
        },
        {
          "lineno": 82,
          "line": "        block_id=PostRedditCommentBlock().id,"
        },
        {
          "lineno": 83,
          "line": "        input_default=reddit_comment_input,"
        },
        {
          "lineno": 84,
          "line": "    )"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    nodes = ["
        },
        {
          "lineno": 87,
          "line": "        reddit_get_post_node,"
        },
        {
          "lineno": 88,
          "line": "        text_formatter_node,"
        },
        {
          "lineno": 89,
          "line": "        llm_call_node,"
        },
        {
          "lineno": 90,
          "line": "        text_matcher_node,"
        },
        {
          "lineno": 91,
          "line": "        reddit_comment_node,"
        },
        {
          "lineno": 92,
          "line": "    ]"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    # Links"
        },
        {
          "lineno": 95,
          "line": "    links = ["
        },
        {
          "lineno": 96,
          "line": "        Link("
        },
        {
          "lineno": 97,
          "line": "            source_id=reddit_get_post_node.id,"
        },
        {
          "lineno": 98,
          "line": "            sink_id=text_formatter_node.id,"
        },
        {
          "lineno": 99,
          "line": "            source_name=\"post\","
        },
        {
          "lineno": 100,
          "line": "            sink_name=\"values\","
        },
        {
          "lineno": 101,
          "line": "        ),"
        },
        {
          "lineno": 102,
          "line": "        Link("
        },
        {
          "lineno": 103,
          "line": "            source_id=text_formatter_node.id,"
        },
        {
          "lineno": 104,
          "line": "            sink_id=llm_call_node.id,"
        },
        {
          "lineno": 105,
          "line": "            source_name=\"output\","
        },
        {
          "lineno": 106,
          "line": "            sink_name=\"prompt\","
        },
        {
          "lineno": 107,
          "line": "        ),"
        },
        {
          "lineno": 108,
          "line": "        Link("
        },
        {
          "lineno": 109,
          "line": "            source_id=llm_call_node.id,"
        },
        {
          "lineno": 110,
          "line": "            sink_id=text_matcher_node.id,"
        },
        {
          "lineno": 111,
          "line": "            source_name=\"response\","
        },
        {
          "lineno": 112,
          "line": "            sink_name=\"data\","
        },
        {
          "lineno": 113,
          "line": "        ),"
        },
        {
          "lineno": 114,
          "line": "        Link("
        },
        {
          "lineno": 115,
          "line": "            source_id=llm_call_node.id,"
        },
        {
          "lineno": 116,
          "line": "            sink_id=text_matcher_node.id,"
        },
        {
          "lineno": 117,
          "line": "            source_name=\"response_#_is_relevant\","
        },
        {
          "lineno": 118,
          "line": "            sink_name=\"text\","
        },
        {
          "lineno": 119,
          "line": "        ),"
        },
        {
          "lineno": 120,
          "line": "        Link("
        },
        {
          "lineno": 121,
          "line": "            source_id=text_matcher_node.id,"
        },
        {
          "lineno": 122,
          "line": "            sink_id=reddit_comment_node.id,"
        },
        {
          "lineno": 123,
          "line": "            source_name=\"positive_#_post_id\","
        },
        {
          "lineno": 124,
          "line": "            sink_name=\"data_#_post_id\","
        },
        {
          "lineno": 125,
          "line": "        ),"
        },
        {
          "lineno": 126,
          "line": "        Link("
        },
        {
          "lineno": 127,
          "line": "            source_id=text_matcher_node.id,"
        },
        {
          "lineno": 128,
          "line": "            sink_id=reddit_comment_node.id,"
        },
        {
          "lineno": 129,
          "line": "            source_name=\"positive_#_marketing_text\","
        },
        {
          "lineno": 130,
          "line": "            sink_name=\"data_#_comment\","
        },
        {
          "lineno": 131,
          "line": "        ),"
        },
        {
          "lineno": 132,
          "line": "    ]"
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    # Create graph"
        },
        {
          "lineno": 135,
          "line": "    test_graph = Graph("
        },
        {
          "lineno": 136,
          "line": "        name=\"RedditMarketingAgent\","
        },
        {
          "lineno": 137,
          "line": "        description=\"Reddit marketing agent\","
        },
        {
          "lineno": 138,
          "line": "        nodes=nodes,"
        },
        {
          "lineno": 139,
          "line": "        links=links,"
        },
        {
          "lineno": 140,
          "line": "    )"
        },
        {
          "lineno": 141,
          "line": "    return test_graph"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 11,
          "label": "def create_test_graph() -> Graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 35,
              "label": "    \"\"\"\n                    subreddit\n                       ||\n                        v\n        GetRedditPostsBlock (post_id, post_title, post_body)\n                  //     ||     \\\\\n              post_id  post_title  post_body\n                 ||       ||        ||\n                 v        v         v\n              FillTextTemplateBlock (format)\n                      ||\n                      v\n            AIStructuredResponseBlock / TextRelevancy\n                 ||       ||       ||\n            post_id  is_relevant  marketing_text\n               ||       ||        ||\n               v        v         v\n                 MatchTextPatternBlock\n                 ||       ||\n              positive  negative\n                ||\n                v\n        PostRedditCommentBlock\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 36,
                  "end_line": 39,
                  "label": "    # Hardcoded inputs\n    reddit_get_post_input = {\n        \"post_limit\": 3,\n    }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 40,
                      "end_line": 47,
                      "label": "    text_formatter_input = {\n        \"format\": \"\"\"\nBased on the following post, write your marketing comment:\n* Post ID: {id}\n* Post Subreddit: {subreddit}\n* Post Title: {title}\n* Post Body: {body}\"\"\".strip(),\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 48,
                          "end_line": 61,
                          "label": "    llm_call_input = {\n        \"sys_prompt\": \"\"\"\nYou are an expert at marketing.\nYou have been tasked with picking Reddit posts that are relevant to your product.\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\nYou reply the post that you find it relevant to be replied with marketing text.\nMake sure to only comment on a relevant post.\n\"\"\",\n        \"expected_format\": {\n            \"post_id\": \"str, the reddit post id\",\n            \"is_relevant\": \"bool, whether the post is relevant for marketing\",\n            \"marketing_text\": \"str, marketing text, this is empty on irrelevant posts\",\n        },\n    }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 62,
                              "end_line": 62,
                              "label": "    text_matcher_input = {\"match\": \"true\", \"case_sensitive\": False}",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 63,
                                  "end_line": 63,
                                  "label": "    reddit_comment_input = {}",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 65,
                                      "end_line": 69,
                                      "label": "    # Nodes\n    reddit_get_post_node = Node(\n        block_id=GetRedditPostsBlock().id,\n        input_default=reddit_get_post_input,\n    )",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 70,
                                          "end_line": 73,
                                          "label": "    text_formatter_node = Node(\n        block_id=FillTextTemplateBlock().id,\n        input_default=text_formatter_input,\n    )",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 74,
                                              "end_line": 76,
                                              "label": "    llm_call_node = Node(\n        block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input\n    )",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 77,
                                                  "end_line": 80,
                                                  "label": "    text_matcher_node = Node(\n        block_id=MatchTextPatternBlock().id,\n        input_default=text_matcher_input,\n    )",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 81,
                                                      "end_line": 84,
                                                      "label": "    reddit_comment_node = Node(\n        block_id=PostRedditCommentBlock().id,\n        input_default=reddit_comment_input,\n    )",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 86,
                                                          "end_line": 92,
                                                          "label": "    nodes = [\n        reddit_get_post_node,\n        text_formatter_node,\n        llm_call_node,\n        text_matcher_node,\n        reddit_comment_node,\n    ]",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 94,
                                                              "end_line": 132,
                                                              "label": "    # Links\n    links = [\n        Link(\n            source_id=reddit_get_post_node.id,\n            sink_id=text_formatter_node.id,\n            source_name=\"post\",\n            sink_name=\"values\",\n        ),\n        Link(\n            source_id=text_formatter_node.id,\n            sink_id=llm_call_node.id,\n            source_name=\"output\",\n            sink_name=\"prompt\",\n        ),\n        Link(\n            source_id=llm_call_node.id,\n            sink_id=text_matcher_node.id,\n            source_name=\"response\",\n            sink_name=\"data\",\n        ),\n        Link(\n            source_id=llm_call_node.id,\n            sink_id=text_matcher_node.id,\n            source_name=\"response_#_is_relevant\",\n            sink_name=\"text\",\n        ),\n        Link(\n            source_id=text_matcher_node.id,\n            sink_id=reddit_comment_node.id,\n            source_name=\"positive_#_post_id\",\n            sink_name=\"data_#_post_id\",\n        ),\n        Link(\n            source_id=text_matcher_node.id,\n            sink_id=reddit_comment_node.id,\n            source_name=\"positive_#_marketing_text\",\n            sink_name=\"data_#_comment\",\n        ),\n    ]",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 134,
                                                                  "end_line": 141,
                                                                  "label": "    # Create graph\n    test_graph = Graph(\n        name=\"RedditMarketingAgent\",\n        description=\"Reddit marketing agent\",\n        nodes=nodes,\n        links=links,\n    )\n    return test_graph",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_test_user",
      "type": "function",
      "start_line": 144,
      "end_line": 151,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 144,
          "line": "async def create_test_user() -> User:"
        },
        {
          "lineno": 145,
          "line": "    test_user_data = {"
        },
        {
          "lineno": 146,
          "line": "        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\","
        },
        {
          "lineno": 147,
          "line": "        \"email\": \"testuser@example.com\","
        },
        {
          "lineno": 148,
          "line": "        \"name\": \"Test User\","
        },
        {
          "lineno": 149,
          "line": "    }"
        },
        {
          "lineno": 150,
          "line": "    user = await get_or_create_user(test_user_data)"
        },
        {
          "lineno": 151,
          "line": "    return user"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 144,
          "end_line": 151,
          "label": "async def create_test_user() -> User:\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser@example.com\",\n        \"name\": \"Test User\",\n    }\n    user = await get_or_create_user(test_user_data)\n    return user",
          "successors": []
        }
      ]
    },
    {
      "name": "reddit_marketing_agent",
      "type": "function",
      "start_line": 154,
      "end_line": 164,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 154,
          "line": "async def reddit_marketing_agent():"
        },
        {
          "lineno": 155,
          "line": "    async with SpinTestServer() as server:"
        },
        {
          "lineno": 156,
          "line": "        test_user = await create_test_user()"
        },
        {
          "lineno": 157,
          "line": "        test_graph = await create_graph(create_test_graph(), user_id=test_user.id)"
        },
        {
          "lineno": 158,
          "line": "        input_data = {\"subreddit\": \"AutoGPT\"}"
        },
        {
          "lineno": 159,
          "line": "        response = await server.agent_server.test_execute_graph("
        },
        {
          "lineno": 160,
          "line": "            test_graph.id, input_data, test_user.id"
        },
        {
          "lineno": 161,
          "line": "        )"
        },
        {
          "lineno": 162,
          "line": "        print(response)"
        },
        {
          "lineno": 163,
          "line": "        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 120)"
        },
        {
          "lineno": 164,
          "line": "        print(result)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 154,
          "end_line": 154,
          "label": "async def reddit_marketing_agent():",
          "successors": [
            {
              "id": 2,
              "start_line": 155,
              "end_line": 161,
              "label": "async with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n    input_data = {\"subreddit\": \"AutoGPT\"}\n    response = await server.agent_server.test_execute_graph(\n        test_graph.id, input_data, test_user.id\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 162,
                  "end_line": 162,
                  "label": "print(response)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 163,
                      "end_line": 163,
                      "label": "result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 120)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 164,
                          "end_line": 164,
                          "label": "print(result)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from prisma.models import User"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.blocks.llm import AIStructuredResponseGeneratorBlock"
    },
    {
      "lineno": 4,
      "line": "from backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock"
    },
    {
      "lineno": 5,
      "line": "from backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock"
    },
    {
      "lineno": 6,
      "line": "from backend.data.graph import Graph, Link, Node, create_graph"
    },
    {
      "lineno": 7,
      "line": "from backend.data.user import get_or_create_user"
    },
    {
      "lineno": 8,
      "line": "from backend.util.test import SpinTestServer, wait_execution"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 142,
      "line": ""
    },
    {
      "lineno": 143,
      "line": ""
    },
    {
      "lineno": 152,
      "line": ""
    },
    {
      "lineno": 153,
      "line": ""
    },
    {
      "lineno": 165,
      "line": ""
    },
    {
      "lineno": 166,
      "line": ""
    },
    {
      "lineno": 167,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 168,
      "line": "    import asyncio"
    },
    {
      "lineno": 169,
      "line": ""
    },
    {
      "lineno": 170,
      "line": "    asyncio.run(reddit_marketing_agent())"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "from prisma.models import User\n\nfrom backend.blocks.llm import AIStructuredResponseGeneratorBlock\nfrom backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock\nfrom backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock\nfrom backend.data.graph import Graph, Link, Node, create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution",
      "successors": [
        {
          "id": 2,
          "start_line": 167,
          "end_line": 167,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "start_line": 168,
              "end_line": 170,
              "label": "import asyncio\n\n    asyncio.run(reddit_marketing_agent())",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}