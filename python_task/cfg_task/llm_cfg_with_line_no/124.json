{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 181,
  "functions": [
    {
      "name": "extract_github_error_msg",
      "type": "function",
      "start_line": 169,
      "end_line": 181,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 169,
          "line": "def extract_github_error_msg(response: requests.Response) -> str:"
        },
        {
          "lineno": 170,
          "line": "    error_msgs = []"
        },
        {
          "lineno": 171,
          "line": "    resp = response.json()"
        },
        {
          "lineno": 172,
          "line": "    if resp.get(\"message\"):"
        },
        {
          "lineno": 173,
          "line": "        error_msgs.append(resp[\"message\"])"
        },
        {
          "lineno": 174,
          "line": "    if resp.get(\"errors\"):"
        },
        {
          "lineno": 175,
          "line": "        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])"
        },
        {
          "lineno": 176,
          "line": "    if resp.get(\"error\"):"
        },
        {
          "lineno": 177,
          "line": "        if isinstance(resp[\"error\"], dict):"
        },
        {
          "lineno": 178,
          "line": "            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))"
        },
        {
          "lineno": 179,
          "line": "        else:"
        },
        {
          "lineno": 180,
          "line": "            error_msgs.append(resp[\"error\"])"
        },
        {
          "lineno": 181,
          "line": "    return \"\\n\".join(error_msgs)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 169,
          "end_line": 171,
          "label": "def extract_github_error_msg(response: requests.Response) -> str:\n    error_msgs = []\n    resp = response.json()",
          "successors": [
            {
              "id": 2,
              "start_line": 172,
              "end_line": 173,
              "label": "if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])",
              "successors": [
                {
                  "id": 3,
                  "start_line": 174,
                  "end_line": 175,
                  "label": "if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 176,
                      "end_line": 180,
                      "label": "if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 181,
                          "end_line": 181,
                          "label": "return \"\\n\".join(error_msgs)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "GithubWebhookType",
      "type": "class",
      "start_line": 19,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "class GithubWebhookType(StrEnum):"
        },
        {
          "lineno": 20,
          "line": "    REPO = \"repo\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 19,
          "end_line": 20,
          "label": "class GithubWebhookType(StrEnum):\n    REPO = \"repo\"\n",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubWebhooksManager",
      "type": "class",
      "start_line": 23,
      "end_line": 164,
      "functions": [
        {
          "name": "validate_payload",
          "type": "function",
          "start_line": 31,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    @classmethod"
            },
            {
              "lineno": 32,
              "line": "    async def validate_payload("
            },
            {
              "lineno": 33,
              "line": "        cls, webhook: integrations.Webhook, request: Request"
            },
            {
              "lineno": 34,
              "line": "    ) -> tuple[dict, str]:"
            },
            {
              "lineno": 35,
              "line": "        if not (event_type := request.headers.get(\"X-GitHub-Event\")):"
            },
            {
              "lineno": 36,
              "line": "            raise HTTPException("
            },
            {
              "lineno": 37,
              "line": "                status_code=400, detail=\"X-GitHub-Event header is missing!\""
            },
            {
              "lineno": 38,
              "line": "            )"
            },
            {
              "lineno": 39,
              "line": ""
            },
            {
              "lineno": 40,
              "line": "        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):"
            },
            {
              "lineno": 41,
              "line": "            raise HTTPException("
            },
            {
              "lineno": 42,
              "line": "                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\""
            },
            {
              "lineno": 43,
              "line": "            )"
            },
            {
              "lineno": 44,
              "line": ""
            },
            {
              "lineno": 45,
              "line": "        payload_body = await request.body()"
            },
            {
              "lineno": 46,
              "line": "        hash_object = hmac.new("
            },
            {
              "lineno": 47,
              "line": "            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256"
            },
            {
              "lineno": 48,
              "line": "        )"
            },
            {
              "lineno": 49,
              "line": "        expected_signature = \"sha256=\" + hash_object.hexdigest()"
            },
            {
              "lineno": 50,
              "line": ""
            },
            {
              "lineno": 51,
              "line": "        if not hmac.compare_digest(expected_signature, signature_header):"
            },
            {
              "lineno": 52,
              "line": "            raise HTTPException("
            },
            {
              "lineno": 53,
              "line": "                status_code=403, detail=\"Request signatures didn't match!\""
            },
            {
              "lineno": 54,
              "line": "            )"
            },
            {
              "lineno": 55,
              "line": ""
            },
            {
              "lineno": 56,
              "line": "        payload = await request.json()"
            },
            {
              "lineno": 57,
              "line": "        if action := payload.get(\"action\"):"
            },
            {
              "lineno": 58,
              "line": "            event_type += f\".{action}\""
            },
            {
              "lineno": 59,
              "line": ""
            },
            {
              "lineno": 60,
              "line": "        return payload, event_type"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 31,
              "end_line": 34,
              "label": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 35,
                  "end_line": 38,
                  "label": "        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 40,
                      "end_line": 43,
                      "label": "        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 45,
                          "end_line": 56,
                          "label": "        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 57,
                              "end_line": 58,
                              "label": "        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 60,
                                  "end_line": 60,
                                  "label": "        return payload, event_type",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "trigger_ping",
          "type": "function",
          "start_line": 62,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    async def trigger_ping("
            },
            {
              "lineno": 63,
              "line": "        self, webhook: integrations.Webhook, credentials: Credentials | None"
            },
            {
              "lineno": 64,
              "line": "    ) -> None:"
            },
            {
              "lineno": 65,
              "line": "        if not credentials:"
            },
            {
              "lineno": 66,
              "line": "            raise ValueError(\"Credentials are required but were not passed\")"
            },
            {
              "lineno": 67,
              "line": ""
            },
            {
              "lineno": 68,
              "line": "        headers = {"
            },
            {
              "lineno": 69,
              "line": "            **self.GITHUB_API_DEFAULT_HEADERS,"
            },
            {
              "lineno": 70,
              "line": "            \"Authorization\": credentials.bearer(),"
            },
            {
              "lineno": 71,
              "line": "        }"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id"
            },
            {
              "lineno": 74,
              "line": "        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\""
            },
            {
              "lineno": 75,
              "line": ""
            },
            {
              "lineno": 76,
              "line": "        response = requests.post(ping_url, headers=headers)"
            },
            {
              "lineno": 77,
              "line": ""
            },
            {
              "lineno": 78,
              "line": "        if response.status_code != 204:"
            },
            {
              "lineno": 79,
              "line": "            error_msg = extract_github_error_msg(response)"
            },
            {
              "lineno": 80,
              "line": "            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 64,
              "label": "    async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 65,
                  "end_line": 66,
                  "label": "        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 68,
                      "end_line": 76,
                      "label": "        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 78,
                          "end_line": 80,
                          "label": "        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 82,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    async def _register_webhook("
            },
            {
              "lineno": 83,
              "line": "        self,"
            },
            {
              "lineno": 84,
              "line": "        credentials: Credentials,"
            },
            {
              "lineno": 85,
              "line": "        webhook_type: GithubWebhookType,"
            },
            {
              "lineno": 86,
              "line": "        resource: str,"
            },
            {
              "lineno": 87,
              "line": "        events: list[str],"
            },
            {
              "lineno": 88,
              "line": "        ingress_url: str,"
            },
            {
              "lineno": 89,
              "line": "        secret: str,"
            },
            {
              "lineno": 90,
              "line": "    ) -> tuple[str, dict]:"
            },
            {
              "lineno": 91,
              "line": "        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:"
            },
            {
              "lineno": 92,
              "line": "            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")"
            },
            {
              "lineno": 93,
              "line": ""
            },
            {
              "lineno": 94,
              "line": "        # Extract main event, e.g. `pull_request.opened` -> `pull_request`"
            },
            {
              "lineno": 95,
              "line": "        github_events = list({event.split(\".\")[0] for event in events})"
            },
            {
              "lineno": 96,
              "line": ""
            },
            {
              "lineno": 97,
              "line": "        headers = {"
            },
            {
              "lineno": 98,
              "line": "            **self.GITHUB_API_DEFAULT_HEADERS,"
            },
            {
              "lineno": 99,
              "line": "            \"Authorization\": credentials.bearer(),"
            },
            {
              "lineno": 100,
              "line": "        }"
            },
            {
              "lineno": 101,
              "line": "        webhook_data = {"
            },
            {
              "lineno": 102,
              "line": "            \"name\": \"web\","
            },
            {
              "lineno": 103,
              "line": "            \"active\": True,"
            },
            {
              "lineno": 104,
              "line": "            \"events\": github_events,"
            },
            {
              "lineno": 105,
              "line": "            \"config\": {"
            },
            {
              "lineno": 106,
              "line": "                \"url\": ingress_url,"
            },
            {
              "lineno": 107,
              "line": "                \"content_type\": \"json\","
            },
            {
              "lineno": 108,
              "line": "                \"insecure_ssl\": \"0\","
            },
            {
              "lineno": 109,
              "line": "                \"secret\": secret,"
            },
            {
              "lineno": 110,
              "line": "            },"
            },
            {
              "lineno": 111,
              "line": "        }"
            },
            {
              "lineno": 112,
              "line": ""
            },
            {
              "lineno": 113,
              "line": "        response = requests.post("
            },
            {
              "lineno": 114,
              "line": "            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\","
            },
            {
              "lineno": 115,
              "line": "            headers=headers,"
            },
            {
              "lineno": 116,
              "line": "            json=webhook_data,"
            },
            {
              "lineno": 117,
              "line": "        )"
            },
            {
              "lineno": 118,
              "line": ""
            },
            {
              "lineno": 119,
              "line": "        if response.status_code != 201:"
            },
            {
              "lineno": 120,
              "line": "            error_msg = extract_github_error_msg(response)"
            },
            {
              "lineno": 121,
              "line": "            if \"not found\" in error_msg.lower():"
            },
            {
              "lineno": 122,
              "line": "                error_msg = ("
            },
            {
              "lineno": 123,
              "line": "                    f\"{error_msg} \""
            },
            {
              "lineno": 124,
              "line": "                    \"(Make sure the GitHub account or API key has 'repo' or \""
            },
            {
              "lineno": 125,
              "line": "                    f\"webhook create permissions to '{resource}')\""
            },
            {
              "lineno": 126,
              "line": "                )"
            },
            {
              "lineno": 127,
              "line": "            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")"
            },
            {
              "lineno": 128,
              "line": ""
            },
            {
              "lineno": 129,
              "line": "        webhook_id = response.json()[\"id\"]"
            },
            {
              "lineno": 130,
              "line": "        config = response.json()[\"config\"]"
            },
            {
              "lineno": 131,
              "line": ""
            },
            {
              "lineno": 132,
              "line": "        return str(webhook_id), config"
            }
          ],
          "blocks": []
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 134,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 134,
              "line": "    async def _deregister_webhook("
            },
            {
              "lineno": 135,
              "line": "        self, webhook: integrations.Webhook, credentials: Credentials"
            },
            {
              "lineno": 136,
              "line": "    ) -> None:"
            },
            {
              "lineno": 137,
              "line": "        webhook_type = self.WebhookType(webhook.webhook_type)"
            },
            {
              "lineno": 138,
              "line": "        if webhook.credentials_id != credentials.id:"
            },
            {
              "lineno": 139,
              "line": "            raise ValueError("
            },
            {
              "lineno": 140,
              "line": "                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\""
            },
            {
              "lineno": 141,
              "line": "            )"
            },
            {
              "lineno": 142,
              "line": ""
            },
            {
              "lineno": 143,
              "line": "        headers = {"
            },
            {
              "lineno": 144,
              "line": "            **self.GITHUB_API_DEFAULT_HEADERS,"
            },
            {
              "lineno": 145,
              "line": "            \"Authorization\": credentials.bearer(),"
            },
            {
              "lineno": 146,
              "line": "        }"
            },
            {
              "lineno": 147,
              "line": ""
            },
            {
              "lineno": 148,
              "line": "        if webhook_type == self.WebhookType.REPO:"
            },
            {
              "lineno": 149,
              "line": "            repo = webhook.resource"
            },
            {
              "lineno": 150,
              "line": "            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa"
            },
            {
              "lineno": 151,
              "line": "        else:"
            },
            {
              "lineno": 152,
              "line": "            raise NotImplementedError("
            },
            {
              "lineno": 153,
              "line": "                f\"Unsupported webhook type '{webhook.webhook_type}'\""
            },
            {
              "lineno": 154,
              "line": "            )"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "        response = requests.delete(delete_url, headers=headers)"
            },
            {
              "lineno": 157,
              "line": ""
            },
            {
              "lineno": 158,
              "line": "        if response.status_code not in [204, 404]:"
            },
            {
              "lineno": 159,
              "line": "            # 204 means successful deletion, 404 means the webhook was already deleted"
            },
            {
              "lineno": 160,
              "line": "            error_msg = extract_github_error_msg(response)"
            },
            {
              "lineno": 161,
              "line": "            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")"
            },
            {
              "lineno": 162,
              "line": ""
            },
            {
              "lineno": 163,
              "line": "        # If we reach here, the webhook was successfully deleted or didn't exist"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 134,
              "end_line": 137,
              "label": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 138,
                  "end_line": 141,
                  "label": "        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 143,
                      "end_line": 146,
                      "label": "        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 148,
                          "end_line": 154,
                          "label": "        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 156,
                              "end_line": 156,
                              "label": "        response = requests.delete(delete_url, headers=headers)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 158,
                                  "end_line": 161,
                                  "label": "        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 163,
                                      "end_line": 163,
                                      "label": "        # If we reach here, the webhook was successfully deleted or didn't exist",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 7,
                                  "start_line": 163,
                                  "end_line": 163,
                                  "label": "        # If we reach here, the webhook was successfully deleted or didn't exist",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "class GithubWebhooksManager(BaseWebhooksManager):"
        },
        {
          "lineno": 24,
          "line": "    PROVIDER_NAME = ProviderName.GITHUB"
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "    WebhookType = GithubWebhookType"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    GITHUB_API_URL = \"https://api.github.com\""
        },
        {
          "lineno": 29,
          "line": "    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 164,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 23,
          "end_line": 24,
          "label": "class GithubWebhooksManager(BaseWebhooksManager):\n    PROVIDER_NAME = ProviderName.GITHUB",
          "successors": [
            {
              "id": 2,
              "start_line": 26,
              "end_line": 26,
              "label": "WebhookType = GithubWebhookType",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 29,
                  "label": "GITHUB_API_URL = \"https://api.github.com\"\n    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import hashlib"
    },
    {
      "lineno": 2,
      "line": "import hmac"
    },
    {
      "lineno": 3,
      "line": "import logging"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import requests"
    },
    {
      "lineno": 6,
      "line": "from fastapi import HTTPException, Request"
    },
    {
      "lineno": 7,
      "line": "from strenum import StrEnum"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data import integrations"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import Credentials"
    },
    {
      "lineno": 11,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from ._base import BaseWebhooksManager"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "# --8<-- [start:GithubWebhooksManager]"
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 165,
      "line": ""
    },
    {
      "lineno": 166,
      "line": "# --8<-- [end:GithubWebhooksManager]"
    },
    {
      "lineno": 167,
      "line": ""
    },
    {
      "lineno": 168,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import hashlib\nimport hmac\nimport logging",
      "successors": [
        {
          "id": 2,
          "start_line": 5,
          "end_line": 11,
          "label": "import requests\nfrom fastapi import HTTPException, Request\nfrom strenum import StrEnum\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName",
          "successors": [
            {
              "id": 3,
              "start_line": 13,
              "end_line": 13,
              "label": "from ._base import BaseWebhooksManager",
              "successors": [
                {
                  "id": 4,
                  "start_line": 15,
                  "end_line": 15,
                  "label": "logger = logging.getLogger(__name__)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}