{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 110,
  "functions": [],
  "classes": [
    {
      "name": "CodeExtractionBlock",
      "type": "class",
      "start_line": 7,
      "end_line": 110,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 36,
              "line": "        super().__init__("
            },
            {
              "lineno": 37,
              "line": "            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\","
            },
            {
              "lineno": 38,
              "line": "            description=\"Extracts code blocks from text and identifies their programming languages\","
            },
            {
              "lineno": 39,
              "line": "            categories={BlockCategory.TEXT},"
            },
            {
              "lineno": 40,
              "line": "            input_schema=CodeExtractionBlock.Input,"
            },
            {
              "lineno": 41,
              "line": "            output_schema=CodeExtractionBlock.Output,"
            },
            {
              "lineno": 42,
              "line": "            test_input={"
            },
            {
              "lineno": 43,
              "line": "                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\""
            },
            {
              "lineno": 44,
              "line": "            },"
            },
            {
              "lineno": 45,
              "line": "            test_output=["
            },
            {
              "lineno": 46,
              "line": "                (\"html\", \"<h1>Title</h1>\"),"
            },
            {
              "lineno": 47,
              "line": "                (\"python\", \"print('Hello World')\"),"
            },
            {
              "lineno": 48,
              "line": "                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),"
            },
            {
              "lineno": 49,
              "line": "            ],"
            },
            {
              "lineno": 50,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 35,
              "end_line": 50,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\")\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 52,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 52,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 53,
              "line": "        # List of supported programming languages with mapped aliases"
            },
            {
              "lineno": 54,
              "line": "        language_aliases = {"
            },
            {
              "lineno": 55,
              "line": "            \"html\": [\"html\", \"htm\"],"
            },
            {
              "lineno": 56,
              "line": "            \"css\": [\"css\"],"
            },
            {
              "lineno": 57,
              "line": "            \"javascript\": [\"javascript\", \"js\"],"
            },
            {
              "lineno": 58,
              "line": "            \"python\": [\"python\", \"py\"],"
            },
            {
              "lineno": 59,
              "line": "            \"sql\": [\"sql\"],"
            },
            {
              "lineno": 60,
              "line": "            \"java\": [\"java\"],"
            },
            {
              "lineno": 61,
              "line": "            \"cpp\": [\"cpp\", \"c++\"],"
            },
            {
              "lineno": 62,
              "line": "            \"csharp\": [\"csharp\", \"c#\", \"cs\"],"
            },
            {
              "lineno": 63,
              "line": "            \"json_code\": [\"json\"],"
            },
            {
              "lineno": 64,
              "line": "            \"bash\": [\"bash\", \"shell\", \"sh\"],"
            },
            {
              "lineno": 65,
              "line": "            \"php\": [\"php\"],"
            },
            {
              "lineno": 66,
              "line": "            \"ruby\": [\"ruby\", \"rb\"],"
            },
            {
              "lineno": 67,
              "line": "            \"yaml\": [\"yaml\", \"yml\"],"
            },
            {
              "lineno": 68,
              "line": "            \"markdown\": [\"markdown\", \"md\"],"
            },
            {
              "lineno": 69,
              "line": "            \"typescript\": [\"typescript\", \"ts\"],"
            },
            {
              "lineno": 70,
              "line": "            \"xml\": [\"xml\"],"
            },
            {
              "lineno": 71,
              "line": "        }"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        # Extract code for each language"
            },
            {
              "lineno": 74,
              "line": "        for canonical_name, aliases in language_aliases.items():"
            },
            {
              "lineno": 75,
              "line": "            code = \"\""
            },
            {
              "lineno": 76,
              "line": "            # Try each alias for the language"
            },
            {
              "lineno": 77,
              "line": "            for alias in aliases:"
            },
            {
              "lineno": 78,
              "line": "                code_for_alias = self.extract_code(input_data.text, alias)"
            },
            {
              "lineno": 79,
              "line": "                if code_for_alias:"
            },
            {
              "lineno": 80,
              "line": "                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias"
            },
            {
              "lineno": 81,
              "line": ""
            },
            {
              "lineno": 82,
              "line": "            if code:  # Only yield if there's actual code content"
            },
            {
              "lineno": 83,
              "line": "                yield canonical_name, code"
            },
            {
              "lineno": 84,
              "line": ""
            },
            {
              "lineno": 85,
              "line": "        # Remove all code blocks from the text to get remaining text"
            },
            {
              "lineno": 86,
              "line": "        pattern = ("
            },
            {
              "lineno": 87,
              "line": "            r\"```(?:\""
            },
            {
              "lineno": 88,
              "line": "            + \"|\".join("
            },
            {
              "lineno": 89,
              "line": "                re.escape(alias)"
            },
            {
              "lineno": 90,
              "line": "                for aliases in language_aliases.values()"
            },
            {
              "lineno": 91,
              "line": "                for alias in aliases"
            },
            {
              "lineno": 92,
              "line": "            )"
            },
            {
              "lineno": 93,
              "line": "            + r\")\\s+[\\s\\S]*?```\""
            },
            {
              "lineno": 94,
              "line": "        )"
            },
            {
              "lineno": 95,
              "line": ""
            },
            {
              "lineno": 96,
              "line": "        remaining_text = re.sub(pattern, \"\", input_data.text).strip()"
            },
            {
              "lineno": 97,
              "line": "        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)"
            },
            {
              "lineno": 98,
              "line": ""
            },
            {
              "lineno": 99,
              "line": "        if remaining_text:  # Only yield if there's remaining text"
            },
            {
              "lineno": 100,
              "line": "            yield \"remaining_text\", remaining_text"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 52,
              "end_line": 54,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n        language_aliases = {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 54,
                  "end_line": 71,
                  "label": "language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 73,
                      "end_line": 74,
                      "label": "# Extract code for each language\n        for canonical_name, aliases in language_aliases.items():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 75,
                          "end_line": 75,
                          "label": "code = \"\"",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 77,
                              "end_line": 79,
                              "label": "for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 80,
                                  "end_line": 80,
                                  "label": "code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 82,
                          "end_line": 83,
                          "label": "if code:  # Only yield if there's actual code content\n                yield canonical_name, code",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 85,
                      "end_line": 87,
                      "label": "# Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"",
                      "successors": [
                        {
                          "id": 9,
                          "start_line": 88,
                          "end_line": 94,
                          "label": "+ \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 96,
                              "end_line": 97,
                              "label": "remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)",
                              "successors": [
                                {
                                  "id": 11,
                                  "start_line": 99,
                                  "end_line": 100,
                                  "label": "if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "extract_code",
          "type": "function",
          "start_line": 102,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 102,
              "line": "    def extract_code(self, text: str, language: str) -> str:"
            },
            {
              "lineno": 103,
              "line": "        # Escape special regex characters in the language string"
            },
            {
              "lineno": 104,
              "line": "        language = re.escape(language)"
            },
            {
              "lineno": 105,
              "line": "        # Extract all code blocks enclosed in ```language``` blocks"
            },
            {
              "lineno": 106,
              "line": "        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)"
            },
            {
              "lineno": 107,
              "line": "        matches = pattern.finditer(text)"
            },
            {
              "lineno": 108,
              "line": "        # Combine all code blocks for this language with newlines between them"
            },
            {
              "lineno": 109,
              "line": "        code_blocks = [match.group(1).strip() for match in matches]"
            },
            {
              "lineno": 110,
              "line": "        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 102,
              "end_line": 109,
              "label": "    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 110,
                  "end_line": 110,
                  "label": "        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 9,
              "line": "        text: str = SchemaField("
            },
            {
              "lineno": 10,
              "line": "            description=\"Text containing code blocks to extract (e.g., AI response)\","
            },
            {
              "lineno": 11,
              "line": "            placeholder=\"Enter text containing code blocks\","
            },
            {
              "lineno": 12,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 12,
              "label": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 14,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 15,
              "line": "        html: str = SchemaField(description=\"Extracted HTML code\")"
            },
            {
              "lineno": 16,
              "line": "        css: str = SchemaField(description=\"Extracted CSS code\")"
            },
            {
              "lineno": 17,
              "line": "        javascript: str = SchemaField(description=\"Extracted JavaScript code\")"
            },
            {
              "lineno": 18,
              "line": "        python: str = SchemaField(description=\"Extracted Python code\")"
            },
            {
              "lineno": 19,
              "line": "        sql: str = SchemaField(description=\"Extracted SQL code\")"
            },
            {
              "lineno": 20,
              "line": "        java: str = SchemaField(description=\"Extracted Java code\")"
            },
            {
              "lineno": 21,
              "line": "        cpp: str = SchemaField(description=\"Extracted C++ code\")"
            },
            {
              "lineno": 22,
              "line": "        csharp: str = SchemaField(description=\"Extracted C# code\")"
            },
            {
              "lineno": 23,
              "line": "        json_code: str = SchemaField(description=\"Extracted JSON code\")"
            },
            {
              "lineno": 24,
              "line": "        bash: str = SchemaField(description=\"Extracted Bash code\")"
            },
            {
              "lineno": 25,
              "line": "        php: str = SchemaField(description=\"Extracted PHP code\")"
            },
            {
              "lineno": 26,
              "line": "        ruby: str = SchemaField(description=\"Extracted Ruby code\")"
            },
            {
              "lineno": 27,
              "line": "        yaml: str = SchemaField(description=\"Extracted YAML code\")"
            },
            {
              "lineno": 28,
              "line": "        markdown: str = SchemaField(description=\"Extracted Markdown code\")"
            },
            {
              "lineno": 29,
              "line": "        typescript: str = SchemaField(description=\"Extracted TypeScript code\")"
            },
            {
              "lineno": 30,
              "line": "        xml: str = SchemaField(description=\"Extracted XML code\")"
            },
            {
              "lineno": 31,
              "line": "        remaining_text: str = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            description=\"Remaining text after code extraction\""
            },
            {
              "lineno": 33,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 33,
              "label": "    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class CodeExtractionBlock(Block):"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 101,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 7,
          "label": "class CodeExtractionBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 13,
          "end_line": 13,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 34,
          "end_line": 34,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 51,
          "end_line": 51,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 101,
          "end_line": 101,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import re"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import re\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n",
      "successors": []
    }
  ]
}