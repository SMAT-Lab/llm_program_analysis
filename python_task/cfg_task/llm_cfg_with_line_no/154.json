{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 172,
  "functions": [],
  "classes": [
    {
      "name": "FakeResponse",
      "type": "class",
      "start_line": 12,
      "end_line": 16,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 13,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    def __init__(self, code: int, headers: dict, text: str) -> None:"
            },
            {
              "lineno": 14,
              "line": "        self.status_code = code"
            },
            {
              "lineno": 15,
              "line": "        self.headers = headers"
            },
            {
              "lineno": 16,
              "line": "        self.text = text"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 16,
              "label": "    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class FakeResponse():"
        }
      ],
      "blocks": []
    },
    {
      "name": "TestValidateLinks",
      "type": "class",
      "start_line": 19,
      "end_line": 172,
      "functions": [
        {
          "name": "setUp",
          "type": "function",
          "start_line": 21,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    def setUp(self):"
            },
            {
              "lineno": 22,
              "line": "        self.duplicate_links = ["
            },
            {
              "lineno": 23,
              "line": "            'https://www.example.com',"
            },
            {
              "lineno": 24,
              "line": "            'https://www.example.com',"
            },
            {
              "lineno": 25,
              "line": "            'https://www.example.com',"
            },
            {
              "lineno": 26,
              "line": "            'https://www.anotherexample.com',"
            },
            {
              "lineno": 27,
              "line": "        ]"
            },
            {
              "lineno": 28,
              "line": "        self.no_duplicate_links = ["
            },
            {
              "lineno": 29,
              "line": "            'https://www.firstexample.com',"
            },
            {
              "lineno": 30,
              "line": "            'https://www.secondexample.com',"
            },
            {
              "lineno": 31,
              "line": "            'https://www.anotherexample.com',"
            },
            {
              "lineno": 32,
              "line": "        ]"
            },
            {
              "lineno": 33,
              "line": ""
            },
            {
              "lineno": 34,
              "line": "        self.code_200 = 200"
            },
            {
              "lineno": 35,
              "line": "        self.code_403 = 403"
            },
            {
              "lineno": 36,
              "line": "        self.code_503 = 503"
            },
            {
              "lineno": 37,
              "line": ""
            },
            {
              "lineno": 38,
              "line": "        self.cloudflare_headers = {'Server': 'cloudflare'}"
            },
            {
              "lineno": 39,
              "line": "        self.no_cloudflare_headers = {'Server': 'google'}"
            },
            {
              "lineno": 40,
              "line": ""
            },
            {
              "lineno": 41,
              "line": "        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'"
            },
            {
              "lineno": 42,
              "line": "        self.text_without_cloudflare_flags = 'Lorem Ipsum'"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 42,
              "label": "    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'",
              "successors": []
            }
          ]
        },
        {
          "name": "test_find_link_in_text",
          "type": "function",
          "start_line": 44,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def test_find_link_in_text(self):"
            },
            {
              "lineno": 45,
              "line": "        text = \"\"\""
            },
            {
              "lineno": 46,
              "line": "            # this is valid"
            },
            {
              "lineno": 47,
              "line": ""
            },
            {
              "lineno": 48,
              "line": "            http://example.com?param1=1&param2=2#anchor"
            },
            {
              "lineno": 49,
              "line": "            https://www.example.com?param1=1&param2=2#anchor"
            },
            {
              "lineno": 50,
              "line": "            https://www.example.com.br"
            },
            {
              "lineno": 51,
              "line": "            https://www.example.com.gov.br"
            },
            {
              "lineno": 52,
              "line": "            [Example](https://www.example.com?param1=1&param2=2#anchor)"
            },
            {
              "lineno": 53,
              "line": "            lorem ipsum https://www.example.com?param1=1&param2=2#anchor"
            },
            {
              "lineno": 54,
              "line": "            https://www.example.com?param1=1&param2=2#anchor lorem ipsum"
            },
            {
              "lineno": 55,
              "line": ""
            },
            {
              "lineno": 56,
              "line": "            # this not is valid"
            },
            {
              "lineno": 57,
              "line": ""
            },
            {
              "lineno": 58,
              "line": "            example.com"
            },
            {
              "lineno": 59,
              "line": "            https:example.com"
            },
            {
              "lineno": 60,
              "line": "            https:/example.com"
            },
            {
              "lineno": 61,
              "line": "            https//example.com"
            },
            {
              "lineno": 62,
              "line": "            https//.com"
            },
            {
              "lineno": 63,
              "line": "        \"\"\""
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        links = find_links_in_text(text)"
            },
            {
              "lineno": 66,
              "line": ""
            },
            {
              "lineno": 67,
              "line": "        self.assertIsInstance(links, list)"
            },
            {
              "lineno": 68,
              "line": "        self.assertEqual(len(links), 7)"
            },
            {
              "lineno": 69,
              "line": ""
            },
            {
              "lineno": 70,
              "line": "        for link in links:"
            },
            {
              "lineno": 71,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 72,
              "line": "                self.assertIsInstance(link, str)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 64,
              "label": "    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 67,
                  "end_line": 68,
                  "label": "        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 70,
                      "end_line": 72,
                      "label": "        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_find_link_in_text_with_invalid_argument",
          "type": "function",
          "start_line": 74,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 74,
              "line": "    def test_find_link_in_text_with_invalid_argument(self):"
            },
            {
              "lineno": 75,
              "line": "        with self.assertRaises(TypeError):"
            },
            {
              "lineno": 76,
              "line": "            find_links_in_text()"
            },
            {
              "lineno": 77,
              "line": "            find_links_in_text(1)"
            },
            {
              "lineno": 78,
              "line": "            find_links_in_text(True)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 74,
              "end_line": 74,
              "label": "    def test_find_link_in_text_with_invalid_argument(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 75,
                  "end_line": 75,
                  "label": "        with self.assertRaises(TypeError):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 76,
                      "end_line": 78,
                      "label": "            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_if_check_duplicate_links_has_the_correct_return",
          "type": "function",
          "start_line": 80,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    def test_if_check_duplicate_links_has_the_correct_return(self):"
            },
            {
              "lineno": 81,
              "line": "        result_1 = check_duplicate_links(self.duplicate_links)"
            },
            {
              "lineno": 82,
              "line": "        result_2 = check_duplicate_links(self.no_duplicate_links)"
            },
            {
              "lineno": 83,
              "line": ""
            },
            {
              "lineno": 84,
              "line": "        self.assertIsInstance(result_1, tuple)"
            },
            {
              "lineno": 85,
              "line": "        self.assertIsInstance(result_2, tuple)"
            },
            {
              "lineno": 86,
              "line": ""
            },
            {
              "lineno": 87,
              "line": "        has_duplicate_links, links = result_1"
            },
            {
              "lineno": 88,
              "line": "        no_duplicate_links, no_links = result_2"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        self.assertTrue(has_duplicate_links)"
            },
            {
              "lineno": 91,
              "line": "        self.assertFalse(no_duplicate_links)"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 93,
              "line": "        self.assertIsInstance(links, list)"
            },
            {
              "lineno": 94,
              "line": "        self.assertIsInstance(no_links, list)"
            },
            {
              "lineno": 95,
              "line": ""
            },
            {
              "lineno": 96,
              "line": "        self.assertEqual(len(links), 2)"
            },
            {
              "lineno": 97,
              "line": "        self.assertEqual(len(no_links), 0)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 80,
              "end_line": 84,
              "label": "    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 85,
                  "end_line": 87,
                  "label": "        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 88,
                      "end_line": 91,
                      "label": "        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 92,
                          "end_line": 94,
                          "label": "        \n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 95,
                              "end_line": 97,
                              "label": "        \n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_if_fake_user_agent_has_a_str_as_return",
          "type": "function",
          "start_line": 99,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 99,
              "line": "    def test_if_fake_user_agent_has_a_str_as_return(self):"
            },
            {
              "lineno": 100,
              "line": "        user_agent = fake_user_agent()"
            },
            {
              "lineno": 101,
              "line": "        self.assertIsInstance(user_agent, str)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 99,
              "end_line": 101,
              "label": "    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_host_from_link",
          "type": "function",
          "start_line": 103,
          "end_line": 126,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 103,
              "line": "    def test_get_host_from_link(self):"
            },
            {
              "lineno": 104,
              "line": "        links = ["
            },
            {
              "lineno": 105,
              "line": "            'example.com',"
            },
            {
              "lineno": 106,
              "line": "            'https://example.com',"
            },
            {
              "lineno": 107,
              "line": "            'https://www.example.com',"
            },
            {
              "lineno": 108,
              "line": "            'https://www.example.com.br',"
            },
            {
              "lineno": 109,
              "line": "            'https://www.example.com/route',"
            },
            {
              "lineno": 110,
              "line": "            'https://www.example.com?p=1&q=2',"
            },
            {
              "lineno": 111,
              "line": "            'https://www.example.com#anchor'"
            },
            {
              "lineno": 112,
              "line": "        ]"
            },
            {
              "lineno": 113,
              "line": ""
            },
            {
              "lineno": 114,
              "line": "        for link in links:"
            },
            {
              "lineno": 115,
              "line": "            host = get_host_from_link(link)"
            },
            {
              "lineno": 116,
              "line": ""
            },
            {
              "lineno": 117,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 118,
              "line": "                self.assertIsInstance(host, str)"
            },
            {
              "lineno": 119,
              "line": ""
            },
            {
              "lineno": 120,
              "line": "                self.assertNotIn('://', host)"
            },
            {
              "lineno": 121,
              "line": "                self.assertNotIn('/', host)"
            },
            {
              "lineno": 122,
              "line": "                self.assertNotIn('?', host)"
            },
            {
              "lineno": 123,
              "line": "                self.assertNotIn('#', host)"
            },
            {
              "lineno": 124,
              "line": ""
            },
            {
              "lineno": 125,
              "line": "        with self.assertRaises(TypeError):"
            },
            {
              "lineno": 126,
              "line": "            get_host_from_link()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 103,
              "end_line": 113,
              "label": "    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 114,
                  "end_line": 116,
                  "label": "        for link in links:\n            host = get_host_from_link(link)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 117,
                      "end_line": 124,
                      "label": "            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 125,
                  "end_line": 126,
                  "label": "        with self.assertRaises(TypeError):\n            get_host_from_link()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
          "type": "function",
          "start_line": 128,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 128,
              "line": "    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):"
            },
            {
              "lineno": 129,
              "line": "        resp_with_cloudflare_protection_code_403 = FakeResponse("
            },
            {
              "lineno": 130,
              "line": "            code=self.code_403,"
            },
            {
              "lineno": 131,
              "line": "            headers=self.cloudflare_headers,"
            },
            {
              "lineno": 132,
              "line": "            text=self.text_with_cloudflare_flags"
            },
            {
              "lineno": 133,
              "line": "        )"
            },
            {
              "lineno": 134,
              "line": ""
            },
            {
              "lineno": 135,
              "line": "        resp_with_cloudflare_protection_code_503 = FakeResponse("
            },
            {
              "lineno": 136,
              "line": "            code=self.code_503,"
            },
            {
              "lineno": 137,
              "line": "            headers=self.cloudflare_headers,"
            },
            {
              "lineno": 138,
              "line": "            text=self.text_with_cloudflare_flags"
            },
            {
              "lineno": 139,
              "line": "        )"
            },
            {
              "lineno": 140,
              "line": ""
            },
            {
              "lineno": 141,
              "line": "        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)"
            },
            {
              "lineno": 142,
              "line": "        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)"
            },
            {
              "lineno": 143,
              "line": ""
            },
            {
              "lineno": 144,
              "line": "        self.assertTrue(result1)"
            },
            {
              "lineno": 145,
              "line": "        self.assertTrue(result2)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 128,
              "end_line": 141,
              "label": "    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 142,
                  "end_line": 145,
                  "label": "        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_has_cloudflare_protection_when_there_is_no_protection",
          "type": "function",
          "start_line": 147,
          "end_line": 172,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 147,
              "line": "    def test_has_cloudflare_protection_when_there_is_no_protection(self):"
            },
            {
              "lineno": 148,
              "line": "        resp_without_cloudflare_protection1 = FakeResponse("
            },
            {
              "lineno": 149,
              "line": "            code=self.code_200,"
            },
            {
              "lineno": 150,
              "line": "            headers=self.no_cloudflare_headers,"
            },
            {
              "lineno": 151,
              "line": "            text=self.text_without_cloudflare_flags"
            },
            {
              "lineno": 152,
              "line": "        )"
            },
            {
              "lineno": 153,
              "line": ""
            },
            {
              "lineno": 154,
              "line": "        resp_without_cloudflare_protection2 = FakeResponse("
            },
            {
              "lineno": 155,
              "line": "            code=self.code_403,"
            },
            {
              "lineno": 156,
              "line": "            headers=self.no_cloudflare_headers,"
            },
            {
              "lineno": 157,
              "line": "            text=self.text_without_cloudflare_flags"
            },
            {
              "lineno": 158,
              "line": "        )"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "        resp_without_cloudflare_protection3 = FakeResponse("
            },
            {
              "lineno": 161,
              "line": "            code=self.code_503,"
            },
            {
              "lineno": 162,
              "line": "            headers=self.no_cloudflare_headers,"
            },
            {
              "lineno": 163,
              "line": "            text=self.text_without_cloudflare_flags"
            },
            {
              "lineno": 164,
              "line": "        )"
            },
            {
              "lineno": 165,
              "line": ""
            },
            {
              "lineno": 166,
              "line": "        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)"
            },
            {
              "lineno": 167,
              "line": "        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)"
            },
            {
              "lineno": 168,
              "line": "        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)"
            },
            {
              "lineno": 169,
              "line": ""
            },
            {
              "lineno": 170,
              "line": "        self.assertFalse(result1)"
            },
            {
              "lineno": 171,
              "line": "        self.assertFalse(result2)"
            },
            {
              "lineno": 172,
              "line": "        self.assertFalse(result3)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 147,
              "end_line": 172,
              "label": "def test_has_cloudflare_protection_when_there_is_no_protection(self):\n    resp_without_cloudflare_protection1 = FakeResponse(\n        code=self.code_200,\n        headers=self.no_cloudflare_headers,\n        text=self.text_without_cloudflare_flags\n    )\n\n    resp_without_cloudflare_protection2 = FakeResponse(\n        code=self.code_403,\n        headers=self.no_cloudflare_headers,\n        text=self.text_without_cloudflare_flags\n    )\n\n    resp_without_cloudflare_protection3 = FakeResponse(\n        code=self.code_503,\n        headers=self.no_cloudflare_headers,\n        text=self.text_without_cloudflare_flags\n    )\n\n    result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n    result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n    result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n    self.assertFalse(result1)\n    self.assertFalse(result2)\n    self.assertFalse(result3)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "class TestValidateLinks(unittest.TestCase):"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 79,
          "line": ""
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 127,
          "line": ""
        },
        {
          "lineno": 146,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 19,
          "end_line": 19,
          "label": "class TestValidateLinks(unittest.TestCase):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 20,
          "end_line": 20,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 43,
          "end_line": 43,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 73,
          "end_line": 73,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 79,
          "end_line": 79,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 98,
          "end_line": 98,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 102,
          "end_line": 102,
          "label": "",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 127,
          "end_line": 127,
          "label": "",
          "successors": []
        },
        {
          "id": 9,
          "start_line": 146,
          "end_line": 146,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import unittest"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from validate.links import find_links_in_text"
    },
    {
      "lineno": 6,
      "line": "from validate.links import check_duplicate_links"
    },
    {
      "lineno": 7,
      "line": "from validate.links import fake_user_agent"
    },
    {
      "lineno": 8,
      "line": "from validate.links import get_host_from_link"
    },
    {
      "lineno": 9,
      "line": "from validate.links import has_cloudflare_protection"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# -*- coding: utf-8 -*-",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\nimport unittest",
          "successors": [
            {
              "id": 3,
              "start_line": 4,
              "end_line": 10,
              "label": "\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 17,
                      "end_line": 18,
                      "label": "\n\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}