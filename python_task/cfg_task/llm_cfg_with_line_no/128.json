{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [],
  "classes": [
    {
      "name": "BaseOAuthHandler",
      "type": "class",
      "start_line": 12,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 20,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 20,
              "end_line": 20,
              "label": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 26,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    def get_login_url(self, scopes: list[str], state: str) -> str:"
            },
            {
              "lineno": 27,
              "line": "        # --8<-- [end:BaseOAuthHandler3]"
            },
            {
              "lineno": 28,
              "line": "        \"\"\"Constructs a login URL that the user can be redirected to\"\"\""
            },
            {
              "lineno": 29,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 29,
              "label": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...",
              "successors": []
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 33,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    def exchange_code_for_tokens("
            },
            {
              "lineno": 34,
              "line": "        self, code: str, scopes: list[str]"
            },
            {
              "lineno": 35,
              "line": "    ) -> OAuth2Credentials:"
            },
            {
              "lineno": 36,
              "line": "        # --8<-- [end:BaseOAuthHandler4]"
            },
            {
              "lineno": 37,
              "line": "        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\""
            },
            {
              "lineno": 38,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 38,
              "label": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...",
              "successors": []
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 42,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:"
            },
            {
              "lineno": 43,
              "line": "        # --8<-- [end:BaseOAuthHandler5]"
            },
            {
              "lineno": 44,
              "line": "        \"\"\"Implements the token refresh mechanism\"\"\""
            },
            {
              "lineno": 45,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 45,
              "label": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...",
              "successors": []
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:"
            },
            {
              "lineno": 50,
              "line": "        # --8<-- [end:BaseOAuthHandler6]"
            },
            {
              "lineno": 51,
              "line": "        \"\"\"Revokes the given token at provider,"
            },
            {
              "lineno": 52,
              "line": "        returns False provider does not support it\"\"\""
            },
            {
              "lineno": 53,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 52,
              "label": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 53,
                  "end_line": 53,
                  "label": "        ...",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "refresh_tokens",
          "type": "function",
          "start_line": 55,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:"
            },
            {
              "lineno": 56,
              "line": "        if credentials.provider != self.PROVIDER_NAME:"
            },
            {
              "lineno": 57,
              "line": "            raise ValueError("
            },
            {
              "lineno": 58,
              "line": "                f\"{self.__class__.__name__} can not refresh tokens \""
            },
            {
              "lineno": 59,
              "line": "                f\"for other provider '{credentials.provider}'\""
            },
            {
              "lineno": 60,
              "line": "            )"
            },
            {
              "lineno": 61,
              "line": "        return self._refresh_tokens(credentials)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 55,
              "label": "    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 56,
                  "end_line": 57,
                  "label": "        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 58,
                      "end_line": 60,
                      "label": "                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 61,
                      "end_line": 61,
                      "label": "        return self._refresh_tokens(credentials)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_access_token",
          "type": "function",
          "start_line": 63,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    def get_access_token(self, credentials: OAuth2Credentials) -> str:"
            },
            {
              "lineno": 64,
              "line": "        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\""
            },
            {
              "lineno": 65,
              "line": "        if self.needs_refresh(credentials):"
            },
            {
              "lineno": 66,
              "line": "            credentials = self.refresh_tokens(credentials)"
            },
            {
              "lineno": 67,
              "line": "        return credentials.access_token.get_secret_value()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 63,
              "end_line": 64,
              "label": "    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 65,
                  "end_line": 66,
                  "label": "        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 67,
                      "end_line": 67,
                      "label": "        return credentials.access_token.get_secret_value()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 67,
                  "end_line": 67,
                  "label": "        return credentials.access_token.get_secret_value()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "needs_refresh",
          "type": "function",
          "start_line": 69,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:"
            },
            {
              "lineno": 70,
              "line": "        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\""
            },
            {
              "lineno": 71,
              "line": "        return ("
            },
            {
              "lineno": 72,
              "line": "            credentials.access_token_expires_at is not None"
            },
            {
              "lineno": 73,
              "line": "            and credentials.access_token_expires_at < int(time.time()) + 300"
            },
            {
              "lineno": 74,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 69,
              "end_line": 74,
              "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n    \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n    return (\n        credentials.access_token_expires_at is not None\n        and credentials.access_token_expires_at < int(time.time()) + 300\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "handle_default_scopes",
          "type": "function",
          "start_line": 76,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 76,
              "line": "    def handle_default_scopes(self, scopes: list[str]) -> list[str]:"
            },
            {
              "lineno": 77,
              "line": "        \"\"\"Handles the default scopes for the provider\"\"\""
            },
            {
              "lineno": 78,
              "line": "        # If scopes are empty, use the default scopes for the provider"
            },
            {
              "lineno": 79,
              "line": "        if not scopes:"
            },
            {
              "lineno": 80,
              "line": "            logger.debug("
            },
            {
              "lineno": 81,
              "line": "                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\""
            },
            {
              "lineno": 82,
              "line": "            )"
            },
            {
              "lineno": 83,
              "line": "            scopes = self.DEFAULT_SCOPES"
            },
            {
              "lineno": 84,
              "line": "        return scopes"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 76,
              "end_line": 78,
              "label": "    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider",
              "successors": [
                {
                  "id": 2,
                  "start_line": 79,
                  "end_line": 83,
                  "label": "        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 84,
                      "end_line": 84,
                      "label": "        return scopes",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class BaseOAuthHandler(ABC):"
        },
        {
          "lineno": 13,
          "line": "    # --8<-- [start:BaseOAuthHandler1]"
        },
        {
          "lineno": 14,
          "line": "    PROVIDER_NAME: ClassVar[ProviderName]"
        },
        {
          "lineno": 15,
          "line": "    DEFAULT_SCOPES: ClassVar[list[str]] = []"
        },
        {
          "lineno": 16,
          "line": "    # --8<-- [end:BaseOAuthHandler1]"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 19,
          "line": "    # --8<-- [start:BaseOAuthHandler2]"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    # --8<-- [end:BaseOAuthHandler2]"
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 25,
          "line": "    # --8<-- [start:BaseOAuthHandler3]"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 32,
          "line": "    # --8<-- [start:BaseOAuthHandler4]"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 41,
          "line": "    # --8<-- [start:BaseOAuthHandler5]"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 48,
          "line": "    # --8<-- [start:BaseOAuthHandler6]"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 75,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 16,
          "label": "class BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]",
          "successors": [
            {
              "id": 2,
              "start_line": 18,
              "end_line": 22,
              "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n\n    # --8<-- [end:BaseOAuthHandler2]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 24,
                  "end_line": 30,
                  "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 31,
                      "end_line": 39,
                      "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n\n",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 40,
                          "end_line": 46,
                          "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n\n",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 47,
                              "end_line": 54,
                              "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n\n",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import time"
    },
    {
      "lineno": 3,
      "line": "from abc import ABC, abstractmethod"
    },
    {
      "lineno": 4,
      "line": "from typing import ClassVar"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import OAuth2Credentials"
    },
    {
      "lineno": 7,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName",
      "successors": [
        {
          "id": 2,
          "start_line": 9,
          "end_line": 9,
          "label": "logger = logging.getLogger(__name__)",
          "successors": []
        }
      ]
    }
  ]
}