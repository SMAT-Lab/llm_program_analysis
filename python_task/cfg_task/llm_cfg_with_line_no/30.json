{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 273,
  "functions": [
    {
      "name": "find_links_in_text",
      "type": "function",
      "start_line": 12,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "def find_links_in_text(text: str) -> List[str]:"
        },
        {
          "lineno": 13,
          "line": "    \"\"\"Find links in a text and return a list of URLs.\"\"\""
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 15,
          "line": "    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')"
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "    raw_links = re.findall(link_pattern, text)"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    links = ["
        },
        {
          "lineno": 20,
          "line": "        str(raw_link[0]) for raw_link in raw_links"
        },
        {
          "lineno": 21,
          "line": "    ]"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    return links"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 23,
          "label": "def find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\\u00ab\\u00bb\\201c\\201d\\2018\\2019]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links",
          "successors": []
        }
      ]
    },
    {
      "name": "find_links_in_file",
      "type": "function",
      "start_line": 26,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 26,
          "line": "def find_links_in_file(filename: str) -> List[str]:"
        },
        {
          "lineno": 27,
          "line": "    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 29,
          "line": "    with open(filename, mode='r', encoding='utf-8') as file:"
        },
        {
          "lineno": 30,
          "line": "        readme = file.read()"
        },
        {
          "lineno": 31,
          "line": "        index_section = readme.find('## Index')"
        },
        {
          "lineno": 32,
          "line": "        if index_section == -1:"
        },
        {
          "lineno": 33,
          "line": "            index_section = 0"
        },
        {
          "lineno": 34,
          "line": "        content = readme[index_section:]"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    links = find_links_in_text(content)"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    return links"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 26,
          "end_line": 28,
          "label": "def find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n",
          "successors": [
            {
              "id": 2,
              "start_line": 29,
              "end_line": 34,
              "label": "with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "links = find_links_in_text(content)\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 38,
                      "end_line": 38,
                      "label": "return links\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_duplicate_links",
      "type": "function",
      "start_line": 41,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 41,
          "line": "def check_duplicate_links(links: List[str]) -> Tuple[bool, List]:"
        },
        {
          "lineno": 42,
          "line": "    \"\"\"Check for duplicated links."
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    Returns a tuple with True or False and duplicate list."
        },
        {
          "lineno": 45,
          "line": "    \"\"\""
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    seen = {}"
        },
        {
          "lineno": 48,
          "line": "    duplicates = []"
        },
        {
          "lineno": 49,
          "line": "    has_duplicate = False"
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 51,
          "line": "    for link in links:"
        },
        {
          "lineno": 52,
          "line": "        link = link.rstrip('/')"
        },
        {
          "lineno": 53,
          "line": "        if link not in seen:"
        },
        {
          "lineno": 54,
          "line": "            seen[link] = 1"
        },
        {
          "lineno": 55,
          "line": "        else:"
        },
        {
          "lineno": 56,
          "line": "            if seen[link] == 1:"
        },
        {
          "lineno": 57,
          "line": "                duplicates.append(link)"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    if duplicates:"
        },
        {
          "lineno": 60,
          "line": "        has_duplicate = True"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "    return (has_duplicate, duplicates)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 41,
          "end_line": 41,
          "label": "def check_duplicate_links(links: List[str]) -> Tuple[bool, List]:",
          "successors": [
            {
              "id": 2,
              "start_line": 42,
              "end_line": 45,
              "label": "\"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 47,
                  "end_line": 49,
                  "label": "seen = {}\n    duplicates = []\n    has_duplicate = False",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 51,
                      "end_line": 51,
                      "label": "for link in links:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 52,
                          "end_line": 53,
                          "label": "link = link.rstrip('/')\n        if link not in seen:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 54,
                              "end_line": 54,
                              "label": "seen[link] = 1",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 55,
                              "end_line": 56,
                              "label": "else:\n            if seen[link] == 1:",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 57,
                                  "end_line": 57,
                                  "label": "duplicates.append(link)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "start_line": 59,
                          "end_line": 59,
                          "label": "if duplicates:",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 60,
                              "end_line": 60,
                              "label": "has_duplicate = True",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 11,
                          "start_line": 62,
                          "end_line": 62,
                          "label": "return (has_duplicate, duplicates)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "fake_user_agent",
      "type": "function",
      "start_line": 65,
      "end_line": 75,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "def fake_user_agent() -> str:"
        },
        {
          "lineno": 66,
          "line": "    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\""
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    user_agents = ["
        },
        {
          "lineno": 69,
          "line": "        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',"
        },
        {
          "lineno": 70,
          "line": "        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',"
        },
        {
          "lineno": 71,
          "line": "        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',"
        },
        {
          "lineno": 72,
          "line": "        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',"
        },
        {
          "lineno": 73,
          "line": "    ]"
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    return random.choice(user_agents)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 65,
          "end_line": 73,
          "label": "def fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]",
          "successors": [
            {
              "id": 2,
              "start_line": 75,
              "end_line": 75,
              "label": "return random.choice(user_agents)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_host_from_link",
      "type": "function",
      "start_line": 78,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 78,
          "line": "def get_host_from_link(link: str) -> str:"
        },
        {
          "lineno": 79,
          "line": ""
        },
        {
          "lineno": 80,
          "line": "    host = link.split('://', 1)[1] if '://' in link else link"
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 82,
          "line": "    # Remove routes, arguments and anchors"
        },
        {
          "lineno": 83,
          "line": "    if '/' in host:"
        },
        {
          "lineno": 84,
          "line": "        host = host.split('/', 1)[0]"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    elif '?' in host:"
        },
        {
          "lineno": 87,
          "line": "        host = host.split('?', 1)[0]"
        },
        {
          "lineno": 88,
          "line": ""
        },
        {
          "lineno": 89,
          "line": "    elif '#' in host:"
        },
        {
          "lineno": 90,
          "line": "        host = host.split('#', 1)[0]"
        },
        {
          "lineno": 91,
          "line": ""
        },
        {
          "lineno": 92,
          "line": "    return host"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 78,
          "end_line": 80,
          "label": "def get_host_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link",
          "successors": [
            {
              "id": 2,
              "start_line": 82,
              "end_line": 83,
              "label": "# Remove routes, arguments and anchors\n    if '/' in host:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 84,
                  "end_line": 84,
                  "label": "host = host.split('/', 1)[0]",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 92,
                      "end_line": 92,
                      "label": "return host",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 86,
                  "end_line": 87,
                  "label": "elif '?' in host:\n        host = host.split('?', 1)[0]",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 92,
                      "end_line": 92,
                      "label": "return host",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 89,
                  "end_line": 90,
                  "label": "elif '#' in host:\n        host = host.split('#', 1)[0]",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 92,
                      "end_line": 92,
                      "label": "return host",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 92,
                  "end_line": 92,
                  "label": "return host",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "has_cloudflare_protection",
      "type": "function",
      "start_line": 95,
      "end_line": 149,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 95,
          "line": "def has_cloudflare_protection(resp: Response) -> bool:"
        },
        {
          "lineno": 96,
          "line": "    \"\"\"Checks if there is any cloudflare protection in the response."
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": "    Cloudflare implements multiple network protections on a given link,"
        },
        {
          "lineno": 99,
          "line": "    this script tries to detect if any of them exist in the response from request."
        },
        {
          "lineno": 100,
          "line": ""
        },
        {
          "lineno": 101,
          "line": "    Common protections have the following HTTP code as a response:"
        },
        {
          "lineno": 102,
          "line": "        - 403: When host header is missing or incorrect (and more)"
        },
        {
          "lineno": 103,
          "line": "        - 503: When DDOS protection exists"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    See more about it at:"
        },
        {
          "lineno": 106,
          "line": "        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error"
        },
        {
          "lineno": 107,
          "line": "        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors"
        },
        {
          "lineno": 108,
          "line": "        - https://www.cloudflare.com/ddos/"
        },
        {
          "lineno": 109,
          "line": "        - https://superuser.com/a/888526"
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 111,
          "line": "    Discussions in issues and pull requests:"
        },
        {
          "lineno": 112,
          "line": "        - https://github.com/public-apis/public-apis/pull/2409"
        },
        {
          "lineno": 113,
          "line": "        - https://github.com/public-apis/public-apis/issues/2960 "
        },
        {
          "lineno": 114,
          "line": "    \"\"\""
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 116,
          "line": "    code = resp.status_code"
        },
        {
          "lineno": 117,
          "line": "    server = resp.headers.get('Server') or resp.headers.get('server')"
        },
        {
          "lineno": 118,
          "line": "    cloudflare_flags = ["
        },
        {
          "lineno": 119,
          "line": "        '403 Forbidden',"
        },
        {
          "lineno": 120,
          "line": "        'cloudflare',"
        },
        {
          "lineno": 121,
          "line": "        'Cloudflare',"
        },
        {
          "lineno": 122,
          "line": "        'Security check',"
        },
        {
          "lineno": 123,
          "line": "        'Please Wait... | Cloudflare',"
        },
        {
          "lineno": 124,
          "line": "        'We are checking your browser...',"
        },
        {
          "lineno": 125,
          "line": "        'Please stand by, while we are checking your browser...',"
        },
        {
          "lineno": 126,
          "line": "        'Checking your browser before accessing',"
        },
        {
          "lineno": 127,
          "line": "        'This process is automatic.',"
        },
        {
          "lineno": 128,
          "line": "        'Your browser will redirect to your requested content shortly.',"
        },
        {
          "lineno": 129,
          "line": "        'Please allow up to 5 seconds',"
        },
        {
          "lineno": 130,
          "line": "        'DDoS protection by',"
        },
        {
          "lineno": 131,
          "line": "        'Ray ID:',"
        },
        {
          "lineno": 132,
          "line": "        'Cloudflare Ray ID:',"
        },
        {
          "lineno": 133,
          "line": "        '_cf_chl',"
        },
        {
          "lineno": 134,
          "line": "        '_cf_chl_opt',"
        },
        {
          "lineno": 135,
          "line": "        '__cf_chl_rt_tk',"
        },
        {
          "lineno": 136,
          "line": "        'cf-spinner-please-wait',"
        },
        {
          "lineno": 137,
          "line": "        'cf-spinner-redirecting'"
        },
        {
          "lineno": 138,
          "line": "    ]"
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 140,
          "line": "    if code in [403, 503] and server == 'cloudflare':"
        },
        {
          "lineno": 141,
          "line": "        html = resp.text"
        },
        {
          "lineno": 142,
          "line": ""
        },
        {
          "lineno": 143,
          "line": "        flags_found = [flag in html for flag in cloudflare_flags]"
        },
        {
          "lineno": 144,
          "line": "        any_flag_found = any(flags_found)"
        },
        {
          "lineno": 145,
          "line": ""
        },
        {
          "lineno": 146,
          "line": "        if any_flag_found:"
        },
        {
          "lineno": 147,
          "line": "            return True"
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 149,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 95,
          "end_line": 95,
          "label": "def has_cloudflare_protection(resp: Response) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 116,
              "end_line": 118,
              "label": "code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = [",
              "successors": [
                {
                  "id": 3,
                  "start_line": 140,
                  "end_line": 140,
                  "label": "if code in [403, 503] and server == 'cloudflare':",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 141,
                      "end_line": 144,
                      "label": "html = resp.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 146,
                          "end_line": 147,
                          "label": "if any_flag_found:\n            return True",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 149,
                  "end_line": 149,
                  "label": "return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_if_link_is_working",
      "type": "function",
      "start_line": 152,
      "end_line": 198,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 152,
          "line": "def check_if_link_is_working(link: str) -> Tuple[bool, str]:"
        },
        {
          "lineno": 153,
          "line": "    \"\"\"Checks if a link is working."
        },
        {
          "lineno": 154,
          "line": ""
        },
        {
          "lineno": 155,
          "line": "    If an error is identified when the request for the link occurs,"
        },
        {
          "lineno": 156,
          "line": "    the return will be a tuple with the first value True and the second"
        },
        {
          "lineno": 157,
          "line": "    value a string containing the error message."
        },
        {
          "lineno": 158,
          "line": ""
        },
        {
          "lineno": 159,
          "line": "    If no errors are identified, the return will be a tuple with the"
        },
        {
          "lineno": 160,
          "line": "    first value False and the second an empty string."
        },
        {
          "lineno": 161,
          "line": "    \"\"\""
        },
        {
          "lineno": 162,
          "line": ""
        },
        {
          "lineno": 163,
          "line": "    has_error = False"
        },
        {
          "lineno": 164,
          "line": "    error_message = ''"
        },
        {
          "lineno": 165,
          "line": ""
        },
        {
          "lineno": 166,
          "line": "    try:"
        },
        {
          "lineno": 167,
          "line": "        resp = requests.get(link, timeout=25, headers={"
        },
        {
          "lineno": 168,
          "line": "            'User-Agent': fake_user_agent(),"
        },
        {
          "lineno": 169,
          "line": "            'host': get_host_from_link(link)"
        },
        {
          "lineno": 170,
          "line": "        })"
        },
        {
          "lineno": 171,
          "line": ""
        },
        {
          "lineno": 172,
          "line": "        code = resp.status_code"
        },
        {
          "lineno": 173,
          "line": ""
        },
        {
          "lineno": 174,
          "line": "        if code >= 400 and not has_cloudflare_protection(resp):"
        },
        {
          "lineno": 175,
          "line": "            has_error = True"
        },
        {
          "lineno": 176,
          "line": "            error_message = f'ERR:CLT: {code} : {link}'"
        },
        {
          "lineno": 177,
          "line": ""
        },
        {
          "lineno": 178,
          "line": "    except requests.exceptions.SSLError as error:"
        },
        {
          "lineno": 179,
          "line": "        has_error = True"
        },
        {
          "lineno": 180,
          "line": "        error_message = f'ERR:SSL: {error} : {link}'"
        },
        {
          "lineno": 181,
          "line": ""
        },
        {
          "lineno": 182,
          "line": "    except requests.exceptions.ConnectionError as error:"
        },
        {
          "lineno": 183,
          "line": "        has_error = True"
        },
        {
          "lineno": 184,
          "line": "        error_message = f'ERR:CNT: {error} : {link}'"
        },
        {
          "lineno": 185,
          "line": ""
        },
        {
          "lineno": 186,
          "line": "    except (TimeoutError, requests.exceptions.ConnectTimeout):"
        },
        {
          "lineno": 187,
          "line": "        has_error = True"
        },
        {
          "lineno": 188,
          "line": "        error_message = f'ERR:TMO: {link}'"
        },
        {
          "lineno": 189,
          "line": ""
        },
        {
          "lineno": 190,
          "line": "    except requests.exceptions.TooManyRedirects as error:"
        },
        {
          "lineno": 191,
          "line": "        has_error = True"
        },
        {
          "lineno": 192,
          "line": "        error_message = f'ERR:TMR: {error} : {link}'"
        },
        {
          "lineno": 193,
          "line": ""
        },
        {
          "lineno": 194,
          "line": "    except (Exception, requests.exceptions.RequestException) as error:"
        },
        {
          "lineno": 195,
          "line": "        has_error = True"
        },
        {
          "lineno": 196,
          "line": "        error_message = f'ERR:UKN: {error} : {link}'"
        },
        {
          "lineno": 197,
          "line": ""
        },
        {
          "lineno": 198,
          "line": "    return (has_error, error_message)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 152,
          "end_line": 164,
          "label": "def check_if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_error = False\n    error_message = ''",
          "successors": [
            {
              "id": 2,
              "start_line": 166,
              "end_line": 177,
              "label": "try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'",
              "successors": [
                {
                  "id": 3,
                  "start_line": 178,
                  "end_line": 180,
                  "label": "except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 182,
                      "end_line": 184,
                      "label": "except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 186,
                          "end_line": 188,
                          "label": "except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 190,
                              "end_line": 192,
                              "label": "except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 194,
                                  "end_line": 196,
                                  "label": "except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 198,
                                      "end_line": 198,
                                      "label": "return (has_error, error_message)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_if_list_of_links_are_working",
      "type": "function",
      "start_line": 201,
      "end_line": 209,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 201,
          "line": "def check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:"
        },
        {
          "lineno": 202,
          "line": "    error_messages = []"
        },
        {
          "lineno": 203,
          "line": "    for link in list_of_links:"
        },
        {
          "lineno": 204,
          "line": "        has_error, error_message = check_if_link_is_working(link)"
        },
        {
          "lineno": 205,
          "line": ""
        },
        {
          "lineno": 206,
          "line": "        if has_error:"
        },
        {
          "lineno": 207,
          "line": "            error_messages.append(error_message)"
        },
        {
          "lineno": 208,
          "line": ""
        },
        {
          "lineno": 209,
          "line": "    return error_messages"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 201,
          "end_line": 202,
          "label": "def check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []",
          "successors": [
            {
              "id": 2,
              "start_line": 203,
              "end_line": 203,
              "label": "for link in list_of_links:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 204,
                  "end_line": 204,
                  "label": "has_error, error_message = check_if_link_is_working(link)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 206,
                      "end_line": 206,
                      "label": "if has_error:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 207,
                          "end_line": 207,
                          "label": "error_messages.append(error_message)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 209,
              "end_line": 209,
              "label": "return error_messages",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "start_duplicate_links_checker",
      "type": "function",
      "start_line": 212,
      "end_line": 226,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 212,
          "line": "def start_duplicate_links_checker(links: List[str]) -> None:"
        },
        {
          "lineno": 213,
          "line": ""
        },
        {
          "lineno": 214,
          "line": "    print('Checking for duplicate links...')"
        },
        {
          "lineno": 215,
          "line": ""
        },
        {
          "lineno": 216,
          "line": "    has_duplicate_link, duplicates_links = check_duplicate_links(links)"
        },
        {
          "lineno": 217,
          "line": ""
        },
        {
          "lineno": 218,
          "line": "    if has_duplicate_link:"
        },
        {
          "lineno": 219,
          "line": "        print(f'Found duplicate links:')"
        },
        {
          "lineno": 220,
          "line": ""
        },
        {
          "lineno": 221,
          "line": "        for duplicate_link in duplicates_links:"
        },
        {
          "lineno": 222,
          "line": "            print(duplicate_link)"
        },
        {
          "lineno": 223,
          "line": ""
        },
        {
          "lineno": 224,
          "line": "        sys.exit(1)"
        },
        {
          "lineno": 225,
          "line": "    else:"
        },
        {
          "lineno": 226,
          "line": "        print('No duplicate links.')"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 212,
          "end_line": 214,
          "label": "def start_duplicate_links_checker(links: List[str]) -> None:\n    print('Checking for duplicate links...')",
          "successors": [
            {
              "id": 2,
              "start_line": 216,
              "end_line": 216,
              "label": "has_duplicate_link, duplicates_links = check_duplicate_links(links)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 218,
                  "end_line": 218,
                  "label": "if has_duplicate_link:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 219,
                      "end_line": 224,
                      "label": "print(f'Found duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 225,
                      "end_line": 226,
                      "label": "else:\n        print('No duplicate links.')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "start_links_working_checker",
      "type": "function",
      "start_line": 229,
      "end_line": 242,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 229,
          "line": "def start_links_working_checker(links: List[str]) -> None:"
        },
        {
          "lineno": 230,
          "line": ""
        },
        {
          "lineno": 231,
          "line": "    print(f'Checking if {len(links)} links are working...')"
        },
        {
          "lineno": 232,
          "line": ""
        },
        {
          "lineno": 233,
          "line": "    errors = check_if_list_of_links_are_working(links)"
        },
        {
          "lineno": 234,
          "line": "    if errors:"
        },
        {
          "lineno": 235,
          "line": ""
        },
        {
          "lineno": 236,
          "line": "        num_errors = len(errors)"
        },
        {
          "lineno": 237,
          "line": "        print(f'Apparently {num_errors} links are not working properly. See in:')"
        },
        {
          "lineno": 238,
          "line": ""
        },
        {
          "lineno": 239,
          "line": "        for error_message in errors:"
        },
        {
          "lineno": 240,
          "line": "            print(error_message)"
        },
        {
          "lineno": 241,
          "line": ""
        },
        {
          "lineno": 242,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 229,
          "end_line": 229,
          "label": "def start_links_working_checker(links: List[str]) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 231,
              "end_line": 231,
              "label": "print(f'Checking if {len(links)} links are working...')",
              "successors": [
                {
                  "id": 3,
                  "start_line": 233,
                  "end_line": 233,
                  "label": "errors = check_if_list_of_links_are_working(links)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 234,
                      "end_line": 234,
                      "label": "if errors:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 236,
                          "end_line": 237,
                          "label": "num_errors = len(errors)\nprint(f'Apparently {num_errors} links are not working properly. See in:')",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 239,
                              "end_line": 240,
                              "label": "for error_message in errors:\n    print(error_message)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 242,
                                  "end_line": 242,
                                  "label": "sys.exit(1)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 245,
      "end_line": 252,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 245,
          "line": "def main(filename: str, only_duplicate_links_checker: bool) -> None:"
        },
        {
          "lineno": 246,
          "line": ""
        },
        {
          "lineno": 247,
          "line": "    links = find_links_in_file(filename)"
        },
        {
          "lineno": 248,
          "line": ""
        },
        {
          "lineno": 249,
          "line": "    start_duplicate_links_checker(links)"
        },
        {
          "lineno": 250,
          "line": ""
        },
        {
          "lineno": 251,
          "line": "    if not only_duplicate_links_checker:"
        },
        {
          "lineno": 252,
          "line": "        start_links_working_checker(links)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 245,
          "end_line": 245,
          "label": "def main(filename: str, only_duplicate_links_checker: bool) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 247,
              "end_line": 249,
              "label": "links = find_links_in_file(filename)\n\n    start_duplicate_links_checker(links)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 251,
                  "end_line": 252,
                  "label": "if not only_duplicate_links_checker:\n        start_links_working_checker(links)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import re"
    },
    {
      "lineno": 4,
      "line": "import sys"
    },
    {
      "lineno": 5,
      "line": "import random"
    },
    {
      "lineno": 6,
      "line": "from typing import List, Tuple"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "import requests"
    },
    {
      "lineno": 9,
      "line": "from requests.models import Response"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": ""
    },
    {
      "lineno": 150,
      "line": ""
    },
    {
      "lineno": 151,
      "line": ""
    },
    {
      "lineno": 199,
      "line": ""
    },
    {
      "lineno": 200,
      "line": ""
    },
    {
      "lineno": 210,
      "line": ""
    },
    {
      "lineno": 211,
      "line": ""
    },
    {
      "lineno": 227,
      "line": ""
    },
    {
      "lineno": 228,
      "line": ""
    },
    {
      "lineno": 243,
      "line": ""
    },
    {
      "lineno": 244,
      "line": ""
    },
    {
      "lineno": 253,
      "line": ""
    },
    {
      "lineno": 254,
      "line": ""
    },
    {
      "lineno": 255,
      "line": "if __name__ == '__main__':"
    },
    {
      "lineno": 256,
      "line": "    num_args = len(sys.argv)"
    },
    {
      "lineno": 257,
      "line": "    only_duplicate_links_checker = False"
    },
    {
      "lineno": 258,
      "line": ""
    },
    {
      "lineno": 259,
      "line": "    if num_args < 2:"
    },
    {
      "lineno": 260,
      "line": "        print('No .md file passed')"
    },
    {
      "lineno": 261,
      "line": "        sys.exit(1)"
    },
    {
      "lineno": 262,
      "line": "    elif num_args == 3:"
    },
    {
      "lineno": 263,
      "line": "        third_arg = sys.argv[2].lower()"
    },
    {
      "lineno": 264,
      "line": ""
    },
    {
      "lineno": 265,
      "line": "        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':"
    },
    {
      "lineno": 266,
      "line": "            only_duplicate_links_checker = True"
    },
    {
      "lineno": 267,
      "line": "        else:"
    },
    {
      "lineno": 268,
      "line": "            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')"
    },
    {
      "lineno": 269,
      "line": "            sys.exit(1)"
    },
    {
      "lineno": 270,
      "line": ""
    },
    {
      "lineno": 271,
      "line": "    filename = sys.argv[1]"
    },
    {
      "lineno": 272,
      "line": ""
    },
    {
      "lineno": 273,
      "line": "    main(filename, only_duplicate_links_checker)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 255,
      "end_line": 258,
      "label": "if __name__ == '__main__':\n    num_args = len(sys.argv)\n    only_duplicate_links_checker = False\n",
      "successors": [
        {
          "id": 2,
          "start_line": 259,
          "end_line": 261,
          "label": "if num_args < 2:\n        print('No .md file passed')\n        sys.exit(1)\n",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 262,
          "end_line": 269,
          "label": "elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n",
          "successors": [
            {
              "id": 4,
              "start_line": 271,
              "end_line": 273,
              "label": "filename = sys.argv[1]\n\n    main(filename, only_duplicate_links_checker)\n",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}